
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20013400 	.word	0x20013400
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00003101 	.word	0x00003101
   8:	00014e9f 	.word	0x00014e9f
   c:	00003131 	.word	0x00003131
		if (fdtable[fd].obj == NULL) {
  10:	00003131 	.word	0x00003131
  14:	00003131 	.word	0x00003131
  18:	00003131 	.word	0x00003131
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00002ed5 	.word	0x00002ed5
  30:	00003131 	.word	0x00003131
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00002e8d 	.word	0x00002e8d
  3c:	00014dd5 	.word	0x00014dd5

00000040 <_irq_vector_table>:
  40:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  60:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  70:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  80:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  90:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  a0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  b0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  c0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  d0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  e0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..
  f0:	000030c1 000030c1 000030c1 000030c1     .0...0...0...0..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b96e 	b.w	494 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f806 	bl	1d0 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__udivmoddi4>:
     1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1d4:	9d08      	ldr	r5, [sp, #32]
     1d6:	4604      	mov	r4, r0
     1d8:	468c      	mov	ip, r1
     1da:	2b00      	cmp	r3, #0
     1dc:	f040 8083 	bne.w	2e6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xe6>
     1e0:	428a      	cmp	r2, r1
     1e2:	4617      	mov	r7, r2
     1e4:	d947      	bls.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     1e6:	fab2 f282 	clz	r2, r2
     1ea:	b142      	cbz	r2, 1fe <__udivmoddi4+0x2e>
     1ec:	f1c2 0020 	rsb	r0, r2, #32
     1f0:	fa24 f000 	lsr.w	r0, r4, r0
     1f4:	4091      	lsls	r1, r2
     1f6:	4097      	lsls	r7, r2
     1f8:	ea40 0c01 	orr.w	ip, r0, r1
     1fc:	4094      	lsls	r4, r2
     1fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
     202:	0c23      	lsrs	r3, r4, #16
     204:	fbbc f6f8 	udiv	r6, ip, r8
     208:	fa1f fe87 	uxth.w	lr, r7
     20c:	fb08 c116 	mls	r1, r8, r6, ip
     210:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     214:	fb06 f10e 	mul.w	r1, r6, lr
     218:	4299      	cmp	r1, r3
     21a:	d909      	bls.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     21c:	18fb      	adds	r3, r7, r3
     21e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     222:	f080 8119 	bcs.w	458 <CONFIG_FLASH_SIZE+0x58>
     226:	4299      	cmp	r1, r3
     228:	f240 8116 	bls.w	458 <CONFIG_FLASH_SIZE+0x58>
     22c:	3e02      	subs	r6, #2
     22e:	443b      	add	r3, r7
     230:	1a5b      	subs	r3, r3, r1
     232:	b2a4      	uxth	r4, r4
     234:	fbb3 f0f8 	udiv	r0, r3, r8
     238:	fb08 3310 	mls	r3, r8, r0, r3
     23c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     240:	fb00 fe0e 	mul.w	lr, r0, lr
     244:	45a6      	cmp	lr, r4
     246:	d909      	bls.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     248:	193c      	adds	r4, r7, r4
     24a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     24e:	f080 8105 	bcs.w	45c <CONFIG_FLASH_SIZE+0x5c>
     252:	45a6      	cmp	lr, r4
     254:	f240 8102 	bls.w	45c <CONFIG_FLASH_SIZE+0x5c>
     258:	3802      	subs	r0, #2
     25a:	443c      	add	r4, r7
     25c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     260:	eba4 040e 	sub.w	r4, r4, lr
     264:	2600      	movs	r6, #0
     266:	b11d      	cbz	r5, 270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     268:	40d4      	lsrs	r4, r2
     26a:	2300      	movs	r3, #0
     26c:	e9c5 4300 	strd	r4, r3, [r5]
     270:	4631      	mov	r1, r6
     272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     276:	b902      	cbnz	r2, 27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     278:	deff      	udf	#255	; 0xff
     27a:	fab2 f282 	clz	r2, r2
     27e:	2a00      	cmp	r2, #0
     280:	d150      	bne.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     282:	1bcb      	subs	r3, r1, r7
     284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     288:	fa1f f887 	uxth.w	r8, r7
     28c:	2601      	movs	r6, #1
     28e:	fbb3 fcfe 	udiv	ip, r3, lr
     292:	0c21      	lsrs	r1, r4, #16
     294:	fb0e 331c 	mls	r3, lr, ip, r3
     298:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     29c:	fb08 f30c 	mul.w	r3, r8, ip
     2a0:	428b      	cmp	r3, r1
     2a2:	d907      	bls.n	2b4 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb4>
     2a4:	1879      	adds	r1, r7, r1
     2a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2aa:	d202      	bcs.n	2b2 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb2>
     2ac:	428b      	cmp	r3, r1
     2ae:	f200 80e9 	bhi.w	484 <CONFIG_FLASH_SIZE+0x84>
     2b2:	4684      	mov	ip, r0
     2b4:	1ac9      	subs	r1, r1, r3
     2b6:	b2a3      	uxth	r3, r4
     2b8:	fbb1 f0fe 	udiv	r0, r1, lr
     2bc:	fb0e 1110 	mls	r1, lr, r0, r1
     2c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2c4:	fb08 f800 	mul.w	r8, r8, r0
     2c8:	45a0      	cmp	r8, r4
     2ca:	d907      	bls.n	2dc <CONFIG_UART_MUX_RX_STACK_SIZE+0xdc>
     2cc:	193c      	adds	r4, r7, r4
     2ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2d2:	d202      	bcs.n	2da <CONFIG_UART_MUX_RX_STACK_SIZE+0xda>
     2d4:	45a0      	cmp	r8, r4
     2d6:	f200 80d9 	bhi.w	48c <CONFIG_FLASH_SIZE+0x8c>
     2da:	4618      	mov	r0, r3
     2dc:	eba4 0408 	sub.w	r4, r4, r8
     2e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2e4:	e7bf      	b.n	266 <CONFIG_UART_MUX_RX_STACK_SIZE+0x66>
     2e6:	428b      	cmp	r3, r1
     2e8:	d909      	bls.n	2fe <CONFIG_UART_MUX_RX_STACK_SIZE+0xfe>
     2ea:	2d00      	cmp	r5, #0
     2ec:	f000 80b1 	beq.w	452 <CONFIG_FLASH_SIZE+0x52>
     2f0:	2600      	movs	r6, #0
     2f2:	e9c5 0100 	strd	r0, r1, [r5]
     2f6:	4630      	mov	r0, r6
     2f8:	4631      	mov	r1, r6
     2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2fe:	fab3 f683 	clz	r6, r3
     302:	2e00      	cmp	r6, #0
     304:	d14a      	bne.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     306:	428b      	cmp	r3, r1
     308:	d302      	bcc.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     30a:	4282      	cmp	r2, r0
     30c:	f200 80b8 	bhi.w	480 <CONFIG_FLASH_SIZE+0x80>
     310:	1a84      	subs	r4, r0, r2
     312:	eb61 0103 	sbc.w	r1, r1, r3
     316:	2001      	movs	r0, #1
     318:	468c      	mov	ip, r1
     31a:	2d00      	cmp	r5, #0
     31c:	d0a8      	beq.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     31e:	e9c5 4c00 	strd	r4, ip, [r5]
     322:	e7a5      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     324:	f1c2 0320 	rsb	r3, r2, #32
     328:	fa20 f603 	lsr.w	r6, r0, r3
     32c:	4097      	lsls	r7, r2
     32e:	fa01 f002 	lsl.w	r0, r1, r2
     332:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     336:	40d9      	lsrs	r1, r3
     338:	4330      	orrs	r0, r6
     33a:	0c03      	lsrs	r3, r0, #16
     33c:	fbb1 f6fe 	udiv	r6, r1, lr
     340:	fa1f f887 	uxth.w	r8, r7
     344:	fb0e 1116 	mls	r1, lr, r6, r1
     348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     34c:	fb06 f108 	mul.w	r1, r6, r8
     350:	4299      	cmp	r1, r3
     352:	fa04 f402 	lsl.w	r4, r4, r2
     356:	d909      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     358:	18fb      	adds	r3, r7, r3
     35a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     35e:	f080 808d 	bcs.w	47c <CONFIG_FLASH_SIZE+0x7c>
     362:	4299      	cmp	r1, r3
     364:	f240 808a 	bls.w	47c <CONFIG_FLASH_SIZE+0x7c>
     368:	3e02      	subs	r6, #2
     36a:	443b      	add	r3, r7
     36c:	1a5b      	subs	r3, r3, r1
     36e:	b281      	uxth	r1, r0
     370:	fbb3 f0fe 	udiv	r0, r3, lr
     374:	fb0e 3310 	mls	r3, lr, r0, r3
     378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     37c:	fb00 f308 	mul.w	r3, r0, r8
     380:	428b      	cmp	r3, r1
     382:	d907      	bls.n	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     384:	1879      	adds	r1, r7, r1
     386:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     38a:	d273      	bcs.n	474 <CONFIG_FLASH_SIZE+0x74>
     38c:	428b      	cmp	r3, r1
     38e:	d971      	bls.n	474 <CONFIG_FLASH_SIZE+0x74>
     390:	3802      	subs	r0, #2
     392:	4439      	add	r1, r7
     394:	1acb      	subs	r3, r1, r3
     396:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
     39a:	e778      	b.n	28e <CONFIG_UART_MUX_RX_STACK_SIZE+0x8e>
     39c:	f1c6 0c20 	rsb	ip, r6, #32
     3a0:	fa03 f406 	lsl.w	r4, r3, r6
     3a4:	fa22 f30c 	lsr.w	r3, r2, ip
     3a8:	431c      	orrs	r4, r3
     3aa:	fa20 f70c 	lsr.w	r7, r0, ip
     3ae:	fa01 f306 	lsl.w	r3, r1, r6
     3b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     3b6:	fa21 f10c 	lsr.w	r1, r1, ip
     3ba:	431f      	orrs	r7, r3
     3bc:	0c3b      	lsrs	r3, r7, #16
     3be:	fbb1 f9fe 	udiv	r9, r1, lr
     3c2:	fa1f f884 	uxth.w	r8, r4
     3c6:	fb0e 1119 	mls	r1, lr, r9, r1
     3ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     3ce:	fb09 fa08 	mul.w	sl, r9, r8
     3d2:	458a      	cmp	sl, r1
     3d4:	fa02 f206 	lsl.w	r2, r2, r6
     3d8:	fa00 f306 	lsl.w	r3, r0, r6
     3dc:	d908      	bls.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     3de:	1861      	adds	r1, r4, r1
     3e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3e4:	d248      	bcs.n	478 <CONFIG_FLASH_SIZE+0x78>
     3e6:	458a      	cmp	sl, r1
     3e8:	d946      	bls.n	478 <CONFIG_FLASH_SIZE+0x78>
     3ea:	f1a9 0902 	sub.w	r9, r9, #2
     3ee:	4421      	add	r1, r4
     3f0:	eba1 010a 	sub.w	r1, r1, sl
     3f4:	b2bf      	uxth	r7, r7
     3f6:	fbb1 f0fe 	udiv	r0, r1, lr
     3fa:	fb0e 1110 	mls	r1, lr, r0, r1
     3fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
     402:	fb00 f808 	mul.w	r8, r0, r8
     406:	45b8      	cmp	r8, r7
     408:	d907      	bls.n	41a <CONFIG_FLASH_SIZE+0x1a>
     40a:	19e7      	adds	r7, r4, r7
     40c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     410:	d22e      	bcs.n	470 <CONFIG_FLASH_SIZE+0x70>
     412:	45b8      	cmp	r8, r7
     414:	d92c      	bls.n	470 <CONFIG_FLASH_SIZE+0x70>
     416:	3802      	subs	r0, #2
     418:	4427      	add	r7, r4
     41a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     41e:	eba7 0708 	sub.w	r7, r7, r8
     422:	fba0 8902 	umull	r8, r9, r0, r2
     426:	454f      	cmp	r7, r9
     428:	46c6      	mov	lr, r8
     42a:	4649      	mov	r1, r9
     42c:	d31a      	bcc.n	464 <CONFIG_FLASH_SIZE+0x64>
     42e:	d017      	beq.n	460 <CONFIG_FLASH_SIZE+0x60>
     430:	b15d      	cbz	r5, 44a <CONFIG_FLASH_SIZE+0x4a>
     432:	ebb3 020e 	subs.w	r2, r3, lr
     436:	eb67 0701 	sbc.w	r7, r7, r1
     43a:	fa07 fc0c 	lsl.w	ip, r7, ip
     43e:	40f2      	lsrs	r2, r6
     440:	ea4c 0202 	orr.w	r2, ip, r2
     444:	40f7      	lsrs	r7, r6
     446:	e9c5 2700 	strd	r2, r7, [r5]
     44a:	2600      	movs	r6, #0
     44c:	4631      	mov	r1, r6
     44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     452:	462e      	mov	r6, r5
     454:	4628      	mov	r0, r5
     456:	e70b      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     458:	4606      	mov	r6, r0
     45a:	e6e9      	b.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     45c:	4618      	mov	r0, r3
     45e:	e6fd      	b.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     460:	4543      	cmp	r3, r8
     462:	d2e5      	bcs.n	430 <CONFIG_FLASH_SIZE+0x30>
     464:	ebb8 0e02 	subs.w	lr, r8, r2
     468:	eb69 0104 	sbc.w	r1, r9, r4
     46c:	3801      	subs	r0, #1
     46e:	e7df      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     470:	4608      	mov	r0, r1
     472:	e7d2      	b.n	41a <CONFIG_FLASH_SIZE+0x1a>
     474:	4660      	mov	r0, ip
     476:	e78d      	b.n	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     478:	4681      	mov	r9, r0
     47a:	e7b9      	b.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     47c:	4666      	mov	r6, ip
     47e:	e775      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     480:	4630      	mov	r0, r6
     482:	e74a      	b.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     484:	f1ac 0c02 	sub.w	ip, ip, #2
     488:	4439      	add	r1, r7
     48a:	e713      	b.n	2b4 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb4>
     48c:	3802      	subs	r0, #2
     48e:	443c      	add	r4, r7
     490:	e724      	b.n	2dc <CONFIG_UART_MUX_RX_STACK_SIZE+0xdc>
     492:	bf00      	nop

00000494 <__aeabi_idiv0>:
     494:	4770      	bx	lr
     496:	bf00      	nop

00000498 <TfLiteIntArrayGetSizeInBytes>:
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	3301      	adds	r3, #1
     4a4:	009b      	lsls	r3, r3, #2
     4a6:	4618      	mov	r0, r3
     4a8:	370c      	adds	r7, #12
     4aa:	46bd      	mov	sp, r7
     4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b0:	4770      	bx	lr

000004b2 <TfLiteIntArrayEqual>:
     4b2:	b580      	push	{r7, lr}
     4b4:	b082      	sub	sp, #8
     4b6:	af00      	add	r7, sp, #0
     4b8:	6078      	str	r0, [r7, #4]
     4ba:	6039      	str	r1, [r7, #0]
     4bc:	687a      	ldr	r2, [r7, #4]
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	429a      	cmp	r2, r3
     4c2:	d101      	bne.n	4c8 <TfLiteIntArrayEqual+0x16>
     4c4:	2301      	movs	r3, #1
     4c6:	e010      	b.n	4ea <TfLiteIntArrayEqual+0x38>
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d002      	beq.n	4d4 <TfLiteIntArrayEqual+0x22>
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d101      	bne.n	4d8 <TfLiteIntArrayEqual+0x26>
     4d4:	2300      	movs	r3, #0
     4d6:	e008      	b.n	4ea <TfLiteIntArrayEqual+0x38>
     4d8:	683b      	ldr	r3, [r7, #0]
     4da:	6819      	ldr	r1, [r3, #0]
     4dc:	683b      	ldr	r3, [r7, #0]
     4de:	3304      	adds	r3, #4
     4e0:	461a      	mov	r2, r3
     4e2:	6878      	ldr	r0, [r7, #4]
     4e4:	f000 f805 	bl	4f2 <TfLiteIntArrayEqualsArray>
     4e8:	4603      	mov	r3, r0
     4ea:	4618      	mov	r0, r3
     4ec:	3708      	adds	r7, #8
     4ee:	46bd      	mov	sp, r7
     4f0:	bd80      	pop	{r7, pc}

000004f2 <TfLiteIntArrayEqualsArray>:
     4f2:	b480      	push	{r7}
     4f4:	b087      	sub	sp, #28
     4f6:	af00      	add	r7, sp, #0
     4f8:	60f8      	str	r0, [r7, #12]
     4fa:	60b9      	str	r1, [r7, #8]
     4fc:	607a      	str	r2, [r7, #4]
     4fe:	68fb      	ldr	r3, [r7, #12]
     500:	2b00      	cmp	r3, #0
     502:	d106      	bne.n	512 <TfLiteIntArrayEqualsArray+0x20>
     504:	68bb      	ldr	r3, [r7, #8]
     506:	2b00      	cmp	r3, #0
     508:	bf0c      	ite	eq
     50a:	2301      	moveq	r3, #1
     50c:	2300      	movne	r3, #0
     50e:	b2db      	uxtb	r3, r3
     510:	e020      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     512:	68fb      	ldr	r3, [r7, #12]
     514:	681b      	ldr	r3, [r3, #0]
     516:	68ba      	ldr	r2, [r7, #8]
     518:	429a      	cmp	r2, r3
     51a:	d001      	beq.n	520 <TfLiteIntArrayEqualsArray+0x2e>
     51c:	2300      	movs	r3, #0
     51e:	e019      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     520:	2300      	movs	r3, #0
     522:	617b      	str	r3, [r7, #20]
     524:	e010      	b.n	548 <TfLiteIntArrayEqualsArray+0x56>
     526:	68fa      	ldr	r2, [r7, #12]
     528:	697b      	ldr	r3, [r7, #20]
     52a:	009b      	lsls	r3, r3, #2
     52c:	4413      	add	r3, r2
     52e:	685a      	ldr	r2, [r3, #4]
     530:	697b      	ldr	r3, [r7, #20]
     532:	009b      	lsls	r3, r3, #2
     534:	6879      	ldr	r1, [r7, #4]
     536:	440b      	add	r3, r1
     538:	681b      	ldr	r3, [r3, #0]
     53a:	429a      	cmp	r2, r3
     53c:	d001      	beq.n	542 <TfLiteIntArrayEqualsArray+0x50>
     53e:	2300      	movs	r3, #0
     540:	e008      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     542:	697b      	ldr	r3, [r7, #20]
     544:	3301      	adds	r3, #1
     546:	617b      	str	r3, [r7, #20]
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	697a      	ldr	r2, [r7, #20]
     54e:	429a      	cmp	r2, r3
     550:	dbe9      	blt.n	526 <TfLiteIntArrayEqualsArray+0x34>
     552:	2301      	movs	r3, #1
     554:	4618      	mov	r0, r3
     556:	371c      	adds	r7, #28
     558:	46bd      	mov	sp, r7
     55a:	f85d 7b04 	ldr.w	r7, [sp], #4
     55e:	4770      	bx	lr

00000560 <TfLiteIntArrayCreate>:
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6878      	ldr	r0, [r7, #4]
     56a:	f7ff ff95 	bl	498 <TfLiteIntArrayGetSizeInBytes>
     56e:	4603      	mov	r3, r0
     570:	4618      	mov	r0, r3
     572:	f013 f905 	bl	13780 <malloc>
     576:	4603      	mov	r3, r0
     578:	60fb      	str	r3, [r7, #12]
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	687a      	ldr	r2, [r7, #4]
     57e:	601a      	str	r2, [r3, #0]
     580:	68fb      	ldr	r3, [r7, #12]
     582:	4618      	mov	r0, r3
     584:	3710      	adds	r7, #16
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}

0000058a <TfLiteIntArrayCopy>:
     58a:	b580      	push	{r7, lr}
     58c:	b084      	sub	sp, #16
     58e:	af00      	add	r7, sp, #0
     590:	6078      	str	r0, [r7, #4]
     592:	687b      	ldr	r3, [r7, #4]
     594:	2b00      	cmp	r3, #0
     596:	d101      	bne.n	59c <TfLiteIntArrayCopy+0x12>
     598:	2300      	movs	r3, #0
     59a:	e013      	b.n	5c4 <TfLiteIntArrayCopy+0x3a>
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	4618      	mov	r0, r3
     5a2:	f7ff ffdd 	bl	560 <TfLiteIntArrayCreate>
     5a6:	60f8      	str	r0, [r7, #12]
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d009      	beq.n	5c2 <TfLiteIntArrayCopy+0x38>
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	1d18      	adds	r0, r3, #4
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	1d19      	adds	r1, r3, #4
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	681b      	ldr	r3, [r3, #0]
     5ba:	009b      	lsls	r3, r3, #2
     5bc:	461a      	mov	r2, r3
     5be:	f01e f81d 	bl	1e5fc <memcpy>
     5c2:	68fb      	ldr	r3, [r7, #12]
     5c4:	4618      	mov	r0, r3
     5c6:	3710      	adds	r7, #16
     5c8:	46bd      	mov	sp, r7
     5ca:	bd80      	pop	{r7, pc}

000005cc <TfLiteIntArrayFree>:
     5cc:	b580      	push	{r7, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
     5d4:	6878      	ldr	r0, [r7, #4]
     5d6:	f013 f8db 	bl	13790 <free>
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bd80      	pop	{r7, pc}

000005e2 <TfLiteFloatArrayGetSizeInBytes>:
     5e2:	b480      	push	{r7}
     5e4:	b083      	sub	sp, #12
     5e6:	af00      	add	r7, sp, #0
     5e8:	6078      	str	r0, [r7, #4]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	3301      	adds	r3, #1
     5ee:	009b      	lsls	r3, r3, #2
     5f0:	4618      	mov	r0, r3
     5f2:	370c      	adds	r7, #12
     5f4:	46bd      	mov	sp, r7
     5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     5fa:	4770      	bx	lr

000005fc <TfLiteFloatArrayCreate>:
     5fc:	b580      	push	{r7, lr}
     5fe:	b084      	sub	sp, #16
     600:	af00      	add	r7, sp, #0
     602:	6078      	str	r0, [r7, #4]
     604:	6878      	ldr	r0, [r7, #4]
     606:	f7ff ffec 	bl	5e2 <TfLiteFloatArrayGetSizeInBytes>
     60a:	4603      	mov	r3, r0
     60c:	4618      	mov	r0, r3
     60e:	f013 f8b7 	bl	13780 <malloc>
     612:	4603      	mov	r3, r0
     614:	60fb      	str	r3, [r7, #12]
     616:	68fb      	ldr	r3, [r7, #12]
     618:	687a      	ldr	r2, [r7, #4]
     61a:	601a      	str	r2, [r3, #0]
     61c:	68fb      	ldr	r3, [r7, #12]
     61e:	4618      	mov	r0, r3
     620:	3710      	adds	r7, #16
     622:	46bd      	mov	sp, r7
     624:	bd80      	pop	{r7, pc}

00000626 <TfLiteFloatArrayFree>:
     626:	b580      	push	{r7, lr}
     628:	b082      	sub	sp, #8
     62a:	af00      	add	r7, sp, #0
     62c:	6078      	str	r0, [r7, #4]
     62e:	6878      	ldr	r0, [r7, #4]
     630:	f013 f8ae 	bl	13790 <free>
     634:	bf00      	nop
     636:	3708      	adds	r7, #8
     638:	46bd      	mov	sp, r7
     63a:	bd80      	pop	{r7, pc}

0000063c <TfLiteTensorDataFree>:
     63c:	b580      	push	{r7, lr}
     63e:	b082      	sub	sp, #8
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
     644:	687b      	ldr	r3, [r7, #4]
     646:	7d1b      	ldrb	r3, [r3, #20]
     648:	2b04      	cmp	r3, #4
     64a:	d003      	beq.n	654 <TfLiteTensorDataFree+0x18>
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	7d1b      	ldrb	r3, [r3, #20]
     650:	2b05      	cmp	r3, #5
     652:	d104      	bne.n	65e <TfLiteTensorDataFree+0x22>
     654:	687b      	ldr	r3, [r7, #4]
     656:	685b      	ldr	r3, [r3, #4]
     658:	4618      	mov	r0, r3
     65a:	f013 f899 	bl	13790 <free>
     65e:	687b      	ldr	r3, [r7, #4]
     660:	2200      	movs	r2, #0
     662:	605a      	str	r2, [r3, #4]
     664:	bf00      	nop
     666:	3708      	adds	r7, #8
     668:	46bd      	mov	sp, r7
     66a:	bd80      	pop	{r7, pc}

0000066c <TfLiteQuantizationFree>:
     66c:	b580      	push	{r7, lr}
     66e:	b084      	sub	sp, #16
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
     674:	687b      	ldr	r3, [r7, #4]
     676:	781b      	ldrb	r3, [r3, #0]
     678:	2b01      	cmp	r3, #1
     67a:	d11d      	bne.n	6b8 <TfLiteQuantizationFree+0x4c>
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	685b      	ldr	r3, [r3, #4]
     680:	60fb      	str	r3, [r7, #12]
     682:	68fb      	ldr	r3, [r7, #12]
     684:	681b      	ldr	r3, [r3, #0]
     686:	2b00      	cmp	r3, #0
     688:	d007      	beq.n	69a <TfLiteQuantizationFree+0x2e>
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	4618      	mov	r0, r3
     690:	f7ff ffc9 	bl	626 <TfLiteFloatArrayFree>
     694:	68fb      	ldr	r3, [r7, #12]
     696:	2200      	movs	r2, #0
     698:	601a      	str	r2, [r3, #0]
     69a:	68fb      	ldr	r3, [r7, #12]
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	2b00      	cmp	r3, #0
     6a0:	d007      	beq.n	6b2 <TfLiteQuantizationFree+0x46>
     6a2:	68fb      	ldr	r3, [r7, #12]
     6a4:	685b      	ldr	r3, [r3, #4]
     6a6:	4618      	mov	r0, r3
     6a8:	f7ff ff90 	bl	5cc <TfLiteIntArrayFree>
     6ac:	68fb      	ldr	r3, [r7, #12]
     6ae:	2200      	movs	r2, #0
     6b0:	605a      	str	r2, [r3, #4]
     6b2:	68f8      	ldr	r0, [r7, #12]
     6b4:	f013 f86c 	bl	13790 <free>
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	2200      	movs	r2, #0
     6bc:	605a      	str	r2, [r3, #4]
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	2200      	movs	r2, #0
     6c2:	701a      	strb	r2, [r3, #0]
     6c4:	bf00      	nop
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}

000006cc <TfLiteSparsityFree>:
     6cc:	b590      	push	{r4, r7, lr}
     6ce:	b089      	sub	sp, #36	; 0x24
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d04b      	beq.n	772 <TfLiteSparsityFree+0xa6>
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	2b00      	cmp	r3, #0
     6e0:	d007      	beq.n	6f2 <TfLiteSparsityFree+0x26>
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	4618      	mov	r0, r3
     6e8:	f7ff ff70 	bl	5cc <TfLiteIntArrayFree>
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2200      	movs	r2, #0
     6f0:	601a      	str	r2, [r3, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	685b      	ldr	r3, [r3, #4]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d007      	beq.n	70a <TfLiteSparsityFree+0x3e>
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	685b      	ldr	r3, [r3, #4]
     6fe:	4618      	mov	r0, r3
     700:	f7ff ff64 	bl	5cc <TfLiteIntArrayFree>
     704:	687b      	ldr	r3, [r7, #4]
     706:	2200      	movs	r2, #0
     708:	605a      	str	r2, [r3, #4]
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	689b      	ldr	r3, [r3, #8]
     70e:	2b00      	cmp	r3, #0
     710:	d02b      	beq.n	76a <TfLiteSparsityFree+0x9e>
     712:	2300      	movs	r3, #0
     714:	61fb      	str	r3, [r7, #28]
     716:	e01b      	b.n	750 <TfLiteSparsityFree+0x84>
     718:	687b      	ldr	r3, [r7, #4]
     71a:	689a      	ldr	r2, [r3, #8]
     71c:	69fb      	ldr	r3, [r7, #28]
     71e:	011b      	lsls	r3, r3, #4
     720:	4413      	add	r3, r2
     722:	f107 040c 	add.w	r4, r7, #12
     726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     72c:	7b3b      	ldrb	r3, [r7, #12]
     72e:	2b01      	cmp	r3, #1
     730:	d10b      	bne.n	74a <TfLiteSparsityFree+0x7e>
     732:	697b      	ldr	r3, [r7, #20]
     734:	4618      	mov	r0, r3
     736:	f7ff ff49 	bl	5cc <TfLiteIntArrayFree>
     73a:	2300      	movs	r3, #0
     73c:	617b      	str	r3, [r7, #20]
     73e:	69bb      	ldr	r3, [r7, #24]
     740:	4618      	mov	r0, r3
     742:	f7ff ff43 	bl	5cc <TfLiteIntArrayFree>
     746:	2300      	movs	r3, #0
     748:	61bb      	str	r3, [r7, #24]
     74a:	69fb      	ldr	r3, [r7, #28]
     74c:	3301      	adds	r3, #1
     74e:	61fb      	str	r3, [r7, #28]
     750:	687b      	ldr	r3, [r7, #4]
     752:	68db      	ldr	r3, [r3, #12]
     754:	69fa      	ldr	r2, [r7, #28]
     756:	429a      	cmp	r2, r3
     758:	dbde      	blt.n	718 <TfLiteSparsityFree+0x4c>
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	689b      	ldr	r3, [r3, #8]
     75e:	4618      	mov	r0, r3
     760:	f013 f816 	bl	13790 <free>
     764:	687b      	ldr	r3, [r7, #4]
     766:	2200      	movs	r2, #0
     768:	609a      	str	r2, [r3, #8]
     76a:	6878      	ldr	r0, [r7, #4]
     76c:	f013 f810 	bl	13790 <free>
     770:	e000      	b.n	774 <TfLiteSparsityFree+0xa8>
     772:	bf00      	nop
     774:	3724      	adds	r7, #36	; 0x24
     776:	46bd      	mov	sp, r7
     778:	bd90      	pop	{r4, r7, pc}

0000077a <TfLiteTensorFree>:
     77a:	b580      	push	{r7, lr}
     77c:	b082      	sub	sp, #8
     77e:	af00      	add	r7, sp, #0
     780:	6078      	str	r0, [r7, #4]
     782:	6878      	ldr	r0, [r7, #4]
     784:	f7ff ff5a 	bl	63c <TfLiteTensorDataFree>
     788:	687b      	ldr	r3, [r7, #4]
     78a:	689b      	ldr	r3, [r3, #8]
     78c:	2b00      	cmp	r3, #0
     78e:	d004      	beq.n	79a <TfLiteTensorFree+0x20>
     790:	687b      	ldr	r3, [r7, #4]
     792:	689b      	ldr	r3, [r3, #8]
     794:	4618      	mov	r0, r3
     796:	f7ff ff19 	bl	5cc <TfLiteIntArrayFree>
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	2200      	movs	r2, #0
     79e:	609a      	str	r2, [r3, #8]
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     7a4:	2b00      	cmp	r3, #0
     7a6:	d004      	beq.n	7b2 <TfLiteTensorFree+0x38>
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     7ac:	4618      	mov	r0, r3
     7ae:	f7ff ff0d 	bl	5cc <TfLiteIntArrayFree>
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	2200      	movs	r2, #0
     7b6:	63da      	str	r2, [r3, #60]	; 0x3c
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	3330      	adds	r3, #48	; 0x30
     7bc:	4618      	mov	r0, r3
     7be:	f7ff ff55 	bl	66c <TfLiteQuantizationFree>
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     7c6:	4618      	mov	r0, r3
     7c8:	f7ff ff80 	bl	6cc <TfLiteSparsityFree>
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	2200      	movs	r2, #0
     7d0:	639a      	str	r2, [r3, #56]	; 0x38
     7d2:	bf00      	nop
     7d4:	3708      	adds	r7, #8
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}

000007da <TfLiteTensorReset>:
     7da:	b082      	sub	sp, #8
     7dc:	b580      	push	{r7, lr}
     7de:	b084      	sub	sp, #16
     7e0:	af00      	add	r7, sp, #0
     7e2:	60b9      	str	r1, [r7, #8]
     7e4:	607a      	str	r2, [r7, #4]
     7e6:	61fb      	str	r3, [r7, #28]
     7e8:	4603      	mov	r3, r0
     7ea:	73fb      	strb	r3, [r7, #15]
     7ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     7ee:	f7ff ffc4 	bl	77a <TfLiteTensorFree>
     7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7f4:	7bfa      	ldrb	r2, [r7, #15]
     7f6:	701a      	strb	r2, [r3, #0]
     7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7fa:	68ba      	ldr	r2, [r7, #8]
     7fc:	621a      	str	r2, [r3, #32]
     7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     800:	687a      	ldr	r2, [r7, #4]
     802:	609a      	str	r2, [r3, #8]
     804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     806:	330c      	adds	r3, #12
     808:	f107 021c 	add.w	r2, r7, #28
     80c:	e892 0003 	ldmia.w	r2, {r0, r1}
     810:	e883 0003 	stmia.w	r3, {r0, r1}
     814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     818:	605a      	str	r2, [r3, #4]
     81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     81e:	619a      	str	r2, [r3, #24]
     820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     822:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
     826:	751a      	strb	r2, [r3, #20]
     828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     82c:	61da      	str	r2, [r3, #28]
     82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     830:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
     834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
     838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     83a:	2200      	movs	r2, #0
     83c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     842:	2200      	movs	r2, #0
     844:	635a      	str	r2, [r3, #52]	; 0x34
     846:	bf00      	nop
     848:	3710      	adds	r7, #16
     84a:	46bd      	mov	sp, r7
     84c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     850:	b002      	add	sp, #8
     852:	4770      	bx	lr

00000854 <TfLiteTensorRealloc>:
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
     85c:	6039      	str	r1, [r7, #0]
     85e:	683b      	ldr	r3, [r7, #0]
     860:	7d1b      	ldrb	r3, [r3, #20]
     862:	2b04      	cmp	r3, #4
     864:	d003      	beq.n	86e <TfLiteTensorRealloc+0x1a>
     866:	683b      	ldr	r3, [r7, #0]
     868:	7d1b      	ldrb	r3, [r3, #20]
     86a:	2b05      	cmp	r3, #5
     86c:	d11d      	bne.n	8aa <TfLiteTensorRealloc+0x56>
     86e:	683b      	ldr	r3, [r7, #0]
     870:	685b      	ldr	r3, [r3, #4]
     872:	2b00      	cmp	r3, #0
     874:	d107      	bne.n	886 <TfLiteTensorRealloc+0x32>
     876:	6878      	ldr	r0, [r7, #4]
     878:	f012 ff82 	bl	13780 <malloc>
     87c:	4603      	mov	r3, r0
     87e:	461a      	mov	r2, r3
     880:	683b      	ldr	r3, [r7, #0]
     882:	605a      	str	r2, [r3, #4]
     884:	e00d      	b.n	8a2 <TfLiteTensorRealloc+0x4e>
     886:	683b      	ldr	r3, [r7, #0]
     888:	699b      	ldr	r3, [r3, #24]
     88a:	687a      	ldr	r2, [r7, #4]
     88c:	429a      	cmp	r2, r3
     88e:	d908      	bls.n	8a2 <TfLiteTensorRealloc+0x4e>
     890:	683b      	ldr	r3, [r7, #0]
     892:	685b      	ldr	r3, [r3, #4]
     894:	6879      	ldr	r1, [r7, #4]
     896:	4618      	mov	r0, r3
     898:	f013 fa82 	bl	13da0 <realloc>
     89c:	4602      	mov	r2, r0
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	605a      	str	r2, [r3, #4]
     8a2:	683b      	ldr	r3, [r7, #0]
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	619a      	str	r2, [r3, #24]
     8a8:	e000      	b.n	8ac <TfLiteTensorRealloc+0x58>
     8aa:	bf00      	nop
     8ac:	3708      	adds	r7, #8
     8ae:	46bd      	mov	sp, r7
     8b0:	bd80      	pop	{r7, pc}

000008b2 <TfLiteTypeGetName>:
     8b2:	b480      	push	{r7}
     8b4:	b083      	sub	sp, #12
     8b6:	af00      	add	r7, sp, #0
     8b8:	4603      	mov	r3, r0
     8ba:	71fb      	strb	r3, [r7, #7]
     8bc:	79fb      	ldrb	r3, [r7, #7]
     8be:	2b0b      	cmp	r3, #11
     8c0:	d832      	bhi.n	928 <TfLiteTypeGetName+0x76>
     8c2:	a201      	add	r2, pc, #4	; (adr r2, 8c8 <TfLiteTypeGetName+0x16>)
     8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     8c8:	000008f9 	.word	0x000008f9
     8cc:	000008fd 	.word	0x000008fd
     8d0:	00000905 	.word	0x00000905
     8d4:	00000909 	.word	0x00000909
     8d8:	00000911 	.word	0x00000911
     8dc:	0000091d 	.word	0x0000091d
     8e0:	00000915 	.word	0x00000915
     8e4:	00000901 	.word	0x00000901
     8e8:	00000919 	.word	0x00000919
     8ec:	0000090d 	.word	0x0000090d
     8f0:	00000921 	.word	0x00000921
     8f4:	00000925 	.word	0x00000925
     8f8:	4b0f      	ldr	r3, [pc, #60]	; (938 <TfLiteTypeGetName+0x86>)
     8fa:	e016      	b.n	92a <TfLiteTypeGetName+0x78>
     8fc:	4b0f      	ldr	r3, [pc, #60]	; (93c <TfLiteTypeGetName+0x8a>)
     8fe:	e014      	b.n	92a <TfLiteTypeGetName+0x78>
     900:	4b0f      	ldr	r3, [pc, #60]	; (940 <TfLiteTypeGetName+0x8e>)
     902:	e012      	b.n	92a <TfLiteTypeGetName+0x78>
     904:	4b0f      	ldr	r3, [pc, #60]	; (944 <TfLiteTypeGetName+0x92>)
     906:	e010      	b.n	92a <TfLiteTypeGetName+0x78>
     908:	4b0f      	ldr	r3, [pc, #60]	; (948 <TfLiteTypeGetName+0x96>)
     90a:	e00e      	b.n	92a <TfLiteTypeGetName+0x78>
     90c:	4b0f      	ldr	r3, [pc, #60]	; (94c <TfLiteTypeGetName+0x9a>)
     90e:	e00c      	b.n	92a <TfLiteTypeGetName+0x78>
     910:	4b0f      	ldr	r3, [pc, #60]	; (950 <TfLiteTypeGetName+0x9e>)
     912:	e00a      	b.n	92a <TfLiteTypeGetName+0x78>
     914:	4b0f      	ldr	r3, [pc, #60]	; (954 <TfLiteTypeGetName+0xa2>)
     916:	e008      	b.n	92a <TfLiteTypeGetName+0x78>
     918:	4b0f      	ldr	r3, [pc, #60]	; (958 <TfLiteTypeGetName+0xa6>)
     91a:	e006      	b.n	92a <TfLiteTypeGetName+0x78>
     91c:	4b0f      	ldr	r3, [pc, #60]	; (95c <TfLiteTypeGetName+0xaa>)
     91e:	e004      	b.n	92a <TfLiteTypeGetName+0x78>
     920:	4b0f      	ldr	r3, [pc, #60]	; (960 <TfLiteTypeGetName+0xae>)
     922:	e002      	b.n	92a <TfLiteTypeGetName+0x78>
     924:	4b0f      	ldr	r3, [pc, #60]	; (964 <TfLiteTypeGetName+0xb2>)
     926:	e000      	b.n	92a <TfLiteTypeGetName+0x78>
     928:	4b0f      	ldr	r3, [pc, #60]	; (968 <TfLiteTypeGetName+0xb6>)
     92a:	4618      	mov	r0, r3
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	f85d 7b04 	ldr.w	r7, [sp], #4
     934:	4770      	bx	lr
     936:	bf00      	nop
     938:	0001ec00 	.word	0x0001ec00
     93c:	0001ec08 	.word	0x0001ec08
     940:	0001ec10 	.word	0x0001ec10
     944:	0001ec18 	.word	0x0001ec18
     948:	0001ec20 	.word	0x0001ec20
     94c:	0001ec28 	.word	0x0001ec28
     950:	0001ec30 	.word	0x0001ec30
     954:	0001ec38 	.word	0x0001ec38
     958:	0001ec40 	.word	0x0001ec40
     95c:	0001ec4c 	.word	0x0001ec4c
     960:	0001ec54 	.word	0x0001ec54
     964:	0001ec5c 	.word	0x0001ec5c
     968:	0001ec64 	.word	0x0001ec64

0000096c <TfLiteDelegateCreate>:
     96c:	b5b0      	push	{r4, r5, r7, lr}
     96e:	b08a      	sub	sp, #40	; 0x28
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	f107 0308 	add.w	r3, r7, #8
     978:	2220      	movs	r2, #32
     97a:	2100      	movs	r1, #0
     97c:	4618      	mov	r0, r3
     97e:	f01d fe4b 	bl	1e618 <memset>
     982:	687b      	ldr	r3, [r7, #4]
     984:	461d      	mov	r5, r3
     986:	f107 0408 	add.w	r4, r7, #8
     98a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     98c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     98e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     992:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     996:	6878      	ldr	r0, [r7, #4]
     998:	3728      	adds	r7, #40	; 0x28
     99a:	46bd      	mov	sp, r7
     99c:	bdb0      	pop	{r4, r5, r7, pc}
     99e:	bf00      	nop

000009a0 <__aeabi_drsub>:
     9a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     9a4:	e002      	b.n	9ac <__adddf3>
     9a6:	bf00      	nop

000009a8 <__aeabi_dsub>:
     9a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000009ac <__adddf3>:
     9ac:	b530      	push	{r4, r5, lr}
     9ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     9b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     9b6:	ea94 0f05 	teq	r4, r5
     9ba:	bf08      	it	eq
     9bc:	ea90 0f02 	teqeq	r0, r2
     9c0:	bf1f      	itttt	ne
     9c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     9c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     9ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     9ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9d2:	f000 80e2 	beq.w	b9a <__adddf3+0x1ee>
     9d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     9da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     9de:	bfb8      	it	lt
     9e0:	426d      	neglt	r5, r5
     9e2:	dd0c      	ble.n	9fe <__adddf3+0x52>
     9e4:	442c      	add	r4, r5
     9e6:	ea80 0202 	eor.w	r2, r0, r2
     9ea:	ea81 0303 	eor.w	r3, r1, r3
     9ee:	ea82 0000 	eor.w	r0, r2, r0
     9f2:	ea83 0101 	eor.w	r1, r3, r1
     9f6:	ea80 0202 	eor.w	r2, r0, r2
     9fa:	ea81 0303 	eor.w	r3, r1, r3
     9fe:	2d36      	cmp	r5, #54	; 0x36
     a00:	bf88      	it	hi
     a02:	bd30      	pophi	{r4, r5, pc}
     a04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
     a0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     a10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     a14:	d002      	beq.n	a1c <__adddf3+0x70>
     a16:	4240      	negs	r0, r0
     a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
     a24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     a28:	d002      	beq.n	a30 <__adddf3+0x84>
     a2a:	4252      	negs	r2, r2
     a2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a30:	ea94 0f05 	teq	r4, r5
     a34:	f000 80a7 	beq.w	b86 <__adddf3+0x1da>
     a38:	f1a4 0401 	sub.w	r4, r4, #1
     a3c:	f1d5 0e20 	rsbs	lr, r5, #32
     a40:	db0d      	blt.n	a5e <__adddf3+0xb2>
     a42:	fa02 fc0e 	lsl.w	ip, r2, lr
     a46:	fa22 f205 	lsr.w	r2, r2, r5
     a4a:	1880      	adds	r0, r0, r2
     a4c:	f141 0100 	adc.w	r1, r1, #0
     a50:	fa03 f20e 	lsl.w	r2, r3, lr
     a54:	1880      	adds	r0, r0, r2
     a56:	fa43 f305 	asr.w	r3, r3, r5
     a5a:	4159      	adcs	r1, r3
     a5c:	e00e      	b.n	a7c <__adddf3+0xd0>
     a5e:	f1a5 0520 	sub.w	r5, r5, #32
     a62:	f10e 0e20 	add.w	lr, lr, #32
     a66:	2a01      	cmp	r2, #1
     a68:	fa03 fc0e 	lsl.w	ip, r3, lr
     a6c:	bf28      	it	cs
     a6e:	f04c 0c02 	orrcs.w	ip, ip, #2
     a72:	fa43 f305 	asr.w	r3, r3, r5
     a76:	18c0      	adds	r0, r0, r3
     a78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a80:	d507      	bpl.n	a92 <__adddf3+0xe6>
     a82:	f04f 0e00 	mov.w	lr, #0
     a86:	f1dc 0c00 	rsbs	ip, ip, #0
     a8a:	eb7e 0000 	sbcs.w	r0, lr, r0
     a8e:	eb6e 0101 	sbc.w	r1, lr, r1
     a92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     a96:	d31b      	bcc.n	ad0 <__adddf3+0x124>
     a98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     a9c:	d30c      	bcc.n	ab8 <__adddf3+0x10c>
     a9e:	0849      	lsrs	r1, r1, #1
     aa0:	ea5f 0030 	movs.w	r0, r0, rrx
     aa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     aa8:	f104 0401 	add.w	r4, r4, #1
     aac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     ab0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     ab4:	f080 809a 	bcs.w	bec <__adddf3+0x240>
     ab8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     abc:	bf08      	it	eq
     abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     ac2:	f150 0000 	adcs.w	r0, r0, #0
     ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     aca:	ea41 0105 	orr.w	r1, r1, r5
     ace:	bd30      	pop	{r4, r5, pc}
     ad0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     ad4:	4140      	adcs	r0, r0
     ad6:	eb41 0101 	adc.w	r1, r1, r1
     ada:	3c01      	subs	r4, #1
     adc:	bf28      	it	cs
     ade:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     ae2:	d2e9      	bcs.n	ab8 <__adddf3+0x10c>
     ae4:	f091 0f00 	teq	r1, #0
     ae8:	bf04      	itt	eq
     aea:	4601      	moveq	r1, r0
     aec:	2000      	moveq	r0, #0
     aee:	fab1 f381 	clz	r3, r1
     af2:	bf08      	it	eq
     af4:	3320      	addeq	r3, #32
     af6:	f1a3 030b 	sub.w	r3, r3, #11
     afa:	f1b3 0220 	subs.w	r2, r3, #32
     afe:	da0c      	bge.n	b1a <__adddf3+0x16e>
     b00:	320c      	adds	r2, #12
     b02:	dd08      	ble.n	b16 <__adddf3+0x16a>
     b04:	f102 0c14 	add.w	ip, r2, #20
     b08:	f1c2 020c 	rsb	r2, r2, #12
     b0c:	fa01 f00c 	lsl.w	r0, r1, ip
     b10:	fa21 f102 	lsr.w	r1, r1, r2
     b14:	e00c      	b.n	b30 <__adddf3+0x184>
     b16:	f102 0214 	add.w	r2, r2, #20
     b1a:	bfd8      	it	le
     b1c:	f1c2 0c20 	rsble	ip, r2, #32
     b20:	fa01 f102 	lsl.w	r1, r1, r2
     b24:	fa20 fc0c 	lsr.w	ip, r0, ip
     b28:	bfdc      	itt	le
     b2a:	ea41 010c 	orrle.w	r1, r1, ip
     b2e:	4090      	lslle	r0, r2
     b30:	1ae4      	subs	r4, r4, r3
     b32:	bfa2      	ittt	ge
     b34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     b38:	4329      	orrge	r1, r5
     b3a:	bd30      	popge	{r4, r5, pc}
     b3c:	ea6f 0404 	mvn.w	r4, r4
     b40:	3c1f      	subs	r4, #31
     b42:	da1c      	bge.n	b7e <__adddf3+0x1d2>
     b44:	340c      	adds	r4, #12
     b46:	dc0e      	bgt.n	b66 <__adddf3+0x1ba>
     b48:	f104 0414 	add.w	r4, r4, #20
     b4c:	f1c4 0220 	rsb	r2, r4, #32
     b50:	fa20 f004 	lsr.w	r0, r0, r4
     b54:	fa01 f302 	lsl.w	r3, r1, r2
     b58:	ea40 0003 	orr.w	r0, r0, r3
     b5c:	fa21 f304 	lsr.w	r3, r1, r4
     b60:	ea45 0103 	orr.w	r1, r5, r3
     b64:	bd30      	pop	{r4, r5, pc}
     b66:	f1c4 040c 	rsb	r4, r4, #12
     b6a:	f1c4 0220 	rsb	r2, r4, #32
     b6e:	fa20 f002 	lsr.w	r0, r0, r2
     b72:	fa01 f304 	lsl.w	r3, r1, r4
     b76:	ea40 0003 	orr.w	r0, r0, r3
     b7a:	4629      	mov	r1, r5
     b7c:	bd30      	pop	{r4, r5, pc}
     b7e:	fa21 f004 	lsr.w	r0, r1, r4
     b82:	4629      	mov	r1, r5
     b84:	bd30      	pop	{r4, r5, pc}
     b86:	f094 0f00 	teq	r4, #0
     b8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     b8e:	bf06      	itte	eq
     b90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     b94:	3401      	addeq	r4, #1
     b96:	3d01      	subne	r5, #1
     b98:	e74e      	b.n	a38 <__adddf3+0x8c>
     b9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     b9e:	bf18      	it	ne
     ba0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     ba4:	d029      	beq.n	bfa <__adddf3+0x24e>
     ba6:	ea94 0f05 	teq	r4, r5
     baa:	bf08      	it	eq
     bac:	ea90 0f02 	teqeq	r0, r2
     bb0:	d005      	beq.n	bbe <__adddf3+0x212>
     bb2:	ea54 0c00 	orrs.w	ip, r4, r0
     bb6:	bf04      	itt	eq
     bb8:	4619      	moveq	r1, r3
     bba:	4610      	moveq	r0, r2
     bbc:	bd30      	pop	{r4, r5, pc}
     bbe:	ea91 0f03 	teq	r1, r3
     bc2:	bf1e      	ittt	ne
     bc4:	2100      	movne	r1, #0
     bc6:	2000      	movne	r0, #0
     bc8:	bd30      	popne	{r4, r5, pc}
     bca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     bce:	d105      	bne.n	bdc <__adddf3+0x230>
     bd0:	0040      	lsls	r0, r0, #1
     bd2:	4149      	adcs	r1, r1
     bd4:	bf28      	it	cs
     bd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     bda:	bd30      	pop	{r4, r5, pc}
     bdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     be0:	bf3c      	itt	cc
     be2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     be6:	bd30      	popcc	{r4, r5, pc}
     be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     bec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     bf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     bf4:	f04f 0000 	mov.w	r0, #0
     bf8:	bd30      	pop	{r4, r5, pc}
     bfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     bfe:	bf1a      	itte	ne
     c00:	4619      	movne	r1, r3
     c02:	4610      	movne	r0, r2
     c04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     c08:	bf1c      	itt	ne
     c0a:	460b      	movne	r3, r1
     c0c:	4602      	movne	r2, r0
     c0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     c12:	bf06      	itte	eq
     c14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     c18:	ea91 0f03 	teqeq	r1, r3
     c1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     c20:	bd30      	pop	{r4, r5, pc}
     c22:	bf00      	nop

00000c24 <__aeabi_ui2d>:
     c24:	f090 0f00 	teq	r0, #0
     c28:	bf04      	itt	eq
     c2a:	2100      	moveq	r1, #0
     c2c:	4770      	bxeq	lr
     c2e:	b530      	push	{r4, r5, lr}
     c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
     c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
     c38:	f04f 0500 	mov.w	r5, #0
     c3c:	f04f 0100 	mov.w	r1, #0
     c40:	e750      	b.n	ae4 <__adddf3+0x138>
     c42:	bf00      	nop

00000c44 <__aeabi_i2d>:
     c44:	f090 0f00 	teq	r0, #0
     c48:	bf04      	itt	eq
     c4a:	2100      	moveq	r1, #0
     c4c:	4770      	bxeq	lr
     c4e:	b530      	push	{r4, r5, lr}
     c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
     c54:	f104 0432 	add.w	r4, r4, #50	; 0x32
     c58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     c5c:	bf48      	it	mi
     c5e:	4240      	negmi	r0, r0
     c60:	f04f 0100 	mov.w	r1, #0
     c64:	e73e      	b.n	ae4 <__adddf3+0x138>
     c66:	bf00      	nop

00000c68 <__aeabi_f2d>:
     c68:	0042      	lsls	r2, r0, #1
     c6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     c6e:	ea4f 0131 	mov.w	r1, r1, rrx
     c72:	ea4f 7002 	mov.w	r0, r2, lsl #28
     c76:	bf1f      	itttt	ne
     c78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     c7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     c80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     c84:	4770      	bxne	lr
     c86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     c8a:	bf08      	it	eq
     c8c:	4770      	bxeq	lr
     c8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     c92:	bf04      	itt	eq
     c94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     c98:	4770      	bxeq	lr
     c9a:	b530      	push	{r4, r5, lr}
     c9c:	f44f 7460 	mov.w	r4, #896	; 0x380
     ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     ca8:	e71c      	b.n	ae4 <__adddf3+0x138>
     caa:	bf00      	nop

00000cac <__aeabi_ul2d>:
     cac:	ea50 0201 	orrs.w	r2, r0, r1
     cb0:	bf08      	it	eq
     cb2:	4770      	bxeq	lr
     cb4:	b530      	push	{r4, r5, lr}
     cb6:	f04f 0500 	mov.w	r5, #0
     cba:	e00a      	b.n	cd2 <__aeabi_l2d+0x16>

00000cbc <__aeabi_l2d>:
     cbc:	ea50 0201 	orrs.w	r2, r0, r1
     cc0:	bf08      	it	eq
     cc2:	4770      	bxeq	lr
     cc4:	b530      	push	{r4, r5, lr}
     cc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     cca:	d502      	bpl.n	cd2 <__aeabi_l2d+0x16>
     ccc:	4240      	negs	r0, r0
     cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     cd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     cda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     cde:	f43f aed8 	beq.w	a92 <__adddf3+0xe6>
     ce2:	f04f 0203 	mov.w	r2, #3
     ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     cea:	bf18      	it	ne
     cec:	3203      	addne	r2, #3
     cee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     cf2:	bf18      	it	ne
     cf4:	3203      	addne	r2, #3
     cf6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     cfa:	f1c2 0320 	rsb	r3, r2, #32
     cfe:	fa00 fc03 	lsl.w	ip, r0, r3
     d02:	fa20 f002 	lsr.w	r0, r0, r2
     d06:	fa01 fe03 	lsl.w	lr, r1, r3
     d0a:	ea40 000e 	orr.w	r0, r0, lr
     d0e:	fa21 f102 	lsr.w	r1, r1, r2
     d12:	4414      	add	r4, r2
     d14:	e6bd      	b.n	a92 <__adddf3+0xe6>
     d16:	bf00      	nop

00000d18 <__aeabi_dmul>:
     d18:	b570      	push	{r4, r5, r6, lr}
     d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     d22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     d26:	bf1d      	ittte	ne
     d28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     d2c:	ea94 0f0c 	teqne	r4, ip
     d30:	ea95 0f0c 	teqne	r5, ip
     d34:	f000 f8de 	bleq	ef4 <__aeabi_dmul+0x1dc>
     d38:	442c      	add	r4, r5
     d3a:	ea81 0603 	eor.w	r6, r1, r3
     d3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     d42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     d46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     d4a:	bf18      	it	ne
     d4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     d50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     d58:	d038      	beq.n	dcc <__aeabi_dmul+0xb4>
     d5a:	fba0 ce02 	umull	ip, lr, r0, r2
     d5e:	f04f 0500 	mov.w	r5, #0
     d62:	fbe1 e502 	umlal	lr, r5, r1, r2
     d66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     d6a:	fbe0 e503 	umlal	lr, r5, r0, r3
     d6e:	f04f 0600 	mov.w	r6, #0
     d72:	fbe1 5603 	umlal	r5, r6, r1, r3
     d76:	f09c 0f00 	teq	ip, #0
     d7a:	bf18      	it	ne
     d7c:	f04e 0e01 	orrne.w	lr, lr, #1
     d80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     d84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     d88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     d8c:	d204      	bcs.n	d98 <__aeabi_dmul+0x80>
     d8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     d92:	416d      	adcs	r5, r5
     d94:	eb46 0606 	adc.w	r6, r6, r6
     d98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     d9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     da0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     da4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     da8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     dac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     db0:	bf88      	it	hi
     db2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     db6:	d81e      	bhi.n	df6 <__aeabi_dmul+0xde>
     db8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     dbc:	bf08      	it	eq
     dbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     dc2:	f150 0000 	adcs.w	r0, r0, #0
     dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     dca:	bd70      	pop	{r4, r5, r6, pc}
     dcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     dd0:	ea46 0101 	orr.w	r1, r6, r1
     dd4:	ea40 0002 	orr.w	r0, r0, r2
     dd8:	ea81 0103 	eor.w	r1, r1, r3
     ddc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     de0:	bfc2      	ittt	gt
     de2:	ebd4 050c 	rsbsgt	r5, r4, ip
     de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     dea:	bd70      	popgt	{r4, r5, r6, pc}
     dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     df0:	f04f 0e00 	mov.w	lr, #0
     df4:	3c01      	subs	r4, #1
     df6:	f300 80ab 	bgt.w	f50 <__aeabi_dmul+0x238>
     dfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     dfe:	bfde      	ittt	le
     e00:	2000      	movle	r0, #0
     e02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     e06:	bd70      	pople	{r4, r5, r6, pc}
     e08:	f1c4 0400 	rsb	r4, r4, #0
     e0c:	3c20      	subs	r4, #32
     e0e:	da35      	bge.n	e7c <__aeabi_dmul+0x164>
     e10:	340c      	adds	r4, #12
     e12:	dc1b      	bgt.n	e4c <__aeabi_dmul+0x134>
     e14:	f104 0414 	add.w	r4, r4, #20
     e18:	f1c4 0520 	rsb	r5, r4, #32
     e1c:	fa00 f305 	lsl.w	r3, r0, r5
     e20:	fa20 f004 	lsr.w	r0, r0, r4
     e24:	fa01 f205 	lsl.w	r2, r1, r5
     e28:	ea40 0002 	orr.w	r0, r0, r2
     e2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     e34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     e38:	fa21 f604 	lsr.w	r6, r1, r4
     e3c:	eb42 0106 	adc.w	r1, r2, r6
     e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     e44:	bf08      	it	eq
     e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     e4a:	bd70      	pop	{r4, r5, r6, pc}
     e4c:	f1c4 040c 	rsb	r4, r4, #12
     e50:	f1c4 0520 	rsb	r5, r4, #32
     e54:	fa00 f304 	lsl.w	r3, r0, r4
     e58:	fa20 f005 	lsr.w	r0, r0, r5
     e5c:	fa01 f204 	lsl.w	r2, r1, r4
     e60:	ea40 0002 	orr.w	r0, r0, r2
     e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     e68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     e6c:	f141 0100 	adc.w	r1, r1, #0
     e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     e74:	bf08      	it	eq
     e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     e7a:	bd70      	pop	{r4, r5, r6, pc}
     e7c:	f1c4 0520 	rsb	r5, r4, #32
     e80:	fa00 f205 	lsl.w	r2, r0, r5
     e84:	ea4e 0e02 	orr.w	lr, lr, r2
     e88:	fa20 f304 	lsr.w	r3, r0, r4
     e8c:	fa01 f205 	lsl.w	r2, r1, r5
     e90:	ea43 0302 	orr.w	r3, r3, r2
     e94:	fa21 f004 	lsr.w	r0, r1, r4
     e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     e9c:	fa21 f204 	lsr.w	r2, r1, r4
     ea0:	ea20 0002 	bic.w	r0, r0, r2
     ea4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     eac:	bf08      	it	eq
     eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     eb2:	bd70      	pop	{r4, r5, r6, pc}
     eb4:	f094 0f00 	teq	r4, #0
     eb8:	d10f      	bne.n	eda <__aeabi_dmul+0x1c2>
     eba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     ebe:	0040      	lsls	r0, r0, #1
     ec0:	eb41 0101 	adc.w	r1, r1, r1
     ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ec8:	bf08      	it	eq
     eca:	3c01      	subeq	r4, #1
     ecc:	d0f7      	beq.n	ebe <__aeabi_dmul+0x1a6>
     ece:	ea41 0106 	orr.w	r1, r1, r6
     ed2:	f095 0f00 	teq	r5, #0
     ed6:	bf18      	it	ne
     ed8:	4770      	bxne	lr
     eda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     ede:	0052      	lsls	r2, r2, #1
     ee0:	eb43 0303 	adc.w	r3, r3, r3
     ee4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     ee8:	bf08      	it	eq
     eea:	3d01      	subeq	r5, #1
     eec:	d0f7      	beq.n	ede <__aeabi_dmul+0x1c6>
     eee:	ea43 0306 	orr.w	r3, r3, r6
     ef2:	4770      	bx	lr
     ef4:	ea94 0f0c 	teq	r4, ip
     ef8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     efc:	bf18      	it	ne
     efe:	ea95 0f0c 	teqne	r5, ip
     f02:	d00c      	beq.n	f1e <__aeabi_dmul+0x206>
     f04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f08:	bf18      	it	ne
     f0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f0e:	d1d1      	bne.n	eb4 <__aeabi_dmul+0x19c>
     f10:	ea81 0103 	eor.w	r1, r1, r3
     f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     f18:	f04f 0000 	mov.w	r0, #0
     f1c:	bd70      	pop	{r4, r5, r6, pc}
     f1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f22:	bf06      	itte	eq
     f24:	4610      	moveq	r0, r2
     f26:	4619      	moveq	r1, r3
     f28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f2c:	d019      	beq.n	f62 <__aeabi_dmul+0x24a>
     f2e:	ea94 0f0c 	teq	r4, ip
     f32:	d102      	bne.n	f3a <__aeabi_dmul+0x222>
     f34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     f38:	d113      	bne.n	f62 <__aeabi_dmul+0x24a>
     f3a:	ea95 0f0c 	teq	r5, ip
     f3e:	d105      	bne.n	f4c <__aeabi_dmul+0x234>
     f40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     f44:	bf1c      	itt	ne
     f46:	4610      	movne	r0, r2
     f48:	4619      	movne	r1, r3
     f4a:	d10a      	bne.n	f62 <__aeabi_dmul+0x24a>
     f4c:	ea81 0103 	eor.w	r1, r1, r3
     f50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     f54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     f58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     f5c:	f04f 0000 	mov.w	r0, #0
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     f66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     f6a:	bd70      	pop	{r4, r5, r6, pc}

00000f6c <__aeabi_ddiv>:
     f6c:	b570      	push	{r4, r5, r6, lr}
     f6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     f72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     f76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     f7a:	bf1d      	ittte	ne
     f7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     f80:	ea94 0f0c 	teqne	r4, ip
     f84:	ea95 0f0c 	teqne	r5, ip
     f88:	f000 f8a7 	bleq	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
     f8c:	eba4 0405 	sub.w	r4, r4, r5
     f90:	ea81 0e03 	eor.w	lr, r1, r3
     f94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
     f9c:	f000 8088 	beq.w	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
     fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     fa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     fa8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     fac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     fb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     fb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     fb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     fbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     fc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     fc4:	429d      	cmp	r5, r3
     fc6:	bf08      	it	eq
     fc8:	4296      	cmpeq	r6, r2
     fca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     fce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     fd2:	d202      	bcs.n	fda <__aeabi_ddiv+0x6e>
     fd4:	085b      	lsrs	r3, r3, #1
     fd6:	ea4f 0232 	mov.w	r2, r2, rrx
     fda:	1ab6      	subs	r6, r6, r2
     fdc:	eb65 0503 	sbc.w	r5, r5, r3
     fe0:	085b      	lsrs	r3, r3, #1
     fe2:	ea4f 0232 	mov.w	r2, r2, rrx
     fe6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     fea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     fee:	ebb6 0e02 	subs.w	lr, r6, r2
     ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
     ff6:	bf22      	ittt	cs
     ff8:	1ab6      	subcs	r6, r6, r2
     ffa:	4675      	movcs	r5, lr
     ffc:	ea40 000c 	orrcs.w	r0, r0, ip
    1000:	085b      	lsrs	r3, r3, #1
    1002:	ea4f 0232 	mov.w	r2, r2, rrx
    1006:	ebb6 0e02 	subs.w	lr, r6, r2
    100a:	eb75 0e03 	sbcs.w	lr, r5, r3
    100e:	bf22      	ittt	cs
    1010:	1ab6      	subcs	r6, r6, r2
    1012:	4675      	movcs	r5, lr
    1014:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1018:	085b      	lsrs	r3, r3, #1
    101a:	ea4f 0232 	mov.w	r2, r2, rrx
    101e:	ebb6 0e02 	subs.w	lr, r6, r2
    1022:	eb75 0e03 	sbcs.w	lr, r5, r3
    1026:	bf22      	ittt	cs
    1028:	1ab6      	subcs	r6, r6, r2
    102a:	4675      	movcs	r5, lr
    102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1030:	085b      	lsrs	r3, r3, #1
    1032:	ea4f 0232 	mov.w	r2, r2, rrx
    1036:	ebb6 0e02 	subs.w	lr, r6, r2
    103a:	eb75 0e03 	sbcs.w	lr, r5, r3
    103e:	bf22      	ittt	cs
    1040:	1ab6      	subcs	r6, r6, r2
    1042:	4675      	movcs	r5, lr
    1044:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1048:	ea55 0e06 	orrs.w	lr, r5, r6
    104c:	d018      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    104e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1052:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1056:	ea4f 1606 	mov.w	r6, r6, lsl #4
    105a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    105e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1062:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1066:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    106a:	d1c0      	bne.n	fee <__aeabi_ddiv+0x82>
    106c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1070:	d10b      	bne.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    1072:	ea41 0100 	orr.w	r1, r1, r0
    1076:	f04f 0000 	mov.w	r0, #0
    107a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    107e:	e7b6      	b.n	fee <__aeabi_ddiv+0x82>
    1080:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1084:	bf04      	itt	eq
    1086:	4301      	orreq	r1, r0
    1088:	2000      	moveq	r0, #0
    108a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    108e:	bf88      	it	hi
    1090:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1094:	f63f aeaf 	bhi.w	df6 <__aeabi_dmul+0xde>
    1098:	ebb5 0c03 	subs.w	ip, r5, r3
    109c:	bf04      	itt	eq
    109e:	ebb6 0c02 	subseq.w	ip, r6, r2
    10a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    10a6:	f150 0000 	adcs.w	r0, r0, #0
    10aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    10ae:	bd70      	pop	{r4, r5, r6, pc}
    10b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    10b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    10b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    10bc:	bfc2      	ittt	gt
    10be:	ebd4 050c 	rsbsgt	r5, r4, ip
    10c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    10c6:	bd70      	popgt	{r4, r5, r6, pc}
    10c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    10cc:	f04f 0e00 	mov.w	lr, #0
    10d0:	3c01      	subs	r4, #1
    10d2:	e690      	b.n	df6 <__aeabi_dmul+0xde>
    10d4:	ea45 0e06 	orr.w	lr, r5, r6
    10d8:	e68d      	b.n	df6 <__aeabi_dmul+0xde>
    10da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    10de:	ea94 0f0c 	teq	r4, ip
    10e2:	bf08      	it	eq
    10e4:	ea95 0f0c 	teqeq	r5, ip
    10e8:	f43f af3b 	beq.w	f62 <__aeabi_dmul+0x24a>
    10ec:	ea94 0f0c 	teq	r4, ip
    10f0:	d10a      	bne.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    10f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    10f6:	f47f af34 	bne.w	f62 <__aeabi_dmul+0x24a>
    10fa:	ea95 0f0c 	teq	r5, ip
    10fe:	f47f af25 	bne.w	f4c <__aeabi_dmul+0x234>
    1102:	4610      	mov	r0, r2
    1104:	4619      	mov	r1, r3
    1106:	e72c      	b.n	f62 <__aeabi_dmul+0x24a>
    1108:	ea95 0f0c 	teq	r5, ip
    110c:	d106      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    110e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1112:	f43f aefd 	beq.w	f10 <__aeabi_dmul+0x1f8>
    1116:	4610      	mov	r0, r2
    1118:	4619      	mov	r1, r3
    111a:	e722      	b.n	f62 <__aeabi_dmul+0x24a>
    111c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1120:	bf18      	it	ne
    1122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1126:	f47f aec5 	bne.w	eb4 <__aeabi_dmul+0x19c>
    112a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    112e:	f47f af0d 	bne.w	f4c <__aeabi_dmul+0x234>
    1132:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1136:	f47f aeeb 	bne.w	f10 <__aeabi_dmul+0x1f8>
    113a:	e712      	b.n	f62 <__aeabi_dmul+0x24a>

0000113c <__gedf2>:
    113c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    1140:	e006      	b.n	1150 <__cmpdf2+0x4>
    1142:	bf00      	nop

00001144 <__ledf2>:
    1144:	f04f 0c01 	mov.w	ip, #1
    1148:	e002      	b.n	1150 <__cmpdf2+0x4>
    114a:	bf00      	nop

0000114c <__cmpdf2>:
    114c:	f04f 0c01 	mov.w	ip, #1
    1150:	f84d cd04 	str.w	ip, [sp, #-4]!
    1154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    115c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1160:	bf18      	it	ne
    1162:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1166:	d01b      	beq.n	11a0 <__cmpdf2+0x54>
    1168:	b001      	add	sp, #4
    116a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    116e:	bf0c      	ite	eq
    1170:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1174:	ea91 0f03 	teqne	r1, r3
    1178:	bf02      	ittt	eq
    117a:	ea90 0f02 	teqeq	r0, r2
    117e:	2000      	moveq	r0, #0
    1180:	4770      	bxeq	lr
    1182:	f110 0f00 	cmn.w	r0, #0
    1186:	ea91 0f03 	teq	r1, r3
    118a:	bf58      	it	pl
    118c:	4299      	cmppl	r1, r3
    118e:	bf08      	it	eq
    1190:	4290      	cmpeq	r0, r2
    1192:	bf2c      	ite	cs
    1194:	17d8      	asrcs	r0, r3, #31
    1196:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    119a:	f040 0001 	orr.w	r0, r0, #1
    119e:	4770      	bx	lr
    11a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    11a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11a8:	d102      	bne.n	11b0 <__cmpdf2+0x64>
    11aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    11ae:	d107      	bne.n	11c0 <__cmpdf2+0x74>
    11b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    11b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11b8:	d1d6      	bne.n	1168 <__cmpdf2+0x1c>
    11ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    11be:	d0d3      	beq.n	1168 <__cmpdf2+0x1c>
    11c0:	f85d 0b04 	ldr.w	r0, [sp], #4
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop

000011c8 <__aeabi_cdrcmple>:
    11c8:	4684      	mov	ip, r0
    11ca:	4610      	mov	r0, r2
    11cc:	4662      	mov	r2, ip
    11ce:	468c      	mov	ip, r1
    11d0:	4619      	mov	r1, r3
    11d2:	4663      	mov	r3, ip
    11d4:	e000      	b.n	11d8 <__aeabi_cdcmpeq>
    11d6:	bf00      	nop

000011d8 <__aeabi_cdcmpeq>:
    11d8:	b501      	push	{r0, lr}
    11da:	f7ff ffb7 	bl	114c <__cmpdf2>
    11de:	2800      	cmp	r0, #0
    11e0:	bf48      	it	mi
    11e2:	f110 0f00 	cmnmi.w	r0, #0
    11e6:	bd01      	pop	{r0, pc}

000011e8 <__aeabi_dcmpeq>:
    11e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    11ec:	f7ff fff4 	bl	11d8 <__aeabi_cdcmpeq>
    11f0:	bf0c      	ite	eq
    11f2:	2001      	moveq	r0, #1
    11f4:	2000      	movne	r0, #0
    11f6:	f85d fb08 	ldr.w	pc, [sp], #8
    11fa:	bf00      	nop

000011fc <__aeabi_dcmplt>:
    11fc:	f84d ed08 	str.w	lr, [sp, #-8]!
    1200:	f7ff ffea 	bl	11d8 <__aeabi_cdcmpeq>
    1204:	bf34      	ite	cc
    1206:	2001      	movcc	r0, #1
    1208:	2000      	movcs	r0, #0
    120a:	f85d fb08 	ldr.w	pc, [sp], #8
    120e:	bf00      	nop

00001210 <__aeabi_dcmple>:
    1210:	f84d ed08 	str.w	lr, [sp, #-8]!
    1214:	f7ff ffe0 	bl	11d8 <__aeabi_cdcmpeq>
    1218:	bf94      	ite	ls
    121a:	2001      	movls	r0, #1
    121c:	2000      	movhi	r0, #0
    121e:	f85d fb08 	ldr.w	pc, [sp], #8
    1222:	bf00      	nop

00001224 <__aeabi_dcmpge>:
    1224:	f84d ed08 	str.w	lr, [sp, #-8]!
    1228:	f7ff ffce 	bl	11c8 <__aeabi_cdrcmple>
    122c:	bf94      	ite	ls
    122e:	2001      	movls	r0, #1
    1230:	2000      	movhi	r0, #0
    1232:	f85d fb08 	ldr.w	pc, [sp], #8
    1236:	bf00      	nop

00001238 <__aeabi_dcmpgt>:
    1238:	f84d ed08 	str.w	lr, [sp, #-8]!
    123c:	f7ff ffc4 	bl	11c8 <__aeabi_cdrcmple>
    1240:	bf34      	ite	cc
    1242:	2001      	movcc	r0, #1
    1244:	2000      	movcs	r0, #0
    1246:	f85d fb08 	ldr.w	pc, [sp], #8
    124a:	bf00      	nop

0000124c <__aeabi_d2iz>:
    124c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1250:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1254:	d215      	bcs.n	1282 <__aeabi_d2iz+0x36>
    1256:	d511      	bpl.n	127c <__aeabi_d2iz+0x30>
    1258:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    125c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1260:	d912      	bls.n	1288 <__aeabi_d2iz+0x3c>
    1262:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    126a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    126e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1272:	fa23 f002 	lsr.w	r0, r3, r2
    1276:	bf18      	it	ne
    1278:	4240      	negne	r0, r0
    127a:	4770      	bx	lr
    127c:	f04f 0000 	mov.w	r0, #0
    1280:	4770      	bx	lr
    1282:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1286:	d105      	bne.n	1294 <__aeabi_d2iz+0x48>
    1288:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    128c:	bf08      	it	eq
    128e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1292:	4770      	bx	lr
    1294:	f04f 0000 	mov.w	r0, #0
    1298:	4770      	bx	lr
    129a:	bf00      	nop

0000129c <__aeabi_d2f>:
    129c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    12a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    12a4:	bf24      	itt	cs
    12a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    12aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    12ae:	d90d      	bls.n	12cc <__aeabi_d2f+0x30>
    12b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    12b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    12b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    12bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    12c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    12c4:	bf08      	it	eq
    12c6:	f020 0001 	biceq.w	r0, r0, #1
    12ca:	4770      	bx	lr
    12cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    12d0:	d121      	bne.n	1316 <__aeabi_d2f+0x7a>
    12d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    12d6:	bfbc      	itt	lt
    12d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    12dc:	4770      	bxlt	lr
    12de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    12e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    12e6:	f1c2 0218 	rsb	r2, r2, #24
    12ea:	f1c2 0c20 	rsb	ip, r2, #32
    12ee:	fa10 f30c 	lsls.w	r3, r0, ip
    12f2:	fa20 f002 	lsr.w	r0, r0, r2
    12f6:	bf18      	it	ne
    12f8:	f040 0001 	orrne.w	r0, r0, #1
    12fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1300:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1304:	fa03 fc0c 	lsl.w	ip, r3, ip
    1308:	ea40 000c 	orr.w	r0, r0, ip
    130c:	fa23 f302 	lsr.w	r3, r3, r2
    1310:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1314:	e7cc      	b.n	12b0 <__aeabi_d2f+0x14>
    1316:	ea7f 5362 	mvns.w	r3, r2, asr #21
    131a:	d107      	bne.n	132c <__aeabi_d2f+0x90>
    131c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    1320:	bf1e      	ittt	ne
    1322:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    1326:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    132a:	4770      	bxne	lr
    132c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    1330:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1334:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1338:	4770      	bx	lr
    133a:	bf00      	nop

0000133c <__aeabi_d2lz>:
    133c:	b538      	push	{r3, r4, r5, lr}
    133e:	2200      	movs	r2, #0
    1340:	2300      	movs	r3, #0
    1342:	4604      	mov	r4, r0
    1344:	460d      	mov	r5, r1
    1346:	f7ff ff59 	bl	11fc <__aeabi_dcmplt>
    134a:	b928      	cbnz	r0, 1358 <__aeabi_d2lz+0x1c>
    134c:	4620      	mov	r0, r4
    134e:	4629      	mov	r1, r5
    1350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1354:	f000 b80a 	b.w	136c <__aeabi_d2ulz>
    1358:	4620      	mov	r0, r4
    135a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    135e:	f000 f805 	bl	136c <__aeabi_d2ulz>
    1362:	4240      	negs	r0, r0
    1364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1368:	bd38      	pop	{r3, r4, r5, pc}
    136a:	bf00      	nop

0000136c <__aeabi_d2ulz>:
    136c:	b5d0      	push	{r4, r6, r7, lr}
    136e:	4b0c      	ldr	r3, [pc, #48]	; (13a0 <__aeabi_d2ulz+0x34>)
    1370:	2200      	movs	r2, #0
    1372:	4606      	mov	r6, r0
    1374:	460f      	mov	r7, r1
    1376:	f7ff fccf 	bl	d18 <__aeabi_dmul>
    137a:	f000 f815 	bl	13a8 <__aeabi_d2uiz>
    137e:	4604      	mov	r4, r0
    1380:	f7ff fc50 	bl	c24 <__aeabi_ui2d>
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <__aeabi_d2ulz+0x38>)
    1386:	2200      	movs	r2, #0
    1388:	f7ff fcc6 	bl	d18 <__aeabi_dmul>
    138c:	4602      	mov	r2, r0
    138e:	460b      	mov	r3, r1
    1390:	4630      	mov	r0, r6
    1392:	4639      	mov	r1, r7
    1394:	f7ff fb08 	bl	9a8 <__aeabi_dsub>
    1398:	f000 f806 	bl	13a8 <__aeabi_d2uiz>
    139c:	4621      	mov	r1, r4
    139e:	bdd0      	pop	{r4, r6, r7, pc}
    13a0:	3df00000 	.word	0x3df00000
    13a4:	41f00000 	.word	0x41f00000

000013a8 <__aeabi_d2uiz>:
    13a8:	004a      	lsls	r2, r1, #1
    13aa:	d211      	bcs.n	13d0 <__aeabi_d2uiz+0x28>
    13ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    13b0:	d211      	bcs.n	13d6 <__aeabi_d2uiz+0x2e>
    13b2:	d50d      	bpl.n	13d0 <__aeabi_d2uiz+0x28>
    13b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    13b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    13bc:	d40e      	bmi.n	13dc <__aeabi_d2uiz+0x34>
    13be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    13c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    13c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    13ca:	fa23 f002 	lsr.w	r0, r3, r2
    13ce:	4770      	bx	lr
    13d0:	f04f 0000 	mov.w	r0, #0
    13d4:	4770      	bx	lr
    13d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    13da:	d102      	bne.n	13e2 <__aeabi_d2uiz+0x3a>
    13dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13e0:	4770      	bx	lr
    13e2:	f04f 0000 	mov.w	r0, #0
    13e6:	4770      	bx	lr

000013e8 <strcmp>:
    13e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    13ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    13f0:	2a01      	cmp	r2, #1
    13f2:	bf28      	it	cs
    13f4:	429a      	cmpcs	r2, r3
    13f6:	d0f7      	beq.n	13e8 <strcmp>
    13f8:	1ad0      	subs	r0, r2, r3
    13fa:	4770      	bx	lr

000013fc <strlen>:
    13fc:	4603      	mov	r3, r0
    13fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    1402:	2a00      	cmp	r2, #0
    1404:	d1fb      	bne.n	13fe <strlen+0x2>
    1406:	1a18      	subs	r0, r3, r0
    1408:	3801      	subs	r0, #1
    140a:	4770      	bx	lr
    140c:	0000      	movs	r0, r0
	...

00001410 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    1418:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    141c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    1420:	ec57 6b10 	vmov	r6, r7, d0
    1424:	ec59 8b11 	vmov	r8, r9, d1
    1428:	4693      	mov	fp, r2
    142a:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    142c:	f7ff fc0a 	bl	c44 <__aeabi_i2d>
    1430:	4642      	mov	r2, r8
    1432:	4604      	mov	r4, r0
    1434:	460d      	mov	r5, r1
    1436:	464b      	mov	r3, r9
    1438:	4630      	mov	r0, r6
    143a:	4639      	mov	r1, r7
    143c:	f7ff fc6c 	bl	d18 <__aeabi_dmul>
    1440:	4602      	mov	r2, r0
    1442:	460b      	mov	r3, r1
    1444:	4620      	mov	r0, r4
    1446:	4629      	mov	r1, r5
    1448:	f7ff fc66 	bl	d18 <__aeabi_dmul>
    144c:	4602      	mov	r2, r0
    144e:	460b      	mov	r3, r1
    1450:	ec43 2b18 	vmov	d8, r2, r3
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1454:	a30a      	add	r3, pc, #40	; (adr r3, 1480 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    1456:	e9d3 2300 	ldrd	r2, r3, [r3]
    145a:	f7ff fed9 	bl	1210 <__aeabi_dcmple>
    145e:	b908      	cbnz	r0, 1464 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
    1460:	ed9f 8b07 	vldr	d8, [pc, #28]	; 1480 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
    1464:	eeb0 0a48 	vmov.f32	s0, s16
    1468:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    146c:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1470:	4659      	mov	r1, fp
    1472:	4650      	mov	r0, sl
}
    1474:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1478:	f010 b98e 	b.w	11798 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    147c:	f3af 8000 	nop.w
    1480:	ffc00000 	.word	0xffc00000
    1484:	41dfffff 	.word	0x41dfffff

00001488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    148c:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    148e:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    1490:	4615      	mov	r5, r2
    1492:	461e      	mov	r6, r3
    1494:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1496:	f7ff fbe7 	bl	c68 <__aeabi_f2d>
    149a:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    149c:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    149e:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    14a0:	f7ff fbe2 	bl	c68 <__aeabi_f2d>
    14a4:	4602      	mov	r2, r0
    14a6:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    14a8:	4640      	mov	r0, r8
    14aa:	4649      	mov	r1, r9
    14ac:	f7ff fc34 	bl	d18 <__aeabi_dmul>
                                              double* multiplier) {
    14b0:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    14b4:	4680      	mov	r8, r0
    14b6:	4689      	mov	r9, r1
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
    14b8:	b1d6      	cbz	r6, 14f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    14ba:	68f0      	ldr	r0, [r6, #12]
    14bc:	f7ff fbd4 	bl	c68 <__aeabi_f2d>
    14c0:	4602      	mov	r2, r0
    14c2:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    14c4:	4640      	mov	r0, r8
    14c6:	4649      	mov	r1, r9
    14c8:	f7ff fa6e 	bl	9a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    14cc:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    14ce:	68f8      	ldr	r0, [r7, #12]
    14d0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    14d4:	f7ff fbc8 	bl	c68 <__aeabi_f2d>
    14d8:	4602      	mov	r2, r0
    14da:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    14dc:	4640      	mov	r0, r8
    14de:	4649      	mov	r1, r9
    14e0:	f7ff fd44 	bl	f6c <__aeabi_ddiv>
    14e4:	a311      	add	r3, pc, #68	; (adr r3, 152c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    14e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ea:	f7ff fea5 	bl	1238 <__aeabi_dcmpgt>
    14ee:	b950      	cbnz	r0, 1506 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    14f0:	463b      	mov	r3, r7
    14f2:	462a      	mov	r2, r5
    14f4:	4651      	mov	r1, sl
    14f6:	4620      	mov	r0, r4
    14f8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    14fc:	b003      	add	sp, #12
    14fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    1502:	f010 b98b 	b.w	1181c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1506:	4b06      	ldr	r3, [pc, #24]	; (1520 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1508:	9300      	str	r3, [sp, #0]
    150a:	4620      	mov	r0, r4
    150c:	6965      	ldr	r5, [r4, #20]
    150e:	4a05      	ldr	r2, [pc, #20]	; (1524 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1510:	4905      	ldr	r1, [pc, #20]	; (1528 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1512:	239a      	movs	r3, #154	; 0x9a
    1514:	47a8      	blx	r5
}
    1516:	2001      	movs	r0, #1
    1518:	b003      	add	sp, #12
    151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    151e:	bf00      	nop
    1520:	0002c747 	.word	0x0002c747
    1524:	0002c707 	.word	0x0002c707
    1528:	0002a6ae 	.word	0x0002a6ae
    152c:	47ae147b 	.word	0x47ae147b
    1530:	3f947ae1 	.word	0x3f947ae1
    1534:	00000000 	.word	0x00000000

00001538 <floor>:
    1538:	ec51 0b10 	vmov	r0, r1, d0
    153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    153e:	f3c1 530a 	ubfx	r3, r1, #20, #11
    1542:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
    1546:	2d13      	cmp	r5, #19
    1548:	ee10 6a10 	vmov	r6, s0
    154c:	460c      	mov	r4, r1
    154e:	dc20      	bgt.n	1592 <floor+0x5a>
    1550:	2d00      	cmp	r5, #0
    1552:	db3d      	blt.n	15d0 <floor+0x98>
    1554:	4f38      	ldr	r7, [pc, #224]	; (1638 <floor+0x100>)
    1556:	412f      	asrs	r7, r5
    1558:	ea01 0307 	and.w	r3, r1, r7
    155c:	4303      	orrs	r3, r0
    155e:	d01d      	beq.n	159c <floor+0x64>
    1560:	a333      	add	r3, pc, #204	; (adr r3, 1630 <floor+0xf8>)
    1562:	e9d3 2300 	ldrd	r2, r3, [r3]
    1566:	f7ff fa21 	bl	9ac <__adddf3>
    156a:	2200      	movs	r2, #0
    156c:	2300      	movs	r3, #0
    156e:	f7ff fe63 	bl	1238 <__aeabi_dcmpgt>
    1572:	b148      	cbz	r0, 1588 <floor+0x50>
    1574:	2c00      	cmp	r4, #0
    1576:	da04      	bge.n	1582 <floor+0x4a>
    1578:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    157c:	fa43 f505 	asr.w	r5, r3, r5
    1580:	442c      	add	r4, r5
    1582:	ea24 0407 	bic.w	r4, r4, r7
    1586:	2600      	movs	r6, #0
    1588:	4623      	mov	r3, r4
    158a:	4632      	mov	r2, r6
    158c:	ec43 2b10 	vmov	d0, r2, r3
    1590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1592:	2d33      	cmp	r5, #51	; 0x33
    1594:	dd05      	ble.n	15a2 <floor+0x6a>
    1596:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    159a:	d029      	beq.n	15f0 <floor+0xb8>
    159c:	ec41 0b10 	vmov	d0, r0, r1
    15a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15a2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
    15a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    15aa:	40df      	lsrs	r7, r3
    15ac:	4207      	tst	r7, r0
    15ae:	d0f5      	beq.n	159c <floor+0x64>
    15b0:	a31f      	add	r3, pc, #124	; (adr r3, 1630 <floor+0xf8>)
    15b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b6:	f7ff f9f9 	bl	9ac <__adddf3>
    15ba:	2200      	movs	r2, #0
    15bc:	2300      	movs	r3, #0
    15be:	f7ff fe3b 	bl	1238 <__aeabi_dcmpgt>
    15c2:	2800      	cmp	r0, #0
    15c4:	d0e0      	beq.n	1588 <floor+0x50>
    15c6:	2c00      	cmp	r4, #0
    15c8:	db23      	blt.n	1612 <floor+0xda>
    15ca:	ea26 0607 	bic.w	r6, r6, r7
    15ce:	e7db      	b.n	1588 <floor+0x50>
    15d0:	a317      	add	r3, pc, #92	; (adr r3, 1630 <floor+0xf8>)
    15d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15d6:	f7ff f9e9 	bl	9ac <__adddf3>
    15da:	2200      	movs	r2, #0
    15dc:	2300      	movs	r3, #0
    15de:	f7ff fe2b 	bl	1238 <__aeabi_dcmpgt>
    15e2:	2800      	cmp	r0, #0
    15e4:	d0d0      	beq.n	1588 <floor+0x50>
    15e6:	2c00      	cmp	r4, #0
    15e8:	db0a      	blt.n	1600 <floor+0xc8>
    15ea:	2600      	movs	r6, #0
    15ec:	4634      	mov	r4, r6
    15ee:	e7cb      	b.n	1588 <floor+0x50>
    15f0:	ee10 2a10 	vmov	r2, s0
    15f4:	460b      	mov	r3, r1
    15f6:	f7ff f9d9 	bl	9ac <__adddf3>
    15fa:	ec41 0b10 	vmov	d0, r0, r1
    15fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1600:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    1604:	4a0d      	ldr	r2, [pc, #52]	; (163c <floor+0x104>)
    1606:	431e      	orrs	r6, r3
    1608:	2e00      	cmp	r6, #0
    160a:	bf18      	it	ne
    160c:	4614      	movne	r4, r2
    160e:	2600      	movs	r6, #0
    1610:	e7ba      	b.n	1588 <floor+0x50>
    1612:	2d14      	cmp	r5, #20
    1614:	d008      	beq.n	1628 <floor+0xf0>
    1616:	2301      	movs	r3, #1
    1618:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
    161c:	fa03 f505 	lsl.w	r5, r3, r5
    1620:	19ae      	adds	r6, r5, r6
    1622:	bf28      	it	cs
    1624:	18e4      	addcs	r4, r4, r3
    1626:	e7d0      	b.n	15ca <floor+0x92>
    1628:	3401      	adds	r4, #1
    162a:	e7ce      	b.n	15ca <floor+0x92>
    162c:	f3af 8000 	nop.w
    1630:	8800759c 	.word	0x8800759c
    1634:	7e37e43c 	.word	0x7e37e43c
    1638:	000fffff 	.word	0x000fffff
    163c:	bff00000 	.word	0xbff00000

00001640 <nan>:
    1640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1648 <nan+0x8>
    1644:	4770      	bx	lr
    1646:	bf00      	nop
    1648:	00000000 	.word	0x00000000
    164c:	7ff80000 	.word	0x7ff80000

00001650 <setup>:
alignas(16) static uint8_t tensor_arena[kTensorArenaSize];
} // namespace

// The name of this function is important for Arduino compatibility.
void setup()
{
    1650:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Set up logging. Google style is to avoid globals or statics because of
	// lifetime uncertainty, but since this has a trivial destructor it's okay.
	// NOLINTNEXTLINE(runtime-global-variables)

	static tflite::MicroErrorReporter micro_error_reporter;
    1652:	4c42      	ldr	r4, [pc, #264]	; (175c <setup+0x10c>)
{
    1654:	b085      	sub	sp, #20
	outputInit();
    1656:	f000 f921 	bl	189c <_Z10outputInitv>
	static tflite::MicroErrorReporter micro_error_reporter;
    165a:	7823      	ldrb	r3, [r4, #0]
    165c:	f3bf 8f5b 	dmb	ish
    1660:	07da      	lsls	r2, r3, #31
    1662:	d40b      	bmi.n	167c <setup+0x2c>
    1664:	4620      	mov	r0, r4
    1666:	f01c ff92 	bl	1e58e <__cxa_guard_acquire>
    166a:	b138      	cbz	r0, 167c <setup+0x2c>
    166c:	4620      	mov	r0, r4
    166e:	f01c ff9a 	bl	1e5a6 <__cxa_guard_release>
    1672:	4a3b      	ldr	r2, [pc, #236]	; (1760 <setup+0x110>)
    1674:	493b      	ldr	r1, [pc, #236]	; (1764 <setup+0x114>)
    1676:	483c      	ldr	r0, [pc, #240]	; (1768 <setup+0x118>)
    1678:	f013 fc18 	bl	14eac <__aeabi_atexit>
	error_reporter = &micro_error_reporter;
    167c:	4d3b      	ldr	r5, [pc, #236]	; (176c <setup+0x11c>)
    167e:	4b3a      	ldr	r3, [pc, #232]	; (1768 <setup+0x118>)
    1680:	602b      	str	r3, [r5, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    1682:	4b3b      	ldr	r3, [pc, #236]	; (1770 <setup+0x120>)

	// Map the model into a usable data structure. This doesn't involve any
	// copying or parsing, it's a very lightweight operation.
	model = tflite::GetModel(model_tflite);
    1684:	4c3b      	ldr	r4, [pc, #236]	; (1774 <setup+0x124>)
    1686:	681a      	ldr	r2, [r3, #0]
    1688:	18d1      	adds	r1, r2, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    168a:	58d3      	ldr	r3, [r2, r3]
    168c:	6021      	str	r1, [r4, #0]
    168e:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1690:	881a      	ldrh	r2, [r3, #0]
    1692:	2a04      	cmp	r2, #4
    1694:	d95f      	bls.n	1756 <setup+0x106>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    1696:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1698:	b112      	cbz	r2, 16a0 <setup+0x50>
    169a:	588a      	ldr	r2, [r1, r2]

	if (model->version() != TFLITE_SCHEMA_VERSION) {
    169c:	2a03      	cmp	r2, #3
    169e:	d004      	beq.n	16aa <setup+0x5a>
		TF_LITE_REPORT_ERROR(
    16a0:	4935      	ldr	r1, [pc, #212]	; (1778 <setup+0x128>)
    16a2:	4831      	ldr	r0, [pc, #196]	; (1768 <setup+0x118>)
    16a4:	2303      	movs	r3, #3
    16a6:	f01c fdfa 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
			model->version(), TFLITE_SCHEMA_VERSION);
	}

	// This pulls in all the operation implementations we need.
	// NOLINTNEXTLINE(runtime-global-variables)
	static tflite::AllOpsResolver resolver;
    16aa:	4e34      	ldr	r6, [pc, #208]	; (177c <setup+0x12c>)
    16ac:	7833      	ldrb	r3, [r6, #0]
    16ae:	f3bf 8f5b 	dmb	ish
    16b2:	07db      	lsls	r3, r3, #31
    16b4:	d40e      	bmi.n	16d4 <setup+0x84>
    16b6:	4630      	mov	r0, r6
    16b8:	f01c ff69 	bl	1e58e <__cxa_guard_acquire>
    16bc:	b150      	cbz	r0, 16d4 <setup+0x84>
    16be:	4830      	ldr	r0, [pc, #192]	; (1780 <setup+0x130>)
    16c0:	f004 f946 	bl	5950 <_ZN6tflite14AllOpsResolverC1Ev>
    16c4:	4630      	mov	r0, r6
    16c6:	f01c ff6e 	bl	1e5a6 <__cxa_guard_release>
    16ca:	4a25      	ldr	r2, [pc, #148]	; (1760 <setup+0x110>)
    16cc:	492d      	ldr	r1, [pc, #180]	; (1784 <setup+0x134>)
    16ce:	482c      	ldr	r0, [pc, #176]	; (1780 <setup+0x130>)
    16d0:	f013 fbec 	bl	14eac <__aeabi_atexit>

	// Build an interpreter to run the model with.
	static tflite::MicroInterpreter static_interpreter(model, resolver,
							   tensor_arena,
							   kTensorArenaSize,
							   error_reporter);
    16d4:	4f2c      	ldr	r7, [pc, #176]	; (1788 <setup+0x138>)
    16d6:	783b      	ldrb	r3, [r7, #0]
    16d8:	f3bf 8f5b 	dmb	ish
    16dc:	f013 0601 	ands.w	r6, r3, #1
    16e0:	d117      	bne.n	1712 <setup+0xc2>
    16e2:	4638      	mov	r0, r7
    16e4:	f01c ff53 	bl	1e58e <__cxa_guard_acquire>
    16e8:	b198      	cbz	r0, 1712 <setup+0xc2>
    16ea:	9602      	str	r6, [sp, #8]
    16ec:	682b      	ldr	r3, [r5, #0]
    16ee:	9301      	str	r3, [sp, #4]
    16f0:	f649 73d8 	movw	r3, #40920	; 0x9fd8
    16f4:	9300      	str	r3, [sp, #0]
    16f6:	4a22      	ldr	r2, [pc, #136]	; (1780 <setup+0x130>)
    16f8:	6821      	ldr	r1, [r4, #0]
    16fa:	4b24      	ldr	r3, [pc, #144]	; (178c <setup+0x13c>)
    16fc:	4824      	ldr	r0, [pc, #144]	; (1790 <setup+0x140>)
    16fe:	f014 f841 	bl	15784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
    1702:	4638      	mov	r0, r7
    1704:	f01c ff4f 	bl	1e5a6 <__cxa_guard_release>
    1708:	4a15      	ldr	r2, [pc, #84]	; (1760 <setup+0x110>)
    170a:	4922      	ldr	r1, [pc, #136]	; (1794 <setup+0x144>)
    170c:	4820      	ldr	r0, [pc, #128]	; (1790 <setup+0x140>)
    170e:	f013 fbcd 	bl	14eac <__aeabi_atexit>
	interpreter = &static_interpreter;
    1712:	4c21      	ldr	r4, [pc, #132]	; (1798 <setup+0x148>)
    1714:	481e      	ldr	r0, [pc, #120]	; (1790 <setup+0x140>)
    1716:	6020      	str	r0, [r4, #0]

	// Allocate memory from the tensor_arena for the model's tensors.
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
    1718:	f005 f9b6 	bl	6a88 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>

	if (allocate_status != kTfLiteOk) {
    171c:	b118      	cbz	r0, 1726 <setup+0xd6>
		TF_LITE_REPORT_ERROR(error_reporter,
    171e:	491f      	ldr	r1, [pc, #124]	; (179c <setup+0x14c>)
    1720:	6828      	ldr	r0, [r5, #0]
    1722:	f01c fdbc 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
				     "AllocateTensors() failed");
	}
	TF_LITE_REPORT_ERROR(error_reporter,"size : %d",interpreter->arena_used_bytes());
    1726:	6823      	ldr	r3, [r4, #0]
    1728:	682d      	ldr	r5, [r5, #0]
  // Returns the actual used arena in bytes. This method gives the optimal arena
  // size. It's only available after `AllocateTensors` has been called.
  // Note that normally `tensor_arena` requires 16 bytes alignment to fully
  // utilize the space. If it's not the case, the optimial arena size would be
  // arena_used_bytes() + 16.
  size_t arena_used_bytes() const { return allocator_.used_bytes(); }
    172a:	6e18      	ldr	r0, [r3, #96]	; 0x60
    172c:	f013 ffc2 	bl	156b4 <_ZNK6tflite14MicroAllocator10used_bytesEv>
    1730:	491b      	ldr	r1, [pc, #108]	; (17a0 <setup+0x150>)
    1732:	4602      	mov	r2, r0
    1734:	4628      	mov	r0, r5
    1736:	f01c fdb2 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>

	// Obtain pointers to the model's input and output tensors.
	input = interpreter->input(0);
    173a:	6820      	ldr	r0, [r4, #0]
    173c:	2100      	movs	r1, #0
    173e:	f005 f96b 	bl	6a18 <_ZN6tflite16MicroInterpreter5inputEj>
    1742:	4b18      	ldr	r3, [pc, #96]	; (17a4 <setup+0x154>)
	output = interpreter->output(0);
    1744:	2100      	movs	r1, #0
	input = interpreter->input(0);
    1746:	6018      	str	r0, [r3, #0]
	output = interpreter->output(0);
    1748:	6820      	ldr	r0, [r4, #0]
    174a:	f005 f981 	bl	6a50 <_ZN6tflite16MicroInterpreter6outputEj>
    174e:	4b16      	ldr	r3, [pc, #88]	; (17a8 <setup+0x158>)
    1750:	6018      	str	r0, [r3, #0]



	// Keep track of how many inferences we have performed.
	inference_count = 0;
}
    1752:	b005      	add	sp, #20
    1754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1756:	2200      	movs	r2, #0
    1758:	e7a2      	b.n	16a0 <setup+0x50>
    175a:	bf00      	nop
    175c:	2000a8d4 	.word	0x2000a8d4
    1760:	2000bcdc 	.word	0x2000bcdc
    1764:	000143fd 	.word	0x000143fd
    1768:	20000000 	.word	0x20000000
    176c:	2000a8e0 	.word	0x2000a8e0
    1770:	0001ec80 	.word	0x0001ec80
    1774:	2000a8e8 	.word	0x2000a8e8
    1778:	00029238 	.word	0x00029238
    177c:	2000a8d8 	.word	0x2000a8d8
    1780:	2000a968 	.word	0x2000a968
    1784:	000143ff 	.word	0x000143ff
    1788:	2000a8d0 	.word	0x2000a8d0
    178c:	200008c0 	.word	0x200008c0
    1790:	2000a8f0 	.word	0x2000a8f0
    1794:	000157cd 	.word	0x000157cd
    1798:	2000a8dc 	.word	0x2000a8dc
    179c:	0002927f 	.word	0x0002927f
    17a0:	00029298 	.word	0x00029298
    17a4:	2000a8e4 	.word	0x2000a8e4
    17a8:	2000a8ec 	.word	0x2000a8ec

000017ac <loop>:

// The name of this function is important for Arduino compatibility.
void loop()
{
    17ac:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sleep(timeout);
    17ae:	2100      	movs	r1, #0
    17b0:	f640 40cd 	movw	r0, #3277	; 0xccd
    17b4:	f003 fda6 	bl	5304 <z_impl_k_sleep>
	return z_impl_k_uptime_ticks();
    17b8:	f013 feb2 	bl	15520 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    17bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    17c0:	460a      	mov	r2, r1
    17c2:	fba0 0103 	umull	r0, r1, r0, r3
    17c6:	fb03 1102 	mla	r1, r3, r2, r1
		s64_t milliseconds_spent;

		/********** capture initial time stamp ********/
		time_stamp = k_uptime_get();

		for (int d = 0; d < 3072; ++d) {input->data.f[d] = image_data[d]/255;}
    17ca:	4b2b      	ldr	r3, [pc, #172]	; (1878 <loop+0xcc>)
    17cc:	4a2b      	ldr	r2, [pc, #172]	; (187c <loop+0xd0>)
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 1880 <loop+0xd4>
    17d4:	685b      	ldr	r3, [r3, #4]
    17d6:	0bc4      	lsrs	r4, r0, #15
    17d8:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
    17dc:	0bcd      	lsrs	r5, r1, #15
    17de:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
    17e2:	ecf2 6a01 	vldmia	r2!, {s13}
    17e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    17ea:	ece3 7a01 	vstmia	r3!, {s15}
    17ee:	428b      	cmp	r3, r1
    17f0:	d1f7      	bne.n	17e2 <loop+0x36>
		
		TfLiteStatus invoke_status = interpreter->Invoke();
    17f2:	4b24      	ldr	r3, [pc, #144]	; (1884 <loop+0xd8>)
    17f4:	6818      	ldr	r0, [r3, #0]
    17f6:	f005 f9c5 	bl	6b84 <_ZN6tflite16MicroInterpreter6InvokeEv>

		if (invoke_status != kTfLiteOk) {
    17fa:	b120      	cbz	r0, 1806 <loop+0x5a>
			TF_LITE_REPORT_ERROR(error_reporter,
    17fc:	4b22      	ldr	r3, [pc, #136]	; (1888 <loop+0xdc>)
    17fe:	4923      	ldr	r1, [pc, #140]	; (188c <loop+0xe0>)
    1800:	6818      	ldr	r0, [r3, #0]
    1802:	f01c fd4c 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
						"Invoke failed.");
		}

		float max_score = output->data.f[0];
    1806:	4b22      	ldr	r3, [pc, #136]	; (1890 <loop+0xe4>)
		float guess = 0;
    1808:	eddf 7a22 	vldr	s15, [pc, #136]	; 1894 <loop+0xe8>
		float max_score = output->data.f[0];
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	685a      	ldr	r2, [r3, #4]
    1810:	ecb2 7a01 	vldmia	r2!, {s14}

		for (int category_index = 1; category_index < 10;category_index++) 
    1814:	2301      	movs	r3, #1
		{
			float category_score = output->data.f[category_index];
    1816:	ecf2 6a01 	vldmia	r2!, {s13}
			if (category_score > max_score) {
    181a:	eeb4 7ae6 	vcmpe.f32	s14, s13
    181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				max_score = category_score;
				guess = category_index;
    1822:	bf48      	it	mi
    1824:	ee07 3a90 	vmovmi	s15, r3
		for (int category_index = 1; category_index < 10;category_index++) 
    1828:	f103 0301 	add.w	r3, r3, #1
				guess = category_index;
    182c:	bf44      	itt	mi
    182e:	eef8 7ae7 	vcvtmi.f32.s32	s15, s15
				max_score = category_score;
    1832:	eeb0 7a66 	vmovmi.f32	s14, s13
		for (int category_index = 1; category_index < 10;category_index++) 
    1836:	2b0a      	cmp	r3, #10
    1838:	d1ed      	bne.n	1816 <loop+0x6a>
		

		// Output the results. A custom HandleOutput function can be implemented
		// for each supported hardware target.
		int test_y = 9;
		HandleOutput(error_reporter, guess,test_y);
    183a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    183e:	4e12      	ldr	r6, [pc, #72]	; (1888 <loop+0xdc>)
    1840:	ee17 1a90 	vmov	r1, s15
    1844:	6830      	ldr	r0, [r6, #0]
    1846:	2209      	movs	r2, #9
    1848:	f000 f83c 	bl	18c4 <_Z12HandleOutputPN6tflite13ErrorReporterEii>
    184c:	f013 fe68 	bl	15520 <z_impl_k_uptime_ticks>
    1850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1854:	460a      	mov	r2, r1
    1856:	fba0 0103 	umull	r0, r1, r0, r3
    185a:	fb03 1102 	mla	r1, r3, r2, r1
    185e:	0bc2      	lsrs	r2, r0, #15
    1860:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    1864:	0bcb      	lsrs	r3, r1, #15


		// ************ GET TIMESTAMP***********
		milliseconds_spent = k_uptime_delta(&time_stamp);
		TF_LITE_REPORT_ERROR( error_reporter, "Time exec = %d",milliseconds_spent);
    1866:	1b12      	subs	r2, r2, r4
    1868:	6830      	ldr	r0, [r6, #0]
    186a:	490b      	ldr	r1, [pc, #44]	; (1898 <loop+0xec>)
    186c:	eb63 0305 	sbc.w	r3, r3, r5


}
    1870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TF_LITE_REPORT_ERROR( error_reporter, "Time exec = %d",milliseconds_spent);
    1874:	f01c bd13 	b.w	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    1878:	2000a8e4 	.word	0x2000a8e4
    187c:	00025918 	.word	0x00025918
    1880:	437f0000 	.word	0x437f0000
    1884:	2000a8dc 	.word	0x2000a8dc
    1888:	2000a8e0 	.word	0x2000a8e0
    188c:	000292a2 	.word	0x000292a2
    1890:	2000a8ec 	.word	0x2000a8ec
    1894:	00000000 	.word	0x00000000
    1898:	000292b1 	.word	0x000292b1

0000189c <_Z10outputInitv>:
struct device *pwm;
static u32_t period;
static u32_t new_period;

void outputInit()
{
    189c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    189e:	4806      	ldr	r0, [pc, #24]	; (18b8 <_Z10outputInitv+0x1c>)
    18a0:	f002 ff52 	bl	4748 <z_impl_device_get_binding>
	pwm = device_get_binding(PWM_LABEL);
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <_Z10outputInitv+0x20>)
    18a6:	6018      	str	r0, [r3, #0]
	if (!pwm) {
    18a8:	b928      	cbnz	r0, 18b6 <_Z10outputInitv+0x1a>
		printk("Error: didn't find %s device\n", PWM_LABEL);
		return;
	}

 	period = MIN_PERIOD_USEC;
}
    18aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Error: didn't find %s device\n", PWM_LABEL);
    18ae:	4902      	ldr	r1, [pc, #8]	; (18b8 <_Z10outputInitv+0x1c>)
    18b0:	4803      	ldr	r0, [pc, #12]	; (18c0 <_Z10outputInitv+0x24>)
    18b2:	f012 bdd5 	b.w	14460 <printk>
}
    18b6:	bd08      	pop	{r3, pc}
    18b8:	000292c0 	.word	0x000292c0
    18bc:	2000bbf8 	.word	0x2000bbf8
    18c0:	000292c6 	.word	0x000292c6

000018c4 <_Z12HandleOutputPN6tflite13ErrorReporterEii>:

void HandleOutput(tflite::ErrorReporter* error_reporter, int prediction, int label) {
    18c4:	4613      	mov	r3, r2
  TF_LITE_REPORT_ERROR(error_reporter, "Model estimates [%d] label [%d]\n", prediction, label);
    18c6:	460a      	mov	r2, r1
    18c8:	4901      	ldr	r1, [pc, #4]	; (18d0 <_Z12HandleOutputPN6tflite13ErrorReporterEii+0xc>)
    18ca:	f01c bce8 	b.w	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    18ce:	bf00      	nop
    18d0:	000292e4 	.word	0x000292e4

000018d4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    18d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d8:	ed2d 8b02 	vpush	{d8}
    18dc:	b083      	sub	sp, #12
    18de:	469a      	mov	sl, r3
    18e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    18e2:	f8df b094 	ldr.w	fp, [pc, #148]	; 1978 <_printk_dec_ulong+0xa4>
    18e6:	2c01      	cmp	r4, #1
    18e8:	bfb8      	it	lt
    18ea:	2401      	movlt	r4, #1
    18ec:	2b01      	cmp	r3, #1
    18ee:	bf0c      	ite	eq
    18f0:	2330      	moveq	r3, #48	; 0x30
    18f2:	2320      	movne	r3, #32
    18f4:	ee08 3a10 	vmov	s16, r3
    18f8:	4615      	mov	r5, r2
    18fa:	4606      	mov	r6, r0
    18fc:	2701      	movs	r7, #1
    18fe:	f04f 080a 	mov.w	r8, #10
    1902:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    1904:	fbb5 f9fb 	udiv	r9, r5, fp
    1908:	b90a      	cbnz	r2, 190e <_printk_dec_ulong+0x3a>
    190a:	45ab      	cmp	fp, r5
    190c:	d821      	bhi.n	1952 <_printk_dec_ulong+0x7e>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    190e:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1912:	9100      	str	r1, [sp, #0]
			digits++;
    1914:	3701      	adds	r7, #1
			out((int)(remainder / pos + 48), ctx);
    1916:	47b0      	blx	r6
			found_largest_digit = 1;
    1918:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
    191a:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
    191c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    1920:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    1924:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
    1928:	f04f 030a 	mov.w	r3, #10
    192c:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
    1930:	d1e8      	bne.n	1904 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
    1932:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1936:	9100      	str	r1, [sp, #0]
    1938:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    193a:	f1ba 0f03 	cmp.w	sl, #3
    193e:	9900      	ldr	r1, [sp, #0]
    1940:	d102      	bne.n	1948 <_printk_dec_ulong+0x74>
		remaining = min_width - digits;
    1942:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    1944:	2c00      	cmp	r4, #0
    1946:	dc11      	bgt.n	196c <_printk_dec_ulong+0x98>
			out(' ', ctx);
		}
	}
}
    1948:	b003      	add	sp, #12
    194a:	ecbd 8b02 	vpop	{d8}
    194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1952:	4544      	cmp	r4, r8
    1954:	dbe2      	blt.n	191c <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
    1956:	f1ba 0f02 	cmp.w	sl, #2
    195a:	d8df      	bhi.n	191c <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    195c:	ee18 0a10 	vmov	r0, s16
    1960:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
    1964:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1966:	47b0      	blx	r6
			digits++;
    1968:	9a01      	ldr	r2, [sp, #4]
    196a:	e7d6      	b.n	191a <_printk_dec_ulong+0x46>
			out(' ', ctx);
    196c:	2020      	movs	r0, #32
    196e:	9100      	str	r1, [sp, #0]
    1970:	3c01      	subs	r4, #1
    1972:	47b0      	blx	r6
    1974:	9900      	ldr	r1, [sp, #0]
    1976:	e7e5      	b.n	1944 <_printk_dec_ulong+0x70>
    1978:	3b9aca00 	.word	0x3b9aca00

0000197c <__printk_hook_install>:
	_char_out = fn;
    197c:	4b01      	ldr	r3, [pc, #4]	; (1984 <__printk_hook_install+0x8>)
    197e:	6018      	str	r0, [r3, #0]
}
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	20000004 	.word	0x20000004

00001988 <z_vprintk>:
{
    1988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    198c:	b08d      	sub	sp, #52	; 0x34
    198e:	461c      	mov	r4, r3
	char length_mod = 0;
    1990:	2700      	movs	r7, #0
    1992:	1e53      	subs	r3, r2, #1
{
    1994:	4605      	mov	r5, r0
    1996:	468b      	mov	fp, r1
    1998:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    199a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    199e:	46b8      	mov	r8, r7
			might_format = 0;
    19a0:	2600      	movs	r6, #0
					break;
    19a2:	e005      	b.n	19b0 <z_vprintk+0x28>
		if (!might_format) {
    19a4:	b96e      	cbnz	r6, 19c2 <z_vprintk+0x3a>
			if (*fmt != '%') {
    19a6:	2825      	cmp	r0, #37	; 0x25
    19a8:	f000 8171 	beq.w	1c8e <z_vprintk+0x306>
				out((int)*fmt, ctx);
    19ac:	4659      	mov	r1, fp
    19ae:	47a8      	blx	r5
	while (*fmt) {
    19b0:	9b03      	ldr	r3, [sp, #12]
    19b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    19b6:	9303      	str	r3, [sp, #12]
    19b8:	2800      	cmp	r0, #0
    19ba:	d1f3      	bne.n	19a4 <z_vprintk+0x1c>
}
    19bc:	b00d      	add	sp, #52	; 0x34
    19be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    19c2:	287a      	cmp	r0, #122	; 0x7a
    19c4:	d80a      	bhi.n	19dc <z_vprintk+0x54>
    19c6:	2862      	cmp	r0, #98	; 0x62
    19c8:	d810      	bhi.n	19ec <z_vprintk+0x64>
    19ca:	2830      	cmp	r0, #48	; 0x30
    19cc:	d054      	beq.n	1a78 <z_vprintk+0xf0>
    19ce:	d845      	bhi.n	1a5c <z_vprintk+0xd4>
    19d0:	2825      	cmp	r0, #37	; 0x25
    19d2:	f000 815a 	beq.w	1c8a <z_vprintk+0x302>
    19d6:	282d      	cmp	r0, #45	; 0x2d
    19d8:	f000 815f 	beq.w	1c9a <z_vprintk+0x312>
					out((int)'%', ctx);
    19dc:	4659      	mov	r1, fp
    19de:	2025      	movs	r0, #37	; 0x25
    19e0:	47a8      	blx	r5
					out((int)*fmt, ctx);
    19e2:	9b03      	ldr	r3, [sp, #12]
    19e4:	7818      	ldrb	r0, [r3, #0]
    19e6:	4659      	mov	r1, fp
    19e8:	47a8      	blx	r5
    19ea:	e7d9      	b.n	19a0 <z_vprintk+0x18>
    19ec:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    19f0:	2b17      	cmp	r3, #23
    19f2:	d8f3      	bhi.n	19dc <z_vprintk+0x54>
    19f4:	a201      	add	r2, pc, #4	; (adr r2, 19fc <z_vprintk+0x74>)
    19f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    19fa:	bf00      	nop
    19fc:	00001c83 	.word	0x00001c83
    1a00:	00001ac7 	.word	0x00001ac7
    1a04:	000019dd 	.word	0x000019dd
    1a08:	000019dd 	.word	0x000019dd
    1a0c:	000019dd 	.word	0x000019dd
    1a10:	00001aa9 	.word	0x00001aa9
    1a14:	00001ac7 	.word	0x00001ac7
    1a18:	000019dd 	.word	0x000019dd
    1a1c:	000019dd 	.word	0x000019dd
    1a20:	00001aa9 	.word	0x00001aa9
    1a24:	000019dd 	.word	0x000019dd
    1a28:	000019dd 	.word	0x000019dd
    1a2c:	000019dd 	.word	0x000019dd
    1a30:	00001b69 	.word	0x00001b69
    1a34:	000019dd 	.word	0x000019dd
    1a38:	000019dd 	.word	0x000019dd
    1a3c:	00001c53 	.word	0x00001c53
    1a40:	000019dd 	.word	0x000019dd
    1a44:	00001b37 	.word	0x00001b37
    1a48:	000019dd 	.word	0x000019dd
    1a4c:	000019dd 	.word	0x000019dd
    1a50:	00001a65 	.word	0x00001a65
    1a54:	000019dd 	.word	0x000019dd
    1a58:	00001aa9 	.word	0x00001aa9
			switch (*fmt) {
    1a5c:	2839      	cmp	r0, #57	; 0x39
    1a5e:	d91a      	bls.n	1a96 <z_vprintk+0x10e>
    1a60:	2858      	cmp	r0, #88	; 0x58
    1a62:	d1bb      	bne.n	19dc <z_vprintk+0x54>
				if (*fmt == 'p') {
    1a64:	9b03      	ldr	r3, [sp, #12]
    1a66:	781b      	ldrb	r3, [r3, #0]
    1a68:	2b70      	cmp	r3, #112	; 0x70
    1a6a:	f040 8088 	bne.w	1b7e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    1a6e:	f854 3b04 	ldr.w	r3, [r4], #4
    1a72:	9306      	str	r3, [sp, #24]
    1a74:	2200      	movs	r2, #0
    1a76:	e090      	b.n	1b9a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    1a78:	f1b9 0f00 	cmp.w	r9, #0
    1a7c:	da0e      	bge.n	1a9c <z_vprintk+0x114>
    1a7e:	f1b8 0f00 	cmp.w	r8, #0
    1a82:	f000 810d 	beq.w	1ca0 <z_vprintk+0x318>
					min_width = *fmt - '0';
    1a86:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1a8a:	f1b8 0f00 	cmp.w	r8, #0
    1a8e:	bf08      	it	eq
    1a90:	f04f 0802 	moveq.w	r8, #2
    1a94:	e78c      	b.n	19b0 <z_vprintk+0x28>
				if (min_width < 0) {
    1a96:	f1b9 0f00 	cmp.w	r9, #0
    1a9a:	dbf4      	blt.n	1a86 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    1a9c:	230a      	movs	r3, #10
    1a9e:	fb03 0909 	mla	r9, r3, r9, r0
    1aa2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1aa6:	e7f0      	b.n	1a8a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    1aa8:	2868      	cmp	r0, #104	; 0x68
    1aaa:	d103      	bne.n	1ab4 <z_vprintk+0x12c>
    1aac:	2f68      	cmp	r7, #104	; 0x68
    1aae:	d106      	bne.n	1abe <z_vprintk+0x136>
					length_mod = 'H';
    1ab0:	2748      	movs	r7, #72	; 0x48
    1ab2:	e77d      	b.n	19b0 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1ab4:	286c      	cmp	r0, #108	; 0x6c
    1ab6:	d102      	bne.n	1abe <z_vprintk+0x136>
    1ab8:	2f6c      	cmp	r7, #108	; 0x6c
    1aba:	f000 80f4 	beq.w	1ca6 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    1abe:	2f00      	cmp	r7, #0
    1ac0:	d18c      	bne.n	19dc <z_vprintk+0x54>
    1ac2:	4607      	mov	r7, r0
    1ac4:	e774      	b.n	19b0 <z_vprintk+0x28>
				if (length_mod == 'z') {
    1ac6:	2f7a      	cmp	r7, #122	; 0x7a
    1ac8:	d102      	bne.n	1ad0 <z_vprintk+0x148>
					d = va_arg(ap, int);
    1aca:	f854 6b04 	ldr.w	r6, [r4], #4
    1ace:	e021      	b.n	1b14 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    1ad0:	2f6c      	cmp	r7, #108	; 0x6c
    1ad2:	d0fa      	beq.n	1aca <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1ad4:	2f4c      	cmp	r7, #76	; 0x4c
    1ad6:	d1f8      	bne.n	1aca <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    1ad8:	3407      	adds	r4, #7
    1ada:	f024 0407 	bic.w	r4, r4, #7
    1ade:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1ae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    1ae6:	9b04      	ldr	r3, [sp, #16]
    1ae8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    1aec:	9b05      	ldr	r3, [sp, #20]
    1aee:	9108      	str	r1, [sp, #32]
    1af0:	f143 0100 	adc.w	r1, r3, #0
    1af4:	9109      	str	r1, [sp, #36]	; 0x24
    1af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1afa:	2100      	movs	r1, #0
    1afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b00:	4299      	cmp	r1, r3
    1b02:	bf08      	it	eq
    1b04:	4290      	cmpeq	r0, r2
    1b06:	d204      	bcs.n	1b12 <z_vprintk+0x18a>
						print_err(out, ctx);
    1b08:	4659      	mov	r1, fp
    1b0a:	4628      	mov	r0, r5
    1b0c:	f012 fc87 	bl	1441e <print_err>
						break;
    1b10:	e746      	b.n	19a0 <z_vprintk+0x18>
					d = lld;
    1b12:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1b14:	2e00      	cmp	r6, #0
    1b16:	da05      	bge.n	1b24 <z_vprintk+0x19c>
					out((int)'-', ctx);
    1b18:	4659      	mov	r1, fp
    1b1a:	202d      	movs	r0, #45	; 0x2d
    1b1c:	47a8      	blx	r5
					d = -d;
    1b1e:	4276      	negs	r6, r6
					min_width--;
    1b20:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    1b24:	f8cd 9000 	str.w	r9, [sp]
    1b28:	4643      	mov	r3, r8
    1b2a:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    1b2c:	4659      	mov	r1, fp
    1b2e:	4628      	mov	r0, r5
    1b30:	f7ff fed0 	bl	18d4 <_printk_dec_ulong>
				break;
    1b34:	e734      	b.n	19a0 <z_vprintk+0x18>
				if (length_mod == 'z') {
    1b36:	2f7a      	cmp	r7, #122	; 0x7a
    1b38:	d102      	bne.n	1b40 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    1b3a:	f854 2b04 	ldr.w	r2, [r4], #4
    1b3e:	e00f      	b.n	1b60 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    1b40:	2f6c      	cmp	r7, #108	; 0x6c
    1b42:	d0fa      	beq.n	1b3a <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1b44:	2f4c      	cmp	r7, #76	; 0x4c
    1b46:	d1f8      	bne.n	1b3a <z_vprintk+0x1b2>
					unsigned long long llu =
    1b48:	3407      	adds	r4, #7
    1b4a:	f024 0407 	bic.w	r4, r4, #7
    1b4e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    1b52:	2100      	movs	r1, #0
    1b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b58:	4299      	cmp	r1, r3
    1b5a:	bf08      	it	eq
    1b5c:	4290      	cmpeq	r0, r2
    1b5e:	d3d3      	bcc.n	1b08 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1b60:	f8cd 9000 	str.w	r9, [sp]
    1b64:	4643      	mov	r3, r8
    1b66:	e7e1      	b.n	1b2c <z_vprintk+0x1a4>
				out('0', ctx);
    1b68:	4659      	mov	r1, fp
    1b6a:	2030      	movs	r0, #48	; 0x30
    1b6c:	47a8      	blx	r5
				out('x', ctx);
    1b6e:	4659      	mov	r1, fp
    1b70:	2078      	movs	r0, #120	; 0x78
    1b72:	47a8      	blx	r5
					min_width = 8;
    1b74:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    1b78:	f04f 0801 	mov.w	r8, #1
    1b7c:	e772      	b.n	1a64 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    1b7e:	2f6c      	cmp	r7, #108	; 0x6c
    1b80:	f43f af75 	beq.w	1a6e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    1b84:	2f4c      	cmp	r7, #76	; 0x4c
    1b86:	f47f af72 	bne.w	1a6e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    1b8a:	1de3      	adds	r3, r4, #7
    1b8c:	f023 0307 	bic.w	r3, r3, #7
    1b90:	461c      	mov	r4, r3
    1b92:	f854 2b08 	ldr.w	r2, [r4], #8
    1b96:	9206      	str	r2, [sp, #24]
    1b98:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    1b9a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    1b9c:	2310      	movs	r3, #16
	int digits = 0;
    1b9e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    1ba0:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    1ba2:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    1ba6:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    1baa:	9906      	ldr	r1, [sp, #24]
    1bac:	f1ca 0e20 	rsb	lr, sl, #32
    1bb0:	f1aa 0c20 	sub.w	ip, sl, #32
    1bb4:	fa21 f00a 	lsr.w	r0, r1, sl
    1bb8:	fa02 fe0e 	lsl.w	lr, r2, lr
    1bbc:	ea40 000e 	orr.w	r0, r0, lr
    1bc0:	fa22 fc0c 	lsr.w	ip, r2, ip
    1bc4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1bc8:	f010 000f 	ands.w	r0, r0, #15
    1bcc:	d107      	bne.n	1bde <z_vprintk+0x256>
    1bce:	9907      	ldr	r1, [sp, #28]
    1bd0:	b911      	cbnz	r1, 1bd8 <z_vprintk+0x250>
    1bd2:	f1ba 0f00 	cmp.w	sl, #0
    1bd6:	d125      	bne.n	1c24 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    1bd8:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1bdc:	e005      	b.n	1bea <z_vprintk+0x262>
    1bde:	2809      	cmp	r0, #9
    1be0:	bf8c      	ite	hi
    1be2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1be6:	f04f 0c30 	movls.w	ip, #48	; 0x30
    1bea:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1bec:	4659      	mov	r1, fp
    1bee:	b240      	sxtb	r0, r0
    1bf0:	920a      	str	r2, [sp, #40]	; 0x28
    1bf2:	9307      	str	r3, [sp, #28]
    1bf4:	47a8      	blx	r5
			digits++;
    1bf6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    1bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    1bfa:	3301      	adds	r3, #1
    1bfc:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    1bfe:	9b07      	ldr	r3, [sp, #28]
    1c00:	f1ba 0f00 	cmp.w	sl, #0
    1c04:	d123      	bne.n	1c4e <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    1c06:	f1b8 0f03 	cmp.w	r8, #3
    1c0a:	f47f aec9 	bne.w	19a0 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    1c0e:	9b04      	ldr	r3, [sp, #16]
    1c10:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1c14:	2e00      	cmp	r6, #0
    1c16:	f77f aec3 	ble.w	19a0 <z_vprintk+0x18>
			out(' ', ctx);
    1c1a:	4659      	mov	r1, fp
    1c1c:	2020      	movs	r0, #32
    1c1e:	47a8      	blx	r5
    1c20:	3e01      	subs	r6, #1
    1c22:	e7f7      	b.n	1c14 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    1c24:	1e59      	subs	r1, r3, #1
    1c26:	4599      	cmp	r9, r3
    1c28:	910a      	str	r1, [sp, #40]	; 0x28
    1c2a:	db07      	blt.n	1c3c <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    1c2c:	f1b8 0f01 	cmp.w	r8, #1
    1c30:	d106      	bne.n	1c40 <z_vprintk+0x2b8>
    1c32:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    1c34:	4659      	mov	r1, fp
    1c36:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1c38:	47a8      	blx	r5
    1c3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    1c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c3e:	e7b2      	b.n	1ba6 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    1c40:	f1b8 0f02 	cmp.w	r8, #2
    1c44:	d1fa      	bne.n	1c3c <z_vprintk+0x2b4>
    1c46:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    1c48:	4659      	mov	r1, fp
    1c4a:	2020      	movs	r0, #32
    1c4c:	e7f4      	b.n	1c38 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    1c4e:	9607      	str	r6, [sp, #28]
    1c50:	e7a9      	b.n	1ba6 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    1c52:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    1c56:	46b2      	mov	sl, r6
    1c58:	4653      	mov	r3, sl
    1c5a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    1c5e:	b968      	cbnz	r0, 1c7c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    1c60:	f1b8 0f03 	cmp.w	r8, #3
    1c64:	d121      	bne.n	1caa <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    1c66:	1b9e      	subs	r6, r3, r6
    1c68:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    1c6c:	2e00      	cmp	r6, #0
    1c6e:	f77f ae97 	ble.w	19a0 <z_vprintk+0x18>
						out(' ', ctx);
    1c72:	4659      	mov	r1, fp
    1c74:	2020      	movs	r0, #32
    1c76:	47a8      	blx	r5
    1c78:	3e01      	subs	r6, #1
    1c7a:	e7f7      	b.n	1c6c <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    1c7c:	4659      	mov	r1, fp
    1c7e:	47a8      	blx	r5
    1c80:	e7ea      	b.n	1c58 <z_vprintk+0x2d0>
				out(c, ctx);
    1c82:	f854 0b04 	ldr.w	r0, [r4], #4
    1c86:	4659      	mov	r1, fp
    1c88:	e6ae      	b.n	19e8 <z_vprintk+0x60>
				out((int)'%', ctx);
    1c8a:	4659      	mov	r1, fp
    1c8c:	e6ac      	b.n	19e8 <z_vprintk+0x60>
				length_mod = 0;
    1c8e:	4637      	mov	r7, r6
				padding = PAD_NONE;
    1c90:	46b0      	mov	r8, r6
				min_width = -1;
    1c92:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1c96:	2601      	movs	r6, #1
    1c98:	e68a      	b.n	19b0 <z_vprintk+0x28>
			switch (*fmt) {
    1c9a:	f04f 0803 	mov.w	r8, #3
    1c9e:	e687      	b.n	19b0 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    1ca0:	f04f 0801 	mov.w	r8, #1
    1ca4:	e684      	b.n	19b0 <z_vprintk+0x28>
					length_mod = 'L';
    1ca6:	274c      	movs	r7, #76	; 0x4c
    1ca8:	e682      	b.n	19b0 <z_vprintk+0x28>
			might_format = 0;
    1caa:	4606      	mov	r6, r0
		++fmt;
    1cac:	e680      	b.n	19b0 <z_vprintk+0x28>
    1cae:	bf00      	nop

00001cb0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1cb0:	b530      	push	{r4, r5, lr}
    1cb2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1cb4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1cb8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1cba:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1cbc:	4805      	ldr	r0, [pc, #20]	; (1cd4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1cbe:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1cc0:	a901      	add	r1, sp, #4
    1cc2:	f7ff fe61 	bl	1988 <z_vprintk>

	if (ctx.count < ctx.max) {
    1cc6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1cca:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1ccc:	bfb8      	it	lt
    1cce:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1cd0:	b005      	add	sp, #20
    1cd2:	bd30      	pop	{r4, r5, pc}
    1cd4:	0001443b 	.word	0x0001443b

00001cd8 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    1cd8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1cda:	4910      	ldr	r1, [pc, #64]	; (1d1c <enable_logger+0x44>)
    1cdc:	4810      	ldr	r0, [pc, #64]	; (1d20 <enable_logger+0x48>)
{
    1cde:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1ce0:	2200      	movs	r2, #0
    1ce2:	f013 fc1f 	bl	15524 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1ce6:	4d0f      	ldr	r5, [pc, #60]	; (1d24 <enable_logger+0x4c>)
    1ce8:	490f      	ldr	r1, [pc, #60]	; (1d28 <enable_logger+0x50>)
    1cea:	2200      	movs	r2, #0
    1cec:	2300      	movs	r3, #0
    1cee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1cf2:	2400      	movs	r4, #0
    1cf4:	230e      	movs	r3, #14
    1cf6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1cfa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1cfe:	4b0b      	ldr	r3, [pc, #44]	; (1d2c <enable_logger+0x54>)
    1d00:	9400      	str	r4, [sp, #0]
    1d02:	f44f 7240 	mov.w	r2, #768	; 0x300
    1d06:	4628      	mov	r0, r5
    1d08:	f003 fb92 	bl	5430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    1d0c:	4908      	ldr	r1, [pc, #32]	; (1d30 <enable_logger+0x58>)
    1d0e:	4628      	mov	r0, r5
    1d10:	f013 fbbc 	bl	1548c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1d14:	4620      	mov	r0, r4
    1d16:	b009      	add	sp, #36	; 0x24
    1d18:	bd30      	pop	{r4, r5, pc}
    1d1a:	bf00      	nop
    1d1c:	00001d35 	.word	0x00001d35
    1d20:	2000a898 	.word	0x2000a898
    1d24:	2000bc2c 	.word	0x2000bc2c
    1d28:	20011100 	.word	0x20011100
    1d2c:	000021b5 	.word	0x000021b5
    1d30:	00029305 	.word	0x00029305

00001d34 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1d34:	4801      	ldr	r0, [pc, #4]	; (1d3c <log_process_thread_timer_expiry_fn+0x8>)
    1d36:	f003 bb0b 	b.w	5350 <z_impl_k_sem_give>
    1d3a:	bf00      	nop
    1d3c:	20000828 	.word	0x20000828

00001d40 <z_log_get_s_mask>:
{
    1d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d42:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    1d44:	4e0f      	ldr	r6, [pc, #60]	; (1d84 <z_log_get_s_mask+0x44>)
	u32_t mask = 0;
    1d46:	2000      	movs	r0, #0
	u32_t arg = 0;
    1d48:	4603      	mov	r3, r0
	bool arm = false;
    1d4a:	4602      	mov	r2, r0
				mask |= BIT(arg);
    1d4c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    1d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
    1d52:	b10c      	cbz	r4, 1d58 <z_log_get_s_mask+0x18>
    1d54:	428b      	cmp	r3, r1
    1d56:	d300      	bcc.n	1d5a <z_log_get_s_mask+0x1a>
}
    1d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    1d5a:	2c25      	cmp	r4, #37	; 0x25
    1d5c:	d102      	bne.n	1d64 <z_log_get_s_mask+0x24>
			arm = !arm;
    1d5e:	f082 0201 	eor.w	r2, r2, #1
    1d62:	e7f4      	b.n	1d4e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    1d64:	2a00      	cmp	r2, #0
    1d66:	d0f2      	beq.n	1d4e <z_log_get_s_mask+0xe>
    1d68:	f814 c006 	ldrb.w	ip, [r4, r6]
    1d6c:	f01c 0f03 	tst.w	ip, #3
    1d70:	d0ed      	beq.n	1d4e <z_log_get_s_mask+0xe>
			if (curr == 's') {
    1d72:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    1d74:	bf04      	itt	eq
    1d76:	fa07 f203 	lsleq.w	r2, r7, r3
    1d7a:	4310      	orreq	r0, r2
			arg++;
    1d7c:	3301      	adds	r3, #1
			arm = false;
    1d7e:	2200      	movs	r2, #0
    1d80:	e7e5      	b.n	1d4e <z_log_get_s_mask+0xe>
    1d82:	bf00      	nop
    1d84:	0002c802 	.word	0x0002c802

00001d88 <log_core_init>:
{
    1d88:	b508      	push	{r3, lr}
		log_msg_pool_init();
    1d8a:	f000 fa75 	bl	2278 <log_msg_pool_init>
		log_list_init(&list);
    1d8e:	4809      	ldr	r0, [pc, #36]	; (1db4 <log_core_init+0x2c>)
    1d90:	f012 fc49 	bl	14626 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1d94:	2304      	movs	r3, #4
    1d96:	2228      	movs	r2, #40	; 0x28
    1d98:	4907      	ldr	r1, [pc, #28]	; (1db8 <log_core_init+0x30>)
    1d9a:	4808      	ldr	r0, [pc, #32]	; (1dbc <log_core_init+0x34>)
    1d9c:	f013 fa55 	bl	1524a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    1da0:	4b07      	ldr	r3, [pc, #28]	; (1dc0 <log_core_init+0x38>)
    1da2:	4a08      	ldr	r2, [pc, #32]	; (1dc4 <log_core_init+0x3c>)
    1da4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1da6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    1daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    1dae:	f000 bcad 	b.w	270c <log_output_timestamp_freq_set>
    1db2:	bf00      	nop
    1db4:	2000bc08 	.word	0x2000bc08
    1db8:	20013d40 	.word	0x20013d40
    1dbc:	2000bc10 	.word	0x2000bc10
    1dc0:	20000008 	.word	0x20000008
    1dc4:	00014665 	.word	0x00014665

00001dc8 <dropped_notify>:
{
    1dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1dca:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <dropped_notify+0x40>)
    1dcc:	f3bf 8f5b 	dmb	ish
    1dd0:	2500      	movs	r5, #0
    1dd2:	e853 7f00 	ldrex	r7, [r3]
    1dd6:	e843 5200 	strex	r2, r5, [r3]
    1dda:	2a00      	cmp	r2, #0
    1ddc:	d1f9      	bne.n	1dd2 <dropped_notify+0xa>
    1dde:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1de2:	4c0a      	ldr	r4, [pc, #40]	; (1e0c <dropped_notify+0x44>)
    1de4:	4e0a      	ldr	r6, [pc, #40]	; (1e10 <dropped_notify+0x48>)
    1de6:	1b36      	subs	r6, r6, r4
    1de8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dea:	42b5      	cmp	r5, r6
    1dec:	db00      	blt.n	1df0 <dropped_notify+0x28>
}
    1dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1df0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1df2:	795b      	ldrb	r3, [r3, #5]
    1df4:	b12b      	cbz	r3, 1e02 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    1df6:	6823      	ldr	r3, [r4, #0]
    1df8:	68db      	ldr	r3, [r3, #12]
    1dfa:	b113      	cbz	r3, 1e02 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    1dfc:	4639      	mov	r1, r7
    1dfe:	4620      	mov	r0, r4
    1e00:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e02:	3501      	adds	r5, #1
    1e04:	3410      	adds	r4, #16
    1e06:	e7f0      	b.n	1dea <dropped_notify+0x22>
    1e08:	2000bc00 	.word	0x2000bc00
    1e0c:	0001ebec 	.word	0x0001ebec
    1e10:	0001ebfc 	.word	0x0001ebfc

00001e14 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1e14:	4b06      	ldr	r3, [pc, #24]	; (1e30 <log_dropped+0x1c>)
    1e16:	f3bf 8f5b 	dmb	ish
    1e1a:	e853 2f00 	ldrex	r2, [r3]
    1e1e:	3201      	adds	r2, #1
    1e20:	e843 2100 	strex	r1, r2, [r3]
    1e24:	2900      	cmp	r1, #0
    1e26:	d1f8      	bne.n	1e1a <log_dropped+0x6>
    1e28:	f3bf 8f5b 	dmb	ish
}
    1e2c:	4770      	bx	lr
    1e2e:	bf00      	nop
    1e30:	2000bc00 	.word	0x2000bc00

00001e34 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1e34:	4a04      	ldr	r2, [pc, #16]	; (1e48 <log_source_name_get+0x14>)
    1e36:	4b05      	ldr	r3, [pc, #20]	; (1e4c <log_source_name_get+0x18>)
    1e38:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1e3a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1e3e:	bf34      	ite	cc
    1e40:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1e44:	2000      	movcs	r0, #0
}
    1e46:	4770      	bx	lr
    1e48:	0001eba4 	.word	0x0001eba4
    1e4c:	0001ebec 	.word	0x0001ebec

00001e50 <log_backend_enable>:
	id += backend - log_backend_get(0);
    1e50:	4b09      	ldr	r3, [pc, #36]	; (1e78 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    1e52:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    1e54:	1ac3      	subs	r3, r0, r3
    1e56:	111b      	asrs	r3, r3, #4
    1e58:	3301      	adds	r3, #1
{
    1e5a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    1e5c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    1e5e:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    1e60:	4c06      	ldr	r4, [pc, #24]	; (1e7c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    1e62:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1e64:	2201      	movs	r2, #1
    1e66:	715a      	strb	r2, [r3, #5]
    1e68:	7822      	ldrb	r2, [r4, #0]
    1e6a:	b912      	cbnz	r2, 1e72 <log_backend_enable+0x22>
    1e6c:	4804      	ldr	r0, [pc, #16]	; (1e80 <log_backend_enable+0x30>)
    1e6e:	f003 fa6f 	bl	5350 <z_impl_k_sem_give>
	backend_attached = true;
    1e72:	2301      	movs	r3, #1
    1e74:	7023      	strb	r3, [r4, #0]
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	0001ebec 	.word	0x0001ebec
    1e7c:	20010cc0 	.word	0x20010cc0
    1e80:	20000828 	.word	0x20000828

00001e84 <log_init>:
{
    1e84:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    1e86:	4b16      	ldr	r3, [pc, #88]	; (1ee0 <log_init+0x5c>)
    1e88:	4c16      	ldr	r4, [pc, #88]	; (1ee4 <log_init+0x60>)
    1e8a:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1e8c:	2b9f      	cmp	r3, #159	; 0x9f
    1e8e:	ea4f 1623 	mov.w	r6, r3, asr #4
    1e92:	d906      	bls.n	1ea2 <log_init+0x1e>
    1e94:	4b14      	ldr	r3, [pc, #80]	; (1ee8 <log_init+0x64>)
    1e96:	4a15      	ldr	r2, [pc, #84]	; (1eec <log_init+0x68>)
    1e98:	4815      	ldr	r0, [pc, #84]	; (1ef0 <log_init+0x6c>)
    1e9a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    1e9e:	f012 fabb 	bl	14418 <__assert_func>
    1ea2:	4b14      	ldr	r3, [pc, #80]	; (1ef4 <log_init+0x70>)
    1ea4:	f3bf 8f5b 	dmb	ish
    1ea8:	e853 5f00 	ldrex	r5, [r3]
    1eac:	1c6a      	adds	r2, r5, #1
    1eae:	e843 2100 	strex	r1, r2, [r3]
    1eb2:	2900      	cmp	r1, #0
    1eb4:	d1f8      	bne.n	1ea8 <log_init+0x24>
    1eb6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1eba:	b90d      	cbnz	r5, 1ec0 <log_init+0x3c>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ebc:	42b5      	cmp	r5, r6
    1ebe:	d100      	bne.n	1ec2 <log_init+0x3e>
}
    1ec0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1ec2:	7b23      	ldrb	r3, [r4, #12]
    1ec4:	b143      	cbz	r3, 1ed8 <log_init+0x54>
			if (backend->api->init != NULL) {
    1ec6:	6823      	ldr	r3, [r4, #0]
    1ec8:	695b      	ldr	r3, [r3, #20]
    1eca:	b103      	cbz	r3, 1ece <log_init+0x4a>
				backend->api->init();
    1ecc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1ece:	2204      	movs	r2, #4
    1ed0:	2100      	movs	r1, #0
    1ed2:	4620      	mov	r0, r4
    1ed4:	f7ff ffbc 	bl	1e50 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ed8:	3501      	adds	r5, #1
    1eda:	3410      	adds	r4, #16
    1edc:	e7ee      	b.n	1ebc <log_init+0x38>
    1ede:	bf00      	nop
    1ee0:	0001ebfc 	.word	0x0001ebfc
    1ee4:	0001ebec 	.word	0x0001ebec
    1ee8:	00029357 	.word	0x00029357
    1eec:	000293e7 	.word	0x000293e7
    1ef0:	0002930d 	.word	0x0002930d
    1ef4:	2000bc04 	.word	0x2000bc04

00001ef8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    1ef8:	4b16      	ldr	r3, [pc, #88]	; (1f54 <log_strdup+0x5c>)
    1efa:	4298      	cmp	r0, r3
{
    1efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1efe:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1f00:	d302      	bcc.n	1f08 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1f02:	4b15      	ldr	r3, [pc, #84]	; (1f58 <log_strdup+0x60>)
    1f04:	4298      	cmp	r0, r3
    1f06:	d320      	bcc.n	1f4a <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1f08:	4814      	ldr	r0, [pc, #80]	; (1f5c <log_strdup+0x64>)
    1f0a:	2200      	movs	r2, #0
    1f0c:	2300      	movs	r3, #0
    1f0e:	a901      	add	r1, sp, #4
    1f10:	f002 fdb4 	bl	4a7c <k_mem_slab_alloc>
	if (err != 0) {
    1f14:	4605      	mov	r5, r0
    1f16:	b9d8      	cbnz	r0, 1f50 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f18:	2201      	movs	r2, #1
    1f1a:	9b01      	ldr	r3, [sp, #4]
    1f1c:	f3bf 8f5b 	dmb	ish
    1f20:	e853 1f00 	ldrex	r1, [r3]
    1f24:	e843 2000 	strex	r0, r2, [r3]
    1f28:	2800      	cmp	r0, #0
    1f2a:	d1f9      	bne.n	1f20 <log_strdup+0x28>
    1f2c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1f30:	9e01      	ldr	r6, [sp, #4]
    1f32:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    1f34:	221f      	movs	r2, #31
    1f36:	4621      	mov	r1, r4
    1f38:	4618      	mov	r0, r3
    1f3a:	f01c fc4f 	bl	1e7dc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1f3e:	227e      	movs	r2, #126	; 0x7e
    1f40:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1f44:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    1f48:	4604      	mov	r4, r0
}
    1f4a:	4620      	mov	r0, r4
    1f4c:	b002      	add	sp, #8
    1f4e:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    1f50:	4c03      	ldr	r4, [pc, #12]	; (1f60 <log_strdup+0x68>)
    1f52:	e7fa      	b.n	1f4a <log_strdup+0x52>
    1f54:	0001e9a4 	.word	0x0001e9a4
    1f58:	0002c938 	.word	0x0002c938
    1f5c:	2000bc10 	.word	0x2000bc10
    1f60:	0002938a 	.word	0x0002938a

00001f64 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    1f64:	b148      	cbz	r0, 1f7a <log_is_strdup+0x16>
    1f66:	4b05      	ldr	r3, [pc, #20]	; (1f7c <log_is_strdup+0x18>)
    1f68:	4298      	cmp	r0, r3
    1f6a:	d305      	bcc.n	1f78 <log_is_strdup+0x14>
    1f6c:	33a0      	adds	r3, #160	; 0xa0
    1f6e:	4298      	cmp	r0, r3
    1f70:	bf2c      	ite	cs
    1f72:	2000      	movcs	r0, #0
    1f74:	2001      	movcc	r0, #1
    1f76:	4770      	bx	lr
    1f78:	2000      	movs	r0, #0
}
    1f7a:	4770      	bx	lr
    1f7c:	20013d40 	.word	0x20013d40

00001f80 <z_impl_log_process>:
{
    1f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1f84:	4b4c      	ldr	r3, [pc, #304]	; (20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>)
    1f86:	781b      	ldrb	r3, [r3, #0]
{
    1f88:	b085      	sub	sp, #20
    1f8a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1f8c:	b903      	cbnz	r3, 1f90 <z_impl_log_process+0x10>
    1f8e:	b360      	cbz	r0, 1fea <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1f90:	f04f 0320 	mov.w	r3, #32
    1f94:	f3ef 8611 	mrs	r6, BASEPRI
    1f98:	f383 8811 	msr	BASEPRI, r3
    1f9c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    1fa0:	4846      	ldr	r0, [pc, #280]	; (20bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
    1fa2:	f012 fb50 	bl	14646 <log_list_head_get>
    1fa6:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1fa8:	f386 8811 	msr	BASEPRI, r6
    1fac:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    1fb0:	b178      	cbz	r0, 1fd2 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	4b42      	ldr	r3, [pc, #264]	; (20c0 <CONFIG_MAIN_STACK_SIZE+0xc0>)
    1fb8:	e853 2f00 	ldrex	r2, [r3]
    1fbc:	3a01      	subs	r2, #1
    1fbe:	e843 2100 	strex	r1, r2, [r3]
    1fc2:	2900      	cmp	r1, #0
    1fc4:	d1f8      	bne.n	1fb8 <z_impl_log_process+0x38>
    1fc6:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1fca:	b194      	cbz	r4, 1ff2 <z_impl_log_process+0x72>
	log_msg_put(msg);
    1fcc:	4628      	mov	r0, r5
    1fce:	f012 fc47 	bl	14860 <log_msg_put>
	if (!bypass && dropped_cnt) {
    1fd2:	b924      	cbnz	r4, 1fde <z_impl_log_process+0x5e>
    1fd4:	4b3b      	ldr	r3, [pc, #236]	; (20c4 <CONFIG_MAIN_STACK_SIZE+0xc4>)
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	b10b      	cbz	r3, 1fde <z_impl_log_process+0x5e>
		dropped_notify();
    1fda:	f7ff fef5 	bl	1dc8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    1fde:	4837      	ldr	r0, [pc, #220]	; (20bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
    1fe0:	f012 fb2f 	bl	14642 <log_list_head_peek>
    1fe4:	1e04      	subs	r4, r0, #0
    1fe6:	bf18      	it	ne
    1fe8:	2401      	movne	r4, #1
}
    1fea:	4620      	mov	r0, r4
    1fec:	b005      	add	sp, #20
    1fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    1ff2:	4b35      	ldr	r3, [pc, #212]	; (20c8 <CONFIG_MAIN_STACK_SIZE+0xc8>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	b9cb      	cbnz	r3, 202c <CONFIG_MAIN_STACK_SIZE+0x2c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1ff8:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    1ffa:	07db      	lsls	r3, r3, #31
    1ffc:	d416      	bmi.n	202c <CONFIG_MAIN_STACK_SIZE+0x2c>
	msg_str = log_msg_str_get(msg);
    1ffe:	f012 fc42 	bl	14886 <log_msg_str_get>
    2002:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2004:	4628      	mov	r0, r5
    2006:	f012 fc09 	bl	1481c <log_msg_nargs_get>
    200a:	4601      	mov	r1, r0
    200c:	4640      	mov	r0, r8
    200e:	f7ff fe97 	bl	1d40 <z_log_get_s_mask>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2012:	4f2e      	ldr	r7, [pc, #184]	; (20cc <CONFIG_MAIN_STACK_SIZE+0xcc>)
    2014:	4b2e      	ldr	r3, [pc, #184]	; (20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2016:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 20ec <CONFIG_MAIN_STACK_SIZE+0xec>
    201a:	1bdb      	subs	r3, r3, r7
    201c:	08db      	lsrs	r3, r3, #3
    201e:	9303      	str	r3, [sp, #12]
    2020:	4b2c      	ldr	r3, [pc, #176]	; (20d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
    2022:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2024:	4606      	mov	r6, r0
    2026:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    202a:	b936      	cbnz	r6, 203a <CONFIG_MAIN_STACK_SIZE+0x3a>
    202c:	4e2a      	ldr	r6, [pc, #168]	; (20d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
    202e:	4f2b      	ldr	r7, [pc, #172]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    2030:	1bbf      	subs	r7, r7, r6
    2032:	113f      	asrs	r7, r7, #4
    2034:	f04f 0800 	mov.w	r8, #0
    2038:	e03a      	b.n	20b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
		idx = 31 - __builtin_clz(mask);
    203a:	fab6 f186 	clz	r1, r6
    203e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2042:	4649      	mov	r1, r9
    2044:	4628      	mov	r0, r5
    2046:	f012 fbec 	bl	14822 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    204a:	4b25      	ldr	r3, [pc, #148]	; (20e0 <CONFIG_MAIN_STACK_SIZE+0xe0>)
    204c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    204e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2050:	d302      	bcc.n	2058 <CONFIG_MAIN_STACK_SIZE+0x58>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2052:	4a24      	ldr	r2, [pc, #144]	; (20e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
    2054:	4290      	cmp	r0, r2
    2056:	d31a      	bcc.n	208e <CONFIG_MAIN_STACK_SIZE+0x8e>
    2058:	4608      	mov	r0, r1
    205a:	f7ff ff83 	bl	1f64 <log_is_strdup>
    205e:	4602      	mov	r2, r0
    2060:	b9a8      	cbnz	r0, 208e <CONFIG_MAIN_STACK_SIZE+0x8e>
    2062:	4b21      	ldr	r3, [pc, #132]	; (20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
    2064:	4299      	cmp	r1, r3
    2066:	d012      	beq.n	208e <CONFIG_MAIN_STACK_SIZE+0x8e>
	return msg->hdr.ids.source_id;
    2068:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    206a:	9903      	ldr	r1, [sp, #12]
    206c:	f3c3 1389 	ubfx	r3, r3, #6, #10
    2070:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    2072:	bf38      	it	cc
    2074:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2078:	ea4f 138a 	mov.w	r3, sl, lsl #6
    207c:	f043 0301 	orr.w	r3, r3, #1
    2080:	f8ad 3000 	strh.w	r3, [sp]
    2084:	4649      	mov	r1, r9
    2086:	4643      	mov	r3, r8
    2088:	4658      	mov	r0, fp
    208a:	f012 fb2e 	bl	146ea <log_3>
		mask &= ~BIT(idx);
    208e:	2301      	movs	r3, #1
    2090:	fa03 f109 	lsl.w	r1, r3, r9
    2094:	ea26 0601 	bic.w	r6, r6, r1
    2098:	e7c7      	b.n	202a <CONFIG_MAIN_STACK_SIZE+0x2a>
	return backend->cb->active;
    209a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    209c:	795b      	ldrb	r3, [r3, #5]
    209e:	b123      	cbz	r3, 20aa <CONFIG_MAIN_STACK_SIZE+0xaa>
	backend->api->put(backend, msg);
    20a0:	6833      	ldr	r3, [r6, #0]
    20a2:	4629      	mov	r1, r5
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	4630      	mov	r0, r6
    20a8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    20aa:	f108 0801 	add.w	r8, r8, #1
    20ae:	3610      	adds	r6, #16
    20b0:	45b8      	cmp	r8, r7
    20b2:	dbf2      	blt.n	209a <CONFIG_MAIN_STACK_SIZE+0x9a>
    20b4:	e78a      	b.n	1fcc <z_impl_log_process+0x4c>
    20b6:	bf00      	nop
    20b8:	20010cc0 	.word	0x20010cc0
    20bc:	2000bc08 	.word	0x2000bc08
    20c0:	2000bbfc 	.word	0x2000bbfc
    20c4:	2000bc00 	.word	0x2000bc00
    20c8:	20010cc1 	.word	0x20010cc1
    20cc:	0001eba4 	.word	0x0001eba4
    20d0:	0001ebec 	.word	0x0001ebec
    20d4:	0001ebb4 	.word	0x0001ebb4
    20d8:	0001ebec 	.word	0x0001ebec
    20dc:	0001ebfc 	.word	0x0001ebfc
    20e0:	0001e9a4 	.word	0x0001e9a4
    20e4:	0002c938 	.word	0x0002c938
    20e8:	0002938a 	.word	0x0002938a
    20ec:	000293a4 	.word	0x000293a4

000020f0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    20f0:	4b29      	ldr	r3, [pc, #164]	; (2198 <msg_finalize+0xa8>)
{
    20f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    20f4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    20f6:	8141      	strh	r1, [r0, #10]
{
    20f8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    20fa:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    20fc:	4d27      	ldr	r5, [pc, #156]	; (219c <msg_finalize+0xac>)
    20fe:	60e0      	str	r0, [r4, #12]
    2100:	f3bf 8f5b 	dmb	ish
    2104:	e855 3f00 	ldrex	r3, [r5]
    2108:	3301      	adds	r3, #1
    210a:	e845 3200 	strex	r2, r3, [r5]
    210e:	2a00      	cmp	r2, #0
    2110:	d1f8      	bne.n	2104 <msg_finalize+0x14>
    2112:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    2116:	f04f 0320 	mov.w	r3, #32
    211a:	f3ef 8611 	mrs	r6, BASEPRI
    211e:	f383 8811 	msr	BASEPRI, r3
    2122:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2126:	481e      	ldr	r0, [pc, #120]	; (21a0 <msg_finalize+0xb0>)
    2128:	4621      	mov	r1, r4
    212a:	f012 fa80 	bl	1462e <log_list_add_tail>
	__asm__ volatile(
    212e:	f386 8811 	msr	BASEPRI, r6
    2132:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    2136:	4b1b      	ldr	r3, [pc, #108]	; (21a4 <msg_finalize+0xb4>)
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	b183      	cbz	r3, 215e <msg_finalize+0x6e>
	__asm__ volatile(
    213c:	f04f 0320 	mov.w	r3, #32
    2140:	f3ef 8411 	mrs	r4, BASEPRI
    2144:	f383 8811 	msr	BASEPRI, r3
    2148:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    214c:	2000      	movs	r0, #0
    214e:	f7ff ff17 	bl	1f80 <z_impl_log_process>
	__asm__ volatile(
    2152:	f384 8811 	msr	BASEPRI, r4
    2156:	f3bf 8f6f 	isb	sy
}
    215a:	b002      	add	sp, #8
    215c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    215e:	4a12      	ldr	r2, [pc, #72]	; (21a8 <msg_finalize+0xb8>)
    2160:	682b      	ldr	r3, [r5, #0]
    2162:	6812      	ldr	r2, [r2, #0]
    2164:	2a00      	cmp	r2, #0
    2166:	d0f8      	beq.n	215a <msg_finalize+0x6a>
    2168:	2b01      	cmp	r3, #1
    216a:	d10a      	bne.n	2182 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    216c:	2200      	movs	r2, #0
    216e:	2300      	movs	r3, #0
    2170:	e9cd 2300 	strd	r2, r3, [sp]
    2174:	480d      	ldr	r0, [pc, #52]	; (21ac <msg_finalize+0xbc>)
    2176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    217a:	2300      	movs	r3, #0
    217c:	f003 fb2e 	bl	57dc <z_impl_k_timer_start>
    2180:	e7eb      	b.n	215a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2182:	2b0a      	cmp	r3, #10
    2184:	d1e9      	bne.n	215a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2186:	4809      	ldr	r0, [pc, #36]	; (21ac <msg_finalize+0xbc>)
    2188:	f013 f9d8 	bl	1553c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    218c:	4808      	ldr	r0, [pc, #32]	; (21b0 <msg_finalize+0xc0>)
}
    218e:	b002      	add	sp, #8
    2190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2194:	f003 b8dc 	b.w	5350 <z_impl_k_sem_give>
    2198:	20000008 	.word	0x20000008
    219c:	2000bbfc 	.word	0x2000bbfc
    21a0:	2000bc08 	.word	0x2000bc08
    21a4:	20010cc1 	.word	0x20010cc1
    21a8:	2000bca0 	.word	0x2000bca0
    21ac:	2000a898 	.word	0x2000a898
    21b0:	20000828 	.word	0x20000828

000021b4 <log_process_thread_func>:
{
    21b4:	b510      	push	{r4, lr}
	log_init();
    21b6:	f7ff fe65 	bl	1e84 <log_init>
	return z_impl_k_current_get();
    21ba:	f003 f8c3 	bl	5344 <z_impl_k_current_get>
	proc_tid = process_tid;
    21be:	4b0c      	ldr	r3, [pc, #48]	; (21f0 <log_process_thread_func+0x3c>)
    21c0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    21c2:	b130      	cbz	r0, 21d2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    21c4:	4b0b      	ldr	r3, [pc, #44]	; (21f4 <log_process_thread_func+0x40>)
	    process_tid &&
    21c6:	681b      	ldr	r3, [r3, #0]
    21c8:	2b09      	cmp	r3, #9
    21ca:	dd02      	ble.n	21d2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    21cc:	480a      	ldr	r0, [pc, #40]	; (21f8 <log_process_thread_func+0x44>)
    21ce:	f003 f8bf 	bl	5350 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    21d2:	4c09      	ldr	r4, [pc, #36]	; (21f8 <log_process_thread_func+0x44>)
    21d4:	2000      	movs	r0, #0
    21d6:	f7ff fed3 	bl	1f80 <z_impl_log_process>
		if (log_process(false) == false) {
    21da:	2800      	cmp	r0, #0
    21dc:	d1fa      	bne.n	21d4 <log_process_thread_func+0x20>
    21de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    21e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    21e6:	4620      	mov	r0, r4
    21e8:	f003 f8d2 	bl	5390 <z_impl_k_sem_take>
    21ec:	e7f2      	b.n	21d4 <log_process_thread_func+0x20>
    21ee:	bf00      	nop
    21f0:	2000bca0 	.word	0x2000bca0
    21f4:	2000bbfc 	.word	0x2000bbfc
    21f8:	20000828 	.word	0x20000828

000021fc <z_impl_log_panic>:
{
    21fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    21fe:	4f0e      	ldr	r7, [pc, #56]	; (2238 <z_impl_log_panic+0x3c>)
    2200:	783d      	ldrb	r5, [r7, #0]
    2202:	b975      	cbnz	r5, 2222 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2204:	4c0d      	ldr	r4, [pc, #52]	; (223c <z_impl_log_panic+0x40>)
    2206:	4e0e      	ldr	r6, [pc, #56]	; (2240 <z_impl_log_panic+0x44>)
	log_init();
    2208:	f7ff fe3c 	bl	1e84 <log_init>
    220c:	1b36      	subs	r6, r6, r4
    220e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2210:	42b5      	cmp	r5, r6
    2212:	db07      	blt.n	2224 <z_impl_log_panic+0x28>
    2214:	2000      	movs	r0, #0
    2216:	f7ff feb3 	bl	1f80 <z_impl_log_process>
		while (log_process(false) == true) {
    221a:	2800      	cmp	r0, #0
    221c:	d1fa      	bne.n	2214 <z_impl_log_panic+0x18>
	panic_mode = true;
    221e:	2301      	movs	r3, #1
    2220:	703b      	strb	r3, [r7, #0]
}
    2222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2224:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2226:	795b      	ldrb	r3, [r3, #5]
    2228:	b11b      	cbz	r3, 2232 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    222a:	6823      	ldr	r3, [r4, #0]
    222c:	4620      	mov	r0, r4
    222e:	691b      	ldr	r3, [r3, #16]
    2230:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2232:	3501      	adds	r5, #1
    2234:	3410      	adds	r4, #16
    2236:	e7eb      	b.n	2210 <z_impl_log_panic+0x14>
    2238:	20010cc1 	.word	0x20010cc1
    223c:	0001ebec 	.word	0x0001ebec
    2240:	0001ebfc 	.word	0x0001ebfc

00002244 <log_free>:
{
    2244:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2246:	3804      	subs	r0, #4
    2248:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    224a:	f3bf 8f5b 	dmb	ish
    224e:	e850 3f00 	ldrex	r3, [r0]
    2252:	1e5a      	subs	r2, r3, #1
    2254:	e840 2100 	strex	r1, r2, [r0]
    2258:	2900      	cmp	r1, #0
    225a:	d1f8      	bne.n	224e <log_free+0xa>
    225c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2260:	2b01      	cmp	r3, #1
    2262:	d103      	bne.n	226c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2264:	4803      	ldr	r0, [pc, #12]	; (2274 <log_free+0x30>)
    2266:	a901      	add	r1, sp, #4
    2268:	f002 fc3a 	bl	4ae0 <k_mem_slab_free>
}
    226c:	b003      	add	sp, #12
    226e:	f85d fb04 	ldr.w	pc, [sp], #4
    2272:	bf00      	nop
    2274:	2000bc10 	.word	0x2000bc10

00002278 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2278:	2320      	movs	r3, #32
    227a:	4902      	ldr	r1, [pc, #8]	; (2284 <log_msg_pool_init+0xc>)
    227c:	4802      	ldr	r0, [pc, #8]	; (2288 <log_msg_pool_init+0x10>)
    227e:	461a      	mov	r2, r3
    2280:	f012 bfe3 	b.w	1524a <k_mem_slab_init>
    2284:	20013de0 	.word	0x20013de0
    2288:	2000bca4 	.word	0x2000bca4

0000228c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    228c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    228e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2290:	4d09      	ldr	r5, [pc, #36]	; (22b8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2292:	9301      	str	r3, [sp, #4]
    2294:	2001      	movs	r0, #1
    2296:	f7ff fe73 	bl	1f80 <z_impl_log_process>
    229a:	4604      	mov	r4, r0
			log_dropped();
    229c:	f7ff fdba 	bl	1e14 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    22a0:	2200      	movs	r2, #0
    22a2:	2300      	movs	r3, #0
    22a4:	a901      	add	r1, sp, #4
    22a6:	4628      	mov	r0, r5
    22a8:	f002 fbe8 	bl	4a7c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    22ac:	b108      	cbz	r0, 22b2 <log_msg_no_space_handle+0x26>
    22ae:	2c00      	cmp	r4, #0
    22b0:	d1f0      	bne.n	2294 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    22b2:	9801      	ldr	r0, [sp, #4]
    22b4:	b003      	add	sp, #12
    22b6:	bd30      	pop	{r4, r5, pc}
    22b8:	2000bca4 	.word	0x2000bca4

000022bc <log_msg_chunk_alloc>:
{
    22bc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    22be:	2300      	movs	r3, #0
    22c0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    22c2:	4807      	ldr	r0, [pc, #28]	; (22e0 <log_msg_chunk_alloc+0x24>)
    22c4:	2200      	movs	r2, #0
    22c6:	2300      	movs	r3, #0
    22c8:	a901      	add	r1, sp, #4
    22ca:	f002 fbd7 	bl	4a7c <k_mem_slab_alloc>
	if (err != 0) {
    22ce:	b110      	cbz	r0, 22d6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    22d0:	f7ff ffdc 	bl	228c <log_msg_no_space_handle>
    22d4:	9001      	str	r0, [sp, #4]
}
    22d6:	9801      	ldr	r0, [sp, #4]
    22d8:	b003      	add	sp, #12
    22da:	f85d fb04 	ldr.w	pc, [sp], #4
    22de:	bf00      	nop
    22e0:	2000bca4 	.word	0x2000bca4

000022e4 <msg_free>:
{
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    22e6:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    22e8:	7a45      	ldrb	r5, [r0, #9]
{
    22ea:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    22ec:	092d      	lsrs	r5, r5, #4
{
    22ee:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    22f0:	07d8      	lsls	r0, r3, #31
    22f2:	d41c      	bmi.n	232e <msg_free+0x4a>
    22f4:	b1dd      	cbz	r5, 232e <msg_free+0x4a>
		u32_t smask = 0;
    22f6:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    22f8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    22fa:	9801      	ldr	r0, [sp, #4]
    22fc:	4631      	mov	r1, r6
    22fe:	f012 fa90 	bl	14822 <log_msg_arg_get>
    2302:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2304:	f7ff fe2e 	bl	1f64 <log_is_strdup>
    2308:	b170      	cbz	r0, 2328 <msg_free+0x44>
				if (smask == 0) {
    230a:	b934      	cbnz	r4, 231a <msg_free+0x36>
					smask = z_log_get_s_mask(
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	4629      	mov	r1, r5
    2310:	6918      	ldr	r0, [r3, #16]
    2312:	f7ff fd15 	bl	1d40 <z_log_get_s_mask>
					if (smask == 0) {
    2316:	4604      	mov	r4, r0
    2318:	b148      	cbz	r0, 232e <msg_free+0x4a>
				if (smask & BIT(i)) {
    231a:	fa24 f306 	lsr.w	r3, r4, r6
    231e:	07d9      	lsls	r1, r3, #31
    2320:	d502      	bpl.n	2328 <msg_free+0x44>
					log_free(buf);
    2322:	4638      	mov	r0, r7
    2324:	f7ff ff8e 	bl	2244 <log_free>
		for (i = 0; i < nargs; i++) {
    2328:	3601      	adds	r6, #1
    232a:	42ae      	cmp	r6, r5
    232c:	d3e5      	bcc.n	22fa <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    232e:	9b01      	ldr	r3, [sp, #4]
    2330:	7a1a      	ldrb	r2, [r3, #8]
    2332:	0792      	lsls	r2, r2, #30
    2334:	d504      	bpl.n	2340 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2336:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2338:	4c08      	ldr	r4, [pc, #32]	; (235c <msg_free+0x78>)
    233a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    233c:	9b03      	ldr	r3, [sp, #12]
    233e:	b92b      	cbnz	r3, 234c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2340:	4806      	ldr	r0, [pc, #24]	; (235c <msg_free+0x78>)
    2342:	a901      	add	r1, sp, #4
    2344:	f002 fbcc 	bl	4ae0 <k_mem_slab_free>
}
    2348:	b005      	add	sp, #20
    234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    234c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    234e:	a903      	add	r1, sp, #12
    2350:	4620      	mov	r0, r4
    2352:	f002 fbc5 	bl	4ae0 <k_mem_slab_free>
		cont = next;
    2356:	9503      	str	r5, [sp, #12]
    2358:	e7f0      	b.n	233c <msg_free+0x58>
    235a:	bf00      	nop
    235c:	2000bca4 	.word	0x2000bca4

00002360 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    2360:	b40e      	push	{r1, r2, r3}
    2362:	b503      	push	{r0, r1, lr}
    2364:	ab03      	add	r3, sp, #12
    2366:	4601      	mov	r1, r0
    2368:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    236c:	4804      	ldr	r0, [pc, #16]	; (2380 <print_formatted+0x20>)
	va_start(args, fmt);
    236e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    2370:	f7ff fb0a 	bl	1988 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    2374:	2000      	movs	r0, #0
    2376:	b002      	add	sp, #8
    2378:	f85d eb04 	ldr.w	lr, [sp], #4
    237c:	b003      	add	sp, #12
    237e:	4770      	bx	lr
    2380:	00014c2b 	.word	0x00014c2b

00002384 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    2384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2388:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    238a:	f011 0402 	ands.w	r4, r1, #2
{
    238e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    2392:	4606      	mov	r6, r0
    2394:	4690      	mov	r8, r2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2396:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    239a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    239e:	d007      	beq.n	23b0 <prefix_print+0x2c>
	if (!format) {
    23a0:	f011 0f44 	tst.w	r1, #68	; 0x44
    23a4:	d137      	bne.n	2416 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    23a6:	4933      	ldr	r1, [pc, #204]	; (2474 <prefix_print+0xf0>)
    23a8:	461a      	mov	r2, r3
    23aa:	f7ff ffd9 	bl	2360 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    23ae:	4604      	mov	r4, r0
	if (color) {
    23b0:	f1b9 0f00 	cmp.w	r9, #0
    23b4:	d00a      	beq.n	23cc <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    23b6:	4b30      	ldr	r3, [pc, #192]	; (2478 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    23b8:	4930      	ldr	r1, [pc, #192]	; (247c <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    23ba:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    23be:	4b30      	ldr	r3, [pc, #192]	; (2480 <prefix_print+0xfc>)
    23c0:	4630      	mov	r0, r6
    23c2:	2a00      	cmp	r2, #0
    23c4:	bf08      	it	eq
    23c6:	461a      	moveq	r2, r3
    23c8:	f7ff ffca 	bl	2360 <print_formatted>
	if (level_on) {
    23cc:	b13d      	cbz	r5, 23de <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    23ce:	4b2d      	ldr	r3, [pc, #180]	; (2484 <prefix_print+0x100>)
    23d0:	492d      	ldr	r1, [pc, #180]	; (2488 <prefix_print+0x104>)
    23d2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    23d6:	4630      	mov	r0, r6
    23d8:	f7ff ffc2 	bl	2360 <print_formatted>
    23dc:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    23de:	f1b8 0f00 	cmp.w	r8, #0
    23e2:	d044      	beq.n	246e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    23e4:	2301      	movs	r3, #1
    23e6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    23ea:	4b28      	ldr	r3, [pc, #160]	; (248c <prefix_print+0x108>)
    23ec:	f017 0f10 	tst.w	r7, #16
    23f0:	4f27      	ldr	r7, [pc, #156]	; (2490 <prefix_print+0x10c>)
    23f2:	bf18      	it	ne
    23f4:	461f      	movne	r7, r3
    23f6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    23fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    23fe:	f7ff fd19 	bl	1e34 <log_source_name_get>
    2402:	4639      	mov	r1, r7
    2404:	4602      	mov	r2, r0
    2406:	4630      	mov	r0, r6
    2408:	f7ff ffaa 	bl	2360 <print_formatted>
    240c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    240e:	4420      	add	r0, r4
    2410:	b005      	add	sp, #20
    2412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2416:	4a1f      	ldr	r2, [pc, #124]	; (2494 <prefix_print+0x110>)
    2418:	6811      	ldr	r1, [r2, #0]
    241a:	b331      	cbz	r1, 246a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    241c:	4a1e      	ldr	r2, [pc, #120]	; (2498 <prefix_print+0x114>)
    241e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2422:	6814      	ldr	r4, [r2, #0]
    2424:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    2428:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    242c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2430:	fbb4 f2fe 	udiv	r2, r4, lr
    2434:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    2438:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    243c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2440:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2444:	fbb4 fbf1 	udiv	fp, r4, r1
    2448:	fb01 441b 	mls	r4, r1, fp, r4
    244c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2450:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2454:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    2458:	e9cd b101 	strd	fp, r1, [sp, #4]
    245c:	fb0a e113 	mls	r1, sl, r3, lr
    2460:	9100      	str	r1, [sp, #0]
    2462:	490e      	ldr	r1, [pc, #56]	; (249c <prefix_print+0x118>)
    2464:	f7ff ff7c 	bl	2360 <print_formatted>
    2468:	e7a1      	b.n	23ae <prefix_print+0x2a>
		length = 0;
    246a:	4608      	mov	r0, r1
    246c:	e79f      	b.n	23ae <prefix_print+0x2a>
	total += print_formatted(log_output,
    246e:	4f08      	ldr	r7, [pc, #32]	; (2490 <prefix_print+0x10c>)
    2470:	e7c1      	b.n	23f6 <prefix_print+0x72>
    2472:	bf00      	nop
    2474:	000293fa 	.word	0x000293fa
    2478:	00028918 	.word	0x00028918
    247c:	0002997a 	.word	0x0002997a
    2480:	000293f0 	.word	0x000293f0
    2484:	0002892c 	.word	0x0002892c
    2488:	0002941f 	.word	0x0002941f
    248c:	0002af25 	.word	0x0002af25
    2490:	000293f5 	.word	0x000293f5
    2494:	2000bcc0 	.word	0x2000bcc0
    2498:	2000bcc4 	.word	0x2000bcc4
    249c:	00029403 	.word	0x00029403

000024a0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    24a0:	b538      	push	{r3, r4, r5, lr}
    24a2:	460c      	mov	r4, r1
	if (color) {
    24a4:	07e1      	lsls	r1, r4, #31
{
    24a6:	4605      	mov	r5, r0
	if (color) {
    24a8:	d503      	bpl.n	24b2 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    24aa:	4a08      	ldr	r2, [pc, #32]	; (24cc <postfix_print+0x2c>)
    24ac:	4908      	ldr	r1, [pc, #32]	; (24d0 <postfix_print+0x30>)
    24ae:	f7ff ff57 	bl	2360 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    24b2:	06e2      	lsls	r2, r4, #27
    24b4:	d408      	bmi.n	24c8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    24b6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    24b8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    24ba:	bf4c      	ite	mi
    24bc:	4905      	ldrmi	r1, [pc, #20]	; (24d4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    24be:	4906      	ldrpl	r1, [pc, #24]	; (24d8 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    24c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    24c4:	f7ff bf4c 	b.w	2360 <print_formatted>
}
    24c8:	bd38      	pop	{r3, r4, r5, pc}
    24ca:	bf00      	nop
    24cc:	000293f0 	.word	0x000293f0
    24d0:	0002997a 	.word	0x0002997a
    24d4:	00029426 	.word	0x00029426
    24d8:	00029425 	.word	0x00029425

000024dc <hexdump_line_print>:
{
    24dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24e0:	461d      	mov	r5, r3
    24e2:	9b08      	ldr	r3, [sp, #32]
    24e4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    24e6:	06da      	lsls	r2, r3, #27
{
    24e8:	4604      	mov	r4, r0
    24ea:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    24ec:	d405      	bmi.n	24fa <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    24ee:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    24f0:	bf4c      	ite	mi
    24f2:	492b      	ldrmi	r1, [pc, #172]	; (25a0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    24f4:	492b      	ldrpl	r1, [pc, #172]	; (25a4 <hexdump_line_print+0xc8>)
    24f6:	f7ff ff33 	bl	2360 <print_formatted>
		print_formatted(log_output, " ");
    24fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 25ac <hexdump_line_print+0xd0>
{
    24fe:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2502:	45a8      	cmp	r8, r5
    2504:	db2d      	blt.n	2562 <hexdump_line_print+0x86>
			print_formatted(log_output, "   ");
    2506:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 25b0 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    250a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 25b4 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    250e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 25ac <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2512:	2500      	movs	r5, #0
		if (i < length) {
    2514:	42bd      	cmp	r5, r7
    2516:	d232      	bcs.n	257e <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    2518:	5d72      	ldrb	r2, [r6, r5]
    251a:	4649      	mov	r1, r9
    251c:	4620      	mov	r0, r4
    251e:	f7ff ff1f 	bl	2360 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2522:	3501      	adds	r5, #1
    2524:	2d10      	cmp	r5, #16
    2526:	d123      	bne.n	2570 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    2528:	491f      	ldr	r1, [pc, #124]	; (25a8 <hexdump_line_print+0xcc>)
			print_formatted(log_output, " ");
    252a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 25ac <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    252e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 25b8 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    2532:	f8df a088 	ldr.w	sl, [pc, #136]	; 25bc <hexdump_line_print+0xe0>
	print_formatted(log_output, "|");
    2536:	4620      	mov	r0, r4
    2538:	f7ff ff12 	bl	2360 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    253c:	2500      	movs	r5, #0
		if (i < length) {
    253e:	42af      	cmp	r7, r5
    2540:	d929      	bls.n	2596 <hexdump_line_print+0xba>
			char c = (char)data[i];
    2542:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    2544:	f812 3009 	ldrb.w	r3, [r2, r9]
    2548:	f013 0f97 	tst.w	r3, #151	; 0x97
    254c:	bf08      	it	eq
    254e:	222e      	moveq	r2, #46	; 0x2e
    2550:	4651      	mov	r1, sl
    2552:	4620      	mov	r0, r4
    2554:	f7ff ff04 	bl	2360 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2558:	3501      	adds	r5, #1
    255a:	2d10      	cmp	r5, #16
    255c:	d114      	bne.n	2588 <hexdump_line_print+0xac>
}
    255e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    2562:	4649      	mov	r1, r9
    2564:	4620      	mov	r0, r4
    2566:	f7ff fefb 	bl	2360 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    256a:	f108 0801 	add.w	r8, r8, #1
    256e:	e7c8      	b.n	2502 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2570:	076a      	lsls	r2, r5, #29
    2572:	d1cf      	bne.n	2514 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    2574:	4651      	mov	r1, sl
    2576:	4620      	mov	r0, r4
    2578:	f7ff fef2 	bl	2360 <print_formatted>
    257c:	e7ca      	b.n	2514 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    257e:	4641      	mov	r1, r8
    2580:	4620      	mov	r0, r4
    2582:	f7ff feed 	bl	2360 <print_formatted>
    2586:	e7cc      	b.n	2522 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    2588:	076b      	lsls	r3, r5, #29
    258a:	d1d8      	bne.n	253e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    258c:	4641      	mov	r1, r8
    258e:	4620      	mov	r0, r4
    2590:	f7ff fee6 	bl	2360 <print_formatted>
    2594:	e7d3      	b.n	253e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    2596:	4641      	mov	r1, r8
    2598:	4620      	mov	r0, r4
    259a:	f7ff fee1 	bl	2360 <print_formatted>
    259e:	e7db      	b.n	2558 <hexdump_line_print+0x7c>
    25a0:	00029426 	.word	0x00029426
    25a4:	00029425 	.word	0x00029425
    25a8:	00029432 	.word	0x00029432
    25ac:	0002a4da 	.word	0x0002a4da
    25b0:	0002942e 	.word	0x0002942e
    25b4:	00029428 	.word	0x00029428
    25b8:	0002c802 	.word	0x0002c802
    25bc:	00029434 	.word	0x00029434

000025c0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    25c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    25c4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    25c6:	f013 0807 	ands.w	r8, r3, #7
{
    25ca:	4617      	mov	r7, r2
    25cc:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    25ce:	7a0a      	ldrb	r2, [r1, #8]
    25d0:	4605      	mov	r5, r0
    25d2:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    25d4:	d021      	beq.n	261a <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    25d6:	8949      	ldrh	r1, [r1, #10]
    25d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    25dc:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    25e0:	43d2      	mvns	r2, r2
    25e2:	e9cd 8300 	strd	r8, r3, [sp]
    25e6:	9102      	str	r1, [sp, #8]
    25e8:	68f3      	ldr	r3, [r6, #12]
    25ea:	f002 0201 	and.w	r2, r2, #1
    25ee:	4639      	mov	r1, r7
    25f0:	f7ff fec8 	bl	2384 <prefix_print>
    25f4:	4681      	mov	r9, r0
    25f6:	7a34      	ldrb	r4, [r6, #8]
    25f8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    25fa:	f014 0401 	ands.w	r4, r4, #1
    25fe:	d00e      	beq.n	261e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    2600:	4629      	mov	r1, r5
    2602:	4630      	mov	r0, r6
    2604:	f012 f9a7 	bl	14956 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    2608:	f1b8 0f00 	cmp.w	r8, #0
    260c:	d02b      	beq.n	2666 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    260e:	4642      	mov	r2, r8
    2610:	4639      	mov	r1, r7
    2612:	4628      	mov	r0, r5
    2614:	f7ff ff44 	bl	24a0 <postfix_print>
    2618:	e025      	b.n	2666 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    261a:	46c1      	mov	r9, r8
    261c:	e7eb      	b.n	25f6 <log_output_msg_process+0x36>
	} else if (raw_string) {
    261e:	f1b8 0f00 	cmp.w	r8, #0
    2622:	d126      	bne.n	2672 <log_output_msg_process+0xb2>
	size_t offset = 0;
    2624:	4627      	mov	r7, r4
		length = log_output->size;
    2626:	68eb      	ldr	r3, [r5, #12]
    2628:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    262a:	aa06      	add	r2, sp, #24
    262c:	463b      	mov	r3, r7
    262e:	68a9      	ldr	r1, [r5, #8]
    2630:	4630      	mov	r0, r6
    2632:	f012 f97c 	bl	1492e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    2636:	9a06      	ldr	r2, [sp, #24]
    2638:	686b      	ldr	r3, [r5, #4]
    263a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    263c:	b13a      	cbz	r2, 264e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    263e:	68ab      	ldr	r3, [r5, #8]
    2640:	4413      	add	r3, r2
    2642:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2646:	f1a4 030a 	sub.w	r3, r4, #10
    264a:	425c      	negs	r4, r3
    264c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    264e:	4628      	mov	r0, r5
    2650:	f012 fade 	bl	14c10 <log_output_flush>
		offset += length;
    2654:	9b06      	ldr	r3, [sp, #24]
    2656:	441f      	add	r7, r3
	} while (length > 0);
    2658:	2b00      	cmp	r3, #0
    265a:	d1e4      	bne.n	2626 <log_output_msg_process+0x66>
	if (eol) {
    265c:	b11c      	cbz	r4, 2666 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    265e:	4914      	ldr	r1, [pc, #80]	; (26b0 <log_output_msg_process+0xf0>)
    2660:	4628      	mov	r0, r5
    2662:	f7ff fe7d 	bl	2360 <print_formatted>
	}

	log_output_flush(log_output);
    2666:	4628      	mov	r0, r5
    2668:	f012 fad2 	bl	14c10 <log_output_flush>
}
    266c:	b00a      	add	sp, #40	; 0x28
    266e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2672:	4630      	mov	r0, r6
    2674:	f012 f907 	bl	14886 <log_msg_str_get>
    2678:	490e      	ldr	r1, [pc, #56]	; (26b4 <log_output_msg_process+0xf4>)
    267a:	4602      	mov	r2, r0
    267c:	4628      	mov	r0, r5
    267e:	f7ff fe6f 	bl	2360 <print_formatted>
		length = sizeof(buf);
    2682:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2686:	aa05      	add	r2, sp, #20
    2688:	4623      	mov	r3, r4
    268a:	a906      	add	r1, sp, #24
    268c:	4630      	mov	r0, r6
		length = sizeof(buf);
    268e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2692:	f012 f94c 	bl	1492e <log_msg_hexdump_data_get>
		if (length) {
    2696:	9a05      	ldr	r2, [sp, #20]
    2698:	2a00      	cmp	r2, #0
    269a:	d0b8      	beq.n	260e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    269c:	464b      	mov	r3, r9
    269e:	9700      	str	r7, [sp, #0]
    26a0:	a906      	add	r1, sp, #24
    26a2:	4628      	mov	r0, r5
    26a4:	f7ff ff1a 	bl	24dc <hexdump_line_print>
			offset += length;
    26a8:	9b05      	ldr	r3, [sp, #20]
    26aa:	441c      	add	r4, r3
		length = sizeof(buf);
    26ac:	e7eb      	b.n	2686 <log_output_msg_process+0xc6>
    26ae:	bf00      	nop
    26b0:	00029437 	.word	0x00029437
    26b4:	0002997a 	.word	0x0002997a

000026b8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    26b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    26ba:	e9d0 4300 	ldrd	r4, r3, [r0]
    26be:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    26c0:	4a0f      	ldr	r2, [pc, #60]	; (2700 <log_output_dropped_process+0x48>)
    26c2:	f242 730f 	movw	r3, #9999	; 0x270f
    26c6:	428b      	cmp	r3, r1
    26c8:	bf28      	it	cs
    26ca:	460b      	movcs	r3, r1
    26cc:	4668      	mov	r0, sp
    26ce:	2105      	movs	r1, #5
    26d0:	f011 fed3 	bl	1447a <snprintk>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    26d4:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    26d6:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    26d8:	490a      	ldr	r1, [pc, #40]	; (2704 <log_output_dropped_process+0x4c>)
    26da:	4620      	mov	r0, r4
    26dc:	220b      	movs	r2, #11
    26de:	f012 f92d 	bl	1493c <buffer_write>
	buffer_write(outf, buf, len, dev);
    26e2:	462b      	mov	r3, r5
    26e4:	4632      	mov	r2, r6
    26e6:	4669      	mov	r1, sp
    26e8:	4620      	mov	r0, r4
    26ea:	f012 f927 	bl	1493c <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    26ee:	4906      	ldr	r1, [pc, #24]	; (2708 <log_output_dropped_process+0x50>)
    26f0:	462b      	mov	r3, r5
    26f2:	221b      	movs	r2, #27
    26f4:	4620      	mov	r0, r4
    26f6:	f012 f921 	bl	1493c <buffer_write>
}
    26fa:	b002      	add	sp, #8
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	bf00      	nop
    2700:	0002929f 	.word	0x0002929f
    2704:	00029475 	.word	0x00029475
    2708:	00029459 	.word	0x00029459

0000270c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    270c:	4a08      	ldr	r2, [pc, #32]	; (2730 <log_output_timestamp_freq_set+0x24>)
{
    270e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2710:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2712:	4c08      	ldr	r4, [pc, #32]	; (2734 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2714:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2716:	2100      	movs	r1, #0
    2718:	42a0      	cmp	r0, r4
    271a:	d804      	bhi.n	2726 <log_output_timestamp_freq_set+0x1a>
    271c:	b101      	cbz	r1, 2720 <log_output_timestamp_freq_set+0x14>
    271e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2720:	4b05      	ldr	r3, [pc, #20]	; (2738 <log_output_timestamp_freq_set+0x2c>)
    2722:	6018      	str	r0, [r3, #0]
}
    2724:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2726:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2728:	005b      	lsls	r3, r3, #1
    272a:	2101      	movs	r1, #1
    272c:	e7f4      	b.n	2718 <log_output_timestamp_freq_set+0xc>
    272e:	bf00      	nop
    2730:	2000bcc4 	.word	0x2000bcc4
    2734:	000f4240 	.word	0x000f4240
    2738:	2000bcc0 	.word	0x2000bcc0

0000273c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    273c:	4b01      	ldr	r3, [pc, #4]	; (2744 <log_backend_rtt_init+0x8>)
    273e:	2201      	movs	r2, #1
    2740:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2742:	4770      	bx	lr
    2744:	20010cd2 	.word	0x20010cd2

00002748 <panic>:

static void panic(struct log_backend const *const backend)
{
    2748:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    274a:	4803      	ldr	r0, [pc, #12]	; (2758 <panic+0x10>)
    274c:	f012 fa60 	bl	14c10 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <panic+0x14>)
    2752:	2201      	movs	r2, #1
    2754:	701a      	strb	r2, [r3, #0]
}
    2756:	bd08      	pop	{r3, pc}
    2758:	00028958 	.word	0x00028958
    275c:	20010cd3 	.word	0x20010cd3

00002760 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    2760:	4801      	ldr	r0, [pc, #4]	; (2768 <dropped+0x8>)
    2762:	f7ff bfa9 	b.w	26b8 <log_output_dropped_process>
    2766:	bf00      	nop
    2768:	00028958 	.word	0x00028958

0000276c <put>:
{
    276c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    276e:	4608      	mov	r0, r1
    2770:	460c      	mov	r4, r1
    2772:	f012 f846 	bl	14802 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    2776:	4805      	ldr	r0, [pc, #20]	; (278c <put+0x20>)
    2778:	4621      	mov	r1, r4
    277a:	220f      	movs	r2, #15
    277c:	f7ff ff20 	bl	25c0 <log_output_msg_process>
	log_msg_put(msg);
    2780:	4620      	mov	r0, r4
}
    2782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2786:	f012 b86b 	b.w	14860 <log_msg_put>
    278a:	bf00      	nop
    278c:	00028958 	.word	0x00028958

00002790 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2790:	4b05      	ldr	r3, [pc, #20]	; (27a8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	b11b      	cbz	r3, 279e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2796:	f241 3088 	movw	r0, #5000	; 0x1388
    279a:	f012 be75 	b.w	15488 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    279e:	20a4      	movs	r0, #164	; 0xa4
    27a0:	2100      	movs	r1, #0
    27a2:	f002 bdaf 	b.w	5304 <z_impl_k_sleep>
    27a6:	bf00      	nop
    27a8:	20010cd3 	.word	0x20010cd3

000027ac <data_out_block_mode>:
{
    27ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    27b0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2844 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    27b4:	f8df b090 	ldr.w	fp, [pc, #144]	; 2848 <data_out_block_mode+0x9c>
{
    27b8:	4607      	mov	r7, r0
    27ba:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    27bc:	2404      	movs	r4, #4
    27be:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    27c0:	f899 3000 	ldrb.w	r3, [r9]
    27c4:	b933      	cbnz	r3, 27d4 <data_out_block_mode+0x28>
    27c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    27ce:	4658      	mov	r0, fp
    27d0:	f002 f9b0 	bl	4b34 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    27d4:	4632      	mov	r2, r6
    27d6:	4639      	mov	r1, r7
    27d8:	2000      	movs	r0, #0
    27da:	f000 fab3 	bl	2d44 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    27de:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    27e2:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    27e4:	b913      	cbnz	r3, 27ec <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    27e6:	4658      	mov	r0, fp
    27e8:	f002 fa1c 	bl	4c24 <z_impl_k_mutex_unlock>
		if (ret) {
    27ec:	4d14      	ldr	r5, [pc, #80]	; (2840 <data_out_block_mode+0x94>)
    27ee:	f1b8 0f00 	cmp.w	r8, #0
    27f2:	d018      	beq.n	2826 <data_out_block_mode+0x7a>
	host_present = true;
    27f4:	2301      	movs	r3, #1
    27f6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    27f8:	f89a 3000 	ldrb.w	r3, [sl]
    27fc:	b933      	cbnz	r3, 280c <data_out_block_mode+0x60>
}
    27fe:	4630      	mov	r0, r6
    2800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    2804:	b95c      	cbnz	r4, 281e <data_out_block_mode+0x72>
		host_present = false;
    2806:	702c      	strb	r4, [r5, #0]
    2808:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    280c:	2000      	movs	r0, #0
    280e:	f000 fb19 	bl	2e44 <SEGGER_RTT_HasDataUp>
    2812:	2800      	cmp	r0, #0
    2814:	d0f3      	beq.n	27fe <data_out_block_mode+0x52>
    2816:	782b      	ldrb	r3, [r5, #0]
    2818:	2b00      	cmp	r3, #0
    281a:	d1f3      	bne.n	2804 <data_out_block_mode+0x58>
    281c:	e7ef      	b.n	27fe <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    281e:	3c01      	subs	r4, #1
    2820:	f7ff ffb6 	bl	2790 <on_failed_write.part.0>
    2824:	e7f2      	b.n	280c <data_out_block_mode+0x60>
		} else if (host_present) {
    2826:	782b      	ldrb	r3, [r5, #0]
    2828:	b113      	cbz	r3, 2830 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    282a:	3c01      	subs	r4, #1
    282c:	d104      	bne.n	2838 <data_out_block_mode+0x8c>
		host_present = false;
    282e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2830:	782b      	ldrb	r3, [r5, #0]
    2832:	2b00      	cmp	r3, #0
    2834:	d1c4      	bne.n	27c0 <data_out_block_mode+0x14>
    2836:	e7e2      	b.n	27fe <data_out_block_mode+0x52>
    2838:	f7ff ffaa 	bl	2790 <on_failed_write.part.0>
    283c:	e7f8      	b.n	2830 <data_out_block_mode+0x84>
    283e:	bf00      	nop
    2840:	20010cd2 	.word	0x20010cd2
    2844:	20010cd3 	.word	0x20010cd3
    2848:	200008ac 	.word	0x200008ac

0000284c <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    284c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    284e:	4c04      	ldr	r4, [pc, #16]	; (2860 <__do_init_array_aux+0x14>)
    2850:	4d04      	ldr	r5, [pc, #16]	; (2864 <__do_init_array_aux+0x18>)
    2852:	42ac      	cmp	r4, r5
    2854:	d300      	bcc.n	2858 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    2856:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    2858:	f854 3b04 	ldr.w	r3, [r4], #4
    285c:	4798      	blx	r3
		func++) {
    285e:	e7f8      	b.n	2852 <__do_init_array_aux+0x6>
    2860:	0001eba4 	.word	0x0001eba4
    2864:	0001eba4 	.word	0x0001eba4

00002868 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    2868:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    286a:	4c05      	ldr	r4, [pc, #20]	; (2880 <__do_global_ctors_aux+0x18>)
    286c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    286e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    2872:	b905      	cbnz	r5, 2876 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    2874:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    2876:	f854 3904 	ldr.w	r3, [r4], #-4
    287a:	3d01      	subs	r5, #1
    287c:	4798      	blx	r3
    287e:	e7f8      	b.n	2872 <__do_global_ctors_aux+0xa>
    2880:	0001eb9c 	.word	0x0001eb9c

00002884 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    2884:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2886:	4804      	ldr	r0, [pc, #16]	; (2898 <rtt_console_init+0x14>)
    2888:	f7ff f878 	bl	197c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    288c:	4802      	ldr	r0, [pc, #8]	; (2898 <rtt_console_init+0x14>)
    288e:	f000 ff6b 	bl	3768 <__stdout_hook_install>

	return 0;
}
    2892:	2000      	movs	r0, #0
    2894:	bd08      	pop	{r3, pc}
    2896:	bf00      	nop
    2898:	0000289d 	.word	0x0000289d

0000289c <rtt_console_out>:
{
    289c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    28a0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2904 <rtt_console_out+0x68>
    28a4:	4e16      	ldr	r6, [pc, #88]	; (2900 <rtt_console_out+0x64>)
	char c = (char)character;
    28a6:	f88d 0007 	strb.w	r0, [sp, #7]
{
    28aa:	4604      	mov	r4, r0
	char c = (char)character;
    28ac:	2503      	movs	r5, #3
    28ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28b6:	4640      	mov	r0, r8
    28b8:	f002 f93c 	bl	4b34 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    28bc:	2201      	movs	r2, #1
    28be:	f10d 0107 	add.w	r1, sp, #7
    28c2:	2000      	movs	r0, #0
    28c4:	f000 fa8a 	bl	2ddc <SEGGER_RTT_WriteNoLock>
    28c8:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    28ca:	4640      	mov	r0, r8
    28cc:	f002 f9aa 	bl	4c24 <z_impl_k_mutex_unlock>
		if (cnt) {
    28d0:	b12f      	cbz	r7, 28de <rtt_console_out+0x42>
			host_present = true;
    28d2:	2301      	movs	r3, #1
    28d4:	7033      	strb	r3, [r6, #0]
}
    28d6:	4620      	mov	r0, r4
    28d8:	b002      	add	sp, #8
    28da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    28de:	7833      	ldrb	r3, [r6, #0]
    28e0:	2b00      	cmp	r3, #0
    28e2:	d0f8      	beq.n	28d6 <rtt_console_out+0x3a>
			if (max_cnt) {
    28e4:	3d01      	subs	r5, #1
    28e6:	d008      	beq.n	28fa <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    28e8:	f012 fdc8 	bl	1547c <k_is_in_isr>
    28ec:	2800      	cmp	r0, #0
    28ee:	d1de      	bne.n	28ae <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    28f0:	2100      	movs	r1, #0
    28f2:	2042      	movs	r0, #66	; 0x42
    28f4:	f002 fd06 	bl	5304 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline s32_t k_msleep(s32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    28f8:	e7d9      	b.n	28ae <rtt_console_out+0x12>
				host_present = false;
    28fa:	7035      	strb	r5, [r6, #0]
    28fc:	e7eb      	b.n	28d6 <rtt_console_out+0x3a>
    28fe:	bf00      	nop
    2900:	20010cd4 	.word	0x20010cd4
    2904:	200008ac 	.word	0x200008ac

00002908 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    2908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    290a:	4f12      	ldr	r7, [pc, #72]	; (2954 <clkstarted_handle.constprop.0+0x4c>)
    290c:	68fb      	ldr	r3, [r7, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    290e:	240c      	movs	r4, #12
    2910:	fb04 3400 	mla	r4, r4, r0, r3
    2914:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    2916:	4605      	mov	r5, r0
	sub_data->started = true;
    2918:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    291a:	f04f 0320 	mov.w	r3, #32
    291e:	f3ef 8111 	mrs	r1, BASEPRI
    2922:	f383 8811 	msr	BASEPRI, r3
    2926:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    292a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    292c:	b12b      	cbz	r3, 293a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    292e:	6866      	ldr	r6, [r4, #4]
    2930:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2932:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2934:	42b3      	cmp	r3, r6
	list->tail = node;
    2936:	bf08      	it	eq
    2938:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    293a:	f381 8811 	msr	BASEPRI, r1
    293e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    2942:	b903      	cbnz	r3, 2946 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    2944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    2946:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    294a:	4629      	mov	r1, r5
    294c:	4638      	mov	r0, r7
    294e:	47b0      	blx	r6
    2950:	e7e3      	b.n	291a <clkstarted_handle.constprop.0+0x12>
    2952:	bf00      	nop
    2954:	20000790 	.word	0x20000790

00002958 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2958:	4b15      	ldr	r3, [pc, #84]	; (29b0 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    295a:	b507      	push	{r0, r1, r2, lr}
    295c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    295e:	b182      	cbz	r2, 2982 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    2960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2964:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2968:	07d1      	lsls	r1, r2, #31
    296a:	d50a      	bpl.n	2982 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    296c:	2200      	movs	r2, #0
    296e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	9300      	str	r3, [sp, #0]
    (void)dummy;
    2974:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2976:	4b0f      	ldr	r3, [pc, #60]	; (29b4 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    2978:	68db      	ldr	r3, [r3, #12]
    297a:	7a58      	ldrb	r0, [r3, #9]
    297c:	b908      	cbnz	r0, 2982 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    297e:	f7ff ffc3 	bl	2908 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2982:	4b0d      	ldr	r3, [pc, #52]	; (29b8 <nrf_power_clock_isr+0x60>)
    2984:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2986:	b182      	cbz	r2, 29aa <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    2988:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    298c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2990:	0792      	lsls	r2, r2, #30
    2992:	d50a      	bpl.n	29aa <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2994:	2200      	movs	r2, #0
    2996:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2998:	681b      	ldr	r3, [r3, #0]
    299a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    299c:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    299e:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    29a0:	b003      	add	sp, #12
    29a2:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    29a6:	f7ff bfaf 	b.w	2908 <clkstarted_handle.constprop.0>
}
    29aa:	b003      	add	sp, #12
    29ac:	f85d fb04 	ldr.w	pc, [sp], #4
    29b0:	40000100 	.word	0x40000100
    29b4:	20000790 	.word	0x20000790
    29b8:	40000104 	.word	0x40000104

000029bc <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    29bc:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    29c4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    29c8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    29cc:	4290      	cmp	r0, r2
    29ce:	d100      	bne.n	29d2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    29d0:	4770      	bx	lr
    29d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    29d6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    29dc:	e7f2      	b.n	29c4 <handle_next_tick_case+0x8>
    29de:	bf00      	nop
    29e0:	40011000 	.word	0x40011000

000029e4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29e4:	4b04      	ldr	r3, [pc, #16]	; (29f8 <event_clear+0x14>)
    29e6:	2200      	movs	r2, #0
{
    29e8:	b082      	sub	sp, #8
    29ea:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	9301      	str	r3, [sp, #4]
    (void)dummy;
    29f0:	9b01      	ldr	r3, [sp, #4]
}
    29f2:	b002      	add	sp, #8
    29f4:	4770      	bx	lr
    29f6:	bf00      	nop
    29f8:	40011140 	.word	0x40011140

000029fc <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    29fc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    29fe:	f7ff fff1 	bl	29e4 <event_clear>
    return p_reg->CC[ch];
    2a02:	4b07      	ldr	r3, [pc, #28]	; (2a20 <rtc1_nrf_isr+0x24>)

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2a04:	4a07      	ldr	r2, [pc, #28]	; (2a24 <rtc1_nrf_isr+0x28>)
    2a06:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    2a0a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2a0c:	1ac0      	subs	r0, r0, r3
    2a0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2a12:	4403      	add	r3, r0
    2a14:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    2a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    2a1a:	f002 be4b 	b.w	56b4 <z_clock_announce>
    2a1e:	bf00      	nop
    2a20:	40011000 	.word	0x40011000
    2a24:	2000bcf8 	.word	0x2000bcf8

00002a28 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    2a28:	b538      	push	{r3, r4, r5, lr}
    2a2a:	4814      	ldr	r0, [pc, #80]	; (2a7c <z_clock_driver_init+0x54>)
    2a2c:	f001 fe8c 	bl	4748 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    2a30:	b300      	cbz	r0, 2a74 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    2a32:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    2a34:	4d12      	ldr	r5, [pc, #72]	; (2a80 <z_clock_driver_init+0x58>)
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	2101      	movs	r1, #1
    2a3a:	2400      	movs	r4, #0
    2a3c:	4798      	blx	r3
    2a3e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    2a42:	f7ff ffcf 	bl	29e4 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a46:	4b0f      	ldr	r3, [pc, #60]	; (2a84 <z_clock_driver_init+0x5c>)
    2a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2a4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    2a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a54:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    2a58:	4622      	mov	r2, r4
    2a5a:	2101      	movs	r1, #1
    2a5c:	2011      	movs	r0, #17
    2a5e:	f000 fa59 	bl	2f14 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    2a62:	2011      	movs	r0, #17
    2a64:	f000 fa46 	bl	2ef4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a68:	4a07      	ldr	r2, [pc, #28]	; (2a88 <z_clock_driver_init+0x60>)
    2a6a:	2301      	movs	r3, #1
    2a6c:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    2a6e:	4620      	mov	r0, r4
    2a70:	602b      	str	r3, [r5, #0]
}
    2a72:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a78:	e7fb      	b.n	2a72 <z_clock_driver_init+0x4a>
    2a7a:	bf00      	nop
    2a7c:	00029497 	.word	0x00029497
    2a80:	40011000 	.word	0x40011000
    2a84:	e000e100 	.word	0xe000e100
    2a88:	40011008 	.word	0x40011008

00002a8c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2a8c:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    2a8e:	4b2a      	ldr	r3, [pc, #168]	; (2b38 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    2a90:	4c2a      	ldr	r4, [pc, #168]	; (2b3c <z_clock_set_timeout+0xb0>)
    2a92:	6819      	ldr	r1, [r3, #0]
    2a94:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2a98:	4d29      	ldr	r5, [pc, #164]	; (2b40 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    2a9a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2a9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2aa0:	bf08      	it	eq
    2aa2:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    2aa4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2aa8:	0212      	lsls	r2, r2, #8
    2aaa:	d434      	bmi.n	2b16 <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    2aac:	3801      	subs	r0, #1
    2aae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2ab2:	42a8      	cmp	r0, r5
    2ab4:	bfa8      	it	ge
    2ab6:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2ab8:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    2aba:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2abe:	4418      	add	r0, r3
    2ac0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    2ac4:	42a8      	cmp	r0, r5
    2ac6:	bf94      	ite	ls
    2ac8:	180d      	addls	r5, r1, r0
    2aca:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    2acc:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    2ad0:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    2ad4:	f7ff ff86 	bl	29e4 <event_clear>
	return (a - b) & COUNTER_MAX;
    2ad8:	1a09      	subs	r1, r1, r0
    2ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2ade:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    2ae2:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    2ae4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2ae8:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    2aec:	d104      	bne.n	2af8 <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    2aee:	200f      	movs	r0, #15
    2af0:	f012 fcca 	bl	15488 <z_impl_k_busy_wait>
		event_clear();
    2af4:	f7ff ff76 	bl	29e4 <event_clear>
    2af8:	4b12      	ldr	r3, [pc, #72]	; (2b44 <z_clock_set_timeout+0xb8>)
    2afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2afe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    2b02:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2b06:	1a2b      	subs	r3, r5, r0
    2b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    2b0c:	2b01      	cmp	r3, #1
    2b0e:	d104      	bne.n	2b1a <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    2b10:	f7ff ff54 	bl	29bc <handle_next_tick_case>
    2b14:	e00b      	b.n	2b2e <z_clock_set_timeout+0xa2>
		ticks = 0;
    2b16:	2000      	movs	r0, #0
    2b18:	e7ce      	b.n	2ab8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2b1a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2b1e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    2b22:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2b26:	1a2d      	subs	r5, r5, r0
    2b28:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    2b2a:	022b      	lsls	r3, r5, #8
    2b2c:	d4f0      	bmi.n	2b10 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    2b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b32:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    2b36:	bd70      	pop	{r4, r5, r6, pc}
    2b38:	2000bcf8 	.word	0x2000bcf8
    2b3c:	40011000 	.word	0x40011000
    2b40:	007fffff 	.word	0x007fffff
    2b44:	e000e100 	.word	0xe000e100

00002b48 <z_clock_elapsed>:
	__asm__ volatile(
    2b48:	f04f 0220 	mov.w	r2, #32
    2b4c:	f3ef 8311 	mrs	r3, BASEPRI
    2b50:	f382 8811 	msr	BASEPRI, r2
    2b54:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    2b58:	4a06      	ldr	r2, [pc, #24]	; (2b74 <z_clock_elapsed+0x2c>)
    2b5a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2b5e:	4a06      	ldr	r2, [pc, #24]	; (2b78 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    2b60:	6812      	ldr	r2, [r2, #0]
    2b62:	1a80      	subs	r0, r0, r2
    2b64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    2b68:	f383 8811 	msr	BASEPRI, r3
    2b6c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop
    2b74:	40011000 	.word	0x40011000
    2b78:	2000bcf8 	.word	0x2000bcf8

00002b7c <z_timer_cycle_get_32>:
	__asm__ volatile(
    2b7c:	f04f 0320 	mov.w	r3, #32
    2b80:	f3ef 8211 	mrs	r2, BASEPRI
    2b84:	f383 8811 	msr	BASEPRI, r3
    2b88:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    2b8c:	4906      	ldr	r1, [pc, #24]	; (2ba8 <z_timer_cycle_get_32+0x2c>)
    2b8e:	4b07      	ldr	r3, [pc, #28]	; (2bac <z_timer_cycle_get_32+0x30>)
    2b90:	6808      	ldr	r0, [r1, #0]
    2b92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    2b96:	f382 8811 	msr	BASEPRI, r2
    2b9a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2b9e:	1a1b      	subs	r3, r3, r0
    2ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    2ba4:	4418      	add	r0, r3
    2ba6:	4770      	bx	lr
    2ba8:	2000bcf8 	.word	0x2000bcf8
    2bac:	40011000 	.word	0x40011000

00002bb0 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    2bb0:	4801      	ldr	r0, [pc, #4]	; (2bb8 <nrf_cc310_platform_abort_init+0x8>)
    2bb2:	f00f b841 	b.w	11c38 <nrf_cc310_platform_set_abort>
    2bb6:	bf00      	nop
    2bb8:	0002898c 	.word	0x0002898c

00002bbc <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    2bbc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2bbe:	b130      	cbz	r0, 2bce <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2bc0:	6843      	ldr	r3, [r0, #4]
    2bc2:	b13b      	cbz	r3, 2bd4 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    2bc4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2bc6:	f002 f82d 	bl	4c24 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    2bca:	2000      	movs	r0, #0
}
    2bcc:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    2bce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2bd2:	e7fb      	b.n	2bcc <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2bd4:	4800      	ldr	r0, [pc, #0]	; (2bd8 <mutex_unlock+0x1c>)
    2bd6:	e7f9      	b.n	2bcc <mutex_unlock+0x10>
    2bd8:	ffff8fea 	.word	0xffff8fea

00002bdc <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    2bdc:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    2bde:	4604      	mov	r4, r0
    2be0:	b918      	cbnz	r0, 2bea <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    2be2:	4b0b      	ldr	r3, [pc, #44]	; (2c10 <mutex_free+0x34>)
    2be4:	480b      	ldr	r0, [pc, #44]	; (2c14 <mutex_free+0x38>)
    2be6:	685b      	ldr	r3, [r3, #4]
    2be8:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2bea:	6865      	ldr	r5, [r4, #4]
    2bec:	b155      	cbz	r5, 2c04 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    2bee:	f015 0502 	ands.w	r5, r5, #2
    2bf2:	6820      	ldr	r0, [r4, #0]
    2bf4:	d107      	bne.n	2c06 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    2bf6:	4601      	mov	r1, r0
    2bf8:	4807      	ldr	r0, [pc, #28]	; (2c18 <mutex_free+0x3c>)
    2bfa:	f001 ff71 	bl	4ae0 <k_mem_slab_free>
        mutex->mutex = NULL;
    2bfe:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    2c00:	2300      	movs	r3, #0
    2c02:	6063      	str	r3, [r4, #4]
}
    2c04:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
    2c06:	2214      	movs	r2, #20
    2c08:	2100      	movs	r1, #0
    2c0a:	f01b fd05 	bl	1e618 <memset>
    2c0e:	e7f7      	b.n	2c00 <mutex_free+0x24>
    2c10:	200006e8 	.word	0x200006e8
    2c14:	000294c1 	.word	0x000294c1
    2c18:	2000bcfc 	.word	0x2000bcfc

00002c1c <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    2c1c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c1e:	4604      	mov	r4, r0
    2c20:	b918      	cbnz	r0, 2c2a <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    2c22:	4b14      	ldr	r3, [pc, #80]	; (2c74 <mutex_init+0x58>)
    2c24:	4814      	ldr	r0, [pc, #80]	; (2c78 <mutex_init+0x5c>)
    2c26:	685b      	ldr	r3, [r3, #4]
    2c28:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    2c2a:	6863      	ldr	r3, [r4, #4]
    2c2c:	b9cb      	cbnz	r3, 2c62 <mutex_init+0x46>
    2c2e:	6823      	ldr	r3, [r4, #0]
    2c30:	b9bb      	cbnz	r3, 2c62 <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2c32:	4812      	ldr	r0, [pc, #72]	; (2c7c <mutex_init+0x60>)
    2c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c3c:	4621      	mov	r1, r4
    2c3e:	f001 ff1d 	bl	4a7c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2c42:	b908      	cbnz	r0, 2c48 <mutex_init+0x2c>
    2c44:	6823      	ldr	r3, [r4, #0]
    2c46:	b91b      	cbnz	r3, 2c50 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    2c48:	4b0a      	ldr	r3, [pc, #40]	; (2c74 <mutex_init+0x58>)
    2c4a:	480d      	ldr	r0, [pc, #52]	; (2c80 <mutex_init+0x64>)
    2c4c:	685b      	ldr	r3, [r3, #4]
    2c4e:	4798      	blx	r3
    2c50:	6820      	ldr	r0, [r4, #0]
    2c52:	2214      	movs	r2, #20
    2c54:	2100      	movs	r1, #0
    2c56:	f01b fcdf 	bl	1e618 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2c5a:	6863      	ldr	r3, [r4, #4]
    2c5c:	f043 0302 	orr.w	r3, r3, #2
    2c60:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c62:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2c64:	f012 fb0c 	bl	15280 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    2c68:	6863      	ldr	r3, [r4, #4]
    2c6a:	f043 0301 	orr.w	r3, r3, #1
    2c6e:	6063      	str	r3, [r4, #4]
}
    2c70:	bd10      	pop	{r4, pc}
    2c72:	bf00      	nop
    2c74:	200006e8 	.word	0x200006e8
    2c78:	000294c1 	.word	0x000294c1
    2c7c:	2000bcfc 	.word	0x2000bcfc
    2c80:	000294e7 	.word	0x000294e7

00002c84 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    2c84:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2c86:	b168      	cbz	r0, 2ca4 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2c88:	6843      	ldr	r3, [r0, #4]
    2c8a:	b173      	cbz	r3, 2caa <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c8c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c96:	f001 ff4d 	bl	4b34 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <mutex_lock+0x2c>)
    if (ret == 0) {
    2c9c:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    2c9e:	bf18      	it	ne
    2ca0:	4618      	movne	r0, r3
}
    2ca2:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    2ca4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2ca8:	e7fb      	b.n	2ca2 <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2caa:	4802      	ldr	r0, [pc, #8]	; (2cb4 <mutex_lock+0x30>)
    2cac:	e7f9      	b.n	2ca2 <mutex_lock+0x1e>
    2cae:	bf00      	nop
    2cb0:	ffff8fe9 	.word	0xffff8fe9
    2cb4:	ffff8fea 	.word	0xffff8fea

00002cb8 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    2cb8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2cba:	4906      	ldr	r1, [pc, #24]	; (2cd4 <nrf_cc310_platform_mutex_init+0x1c>)
    2cbc:	4806      	ldr	r0, [pc, #24]	; (2cd8 <nrf_cc310_platform_mutex_init+0x20>)
    2cbe:	2340      	movs	r3, #64	; 0x40
    2cc0:	2214      	movs	r2, #20
    2cc2:	f012 fac2 	bl	1524a <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    2cca:	4904      	ldr	r1, [pc, #16]	; (2cdc <nrf_cc310_platform_mutex_init+0x24>)
    2ccc:	4804      	ldr	r0, [pc, #16]	; (2ce0 <nrf_cc310_platform_mutex_init+0x28>)
    2cce:	f00e bfef 	b.w	11cb0 <nrf_cc310_platform_set_mutexes>
    2cd2:	bf00      	nop
    2cd4:	2000bd18 	.word	0x2000bd18
    2cd8:	2000bcfc 	.word	0x2000bcfc
    2cdc:	000289a4 	.word	0x000289a4
    2ce0:	00028994 	.word	0x00028994

00002ce4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2ce4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2ce6:	4c11      	ldr	r4, [pc, #68]	; (2d2c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2ce8:	4a11      	ldr	r2, [pc, #68]	; (2d30 <_DoInit+0x4c>)
    2cea:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2cec:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2cee:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2cf2:	4b10      	ldr	r3, [pc, #64]	; (2d34 <_DoInit+0x50>)
    2cf4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    2cf6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    2cfc:	4a0e      	ldr	r2, [pc, #56]	; (2d38 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2cfe:	490f      	ldr	r1, [pc, #60]	; (2d3c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2d00:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    2d02:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    2d04:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2d06:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    2d08:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    2d0a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2d0c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    2d10:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2d12:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2d14:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2d16:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    2d18:	f01b fd46 	bl	1e7a8 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    2d1c:	4908      	ldr	r1, [pc, #32]	; (2d40 <_DoInit+0x5c>)
    2d1e:	4620      	mov	r0, r4
    2d20:	f01b fd42 	bl	1e7a8 <strcpy>
  p->acID[6] = ' ';
    2d24:	2320      	movs	r3, #32
    2d26:	71a3      	strb	r3, [r4, #6]
}
    2d28:	bd10      	pop	{r4, pc}
    2d2a:	bf00      	nop
    2d2c:	2000c218 	.word	0x2000c218
    2d30:	00029514 	.word	0x00029514
    2d34:	20010ce5 	.word	0x20010ce5
    2d38:	20010cd5 	.word	0x20010cd5
    2d3c:	0002951d 	.word	0x0002951d
    2d40:	00029521 	.word	0x00029521

00002d44 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    2d48:	4f23      	ldr	r7, [pc, #140]	; (2dd8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    2d4a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d4e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    2d50:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d54:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    2d56:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    2d58:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    2d5a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d5c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    2d5e:	d834      	bhi.n	2dca <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    2d60:	f8d2 a020 	ldr.w	sl, [r2, #32]
    2d64:	ebaa 0905 	sub.w	r9, sl, r5
    2d68:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    2d6c:	4294      	cmp	r4, r2
    2d6e:	d811      	bhi.n	2d94 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    2d70:	f04f 0918 	mov.w	r9, #24
    2d74:	fb06 9309 	mla	r3, r6, r9, r9
    2d78:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2d7a:	4622      	mov	r2, r4
    2d7c:	6858      	ldr	r0, [r3, #4]
    2d7e:	4641      	mov	r1, r8
    2d80:	4428      	add	r0, r5
    2d82:	f01b fc3b 	bl	1e5fc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    2d86:	fb09 7606 	mla	r6, r9, r6, r7
    2d8a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    2d8c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    2d8e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    2d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    2d94:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    2d96:	429c      	cmp	r4, r3
    2d98:	d81b      	bhi.n	2dd2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    2d9a:	fb00 bb0b 	mla	fp, r0, fp, fp
    2d9e:	44bb      	add	fp, r7
    2da0:	464a      	mov	r2, r9
    2da2:	f8db 0004 	ldr.w	r0, [fp, #4]
    2da6:	442c      	add	r4, r5
    2da8:	4428      	add	r0, r5
    2daa:	f01b fc27 	bl	1e5fc <memcpy>
      if (NumBytes) {
    2dae:	ebb4 040a 	subs.w	r4, r4, sl
    2db2:	d006      	beq.n	2dc2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    2db4:	f8db 0004 	ldr.w	r0, [fp, #4]
    2db8:	4622      	mov	r2, r4
    2dba:	eb08 0109 	add.w	r1, r8, r9
    2dbe:	f01b fc1d 	bl	1e5fc <memcpy>
      pRing->WrOff = NumBytes;
    2dc2:	2018      	movs	r0, #24
    2dc4:	fb00 7606 	mla	r6, r0, r6, r7
    2dc8:	e7e0      	b.n	2d8c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    2dca:	3b01      	subs	r3, #1
    2dcc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    2dce:	42a3      	cmp	r3, r4
    2dd0:	d2ce      	bcs.n	2d70 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    2dd2:	2000      	movs	r0, #0
    2dd4:	e7dc      	b.n	2d90 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    2dd6:	bf00      	nop
    2dd8:	2000c218 	.word	0x2000c218

00002ddc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    2dde:	4c18      	ldr	r4, [pc, #96]	; (2e40 <SEGGER_RTT_WriteNoLock+0x64>)
    2de0:	2318      	movs	r3, #24
    2de2:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    2de6:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    2dea:	4425      	add	r5, r4
  switch (pRing->Flags) {
    2dec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2dee:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2df0:	460f      	mov	r7, r1
    2df2:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    2df4:	d00f      	beq.n	2e16 <SEGGER_RTT_WriteNoLock+0x3a>
    2df6:	2c02      	cmp	r4, #2
    2df8:	d01a      	beq.n	2e30 <SEGGER_RTT_WriteNoLock+0x54>
    2dfa:	b9f4      	cbnz	r4, 2e3a <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    2dfc:	4628      	mov	r0, r5
    2dfe:	f011 ffec 	bl	14dda <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    2e02:	4286      	cmp	r6, r0
    2e04:	d805      	bhi.n	2e12 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    2e06:	4632      	mov	r2, r6
    2e08:	4639      	mov	r1, r7
    2e0a:	4628      	mov	r0, r5
    2e0c:	f011 fff3 	bl	14df6 <_WriteNoCheck>
    2e10:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    2e12:	4620      	mov	r0, r4
    2e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    2e16:	4628      	mov	r0, r5
    2e18:	f011 ffdf 	bl	14dda <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    2e1c:	4286      	cmp	r6, r0
    2e1e:	4634      	mov	r4, r6
    2e20:	bf28      	it	cs
    2e22:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    2e24:	4622      	mov	r2, r4
    2e26:	4639      	mov	r1, r7
    2e28:	4628      	mov	r0, r5
    2e2a:	f011 ffe4 	bl	14df6 <_WriteNoCheck>
    break;
    2e2e:	e7f0      	b.n	2e12 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2e30:	4628      	mov	r0, r5
}
    2e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2e36:	f011 bffa 	b.w	14e2e <_WriteBlocking>
  switch (pRing->Flags) {
    2e3a:	2400      	movs	r4, #0
  return Status;
    2e3c:	e7e9      	b.n	2e12 <SEGGER_RTT_WriteNoLock+0x36>
    2e3e:	bf00      	nop
    2e40:	2000c218 	.word	0x2000c218

00002e44 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    2e44:	4b03      	ldr	r3, [pc, #12]	; (2e54 <SEGGER_RTT_HasDataUp+0x10>)
    2e46:	2218      	movs	r2, #24
    2e48:	fb02 3000 	mla	r0, r2, r0, r3
    2e4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
    2e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2e50:	1ac0      	subs	r0, r0, r3
    2e52:	4770      	bx	lr
    2e54:	2000c218 	.word	0x2000c218

00002e58 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2e58:	4a09      	ldr	r2, [pc, #36]	; (2e80 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2e5a:	490a      	ldr	r1, [pc, #40]	; (2e84 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2e5c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2e5e:	6809      	ldr	r1, [r1, #0]
    2e60:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e62:	4909      	ldr	r1, [pc, #36]	; (2e88 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2e64:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e66:	684b      	ldr	r3, [r1, #4]
    2e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2e6c:	604b      	str	r3, [r1, #4]
    2e6e:	2300      	movs	r3, #0
    2e70:	f383 8811 	msr	BASEPRI, r3
    2e74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2e78:	6893      	ldr	r3, [r2, #8]
}
    2e7a:	6f18      	ldr	r0, [r3, #112]	; 0x70
    2e7c:	4770      	bx	lr
    2e7e:	bf00      	nop
    2e80:	2000c3fc 	.word	0x2000c3fc
    2e84:	00028a90 	.word	0x00028a90
    2e88:	e000ed00 	.word	0xe000ed00

00002e8c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2e8c:	490f      	ldr	r1, [pc, #60]	; (2ecc <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2e8e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2e90:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2e94:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2e96:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2e9a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2e9e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ea0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ea4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ea8:	4f09      	ldr	r7, [pc, #36]	; (2ed0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2eaa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2eae:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2eb0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2eb2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2eb4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    2eb6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2eb8:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2eba:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ebe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2ec2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2ec6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2eca:	4770      	bx	lr
    ldr r1, =_kernel
    2ecc:	2000c3fc 	.word	0x2000c3fc
    ldr v4, =_SCS_ICSR
    2ed0:	e000ed04 	.word	0xe000ed04

00002ed4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2ed4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2ed8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2eda:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2ede:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2ee2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2ee4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2ee8:	2902      	cmp	r1, #2
    beq _oops
    2eea:	d0ff      	beq.n	2eec <_oops>

00002eec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2eec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2eee:	f011 ffd2 	bl	14e96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2ef2:	bd01      	pop	{r0, pc}

00002ef4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2ef4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	db08      	blt.n	2f0c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2efa:	2201      	movs	r2, #1
    2efc:	f000 001f 	and.w	r0, r0, #31
    2f00:	fa02 f000 	lsl.w	r0, r2, r0
    2f04:	095b      	lsrs	r3, r3, #5
    2f06:	4a02      	ldr	r2, [pc, #8]	; (2f10 <arch_irq_enable+0x1c>)
    2f08:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	e000e100 	.word	0xe000e100

00002f14 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f14:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f16:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f18:	bfa8      	it	ge
    2f1a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    2f1e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f22:	bfb8      	it	lt
    2f24:	4b06      	ldrlt	r3, [pc, #24]	; (2f40 <z_arm_irq_priority_set+0x2c>)
    2f26:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f2a:	bfac      	ite	ge
    2f2c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f30:	f000 000f 	andlt.w	r0, r0, #15
    2f34:	b2c9      	uxtb	r1, r1
    2f36:	bfb4      	ite	lt
    2f38:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f3a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2f3e:	4770      	bx	lr
    2f40:	e000ed14 	.word	0xe000ed14

00002f44 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    2f44:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    2f48:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    2f4a:	3a20      	subs	r2, #32
    2f4c:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    2f50:	4908      	ldr	r1, [pc, #32]	; (2f74 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    2f52:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2f54:	9b00      	ldr	r3, [sp, #0]
    2f56:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2f58:	9b01      	ldr	r3, [sp, #4]
    2f5a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    2f5c:	9b02      	ldr	r3, [sp, #8]
    2f5e:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    2f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f64:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    2f66:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    2f6a:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    2f6c:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    2f6e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2f70:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f72:	4770      	bx	lr
    2f74:	000144bd 	.word	0x000144bd

00002f78 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    2f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7a:	461d      	mov	r5, r3
    2f7c:	4606      	mov	r6, r0
    2f7e:	460c      	mov	r4, r1
    2f80:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    2f82:	2300      	movs	r3, #0
    2f84:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2f88:	f000 fb28 	bl	35dc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    2f8c:	4b08      	ldr	r3, [pc, #32]	; (2fb0 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    2f8e:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    2f90:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
    2f94:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2f96:	4628      	mov	r0, r5
    2f98:	f384 8809 	msr	PSP, r4
    2f9c:	2100      	movs	r1, #0
    2f9e:	b663      	cpsie	if
    2fa0:	f381 8811 	msr	BASEPRI, r1
    2fa4:	f3bf 8f6f 	isb	sy
    2fa8:	2200      	movs	r2, #0
    2faa:	2300      	movs	r3, #0
    2fac:	f011 fa86 	bl	144bc <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2fb0:	2000c3fc 	.word	0x2000c3fc

00002fb4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2fb4:	4901      	ldr	r1, [pc, #4]	; (2fbc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2fb6:	2210      	movs	r2, #16
	str	r2, [r1]
    2fb8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2fba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2fbc:	e000ed10 	.word	0xe000ed10

00002fc0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2fc0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2fc2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2fc4:	f380 8811 	msr	BASEPRI, r0
	isb
    2fc8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2fcc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2fd0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2fd2:	b662      	cpsie	i
	isb
    2fd4:	f3bf 8f6f 	isb	sy

	bx	lr
    2fd8:	4770      	bx	lr
    2fda:	bf00      	nop

00002fdc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2fde:	4606      	mov	r6, r0

	if (esf != NULL) {
    2fe0:	460c      	mov	r4, r1
    2fe2:	b301      	cbz	r1, 3026 <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2fe4:	4b13      	ldr	r3, [pc, #76]	; (3034 <z_arm_fatal_error+0x58>)
    2fe6:	4d14      	ldr	r5, [pc, #80]	; (3038 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2fe8:	4814      	ldr	r0, [pc, #80]	; (303c <z_arm_fatal_error+0x60>)
    2fea:	1aed      	subs	r5, r5, r3
    2fec:	08ed      	lsrs	r5, r5, #3
    2fee:	01ad      	lsls	r5, r5, #6
    2ff0:	f045 0501 	orr.w	r5, r5, #1
    2ff4:	f8ad 5000 	strh.w	r5, [sp]
    2ff8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2ffc:	6809      	ldr	r1, [r1, #0]
    2ffe:	f011 fb74 	bl	146ea <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3002:	f8ad 5000 	strh.w	r5, [sp]
    3006:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    300a:	68e1      	ldr	r1, [r4, #12]
    300c:	480c      	ldr	r0, [pc, #48]	; (3040 <z_arm_fatal_error+0x64>)
    300e:	f011 fb6c 	bl	146ea <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3012:	69e1      	ldr	r1, [r4, #28]
    3014:	480b      	ldr	r0, [pc, #44]	; (3044 <z_arm_fatal_error+0x68>)
    3016:	462a      	mov	r2, r5
    3018:	f011 fb37 	bl	1468a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    301c:	69a1      	ldr	r1, [r4, #24]
    301e:	480a      	ldr	r0, [pc, #40]	; (3048 <z_arm_fatal_error+0x6c>)
    3020:	462a      	mov	r2, r5
    3022:	f011 fb32 	bl	1468a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3026:	4621      	mov	r1, r4
    3028:	4630      	mov	r0, r6
}
    302a:	b002      	add	sp, #8
    302c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3030:	f001 bbb4 	b.w	479c <z_fatal_error>
    3034:	0001eba4 	.word	0x0001eba4
    3038:	0001ebc4 	.word	0x0001ebc4
    303c:	00029528 	.word	0x00029528
    3040:	00029557 	.word	0x00029557
    3044:	00029586 	.word	0x00029586
    3048:	00029595 	.word	0x00029595

0000304c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    304c:	bf30      	wfi
    b z_SysNmiOnReset
    304e:	f7ff bffd 	b.w	304c <z_SysNmiOnReset>
    3052:	bf00      	nop

00003054 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3054:	4a17      	ldr	r2, [pc, #92]	; (30b4 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3056:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3058:	4b17      	ldr	r3, [pc, #92]	; (30b8 <z_arm_prep_c+0x64>)
    305a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    305e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3064:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3068:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    306c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    3074:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    307c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    3080:	4a0e      	ldr	r2, [pc, #56]	; (30bc <z_arm_prep_c+0x68>)
    3082:	6853      	ldr	r3, [r2, #4]
    3084:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3088:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    308a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    308e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    3092:	2300      	movs	r3, #0
    3094:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3098:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    309c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    30a0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    30a4:	f001 fbf6 	bl	4894 <z_bss_zero>
	z_data_copy();
    30a8:	f001 fbfe 	bl	48a8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    30ac:	f000 fa64 	bl	3578 <z_arm_interrupt_init>
	z_cstart();
    30b0:	f001 fc3c 	bl	492c <z_cstart>
    30b4:	00000000 	.word	0x00000000
    30b8:	e000ed00 	.word	0xe000ed00
    30bc:	e000ef30 	.word	0xe000ef30

000030c0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    30c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    30c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    30c4:	4a0b      	ldr	r2, [pc, #44]	; (30f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    30c6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    30c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    30ca:	bf1e      	ittt	ne
	movne	r1, #0
    30cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    30ce:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    30d0:	f012 f8b9 	blne	15246 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    30d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    30d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    30da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    30de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    30e2:	4905      	ldr	r1, [pc, #20]	; (30f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    30e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    30e6:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    30e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    30ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    30ee:	4903      	ldr	r1, [pc, #12]	; (30fc <_isr_wrapper+0x3c>)
	bx r1
    30f0:	4708      	bx	r1
    30f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    30f4:	2000c3fc 	.word	0x2000c3fc
	ldr r1, =_sw_isr_table
    30f8:	0001ea1c 	.word	0x0001ea1c
	ldr r1, =z_arm_int_exit
    30fc:	0000355d 	.word	0x0000355d

00003100 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3100:	f011 fef8 	bl	14ef4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3104:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3106:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    310a:	4808      	ldr	r0, [pc, #32]	; (312c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    310c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3110:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3112:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3116:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    311a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    311c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    311e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3122:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3126:	f7ff ff95 	bl	3054 <z_arm_prep_c>
    312a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    312c:	20013540 	.word	0x20013540

00003130 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3130:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3134:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    3138:	4672      	mov	r2, lr

	push {r0, lr}
    313a:	b501      	push	{r0, lr}

	bl z_arm_fault
    313c:	f000 f932 	bl	33a4 <z_arm_fault>

	pop {r0, pc}
    3140:	bd01      	pop	{r0, pc}
    3142:	bf00      	nop

00003144 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4b23      	ldr	r3, [pc, #140]	; (31d4 <usage_fault.isra.0+0x90>)
    3148:	4c23      	ldr	r4, [pc, #140]	; (31d8 <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    314a:	4d24      	ldr	r5, [pc, #144]	; (31dc <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    314c:	4824      	ldr	r0, [pc, #144]	; (31e0 <usage_fault.isra.0+0x9c>)
    314e:	1ae4      	subs	r4, r4, r3
    3150:	08e4      	lsrs	r4, r4, #3
    3152:	01a4      	lsls	r4, r4, #6
    3154:	f044 0601 	orr.w	r6, r4, #1
    3158:	4631      	mov	r1, r6
    315a:	f011 fa87 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    315e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3160:	0193      	lsls	r3, r2, #6
    3162:	d503      	bpl.n	316c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3164:	481f      	ldr	r0, [pc, #124]	; (31e4 <usage_fault.isra.0+0xa0>)
    3166:	4631      	mov	r1, r6
    3168:	f011 fa80 	bl	1466c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    316c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    316e:	01dd      	lsls	r5, r3, #7
    3170:	d504      	bpl.n	317c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3172:	481d      	ldr	r0, [pc, #116]	; (31e8 <usage_fault.isra.0+0xa4>)
    3174:	f044 0101 	orr.w	r1, r4, #1
    3178:	f011 fa78 	bl	1466c <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    317c:	4d17      	ldr	r5, [pc, #92]	; (31dc <usage_fault.isra.0+0x98>)
    317e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3180:	0310      	lsls	r0, r2, #12
    3182:	d504      	bpl.n	318e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3184:	4819      	ldr	r0, [pc, #100]	; (31ec <usage_fault.isra.0+0xa8>)
    3186:	f044 0101 	orr.w	r1, r4, #1
    318a:	f011 fa6f 	bl	1466c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    318e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3190:	0359      	lsls	r1, r3, #13
    3192:	d504      	bpl.n	319e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3194:	4816      	ldr	r0, [pc, #88]	; (31f0 <usage_fault.isra.0+0xac>)
    3196:	f044 0101 	orr.w	r1, r4, #1
    319a:	f011 fa67 	bl	1466c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    319e:	4d0f      	ldr	r5, [pc, #60]	; (31dc <usage_fault.isra.0+0x98>)
    31a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    31a2:	0392      	lsls	r2, r2, #14
    31a4:	d504      	bpl.n	31b0 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    31a6:	4813      	ldr	r0, [pc, #76]	; (31f4 <usage_fault.isra.0+0xb0>)
    31a8:	f044 0101 	orr.w	r1, r4, #1
    31ac:	f011 fa5e 	bl	1466c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    31b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31b2:	03db      	lsls	r3, r3, #15
    31b4:	d504      	bpl.n	31c0 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    31b6:	4810      	ldr	r0, [pc, #64]	; (31f8 <usage_fault.isra.0+0xb4>)
    31b8:	f044 0101 	orr.w	r1, r4, #1
    31bc:	f011 fa56 	bl	1466c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    31c0:	4a06      	ldr	r2, [pc, #24]	; (31dc <usage_fault.isra.0+0x98>)
    31c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    31c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    31cc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    31ce:	2000      	movs	r0, #0
    31d0:	bd70      	pop	{r4, r5, r6, pc}
    31d2:	bf00      	nop
    31d4:	0001eba4 	.word	0x0001eba4
    31d8:	0001ebc4 	.word	0x0001ebc4
    31dc:	e000ed00 	.word	0xe000ed00
    31e0:	000295c3 	.word	0x000295c3
    31e4:	000295db 	.word	0x000295db
    31e8:	000295ee 	.word	0x000295ee
    31ec:	00029608 	.word	0x00029608
    31f0:	00029626 	.word	0x00029626
    31f4:	0002964b 	.word	0x0002964b
    31f8:	00029665 	.word	0x00029665

000031fc <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    31fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3200:	4b27      	ldr	r3, [pc, #156]	; (32a0 <mem_manage_fault.isra.0+0xa4>)
    3202:	4c28      	ldr	r4, [pc, #160]	; (32a4 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3204:	4d28      	ldr	r5, [pc, #160]	; (32a8 <mem_manage_fault.isra.0+0xac>)
    3206:	1ae4      	subs	r4, r4, r3
    3208:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    320a:	01a4      	lsls	r4, r4, #6
    320c:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3210:	4607      	mov	r7, r0
    3212:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3214:	4825      	ldr	r0, [pc, #148]	; (32ac <mem_manage_fault.isra.0+0xb0>)
    3216:	4641      	mov	r1, r8
    3218:	f011 fa28 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    321c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    321e:	06d1      	lsls	r1, r2, #27
    3220:	d503      	bpl.n	322a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3222:	4823      	ldr	r0, [pc, #140]	; (32b0 <mem_manage_fault.isra.0+0xb4>)
    3224:	4641      	mov	r1, r8
    3226:	f011 fa21 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    322a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    322c:	071a      	lsls	r2, r3, #28
    322e:	d504      	bpl.n	323a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3230:	4820      	ldr	r0, [pc, #128]	; (32b4 <mem_manage_fault.isra.0+0xb8>)
    3232:	f044 0101 	orr.w	r1, r4, #1
    3236:	f011 fa19 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    323a:	4d1b      	ldr	r5, [pc, #108]	; (32a8 <mem_manage_fault.isra.0+0xac>)
    323c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    323e:	079b      	lsls	r3, r3, #30
    3240:	d512      	bpl.n	3268 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    3242:	f044 0801 	orr.w	r8, r4, #1
    3246:	481c      	ldr	r0, [pc, #112]	; (32b8 <mem_manage_fault.isra.0+0xbc>)
    3248:	4641      	mov	r1, r8
    324a:	f011 fa0f 	bl	1466c <log_0>
		mmfar = SCB->MMFAR;
    324e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3250:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3252:	0618      	lsls	r0, r3, #24
    3254:	d508      	bpl.n	3268 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3256:	4819      	ldr	r0, [pc, #100]	; (32bc <mem_manage_fault.isra.0+0xc0>)
    3258:	4642      	mov	r2, r8
    325a:	f011 fa16 	bl	1468a <log_1>
			if (from_hard_fault) {
    325e:	b11f      	cbz	r7, 3268 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3260:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3266:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3268:	4d0f      	ldr	r5, [pc, #60]	; (32a8 <mem_manage_fault.isra.0+0xac>)
    326a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    326c:	07d2      	lsls	r2, r2, #31
    326e:	d504      	bpl.n	327a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3270:	4813      	ldr	r0, [pc, #76]	; (32c0 <mem_manage_fault.isra.0+0xc4>)
    3272:	f044 0101 	orr.w	r1, r4, #1
    3276:	f011 f9f9 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    327a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    327c:	069b      	lsls	r3, r3, #26
    327e:	d504      	bpl.n	328a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    3280:	4810      	ldr	r0, [pc, #64]	; (32c4 <mem_manage_fault.isra.0+0xc8>)
    3282:	f044 0101 	orr.w	r1, r4, #1
    3286:	f011 f9f1 	bl	1466c <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    328a:	4b07      	ldr	r3, [pc, #28]	; (32a8 <mem_manage_fault.isra.0+0xac>)
    328c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    328e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3290:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3292:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3296:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3298:	7030      	strb	r0, [r6, #0]
}
    329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    329e:	bf00      	nop
    32a0:	0001eba4 	.word	0x0001eba4
    32a4:	0001ebc4 	.word	0x0001ebc4
    32a8:	e000ed00 	.word	0xe000ed00
    32ac:	00029690 	.word	0x00029690
    32b0:	000296a6 	.word	0x000296a6
    32b4:	000296d9 	.word	0x000296d9
    32b8:	000296ec 	.word	0x000296ec
    32bc:	00029704 	.word	0x00029704
    32c0:	0002971a 	.word	0x0002971a
    32c4:	00029739 	.word	0x00029739

000032c8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    32c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32cc:	4b2a      	ldr	r3, [pc, #168]	; (3378 <bus_fault.isra.0+0xb0>)
    32ce:	4c2b      	ldr	r4, [pc, #172]	; (337c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    32d0:	4d2b      	ldr	r5, [pc, #172]	; (3380 <bus_fault.isra.0+0xb8>)
    32d2:	1ae4      	subs	r4, r4, r3
    32d4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    32d6:	01a4      	lsls	r4, r4, #6
    32d8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    32dc:	4607      	mov	r7, r0
    32de:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    32e0:	4828      	ldr	r0, [pc, #160]	; (3384 <bus_fault.isra.0+0xbc>)
    32e2:	4641      	mov	r1, r8
    32e4:	f011 f9c2 	bl	1466c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    32e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    32ea:	04d1      	lsls	r1, r2, #19
    32ec:	d503      	bpl.n	32f6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    32ee:	4826      	ldr	r0, [pc, #152]	; (3388 <bus_fault.isra.0+0xc0>)
    32f0:	4641      	mov	r1, r8
    32f2:	f011 f9bb 	bl	1466c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    32f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32f8:	051a      	lsls	r2, r3, #20
    32fa:	d504      	bpl.n	3306 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    32fc:	4823      	ldr	r0, [pc, #140]	; (338c <bus_fault.isra.0+0xc4>)
    32fe:	f044 0101 	orr.w	r1, r4, #1
    3302:	f011 f9b3 	bl	1466c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3306:	4d1e      	ldr	r5, [pc, #120]	; (3380 <bus_fault.isra.0+0xb8>)
    3308:	6aab      	ldr	r3, [r5, #40]	; 0x28
    330a:	059b      	lsls	r3, r3, #22
    330c:	d512      	bpl.n	3334 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    330e:	f044 0801 	orr.w	r8, r4, #1
    3312:	481f      	ldr	r0, [pc, #124]	; (3390 <bus_fault.isra.0+0xc8>)
    3314:	4641      	mov	r1, r8
    3316:	f011 f9a9 	bl	1466c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    331a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    331c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    331e:	0418      	lsls	r0, r3, #16
    3320:	d508      	bpl.n	3334 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3322:	481c      	ldr	r0, [pc, #112]	; (3394 <bus_fault.isra.0+0xcc>)
    3324:	4642      	mov	r2, r8
    3326:	f011 f9b0 	bl	1468a <log_1>
			if (from_hard_fault) {
    332a:	b11f      	cbz	r7, 3334 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    332c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    332e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3332:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3334:	4d12      	ldr	r5, [pc, #72]	; (3380 <bus_fault.isra.0+0xb8>)
    3336:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3338:	0559      	lsls	r1, r3, #21
    333a:	d504      	bpl.n	3346 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    333c:	4816      	ldr	r0, [pc, #88]	; (3398 <bus_fault.isra.0+0xd0>)
    333e:	f044 0101 	orr.w	r1, r4, #1
    3342:	f011 f993 	bl	1466c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3346:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3348:	05da      	lsls	r2, r3, #23
    334a:	d50d      	bpl.n	3368 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    334c:	4813      	ldr	r0, [pc, #76]	; (339c <bus_fault.isra.0+0xd4>)
    334e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3352:	f011 f98b 	bl	1466c <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3356:	4a0a      	ldr	r2, [pc, #40]	; (3380 <bus_fault.isra.0+0xb8>)
    3358:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    335a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    335c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3360:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3362:	7030      	strb	r0, [r6, #0]
}
    3364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3368:	6aab      	ldr	r3, [r5, #40]	; 0x28
    336a:	049b      	lsls	r3, r3, #18
    336c:	d5f3      	bpl.n	3356 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    336e:	480c      	ldr	r0, [pc, #48]	; (33a0 <bus_fault.isra.0+0xd8>)
    3370:	f044 0101 	orr.w	r1, r4, #1
    3374:	e7ed      	b.n	3352 <bus_fault.isra.0+0x8a>
    3376:	bf00      	nop
    3378:	0001eba4 	.word	0x0001eba4
    337c:	0001ebc4 	.word	0x0001ebc4
    3380:	e000ed00 	.word	0xe000ed00
    3384:	00029768 	.word	0x00029768
    3388:	0002977e 	.word	0x0002977e
    338c:	000296d9 	.word	0x000296d9
    3390:	0002978f 	.word	0x0002978f
    3394:	000297a8 	.word	0x000297a8
    3398:	000297bd 	.word	0x000297bd
    339c:	000297d8 	.word	0x000297d8
    33a0:	00029739 	.word	0x00029739

000033a4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    33a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33a8:	4b5a      	ldr	r3, [pc, #360]	; (3514 <z_arm_fault+0x170>)
    33aa:	685f      	ldr	r7, [r3, #4]
{
    33ac:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33ae:	f3c7 0408 	ubfx	r4, r7, #0, #9
    33b2:	2600      	movs	r6, #0
    33b4:	f386 8811 	msr	BASEPRI, r6
    33b8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    33bc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    33c0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    33c4:	d10d      	bne.n	33e2 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    33c6:	f002 030c 	and.w	r3, r2, #12
    33ca:	2b08      	cmp	r3, #8
    33cc:	d10b      	bne.n	33e6 <z_arm_fault+0x42>
    33ce:	4952      	ldr	r1, [pc, #328]	; (3518 <z_arm_fault+0x174>)
    33d0:	4b52      	ldr	r3, [pc, #328]	; (351c <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    33d2:	4853      	ldr	r0, [pc, #332]	; (3520 <z_arm_fault+0x17c>)
    33d4:	1ac9      	subs	r1, r1, r3
    33d6:	08c9      	lsrs	r1, r1, #3
    33d8:	0189      	lsls	r1, r1, #6
    33da:	f041 0101 	orr.w	r1, r1, #1
    33de:	f011 f945 	bl	1466c <log_0>
		return NULL;
    33e2:	4635      	mov	r5, r6
    33e4:	e004      	b.n	33f0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    33e6:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    33e8:	bf4e      	itee	mi
    33ea:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    33ec:	4605      	movpl	r5, r0
			*nested_exc = true;
    33ee:	2601      	movpl	r6, #1
	*recoverable = false;
    33f0:	2300      	movs	r3, #0
    33f2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    33f6:	1ee3      	subs	r3, r4, #3
    33f8:	2b09      	cmp	r3, #9
    33fa:	d871      	bhi.n	34e0 <z_arm_fault+0x13c>
    33fc:	e8df f003 	tbb	[pc, r3]
    3400:	3c635f05 	.word	0x3c635f05
    3404:	70707070 	.word	0x70707070
    3408:	6770      	.short	0x6770
    340a:	4b44      	ldr	r3, [pc, #272]	; (351c <z_arm_fault+0x178>)
    340c:	4f42      	ldr	r7, [pc, #264]	; (3518 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    340e:	4845      	ldr	r0, [pc, #276]	; (3524 <z_arm_fault+0x180>)
    3410:	1aff      	subs	r7, r7, r3
    3412:	08ff      	lsrs	r7, r7, #3
    3414:	01bf      	lsls	r7, r7, #6
    3416:	f047 0701 	orr.w	r7, r7, #1
    341a:	4639      	mov	r1, r7
    341c:	f011 f926 	bl	1466c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3420:	4b3c      	ldr	r3, [pc, #240]	; (3514 <z_arm_fault+0x170>)
    3422:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3424:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3428:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    342c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3430:	d005      	beq.n	343e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3432:	483d      	ldr	r0, [pc, #244]	; (3528 <z_arm_fault+0x184>)
    3434:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    3436:	f011 f919 	bl	1466c <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    343a:	2400      	movs	r4, #0
}
    343c:	e01f      	b.n	347e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3440:	005b      	lsls	r3, r3, #1
    3442:	d51c      	bpl.n	347e <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    3444:	4839      	ldr	r0, [pc, #228]	; (352c <z_arm_fault+0x188>)
    3446:	4639      	mov	r1, r7
    3448:	f011 f910 	bl	1466c <log_0>
		if (SCB_MMFSR != 0) {
    344c:	4b38      	ldr	r3, [pc, #224]	; (3530 <z_arm_fault+0x18c>)
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	b12b      	cbz	r3, 345e <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    3452:	f10d 0107 	add.w	r1, sp, #7
    3456:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3458:	f7ff fed0 	bl	31fc <mem_manage_fault.isra.0>
    345c:	e00e      	b.n	347c <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    345e:	4b35      	ldr	r3, [pc, #212]	; (3534 <z_arm_fault+0x190>)
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	b12b      	cbz	r3, 3470 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    3464:	f10d 0107 	add.w	r1, sp, #7
    3468:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    346a:	f7ff ff2d 	bl	32c8 <bus_fault.isra.0>
    346e:	e005      	b.n	347c <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    3470:	4b31      	ldr	r3, [pc, #196]	; (3538 <z_arm_fault+0x194>)
    3472:	881b      	ldrh	r3, [r3, #0]
    3474:	b29b      	uxth	r3, r3
    3476:	b113      	cbz	r3, 347e <z_arm_fault+0xda>
			reason = usage_fault(esf);
    3478:	f7ff fe64 	bl	3144 <usage_fault.isra.0>
    347c:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    347e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3482:	b9cb      	cbnz	r3, 34b8 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3484:	462b      	mov	r3, r5
    3486:	f103 0720 	add.w	r7, r3, #32
    348a:	ad02      	add	r5, sp, #8
    348c:	6818      	ldr	r0, [r3, #0]
    348e:	6859      	ldr	r1, [r3, #4]
    3490:	462a      	mov	r2, r5
    3492:	c203      	stmia	r2!, {r0, r1}
    3494:	3308      	adds	r3, #8
    3496:	42bb      	cmp	r3, r7
    3498:	4615      	mov	r5, r2
    349a:	d1f7      	bne.n	348c <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    349e:	b39e      	cbz	r6, 3508 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    34a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    34a4:	b922      	cbnz	r2, 34b0 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    34a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    34aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    34ae:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    34b0:	a902      	add	r1, sp, #8
    34b2:	4620      	mov	r0, r4
    34b4:	f7ff fd92 	bl	2fdc <z_arm_fatal_error>
}
    34b8:	b00a      	add	sp, #40	; 0x28
    34ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    34be:	f10d 0107 	add.w	r1, sp, #7
    34c2:	2000      	movs	r0, #0
    34c4:	e7c8      	b.n	3458 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    34c6:	f10d 0107 	add.w	r1, sp, #7
    34ca:	2000      	movs	r0, #0
    34cc:	e7cd      	b.n	346a <z_arm_fault+0xc6>
    34ce:	4912      	ldr	r1, [pc, #72]	; (3518 <z_arm_fault+0x174>)
    34d0:	4b12      	ldr	r3, [pc, #72]	; (351c <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    34d2:	481a      	ldr	r0, [pc, #104]	; (353c <z_arm_fault+0x198>)
    34d4:	1ac9      	subs	r1, r1, r3
    34d6:	08c9      	lsrs	r1, r1, #3
    34d8:	0189      	lsls	r1, r1, #6
    34da:	f041 0101 	orr.w	r1, r1, #1
    34de:	e7aa      	b.n	3436 <z_arm_fault+0x92>
    34e0:	4a0e      	ldr	r2, [pc, #56]	; (351c <z_arm_fault+0x178>)
    34e2:	4b0d      	ldr	r3, [pc, #52]	; (3518 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    34e4:	4816      	ldr	r0, [pc, #88]	; (3540 <z_arm_fault+0x19c>)
    34e6:	4917      	ldr	r1, [pc, #92]	; (3544 <z_arm_fault+0x1a0>)
    34e8:	1a9b      	subs	r3, r3, r2
    34ea:	08db      	lsrs	r3, r3, #3
    34ec:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    34f0:	ea4f 1383 	mov.w	r3, r3, lsl #6
    34f4:	bf18      	it	ne
    34f6:	4601      	movne	r1, r0
    34f8:	f043 0301 	orr.w	r3, r3, #1
    34fc:	4812      	ldr	r0, [pc, #72]	; (3548 <z_arm_fault+0x1a4>)
    34fe:	f1a4 0210 	sub.w	r2, r4, #16
    3502:	f011 f8d9 	bl	146b8 <log_2>
    3506:	e798      	b.n	343a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3508:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    350c:	f023 0301 	bic.w	r3, r3, #1
    3510:	e7cd      	b.n	34ae <z_arm_fault+0x10a>
    3512:	bf00      	nop
    3514:	e000ed00 	.word	0xe000ed00
    3518:	0001ebc4 	.word	0x0001ebc4
    351c:	0001eba4 	.word	0x0001eba4
    3520:	000297f0 	.word	0x000297f0
    3524:	0002981b 	.word	0x0002981b
    3528:	00029832 	.word	0x00029832
    352c:	00029853 	.word	0x00029853
    3530:	e000ed28 	.word	0xe000ed28
    3534:	e000ed29 	.word	0xe000ed29
    3538:	e000ed2a 	.word	0xe000ed2a
    353c:	00029872 	.word	0x00029872
    3540:	000298bd 	.word	0x000298bd
    3544:	000298a8 	.word	0x000298a8
    3548:	000298d6 	.word	0x000298d6

0000354c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    354c:	4a02      	ldr	r2, [pc, #8]	; (3558 <z_arm_fault_init+0xc>)
    354e:	6953      	ldr	r3, [r2, #20]
    3550:	f043 0310 	orr.w	r3, r3, #16
    3554:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3556:	4770      	bx	lr
    3558:	e000ed00 	.word	0xe000ed00

0000355c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    355c:	4b04      	ldr	r3, [pc, #16]	; (3570 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    355e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3560:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3562:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3564:	d003      	beq.n	356e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3566:	4903      	ldr	r1, [pc, #12]	; (3574 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    356c:	600a      	str	r2, [r1, #0]

0000356e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    356e:	4770      	bx	lr
	ldr r3, =_kernel
    3570:	2000c3fc 	.word	0x2000c3fc
	ldr r1, =_SCS_ICSR
    3574:	e000ed04 	.word	0xe000ed04

00003578 <z_arm_interrupt_init>:
    3578:	4804      	ldr	r0, [pc, #16]	; (358c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    357a:	2300      	movs	r3, #0
    357c:	2120      	movs	r1, #32
    357e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3580:	3301      	adds	r3, #1
    3582:	2b30      	cmp	r3, #48	; 0x30
    3584:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3588:	d1f9      	bne.n	357e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    358a:	4770      	bx	lr
    358c:	e000e100 	.word	0xe000e100

00003590 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    3590:	b538      	push	{r3, r4, r5, lr}
    3592:	4604      	mov	r4, r0
	__asm__ volatile(
    3594:	f04f 0320 	mov.w	r3, #32
    3598:	f3ef 8511 	mrs	r5, BASEPRI
    359c:	f383 8811 	msr	BASEPRI, r3
    35a0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    35a4:	f001 fd32 	bl	500c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    35a8:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <z_impl_k_thread_abort+0x44>)
    35aa:	689b      	ldr	r3, [r3, #8]
    35ac:	42a3      	cmp	r3, r4
    35ae:	d10b      	bne.n	35c8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    35b0:	4b09      	ldr	r3, [pc, #36]	; (35d8 <z_impl_k_thread_abort+0x48>)
    35b2:	685a      	ldr	r2, [r3, #4]
    35b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    35b8:	b912      	cbnz	r2, 35c0 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    35ba:	4628      	mov	r0, r5
    35bc:	f7ff fc4c 	bl	2e58 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    35c0:	685a      	ldr	r2, [r3, #4]
    35c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    35c6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    35c8:	4628      	mov	r0, r5
}
    35ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    35ce:	f011 be92 	b.w	152f6 <z_reschedule_irqlock>
    35d2:	bf00      	nop
    35d4:	2000c3fc 	.word	0x2000c3fc
    35d8:	e000ed00 	.word	0xe000ed00

000035dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    35dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    35de:	4b08      	ldr	r3, [pc, #32]	; (3600 <z_arm_configure_static_mpu_regions+0x24>)
    35e0:	9301      	str	r3, [sp, #4]
    35e2:	4b08      	ldr	r3, [pc, #32]	; (3604 <z_arm_configure_static_mpu_regions+0x28>)
    35e4:	9302      	str	r3, [sp, #8]
    35e6:	4b08      	ldr	r3, [pc, #32]	; (3608 <z_arm_configure_static_mpu_regions+0x2c>)
    35e8:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    35ea:	ab01      	add	r3, sp, #4
    35ec:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    35ee:	4a07      	ldr	r2, [pc, #28]	; (360c <z_arm_configure_static_mpu_regions+0x30>)
    35f0:	4b07      	ldr	r3, [pc, #28]	; (3610 <z_arm_configure_static_mpu_regions+0x34>)
    35f2:	2101      	movs	r1, #1
    35f4:	4668      	mov	r0, sp
    35f6:	f000 f8ad 	bl	3754 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    35fa:	b005      	add	sp, #20
    35fc:	f85d fb04 	ldr.w	pc, [sp], #4
    3600:	20000000 	.word	0x20000000
    3604:	00000000 	.word	0x00000000
    3608:	060b0000 	.word	0x060b0000
    360c:	20000000 	.word	0x20000000
    3610:	20040000 	.word	0x20040000

00003614 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    3614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    3616:	4f2a      	ldr	r7, [pc, #168]	; (36c0 <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3618:	2600      	movs	r6, #0
    361a:	428e      	cmp	r6, r1
    361c:	da1f      	bge.n	365e <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    361e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
    3622:	f8dc 4004 	ldr.w	r4, [ip, #4]
    3626:	2c00      	cmp	r4, #0
    3628:	d048      	beq.n	36bc <mpu_configure_regions+0xa8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    362a:	b1d3      	cbz	r3, 3662 <mpu_configure_regions+0x4e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    362c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3630:	ea14 0f0e 	tst.w	r4, lr
    3634:	d106      	bne.n	3644 <mpu_configure_regions+0x30>
		&&
    3636:	2c1f      	cmp	r4, #31
    3638:	d904      	bls.n	3644 <mpu_configure_regions+0x30>
		((part->start & (part->size - 1)) == 0U);
    363a:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    363e:	ea1e 0f05 	tst.w	lr, r5
    3642:	d00e      	beq.n	3662 <mpu_configure_regions+0x4e>
    3644:	4a1f      	ldr	r2, [pc, #124]	; (36c4 <mpu_configure_regions+0xb0>)
    3646:	4b20      	ldr	r3, [pc, #128]	; (36c8 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3648:	4820      	ldr	r0, [pc, #128]	; (36cc <mpu_configure_regions+0xb8>)
    364a:	1ad2      	subs	r2, r2, r3
    364c:	08d2      	lsrs	r2, r2, #3
    364e:	0192      	lsls	r2, r2, #6
    3650:	f042 0201 	orr.w	r2, r2, #1
    3654:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3656:	f011 f818 	bl	1468a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    365a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    365e:	4610      	mov	r0, r2
    3660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3662:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    3664:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    3666:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    366a:	f8dc c008 	ldr.w	ip, [ip, #8]
    366e:	d916      	bls.n	369e <mpu_configure_regions+0x8a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3670:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3674:	d815      	bhi.n	36a2 <mpu_configure_regions+0x8e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3676:	3c01      	subs	r4, #1
    3678:	fab4 f484 	clz	r4, r4
    367c:	f1c4 041f 	rsb	r4, r4, #31
    3680:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    3682:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3684:	ea4c 0404 	orr.w	r4, ip, r4
    3688:	d90d      	bls.n	36a6 <mpu_configure_regions+0x92>
    368a:	4a0e      	ldr	r2, [pc, #56]	; (36c4 <mpu_configure_regions+0xb0>)
    368c:	4b0e      	ldr	r3, [pc, #56]	; (36c8 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    368e:	4810      	ldr	r0, [pc, #64]	; (36d0 <mpu_configure_regions+0xbc>)
    3690:	1ad2      	subs	r2, r2, r3
    3692:	08d2      	lsrs	r2, r2, #3
    3694:	0192      	lsls	r2, r2, #6
    3696:	f042 0201 	orr.w	r2, r2, #1
    369a:	4629      	mov	r1, r5
    369c:	e7db      	b.n	3656 <mpu_configure_regions+0x42>
		return REGION_32B;
    369e:	2408      	movs	r4, #8
    36a0:	e7ef      	b.n	3682 <mpu_configure_regions+0x6e>
		return REGION_4G;
    36a2:	243e      	movs	r4, #62	; 0x3e
    36a4:	e7ed      	b.n	3682 <mpu_configure_regions+0x6e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36a6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    36aa:	432a      	orrs	r2, r5
    36ac:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36b0:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    36b4:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36b6:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36b8:	613c      	str	r4, [r7, #16]
		reg_index++;
    36ba:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    36bc:	3601      	adds	r6, #1
    36be:	e7ac      	b.n	361a <mpu_configure_regions+0x6>
    36c0:	e000ed90 	.word	0xe000ed90
    36c4:	0001ebbc 	.word	0x0001ebbc
    36c8:	0001eba4 	.word	0x0001eba4
    36cc:	000298ed 	.word	0x000298ed
    36d0:	00029910 	.word	0x00029910

000036d4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    36d4:	4b03      	ldr	r3, [pc, #12]	; (36e4 <arm_core_mpu_enable+0x10>)
    36d6:	2205      	movs	r2, #5
    36d8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    36da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36de:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    36e2:	4770      	bx	lr
    36e4:	e000ed90 	.word	0xe000ed90

000036e8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    36e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    36ec:	4b01      	ldr	r3, [pc, #4]	; (36f4 <arm_core_mpu_disable+0xc>)
    36ee:	2200      	movs	r2, #0
    36f0:	605a      	str	r2, [r3, #4]
}
    36f2:	4770      	bx	lr
    36f4:	e000ed90 	.word	0xe000ed90

000036f8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    36f8:	4913      	ldr	r1, [pc, #76]	; (3748 <arm_mpu_init+0x50>)
    36fa:	6808      	ldr	r0, [r1, #0]
    36fc:	2808      	cmp	r0, #8
{
    36fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3700:	d81e      	bhi.n	3740 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3702:	f7ff fff1 	bl	36e8 <arm_core_mpu_disable>
	MPU->RNR = index;
    3706:	4c11      	ldr	r4, [pc, #68]	; (374c <arm_mpu_init+0x54>)
    3708:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    370a:	2200      	movs	r2, #0
    370c:	4290      	cmp	r0, r2
    370e:	f101 010c 	add.w	r1, r1, #12
    3712:	d105      	bne.n	3720 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3714:	4b0e      	ldr	r3, [pc, #56]	; (3750 <arm_mpu_init+0x58>)
    3716:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3718:	f7ff ffdc 	bl	36d4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    371c:	2000      	movs	r0, #0
}
    371e:	bd10      	pop	{r4, pc}
    3720:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3722:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3726:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    372a:	4313      	orrs	r3, r2
    372c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3730:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3732:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3736:	f043 0301 	orr.w	r3, r3, #1
    373a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    373c:	3201      	adds	r2, #1
    373e:	e7e5      	b.n	370c <arm_mpu_init+0x14>
		return -1;
    3740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3744:	e7eb      	b.n	371e <arm_mpu_init+0x26>
    3746:	bf00      	nop
    3748:	000289b8 	.word	0x000289b8
    374c:	e000ed90 	.word	0xe000ed90
    3750:	200110e5 	.word	0x200110e5

00003754 <arm_core_mpu_configure_static_mpu_regions>:
{
    3754:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3756:	4c03      	ldr	r4, [pc, #12]	; (3764 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3758:	2301      	movs	r3, #1
    375a:	7822      	ldrb	r2, [r4, #0]
    375c:	f7ff ff5a 	bl	3614 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3760:	7020      	strb	r0, [r4, #0]
}
    3762:	bd10      	pop	{r4, pc}
    3764:	200110e5 	.word	0x200110e5

00003768 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3768:	4b01      	ldr	r3, [pc, #4]	; (3770 <__stdout_hook_install+0x8>)
    376a:	6018      	str	r0, [r3, #0]
}
    376c:	4770      	bx	lr
    376e:	bf00      	nop
    3770:	20000030 	.word	0x20000030

00003774 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    3776:	4f08      	ldr	r7, [pc, #32]	; (3798 <z_impl_zephyr_read_stdin+0x24>)
{
    3778:	4606      	mov	r6, r0
    377a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    377c:	2400      	movs	r4, #0
    377e:	42ac      	cmp	r4, r5
    3780:	da08      	bge.n	3794 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    3782:	683b      	ldr	r3, [r7, #0]
    3784:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    3786:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    3788:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    378a:	f104 0401 	add.w	r4, r4, #1
    378e:	d001      	beq.n	3794 <z_impl_zephyr_read_stdin+0x20>
    3790:	280d      	cmp	r0, #13
    3792:	d1f4      	bne.n	377e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    3794:	4620      	mov	r0, r4
    3796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3798:	2000002c 	.word	0x2000002c

0000379c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    379e:	4f0a      	ldr	r7, [pc, #40]	; (37c8 <z_impl_zephyr_write_stdout+0x2c>)
    37a0:	460d      	mov	r5, r1
    37a2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    37a4:	f1c0 0401 	rsb	r4, r0, #1
    37a8:	19a3      	adds	r3, r4, r6
    37aa:	429d      	cmp	r5, r3
    37ac:	dc01      	bgt.n	37b2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    37ae:	4628      	mov	r0, r5
    37b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    37b2:	7873      	ldrb	r3, [r6, #1]
    37b4:	2b0a      	cmp	r3, #10
    37b6:	d102      	bne.n	37be <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    37b8:	683b      	ldr	r3, [r7, #0]
    37ba:	200d      	movs	r0, #13
    37bc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    37be:	683b      	ldr	r3, [r7, #0]
    37c0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    37c4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    37c6:	e7ef      	b.n	37a8 <z_impl_zephyr_write_stdout+0xc>
    37c8:	20000030 	.word	0x20000030

000037cc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    37cc:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    37ce:	4802      	ldr	r0, [pc, #8]	; (37d8 <_exit+0xc>)
    37d0:	2105      	movs	r1, #5
    37d2:	f7ff ffe3 	bl	379c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    37d6:	e7fe      	b.n	37d6 <_exit+0xa>
    37d8:	00029936 	.word	0x00029936

000037dc <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    37dc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
    37de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    37e2:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    37e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    37e8:	480a      	ldr	r0, [pc, #40]	; (3814 <_sbrk+0x38>)
    37ea:	f010 fe58 	bl	1449e <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    37ee:	490a      	ldr	r1, [pc, #40]	; (3818 <_sbrk+0x3c>)
    37f0:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    37f2:	18e0      	adds	r0, r4, r3
    37f4:	4c09      	ldr	r4, [pc, #36]	; (381c <_sbrk+0x40>)
    37f6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
    37fa:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    37fe:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
    3800:	bf3a      	itte	cc
    3802:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
    3804:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    3806:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	sys_sem_give(&heap_sem);
    380a:	4802      	ldr	r0, [pc, #8]	; (3814 <_sbrk+0x38>)
    380c:	f010 fe42 	bl	14494 <sys_sem_give>

	return ret;
}
    3810:	4620      	mov	r0, r4
    3812:	bd10      	pop	{r4, pc}
    3814:	20000838 	.word	0x20000838
    3818:	2000c2c0 	.word	0x2000c2c0
    381c:	200141e0 	.word	0x200141e0

00003820 <nordicsemi_nrf52_init>:
    3820:	f04f 0320 	mov.w	r3, #32
    3824:	f3ef 8211 	mrs	r2, BASEPRI
    3828:	f383 8811 	msr	BASEPRI, r3
    382c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3830:	4906      	ldr	r1, [pc, #24]	; (384c <nordicsemi_nrf52_init+0x2c>)
    3832:	2301      	movs	r3, #1
    3834:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3838:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    383c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3840:	f382 8811 	msr	BASEPRI, r2
    3844:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3848:	2000      	movs	r0, #0
    384a:	4770      	bx	lr
    384c:	4001e000 	.word	0x4001e000

00003850 <sys_arch_reboot>:
    *p_gpregret = val;
    3850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3854:	b2c0      	uxtb	r0, r0
    3856:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    385a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    385e:	4905      	ldr	r1, [pc, #20]	; (3874 <sys_arch_reboot+0x24>)
    3860:	4b05      	ldr	r3, [pc, #20]	; (3878 <sys_arch_reboot+0x28>)
    3862:	68ca      	ldr	r2, [r1, #12]
    3864:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3868:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    386a:	60cb      	str	r3, [r1, #12]
    386c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3870:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3872:	e7fd      	b.n	3870 <sys_arch_reboot+0x20>
    3874:	e000ed00 	.word	0xe000ed00
    3878:	05fa0004 	.word	0x05fa0004

0000387c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    387c:	b120      	cbz	r0, 3888 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    387e:	4b03      	ldr	r3, [pc, #12]	; (388c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3880:	0180      	lsls	r0, r0, #6
    3882:	f043 0301 	orr.w	r3, r3, #1
    3886:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3888:	4770      	bx	lr
    388a:	bf00      	nop
    388c:	00025910 	.word	0x00025910

00003890 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    3890:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3892:	4b09      	ldr	r3, [pc, #36]	; (38b8 <gpio_nrfx_init+0x28>)
    3894:	781a      	ldrb	r2, [r3, #0]
    3896:	b96a      	cbnz	r2, 38b4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3898:	2101      	movs	r1, #1
    389a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    389c:	2006      	movs	r0, #6
    389e:	2105      	movs	r1, #5
    38a0:	f7ff fb38 	bl	2f14 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    38a4:	2006      	movs	r0, #6
    38a6:	f7ff fb25 	bl	2ef4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    38aa:	4b04      	ldr	r3, [pc, #16]	; (38bc <gpio_nrfx_init+0x2c>)
    38ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    38b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    38b4:	2000      	movs	r0, #0
    38b6:	bd08      	pop	{r3, pc}
    38b8:	200110e6 	.word	0x200110e6
    38bc:	40006000 	.word	0x40006000

000038c0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38c0:	4b2d      	ldr	r3, [pc, #180]	; (3978 <gpio_nrfx_config+0xb8>)
{
    38c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    38c4:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38c6:	482d      	ldr	r0, [pc, #180]	; (397c <gpio_nrfx_config+0xbc>)
    38c8:	4013      	ands	r3, r2
    38ca:	4283      	cmp	r3, r0
    38cc:	d045      	beq.n	395a <gpio_nrfx_config+0x9a>
    38ce:	d80d      	bhi.n	38ec <gpio_nrfx_config+0x2c>
    38d0:	2b06      	cmp	r3, #6
    38d2:	d015      	beq.n	3900 <gpio_nrfx_config+0x40>
    38d4:	d805      	bhi.n	38e2 <gpio_nrfx_config+0x22>
    38d6:	b19b      	cbz	r3, 3900 <gpio_nrfx_config+0x40>
    38d8:	2b02      	cmp	r3, #2
    38da:	d040      	beq.n	395e <gpio_nrfx_config+0x9e>
    38dc:	f06f 0015 	mvn.w	r0, #21
    38e0:	e03a      	b.n	3958 <gpio_nrfx_config+0x98>
    38e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    38e6:	d1f9      	bne.n	38dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    38e8:	2301      	movs	r3, #1
    38ea:	e009      	b.n	3900 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38ec:	4824      	ldr	r0, [pc, #144]	; (3980 <gpio_nrfx_config+0xc0>)
    38ee:	4283      	cmp	r3, r0
    38f0:	d037      	beq.n	3962 <gpio_nrfx_config+0xa2>
    38f2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    38f6:	d036      	beq.n	3966 <gpio_nrfx_config+0xa6>
    38f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    38fc:	d1ee      	bne.n	38dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    38fe:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    3900:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    3902:	bf54      	ite	pl
    3904:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    3908:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    390a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    390e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    3910:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3914:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3918:	d507      	bpl.n	392a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    391a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    391e:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3920:	d023      	beq.n	396a <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3922:	2201      	movs	r2, #1
    3924:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3926:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    392a:	7a32      	ldrb	r2, [r6, #8]
    392c:	f001 011f 	and.w	r1, r1, #31
    3930:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
    3934:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3936:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & 0x1F;
    393a:	bfc6      	itte	gt
    393c:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
    3940:	4e10      	ldrgt	r6, [pc, #64]	; (3984 <gpio_nrfx_config+0xc4>)
        return NRF_P0;
    3942:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3946:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    394a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    394e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3952:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
    3956:	2000      	movs	r0, #0
}
    3958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    395a:	2307      	movs	r3, #7
    395c:	e7d0      	b.n	3900 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    395e:	2304      	movs	r3, #4
    3960:	e7ce      	b.n	3900 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3962:	2305      	movs	r3, #5
    3964:	e7cc      	b.n	3900 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    3966:	2303      	movs	r3, #3
    3968:	e7ca      	b.n	3900 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    396a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    396c:	bf42      	ittt	mi
    396e:	2201      	movmi	r2, #1
    3970:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    3972:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    3976:	e7d8      	b.n	392a <gpio_nrfx_config+0x6a>
    3978:	00f00006 	.word	0x00f00006
    397c:	00100006 	.word	0x00100006
    3980:	00400002 	.word	0x00400002
    3984:	50000300 	.word	0x50000300

00003988 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
    3988:	281f      	cmp	r0, #31
        return NRF_P1;
    398a:	bf8a      	itet	hi
    398c:	4b07      	ldrhi	r3, [pc, #28]	; (39ac <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
    398e:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & 0x1F;
    3992:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3996:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    399a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    399e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    39a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    39a6:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    39aa:	4770      	bx	lr
    39ac:	50000300 	.word	0x50000300

000039b0 <gpiote_pin_int_cfg>:
{
    39b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39b2:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    39b4:	68c6      	ldr	r6, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39b6:	7a18      	ldrb	r0, [r3, #8]
    39b8:	f001 041f 	and.w	r4, r1, #31
{
    39bc:	460d      	mov	r5, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    39be:	4949      	ldr	r1, [pc, #292]	; (3ae4 <gpiote_pin_int_cfg+0x134>)
    39c0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39c4:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
    39c8:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    39ca:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39cc:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    39d0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    39d4:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    39d8:	4284      	cmp	r4, r0
    39da:	d16d      	bne.n	3ab8 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
    39dc:	fa22 f003 	lsr.w	r0, r2, r3
    39e0:	07c0      	lsls	r0, r0, #31
    39e2:	d569      	bpl.n	3ab8 <gpiote_pin_int_cfg+0x108>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    39e4:	009a      	lsls	r2, r3, #2
    39e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    39ea:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    39ee:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    39f2:	f020 0001 	bic.w	r0, r0, #1
    39f6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    39fa:	2201      	movs	r2, #1
    39fc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    3a00:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3a04:	4620      	mov	r0, r4
    3a06:	2100      	movs	r1, #0
    3a08:	f7ff ffbe 	bl	3988 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3a0c:	68f3      	ldr	r3, [r6, #12]
    3a0e:	40eb      	lsrs	r3, r5
    3a10:	f013 0001 	ands.w	r0, r3, #1
    3a14:	d04e      	beq.n	3ab4 <gpiote_pin_int_cfg+0x104>
    3a16:	6933      	ldr	r3, [r6, #16]
    3a18:	40eb      	lsrs	r3, r5
    3a1a:	f013 0001 	ands.w	r0, r3, #1
    3a1e:	d049      	beq.n	3ab4 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    3a20:	69b3      	ldr	r3, [r6, #24]
    3a22:	40eb      	lsrs	r3, r5
    3a24:	f013 0201 	ands.w	r2, r3, #1
    3a28:	d050      	beq.n	3acc <gpiote_pin_int_cfg+0x11c>
			if (data->double_edge & BIT(pin)) {
    3a2a:	69f3      	ldr	r3, [r6, #28]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    3a2c:	4f2d      	ldr	r7, [pc, #180]	; (3ae4 <gpiote_pin_int_cfg+0x134>)
    3a2e:	40eb      	lsrs	r3, r5
    3a30:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3a32:	bf5f      	itttt	pl
    3a34:	6971      	ldrpl	r1, [r6, #20]
    3a36:	fa21 f505 	lsrpl.w	r5, r1, r5
    3a3a:	f005 0501 	andpl.w	r5, r5, #1
    3a3e:	f1c5 0502 	rsbpl	r5, r5, #2
    3a42:	bf54      	ite	pl
    3a44:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3a46:	2503      	movmi	r5, #3
    3a48:	2600      	movs	r6, #0
    3a4a:	f506 73a2 	add.w	r3, r6, #324	; 0x144
    3a4e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    3a52:	f010 0003 	ands.w	r0, r0, #3
    3a56:	d133      	bne.n	3ac0 <gpiote_pin_int_cfg+0x110>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a58:	00b2      	lsls	r2, r6, #2
    3a5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a5e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a62:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a64:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3a68:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    3a6c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3a70:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a74:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3a78:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
    3a7c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    3a80:	430d      	orrs	r5, r1
			nrf_gpiote_event_t evt =
    3a82:	f106 0140 	add.w	r1, r6, #64	; 0x40
    3a86:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    3a88:	b289      	uxth	r1, r1
    3a8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3a8e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a92:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a96:	6008      	str	r0, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3a98:	6809      	ldr	r1, [r1, #0]
    3a9a:	9101      	str	r1, [sp, #4]
    (void)dummy;
    3a9c:	9901      	ldr	r1, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3a9e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3aa2:	f041 0101 	orr.w	r1, r1, #1
    3aa6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    3aaa:	2201      	movs	r2, #1
    3aac:	fa02 f606 	lsl.w	r6, r2, r6
    p_reg->INTENSET = mask;
    3ab0:	f8c7 6304 	str.w	r6, [r7, #772]	; 0x304
}
    3ab4:	b003      	add	sp, #12
    3ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ab8:	3301      	adds	r3, #1
    3aba:	2b08      	cmp	r3, #8
    3abc:	d186      	bne.n	39cc <gpiote_pin_int_cfg+0x1c>
    3abe:	e7a1      	b.n	3a04 <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3ac0:	3601      	adds	r6, #1
    3ac2:	2e08      	cmp	r6, #8
    3ac4:	d1c1      	bne.n	3a4a <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    3ac6:	f06f 0012 	mvn.w	r0, #18
    3aca:	e7f3      	b.n	3ab4 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3acc:	6971      	ldr	r1, [r6, #20]
    3ace:	40e9      	lsrs	r1, r5
    3ad0:	f001 0101 	and.w	r1, r1, #1
    3ad4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3ad8:	4620      	mov	r0, r4
    3ada:	b2c9      	uxtb	r1, r1
    3adc:	f7ff ff54 	bl	3988 <nrf_gpio_cfg_sense_set>
	int res = 0;
    3ae0:	4610      	mov	r0, r2
    3ae2:	e7e7      	b.n	3ab4 <gpiote_pin_int_cfg+0x104>
    3ae4:	40006000 	.word	0x40006000

00003ae8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3ae8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    3aec:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    3aee:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3af0:	d116      	bne.n	3b20 <gpio_nrfx_pin_interrupt_configure+0x38>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3af2:	6845      	ldr	r5, [r0, #4]
    3af4:	7a2e      	ldrb	r6, [r5, #8]
    3af6:	f001 051f 	and.w	r5, r1, #31
    3afa:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    if (*p_pin < P0_PIN_NUM)
    3afe:	2d1f      	cmp	r5, #31
        *p_pin = *p_pin & 0x1F;
    3b00:	bfc6      	itte	gt
    3b02:	f005 051f 	andgt.w	r5, r5, #31
        return NRF_P1;
    3b06:	4e1e      	ldrgt	r6, [pc, #120]	; (3b80 <gpio_nrfx_pin_interrupt_configure+0x98>)
        return NRF_P0;
    3b08:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b0c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3b10:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3b14:	07ed      	lsls	r5, r5, #31
    3b16:	d507      	bpl.n	3b28 <gpio_nrfx_pin_interrupt_configure+0x40>
}
    3b18:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b1c:	bc70      	pop	{r4, r5, r6}
    3b1e:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3b24:	68e5      	ldr	r5, [r4, #12]
    3b26:	d026      	beq.n	3b76 <gpio_nrfx_pin_interrupt_configure+0x8e>
    3b28:	68e6      	ldr	r6, [r4, #12]
    3b2a:	2501      	movs	r5, #1
    3b2c:	408d      	lsls	r5, r1
    3b2e:	4335      	orrs	r5, r6
    3b30:	6926      	ldr	r6, [r4, #16]
    3b32:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b34:	2501      	movs	r5, #1
    3b36:	408d      	lsls	r5, r1
    3b38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3b3c:	bf14      	ite	ne
    3b3e:	432e      	orrne	r6, r5
    3b40:	43ae      	biceq	r6, r5
    3b42:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3b44:	69a6      	ldr	r6, [r4, #24]
    3b46:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3b4a:	69e2      	ldr	r2, [r4, #28]
    3b4c:	bf0c      	ite	eq
    3b4e:	432e      	orreq	r6, r5
    3b50:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3b52:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3b56:	bf0c      	ite	eq
    3b58:	432a      	orreq	r2, r5
    3b5a:	43aa      	bicne	r2, r5
    3b5c:	61e2      	str	r2, [r4, #28]
    3b5e:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3b60:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3b66:	bf0c      	ite	eq
    3b68:	4315      	orreq	r5, r2
    3b6a:	ea22 0505 	bicne.w	r5, r2, r5
    3b6e:	6165      	str	r5, [r4, #20]
}
    3b70:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    3b72:	f7ff bf1d 	b.w	39b0 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b76:	2601      	movs	r6, #1
    3b78:	408e      	lsls	r6, r1
    3b7a:	ea25 0506 	bic.w	r5, r5, r6
    3b7e:	e7d7      	b.n	3b30 <gpio_nrfx_pin_interrupt_configure+0x48>
    3b80:	50000300 	.word	0x50000300

00003b84 <gpiote_event_handler>:
{
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3b86:	2600      	movs	r6, #0
{
    3b88:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3b8a:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b8e:	4d28      	ldr	r5, [pc, #160]	; (3c30 <gpiote_event_handler+0xac>)
    3b90:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    3b92:	b15c      	cbz	r4, 3bac <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    3b94:	4827      	ldr	r0, [pc, #156]	; (3c34 <gpiote_event_handler+0xb0>)
    3b96:	f011 fa1c 	bl	14fd2 <check_level_trigger_pins>
		fired_triggers[0] =
    3b9a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    3b9c:	4826      	ldr	r0, [pc, #152]	; (3c38 <gpiote_event_handler+0xb4>)
    3b9e:	f011 fa18 	bl	14fd2 <check_level_trigger_pins>
		fired_triggers[1] =
    3ba2:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ba4:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3ba6:	682b      	ldr	r3, [r5, #0]
    3ba8:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3baa:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    3bac:	4d23      	ldr	r5, [pc, #140]	; (3c3c <gpiote_event_handler+0xb8>)
{
    3bae:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3bb0:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bb2:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    3bb4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    3bb8:	fa06 f102 	lsl.w	r1, r6, r2
    3bbc:	4219      	tst	r1, r3
    3bbe:	d01d      	beq.n	3bfc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bc0:	0091      	lsls	r1, r2, #2
    3bc2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3bc6:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    3bca:	680b      	ldr	r3, [r1, #0]
    3bcc:	b1b3      	cbz	r3, 3bfc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3bce:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3bd2:	af04      	add	r7, sp, #16
    3bd4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd8:	f8c1 c000 	str.w	ip, [r1]
    3bdc:	f3c3 3040 	ubfx	r0, r3, #13, #1
    3be0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3be4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3be8:	f850 7c08 	ldr.w	r7, [r0, #-8]
    3bec:	fa06 f303 	lsl.w	r3, r6, r3
    3bf0:	433b      	orrs	r3, r7
    3bf2:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3bf6:	680b      	ldr	r3, [r1, #0]
    3bf8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3bfa:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3bfc:	3201      	adds	r2, #1
    3bfe:	2a08      	cmp	r2, #8
    3c00:	d1d8      	bne.n	3bb4 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
    3c02:	9902      	ldr	r1, [sp, #8]
    3c04:	b111      	cbz	r1, 3c0c <gpiote_event_handler+0x88>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    3c06:	480b      	ldr	r0, [pc, #44]	; (3c34 <gpiote_event_handler+0xb0>)
    3c08:	f011 f9c8 	bl	14f9c <fire_callbacks>
	if (fired_triggers[1]) {
    3c0c:	9903      	ldr	r1, [sp, #12]
    3c0e:	b111      	cbz	r1, 3c16 <gpiote_event_handler+0x92>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    3c10:	4809      	ldr	r0, [pc, #36]	; (3c38 <gpiote_event_handler+0xb4>)
    3c12:	f011 f9c3 	bl	14f9c <fire_callbacks>
	if (port_event) {
    3c16:	b144      	cbz	r4, 3c2a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    3c18:	4806      	ldr	r0, [pc, #24]	; (3c34 <gpiote_event_handler+0xb0>)
    3c1a:	f011 fa0c 	bl	15036 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    3c1e:	4806      	ldr	r0, [pc, #24]	; (3c38 <gpiote_event_handler+0xb4>)
}
    3c20:	b005      	add	sp, #20
    3c22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    3c26:	f011 ba06 	b.w	15036 <cfg_level_pins>
}
    3c2a:	b005      	add	sp, #20
    3c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c2e:	bf00      	nop
    3c30:	4000617c 	.word	0x4000617c
    3c34:	200007d0 	.word	0x200007d0
    3c38:	200007e0 	.word	0x200007e0
    3c3c:	40006000 	.word	0x40006000

00003c40 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3c40:	4802      	ldr	r0, [pc, #8]	; (3c4c <pwm_nrfx_get_cycles_per_sec+0xc>)
    3c42:	2100      	movs	r1, #0
    3c44:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3c48:	2000      	movs	r0, #0
    3c4a:	4770      	bx	lr
    3c4c:	00f42400 	.word	0x00f42400

00003c50 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
    3c50:	b510      	push	{r4, lr}
    3c52:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config_info;
    3c54:	6840      	ldr	r0, [r0, #4]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3c56:	2300      	movs	r3, #0
    3c58:	461a      	mov	r2, r3
    3c5a:	f100 0108 	add.w	r1, r0, #8
    3c5e:	f000 fc65 	bl	452c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3c62:	4b09      	ldr	r3, [pc, #36]	; (3c88 <pwm_nrfx_init+0x38>)
    3c64:	4298      	cmp	r0, r3
    3c66:	d00d      	beq.n	3c84 <pwm_nrfx_init+0x34>
    3c68:	4b08      	ldr	r3, [pc, #32]	; (3c8c <pwm_nrfx_init+0x3c>)
    3c6a:	4a09      	ldr	r2, [pc, #36]	; (3c90 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    3c6c:	4809      	ldr	r0, [pc, #36]	; (3c94 <pwm_nrfx_init+0x44>)
    3c6e:	6821      	ldr	r1, [r4, #0]
    3c70:	1ad2      	subs	r2, r2, r3
    3c72:	08d2      	lsrs	r2, r2, #3
    3c74:	0192      	lsls	r2, r2, #6
    3c76:	f042 0201 	orr.w	r2, r2, #1
    3c7a:	f010 fd06 	bl	1468a <log_1>
		return -EBUSY;
    3c7e:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    3c82:	bd10      	pop	{r4, pc}
	return 0;
    3c84:	2000      	movs	r0, #0
    3c86:	e7fc      	b.n	3c82 <pwm_nrfx_init+0x32>
    3c88:	0bad0000 	.word	0x0bad0000
    3c8c:	0001eba4 	.word	0x0001eba4
    3c90:	0001ebd4 	.word	0x0001ebd4
    3c94:	0002995d 	.word	0x0002995d

00003c98 <pwm_nrfx_pin_set>:
{
    3c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c9c:	f89d 5020 	ldrb.w	r5, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config_info;
    3ca0:	6847      	ldr	r7, [r0, #4]
{
    3ca2:	460c      	mov	r4, r1
    3ca4:	4616      	mov	r6, r2
	struct pwm_nrfx_data *data = dev->driver_data;
    3ca6:	68c1      	ldr	r1, [r0, #12]
{
    3ca8:	4698      	mov	r8, r3
	if (flags) {
    3caa:	2d00      	cmp	r5, #0
    3cac:	f040 8088 	bne.w	3dc0 <pwm_nrfx_pin_set+0x128>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3cb0:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    3cb2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3cb6:	2bff      	cmp	r3, #255	; 0xff
    3cb8:	d004      	beq.n	3cc4 <pwm_nrfx_pin_set+0x2c>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    3cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3cbe:	429c      	cmp	r4, r3
    3cc0:	f000 8081 	beq.w	3dc6 <pwm_nrfx_pin_set+0x12e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3cc4:	3501      	adds	r5, #1
    3cc6:	b2ed      	uxtb	r5, r5
    3cc8:	2d04      	cmp	r5, #4
    3cca:	d1f2      	bne.n	3cb2 <pwm_nrfx_pin_set+0x1a>
    3ccc:	4a61      	ldr	r2, [pc, #388]	; (3e54 <pwm_nrfx_pin_set+0x1bc>)
    3cce:	4b62      	ldr	r3, [pc, #392]	; (3e58 <pwm_nrfx_pin_set+0x1c0>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    3cd0:	4862      	ldr	r0, [pc, #392]	; (3e5c <pwm_nrfx_pin_set+0x1c4>)
    3cd2:	1ad2      	subs	r2, r2, r3
    3cd4:	08d2      	lsrs	r2, r2, #3
    3cd6:	0192      	lsls	r2, r2, #6
    3cd8:	f042 0201 	orr.w	r2, r2, #1
    3cdc:	4621      	mov	r1, r4
    3cde:	e044      	b.n	3d6a <pwm_nrfx_pin_set+0xd2>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3ce0:	2000      	movs	r0, #0
    3ce2:	e080      	b.n	3de6 <pwm_nrfx_pin_set+0x14e>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    3ce4:	3301      	adds	r3, #1
    3ce6:	2b04      	cmp	r3, #4
    3ce8:	f040 808b 	bne.w	3e02 <pwm_nrfx_pin_set+0x16a>
    3cec:	4632      	mov	r2, r6
    3cee:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    3cf0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    3cf4:	fa5f fe83 	uxtb.w	lr, r3
    3cf8:	d229      	bcs.n	3d4e <pwm_nrfx_pin_set+0xb6>
			data->prescaler     = prescaler;
    3cfa:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    3cfe:	f8d7 e000 	ldr.w	lr, [r7]
			data->period_cycles = period_cycles;
    3d02:	600e      	str	r6, [r1, #0]
			data->countertop    = (u16_t)countertop;
    3d04:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    3d06:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3d0a:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3d0e:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    3d12:	7b8a      	ldrb	r2, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    3d14:	4546      	cmp	r6, r8
    3d16:	4633      	mov	r3, r6
    3d18:	bf28      	it	cs
    3d1a:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
    3d1c:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    3d20:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    3d24:	ea42 020a 	orr.w	r2, r2, sl
    3d28:	b292      	uxth	r2, r2
	data->current[channel] = (
    3d2a:	f8a9 2004 	strh.w	r2, [r9, #4]
	u16_t pulse_cycle =
    3d2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3d32:	b11a      	cbz	r2, 3d3c <pwm_nrfx_pin_set+0xa4>
    3d34:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    3d38:	4594      	cmp	ip, r2
    3d3a:	d819      	bhi.n	3d70 <pwm_nrfx_pin_set+0xd8>
			config->initial_config.output_pins[channel]
    3d3c:	197a      	adds	r2, r7, r5
    3d3e:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    3d42:	b1c3      	cbz	r3, 3d76 <pwm_nrfx_pin_set+0xde>
			&& channel_inverted_state;
    3d44:	4546      	cmp	r6, r8
    3d46:	d877      	bhi.n	3e38 <pwm_nrfx_pin_set+0x1a0>
    3d48:	2a00      	cmp	r2, #0
    3d4a:	db16      	blt.n	3d7a <pwm_nrfx_pin_set+0xe2>
    3d4c:	e074      	b.n	3e38 <pwm_nrfx_pin_set+0x1a0>
		countertop >>= 1;
    3d4e:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3d50:	2b08      	cmp	r3, #8
		countertop >>= 1;
    3d52:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3d56:	d1cb      	bne.n	3cf0 <pwm_nrfx_pin_set+0x58>
    3d58:	4a3e      	ldr	r2, [pc, #248]	; (3e54 <pwm_nrfx_pin_set+0x1bc>)
    3d5a:	4b3f      	ldr	r3, [pc, #252]	; (3e58 <pwm_nrfx_pin_set+0x1c0>)
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    3d5c:	4840      	ldr	r0, [pc, #256]	; (3e60 <pwm_nrfx_pin_set+0x1c8>)
    3d5e:	1ad2      	subs	r2, r2, r3
    3d60:	08d2      	lsrs	r2, r2, #3
    3d62:	0192      	lsls	r2, r2, #6
    3d64:	f042 0201 	orr.w	r2, r2, #1
    3d68:	4631      	mov	r1, r6
    3d6a:	f010 fc8e 	bl	1468a <log_1>
    3d6e:	e05d      	b.n	3e2c <pwm_nrfx_pin_set+0x194>
		if (was_stopped) {
    3d70:	b9c8      	cbnz	r0, 3da6 <pwm_nrfx_pin_set+0x10e>
	return 0;
    3d72:	2000      	movs	r0, #0
    3d74:	e05c      	b.n	3e30 <pwm_nrfx_pin_set+0x198>
			&& channel_inverted_state;
    3d76:	4546      	cmp	r6, r8
    3d78:	d85c      	bhi.n	3e34 <pwm_nrfx_pin_set+0x19c>
    if (*p_pin < P0_PIN_NUM)
    3d7a:	2c1f      	cmp	r4, #31
        return NRF_P1;
    3d7c:	bf86      	itte	hi
    3d7e:	4a39      	ldrhi	r2, [pc, #228]	; (3e64 <pwm_nrfx_pin_set+0x1cc>)
        *p_pin = *p_pin & 0x1F;
    3d80:	f004 041f 	andhi.w	r4, r4, #31
        return NRF_P0;
    3d84:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3d88:	2301      	movs	r3, #1
    3d8a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    3d8e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    3d92:	4628      	mov	r0, r5
    3d94:	f011 f97e 	bl	15094 <any_other_channel_is_active>
    3d98:	2800      	cmp	r0, #0
    3d9a:	d1ea      	bne.n	3d72 <pwm_nrfx_pin_set+0xda>
			nrfx_pwm_stop(&config->pwm, false);
    3d9c:	4601      	mov	r1, r0
    3d9e:	4638      	mov	r0, r7
    3da0:	f011 fa3b 	bl	1521a <nrfx_pwm_stop>
    3da4:	e7e5      	b.n	3d72 <pwm_nrfx_pin_set+0xda>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    3da6:	4638      	mov	r0, r7
    3da8:	f000 fca4 	bl	46f4 <nrfx_pwm_is_stopped>
    3dac:	2800      	cmp	r0, #0
    3dae:	d0fa      	beq.n	3da6 <pwm_nrfx_pin_set+0x10e>
			nrfx_pwm_simple_playback(&config->pwm,
    3db0:	2302      	movs	r3, #2
    3db2:	2201      	movs	r2, #1
    3db4:	f107 0118 	add.w	r1, r7, #24
    3db8:	4638      	mov	r0, r7
    3dba:	f000 fc5b 	bl	4674 <nrfx_pwm_simple_playback>
    3dbe:	e7d8      	b.n	3d72 <pwm_nrfx_pin_set+0xda>
		return -ENOTSUP;
    3dc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3dc4:	e034      	b.n	3e30 <pwm_nrfx_pin_set+0x198>
	u16_t pulse_cycle =
    3dc6:	eb01 0945 	add.w	r9, r1, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    3dca:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	u16_t pulse_cycle =
    3dce:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3dd2:	b113      	cbz	r3, 3dda <pwm_nrfx_pin_set+0x142>
    3dd4:	898a      	ldrh	r2, [r1, #12]
    3dd6:	429a      	cmp	r2, r3
    3dd8:	d882      	bhi.n	3ce0 <pwm_nrfx_pin_set+0x48>
		      !any_other_channel_is_active(channel, data);
    3dda:	4628      	mov	r0, r5
    3ddc:	f011 f95a 	bl	15094 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3de0:	f080 0001 	eor.w	r0, r0, #1
    3de4:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3de6:	f897 c00e 	ldrb.w	ip, [r7, #14]
	if (period_cycles != data->period_cycles) {
    3dea:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3dec:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
    3df0:	bf04      	itt	eq
    3df2:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    3df4:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != data->period_cycles) {
    3df8:	42b3      	cmp	r3, r6
    3dfa:	d08a      	beq.n	3d12 <pwm_nrfx_pin_set+0x7a>
    3dfc:	2300      	movs	r3, #0
				data->current[i]
    3dfe:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
    3e02:	b2da      	uxtb	r2, r3
    3e04:	42aa      	cmp	r2, r5
    3e06:	f43f af6d 	beq.w	3ce4 <pwm_nrfx_pin_set+0x4c>
			u16_t channel_pulse_cycle =
    3e0a:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    3e0e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    3e12:	2a00      	cmp	r2, #0
    3e14:	f43f af66 	beq.w	3ce4 <pwm_nrfx_pin_set+0x4c>
    3e18:	490e      	ldr	r1, [pc, #56]	; (3e54 <pwm_nrfx_pin_set+0x1bc>)
    3e1a:	4b0f      	ldr	r3, [pc, #60]	; (3e58 <pwm_nrfx_pin_set+0x1c0>)
				LOG_ERR("Incompatible period.");
    3e1c:	4812      	ldr	r0, [pc, #72]	; (3e68 <pwm_nrfx_pin_set+0x1d0>)
    3e1e:	1ac9      	subs	r1, r1, r3
    3e20:	08c9      	lsrs	r1, r1, #3
    3e22:	0189      	lsls	r1, r1, #6
    3e24:	f041 0101 	orr.w	r1, r1, #1
    3e28:	f010 fc20 	bl	1466c <log_0>
	return -EINVAL;
    3e2c:	f06f 0015 	mvn.w	r0, #21
}
    3e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    3e34:	2a00      	cmp	r2, #0
    3e36:	daa0      	bge.n	3d7a <pwm_nrfx_pin_set+0xe2>
    if (*p_pin < P0_PIN_NUM)
    3e38:	2c1f      	cmp	r4, #31
        return NRF_P1;
    3e3a:	bf86      	itte	hi
    3e3c:	4a09      	ldrhi	r2, [pc, #36]	; (3e64 <pwm_nrfx_pin_set+0x1cc>)
        *p_pin = *p_pin & 0x1F;
    3e3e:	f004 041f 	andhi.w	r4, r4, #31
        return NRF_P0;
    3e42:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3e46:	2301      	movs	r3, #1
    3e48:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTSET = set_mask;
    3e4c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    3e50:	e79f      	b.n	3d92 <pwm_nrfx_pin_set+0xfa>
    3e52:	bf00      	nop
    3e54:	0001ebd4 	.word	0x0001ebd4
    3e58:	0001eba4 	.word	0x0001eba4
    3e5c:	000299bc 	.word	0x000299bc
    3e60:	00029992 	.word	0x00029992
    3e64:	50000300 	.word	0x50000300
    3e68:	0002997d 	.word	0x0002997d

00003e6c <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3e6c:	4b02      	ldr	r3, [pc, #8]	; (3e78 <uart_nrfx_err_check+0xc>)
    3e6e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3e72:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    3e76:	4770      	bx	lr
    3e78:	40002000 	.word	0x40002000

00003e7c <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    3e7c:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3e7e:	794b      	ldrb	r3, [r1, #5]
    3e80:	2b01      	cmp	r3, #1
    3e82:	d027      	beq.n	3ed4 <uart_nrfx_configure+0x58>
    3e84:	2b03      	cmp	r3, #3
    3e86:	d122      	bne.n	3ece <uart_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    3e88:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3e8a:	798b      	ldrb	r3, [r1, #6]
    3e8c:	2b03      	cmp	r3, #3
    3e8e:	d11e      	bne.n	3ece <uart_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3e90:	79cc      	ldrb	r4, [r1, #7]
    3e92:	b124      	cbz	r4, 3e9e <uart_nrfx_configure+0x22>
    3e94:	2c01      	cmp	r4, #1
    3e96:	d11a      	bne.n	3ece <uart_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    3e98:	6843      	ldr	r3, [r0, #4]
    3e9a:	781b      	ldrb	r3, [r3, #0]
    3e9c:	b1bb      	cbz	r3, 3ece <uart_nrfx_configure+0x52>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3e9e:	790a      	ldrb	r2, [r1, #4]
    3ea0:	b112      	cbz	r2, 3ea8 <uart_nrfx_configure+0x2c>
    3ea2:	2a02      	cmp	r2, #2
    3ea4:	d113      	bne.n	3ece <uart_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    3ea6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3ea8:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3eaa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3eae:	d062      	beq.n	3f76 <uart_nrfx_configure+0xfa>
    3eb0:	d82d      	bhi.n	3f0e <uart_nrfx_configure+0x92>
    3eb2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3eb6:	d060      	beq.n	3f7a <uart_nrfx_configure+0xfe>
    3eb8:	d816      	bhi.n	3ee8 <uart_nrfx_configure+0x6c>
    3eba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ebe:	d05e      	beq.n	3f7e <uart_nrfx_configure+0x102>
    3ec0:	d80a      	bhi.n	3ed8 <uart_nrfx_configure+0x5c>
    3ec2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3ec6:	d05d      	beq.n	3f84 <uart_nrfx_configure+0x108>
    3ec8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3ecc:	d05d      	beq.n	3f8a <uart_nrfx_configure+0x10e>
    3ece:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3ed2:	e04f      	b.n	3f74 <uart_nrfx_configure+0xf8>
	switch (cfg->stop_bits) {
    3ed4:	2600      	movs	r6, #0
    3ed6:	e7d8      	b.n	3e8a <uart_nrfx_configure+0xe>
	switch (baudrate) {
    3ed8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3edc:	d058      	beq.n	3f90 <uart_nrfx_configure+0x114>
    3ede:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3ee2:	d1f4      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3ee4:	4b34      	ldr	r3, [pc, #208]	; (3fb8 <uart_nrfx_configure+0x13c>)
    3ee6:	e039      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3ee8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3eec:	d053      	beq.n	3f96 <uart_nrfx_configure+0x11a>
    3eee:	d807      	bhi.n	3f00 <uart_nrfx_configure+0x84>
    3ef0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3ef4:	d051      	beq.n	3f9a <uart_nrfx_configure+0x11e>
    3ef6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3efa:	d1e8      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3efc:	4b2f      	ldr	r3, [pc, #188]	; (3fbc <uart_nrfx_configure+0x140>)
    3efe:	e02d      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f00:	f647 2512 	movw	r5, #31250	; 0x7a12
    3f04:	42ab      	cmp	r3, r5
    3f06:	d1e2      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3f08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f0c:	e026      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f0e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f12:	d045      	beq.n	3fa0 <uart_nrfx_configure+0x124>
    3f14:	d811      	bhi.n	3f3a <uart_nrfx_configure+0xbe>
    3f16:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f1a:	d043      	beq.n	3fa4 <uart_nrfx_configure+0x128>
    3f1c:	d808      	bhi.n	3f30 <uart_nrfx_configure+0xb4>
    3f1e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3f22:	42ab      	cmp	r3, r5
    3f24:	d040      	beq.n	3fa8 <uart_nrfx_configure+0x12c>
    3f26:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3f2a:	d1d0      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3f2c:	4b24      	ldr	r3, [pc, #144]	; (3fc0 <uart_nrfx_configure+0x144>)
    3f2e:	e015      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f30:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3f34:	d1cb      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3f36:	4b23      	ldr	r3, [pc, #140]	; (3fc4 <uart_nrfx_configure+0x148>)
    3f38:	e010      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f3a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3f3e:	d036      	beq.n	3fae <uart_nrfx_configure+0x132>
    3f40:	d807      	bhi.n	3f52 <uart_nrfx_configure+0xd6>
    3f42:	4d21      	ldr	r5, [pc, #132]	; (3fc8 <uart_nrfx_configure+0x14c>)
    3f44:	42ab      	cmp	r3, r5
    3f46:	d034      	beq.n	3fb2 <uart_nrfx_configure+0x136>
    3f48:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3f4c:	d1bf      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3f4e:	4b1f      	ldr	r3, [pc, #124]	; (3fcc <uart_nrfx_configure+0x150>)
    3f50:	e004      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f52:	4d1f      	ldr	r5, [pc, #124]	; (3fd0 <uart_nrfx_configure+0x154>)
    3f54:	42ab      	cmp	r3, r5
    3f56:	d1ba      	bne.n	3ece <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3f5c:	4d1d      	ldr	r5, [pc, #116]	; (3fd4 <uart_nrfx_configure+0x158>)
                    | (uint32_t)p_cfg->hwfc;
    3f5e:	4334      	orrs	r4, r6
    3f60:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    3f62:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3f66:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3f6a:	68c3      	ldr	r3, [r0, #12]
    3f6c:	c903      	ldmia	r1, {r0, r1}
    3f6e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3f72:	2000      	movs	r0, #0
}
    3f74:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3f76:	4b18      	ldr	r3, [pc, #96]	; (3fd8 <uart_nrfx_configure+0x15c>)
    3f78:	e7f0      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3f7a:	4b18      	ldr	r3, [pc, #96]	; (3fdc <uart_nrfx_configure+0x160>)
    3f7c:	e7ee      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3f7e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3f82:	e7eb      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    3f84:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3f88:	e7e8      	b.n	3f5c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f8a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3f8e:	e7e5      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3f90:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3f94:	e7e2      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3f96:	4b12      	ldr	r3, [pc, #72]	; (3fe0 <uart_nrfx_configure+0x164>)
    3f98:	e7e0      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3f9a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3f9e:	e7dd      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3fa0:	4b10      	ldr	r3, [pc, #64]	; (3fe4 <uart_nrfx_configure+0x168>)
    3fa2:	e7db      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3fa4:	4b10      	ldr	r3, [pc, #64]	; (3fe8 <uart_nrfx_configure+0x16c>)
    3fa6:	e7d9      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3fa8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3fac:	e7d6      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3fae:	4b0f      	ldr	r3, [pc, #60]	; (3fec <uart_nrfx_configure+0x170>)
    3fb0:	e7d4      	b.n	3f5c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3fb6:	e7d1      	b.n	3f5c <uart_nrfx_configure+0xe0>
    3fb8:	0013b000 	.word	0x0013b000
    3fbc:	004ea000 	.word	0x004ea000
    3fc0:	00ebf000 	.word	0x00ebf000
    3fc4:	01d7e000 	.word	0x01d7e000
    3fc8:	0003d090 	.word	0x0003d090
    3fcc:	075f7000 	.word	0x075f7000
    3fd0:	000f4240 	.word	0x000f4240
    3fd4:	40002000 	.word	0x40002000
    3fd8:	009d5000 	.word	0x009d5000
    3fdc:	00275000 	.word	0x00275000
    3fe0:	0075f000 	.word	0x0075f000
    3fe4:	03afb000 	.word	0x03afb000
    3fe8:	013a9000 	.word	0x013a9000
    3fec:	0ebed000 	.word	0x0ebed000

00003ff0 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ff0:	4b08      	ldr	r3, [pc, #32]	; (4014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>)
    3ff2:	681a      	ldr	r2, [r3, #0]
{
    3ff4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    3ff6:	b152      	cbz	r2, 400e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ff8:	2000      	movs	r0, #0
    3ffa:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3ffc:	681b      	ldr	r3, [r3, #0]
    3ffe:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4000:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    4002:	4b05      	ldr	r3, [pc, #20]	; (4018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>)
    4004:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4008:	700b      	strb	r3, [r1, #0]
}
    400a:	b002      	add	sp, #8
    400c:	4770      	bx	lr
		return -1;
    400e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4012:	e7fa      	b.n	400a <CONFIG_HEAP_MEM_POOL_SIZE+0xa>
    4014:	40002108 	.word	0x40002108
    4018:	40002000 	.word	0x40002000

0000401c <uart_nrfx_poll_out>:
{
    401c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    401e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    4020:	f011 fa2c 	bl	1547c <k_is_in_isr>
    4024:	4d1b      	ldr	r5, [pc, #108]	; (4094 <uart_nrfx_poll_out+0x78>)
    4026:	b9c0      	cbnz	r0, 405a <uart_nrfx_poll_out+0x3e>
    4028:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    402a:	2701      	movs	r7, #1
    402c:	f3bf 8f5b 	dmb	ish
    4030:	e855 3f00 	ldrex	r3, [r5]
    4034:	2b00      	cmp	r3, #0
    4036:	d103      	bne.n	4040 <uart_nrfx_poll_out+0x24>
    4038:	e845 7200 	strex	r2, r7, [r5]
    403c:	2a00      	cmp	r2, #0
    403e:	d1f7      	bne.n	4030 <uart_nrfx_poll_out+0x14>
    4040:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    4044:	d00b      	beq.n	405e <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    4046:	2021      	movs	r0, #33	; 0x21
    4048:	2100      	movs	r1, #0
    404a:	3c01      	subs	r4, #1
    404c:	f001 f95a 	bl	5304 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4050:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4054:	d1ea      	bne.n	402c <uart_nrfx_poll_out+0x10>
}
    4056:	b003      	add	sp, #12
    4058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
    405a:	2301      	movs	r3, #1
    405c:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    405e:	4c0e      	ldr	r4, [pc, #56]	; (4098 <uart_nrfx_poll_out+0x7c>)
    4060:	2200      	movs	r2, #0
    4062:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4064:	6822      	ldr	r2, [r4, #0]
    4066:	9201      	str	r2, [sp, #4]
    (void)dummy;
    4068:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    406a:	4a0c      	ldr	r2, [pc, #48]	; (409c <uart_nrfx_poll_out+0x80>)
    406c:	2101      	movs	r1, #1
    406e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    4070:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    4074:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4078:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    407a:	b923      	cbnz	r3, 4086 <uart_nrfx_poll_out+0x6a>
    407c:	2001      	movs	r0, #1
    407e:	f011 f89c 	bl	151ba <nrfx_busy_wait>
    4082:	3e01      	subs	r6, #1
    4084:	d1f8      	bne.n	4078 <uart_nrfx_poll_out+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4086:	4b06      	ldr	r3, [pc, #24]	; (40a0 <uart_nrfx_poll_out+0x84>)
    4088:	2201      	movs	r2, #1
    408a:	601a      	str	r2, [r3, #0]
	*lock = 0;
    408c:	2300      	movs	r3, #0
    408e:	602b      	str	r3, [r5, #0]
    4090:	e7e1      	b.n	4056 <uart_nrfx_poll_out+0x3a>
    4092:	bf00      	nop
    4094:	2000c304 	.word	0x2000c304
    4098:	4000211c 	.word	0x4000211c
    409c:	40002008 	.word	0x40002008
    40a0:	4000200c 	.word	0x4000200c

000040a4 <uart_nrfx_init>:
    40a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    40a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
    40aa:	4c16      	ldr	r4, [pc, #88]	; (4104 <uart_nrfx_init+0x60>)
    40ac:	2240      	movs	r2, #64	; 0x40
    40ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    40b2:	2103      	movs	r1, #3
    40b4:	2200      	movs	r2, #0
    40b6:	2508      	movs	r5, #8
    40b8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    40bc:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    40c0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    40c4:	2506      	movs	r5, #6
    40c6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    40ca:	2520      	movs	r5, #32
    40cc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    40d0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    40d4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    40d8:	2305      	movs	r3, #5
    40da:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    40de:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    40e0:	68c1      	ldr	r1, [r0, #12]
    40e2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    40e6:	f7ff fec9 	bl	3e7c <uart_nrfx_configure>
	if (err) {
    40ea:	b948      	cbnz	r0, 4100 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    40ec:	2304      	movs	r3, #4
    40ee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40f2:	4b05      	ldr	r3, [pc, #20]	; (4108 <uart_nrfx_init+0x64>)
    40f4:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    40fa:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40fc:	2301      	movs	r3, #1
    40fe:	6023      	str	r3, [r4, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    4100:	b003      	add	sp, #12
    4102:	bd30      	pop	{r4, r5, pc}
    4104:	40002000 	.word	0x40002000
    4108:	40002108 	.word	0x40002108

0000410c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    410c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    410e:	794b      	ldrb	r3, [r1, #5]
    4110:	2b01      	cmp	r3, #1
    4112:	d029      	beq.n	4168 <uarte_nrfx_configure+0x5c>
    4114:	2b03      	cmp	r3, #3
    4116:	d124      	bne.n	4162 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4118:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    411a:	798b      	ldrb	r3, [r1, #6]
    411c:	2b03      	cmp	r3, #3
    411e:	d120      	bne.n	4162 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4120:	79cc      	ldrb	r4, [r1, #7]
    4122:	b124      	cbz	r4, 412e <uarte_nrfx_configure+0x22>
    4124:	2c01      	cmp	r4, #1
    4126:	d11c      	bne.n	4162 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    4128:	6843      	ldr	r3, [r0, #4]
    412a:	791b      	ldrb	r3, [r3, #4]
    412c:	b1cb      	cbz	r3, 4162 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    412e:	790a      	ldrb	r2, [r1, #4]
    4130:	b112      	cbz	r2, 4138 <uarte_nrfx_configure+0x2c>
    4132:	2a02      	cmp	r2, #2
    4134:	d115      	bne.n	4162 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4136:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4138:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    413a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    413c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4140:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4142:	d064      	beq.n	420e <uarte_nrfx_configure+0x102>
    4144:	d82d      	bhi.n	41a2 <uarte_nrfx_configure+0x96>
    4146:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    414a:	d063      	beq.n	4214 <uarte_nrfx_configure+0x108>
    414c:	d816      	bhi.n	417c <uarte_nrfx_configure+0x70>
    414e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4152:	d061      	beq.n	4218 <uarte_nrfx_configure+0x10c>
    4154:	d80a      	bhi.n	416c <uarte_nrfx_configure+0x60>
    4156:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    415a:	d060      	beq.n	421e <uarte_nrfx_configure+0x112>
    415c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4160:	d060      	beq.n	4224 <uarte_nrfx_configure+0x118>
    4162:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4166:	e051      	b.n	420c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    4168:	2600      	movs	r6, #0
    416a:	e7d6      	b.n	411a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    416c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4170:	d05b      	beq.n	422a <uarte_nrfx_configure+0x11e>
    4172:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4176:	d1f4      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4178:	4b36      	ldr	r3, [pc, #216]	; (4254 <uarte_nrfx_configure+0x148>)
    417a:	e03c      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    417c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4180:	d056      	beq.n	4230 <uarte_nrfx_configure+0x124>
    4182:	d807      	bhi.n	4194 <uarte_nrfx_configure+0x88>
    4184:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4188:	d054      	beq.n	4234 <uarte_nrfx_configure+0x128>
    418a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    418e:	d1e8      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4190:	4b31      	ldr	r3, [pc, #196]	; (4258 <uarte_nrfx_configure+0x14c>)
    4192:	e030      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    4194:	f647 2712 	movw	r7, #31250	; 0x7a12
    4198:	42bb      	cmp	r3, r7
    419a:	d1e2      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    419c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    41a0:	e029      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41a2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    41a6:	d047      	beq.n	4238 <uarte_nrfx_configure+0x12c>
    41a8:	d813      	bhi.n	41d2 <uarte_nrfx_configure+0xc6>
    41aa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    41ae:	d046      	beq.n	423e <uarte_nrfx_configure+0x132>
    41b0:	d809      	bhi.n	41c6 <uarte_nrfx_configure+0xba>
    41b2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    41b6:	42bb      	cmp	r3, r7
    41b8:	d043      	beq.n	4242 <uarte_nrfx_configure+0x136>
    41ba:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    41be:	d1d0      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    41c0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    41c4:	e017      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41c6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    41ca:	d1ca      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    41cc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    41d0:	e011      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41d2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    41d6:	d037      	beq.n	4248 <uarte_nrfx_configure+0x13c>
    41d8:	d808      	bhi.n	41ec <uarte_nrfx_configure+0xe0>
    41da:	4f20      	ldr	r7, [pc, #128]	; (425c <uarte_nrfx_configure+0x150>)
    41dc:	42bb      	cmp	r3, r7
    41de:	d036      	beq.n	424e <uarte_nrfx_configure+0x142>
    41e0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    41e4:	d1bd      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    41e6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    41ea:	e004      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41ec:	4f1c      	ldr	r7, [pc, #112]	; (4260 <uarte_nrfx_configure+0x154>)
    41ee:	42bb      	cmp	r3, r7
    41f0:	d1b7      	bne.n	4162 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    41f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    41f6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    41fa:	68c3      	ldr	r3, [r0, #12]
    41fc:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    41fe:	4334      	orrs	r4, r6
    4200:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4202:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4206:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    420a:	2000      	movs	r0, #0
}
    420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    420e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4212:	e7f0      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4214:	4b13      	ldr	r3, [pc, #76]	; (4264 <uarte_nrfx_configure+0x158>)
    4216:	e7ee      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4218:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    421c:	e7eb      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    421e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4222:	e7e8      	b.n	41f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    4224:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4228:	e7e5      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    422a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    422e:	e7e2      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4230:	4b0d      	ldr	r3, [pc, #52]	; (4268 <uarte_nrfx_configure+0x15c>)
    4232:	e7e0      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4234:	4b0d      	ldr	r3, [pc, #52]	; (426c <uarte_nrfx_configure+0x160>)
    4236:	e7de      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4238:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    423c:	e7db      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    423e:	4b0c      	ldr	r3, [pc, #48]	; (4270 <uarte_nrfx_configure+0x164>)
    4240:	e7d9      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4242:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4246:	e7d6      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4248:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    424c:	e7d3      	b.n	41f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    424e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4252:	e7d0      	b.n	41f6 <uarte_nrfx_configure+0xea>
    4254:	0013b000 	.word	0x0013b000
    4258:	004ea000 	.word	0x004ea000
    425c:	0003d090 	.word	0x0003d090
    4260:	000f4240 	.word	0x000f4240
    4264:	00275000 	.word	0x00275000
    4268:	0075c000 	.word	0x0075c000
    426c:	003af000 	.word	0x003af000
    4270:	013a9000 	.word	0x013a9000

00004274 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    4274:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return config->uarte_regs;
    4276:	6842      	ldr	r2, [r0, #4]
    p_reg->OUTSET = set_mask;
    4278:	4b13      	ldr	r3, [pc, #76]	; (42c8 <uarte_1_init+0x54>)
    427a:	6814      	ldr	r4, [r2, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    427c:	68c5      	ldr	r5, [r0, #12]
    427e:	2204      	movs	r2, #4
    4280:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4284:	2203      	movs	r2, #3
    4286:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
    428a:	2200      	movs	r2, #0
    428c:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
    4290:	2322      	movs	r3, #34	; 0x22
    4292:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4296:	2321      	movs	r3, #33	; 0x21
    4298:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    429c:	4629      	mov	r1, r5
    429e:	f7ff ff35 	bl	410c <uarte_nrfx_configure>
	if (err) {
    42a2:	b978      	cbnz	r0, 42c4 <uarte_1_init+0x50>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    42a4:	2308      	movs	r3, #8
    42a6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42aa:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    42ae:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    42b2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    42b4:	9b01      	ldr	r3, [sp, #4]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    42b6:	350c      	adds	r5, #12
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    42b8:	2301      	movs	r3, #1
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    42ba:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    42be:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42c2:	6023      	str	r3, [r4, #0]
UART_NRF_UARTE_DEVICE(1);
    42c4:	b003      	add	sp, #12
    42c6:	bd30      	pop	{r4, r5, pc}
    42c8:	50000300 	.word	0x50000300

000042cc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    42cc:	b508      	push	{r3, lr}
	z_impl_log_panic();
    42ce:	f7fd ff95 	bl	21fc <z_impl_log_panic>
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <k_sys_fatal_error_handler+0x20>)
    42d4:	4906      	ldr	r1, [pc, #24]	; (42f0 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    42d6:	4807      	ldr	r0, [pc, #28]	; (42f4 <k_sys_fatal_error_handler+0x28>)
    42d8:	1ac9      	subs	r1, r1, r3
    42da:	08c9      	lsrs	r1, r1, #3
    42dc:	0189      	lsls	r1, r1, #6
    42de:	f041 0101 	orr.w	r1, r1, #1
    42e2:	f010 f9c3 	bl	1466c <log_0>
	sys_arch_reboot(0);
    42e6:	2000      	movs	r0, #0
    42e8:	f7ff fab2 	bl	3850 <sys_arch_reboot>

	CODE_UNREACHABLE;
    42ec:	0001eba4 	.word	0x0001eba4
    42f0:	0001ebac 	.word	0x0001ebac
    42f4:	00029a16 	.word	0x00029a16

000042f8 <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    42f8:	4b0a      	ldr	r3, [pc, #40]	; (4324 <nrf52_errata_136+0x2c>)
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    42fe:	bf05      	ittet	eq
    4300:	4b09      	ldreq	r3, [pc, #36]	; (4328 <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4302:	4a0a      	ldreq	r2, [pc, #40]	; (432c <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    4304:	4a0a      	ldrne	r2, [pc, #40]	; (4330 <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4306:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4308:	bf0a      	itet	eq
    430a:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    430c:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    430e:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4312:	2b08      	cmp	r3, #8
    4314:	d104      	bne.n	4320 <nrf52_errata_136+0x28>
            {
                switch(var2)
    4316:	2803      	cmp	r0, #3
    4318:	bf8c      	ite	hi
    431a:	2000      	movhi	r0, #0
    431c:	2001      	movls	r0, #1
    431e:	4770      	bx	lr
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
    4320:	2000      	movs	r0, #0
    #endif
}
    4322:	4770      	bx	lr
    4324:	10000130 	.word	0x10000130
    4328:	f0000fe0 	.word	0xf0000fe0
    432c:	f0000fe8 	.word	0xf0000fe8
    4330:	10000134 	.word	0x10000134

00004334 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4334:	4b06      	ldr	r3, [pc, #24]	; (4350 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	2b08      	cmp	r3, #8
    433a:	d106      	bne.n	434a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    433c:	4b05      	ldr	r3, [pc, #20]	; (4354 <nrf52_errata_103+0x20>)
    433e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4340:	2b03      	cmp	r3, #3
    4342:	d802      	bhi.n	434a <nrf52_errata_103+0x16>
    4344:	4a04      	ldr	r2, [pc, #16]	; (4358 <nrf52_errata_103+0x24>)
    4346:	5cd0      	ldrb	r0, [r2, r3]
    4348:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    434a:	2000      	movs	r0, #0
    #endif
}
    434c:	4770      	bx	lr
    434e:	bf00      	nop
    4350:	10000130 	.word	0x10000130
    4354:	10000134 	.word	0x10000134
    4358:	00029a3e 	.word	0x00029a3e

0000435c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    435c:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    435e:	f7ff ffcb 	bl	42f8 <nrf52_errata_136>
    4362:	b140      	cbz	r0, 4376 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
    4364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4368:	2200      	movs	r2, #0
    436a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    436e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    4372:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    4376:	f7ff ffbf 	bl	42f8 <nrf52_errata_136>
    437a:	2800      	cmp	r0, #0
    437c:	d046      	beq.n	440c <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4382:	4b5e      	ldr	r3, [pc, #376]	; (44fc <SystemInit+0x1a0>)
    4384:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4388:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    438c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4390:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4394:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4398:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    439c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    43a0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    43a4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    43a8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    43ac:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    43b0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    43b4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    43b8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    43bc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    43c0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    43c4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    43c8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    43cc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    43d0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    43d4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    43d8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    43dc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    43e0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    43e4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    43e8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    43ec:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    43f0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    43f4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    43f8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    43fc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4400:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4404:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4408:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
    440c:	f7ff ff92 	bl	4334 <nrf52_errata_103>
    4410:	b110      	cbz	r0, 4418 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4412:	4b3b      	ldr	r3, [pc, #236]	; (4500 <SystemInit+0x1a4>)
    4414:	4a3b      	ldr	r2, [pc, #236]	; (4504 <SystemInit+0x1a8>)
    4416:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
    4418:	f7ff ff8c 	bl	4334 <nrf52_errata_103>
    441c:	b118      	cbz	r0, 4426 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    441e:	4b3a      	ldr	r3, [pc, #232]	; (4508 <SystemInit+0x1ac>)
    4420:	22fb      	movs	r2, #251	; 0xfb
    4422:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
    4426:	f7ff ff85 	bl	4334 <nrf52_errata_103>
    442a:	b148      	cbz	r0, 4440 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
    442c:	4937      	ldr	r1, [pc, #220]	; (450c <SystemInit+0x1b0>)
    442e:	4b38      	ldr	r3, [pc, #224]	; (4510 <SystemInit+0x1b4>)
    4430:	680a      	ldr	r2, [r1, #0]
    4432:	681b      	ldr	r3, [r3, #0]
    4434:	f022 020f 	bic.w	r2, r2, #15
    4438:	f003 030f 	and.w	r3, r3, #15
    443c:	4313      	orrs	r3, r2
    443e:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
    4440:	f7ff ff78 	bl	4334 <nrf52_errata_103>
    4444:	b118      	cbz	r0, 444e <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4446:	4b33      	ldr	r3, [pc, #204]	; (4514 <SystemInit+0x1b8>)
    4448:	f44f 7200 	mov.w	r2, #512	; 0x200
    444c:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    444e:	f7ff ff53 	bl	42f8 <nrf52_errata_136>
    4452:	b148      	cbz	r0, 4468 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4458:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    445c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    445e:	bf44      	itt	mi
    4460:	f06f 0201 	mvnmi.w	r2, #1
    4464:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4468:	4a2b      	ldr	r2, [pc, #172]	; (4518 <SystemInit+0x1bc>)
    446a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    446e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    4472:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    4476:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    447a:	f3bf 8f6f 	isb	sy

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    447e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4482:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4486:	2a00      	cmp	r2, #0
    4488:	db03      	blt.n	4492 <SystemInit+0x136>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    448a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    448e:	2b00      	cmp	r3, #0
    4490:	da2f      	bge.n	44f2 <SystemInit+0x196>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    4492:	4b22      	ldr	r3, [pc, #136]	; (451c <SystemInit+0x1c0>)
    4494:	2201      	movs	r2, #1
    4496:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    449a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    449e:	2a00      	cmp	r2, #0
    44a0:	d0fb      	beq.n	449a <SystemInit+0x13e>
            NRF_UICR->PSELRESET[0] = 18;
    44a2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    44a6:	2112      	movs	r1, #18
    44a8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44ac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    44b0:	2a00      	cmp	r2, #0
    44b2:	d0fb      	beq.n	44ac <SystemInit+0x150>
            NRF_UICR->PSELRESET[1] = 18;
    44b4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    44b8:	2212      	movs	r2, #18
    44ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44be:	4b17      	ldr	r3, [pc, #92]	; (451c <SystemInit+0x1c0>)
    44c0:	461a      	mov	r2, r3
    44c2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    44c6:	2900      	cmp	r1, #0
    44c8:	d0fb      	beq.n	44c2 <SystemInit+0x166>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    44ca:	2100      	movs	r1, #0
    44cc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44d0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    44d4:	2b00      	cmp	r3, #0
    44d6:	d0fb      	beq.n	44d0 <SystemInit+0x174>
  __ASM volatile ("dsb 0xF":::"memory");
    44d8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    44dc:	490e      	ldr	r1, [pc, #56]	; (4518 <SystemInit+0x1bc>)
    44de:	4b10      	ldr	r3, [pc, #64]	; (4520 <SystemInit+0x1c4>)
    44e0:	68ca      	ldr	r2, [r1, #12]
    44e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    44e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    44e8:	60cb      	str	r3, [r1, #12]
    44ea:	f3bf 8f4f 	dsb	sy
    __NOP();
    44ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    44f0:	e7fd      	b.n	44ee <SystemInit+0x192>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    44f2:	4b0c      	ldr	r3, [pc, #48]	; (4524 <SystemInit+0x1c8>)
    44f4:	4a0c      	ldr	r2, [pc, #48]	; (4528 <SystemInit+0x1cc>)
    44f6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    44f8:	bd08      	pop	{r3, pc}
    44fa:	bf00      	nop
    44fc:	4000c000 	.word	0x4000c000
    4500:	4000568c 	.word	0x4000568c
    4504:	00038148 	.word	0x00038148
    4508:	4000f000 	.word	0x4000f000
    450c:	40000ee4 	.word	0x40000ee4
    4510:	10000258 	.word	0x10000258
    4514:	40029640 	.word	0x40029640
    4518:	e000ed00 	.word	0xe000ed00
    451c:	4001e000 	.word	0x4001e000
    4520:	05fa0004 	.word	0x05fa0004
    4524:	2000005c 	.word	0x2000005c
    4528:	03d09000 	.word	0x03d09000

0000452c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    452c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4530:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4532:	4d4c      	ldr	r5, [pc, #304]	; (4664 <nrfx_pwm_init+0x138>)
{
    4534:	4604      	mov	r4, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4536:	200c      	movs	r0, #12
    4538:	4370      	muls	r0, r6
    453a:	182f      	adds	r7, r5, r0
{
    453c:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    453e:	f897 c008 	ldrb.w	ip, [r7, #8]
    4542:	f1bc 0f00 	cmp.w	ip, #0
    4546:	f040 808a 	bne.w	465e <nrfx_pwm_init+0x132>
        return NRF_P1;
    454a:	f8df e124 	ldr.w	lr, [pc, #292]	; 4670 <nrfx_pwm_init+0x144>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    454e:	502a      	str	r2, [r5, r0]
    p_cb->p_context = p_context;
    4550:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4552:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4556:	4668      	mov	r0, sp
    4558:	f101 0a03 	add.w	sl, r1, #3
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    455c:	f04f 0b03 	mov.w	fp, #3
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4560:	f04f 0801 	mov.w	r8, #1
        uint8_t output_pin = p_config->output_pins[i];
    4564:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    4568:	2aff      	cmp	r2, #255	; 0xff
    456a:	d074      	beq.n	4656 <nrfx_pwm_init+0x12a>
            if (!p_config->skip_gpio_cfg)
    456c:	7b0f      	ldrb	r7, [r1, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    456e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    4572:	6003      	str	r3, [r0, #0]
            if (!p_config->skip_gpio_cfg)
    4574:	b9c7      	cbnz	r7, 45a8 <nrfx_pwm_init+0x7c>
                if (inverted)
    4576:	0617      	lsls	r7, r2, #24
    4578:	d560      	bpl.n	463c <nrfx_pwm_init+0x110>
    if (*p_pin < P0_PIN_NUM)
    457a:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    457c:	bf87      	ittee	hi
    457e:	f002 071f 	andhi.w	r7, r2, #31
        return NRF_P1;
    4582:	46f1      	movhi	r9, lr
    4584:	461f      	movls	r7, r3
        return NRF_P0;
    4586:	f04f 49a0 	movls.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    458a:	fa08 f707 	lsl.w	r7, r8, r7
    p_reg->OUTSET = set_mask;
    458e:	f8c9 7508 	str.w	r7, [r9, #1288]	; 0x508
    if (*p_pin < P0_PIN_NUM)
    4592:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    4594:	bf8a      	itet	hi
    4596:	f002 031f 	andhi.w	r3, r2, #31
        return NRF_P0;
    459a:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
        return NRF_P1;
    459e:	4672      	movhi	r2, lr
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    45a0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45a4:	f842 b023 	str.w	fp, [r2, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    45a8:	45d4      	cmp	ip, sl
    45aa:	f100 0004 	add.w	r0, r0, #4
    45ae:	d1d9      	bne.n	4564 <nrfx_pwm_init+0x38>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    45b0:	6820      	ldr	r0, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    45b2:	9b00      	ldr	r3, [sp, #0]
    45b4:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    45b8:	9b01      	ldr	r3, [sp, #4]
    45ba:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    45be:	9b02      	ldr	r3, [sp, #8]
    45c0:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    45c4:	9b03      	ldr	r3, [sp, #12]
    45c6:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    45ca:	2301      	movs	r3, #1
    45cc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    45d0:	798a      	ldrb	r2, [r1, #6]
    45d2:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    45d4:	794f      	ldrb	r7, [r1, #5]
    45d6:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    45da:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    45de:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    45e2:	894b      	ldrh	r3, [r1, #10]
    45e4:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    45e8:	2300      	movs	r3, #0
    45ea:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    45ee:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    45f2:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    45f6:	f010 fde2 	bl	151be <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    45fa:	6820      	ldr	r0, [r4, #0]
    45fc:	f44f 7188 	mov.w	r1, #272	; 0x110
    4600:	f010 fddd 	bl	151be <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    4604:	6820      	ldr	r0, [r4, #0]
    4606:	f44f 718a 	mov.w	r1, #276	; 0x114
    460a:	f010 fdd8 	bl	151be <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    460e:	6820      	ldr	r0, [r4, #0]
    4610:	f44f 7182 	mov.w	r1, #260	; 0x104
    4614:	f010 fdd3 	bl	151be <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    4618:	230c      	movs	r3, #12
    461a:	4373      	muls	r3, r6
    461c:	58eb      	ldr	r3, [r5, r3]
    461e:	b123      	cbz	r3, 462a <nrfx_pwm_init+0xfe>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4620:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4622:	f340 3007 	sbfx	r0, r0, #12, #8
    4626:	f7fe fc65 	bl	2ef4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    462a:	230c      	movs	r3, #12
    462c:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4630:	480d      	ldr	r0, [pc, #52]	; (4668 <nrfx_pwm_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4632:	2301      	movs	r3, #1
    4634:	722b      	strb	r3, [r5, #8]
}
    4636:	b005      	add	sp, #20
    4638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*p_pin < P0_PIN_NUM)
    463c:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    463e:	bf87      	ittee	hi
    4640:	f002 071f 	andhi.w	r7, r2, #31
        return NRF_P1;
    4644:	46f1      	movhi	r9, lr
    4646:	461f      	movls	r7, r3
        return NRF_P0;
    4648:	f04f 49a0 	movls.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    464c:	fa08 f707 	lsl.w	r7, r8, r7
    p_reg->OUTCLR = clr_mask;
    4650:	f8c9 750c 	str.w	r7, [r9, #1292]	; 0x50c
    4654:	e79d      	b.n	4592 <nrfx_pwm_init+0x66>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    465a:	6003      	str	r3, [r0, #0]
    465c:	e7a4      	b.n	45a8 <nrfx_pwm_init+0x7c>
        return err_code;
    465e:	4803      	ldr	r0, [pc, #12]	; (466c <nrfx_pwm_init+0x140>)
    4660:	e7e9      	b.n	4636 <nrfx_pwm_init+0x10a>
    4662:	bf00      	nop
    4664:	2000c308 	.word	0x2000c308
    4668:	0bad0000 	.word	0x0bad0000
    466c:	0bad0005 	.word	0x0bad0005
    4670:	50000300 	.word	0x50000300

00004674 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4674:	b5f0      	push	{r4, r5, r6, r7, lr}
    4676:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4678:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    467a:	6804      	ldr	r4, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    467c:	f8d6 e000 	ldr.w	lr, [r6]
    p_reg->SEQ[seq_id].CNT = length;
    4680:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    4684:	68b7      	ldr	r7, [r6, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    4686:	f8c4 e520 	str.w	lr, [r4, #1312]	; 0x520
{
    468a:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    468c:	4b18      	ldr	r3, [pc, #96]	; (46f0 <nrfx_pwm_simple_playback+0x7c>)
    p_reg->SEQ[seq_id].CNT = length;
    468e:	f8c4 c524 	str.w	ip, [r4, #1316]	; 0x524
    4692:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4696:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    469a:	68f3      	ldr	r3, [r6, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    469c:	f8c4 7528 	str.w	r7, [r4, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    46a0:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    46a4:	f8c4 e540 	str.w	lr, [r4, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    46a8:	f8c4 c544 	str.w	ip, [r4, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    46ac:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    46b0:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    46b4:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    46b8:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    46bc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    46c0:	07ea      	lsls	r2, r5, #31
    46c2:	d412      	bmi.n	46ea <nrfx_pwm_simple_playback+0x76>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    46c4:	f015 0202 	ands.w	r2, r5, #2
    46c8:	d003      	beq.n	46d2 <nrfx_pwm_simple_playback+0x5e>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    46ca:	2b00      	cmp	r3, #0
    46cc:	bf14      	ite	ne
    46ce:	2208      	movne	r2, #8
    46d0:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    46d2:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    46d4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    46d8:	bf18      	it	ne
    46da:	230c      	movne	r3, #12
    46dc:	b2ea      	uxtb	r2, r5
    46de:	bf08      	it	eq
    46e0:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    46e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return start_playback(p_instance, p_cb, flags,
    46e6:	f010 bd72 	b.w	151ce <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    46ea:	2210      	movs	r2, #16
    46ec:	e7f1      	b.n	46d2 <nrfx_pwm_simple_playback+0x5e>
    46ee:	bf00      	nop
    46f0:	2000c308 	.word	0x2000c308

000046f4 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    46f4:	4b08      	ldr	r3, [pc, #32]	; (4718 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    46f6:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    46f8:	210c      	movs	r1, #12
    46fa:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    46fe:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4700:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4702:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    4706:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4708:	b919      	cbnz	r1, 4712 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    470a:	1e98      	subs	r0, r3, #2
    470c:	bf18      	it	ne
    470e:	2001      	movne	r0, #1
    4710:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4712:	2001      	movs	r0, #1
    4714:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4716:	4770      	bx	lr
    4718:	2000c308 	.word	0x2000c308

0000471c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    471e:	4b09      	ldr	r3, [pc, #36]	; (4744 <z_sys_init_run_level+0x28>)
    4720:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4724:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    4726:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4728:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    472c:	42a6      	cmp	r6, r4
    472e:	d800      	bhi.n	4732 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    4730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    4732:	e9d4 3500 	ldrd	r3, r5, [r4]
    4736:	4628      	mov	r0, r5
    4738:	4798      	blx	r3
		if (retval != 0) {
    473a:	b108      	cbz	r0, 4740 <z_sys_init_run_level+0x24>
			if (dev) {
    473c:	b105      	cbz	r5, 4740 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    473e:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4740:	3408      	adds	r4, #8
    4742:	e7f3      	b.n	472c <z_sys_init_run_level+0x10>
    4744:	00028a7c 	.word	0x00028a7c

00004748 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    4748:	4b0f      	ldr	r3, [pc, #60]	; (4788 <z_impl_device_get_binding+0x40>)
{
    474a:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    474c:	4c0f      	ldr	r4, [pc, #60]	; (478c <z_impl_device_get_binding+0x44>)
{
    474e:	4605      	mov	r5, r0
    4750:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    4752:	429c      	cmp	r4, r3
    4754:	d104      	bne.n	4760 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    4756:	4c0d      	ldr	r4, [pc, #52]	; (478c <z_impl_device_get_binding+0x44>)
    4758:	42b4      	cmp	r4, r6
    475a:	d108      	bne.n	476e <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    475c:	2400      	movs	r4, #0
    475e:	e010      	b.n	4782 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    4760:	68a2      	ldr	r2, [r4, #8]
    4762:	b112      	cbz	r2, 476a <z_impl_device_get_binding+0x22>
    4764:	6822      	ldr	r2, [r4, #0]
    4766:	42aa      	cmp	r2, r5
    4768:	d00b      	beq.n	4782 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    476a:	3410      	adds	r4, #16
    476c:	e7f1      	b.n	4752 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    476e:	68a3      	ldr	r3, [r4, #8]
    4770:	b90b      	cbnz	r3, 4776 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4772:	3410      	adds	r4, #16
    4774:	e7f0      	b.n	4758 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    4776:	6821      	ldr	r1, [r4, #0]
    4778:	4628      	mov	r0, r5
    477a:	f7fc fe35 	bl	13e8 <strcmp>
		if ((dev->driver_api != NULL) &&
    477e:	2800      	cmp	r0, #0
    4780:	d1f7      	bne.n	4772 <z_impl_device_get_binding+0x2a>
}
    4782:	4620      	mov	r0, r4
    4784:	bd70      	pop	{r4, r5, r6, pc}
    4786:	bf00      	nop
    4788:	20000810 	.word	0x20000810
    478c:	20000790 	.word	0x20000790

00004790 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    4790:	4b01      	ldr	r3, [pc, #4]	; (4798 <z_impl_z_errno+0x8>)
    4792:	6898      	ldr	r0, [r3, #8]
}
    4794:	305c      	adds	r0, #92	; 0x5c
    4796:	4770      	bx	lr
    4798:	2000c3fc 	.word	0x2000c3fc

0000479c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    479c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    47a0:	4605      	mov	r5, r0
    47a2:	460f      	mov	r7, r1
	__asm__ volatile(
    47a4:	f04f 0320 	mov.w	r3, #32
    47a8:	f3ef 8811 	mrs	r8, BASEPRI
    47ac:	f383 8811 	msr	BASEPRI, r3
    47b0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    47b4:	f000 fdc6 	bl	5344 <z_impl_k_current_get>
    47b8:	4c21      	ldr	r4, [pc, #132]	; (4840 <z_fatal_error+0xa4>)
    47ba:	4b22      	ldr	r3, [pc, #136]	; (4844 <z_fatal_error+0xa8>)
    47bc:	1ae4      	subs	r4, r4, r3
    47be:	2d04      	cmp	r5, #4
    47c0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    47c4:	bf96      	itet	ls
    47c6:	4a20      	ldrls	r2, [pc, #128]	; (4848 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    47c8:	4a20      	ldrhi	r2, [pc, #128]	; (484c <z_fatal_error+0xb0>)
    47ca:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    47ce:	01a4      	lsls	r4, r4, #6
    47d0:	f044 0301 	orr.w	r3, r4, #1
    47d4:	4606      	mov	r6, r0
    47d6:	f8ad 3000 	strh.w	r3, [sp]
    47da:	481d      	ldr	r0, [pc, #116]	; (4850 <z_fatal_error+0xb4>)
    47dc:	2300      	movs	r3, #0
    47de:	4629      	mov	r1, r5
    47e0:	f00f ff83 	bl	146ea <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    47e4:	b147      	cbz	r7, 47f8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    47e6:	69fb      	ldr	r3, [r7, #28]
    47e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    47ec:	b123      	cbz	r3, 47f8 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    47ee:	4819      	ldr	r0, [pc, #100]	; (4854 <z_fatal_error+0xb8>)
    47f0:	f044 0101 	orr.w	r1, r4, #1
    47f4:	f00f ff3a 	bl	1466c <log_0>
	const char *thread_name = k_thread_name_get(thread);
    47f8:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    47fa:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
    47fe:	f010 fe48 	bl	15492 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    4802:	b1d0      	cbz	r0, 483a <z_fatal_error+0x9e>
    4804:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    4806:	4b14      	ldr	r3, [pc, #80]	; (4858 <z_fatal_error+0xbc>)
    4808:	2a00      	cmp	r2, #0
    480a:	bf08      	it	eq
    480c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    480e:	f7fd fb73 	bl	1ef8 <log_strdup>
    4812:	4623      	mov	r3, r4
    4814:	4602      	mov	r2, r0
    4816:	4631      	mov	r1, r6
    4818:	4810      	ldr	r0, [pc, #64]	; (485c <z_fatal_error+0xc0>)
    481a:	f00f ff4d 	bl	146b8 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    481e:	4639      	mov	r1, r7
    4820:	4628      	mov	r0, r5
    4822:	f7ff fd53 	bl	42cc <k_sys_fatal_error_handler>
	__asm__ volatile(
    4826:	f388 8811 	msr	BASEPRI, r8
    482a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    482e:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4830:	b002      	add	sp, #8
    4832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4836:	f7fe beab 	b.w	3590 <z_impl_k_thread_abort>
		thread_name = "unknown";
    483a:	4807      	ldr	r0, [pc, #28]	; (4858 <z_fatal_error+0xbc>)
    483c:	e7e7      	b.n	480e <z_fatal_error+0x72>
    483e:	bf00      	nop
    4840:	0001ebc4 	.word	0x0001ebc4
    4844:	0001eba4 	.word	0x0001eba4
    4848:	00028a94 	.word	0x00028a94
    484c:	00029a42 	.word	0x00029a42
    4850:	00029a58 	.word	0x00029a58
    4854:	00029a80 	.word	0x00029a80
    4858:	00029a50 	.word	0x00029a50
    485c:	00029aa1 	.word	0x00029aa1

00004860 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    4860:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    4862:	4d0b      	ldr	r5, [pc, #44]	; (4890 <idle+0x30>)
	__asm__ volatile(
    4864:	f04f 0220 	mov.w	r2, #32
    4868:	f3ef 8311 	mrs	r3, BASEPRI
    486c:	f382 8811 	msr	BASEPRI, r2
    4870:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    4874:	f010 fe25 	bl	154c2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    4878:	2101      	movs	r1, #1
    487a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    487c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    487e:	bfd8      	it	le
    4880:	4608      	movle	r0, r1
    4882:	f010 fe2e 	bl	154e2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    4886:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4888:	f7fe fb9a 	bl	2fc0 <arch_cpu_idle>
}
    488c:	e7ea      	b.n	4864 <idle+0x4>
    488e:	bf00      	nop
    4890:	2000c3fc 	.word	0x2000c3fc

00004894 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4894:	4802      	ldr	r0, [pc, #8]	; (48a0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    4896:	4a03      	ldr	r2, [pc, #12]	; (48a4 <z_bss_zero+0x10>)
    4898:	2100      	movs	r1, #0
    489a:	1a12      	subs	r2, r2, r0
    489c:	f019 bebc 	b.w	1e618 <memset>
    48a0:	200008c0 	.word	0x200008c0
    48a4:	200110fc 	.word	0x200110fc

000048a8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    48a8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    48aa:	4806      	ldr	r0, [pc, #24]	; (48c4 <z_data_copy+0x1c>)
    48ac:	4a06      	ldr	r2, [pc, #24]	; (48c8 <z_data_copy+0x20>)
    48ae:	4907      	ldr	r1, [pc, #28]	; (48cc <z_data_copy+0x24>)
    48b0:	1a12      	subs	r2, r2, r0
    48b2:	f019 fea3 	bl	1e5fc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    48b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48ba:	4a05      	ldr	r2, [pc, #20]	; (48d0 <z_data_copy+0x28>)
    48bc:	4905      	ldr	r1, [pc, #20]	; (48d4 <z_data_copy+0x2c>)
    48be:	4806      	ldr	r0, [pc, #24]	; (48d8 <z_data_copy+0x30>)
    48c0:	f019 be9c 	b.w	1e5fc <memcpy>
    48c4:	20000000 	.word	0x20000000
    48c8:	200008c0 	.word	0x200008c0
    48cc:	0002c938 	.word	0x0002c938
    48d0:	00000000 	.word	0x00000000
    48d4:	0002c938 	.word	0x0002c938
    48d8:	20000000 	.word	0x20000000

000048dc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    48dc:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    48de:	4b0e      	ldr	r3, [pc, #56]	; (4918 <bg_thread_main+0x3c>)
    48e0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    48e2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    48e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    48e6:	f7ff ff19 	bl	471c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    48ea:	4a0c      	ldr	r2, [pc, #48]	; (491c <bg_thread_main+0x40>)
    48ec:	490c      	ldr	r1, [pc, #48]	; (4920 <bg_thread_main+0x44>)
    48ee:	480d      	ldr	r0, [pc, #52]	; (4924 <bg_thread_main+0x48>)
    48f0:	f00f fdb6 	bl	14460 <printk>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
    48f4:	f7fd ffb8 	bl	2868 <__do_global_ctors_aux>
	__do_init_array_aux();
    48f8:	f7fd ffa8 	bl	284c <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    48fc:	2003      	movs	r0, #3
    48fe:	f7ff ff0d 	bl	471c <z_sys_init_run_level>

	z_init_static_threads();
    4902:	f000 fdc1 	bl	5488 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4906:	f00f fd73 	bl	143f0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    490a:	4a07      	ldr	r2, [pc, #28]	; (4928 <bg_thread_main+0x4c>)
    490c:	7b13      	ldrb	r3, [r2, #12]
    490e:	f023 0301 	bic.w	r3, r3, #1
    4912:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4914:	bd08      	pop	{r3, pc}
    4916:	bf00      	nop
    4918:	200110e7 	.word	0x200110e7
    491c:	00029427 	.word	0x00029427
    4920:	00029b03 	.word	0x00029b03
    4924:	00029b13 	.word	0x00029b13
    4928:	2000c388 	.word	0x2000c388

0000492c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    492c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    4930:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4932:	f7fd fa29 	bl	1d88 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    4936:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4a2c <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    493a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    493e:	4d34      	ldr	r5, [pc, #208]	; (4a10 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    4940:	4e34      	ldr	r6, [pc, #208]	; (4a14 <z_cstart+0xe8>)
    4942:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
    4944:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4a30 <z_cstart+0x104>
    4948:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 4a34 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
    494c:	4f32      	ldr	r7, [pc, #200]	; (4a18 <z_cstart+0xec>)
    494e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4952:	2400      	movs	r4, #0
    4954:	616b      	str	r3, [r5, #20]
    4956:	23e0      	movs	r3, #224	; 0xe0
    4958:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    495c:	77ec      	strb	r4, [r5, #31]
    495e:	762c      	strb	r4, [r5, #24]
    4960:	766c      	strb	r4, [r5, #25]
    4962:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4966:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    496a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    496c:	f7fe fdee 	bl	354c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4970:	f7fe fb20 	bl	2fb4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4978:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    497a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    497c:	4d27      	ldr	r5, [pc, #156]	; (4a1c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    497e:	f240 1301 	movw	r3, #257	; 0x101
    4982:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    4986:	ab07      	add	r3, sp, #28
    4988:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    498a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    498c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    4990:	f7ff fec4 	bl	471c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4994:	2001      	movs	r0, #1
    4996:	f7ff fec1 	bl	471c <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    499a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    499e:	f000 fc57 	bl	5250 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    49a2:	4b1f      	ldr	r3, [pc, #124]	; (4a20 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    49a4:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    49a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    49aa:	4641      	mov	r1, r8
    49ac:	9305      	str	r3, [sp, #20]
    49ae:	4630      	mov	r0, r6
    49b0:	4653      	mov	r3, sl
    49b2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    49b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    49ba:	9400      	str	r4, [sp, #0]
    49bc:	f000 fd12 	bl	53e4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    49c0:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    49c2:	4630      	mov	r0, r6
    49c4:	f023 0304 	bic.w	r3, r3, #4
    49c8:	7373      	strb	r3, [r6, #13]
    49ca:	f010 fcb4 	bl	15336 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    49ce:	230f      	movs	r3, #15
    49d0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    49d4:	4913      	ldr	r1, [pc, #76]	; (4a24 <z_cstart+0xf8>)
    49d6:	4b14      	ldr	r3, [pc, #80]	; (4a28 <z_cstart+0xfc>)
    49d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    49dc:	4638      	mov	r0, r7
    49de:	e9cd b404 	strd	fp, r4, [sp, #16]
    49e2:	e9cd 4400 	strd	r4, r4, [sp]
    49e6:	f000 fcfd 	bl	53e4 <z_setup_new_thread>
    49ea:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    49ec:	60ef      	str	r7, [r5, #12]
    49ee:	f023 0304 	bic.w	r3, r3, #4
    49f2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    49f4:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    49f8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    49fc:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    49fe:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    4a02:	4653      	mov	r3, sl
    4a04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    4a08:	4641      	mov	r1, r8
    4a0a:	4630      	mov	r0, r6
    4a0c:	f7fe fab4 	bl	2f78 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4a10:	e000ed00 	.word	0xe000ed00
    4a14:	2000c388 	.word	0x2000c388
    4a18:	2000c314 	.word	0x2000c314
    4a1c:	2000c3fc 	.word	0x2000c3fc
    4a20:	00029b3a 	.word	0x00029b3a
    4a24:	20013400 	.word	0x20013400
    4a28:	00004861 	.word	0x00004861
    4a2c:	20013d40 	.word	0x20013d40
    4a30:	000048dd 	.word	0x000048dd
    4a34:	20011400 	.word	0x20011400

00004a38 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    4a38:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a3a:	4b0e      	ldr	r3, [pc, #56]	; (4a74 <init_mem_slab_module+0x3c>)
    4a3c:	4c0e      	ldr	r4, [pc, #56]	; (4a78 <init_mem_slab_module+0x40>)
    4a3e:	42a3      	cmp	r3, r4
    4a40:	d301      	bcc.n	4a46 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    4a42:	2000      	movs	r0, #0
	return rc;
}
    4a44:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4a46:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4a4a:	ea41 0200 	orr.w	r2, r1, r0
    4a4e:	f012 0203 	ands.w	r2, r2, #3
    4a52:	d10b      	bne.n	4a6c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4a54:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4a56:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a58:	42aa      	cmp	r2, r5
    4a5a:	d101      	bne.n	4a60 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a5c:	331c      	adds	r3, #28
    4a5e:	e7ee      	b.n	4a3e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4a60:	695e      	ldr	r6, [r3, #20]
    4a62:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a64:	3201      	adds	r2, #1
		slab->free_list = p;
    4a66:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4a68:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4a6a:	e7f5      	b.n	4a58 <init_mem_slab_module+0x20>
		return -EINVAL;
    4a6c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4a70:	e7e8      	b.n	4a44 <init_mem_slab_module+0xc>
    4a72:	bf00      	nop
    4a74:	20000810 	.word	0x20000810
    4a78:	20000810 	.word	0x20000810

00004a7c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4a7c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4a7e:	460c      	mov	r4, r1
    4a80:	4616      	mov	r6, r2
    4a82:	461f      	mov	r7, r3
    4a84:	f04f 0320 	mov.w	r3, #32
    4a88:	f3ef 8111 	mrs	r1, BASEPRI
    4a8c:	f383 8811 	msr	BASEPRI, r3
    4a90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    4a94:	6943      	ldr	r3, [r0, #20]
    4a96:	b15b      	cbz	r3, 4ab0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    4a98:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4a9e:	6983      	ldr	r3, [r0, #24]
    4aa0:	3301      	adds	r3, #1
    4aa2:	6183      	str	r3, [r0, #24]
		result = 0;
    4aa4:	2000      	movs	r0, #0
	__asm__ volatile(
    4aa6:	f381 8811 	msr	BASEPRI, r1
    4aaa:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    4aae:	e011      	b.n	4ad4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4ab0:	ea56 0207 	orrs.w	r2, r6, r7
    4ab4:	d103      	bne.n	4abe <k_mem_slab_alloc+0x42>
		*mem = NULL;
    4ab6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4ab8:	f06f 000b 	mvn.w	r0, #11
    4abc:	e7f3      	b.n	4aa6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    4abe:	4602      	mov	r2, r0
    4ac0:	e9cd 6700 	strd	r6, r7, [sp]
    4ac4:	4804      	ldr	r0, [pc, #16]	; (4ad8 <k_mem_slab_alloc+0x5c>)
    4ac6:	f000 fb6b 	bl	51a0 <z_pend_curr>
		if (result == 0) {
    4aca:	b918      	cbnz	r0, 4ad4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    4acc:	4b03      	ldr	r3, [pc, #12]	; (4adc <k_mem_slab_alloc+0x60>)
    4ace:	689b      	ldr	r3, [r3, #8]
    4ad0:	695b      	ldr	r3, [r3, #20]
    4ad2:	6023      	str	r3, [r4, #0]
}
    4ad4:	b002      	add	sp, #8
    4ad6:	bdd0      	pop	{r4, r6, r7, pc}
    4ad8:	200110e8 	.word	0x200110e8
    4adc:	2000c3fc 	.word	0x2000c3fc

00004ae0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4ae0:	b570      	push	{r4, r5, r6, lr}
    4ae2:	4604      	mov	r4, r0
    4ae4:	460d      	mov	r5, r1
	__asm__ volatile(
    4ae6:	f04f 0320 	mov.w	r3, #32
    4aea:	f3ef 8611 	mrs	r6, BASEPRI
    4aee:	f383 8811 	msr	BASEPRI, r3
    4af2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4af6:	f010 fc94 	bl	15422 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    4afa:	b158      	cbz	r0, 4b14 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4afc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4afe:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4b00:	2100      	movs	r1, #0
    4b02:	6701      	str	r1, [r0, #112]	; 0x70
		z_ready_thread(pending_thread);
    4b04:	f010 fc17 	bl	15336 <z_ready_thread>
		z_reschedule(&lock, key);
    4b08:	4631      	mov	r1, r6
    4b0a:	4809      	ldr	r0, [pc, #36]	; (4b30 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    4b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    4b10:	f010 bbe6 	b.w	152e0 <z_reschedule>
		**(char ***)mem = slab->free_list;
    4b14:	682b      	ldr	r3, [r5, #0]
    4b16:	6962      	ldr	r2, [r4, #20]
    4b18:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    4b1a:	682b      	ldr	r3, [r5, #0]
    4b1c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    4b1e:	69a3      	ldr	r3, [r4, #24]
    4b20:	3b01      	subs	r3, #1
    4b22:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4b24:	f386 8811 	msr	BASEPRI, r6
    4b28:	f3bf 8f6f 	isb	sy
}
    4b2c:	bd70      	pop	{r4, r5, r6, pc}
    4b2e:	bf00      	nop
    4b30:	200110e8 	.word	0x200110e8

00004b34 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4b34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b38:	4604      	mov	r4, r0
    4b3a:	4616      	mov	r6, r2
    4b3c:	461f      	mov	r7, r3
	__asm__ volatile(
    4b3e:	f04f 0320 	mov.w	r3, #32
    4b42:	f3ef 8811 	mrs	r8, BASEPRI
    4b46:	f383 8811 	msr	BASEPRI, r3
    4b4a:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4b4e:	68c3      	ldr	r3, [r0, #12]
    4b50:	4a32      	ldr	r2, [pc, #200]	; (4c1c <z_impl_k_mutex_lock+0xe8>)
    4b52:	b16b      	cbz	r3, 4b70 <z_impl_k_mutex_lock+0x3c>
    4b54:	6880      	ldr	r0, [r0, #8]
    4b56:	6891      	ldr	r1, [r2, #8]
    4b58:	4288      	cmp	r0, r1
    4b5a:	d019      	beq.n	4b90 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4b5c:	ea56 0307 	orrs.w	r3, r6, r7
    4b60:	d118      	bne.n	4b94 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4b62:	f388 8811 	msr	BASEPRI, r8
    4b66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    4b6a:	f06f 000f 	mvn.w	r0, #15
    4b6e:	e00c      	b.n	4b8a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4b70:	6891      	ldr	r1, [r2, #8]
    4b72:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4b76:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4b78:	3301      	adds	r3, #1
    4b7a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4b7c:	6893      	ldr	r3, [r2, #8]
    4b7e:	60a3      	str	r3, [r4, #8]
    4b80:	f388 8811 	msr	BASEPRI, r8
    4b84:	f3bf 8f6f 	isb	sy
		return 0;
    4b88:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    4b8a:	b002      	add	sp, #8
    4b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4b90:	6921      	ldr	r1, [r4, #16]
    4b92:	e7f0      	b.n	4b76 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4b94:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4b98:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4b9c:	4299      	cmp	r1, r3
    4b9e:	bfa8      	it	ge
    4ba0:	4619      	movge	r1, r3
    4ba2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4ba6:	428b      	cmp	r3, r1
    4ba8:	dd2c      	ble.n	4c04 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    4baa:	f000 fb0d 	bl	51c8 <z_set_prio>
    4bae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4bb0:	e9cd 6700 	strd	r6, r7, [sp]
    4bb4:	481a      	ldr	r0, [pc, #104]	; (4c20 <z_impl_k_mutex_lock+0xec>)
    4bb6:	4622      	mov	r2, r4
    4bb8:	4641      	mov	r1, r8
    4bba:	f000 faf1 	bl	51a0 <z_pend_curr>
	if (got_mutex == 0) {
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d0e3      	beq.n	4b8a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4bc2:	f04f 0320 	mov.w	r3, #32
    4bc6:	f3ef 8611 	mrs	r6, BASEPRI
    4bca:	f383 8811 	msr	BASEPRI, r3
    4bce:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4bd2:	6823      	ldr	r3, [r4, #0]
    4bd4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bd6:	429c      	cmp	r4, r3
    4bd8:	d007      	beq.n	4bea <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4bda:	b133      	cbz	r3, 4bea <z_impl_k_mutex_lock+0xb6>
    4bdc:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4be0:	4299      	cmp	r1, r3
    4be2:	bfa8      	it	ge
    4be4:	4619      	movge	r1, r3
    4be6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4bea:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4bec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4bf0:	4299      	cmp	r1, r3
    4bf2:	d109      	bne.n	4c08 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    4bf4:	b16d      	cbz	r5, 4c12 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4bf6:	480a      	ldr	r0, [pc, #40]	; (4c20 <z_impl_k_mutex_lock+0xec>)
    4bf8:	4631      	mov	r1, r6
    4bfa:	f010 fb71 	bl	152e0 <z_reschedule>
	return -EAGAIN;
    4bfe:	f06f 000a 	mvn.w	r0, #10
    4c02:	e7c2      	b.n	4b8a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4c04:	2500      	movs	r5, #0
    4c06:	e7d3      	b.n	4bb0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    4c08:	f000 fade 	bl	51c8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4c0c:	2800      	cmp	r0, #0
    4c0e:	d1f2      	bne.n	4bf6 <z_impl_k_mutex_lock+0xc2>
    4c10:	e7f0      	b.n	4bf4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    4c12:	f386 8811 	msr	BASEPRI, r6
    4c16:	f3bf 8f6f 	isb	sy
    4c1a:	e7f0      	b.n	4bfe <z_impl_k_mutex_lock+0xca>
    4c1c:	2000c3fc 	.word	0x2000c3fc
    4c20:	200110e9 	.word	0x200110e9

00004c24 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4c24:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    4c26:	6883      	ldr	r3, [r0, #8]
{
    4c28:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d036      	beq.n	4c9c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4c2e:	4a1e      	ldr	r2, [pc, #120]	; (4ca8 <z_impl_k_mutex_unlock+0x84>)
    4c30:	6892      	ldr	r2, [r2, #8]
    4c32:	4293      	cmp	r3, r2
    4c34:	d135      	bne.n	4ca2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    4c36:	7bda      	ldrb	r2, [r3, #15]
    4c38:	3a01      	subs	r2, #1
    4c3a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4c3c:	68c3      	ldr	r3, [r0, #12]
    4c3e:	2b01      	cmp	r3, #1
    4c40:	d005      	beq.n	4c4e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4c42:	3b01      	subs	r3, #1
    4c44:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4c46:	f000 f8c3 	bl	4dd0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    4c4a:	2000      	movs	r0, #0
}
    4c4c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c4e:	f04f 0320 	mov.w	r3, #32
    4c52:	f3ef 8511 	mrs	r5, BASEPRI
    4c56:	f383 8811 	msr	BASEPRI, r3
    4c5a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c5e:	6901      	ldr	r1, [r0, #16]
    4c60:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4c62:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c66:	4299      	cmp	r1, r3
    4c68:	d001      	beq.n	4c6e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    4c6a:	f000 faad 	bl	51c8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c6e:	4620      	mov	r0, r4
    4c70:	f010 fbd7 	bl	15422 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c74:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c76:	b158      	cbz	r0, 4c90 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c78:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c7c:	6122      	str	r2, [r4, #16]
    4c7e:	2200      	movs	r2, #0
    4c80:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    4c82:	f010 fb58 	bl	15336 <z_ready_thread>
		z_reschedule(&lock, key);
    4c86:	4809      	ldr	r0, [pc, #36]	; (4cac <z_impl_k_mutex_unlock+0x88>)
    4c88:	4629      	mov	r1, r5
    4c8a:	f010 fb29 	bl	152e0 <z_reschedule>
    4c8e:	e7da      	b.n	4c46 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4c90:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4c92:	f385 8811 	msr	BASEPRI, r5
    4c96:	f3bf 8f6f 	isb	sy
    4c9a:	e7d4      	b.n	4c46 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4c9c:	f06f 0015 	mvn.w	r0, #21
    4ca0:	e7d4      	b.n	4c4c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    4ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ca6:	e7d1      	b.n	4c4c <z_impl_k_mutex_unlock+0x28>
    4ca8:	2000c3fc 	.word	0x2000c3fc
    4cac:	200110e9 	.word	0x200110e9

00004cb0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4cb0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4cb2:	4c08      	ldr	r4, [pc, #32]	; (4cd4 <z_reset_time_slice+0x24>)
    4cb4:	6823      	ldr	r3, [r4, #0]
    4cb6:	b15b      	cbz	r3, 4cd0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4cb8:	f7fd ff46 	bl	2b48 <z_clock_elapsed>
    4cbc:	6822      	ldr	r2, [r4, #0]
    4cbe:	4906      	ldr	r1, [pc, #24]	; (4cd8 <z_reset_time_slice+0x28>)
    4cc0:	4410      	add	r0, r2
    4cc2:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    4cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    4cc8:	2100      	movs	r1, #0
    4cca:	4610      	mov	r0, r2
    4ccc:	f010 bc09 	b.w	154e2 <z_set_timeout_expiry>
}
    4cd0:	bd10      	pop	{r4, pc}
    4cd2:	bf00      	nop
    4cd4:	2000c434 	.word	0x2000c434
    4cd8:	2000c3fc 	.word	0x2000c3fc

00004cdc <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    4cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cde:	460c      	mov	r4, r1
	__asm__ volatile(
    4ce0:	f04f 0320 	mov.w	r3, #32
    4ce4:	f3ef 8511 	mrs	r5, BASEPRI
    4ce8:	f383 8811 	msr	BASEPRI, r3
    4cec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4cf0:	4b0d      	ldr	r3, [pc, #52]	; (4d28 <k_sched_time_slice_set+0x4c>)
			return (u32_t)((t * to_hz + off) / from_hz);
    4cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4cf6:	f240 36e7 	movw	r6, #999	; 0x3e7
    4cfa:	2700      	movs	r7, #0
    4cfc:	fbe1 6700 	umlal	r6, r7, r1, r0
    4d00:	2200      	movs	r2, #0
    4d02:	611a      	str	r2, [r3, #16]
    4d04:	4630      	mov	r0, r6
    4d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4d0a:	2300      	movs	r3, #0
    4d0c:	4639      	mov	r1, r7
    4d0e:	f7fb fa47 	bl	1a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4d12:	4b06      	ldr	r3, [pc, #24]	; (4d2c <k_sched_time_slice_set+0x50>)
    4d14:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4d16:	4b06      	ldr	r3, [pc, #24]	; (4d30 <k_sched_time_slice_set+0x54>)
    4d18:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    4d1a:	f7ff ffc9 	bl	4cb0 <z_reset_time_slice>
	__asm__ volatile(
    4d1e:	f385 8811 	msr	BASEPRI, r5
    4d22:	f3bf 8f6f 	isb	sy
	}
}
    4d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d28:	2000c3fc 	.word	0x2000c3fc
    4d2c:	2000c434 	.word	0x2000c434
    4d30:	2000c430 	.word	0x2000c430

00004d34 <k_sched_lock>:
	__asm__ volatile(
    4d34:	f04f 0320 	mov.w	r3, #32
    4d38:	f3ef 8111 	mrs	r1, BASEPRI
    4d3c:	f383 8811 	msr	BASEPRI, r3
    4d40:	f3bf 8f6f 	isb	sy
    4d44:	4b04      	ldr	r3, [pc, #16]	; (4d58 <k_sched_lock+0x24>)
    4d46:	689a      	ldr	r2, [r3, #8]
    4d48:	7bd3      	ldrb	r3, [r2, #15]
    4d4a:	3b01      	subs	r3, #1
    4d4c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4d4e:	f381 8811 	msr	BASEPRI, r1
    4d52:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4d56:	4770      	bx	lr
    4d58:	2000c3fc 	.word	0x2000c3fc

00004d5c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4d5c:	4b09      	ldr	r3, [pc, #36]	; (4d84 <z_priq_dumb_remove+0x28>)
    4d5e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4d62:	4282      	cmp	r2, r0
    4d64:	d105      	bne.n	4d72 <z_priq_dumb_remove+0x16>
    4d66:	689b      	ldr	r3, [r3, #8]
    4d68:	428b      	cmp	r3, r1
    4d6a:	d102      	bne.n	4d72 <z_priq_dumb_remove+0x16>
    4d6c:	7b4b      	ldrb	r3, [r1, #13]
    4d6e:	06db      	lsls	r3, r3, #27
    4d70:	d106      	bne.n	4d80 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4d72:	e9d1 3200 	ldrd	r3, r2, [r1]
    4d76:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4d78:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4d7a:	2300      	movs	r3, #0
	node->prev = NULL;
    4d7c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop
    4d84:	2000c3fc 	.word	0x2000c3fc

00004d88 <update_cache>:
{
    4d88:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4d8a:	4c10      	ldr	r4, [pc, #64]	; (4dcc <update_cache+0x44>)
{
    4d8c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4d8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4d92:	f010 fac6 	bl	15322 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4d96:	68a3      	ldr	r3, [r4, #8]
    4d98:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4d9a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4d9c:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    4d9e:	bf44      	itt	mi
    4da0:	f041 0108 	orrmi.w	r1, r1, #8
    4da4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4da6:	b905      	cbnz	r5, 4daa <update_cache+0x22>
    4da8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    4daa:	b94e      	cbnz	r6, 4dc0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    4dac:	7b5a      	ldrb	r2, [r3, #13]
    4dae:	06d2      	lsls	r2, r2, #27
    4db0:	d106      	bne.n	4dc0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4db2:	69aa      	ldr	r2, [r5, #24]
    4db4:	b922      	cbnz	r2, 4dc0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    4db6:	89da      	ldrh	r2, [r3, #14]
    4db8:	2a7f      	cmp	r2, #127	; 0x7f
    4dba:	d901      	bls.n	4dc0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    4dbc:	6263      	str	r3, [r4, #36]	; 0x24
}
    4dbe:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    4dc0:	42ab      	cmp	r3, r5
    4dc2:	d001      	beq.n	4dc8 <update_cache+0x40>
			z_reset_time_slice();
    4dc4:	f7ff ff74 	bl	4cb0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4dc8:	6265      	str	r5, [r4, #36]	; 0x24
}
    4dca:	e7f8      	b.n	4dbe <update_cache+0x36>
    4dcc:	2000c3fc 	.word	0x2000c3fc

00004dd0 <k_sched_unlock>:
{
    4dd0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4dd2:	f04f 0320 	mov.w	r3, #32
    4dd6:	f3ef 8411 	mrs	r4, BASEPRI
    4dda:	f383 8811 	msr	BASEPRI, r3
    4dde:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4de2:	4b08      	ldr	r3, [pc, #32]	; (4e04 <k_sched_unlock+0x34>)
    4de4:	689a      	ldr	r2, [r3, #8]
    4de6:	7bd3      	ldrb	r3, [r2, #15]
    4de8:	3301      	adds	r3, #1
    4dea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4dec:	2000      	movs	r0, #0
    4dee:	f7ff ffcb 	bl	4d88 <update_cache>
	__asm__ volatile(
    4df2:	f384 8811 	msr	BASEPRI, r4
    4df6:	f3bf 8f6f 	isb	sy
}
    4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4dfe:	f010 ba86 	b.w	1530e <z_reschedule_unlocked>
    4e02:	bf00      	nop
    4e04:	2000c3fc 	.word	0x2000c3fc

00004e08 <ready_thread>:
{
    4e08:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4e0a:	7b43      	ldrb	r3, [r0, #13]
    4e0c:	06db      	lsls	r3, r3, #27
    4e0e:	d12a      	bne.n	4e66 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4e10:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    4e12:	bb43      	cbnz	r3, 4e66 <ready_thread+0x5e>
	return list->head == list;
    4e14:	4a15      	ldr	r2, [pc, #84]	; (4e6c <ready_thread+0x64>)
    4e16:	4611      	mov	r1, r2
    4e18:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e1c:	428c      	cmp	r4, r1
    4e1e:	bf18      	it	ne
    4e20:	4623      	movne	r3, r4
    4e22:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4e24:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    4e26:	bf38      	it	cc
    4e28:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e2a:	b1b3      	cbz	r3, 4e5a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    4e2c:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4e30:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4e34:	42ae      	cmp	r6, r5
    4e36:	db03      	blt.n	4e40 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    4e38:	42a3      	cmp	r3, r4
    4e3a:	d00e      	beq.n	4e5a <ready_thread+0x52>
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	e7f4      	b.n	4e2a <ready_thread+0x22>
	node->prev = successor->prev;
    4e40:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4e42:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    4e46:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4e48:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    4e4a:	7b43      	ldrb	r3, [r0, #13]
    4e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4e50:	7343      	strb	r3, [r0, #13]
}
    4e52:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4e54:	2000      	movs	r0, #0
    4e56:	f7ff bf97 	b.w	4d88 <update_cache>
	node->prev = list->tail;
    4e5a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    4e5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4e60:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4e62:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    4e64:	e7f1      	b.n	4e4a <ready_thread+0x42>
}
    4e66:	bc70      	pop	{r4, r5, r6}
    4e68:	4770      	bx	lr
    4e6a:	bf00      	nop
    4e6c:	2000c3fc 	.word	0x2000c3fc

00004e70 <z_sched_start>:
{
    4e70:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e72:	f04f 0220 	mov.w	r2, #32
    4e76:	f3ef 8411 	mrs	r4, BASEPRI
    4e7a:	f382 8811 	msr	BASEPRI, r2
    4e7e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4e82:	7b42      	ldrb	r2, [r0, #13]
    4e84:	0751      	lsls	r1, r2, #29
    4e86:	d404      	bmi.n	4e92 <z_sched_start+0x22>
	__asm__ volatile(
    4e88:	f384 8811 	msr	BASEPRI, r4
    4e8c:	f3bf 8f6f 	isb	sy
}
    4e90:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4e92:	f022 0204 	bic.w	r2, r2, #4
    4e96:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4e98:	f7ff ffb6 	bl	4e08 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4e9c:	4621      	mov	r1, r4
    4e9e:	4802      	ldr	r0, [pc, #8]	; (4ea8 <z_sched_start+0x38>)
}
    4ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4ea4:	f010 ba1c 	b.w	152e0 <z_reschedule>
    4ea8:	200110ea 	.word	0x200110ea

00004eac <z_move_thread_to_end_of_prio_q>:
{
    4eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eae:	4601      	mov	r1, r0
	__asm__ volatile(
    4eb0:	f04f 0320 	mov.w	r3, #32
    4eb4:	f3ef 8411 	mrs	r4, BASEPRI
    4eb8:	f383 8811 	msr	BASEPRI, r3
    4ebc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4ec0:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	da02      	bge.n	4ece <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4ec8:	4819      	ldr	r0, [pc, #100]	; (4f30 <z_move_thread_to_end_of_prio_q+0x84>)
    4eca:	f7ff ff47 	bl	4d5c <z_priq_dumb_remove>
	return list->head == list;
    4ece:	4a19      	ldr	r2, [pc, #100]	; (4f34 <z_move_thread_to_end_of_prio_q+0x88>)
    4ed0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ed2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    4ed4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ed8:	4283      	cmp	r3, r0
    4eda:	bf08      	it	eq
    4edc:	2300      	moveq	r3, #0
    4ede:	2b00      	cmp	r3, #0
    4ee0:	bf38      	it	cc
    4ee2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ee4:	b1eb      	cbz	r3, 4f22 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    4ee6:	f991 700e 	ldrsb.w	r7, [r1, #14]
    4eea:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4eee:	42b7      	cmp	r7, r6
    4ef0:	db03      	blt.n	4efa <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4ef2:	429d      	cmp	r5, r3
    4ef4:	d015      	beq.n	4f22 <z_move_thread_to_end_of_prio_q+0x76>
    4ef6:	681b      	ldr	r3, [r3, #0]
    4ef8:	e7f4      	b.n	4ee4 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    4efa:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    4efc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    4f00:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4f02:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4f04:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    4f06:	6890      	ldr	r0, [r2, #8]
    4f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f0c:	734b      	strb	r3, [r1, #13]
    4f0e:	1a43      	subs	r3, r0, r1
    4f10:	4258      	negs	r0, r3
    4f12:	4158      	adcs	r0, r3
    4f14:	f7ff ff38 	bl	4d88 <update_cache>
	__asm__ volatile(
    4f18:	f384 8811 	msr	BASEPRI, r4
    4f1c:	f3bf 8f6f 	isb	sy
}
    4f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    4f22:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    4f26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4f28:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4f2a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    4f2c:	e7ea      	b.n	4f04 <z_move_thread_to_end_of_prio_q+0x58>
    4f2e:	bf00      	nop
    4f30:	2000c424 	.word	0x2000c424
    4f34:	2000c3fc 	.word	0x2000c3fc

00004f38 <z_time_slice>:
{
    4f38:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    4f3a:	4a15      	ldr	r2, [pc, #84]	; (4f90 <z_time_slice+0x58>)
    4f3c:	4b15      	ldr	r3, [pc, #84]	; (4f94 <z_time_slice+0x5c>)
    4f3e:	6814      	ldr	r4, [r2, #0]
{
    4f40:	4601      	mov	r1, r0
	if (pending_current == _current) {
    4f42:	6898      	ldr	r0, [r3, #8]
    4f44:	42a0      	cmp	r0, r4
    4f46:	461c      	mov	r4, r3
    4f48:	d103      	bne.n	4f52 <z_time_slice+0x1a>
}
    4f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    4f4e:	f7ff beaf 	b.w	4cb0 <z_reset_time_slice>
	pending_current = NULL;
    4f52:	2500      	movs	r5, #0
    4f54:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4f56:	4a10      	ldr	r2, [pc, #64]	; (4f98 <z_time_slice+0x60>)
    4f58:	6812      	ldr	r2, [r2, #0]
    4f5a:	b1b2      	cbz	r2, 4f8a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4f5c:	89c2      	ldrh	r2, [r0, #14]
    4f5e:	2a7f      	cmp	r2, #127	; 0x7f
    4f60:	d813      	bhi.n	4f8a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4f62:	4a0e      	ldr	r2, [pc, #56]	; (4f9c <z_time_slice+0x64>)
    4f64:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4f68:	6812      	ldr	r2, [r2, #0]
    4f6a:	4295      	cmp	r5, r2
    4f6c:	db0d      	blt.n	4f8a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    4f6e:	4a0c      	ldr	r2, [pc, #48]	; (4fa0 <z_time_slice+0x68>)
    4f70:	4290      	cmp	r0, r2
    4f72:	d00a      	beq.n	4f8a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4f74:	6982      	ldr	r2, [r0, #24]
    4f76:	b942      	cbnz	r2, 4f8a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    4f78:	691a      	ldr	r2, [r3, #16]
    4f7a:	428a      	cmp	r2, r1
    4f7c:	dc02      	bgt.n	4f84 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    4f7e:	f7ff ff95 	bl	4eac <z_move_thread_to_end_of_prio_q>
    4f82:	e7e2      	b.n	4f4a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    4f84:	1a52      	subs	r2, r2, r1
    4f86:	611a      	str	r2, [r3, #16]
}
    4f88:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    4f8a:	2300      	movs	r3, #0
    4f8c:	6123      	str	r3, [r4, #16]
    4f8e:	e7fb      	b.n	4f88 <z_time_slice+0x50>
    4f90:	2000c42c 	.word	0x2000c42c
    4f94:	2000c3fc 	.word	0x2000c3fc
    4f98:	2000c434 	.word	0x2000c434
    4f9c:	2000c430 	.word	0x2000c430
    4fa0:	2000c314 	.word	0x2000c314

00004fa4 <z_impl_k_thread_suspend>:
{
    4fa4:	b570      	push	{r4, r5, r6, lr}
    4fa6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4fa8:	3018      	adds	r0, #24
    4faa:	f010 fa74 	bl	15496 <z_abort_timeout>
	__asm__ volatile(
    4fae:	f04f 0320 	mov.w	r3, #32
    4fb2:	f3ef 8611 	mrs	r6, BASEPRI
    4fb6:	f383 8811 	msr	BASEPRI, r3
    4fba:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4fbe:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	da07      	bge.n	4fd6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4fc6:	480f      	ldr	r0, [pc, #60]	; (5004 <z_impl_k_thread_suspend+0x60>)
    4fc8:	4621      	mov	r1, r4
    4fca:	f7ff fec7 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4fce:	7b63      	ldrb	r3, [r4, #13]
    4fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4fd4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4fd6:	4d0c      	ldr	r5, [pc, #48]	; (5008 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4fd8:	7b63      	ldrb	r3, [r4, #13]
    4fda:	68a8      	ldr	r0, [r5, #8]
    4fdc:	f043 0310 	orr.w	r3, r3, #16
    4fe0:	7363      	strb	r3, [r4, #13]
    4fe2:	1b03      	subs	r3, r0, r4
    4fe4:	4258      	negs	r0, r3
    4fe6:	4158      	adcs	r0, r3
    4fe8:	f7ff fece 	bl	4d88 <update_cache>
	__asm__ volatile(
    4fec:	f386 8811 	msr	BASEPRI, r6
    4ff0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4ff4:	68ab      	ldr	r3, [r5, #8]
    4ff6:	42a3      	cmp	r3, r4
    4ff8:	d103      	bne.n	5002 <z_impl_k_thread_suspend+0x5e>
}
    4ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4ffe:	f010 b986 	b.w	1530e <z_reschedule_unlocked>
}
    5002:	bd70      	pop	{r4, r5, r6, pc}
    5004:	2000c424 	.word	0x2000c424
    5008:	2000c3fc 	.word	0x2000c3fc

0000500c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    500c:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5012:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    5014:	b103      	cbz	r3, 5018 <z_thread_single_abort+0xc>
		thread->fn_abort();
    5016:	4798      	blx	r3
    5018:	f104 0018 	add.w	r0, r4, #24
    501c:	f010 fa3b 	bl	15496 <z_abort_timeout>
	__asm__ volatile(
    5020:	f04f 0320 	mov.w	r3, #32
    5024:	f3ef 8611 	mrs	r6, BASEPRI
    5028:	f383 8811 	msr	BASEPRI, r3
    502c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5030:	7b63      	ldrb	r3, [r4, #13]
    5032:	06d8      	lsls	r0, r3, #27
    5034:	d123      	bne.n	507e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    5036:	69a2      	ldr	r2, [r4, #24]
    5038:	bb0a      	cbnz	r2, 507e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    503a:	0619      	lsls	r1, r3, #24
    503c:	d507      	bpl.n	504e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    503e:	481f      	ldr	r0, [pc, #124]	; (50bc <z_thread_single_abort+0xb0>)
    5040:	4621      	mov	r1, r4
    5042:	f7ff fe8b 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5046:	7b63      	ldrb	r3, [r4, #13]
    5048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    504c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    504e:	4b1c      	ldr	r3, [pc, #112]	; (50c0 <z_thread_single_abort+0xb4>)
    5050:	6898      	ldr	r0, [r3, #8]
    5052:	1b02      	subs	r2, r0, r4
    5054:	4250      	negs	r0, r2
    5056:	4150      	adcs	r0, r2
    5058:	f7ff fe96 	bl	4d88 <update_cache>
		thread->base.thread_state |= mask;
    505c:	7b63      	ldrb	r3, [r4, #13]
    505e:	f043 0308 	orr.w	r3, r3, #8
    5062:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5064:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
    5068:	2700      	movs	r7, #0
	return list->head == list;
    506a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    506c:	4545      	cmp	r5, r8
    506e:	d000      	beq.n	5072 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    5070:	b995      	cbnz	r5, 5098 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    5072:	f386 8811 	msr	BASEPRI, r6
    5076:	f3bf 8f6f 	isb	sy
}
    507a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    507e:	079b      	lsls	r3, r3, #30
    5080:	d5ec      	bpl.n	505c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    5082:	68a0      	ldr	r0, [r4, #8]
    5084:	4621      	mov	r1, r4
    5086:	f7ff fe69 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    508a:	7b63      	ldrb	r3, [r4, #13]
    508c:	f023 0302 	bic.w	r3, r3, #2
    5090:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    5092:	2300      	movs	r3, #0
    5094:	60a3      	str	r3, [r4, #8]
    5096:	e7e1      	b.n	505c <z_thread_single_abort+0x50>
    5098:	f105 0018 	add.w	r0, r5, #24
    509c:	f010 f9fb 	bl	15496 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    50a0:	68a8      	ldr	r0, [r5, #8]
    50a2:	4629      	mov	r1, r5
    50a4:	f7ff fe5a 	bl	4d5c <z_priq_dumb_remove>
    50a8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    50aa:	60af      	str	r7, [r5, #8]
    50ac:	f023 0302 	bic.w	r3, r3, #2
    50b0:	736b      	strb	r3, [r5, #13]
    50b2:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    50b4:	4628      	mov	r0, r5
    50b6:	f7ff fea7 	bl	4e08 <ready_thread>
    50ba:	e7d6      	b.n	506a <z_thread_single_abort+0x5e>
    50bc:	2000c424 	.word	0x2000c424
    50c0:	2000c3fc 	.word	0x2000c3fc

000050c4 <unready_thread>:
{
    50c4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    50c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    50ca:	2b00      	cmp	r3, #0
{
    50cc:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    50ce:	da06      	bge.n	50de <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    50d0:	4807      	ldr	r0, [pc, #28]	; (50f0 <unready_thread+0x2c>)
    50d2:	f7ff fe43 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    50d6:	7b4b      	ldrb	r3, [r1, #13]
    50d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50dc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    50de:	4b05      	ldr	r3, [pc, #20]	; (50f4 <unready_thread+0x30>)
    50e0:	6898      	ldr	r0, [r3, #8]
    50e2:	1a43      	subs	r3, r0, r1
    50e4:	4258      	negs	r0, r3
    50e6:	4158      	adcs	r0, r3
}
    50e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    50ec:	f7ff be4c 	b.w	4d88 <update_cache>
    50f0:	2000c424 	.word	0x2000c424
    50f4:	2000c3fc 	.word	0x2000c3fc

000050f8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    50fc:	f010 fa0c 	bl	15518 <z_tick_get_32>
    5100:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    5102:	f04f 0320 	mov.w	r3, #32
    5106:	f3ef 8711 	mrs	r7, BASEPRI
    510a:	f383 8811 	msr	BASEPRI, r3
    510e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5112:	4e0d      	ldr	r6, [pc, #52]	; (5148 <z_tick_sleep.part.0+0x50>)
    5114:	4b0d      	ldr	r3, [pc, #52]	; (514c <z_tick_sleep.part.0+0x54>)
    5116:	68b0      	ldr	r0, [r6, #8]
    5118:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    511a:	f010 f947 	bl	153ac <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    511e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5120:	490b      	ldr	r1, [pc, #44]	; (5150 <z_tick_sleep.part.0+0x58>)
    5122:	462a      	mov	r2, r5
    5124:	17eb      	asrs	r3, r5, #31
    5126:	3018      	adds	r0, #24
    5128:	f000 fa4a 	bl	55c0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    512c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    512e:	7b53      	ldrb	r3, [r2, #13]
    5130:	f043 0310 	orr.w	r3, r3, #16
    5134:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
    5136:	4638      	mov	r0, r7
    5138:	f7fd fe8e 	bl	2e58 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    513c:	f010 f9ec 	bl	15518 <z_tick_get_32>
    5140:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    5142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5148:	2000c3fc 	.word	0x2000c3fc
    514c:	2000c42c 	.word	0x2000c42c
    5150:	00015357 	.word	0x00015357

00005154 <pend>:
{
    5154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5158:	4606      	mov	r6, r0
    515a:	4614      	mov	r4, r2
    515c:	461d      	mov	r5, r3
    515e:	f04f 0320 	mov.w	r3, #32
    5162:	f3ef 8711 	mrs	r7, BASEPRI
    5166:	f383 8811 	msr	BASEPRI, r3
    516a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    516e:	f010 f92d 	bl	153cc <add_to_waitq_locked>
	__asm__ volatile(
    5172:	f387 8811 	msr	BASEPRI, r7
    5176:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    517a:	1c6b      	adds	r3, r5, #1
    517c:	bf08      	it	eq
    517e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    5182:	d008      	beq.n	5196 <pend+0x42>
    5184:	4622      	mov	r2, r4
    5186:	462b      	mov	r3, r5
    5188:	f106 0018 	add.w	r0, r6, #24
    518c:	4903      	ldr	r1, [pc, #12]	; (519c <pend+0x48>)
}
    518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5192:	f000 ba15 	b.w	55c0 <z_add_timeout>
    5196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    519a:	bf00      	nop
    519c:	00015357 	.word	0x00015357

000051a0 <z_pend_curr>:
{
    51a0:	b510      	push	{r4, lr}
	pending_current = _current;
    51a2:	4b07      	ldr	r3, [pc, #28]	; (51c0 <z_pend_curr+0x20>)
    51a4:	6898      	ldr	r0, [r3, #8]
    51a6:	4b07      	ldr	r3, [pc, #28]	; (51c4 <z_pend_curr+0x24>)
{
    51a8:	460c      	mov	r4, r1
	pending_current = _current;
    51aa:	6018      	str	r0, [r3, #0]
{
    51ac:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    51ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    51b2:	f7ff ffcf 	bl	5154 <pend>
    51b6:	4620      	mov	r0, r4
}
    51b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51bc:	f7fd be4c 	b.w	2e58 <arch_swap>
    51c0:	2000c3fc 	.word	0x2000c3fc
    51c4:	2000c42c 	.word	0x2000c42c

000051c8 <z_set_prio>:
{
    51c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51cc:	4604      	mov	r4, r0
	__asm__ volatile(
    51ce:	f04f 0320 	mov.w	r3, #32
    51d2:	f3ef 8811 	mrs	r8, BASEPRI
    51d6:	f383 8811 	msr	BASEPRI, r3
    51da:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    51de:	7b43      	ldrb	r3, [r0, #13]
    51e0:	06db      	lsls	r3, r3, #27
    51e2:	b24e      	sxtb	r6, r1
    51e4:	d12e      	bne.n	5244 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    51e6:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    51e8:	bb65      	cbnz	r5, 5244 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    51ea:	4f18      	ldr	r7, [pc, #96]	; (524c <z_set_prio+0x84>)
    51ec:	4621      	mov	r1, r4
    51ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
    51f2:	f7ff fdb3 	bl	4d5c <z_priq_dumb_remove>
	return list->head == list;
    51f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    51f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
    51fa:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51fc:	4283      	cmp	r3, r0
    51fe:	bf18      	it	ne
    5200:	461d      	movne	r5, r3
    5202:	2d00      	cmp	r5, #0
    5204:	bf38      	it	cc
    5206:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5208:	b1b5      	cbz	r5, 5238 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    520a:	f995 100e 	ldrsb.w	r1, [r5, #14]
    520e:	42b1      	cmp	r1, r6
    5210:	dc03      	bgt.n	521a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    5212:	42aa      	cmp	r2, r5
    5214:	d010      	beq.n	5238 <z_set_prio+0x70>
    5216:	682d      	ldr	r5, [r5, #0]
    5218:	e7f6      	b.n	5208 <z_set_prio+0x40>
	node->prev = successor->prev;
    521a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    521c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    5220:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5222:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5224:	2001      	movs	r0, #1
    5226:	f7ff fdaf 	bl	4d88 <update_cache>
    522a:	2001      	movs	r0, #1
	__asm__ volatile(
    522c:	f388 8811 	msr	BASEPRI, r8
    5230:	f3bf 8f6f 	isb	sy
}
    5234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    5238:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    523e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5240:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    5242:	e7ef      	b.n	5224 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5244:	73a6      	strb	r6, [r4, #14]
    5246:	2000      	movs	r0, #0
    5248:	e7f0      	b.n	522c <z_set_prio+0x64>
    524a:	bf00      	nop
    524c:	2000c3fc 	.word	0x2000c3fc

00005250 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5250:	4b04      	ldr	r3, [pc, #16]	; (5264 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5252:	2100      	movs	r1, #0
    5254:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    5258:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    525c:	4608      	mov	r0, r1
    525e:	f7ff bd3d 	b.w	4cdc <k_sched_time_slice_set>
    5262:	bf00      	nop
    5264:	2000c3fc 	.word	0x2000c3fc

00005268 <z_impl_k_yield>:
{
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    526a:	4c24      	ldr	r4, [pc, #144]	; (52fc <z_impl_k_yield+0x94>)
    526c:	4b24      	ldr	r3, [pc, #144]	; (5300 <z_impl_k_yield+0x98>)
    526e:	68a2      	ldr	r2, [r4, #8]
    5270:	429a      	cmp	r2, r3
    5272:	d030      	beq.n	52d6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    5274:	f04f 0320 	mov.w	r3, #32
    5278:	f3ef 8511 	mrs	r5, BASEPRI
    527c:	f383 8811 	msr	BASEPRI, r3
    5280:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    5284:	68a1      	ldr	r1, [r4, #8]
    5286:	f104 0028 	add.w	r0, r4, #40	; 0x28
    528a:	f7ff fd67 	bl	4d5c <z_priq_dumb_remove>
	return list->head == list;
    528e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    5290:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5292:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5294:	4283      	cmp	r3, r0
    5296:	bf08      	it	eq
    5298:	2300      	moveq	r3, #0
    529a:	2b00      	cmp	r3, #0
    529c:	bf38      	it	cc
    529e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52a0:	b32b      	cbz	r3, 52ee <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    52a2:	f992 700e 	ldrsb.w	r7, [r2, #14]
    52a6:	f993 600e 	ldrsb.w	r6, [r3, #14]
    52aa:	42b7      	cmp	r7, r6
    52ac:	db03      	blt.n	52b6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    52ae:	428b      	cmp	r3, r1
    52b0:	d01d      	beq.n	52ee <z_impl_k_yield+0x86>
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	e7f4      	b.n	52a0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    52b6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    52b8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    52bc:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    52be:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    52c0:	7b53      	ldrb	r3, [r2, #13]
    52c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52c6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    52c8:	2001      	movs	r0, #1
    52ca:	f7ff fd5d 	bl	4d88 <update_cache>
	__asm__ volatile(
    52ce:	f385 8811 	msr	BASEPRI, r5
    52d2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    52d6:	f04f 0320 	mov.w	r3, #32
    52da:	f3ef 8011 	mrs	r0, BASEPRI
    52de:	f383 8811 	msr	BASEPRI, r3
    52e2:	f3bf 8f6f 	isb	sy
}
    52e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    52ea:	f7fd bdb5 	b.w	2e58 <arch_swap>
	node->prev = list->tail;
    52ee:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    52f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    52f4:	601a      	str	r2, [r3, #0]
	list->tail = node;
    52f6:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    52f8:	e7e2      	b.n	52c0 <z_impl_k_yield+0x58>
    52fa:	bf00      	nop
    52fc:	2000c3fc 	.word	0x2000c3fc
    5300:	2000c314 	.word	0x2000c314

00005304 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5304:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5306:	3301      	adds	r3, #1
    5308:	bf08      	it	eq
    530a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    530e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5310:	d106      	bne.n	5320 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5312:	4b0b      	ldr	r3, [pc, #44]	; (5340 <z_impl_k_sleep+0x3c>)
    5314:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5316:	f7ff fe45 	bl	4fa4 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    531a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    531e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    5320:	4604      	mov	r4, r0
	if (ticks == 0) {
    5322:	b948      	cbnz	r0, 5338 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    5324:	f7ff ffa0 	bl	5268 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
    5328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    532c:	fb84 3400 	smull	r3, r4, r4, r0
    5330:	0bd8      	lsrs	r0, r3, #15
    5332:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    5336:	e7f2      	b.n	531e <z_impl_k_sleep+0x1a>
    5338:	f7ff fede 	bl	50f8 <z_tick_sleep.part.0>
    533c:	4604      	mov	r4, r0
    533e:	e7f3      	b.n	5328 <z_impl_k_sleep+0x24>
    5340:	2000c3fc 	.word	0x2000c3fc

00005344 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5344:	4b01      	ldr	r3, [pc, #4]	; (534c <z_impl_k_current_get+0x8>)
    5346:	6898      	ldr	r0, [r3, #8]
    5348:	4770      	bx	lr
    534a:	bf00      	nop
    534c:	2000c3fc 	.word	0x2000c3fc

00005350 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5350:	b538      	push	{r3, r4, r5, lr}
    5352:	4604      	mov	r4, r0
    5354:	f04f 0320 	mov.w	r3, #32
    5358:	f3ef 8511 	mrs	r5, BASEPRI
    535c:	f383 8811 	msr	BASEPRI, r3
    5360:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    5364:	f010 f85d 	bl	15422 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    5368:	b148      	cbz	r0, 537e <z_impl_k_sem_give+0x2e>
    536a:	2200      	movs	r2, #0
    536c:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    536e:	f00f ffe2 	bl	15336 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    5372:	4629      	mov	r1, r5
    5374:	4805      	ldr	r0, [pc, #20]	; (538c <z_impl_k_sem_give+0x3c>)
}
    5376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    537a:	f00f bfb1 	b.w	152e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    537e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5382:	429a      	cmp	r2, r3
    5384:	bf18      	it	ne
    5386:	3301      	addne	r3, #1
    5388:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    538a:	e7f2      	b.n	5372 <z_impl_k_sem_give+0x22>
    538c:	200110eb 	.word	0x200110eb

00005390 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5390:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5392:	4614      	mov	r4, r2
    5394:	461d      	mov	r5, r3
    5396:	f04f 0320 	mov.w	r3, #32
    539a:	f3ef 8111 	mrs	r1, BASEPRI
    539e:	f383 8811 	msr	BASEPRI, r3
    53a2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    53a6:	6883      	ldr	r3, [r0, #8]
    53a8:	b143      	cbz	r3, 53bc <z_impl_k_sem_take+0x2c>
		sem->count--;
    53aa:	3b01      	subs	r3, #1
    53ac:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    53ae:	f381 8811 	msr	BASEPRI, r1
    53b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    53b6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    53b8:	b003      	add	sp, #12
    53ba:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    53bc:	ea54 0305 	orrs.w	r3, r4, r5
    53c0:	d106      	bne.n	53d0 <z_impl_k_sem_take+0x40>
    53c2:	f381 8811 	msr	BASEPRI, r1
    53c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    53ca:	f06f 000f 	mvn.w	r0, #15
    53ce:	e7f3      	b.n	53b8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    53d0:	4602      	mov	r2, r0
    53d2:	e9cd 4500 	strd	r4, r5, [sp]
    53d6:	4802      	ldr	r0, [pc, #8]	; (53e0 <z_impl_k_sem_take+0x50>)
    53d8:	f7ff fee2 	bl	51a0 <z_pend_curr>
	return ret;
    53dc:	e7ec      	b.n	53b8 <z_impl_k_sem_take+0x28>
    53de:	bf00      	nop
    53e0:	200110eb 	.word	0x200110eb

000053e4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e6:	b087      	sub	sp, #28
    53e8:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
    53ec:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    53f0:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    53f4:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    53f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    53f8:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    53fa:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
    53fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5400:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
    5402:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5404:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
    5406:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
    5408:	2500      	movs	r5, #0
	node->prev = NULL;
    540a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
    540e:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
    5410:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5412:	9600      	str	r6, [sp, #0]
{
    5414:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5416:	f7fd fd95 	bl	2f44 <arch_new_thread>
	if (!_current) {
    541a:	4b04      	ldr	r3, [pc, #16]	; (542c <z_setup_new_thread+0x48>)
    541c:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    541e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    5422:	b103      	cbz	r3, 5426 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    5424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5426:	66a3      	str	r3, [r4, #104]	; 0x68
}
    5428:	b007      	add	sp, #28
    542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    542c:	2000c3fc 	.word	0x2000c3fc

00005430 <z_impl_k_thread_create>:
{
    5430:	b5f0      	push	{r4, r5, r6, r7, lr}
    5432:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5434:	2500      	movs	r5, #0
    5436:	9505      	str	r5, [sp, #20]
    5438:	9d10      	ldr	r5, [sp, #64]	; 0x40
    543a:	9504      	str	r5, [sp, #16]
    543c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    543e:	9503      	str	r5, [sp, #12]
    5440:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5442:	9502      	str	r5, [sp, #8]
{
    5444:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5448:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    544a:	9501      	str	r5, [sp, #4]
    544c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    544e:	9500      	str	r5, [sp, #0]
{
    5450:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5452:	f7ff ffc7 	bl	53e4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5456:	1c7b      	adds	r3, r7, #1
    5458:	bf08      	it	eq
    545a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    545e:	d005      	beq.n	546c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5460:	ea56 0307 	orrs.w	r3, r6, r7
    5464:	d105      	bne.n	5472 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    5466:	4620      	mov	r0, r4
    5468:	f7ff fd02 	bl	4e70 <z_sched_start>
}
    546c:	4620      	mov	r0, r4
    546e:	b007      	add	sp, #28
    5470:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5472:	4904      	ldr	r1, [pc, #16]	; (5484 <z_impl_k_thread_create+0x54>)
    5474:	4632      	mov	r2, r6
    5476:	463b      	mov	r3, r7
    5478:	f104 0018 	add.w	r0, r4, #24
    547c:	f000 f8a0 	bl	55c0 <z_add_timeout>
    5480:	e7f4      	b.n	546c <z_impl_k_thread_create+0x3c>
    5482:	bf00      	nop
    5484:	00015357 	.word	0x00015357

00005488 <z_init_static_threads>:
{
    5488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    548c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5544 <z_init_static_threads+0xbc>
    5490:	4d2b      	ldr	r5, [pc, #172]	; (5540 <z_init_static_threads+0xb8>)
{
    5492:	b087      	sub	sp, #28
    5494:	46c8      	mov	r8, r9
	_FOREACH_STATIC_THREAD(thread_data) {
    5496:	454d      	cmp	r5, r9
    5498:	f105 0430 	add.w	r4, r5, #48	; 0x30
    549c:	d30d      	bcc.n	54ba <z_init_static_threads+0x32>
	k_sched_lock();
    549e:	f7ff fc49 	bl	4d34 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    54a2:	4c27      	ldr	r4, [pc, #156]	; (5540 <z_init_static_threads+0xb8>)
    54a4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 5548 <z_init_static_threads+0xc0>
			return (u32_t)((t * to_hz + off) / from_hz);
    54a8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    54ac:	4544      	cmp	r4, r8
    54ae:	d321      	bcc.n	54f4 <z_init_static_threads+0x6c>
}
    54b0:	b007      	add	sp, #28
    54b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    54b6:	f7ff bc8b 	b.w	4dd0 <k_sched_unlock>
		z_setup_new_thread(
    54ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    54be:	9305      	str	r3, [sp, #20]
    54c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    54c4:	9304      	str	r3, [sp, #16]
    54c6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    54ca:	9303      	str	r3, [sp, #12]
    54cc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    54d0:	9302      	str	r3, [sp, #8]
    54d2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    54d6:	9301      	str	r3, [sp, #4]
    54d8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    54dc:	9300      	str	r3, [sp, #0]
    54de:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    54e2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    54e6:	f7ff ff7d 	bl	53e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    54ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
    54ee:	655d      	str	r5, [r3, #84]	; 0x54
    54f0:	4625      	mov	r5, r4
    54f2:	e7d0      	b.n	5496 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    54f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    54f6:	1c4b      	adds	r3, r1, #1
    54f8:	d017      	beq.n	552a <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
    54fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    54fe:	f240 3be7 	movw	fp, #999	; 0x3e7
    5502:	f04f 0c00 	mov.w	ip, #0
    5506:	fbc9 bc01 	smlal	fp, ip, r9, r1
    550a:	2300      	movs	r3, #0
    550c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5510:	4658      	mov	r0, fp
    5512:	4661      	mov	r1, ip
    5514:	f7fa fe44 	bl	1a0 <__aeabi_uldivmod>
    5518:	2700      	movs	r7, #0
    551a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    551c:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    5520:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5522:	d104      	bne.n	552e <z_init_static_threads+0xa6>
	z_sched_start(thread);
    5524:	4628      	mov	r0, r5
    5526:	f7ff fca3 	bl	4e70 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    552a:	3430      	adds	r4, #48	; 0x30
    552c:	e7be      	b.n	54ac <z_init_static_threads+0x24>
    552e:	4602      	mov	r2, r0
    5530:	463b      	mov	r3, r7
    5532:	4651      	mov	r1, sl
    5534:	f105 0018 	add.w	r0, r5, #24
    5538:	f000 f842 	bl	55c0 <z_add_timeout>
    553c:	e7f5      	b.n	552a <z_init_static_threads+0xa2>
    553e:	bf00      	nop
    5540:	20000810 	.word	0x20000810
    5544:	20000810 	.word	0x20000810
    5548:	00015357 	.word	0x00015357

0000554c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    554c:	4b03      	ldr	r3, [pc, #12]	; (555c <elapsed+0x10>)
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	b90b      	cbnz	r3, 5556 <elapsed+0xa>
    5552:	f7fd baf9 	b.w	2b48 <z_clock_elapsed>
}
    5556:	2000      	movs	r0, #0
    5558:	4770      	bx	lr
    555a:	bf00      	nop
    555c:	2000c438 	.word	0x2000c438

00005560 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5560:	6803      	ldr	r3, [r0, #0]
    5562:	b140      	cbz	r0, 5576 <remove_timeout+0x16>
    5564:	4a07      	ldr	r2, [pc, #28]	; (5584 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    5566:	6852      	ldr	r2, [r2, #4]
    5568:	4290      	cmp	r0, r2
    556a:	d004      	beq.n	5576 <remove_timeout+0x16>
	if (next(t) != NULL) {
    556c:	b11b      	cbz	r3, 5576 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    556e:	689a      	ldr	r2, [r3, #8]
    5570:	6881      	ldr	r1, [r0, #8]
    5572:	440a      	add	r2, r1
    5574:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    5576:	6842      	ldr	r2, [r0, #4]
    5578:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    557a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    557c:	2300      	movs	r3, #0
	node->prev = NULL;
    557e:	e9c0 3300 	strd	r3, r3, [r0]
}
    5582:	4770      	bx	lr
    5584:	20000060 	.word	0x20000060

00005588 <next_timeout>:
	return list->head == list;
    5588:	4b0b      	ldr	r3, [pc, #44]	; (55b8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    558a:	b510      	push	{r4, lr}
    558c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    558e:	429c      	cmp	r4, r3
    5590:	bf08      	it	eq
    5592:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    5594:	f7ff ffda 	bl	554c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    5598:	b154      	cbz	r4, 55b0 <next_timeout+0x28>
    559a:	68a3      	ldr	r3, [r4, #8]
    559c:	1a18      	subs	r0, r3, r0
    559e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    55a2:	4b06      	ldr	r3, [pc, #24]	; (55bc <next_timeout+0x34>)
    55a4:	691b      	ldr	r3, [r3, #16]
    55a6:	b113      	cbz	r3, 55ae <next_timeout+0x26>
    55a8:	4298      	cmp	r0, r3
    55aa:	bfa8      	it	ge
    55ac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    55ae:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    55b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    55b4:	e7f5      	b.n	55a2 <next_timeout+0x1a>
    55b6:	bf00      	nop
    55b8:	20000060 	.word	0x20000060
    55bc:	2000c3fc 	.word	0x2000c3fc

000055c0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    55c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55c4:	9101      	str	r1, [sp, #4]
    55c6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55c8:	1c4b      	adds	r3, r1, #1
    55ca:	bf08      	it	eq
    55cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    55d0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55d2:	d061      	beq.n	5698 <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    55d4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    55d6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    55da:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    55de:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    55e2:	ebb3 0804 	subs.w	r8, r3, r4
    55e6:	eb6b 0905 	sbc.w	r9, fp, r5
    55ea:	f1b8 0f00 	cmp.w	r8, #0
    55ee:	f179 0300 	sbcs.w	r3, r9, #0
    55f2:	db0f      	blt.n	5614 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    55f4:	f7ff ffaa 	bl	554c <elapsed>
    55f8:	4a2c      	ldr	r2, [pc, #176]	; (56ac <z_add_timeout+0xec>)
    55fa:	e9d2 1c00 	ldrd	r1, ip, [r2]
    55fe:	f06f 0301 	mvn.w	r3, #1
    5602:	1a5b      	subs	r3, r3, r1
    5604:	eb6b 020c 	sbc.w	r2, fp, ip
    5608:	1b1e      	subs	r6, r3, r4
    560a:	eb62 0705 	sbc.w	r7, r2, r5
    560e:	1a34      	subs	r4, r6, r0
    5610:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5614:	9b01      	ldr	r3, [sp, #4]
    5616:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    561a:	f04f 0320 	mov.w	r3, #32
    561e:	f3ef 8611 	mrs	r6, BASEPRI
    5622:	f383 8811 	msr	BASEPRI, r3
    5626:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    562a:	f7ff ff8f 	bl	554c <elapsed>
	ticks = MAX(1, ticks);
    562e:	2c01      	cmp	r4, #1
    5630:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    5634:	4b1e      	ldr	r3, [pc, #120]	; (56b0 <z_add_timeout+0xf0>)
    5636:	681a      	ldr	r2, [r3, #0]
    5638:	bfb8      	it	lt
    563a:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
    563c:	4420      	add	r0, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    563e:	429a      	cmp	r2, r3
    5640:	f8ca 0008 	str.w	r0, [sl, #8]
    5644:	d001      	beq.n	564a <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5646:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5648:	b952      	cbnz	r2, 5660 <z_add_timeout+0xa0>
	node->prev = list->tail;
    564a:	685a      	ldr	r2, [r3, #4]
    564c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    5650:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    5652:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    5656:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    565a:	f8c3 a004 	str.w	sl, [r3, #4]
}
    565e:	e00d      	b.n	567c <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    5660:	6890      	ldr	r0, [r2, #8]
    5662:	f8da 1008 	ldr.w	r1, [sl, #8]
    5666:	4288      	cmp	r0, r1
    5668:	dd19      	ble.n	569e <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    566a:	1a41      	subs	r1, r0, r1
    566c:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    566e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5670:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5674:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5678:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    567c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    567e:	429a      	cmp	r2, r3
    5680:	d006      	beq.n	5690 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5682:	4592      	cmp	sl, r2
    5684:	d104      	bne.n	5690 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    5686:	f7ff ff7f 	bl	5588 <next_timeout>
    568a:	2100      	movs	r1, #0
    568c:	f7fd f9fe 	bl	2a8c <z_clock_set_timeout>
	__asm__ volatile(
    5690:	f386 8811 	msr	BASEPRI, r6
    5694:	f3bf 8f6f 	isb	sy
		}
	}
}
    5698:	b003      	add	sp, #12
    569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    569e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    56a0:	4294      	cmp	r4, r2
    56a2:	f8ca 1008 	str.w	r1, [sl, #8]
    56a6:	d0d0      	beq.n	564a <z_add_timeout+0x8a>
    56a8:	6812      	ldr	r2, [r2, #0]
    56aa:	e7cd      	b.n	5648 <z_add_timeout+0x88>
    56ac:	2000a8c8 	.word	0x2000a8c8
    56b0:	20000060 	.word	0x20000060

000056b4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    56b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56b8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    56ba:	f7ff fc3d 	bl	4f38 <z_time_slice>
	__asm__ volatile(
    56be:	f04f 0320 	mov.w	r3, #32
    56c2:	f3ef 8411 	mrs	r4, BASEPRI
    56c6:	f383 8811 	msr	BASEPRI, r3
    56ca:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    56ce:	4d20      	ldr	r5, [pc, #128]	; (5750 <z_clock_announce+0x9c>)
    56d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5754 <z_clock_announce+0xa0>
	return list->head == list;
    56d4:	f8df a080 	ldr.w	sl, [pc, #128]	; 5758 <z_clock_announce+0xa4>
    56d8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    56da:	46c1      	mov	r9, r8
    56dc:	f8da 0000 	ldr.w	r0, [sl]
    56e0:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56e2:	4550      	cmp	r0, sl
    56e4:	e9d8 6700 	ldrd	r6, r7, [r8]
    56e8:	d005      	beq.n	56f6 <z_clock_announce+0x42>
    56ea:	b120      	cbz	r0, 56f6 <z_clock_announce+0x42>
    56ec:	6883      	ldr	r3, [r0, #8]
    56ee:	4293      	cmp	r3, r2
    56f0:	dd13      	ble.n	571a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    56f2:	1a9b      	subs	r3, r3, r2
    56f4:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    56f6:	18b6      	adds	r6, r6, r2
    56f8:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    56fc:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    5700:	2600      	movs	r6, #0
    5702:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    5704:	f7ff ff40 	bl	5588 <next_timeout>
    5708:	4631      	mov	r1, r6
    570a:	f7fd f9bf 	bl	2a8c <z_clock_set_timeout>
	__asm__ volatile(
    570e:	f384 8811 	msr	BASEPRI, r4
    5712:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    571a:	18f6      	adds	r6, r6, r3
    571c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    5720:	1ad3      	subs	r3, r2, r3
    5722:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    5724:	2300      	movs	r3, #0
    5726:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    5728:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    572c:	f7ff ff18 	bl	5560 <remove_timeout>
    5730:	f384 8811 	msr	BASEPRI, r4
    5734:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5738:	68c3      	ldr	r3, [r0, #12]
    573a:	4798      	blx	r3
	__asm__ volatile(
    573c:	f04f 0320 	mov.w	r3, #32
    5740:	f3ef 8411 	mrs	r4, BASEPRI
    5744:	f383 8811 	msr	BASEPRI, r3
    5748:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    574c:	e7c6      	b.n	56dc <z_clock_announce+0x28>
    574e:	bf00      	nop
    5750:	2000c438 	.word	0x2000c438
    5754:	2000a8c8 	.word	0x2000a8c8
    5758:	20000060 	.word	0x20000060

0000575c <z_tick_get>:

s64_t z_tick_get(void)
{
    575c:	b510      	push	{r4, lr}
    575e:	f04f 0320 	mov.w	r3, #32
    5762:	f3ef 8411 	mrs	r4, BASEPRI
    5766:	f383 8811 	msr	BASEPRI, r3
    576a:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    576e:	f7fd f9eb 	bl	2b48 <z_clock_elapsed>
    5772:	4b06      	ldr	r3, [pc, #24]	; (578c <z_tick_get+0x30>)
    5774:	e9d3 2300 	ldrd	r2, r3, [r3]
    5778:	1812      	adds	r2, r2, r0
    577a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    577e:	f384 8811 	msr	BASEPRI, r4
    5782:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5786:	4610      	mov	r0, r2
    5788:	4619      	mov	r1, r3
    578a:	bd10      	pop	{r4, pc}
    578c:	2000a8c8 	.word	0x2000a8c8

00005790 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5792:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    5796:	1c56      	adds	r6, r2, #1
    5798:	f143 0700 	adc.w	r7, r3, #0
    579c:	2f00      	cmp	r7, #0
    579e:	bf08      	it	eq
    57a0:	2e02      	cmpeq	r6, #2
{
    57a2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    57a4:	d302      	bcc.n	57ac <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    57a6:	490c      	ldr	r1, [pc, #48]	; (57d8 <z_timer_expiration_handler+0x48>)
    57a8:	f7ff ff0a 	bl	55c0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    57ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57ae:	3301      	adds	r3, #1
    57b0:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    57b2:	69a3      	ldr	r3, [r4, #24]
    57b4:	b10b      	cbz	r3, 57ba <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    57b6:	4620      	mov	r0, r4
    57b8:	4798      	blx	r3
	return list->head == list;
    57ba:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57be:	42a5      	cmp	r5, r4
    57c0:	d008      	beq.n	57d4 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    57c2:	b13d      	cbz	r5, 57d4 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    57c4:	4628      	mov	r0, r5
    57c6:	f00f fd72 	bl	152ae <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    57ca:	4628      	mov	r0, r5
    57cc:	f00f fdb3 	bl	15336 <z_ready_thread>
    57d0:	2300      	movs	r3, #0
    57d2:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
    57d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57d6:	bf00      	nop
    57d8:	00005791 	.word	0x00005791

000057dc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    57dc:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    57e0:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    57e4:	ea54 0105 	orrs.w	r1, r4, r5
{
    57e8:	4680      	mov	r8, r0
    57ea:	4616      	mov	r6, r2
    57ec:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    57ee:	d016      	beq.n	581e <z_impl_k_timer_start+0x42>
    57f0:	f06f 0101 	mvn.w	r1, #1
    57f4:	ebb1 0a04 	subs.w	sl, r1, r4
    57f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    57fc:	eb61 0b05 	sbc.w	fp, r1, r5
    5800:	f1ba 0f00 	cmp.w	sl, #0
    5804:	f17b 0100 	sbcs.w	r1, fp, #0
    5808:	da09      	bge.n	581e <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    580a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    580e:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    5812:	2c01      	cmp	r4, #1
    5814:	f175 0100 	sbcs.w	r1, r5, #0
    5818:	bfbc      	itt	lt
    581a:	2401      	movlt	r4, #1
    581c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    581e:	f06f 0101 	mvn.w	r1, #1
    5822:	1a89      	subs	r1, r1, r2
    5824:	9100      	str	r1, [sp, #0]
    5826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    582a:	eb61 0103 	sbc.w	r1, r1, r3
    582e:	9101      	str	r1, [sp, #4]
    5830:	e9dd 0100 	ldrd	r0, r1, [sp]
    5834:	2800      	cmp	r0, #0
    5836:	f171 0100 	sbcs.w	r1, r1, #0
    583a:	da09      	bge.n	5850 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    583c:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
    5840:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
    5844:	2e00      	cmp	r6, #0
    5846:	f177 0300 	sbcs.w	r3, r7, #0
    584a:	bfbc      	itt	lt
    584c:	2600      	movlt	r6, #0
    584e:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    5850:	4640      	mov	r0, r8
    5852:	f00f fe20 	bl	15496 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5856:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5858:	4906      	ldr	r1, [pc, #24]	; (5874 <z_impl_k_timer_start+0x98>)
	timer->status = 0U;
    585a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    585e:	4632      	mov	r2, r6
    5860:	463b      	mov	r3, r7
    5862:	4640      	mov	r0, r8
	timer->period = period;
    5864:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    5868:	b002      	add	sp, #8
    586a:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    586e:	f7ff bea7 	b.w	55c0 <z_add_timeout>
    5872:	bf00      	nop
    5874:	00005791 	.word	0x00005791

00005878 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    5878:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    587a:	4c06      	ldr	r4, [pc, #24]	; (5894 <statics_init+0x1c>)
    587c:	4d06      	ldr	r5, [pc, #24]	; (5898 <statics_init+0x20>)
    587e:	42ac      	cmp	r4, r5
    5880:	d301      	bcc.n	5886 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    5882:	2000      	movs	r0, #0
    5884:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5886:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    588a:	4620      	mov	r0, r4
    588c:	f00f fe78 	bl	15580 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5890:	3418      	adds	r4, #24
    5892:	e7f4      	b.n	587e <statics_init+0x6>
    5894:	20000810 	.word	0x20000810
    5898:	20000828 	.word	0x20000828

0000589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
    589c:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
    589e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58a2:	4605      	mov	r5, r0
    58a4:	4688      	mov	r8, r1
    58a6:	4614      	mov	r4, r2
    58a8:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
    58aa:	d10a      	bne.n	58c2 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x26>
      if (error_reporter_ != nullptr) {
    58ac:	f241 238c 	movw	r3, #4748	; 0x128c
    58b0:	58c0      	ldr	r0, [r0, r3]
    58b2:	b910      	cbnz	r0, 58ba <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    58b4:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
    58b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
    58ba:	4922      	ldr	r1, [pc, #136]	; (5944 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa8>)
    58bc:	f018 fcef 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    58c0:	e7f8      	b.n	58b4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (FindOp(op) != nullptr) {
    58c2:	6803      	ldr	r3, [r0, #0]
    58c4:	691b      	ldr	r3, [r3, #16]
    58c6:	4798      	blx	r3
    58c8:	4607      	mov	r7, r0
    58ca:	b148      	cbz	r0, 58e0 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x44>
      if (error_reporter_ != nullptr) {
    58cc:	f241 238c 	movw	r3, #4748	; 0x128c
    58d0:	58e8      	ldr	r0, [r5, r3]
    58d2:	2800      	cmp	r0, #0
    58d4:	d0ee      	beq.n	58b4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
    58d6:	491c      	ldr	r1, [pc, #112]	; (5948 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xac>)
    58d8:	4642      	mov	r2, r8
    58da:	f018 fce0 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    58de:	e7e9      	b.n	58b4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (registrations_len_ >= tOpCount) {
    58e0:	f241 0e04 	movw	lr, #4100	; 0x1004
    58e4:	f855 c00e 	ldr.w	ip, [r5, lr]
    58e8:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    58ec:	d90a      	bls.n	5904 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_) {
    58ee:	f241 238c 	movw	r3, #4748	; 0x128c
    58f2:	58e8      	ldr	r0, [r5, r3]
    58f4:	2800      	cmp	r0, #0
    58f6:	d0dd      	beq.n	58b4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
    58f8:	4914      	ldr	r1, [pc, #80]	; (594c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xb0>)
    58fa:	2380      	movs	r3, #128	; 0x80
    58fc:	4642      	mov	r2, r8
    58fe:	f018 fcce 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5902:	e7d7      	b.n	58b4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    registrations_[registrations_len_] = registration;
    5904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5906:	eb05 1a4c 	add.w	sl, r5, ip, lsl #5
    590a:	f10a 0604 	add.w	r6, sl, #4
    590e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5910:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5914:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    registrations_len_++;
    5918:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
    591c:	f8ca 8018 	str.w	r8, [sl, #24]
    registrations_len_++;
    5920:	f845 300e 	str.w	r3, [r5, lr]
    builtin_codes_[num_buitin_ops_] = op;
    5924:	f241 2388 	movw	r3, #4744	; 0x1288
    5928:	f241 0108 	movw	r1, #4104	; 0x1008
    592c:	58ea      	ldr	r2, [r5, r3]
    592e:	18a8      	adds	r0, r5, r2
    5930:	f800 8001 	strb.w	r8, [r0, r1]
    builtin_parsers_[num_buitin_ops_] = parser;
    5934:	f202 4122 	addw	r1, r2, #1058	; 0x422
    num_buitin_ops_++;
    5938:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
    593a:	f845 9021 	str.w	r9, [r5, r1, lsl #2]
    return kTfLiteOk;
    593e:	4638      	mov	r0, r7
    num_buitin_ops_++;
    5940:	50ea      	str	r2, [r5, r3]
    return kTfLiteOk;
    5942:	e7b8      	b.n	58b6 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1a>
    5944:	00029b42 	.word	0x00029b42
    5948:	00029b87 	.word	0x00029b87
    594c:	00029bd6 	.word	0x00029bd6

00005950 <_ZN6tflite14AllOpsResolverC1Ev>:
const char* GetString_ETHOSU();
}  // namespace custom
}  // namespace micro
}  // namespace ops

AllOpsResolver::AllOpsResolver() {
    5950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : error_reporter_(error_reporter) {}
    5954:	f241 2388 	movw	r3, #4744	; 0x1288
    5958:	f241 0604 	movw	r6, #4100	; 0x1004
    595c:	2500      	movs	r5, #0
    595e:	f241 278c 	movw	r7, #4748	; 0x128c
    5962:	5185      	str	r5, [r0, r6]
    5964:	50c5      	str	r5, [r0, r3]
    5966:	4bdc      	ldr	r3, [pc, #880]	; (5cd8 <_ZN6tflite14AllOpsResolverC1Ev+0x388>)
    5968:	51c5      	str	r5, [r0, r7]
    596a:	6003      	str	r3, [r0, #0]
    596c:	4604      	mov	r4, r0
    return AddBuiltin(BuiltinOperator_ABS, *tflite::ops::micro::Register_ABS(),
    596e:	f005 f9d3 	bl	ad18 <_ZN6tflite3ops5micro12Register_ABSEv>
                      ParseOpData);
    5972:	4bda      	ldr	r3, [pc, #872]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_ABS, *tflite::ops::micro::Register_ABS(),
    5974:	4602      	mov	r2, r0
                      ParseOpData);
    5976:	2165      	movs	r1, #101	; 0x65
    5978:	4620      	mov	r0, r4
    597a:	f7ff ff8f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_ADD, *tflite::ops::micro::Register_ADD(),
    597e:	f001 fce5 	bl	734c <_ZN6tflite3ops5micro12Register_ADDEv>
                      ParseOpData);
    5982:	4629      	mov	r1, r5
    return AddBuiltin(BuiltinOperator_ADD, *tflite::ops::micro::Register_ADD(),
    5984:	4602      	mov	r2, r0
                      ParseOpData);
    5986:	4bd5      	ldr	r3, [pc, #852]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5988:	4620      	mov	r0, r4
    598a:	f7ff ff87 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ARG_MAX(), ParseOpData);
    598e:	f001 fdbb 	bl	7508 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
    5992:	4bd2      	ldr	r3, [pc, #840]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5994:	4602      	mov	r2, r0
    5996:	2138      	movs	r1, #56	; 0x38
    5998:	4620      	mov	r0, r4
    599a:	f7ff ff7f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ARG_MIN(), ParseOpData);
    599e:	f001 fdb7 	bl	7510 <_ZN6tflite3ops5micro16Register_ARG_MINEv>
    59a2:	4bce      	ldr	r3, [pc, #824]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59a4:	4602      	mov	r2, r0
    59a6:	214f      	movs	r1, #79	; 0x4f
    59a8:	4620      	mov	r0, r4
    59aa:	f7ff ff77 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_AVERAGE_POOL_2D(),
    59ae:	f007 fa7b 	bl	cea8 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParseOpData);
    59b2:	4bca      	ldr	r3, [pc, #808]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_AVERAGE_POOL_2D(),
    59b4:	4602      	mov	r2, r0
                      ParseOpData);
    59b6:	2101      	movs	r1, #1
    59b8:	4620      	mov	r0, r4
    59ba:	f7ff ff6f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CEIL(), ParseOpData);
    59be:	f001 fef9 	bl	77b4 <_ZN6tflite3ops5micro13Register_CEILEv>
    59c2:	4bc6      	ldr	r3, [pc, #792]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59c4:	4602      	mov	r2, r0
    59c6:	2168      	movs	r1, #104	; 0x68
    59c8:	4620      	mov	r0, r4
    59ca:	f7ff ff67 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CONCATENATION(),
    59ce:	f003 ff1f 	bl	9810 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>
                      ParseOpData);
    59d2:	4bc2      	ldr	r3, [pc, #776]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_CONCATENATION(),
    59d4:	4602      	mov	r2, r0
                      ParseOpData);
    59d6:	2102      	movs	r1, #2
    59d8:	4620      	mov	r0, r4
    59da:	f7ff ff5f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
    59de:	f004 fb0b 	bl	9ff8 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
    59e2:	4bbf      	ldr	r3, [pc, #764]	; (5ce0 <_ZN6tflite14AllOpsResolverC1Ev+0x390>)
    59e4:	4602      	mov	r2, r0
    59e6:	2103      	movs	r1, #3
    59e8:	4620      	mov	r0, r4
    59ea:	f7ff ff57 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_COS, *tflite::ops::micro::Register_COS(),
    59ee:	f005 f99b 	bl	ad28 <_ZN6tflite3ops5micro12Register_COSEv>
                      ParseOpData);
    59f2:	4bba      	ldr	r3, [pc, #744]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_COS, *tflite::ops::micro::Register_COS(),
    59f4:	4602      	mov	r2, r0
                      ParseOpData);
    59f6:	216c      	movs	r1, #108	; 0x6c
    59f8:	4620      	mov	r0, r4
    59fa:	f7ff ff4f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
    59fe:	f004 fd4b 	bl	a498 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
    5a02:	4bb8      	ldr	r3, [pc, #736]	; (5ce4 <_ZN6tflite14AllOpsResolverC1Ev+0x394>)
                      *tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
    5a04:	4602      	mov	r2, r0
                      ParseDepthwiseConv2D);
    5a06:	2104      	movs	r1, #4
    5a08:	4620      	mov	r0, r4
    5a0a:	f7ff ff47 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_DEQUANTIZE(),
    5a0e:	f005 f835 	bl	aa7c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
                      ParseDequantize);
    5a12:	4bb5      	ldr	r3, [pc, #724]	; (5ce8 <_ZN6tflite14AllOpsResolverC1Ev+0x398>)
                      *tflite::ops::micro::Register_DEQUANTIZE(),
    5a14:	4602      	mov	r2, r0
                      ParseDequantize);
    5a16:	2106      	movs	r1, #6
    5a18:	4620      	mov	r0, r4
    5a1a:	f7ff ff3f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_EQUAL(), ParseOpData);
    5a1e:	f001 fecd 	bl	77bc <_ZN6tflite3ops5micro14Register_EQUALEv>
    5a22:	4bae      	ldr	r3, [pc, #696]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a24:	4602      	mov	r2, r0
    5a26:	2147      	movs	r1, #71	; 0x47
    5a28:	4620      	mov	r0, r4
    5a2a:	f7ff ff37 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_FLOOR(), ParseOpData);
    5a2e:	f005 fa09 	bl	ae44 <_ZN6tflite3ops5micro14Register_FLOOREv>
    5a32:	4baa      	ldr	r3, [pc, #680]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a34:	4602      	mov	r2, r0
    5a36:	2108      	movs	r1, #8
    5a38:	4620      	mov	r0, r4
    5a3a:	f7ff ff2f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
    5a3e:	f005 fca5 	bl	b38c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
    5a42:	4baa      	ldr	r3, [pc, #680]	; (5cec <_ZN6tflite14AllOpsResolverC1Ev+0x39c>)
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
    5a44:	4602      	mov	r2, r0
                      ParseFullyConnected);
    5a46:	2109      	movs	r1, #9
    5a48:	4620      	mov	r0, r4
    5a4a:	f7ff ff27 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_GREATER(), ParseOpData);
    5a4e:	f001 febd 	bl	77cc <_ZN6tflite3ops5micro16Register_GREATEREv>
    5a52:	4ba2      	ldr	r3, [pc, #648]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a54:	4602      	mov	r2, r0
    5a56:	213d      	movs	r1, #61	; 0x3d
    5a58:	4620      	mov	r0, r4
    5a5a:	f7ff ff1f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_GREATER_EQUAL(),
    5a5e:	f001 feb9 	bl	77d4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
                      ParseOpData);
    5a62:	4b9e      	ldr	r3, [pc, #632]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_GREATER_EQUAL(),
    5a64:	4602      	mov	r2, r0
                      ParseOpData);
    5a66:	213e      	movs	r1, #62	; 0x3e
    5a68:	4620      	mov	r0, r4
    5a6a:	f7ff ff17 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_L2_NORMALIZATION(),
    5a6e:	f005 fcbb 	bl	b3e8 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>
                      ParseOpData);
    5a72:	4b9a      	ldr	r3, [pc, #616]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_L2_NORMALIZATION(),
    5a74:	4602      	mov	r2, r0
                      ParseOpData);
    5a76:	210b      	movs	r1, #11
    5a78:	4620      	mov	r0, r4
    5a7a:	f7ff ff0f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LESS(), ParseOpData);
    5a7e:	f001 fead 	bl	77dc <_ZN6tflite3ops5micro13Register_LESSEv>
    5a82:	4b96      	ldr	r3, [pc, #600]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a84:	4602      	mov	r2, r0
    5a86:	213a      	movs	r1, #58	; 0x3a
    5a88:	4620      	mov	r0, r4
    5a8a:	f7ff ff07 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LESS_EQUAL(), ParseOpData);
    5a8e:	f001 fea9 	bl	77e4 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
    5a92:	4b92      	ldr	r3, [pc, #584]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a94:	4602      	mov	r2, r0
    5a96:	213f      	movs	r1, #63	; 0x3f
    5a98:	4620      	mov	r0, r4
    5a9a:	f7ff feff 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LOG, *tflite::ops::micro::Register_LOG(),
    5a9e:	f005 f947 	bl	ad30 <_ZN6tflite3ops5micro12Register_LOGEv>
                      ParseOpData);
    5aa2:	4b8e      	ldr	r3, [pc, #568]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_LOG, *tflite::ops::micro::Register_LOG(),
    5aa4:	4602      	mov	r2, r0
                      ParseOpData);
    5aa6:	2149      	movs	r1, #73	; 0x49
    5aa8:	4620      	mov	r0, r4
    5aaa:	f7ff fef7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_AND(), ParseOpData);
    5aae:	f005 fe39 	bl	b724 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
    5ab2:	4b8a      	ldr	r3, [pc, #552]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ab4:	4602      	mov	r2, r0
    5ab6:	2156      	movs	r1, #86	; 0x56
    5ab8:	4620      	mov	r0, r4
    5aba:	f7ff feef 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_NOT(), ParseOpData);
    5abe:	f005 f947 	bl	ad50 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
    5ac2:	4b86      	ldr	r3, [pc, #536]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ac4:	4602      	mov	r2, r0
    5ac6:	2157      	movs	r1, #87	; 0x57
    5ac8:	4620      	mov	r0, r4
    5aca:	f7ff fee7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_OR(), ParseOpData);
    5ace:	f005 fe25 	bl	b71c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
    5ad2:	4b82      	ldr	r3, [pc, #520]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ad4:	4602      	mov	r2, r0
    5ad6:	2154      	movs	r1, #84	; 0x54
    5ad8:	4620      	mov	r0, r4
    5ada:	f7ff fedf 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGISTIC(), ParseOpData);
    5ade:	f005 fe8f 	bl	b800 <_ZN6tflite3ops5micro17Register_LOGISTICEv>
    5ae2:	4b7e      	ldr	r3, [pc, #504]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ae4:	4602      	mov	r2, r0
    5ae6:	210e      	movs	r1, #14
    5ae8:	4620      	mov	r0, r4
    5aea:	f7ff fed7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MAXIMUM(), ParseOpData);
    5aee:	f006 f8c7 	bl	bc80 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
    5af2:	4b7a      	ldr	r3, [pc, #488]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5af4:	4602      	mov	r2, r0
    5af6:	2137      	movs	r1, #55	; 0x37
    5af8:	4620      	mov	r0, r4
    5afa:	f7ff fecf 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MAX_POOL_2D(), ParseOpData);
    5afe:	f007 f9d7 	bl	ceb0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    5b02:	4b76      	ldr	r3, [pc, #472]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b04:	4602      	mov	r2, r0
    5b06:	2111      	movs	r1, #17
    5b08:	4620      	mov	r0, r4
    5b0a:	f7ff fec7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MEAN(), ParseOpData);
    5b0e:	f007 fe49 	bl	d7a4 <_ZN6tflite3ops5micro13Register_MEANEv>
    5b12:	4b72      	ldr	r3, [pc, #456]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b14:	4602      	mov	r2, r0
    5b16:	2128      	movs	r1, #40	; 0x28
    5b18:	4620      	mov	r0, r4
    5b1a:	f7ff febf 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MINIMUM(), ParseOpData);
    5b1e:	f006 f8b3 	bl	bc88 <_ZN6tflite3ops5micro16Register_MINIMUMEv>
    5b22:	4b6e      	ldr	r3, [pc, #440]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b24:	4602      	mov	r2, r0
    5b26:	2139      	movs	r1, #57	; 0x39
    5b28:	4620      	mov	r0, r4
    5b2a:	f7ff feb7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MUL, *tflite::ops::micro::Register_MUL(),
    5b2e:	f006 faf5 	bl	c11c <_ZN6tflite3ops5micro12Register_MULEv>
                      ParseOpData);
    5b32:	4b6a      	ldr	r3, [pc, #424]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_MUL, *tflite::ops::micro::Register_MUL(),
    5b34:	4602      	mov	r2, r0
                      ParseOpData);
    5b36:	2112      	movs	r1, #18
    5b38:	4620      	mov	r0, r4
    5b3a:	f7ff feaf 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_NEG, *tflite::ops::micro::Register_NEG(),
    5b3e:	f006 fc3d 	bl	c3bc <_ZN6tflite3ops5micro12Register_NEGEv>
                      ParseOpData);
    5b42:	4b66      	ldr	r3, [pc, #408]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_NEG, *tflite::ops::micro::Register_NEG(),
    5b44:	4602      	mov	r2, r0
                      ParseOpData);
    5b46:	213b      	movs	r1, #59	; 0x3b
    5b48:	4620      	mov	r0, r4
    5b4a:	f7ff fea7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_NOT_EQUAL(), ParseOpData);
    5b4e:	f001 fe39 	bl	77c4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
    5b52:	4b62      	ldr	r3, [pc, #392]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b54:	4602      	mov	r2, r0
    5b56:	2148      	movs	r1, #72	; 0x48
    5b58:	4620      	mov	r0, r4
    5b5a:	f7ff fe9f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PACK(), ParseOpData);
    5b5e:	f006 fe67 	bl	c830 <_ZN6tflite3ops5micro13Register_PACKEv>
    5b62:	4b5e      	ldr	r3, [pc, #376]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b64:	4602      	mov	r2, r0
    5b66:	2153      	movs	r1, #83	; 0x53
    5b68:	4620      	mov	r0, r4
    5b6a:	f7ff fe97 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PAD, *tflite::ops::micro::Register_PAD(),
    5b6e:	f006 ff3d 	bl	c9ec <_ZN6tflite3ops5micro12Register_PADEv>
                      ParseOpData);
    5b72:	4b5a      	ldr	r3, [pc, #360]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_PAD, *tflite::ops::micro::Register_PAD(),
    5b74:	4602      	mov	r2, r0
                      ParseOpData);
    5b76:	2122      	movs	r1, #34	; 0x22
    5b78:	4620      	mov	r0, r4
    5b7a:	f7ff fe8f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PADV2(), ParseOpData);
    5b7e:	f006 ff39 	bl	c9f4 <_ZN6tflite3ops5micro14Register_PADV2Ev>
    5b82:	4b56      	ldr	r3, [pc, #344]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b84:	4602      	mov	r2, r0
    5b86:	213c      	movs	r1, #60	; 0x3c
    5b88:	4620      	mov	r0, r4
    5b8a:	f7ff fe87 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PRELU(), ParseOpData);
    5b8e:	f007 fafd 	bl	d18c <_ZN6tflite3ops5micro14Register_PRELUEv>
    5b92:	4b52      	ldr	r3, [pc, #328]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b94:	4602      	mov	r2, r0
    5b96:	2136      	movs	r1, #54	; 0x36
    5b98:	4620      	mov	r0, r4
    5b9a:	f7ff fe7f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_QUANTIZE(), ParseQuantize);
    5b9e:	f007 fda9 	bl	d6f4 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
    5ba2:	4b53      	ldr	r3, [pc, #332]	; (5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x3a0>)
    5ba4:	4602      	mov	r2, r0
    5ba6:	2172      	movs	r1, #114	; 0x72
    5ba8:	4620      	mov	r0, r4
    5baa:	f7ff fe77 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RELU(), ParseOpData);
    5bae:	f001 fae3 	bl	7178 <_ZN6tflite3ops5micro13Register_RELUEv>
    5bb2:	4b4a      	ldr	r3, [pc, #296]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5bb4:	4602      	mov	r2, r0
    5bb6:	2113      	movs	r1, #19
    5bb8:	4620      	mov	r0, r4
    5bba:	f7ff fe6f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RELU6(), ParseOpData);
    5bbe:	f001 fadf 	bl	7180 <_ZN6tflite3ops5micro14Register_RELU6Ev>
    5bc2:	4b46      	ldr	r3, [pc, #280]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5bc4:	4602      	mov	r2, r0
    5bc6:	2115      	movs	r1, #21
    5bc8:	4620      	mov	r0, r4
    5bca:	f7ff fe67 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    5bce:	f008 f8ff 	bl	ddd0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    5bd2:	4b48      	ldr	r3, [pc, #288]	; (5cf4 <_ZN6tflite14AllOpsResolverC1Ev+0x3a4>)
    5bd4:	4602      	mov	r2, r0
    5bd6:	2116      	movs	r1, #22
    5bd8:	4620      	mov	r0, r4
    5bda:	f7ff fe5f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
    5bde:	f008 f953 	bl	de88 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>
                      ParseOpData);
    5be2:	4b3e      	ldr	r3, [pc, #248]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
    5be4:	4602      	mov	r2, r0
                      ParseOpData);
    5be6:	2161      	movs	r1, #97	; 0x61
    5be8:	4620      	mov	r0, r4
    5bea:	f7ff fe57 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ROUND(), ParseOpData);
    5bee:	f008 fa8f 	bl	e110 <_ZN6tflite3ops5micro14Register_ROUNDEv>
    5bf2:	4b3a      	ldr	r3, [pc, #232]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5bf4:	4602      	mov	r2, r0
    5bf6:	2174      	movs	r1, #116	; 0x74
    5bf8:	4620      	mov	r0, r4
    5bfa:	f7ff fe4f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RSQRT(), ParseOpData);
    5bfe:	f005 f89f 	bl	ad40 <_ZN6tflite3ops5micro14Register_RSQRTEv>
    5c02:	4b36      	ldr	r3, [pc, #216]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c04:	4602      	mov	r2, r0
    5c06:	214c      	movs	r1, #76	; 0x4c
    5c08:	4620      	mov	r0, r4
    5c0a:	f7ff fe47 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SIN, *tflite::ops::micro::Register_SIN(),
    5c0e:	f005 f887 	bl	ad20 <_ZN6tflite3ops5micro12Register_SINEv>
                      ParseOpData);
    5c12:	4b32      	ldr	r3, [pc, #200]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_SIN, *tflite::ops::micro::Register_SIN(),
    5c14:	4602      	mov	r2, r0
                      ParseOpData);
    5c16:	2142      	movs	r1, #66	; 0x42
    5c18:	4620      	mov	r0, r4
    5c1a:	f7ff fe3f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
    5c1e:	f008 fb47 	bl	e2b0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
    5c22:	4b35      	ldr	r3, [pc, #212]	; (5cf8 <_ZN6tflite14AllOpsResolverC1Ev+0x3a8>)
    5c24:	4602      	mov	r2, r0
    5c26:	2119      	movs	r1, #25
    5c28:	4620      	mov	r0, r4
    5c2a:	f7ff fe37 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SPLIT(), ParseOpData);
    5c2e:	f008 fd9f 	bl	e770 <_ZN6tflite3ops5micro14Register_SPLITEv>
    5c32:	4b2a      	ldr	r3, [pc, #168]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c34:	4602      	mov	r2, r0
    5c36:	2131      	movs	r1, #49	; 0x31
    5c38:	4620      	mov	r0, r4
    5c3a:	f7ff fe2f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SQRT(), ParseOpData);
    5c3e:	f005 f87b 	bl	ad38 <_ZN6tflite3ops5micro13Register_SQRTEv>
    5c42:	4b26      	ldr	r3, [pc, #152]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c44:	4602      	mov	r2, r0
    5c46:	214b      	movs	r1, #75	; 0x4b
    5c48:	4620      	mov	r0, r4
    5c4a:	f7ff fe27 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SQUARE(), ParseOpData);
    5c4e:	f005 f87b 	bl	ad48 <_ZN6tflite3ops5micro15Register_SQUAREEv>
    5c52:	4b22      	ldr	r3, [pc, #136]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c54:	4602      	mov	r2, r0
    5c56:	215c      	movs	r1, #92	; 0x5c
    5c58:	4620      	mov	r0, r4
    5c5a:	f7ff fe1f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_STRIDED_SLICE(),
    5c5e:	f008 feb5 	bl	e9cc <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
                      ParseOpData);
    5c62:	4b1e      	ldr	r3, [pc, #120]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_STRIDED_SLICE(),
    5c64:	4602      	mov	r2, r0
                      ParseOpData);
    5c66:	212d      	movs	r1, #45	; 0x2d
    5c68:	4620      	mov	r0, r4
    5c6a:	f7ff fe17 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SUB, *tflite::ops::micro::Register_SUB(),
    5c6e:	f008 ff95 	bl	eb9c <_ZN6tflite3ops5micro12Register_SUBEv>
                      ParseOpData);
    5c72:	4b1a      	ldr	r3, [pc, #104]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_SUB, *tflite::ops::micro::Register_SUB(),
    5c74:	4602      	mov	r2, r0
                      ParseOpData);
    5c76:	2129      	movs	r1, #41	; 0x29
    5c78:	4620      	mov	r0, r4
    5c7a:	f7ff fe0f 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SVDF(), ParseSvdf);
    5c7e:	f009 fe81 	bl	f984 <_ZN6tflite3ops5micro13Register_SVDFEv>
    5c82:	4b1e      	ldr	r3, [pc, #120]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x3ac>)
    5c84:	4602      	mov	r2, r0
    5c86:	211b      	movs	r1, #27
    5c88:	4620      	mov	r0, r4
    5c8a:	f7ff fe07 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_TANH(), ParseOpData);
    5c8e:	f009 fe7d 	bl	f98c <_ZN6tflite3ops5micro13Register_TANHEv>
    5c92:	4b12      	ldr	r3, [pc, #72]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c94:	4602      	mov	r2, r0
    5c96:	211c      	movs	r1, #28
    5c98:	4620      	mov	r0, r4
    5c9a:	f7ff fdff 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_UNPACK(), ParseOpData);
    5c9e:	f00a f99f 	bl	ffe0 <_ZN6tflite3ops5micro15Register_UNPACKEv>
    5ca2:	4b0e      	ldr	r3, [pc, #56]	; (5cdc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ca4:	4602      	mov	r2, r0
    5ca6:	2158      	movs	r1, #88	; 0x58
    5ca8:	4620      	mov	r0, r4
    5caa:	f7ff fdf7 	bl	589c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  AddTanh();
  AddUnpack();

  // TODO(b/159644355): Figure out if custom Ops belong in AllOpsResolver.
  TfLiteRegistration* registration =
      tflite::ops::micro::custom::Register_ETHOSU();
    5cae:	f013 ff72 	bl	19b96 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>
  if (registration) {
    5cb2:	4605      	mov	r5, r0
    5cb4:	b160      	cbz	r0, 5cd0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    AddCustom(tflite::ops::micro::custom::GetString_ETHOSU(), registration);
    5cb6:	f005 f84f 	bl	ad58 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>
    if (registrations_len_ >= tOpCount) {
    5cba:	59a3      	ldr	r3, [r4, r6]
    5cbc:	2b7f      	cmp	r3, #127	; 0x7f
    5cbe:	4680      	mov	r8, r0
    5cc0:	d920      	bls.n	5d04 <_ZN6tflite14AllOpsResolverC1Ev+0x3b4>
      if (error_reporter_) {
    5cc2:	59e0      	ldr	r0, [r4, r7]
    5cc4:	b120      	cbz	r0, 5cd0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
        TF_LITE_REPORT_ERROR(
    5cc6:	490e      	ldr	r1, [pc, #56]	; (5d00 <_ZN6tflite14AllOpsResolverC1Ev+0x3b0>)
    5cc8:	2380      	movs	r3, #128	; 0x80
    5cca:	4642      	mov	r2, r8
    5ccc:	f018 fae7 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
}
    5cd0:	4620      	mov	r0, r4
    5cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cd6:	bf00      	nop
    5cd8:	00028ab0 	.word	0x00028ab0
    5cdc:	00010571 	.word	0x00010571
    5ce0:	00010209 	.word	0x00010209
    5ce4:	000102c5 	.word	0x000102c5
    5ce8:	0001e317 	.word	0x0001e317
    5cec:	0001038d 	.word	0x0001038d
    5cf0:	0001e31b 	.word	0x0001e31b
    5cf4:	00010165 	.word	0x00010165
    5cf8:	000104f9 	.word	0x000104f9
    5cfc:	0001045d 	.word	0x0001045d
    5d00:	00029c19 	.word	0x00029c19
    if (FindOp(name) != nullptr) {
    5d04:	4601      	mov	r1, r0
    5d06:	4620      	mov	r0, r4
    5d08:	f00f fc7b 	bl	15602 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>
    5d0c:	b138      	cbz	r0, 5d1e <_ZN6tflite14AllOpsResolverC1Ev+0x3ce>
      if (error_reporter_ != nullptr) {
    5d0e:	59e0      	ldr	r0, [r4, r7]
    5d10:	2800      	cmp	r0, #0
    5d12:	d0dd      	beq.n	5cd0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
        TF_LITE_REPORT_ERROR(error_reporter_,
    5d14:	490a      	ldr	r1, [pc, #40]	; (5d40 <_ZN6tflite14AllOpsResolverC1Ev+0x3f0>)
    5d16:	4642      	mov	r2, r8
    5d18:	f018 fac1 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5d1c:	e7d8      	b.n	5cd0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
    5d1e:	59a7      	ldr	r7, [r4, r6]
    registrations_len_ += 1;
    5d20:	1c7b      	adds	r3, r7, #1
    5d22:	51a3      	str	r3, [r4, r6]
    *new_registration = *registration;
    5d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d26:	eb04 1747 	add.w	r7, r4, r7, lsl #5
    5d2a:	1d3e      	adds	r6, r7, #4
    5d2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5d2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d32:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    new_registration->builtin_code = BuiltinOperator_CUSTOM;
    5d36:	2320      	movs	r3, #32
    new_registration->custom_name = name;
    5d38:	e9c7 3806 	strd	r3, r8, [r7, #24]
    5d3c:	e7c8      	b.n	5cd0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    5d3e:	bf00      	nop
    5d40:	00029c5b 	.word	0x00029c5b

00005d44 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
    5d44:	b538      	push	{r3, r4, r5, lr}
    5d46:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
    5d48:	4604      	mov	r4, r0
    5d4a:	b908      	cbnz	r0, 5d50 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
    5d4c:	f018 fc41 	bl	1e5d2 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    5d50:	2900      	cmp	r1, #0
    5d52:	d0fb      	beq.n	5d4c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
    5d54:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    5d56:	2204      	movs	r2, #4
    5d58:	68db      	ldr	r3, [r3, #12]
    5d5a:	2118      	movs	r1, #24
    5d5c:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    5d5e:	b138      	cbz	r0, 5d70 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
    5d60:	4b04      	ldr	r3, [pc, #16]	; (5d74 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
    5d62:	6085      	str	r5, [r0, #8]
    5d64:	e9c0 3400 	strd	r3, r4, [r0]
    5d68:	2300      	movs	r3, #0
    5d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    5d6e:	7303      	strb	r3, [r0, #12]
  return allocator;
}
    5d70:	bd38      	pop	{r3, r4, r5, pc}
    5d72:	bf00      	nop
    5d74:	00028cf0 	.word	0x00028cf0

00005d78 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    5d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d7a:	460f      	mov	r7, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5d7c:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
    5d7e:	4604      	mov	r4, r0
    5d80:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5d82:	f018 fb76 	bl	1e472 <_ZN6tflite14AlignPointerUpEPhj>
  if (aligned_arena != tensor_arena) {
    5d86:	4284      	cmp	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5d88:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
    5d8a:	d004      	beq.n	5d96 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
    5d8c:	1b02      	subs	r2, r0, r4
    5d8e:	4907      	ldr	r1, [pc, #28]	; (5dac <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
    5d90:	4630      	mov	r0, r6
    5d92:	f018 fa84 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    5d96:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    5d98:	4629      	mov	r1, r5
    5d9a:	1b52      	subs	r2, r2, r5
    5d9c:	4630      	mov	r0, r6
    5d9e:	f001 f8a3 	bl	6ee8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
    5da2:	4631      	mov	r1, r6
}
    5da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    5da8:	f7ff bfcc 	b.w	5d44 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
    5dac:	00029ca7 	.word	0x00029ca7

00005db0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
    5db0:	b570      	push	{r4, r5, r6, lr}
    5db2:	4604      	mov	r4, r0
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5db4:	6840      	ldr	r0, [r0, #4]
    5db6:	6803      	ldr	r3, [r0, #0]
                                                      void** ptr) {
    5db8:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5dba:	68db      	ldr	r3, [r3, #12]
    5dbc:	2210      	movs	r2, #16
                                                      void** ptr) {
    5dbe:	460e      	mov	r6, r1
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5dc0:	4798      	blx	r3
  if (data == nullptr) {
    5dc2:	b930      	cbnz	r0, 5dd2 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5dc4:	4904      	ldr	r1, [pc, #16]	; (5dd8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
    5dc6:	68a0      	ldr	r0, [r4, #8]
    5dc8:	4632      	mov	r2, r6
    5dca:	f018 fa68 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
    5dce:	2001      	movs	r0, #1
  }
  (*ptr) = data;
  return kTfLiteOk;
}
    5dd0:	bd70      	pop	{r4, r5, r6, pc}
  (*ptr) = data;
    5dd2:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    5dd4:	2000      	movs	r0, #0
    5dd6:	e7fb      	b.n	5dd0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x20>
    5dd8:	00029d12 	.word	0x00029d12

00005ddc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
    5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
    5de0:	6905      	ldr	r5, [r0, #16]
                                                         int* buffer_idx) {
    5de2:	4604      	mov	r4, r0
    5de4:	460e      	mov	r6, r1
    5de6:	4690      	mov	r8, r2
    5de8:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
    5dea:	b15d      	cbz	r5, 5e04 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
          memory_allocator_->GetTail()) {
    5dec:	6840      	ldr	r0, [r0, #4]
    5dee:	f00f fd4a 	bl	15886 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
  if (scratch_buffer_handles_ != nullptr &&
    5df2:	4285      	cmp	r5, r0
    5df4:	d006      	beq.n	5e04 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5df6:	4910      	ldr	r1, [pc, #64]	; (5e38 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x5c>)
    5df8:	68a0      	ldr	r0, [r4, #8]
    5dfa:	f018 fa50 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
    5dfe:	2001      	movs	r0, #1
  scratch_buffer_count_ += 1;
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
  return kTfLiteOk;
}
    5e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
    5e04:	6860      	ldr	r0, [r4, #4]
              alignof(internal::ScratchBufferHandle)));
    5e06:	6803      	ldr	r3, [r0, #0]
          memory_allocator_->AllocateFromTail(
    5e08:	2204      	movs	r2, #4
    5e0a:	68db      	ldr	r3, [r3, #12]
    5e0c:	210c      	movs	r1, #12
    5e0e:	4798      	blx	r3
  if (handle == nullptr) {
    5e10:	b928      	cbnz	r0, 5e1e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e12:	490a      	ldr	r1, [pc, #40]	; (5e3c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x60>)
    5e14:	68a0      	ldr	r0, [r4, #8]
    5e16:	4632      	mov	r2, r6
    5e18:	f018 fa41 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5e1c:	e7ef      	b.n	5dfe <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x22>
  *buffer_idx = scratch_buffer_count_;
    5e1e:	6963      	ldr	r3, [r4, #20]
  handle->node_idx = node_id;
    5e20:	6086      	str	r6, [r0, #8]
  *handle = {};
    5e22:	2500      	movs	r5, #0
  handle->bytes = bytes;
    5e24:	e9c0 5800 	strd	r5, r8, [r0]
  *buffer_idx = scratch_buffer_count_;
    5e28:	603b      	str	r3, [r7, #0]
  scratch_buffer_count_ += 1;
    5e2a:	6963      	ldr	r3, [r4, #20]
    5e2c:	3301      	adds	r3, #1
  scratch_buffer_handles_ = handle;
    5e2e:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return kTfLiteOk;
    5e32:	4628      	mov	r0, r5
    5e34:	e7e4      	b.n	5e00 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x24>
    5e36:	bf00      	nop
    5e38:	00029d42 	.word	0x00029d42
    5e3c:	00029da4 	.word	0x00029da4

00005e40 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    5e40:	b508      	push	{r3, lr}
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    5e42:	6943      	ldr	r3, [r0, #20]
    5e44:	428b      	cmp	r3, r1
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    5e46:	460a      	mov	r2, r1
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    5e48:	d805      	bhi.n	5e56 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e4a:	4907      	ldr	r1, [pc, #28]	; (5e68 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
    5e4c:	6880      	ldr	r0, [r0, #8]
    5e4e:	f018 fa26 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
    5e52:	2000      	movs	r0, #0
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
}
    5e54:	bd08      	pop	{r3, pc}
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
    5e56:	1a59      	subs	r1, r3, r1
    5e58:	6903      	ldr	r3, [r0, #16]
    5e5a:	220c      	movs	r2, #12
    5e5c:	fb02 3101 	mla	r1, r2, r1, r3
    5e60:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    5e64:	e7f6      	b.n	5e54 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x14>
    5e66:	bf00      	nop
    5e68:	00029dd9 	.word	0x00029dd9

00005e6c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:
  TF_LITE_ENSURE_STATUS(
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  return kTfLiteOk;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
    5e6c:	b538      	push	{r3, r4, r5, lr}
    5e6e:	460c      	mov	r4, r1
    5e70:	4605      	mov	r5, r0
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    5e72:	2108      	movs	r1, #8
    5e74:	4620      	mov	r0, r4
    5e76:	f00f fbf6 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e7a:	b178      	cbz	r0, 5e9c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x30>
    5e7c:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
    5e7e:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e80:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
    5e82:	588a      	ldr	r2, [r1, r2]
    5e84:	2a01      	cmp	r2, #1
    5e86:	d005      	beq.n	5e94 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e88:	4905      	ldr	r1, [pc, #20]	; (5ea0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x34>)
    5e8a:	68a8      	ldr	r0, [r5, #8]
    5e8c:	f018 fa07 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5e90:	2000      	movs	r0, #0
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
    5e92:	bd38      	pop	{r3, r4, r5, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5e94:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    5e96:	685b      	ldr	r3, [r3, #4]
    5e98:	4418      	add	r0, r3
  return (*subgraphs)[0];
    5e9a:	e7fa      	b.n	5e92 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x26>
  if (subgraphs->size() != 1) {
    5e9c:	6803      	ldr	r3, [r0, #0]
    5e9e:	deff      	udf	#255	; 0xff
    5ea0:	00029e04 	.word	0x00029e04

00005ea4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
    5ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5eac:	4604      	mov	r4, r0
    5eae:	4691      	mov	r9, r2
    5eb0:	461f      	mov	r7, r3
  TFLITE_DCHECK(model != nullptr);
    5eb2:	460e      	mov	r6, r1
    5eb4:	b909      	cbnz	r1, 5eba <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x16>
    5eb6:	f018 fb8c 	bl	1e5d2 <abort>
  TFLITE_DCHECK(context != nullptr);
    5eba:	2a00      	cmp	r2, #0
    5ebc:	d0fb      	beq.n	5eb6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  if (model_is_allocating_) {
    5ebe:	7b03      	ldrb	r3, [r0, #12]
    5ec0:	b133      	cbz	r3, 5ed0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5ec2:	4916      	ldr	r1, [pc, #88]	; (5f1c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x78>)
    5ec4:	6880      	ldr	r0, [r0, #8]
    5ec6:	f018 f9ea 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5eca:	2001      	movs	r0, #1
}
    5ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    5ed0:	f7ff ffcc 	bl	5e6c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
    5ed4:	4605      	mov	r5, r0
    5ed6:	2800      	cmp	r0, #0
    5ed8:	d0ed      	beq.n	5eb6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  model_is_allocating_ = true;
    5eda:	2301      	movs	r3, #1
    5edc:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(
    5ede:	464a      	mov	r2, r9
    5ee0:	4603      	mov	r3, r0
    5ee2:	4631      	mov	r1, r6
    5ee4:	4620      	mov	r0, r4
    5ee6:	f00f fbe8 	bl	156ba <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>
    5eea:	2800      	cmp	r0, #0
    5eec:	d1ee      	bne.n	5ecc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
    5eee:	6823      	ldr	r3, [r4, #0]
    5ef0:	4642      	mov	r2, r8
    5ef2:	691b      	ldr	r3, [r3, #16]
    5ef4:	4629      	mov	r1, r5
    5ef6:	4620      	mov	r0, r4
    5ef8:	4798      	blx	r3
    5efa:	2800      	cmp	r0, #0
    5efc:	d1e6      	bne.n	5ecc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    5efe:	6823      	ldr	r3, [r4, #0]
    5f00:	f8d8 2000 	ldr.w	r2, [r8]
    5f04:	9208      	str	r2, [sp, #32]
    5f06:	f8d3 e014 	ldr.w	lr, [r3, #20]
    5f0a:	462a      	mov	r2, r5
    5f0c:	463b      	mov	r3, r7
    5f0e:	4631      	mov	r1, r6
    5f10:	4620      	mov	r0, r4
    5f12:	46f4      	mov	ip, lr
}
    5f14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    5f18:	4760      	bx	ip
    5f1a:	bf00      	nop
    5f1c:	00029e2d 	.word	0x00029e2d

00005f20 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
  if (!model_is_allocating_) {
    5f20:	7b03      	ldrb	r3, [r0, #12]
                                                   TfLiteContext* context) {
    5f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f26:	4604      	mov	r4, r0
    5f28:	460f      	mov	r7, r1
    5f2a:	4616      	mov	r6, r2
  if (!model_is_allocating_) {
    5f2c:	b933      	cbnz	r3, 5f3c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5f2e:	4910      	ldr	r1, [pc, #64]	; (5f70 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x50>)
    5f30:	6880      	ldr	r0, [r0, #8]
    5f32:	f018 f9b4 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5f36:	2001      	movs	r0, #1
}
    5f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    5f3c:	f7ff ff96 	bl	5e6c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
    5f40:	4605      	mov	r5, r0
    5f42:	b908      	cbnz	r0, 5f48 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x28>
    5f44:	f018 fb45 	bl	1e5d2 <abort>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
    5f48:	6823      	ldr	r3, [r4, #0]
    5f4a:	4632      	mov	r2, r6
    5f4c:	f8d3 801c 	ldr.w	r8, [r3, #28]
    5f50:	4639      	mov	r1, r7
    5f52:	4603      	mov	r3, r0
    5f54:	4620      	mov	r0, r4
    5f56:	47c0      	blx	r8
    5f58:	2800      	cmp	r0, #0
    5f5a:	d1ed      	bne.n	5f38 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
    5f5c:	6823      	ldr	r3, [r4, #0]
    5f5e:	462a      	mov	r2, r5
    5f60:	699b      	ldr	r3, [r3, #24]
    5f62:	4631      	mov	r1, r6
    5f64:	4620      	mov	r0, r4
    5f66:	4798      	blx	r3
    5f68:	2800      	cmp	r0, #0
    5f6a:	d1e5      	bne.n	5f38 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  model_is_allocating_ = false;
    5f6c:	7320      	strb	r0, [r4, #12]
  return kTfLiteOk;
    5f6e:	e7e3      	b.n	5f38 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
    5f70:	00029e82 	.word	0x00029e82

00005f74 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
    5f74:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5f76:	6803      	ldr	r3, [r0, #0]
    5f78:	4299      	cmp	r1, r3
    5f7a:	d306      	bcc.n	5f8a <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
    5f7c:	4b05      	ldr	r3, [pc, #20]	; (5f94 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
    5f7e:	4a06      	ldr	r2, [pc, #24]	; (5f98 <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
    5f80:	4806      	ldr	r0, [pc, #24]	; (5f9c <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
    5f82:	f240 1101 	movw	r1, #257	; 0x101
    5f86:	f00e fa47 	bl	14418 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    5f8a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  }
    5f8e:	e9d1 0101 	ldrd	r0, r1, [r1, #4]
    5f92:	bd08      	pop	{r3, pc}
    5f94:	00029ecd 	.word	0x00029ecd
    5f98:	00029ed8 	.word	0x00029ed8
    5f9c:	00029fab 	.word	0x00029fab

00005fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
    5fa0:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5fa2:	6803      	ldr	r3, [r0, #0]
    5fa4:	4299      	cmp	r1, r3
    5fa6:	d306      	bcc.n	5fb6 <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
    5fa8:	4b05      	ldr	r3, [pc, #20]	; (5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
    5faa:	4a06      	ldr	r2, [pc, #24]	; (5fc4 <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
    5fac:	4806      	ldr	r0, [pc, #24]	; (5fc8 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
    5fae:	f240 1101 	movw	r1, #257	; 0x101
    5fb2:	f00e fa31 	bl	14418 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    5fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  }
    5fba:	6848      	ldr	r0, [r1, #4]
    5fbc:	bd08      	pop	{r3, pc}
    5fbe:	bf00      	nop
    5fc0:	00029ecd 	.word	0x00029ecd
    5fc4:	0002a004 	.word	0x0002a004
    5fc8:	00029fab 	.word	0x00029fab

00005fcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    5fcc:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5fce:	6803      	ldr	r3, [r0, #0]
    5fd0:	4299      	cmp	r1, r3
    5fd2:	d306      	bcc.n	5fe2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
    5fd4:	4b06      	ldr	r3, [pc, #24]	; (5ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
    5fd6:	4a07      	ldr	r2, [pc, #28]	; (5ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
    5fd8:	4807      	ldr	r0, [pc, #28]	; (5ff8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
    5fda:	f240 1101 	movw	r1, #257	; 0x101
    5fde:	f00e fa1b 	bl	14418 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5fe2:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    5fe4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    5fe8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    5fec:	4410      	add	r0, r2
    5fee:	bd08      	pop	{r3, pc}
    5ff0:	00029ecd 	.word	0x00029ecd
    5ff4:	0002a0c3 	.word	0x0002a0c3
    5ff8:	00029fab 	.word	0x00029fab

00005ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    5ffc:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5ffe:	6803      	ldr	r3, [r0, #0]
    6000:	4299      	cmp	r1, r3
    6002:	d306      	bcc.n	6012 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x16>
    6004:	4b06      	ldr	r3, [pc, #24]	; (6020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x24>)
    6006:	4a07      	ldr	r2, [pc, #28]	; (6024 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x28>)
    6008:	4807      	ldr	r0, [pc, #28]	; (6028 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x2c>)
    600a:	f240 1101 	movw	r1, #257	; 0x101
    600e:	f00e fa03 	bl	14418 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6012:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6014:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6018:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    601c:	4410      	add	r0, r2
    601e:	bd08      	pop	{r3, pc}
    6020:	00029ecd 	.word	0x00029ecd
    6024:	0002a1b4 	.word	0x0002a1b4
    6028:	00029fab 	.word	0x00029fab

0000602c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    602c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    602e:	6803      	ldr	r3, [r0, #0]
    6030:	4299      	cmp	r1, r3
    6032:	d306      	bcc.n	6042 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
    6034:	4b06      	ldr	r3, [pc, #24]	; (6050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
    6036:	4a07      	ldr	r2, [pc, #28]	; (6054 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
    6038:	4807      	ldr	r0, [pc, #28]	; (6058 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
    603a:	f240 1101 	movw	r1, #257	; 0x101
    603e:	f00e f9eb 	bl	14418 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6042:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6044:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6048:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    604c:	4410      	add	r0, r2
    604e:	bd08      	pop	{r3, pc}
    6050:	00029ecd 	.word	0x00029ecd
    6054:	0002a2a9 	.word	0x0002a2a9
    6058:	00029fab 	.word	0x00029fab

0000605c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    605c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6060:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    6062:	460d      	mov	r5, r1
    6064:	4607      	mov	r7, r0
  *result = {};
    6066:	2100      	movs	r1, #0
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    6068:	4691      	mov	r9, r2
  *result = {};
    606a:	4620      	mov	r0, r4
    606c:	2240      	movs	r2, #64	; 0x40
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    606e:	4698      	mov	r8, r3
  *result = {};
    6070:	f018 fad2 	bl	1e618 <memset>
    auto field_offset = GetOptionalFieldOffset(field);
    6074:	2106      	movs	r1, #6
    6076:	4628      	mov	r0, r5
    6078:	f00f faf5 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    607c:	b100      	cbz	r0, 6080 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24>
    607e:	5628      	ldrsb	r0, [r5, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6080:	4642      	mov	r2, r8
    6082:	4621      	mov	r1, r4
    6084:	b2c0      	uxtb	r0, r0
    6086:	f00a f83b 	bl	10100 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    608a:	4606      	mov	r6, r0
    608c:	2800      	cmp	r0, #0
    608e:	d161      	bne.n	6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  result->is_variable = flatbuffer_tensor.is_variable();
    6090:	4628      	mov	r0, r5
    6092:	f00f fb04 	bl	1569e <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
    6096:	2108      	movs	r1, #8
    6098:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    609c:	4628      	mov	r0, r5
    609e:	f00f fae2 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    60a2:	2800      	cmp	r0, #0
    60a4:	d05a      	beq.n	615c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    60a6:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    60a8:	4648      	mov	r0, r9
    60aa:	f7ff ffbf 	bl	602c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    60ae:	b148      	cbz	r0, 60c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    60b0:	2104      	movs	r1, #4
    60b2:	f00f fb1a 	bl	156ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
    if (auto* array = buffer->data()) {
    60b6:	b128      	cbz	r0, 60c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
      if (array->size()) {
    60b8:	6803      	ldr	r3, [r0, #0]
    60ba:	b11b      	cbz	r3, 60c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    60bc:	3004      	adds	r0, #4
        result->allocation_type = kTfLiteMmapRo;
    60be:	2301      	movs	r3, #1
        result->data.data =
    60c0:	6060      	str	r0, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
    60c2:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
    60c4:	6863      	ldr	r3, [r4, #4]
    60c6:	b90b      	cbnz	r3, 60cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x70>
    result->allocation_type = kTfLiteArenaRw;
    60c8:	2302      	movs	r3, #2
    60ca:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    60cc:	4643      	mov	r3, r8
    60ce:	aa01      	add	r2, sp, #4
    60d0:	f104 0118 	add.w	r1, r4, #24
    60d4:	4628      	mov	r0, r5
    60d6:	f018 f9de 	bl	1e496 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    60da:	4606      	mov	r6, r0
    60dc:	2800      	cmp	r0, #0
    60de:	d139      	bne.n	6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    60e0:	2104      	movs	r1, #4
    60e2:	4628      	mov	r0, r5
    60e4:	f00f fb0a 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    60e8:	2800      	cmp	r0, #0
    60ea:	d139      	bne.n	6160 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    60ec:	4b3c      	ldr	r3, [pc, #240]	; (61e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x184>)
    60ee:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
    60f0:	210c      	movs	r1, #12
    60f2:	4628      	mov	r0, r5
    60f4:	f00f fab7 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60f8:	b360      	cbz	r0, 6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    auto p = data_ + field_offset;
    60fa:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60fc:	582d      	ldr	r5, [r5, r0]
      src_quantization->zero_point() &&
    60fe:	1955      	adds	r5, r2, r5
    6100:	d028      	beq.n	6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  if (src_quantization && src_quantization->scale() &&
    6102:	4628      	mov	r0, r5
    6104:	f00f fab7 	bl	15676 <_ZNK6tflite22QuantizationParameters5scaleEv>
    6108:	4681      	mov	r9, r0
    610a:	b318      	cbz	r0, 6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    610c:	6803      	ldr	r3, [r0, #0]
    610e:	b30b      	cbz	r3, 6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
    6110:	4628      	mov	r0, r5
    6112:	f00f faba 	bl	1568a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
    6116:	b1e8      	cbz	r0, 6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
    6118:	6803      	ldr	r3, [r0, #0]
    611a:	b1db      	cbz	r3, 6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    611c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    result->params.scale = src_quantization->scale()->Get(0);
    6120:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    6122:	4628      	mov	r0, r5
    6124:	f00f fab1 	bl	1568a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    6128:	2100      	movs	r1, #0
    612a:	f7ff ff23 	bl	5f74 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
    612e:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
    6130:	4628      	mov	r0, r5
    6132:	f00f faa0 	bl	15676 <_ZNK6tflite22QuantizationParameters5scaleEv>
                                        alignof(TfLiteAffineQuantization)));
    6136:	683b      	ldr	r3, [r7, #0]
    int channels = src_quantization->scale()->size();
    6138:	f8d0 a000 	ldr.w	sl, [r0]
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
    613c:	68db      	ldr	r3, [r3, #12]
    613e:	2204      	movs	r2, #4
    6140:	210c      	movs	r1, #12
    6142:	4638      	mov	r0, r7
    6144:	4798      	blx	r3
    if (quantization == nullptr) {
    6146:	4681      	mov	r9, r0
    6148:	b988      	cbnz	r0, 616e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x112>
      TF_LITE_REPORT_ERROR(error_reporter,
    614a:	4926      	ldr	r1, [pc, #152]	; (61e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>)
      TF_LITE_REPORT_ERROR(error_reporter,
    614c:	4640      	mov	r0, r8
    614e:	f018 f8a6 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6152:	2601      	movs	r6, #1
}
    6154:	4630      	mov	r0, r6
    6156:	b003      	add	sp, #12
    6158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    615c:	4601      	mov	r1, r0
    615e:	e7a3      	b.n	60a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4c>
  TFLITE_DCHECK(error_reporter != nullptr);
    6160:	f1b8 0f00 	cmp.w	r8, #0
    6164:	d101      	bne.n	616a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
    6166:	f018 fa34 	bl	1e5d2 <abort>
    *result = const_cast<kTfLiteArrayType*>(
    616a:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    616c:	e7c0      	b.n	60f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x94>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    616e:	683b      	ldr	r3, [r7, #0]
    6170:	4650      	mov	r0, sl
    6172:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    6176:	f7fa f98f 	bl	498 <TfLiteIntArrayGetSizeInBytes>
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    617a:	2204      	movs	r2, #4
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    617c:	4601      	mov	r1, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    617e:	4638      	mov	r0, r7
    6180:	47d8      	blx	fp
    6182:	4607      	mov	r7, r0
    quantization->zero_point =
    6184:	f8c9 0004 	str.w	r0, [r9, #4]
    if (quantization->zero_point == nullptr) {
    6188:	b908      	cbnz	r0, 618e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter,
    618a:	4917      	ldr	r1, [pc, #92]	; (61e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>)
    618c:	e7de      	b.n	614c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    618e:	4628      	mov	r0, r5
    6190:	f00f fa71 	bl	15676 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
    6194:	f1b8 0f00 	cmp.w	r8, #0
    6198:	d0e5      	beq.n	6166 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    619a:	2800      	cmp	r0, #0
    619c:	d0e3      	beq.n	6166 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
    *result = const_cast<kTfLiteArrayType*>(
    619e:	f8c9 0000 	str.w	r0, [r9]
    for (int i = 0; i < channels; i++) {
    61a2:	f04f 0800 	mov.w	r8, #0
    quantization->zero_point->size = channels;
    61a6:	f8c7 a000 	str.w	sl, [r7]
    for (int i = 0; i < channels; i++) {
    61aa:	45c2      	cmp	sl, r8
    61ac:	dd0a      	ble.n	61c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x168>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    61ae:	4628      	mov	r0, r5
    61b0:	f00f fa6b 	bl	1568a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    61b4:	4641      	mov	r1, r8
    61b6:	f7ff fedd 	bl	5f74 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
    61ba:	f108 0801 	add.w	r8, r8, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    61be:	f847 0f04 	str.w	r0, [r7, #4]!
    for (int i = 0; i < channels; i++) {
    61c2:	e7f2      	b.n	61aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x14e>
    auto field_offset = GetOptionalFieldOffset(field);
    61c4:	2110      	movs	r1, #16
    61c6:	4628      	mov	r0, r5
    61c8:	f00f fa4d 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    61cc:	b100      	cbz	r0, 61d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x174>
    61ce:	5828      	ldr	r0, [r5, r0]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    61d0:	f8c9 0008 	str.w	r0, [r9, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    61d4:	2301      	movs	r3, #1
    61d6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    61da:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    61de:	e7b9      	b.n	6154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    61e0:	00028ccc 	.word	0x00028ccc
    61e4:	0002a39a 	.word	0x0002a39a
    61e8:	0002a3c8 	.word	0x0002a3c8

000061ec <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
    61ec:	e92d 4fe3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, sl, fp, lr}
    61f0:	4606      	mov	r6, r0
    61f2:	460f      	mov	r7, r1
    61f4:	4690      	mov	r8, r2
    61f6:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    61f8:	2500      	movs	r5, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    61fa:	2104      	movs	r1, #4
    61fc:	4648      	mov	r0, r9
    61fe:	f00f fa86 	bl	1570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    6202:	6803      	ldr	r3, [r0, #0]
    6204:	429d      	cmp	r5, r3
    6206:	d224      	bcs.n	6252 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66>
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
    6208:	4629      	mov	r1, r5
    620a:	f7ff fedf 	bl	5fcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    620e:	210c      	movs	r1, #12
    6210:	4682      	mov	sl, r0
    6212:	4638      	mov	r0, r7
    6214:	f00f fa27 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    6218:	f8d6 b004 	ldr.w	fp, [r6, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    621c:	4602      	mov	r2, r0
    621e:	b110      	cbz	r0, 6226 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a>
    6220:	58ba      	ldr	r2, [r7, r2]
    auto p = data_ + field_offset;
    6222:	1838      	adds	r0, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6224:	4402      	add	r2, r0
    6226:	f8d8 3008 	ldr.w	r3, [r8, #8]
    622a:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    622e:	9300      	str	r3, [sp, #0]
    6230:	4651      	mov	r1, sl
    6232:	68b3      	ldr	r3, [r6, #8]
    6234:	4658      	mov	r0, fp
    6236:	f7ff ff11 	bl	605c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    if (status != kTfLiteOk) {
    623a:	b140      	cbz	r0, 624e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x62>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    623c:	4906      	ldr	r1, [pc, #24]	; (6258 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6c>)
    623e:	68b0      	ldr	r0, [r6, #8]
    6240:	462a      	mov	r2, r5
    6242:	f018 f82c 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6246:	2001      	movs	r0, #1
}
    6248:	b002      	add	sp, #8
    624a:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    624e:	3501      	adds	r5, #1
    6250:	e7d3      	b.n	61fa <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe>
  return kTfLiteOk;
    6252:	2000      	movs	r0, #0
    6254:	e7f8      	b.n	6248 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    6256:	bf00      	nop
    6258:	0002a3f6 	.word	0x0002a3f6

0000625c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
                                               const SubGraph* subgraph) {
    625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6260:	4606      	mov	r6, r0
    6262:	460c      	mov	r4, r1
    6264:	4691      	mov	r9, r2
  for (size_t i = 0; i < context->tensors_size; ++i) {
    6266:	2500      	movs	r5, #0
    6268:	6823      	ldr	r3, [r4, #0]
    626a:	42ab      	cmp	r3, r5
    626c:	d926      	bls.n	62bc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x60>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    626e:	2104      	movs	r1, #4
    6270:	4648      	mov	r0, r9
    6272:	f00f fa4c 	bl	1570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    if (subgraph->tensors()->Get(i)->is_variable()) {
    6276:	4629      	mov	r1, r5
    6278:	f7ff fea8 	bl	5fcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    627c:	f00f fa0f 	bl	1569e <_ZNK6tflite6Tensor11is_variableEv>
    6280:	ea4f 1885 	mov.w	r8, r5, lsl #6
    6284:	b1a0      	cbz	r0, 62b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
    6286:	68a7      	ldr	r7, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    6288:	6870      	ldr	r0, [r6, #4]
    628a:	4447      	add	r7, r8
          context->tensors[i].bytes, kBufferAlignment);
    628c:	6803      	ldr	r3, [r0, #0]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    628e:	69b9      	ldr	r1, [r7, #24]
    6290:	68db      	ldr	r3, [r3, #12]
    6292:	2210      	movs	r2, #16
    6294:	4798      	blx	r3
      if (context->tensors[i].data.data == nullptr) {
    6296:	68a3      	ldr	r3, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    6298:	6078      	str	r0, [r7, #4]
      if (context->tensors[i].data.data == nullptr) {
    629a:	4443      	add	r3, r8
    629c:	685a      	ldr	r2, [r3, #4]
    629e:	b93a      	cbnz	r2, 62b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
        TF_LITE_REPORT_ERROR(error_reporter_,
    62a0:	699a      	ldr	r2, [r3, #24]
    62a2:	4907      	ldr	r1, [pc, #28]	; (62c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x64>)
    62a4:	68b0      	ldr	r0, [r6, #8]
    62a6:	f017 fffa 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    62aa:	2001      	movs	r0, #1
}
    62ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tflite::ResetVariableTensor(&(context->tensors[i]));
    62b0:	68a0      	ldr	r0, [r4, #8]
    62b2:	4440      	add	r0, r8
    62b4:	f018 f865 	bl	1e382 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
    62b8:	3501      	adds	r5, #1
    62ba:	e7d5      	b.n	6268 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc>
  return kTfLiteOk;
    62bc:	2000      	movs	r0, #0
    62be:	e7f5      	b.n	62ac <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x50>
    62c0:	0002a415 	.word	0x0002a415

000062c4 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
    62c4:	b538      	push	{r3, r4, r5, lr}
    62c6:	460c      	mov	r4, r1
    62c8:	4605      	mov	r5, r0
    62ca:	2104      	movs	r1, #4
    62cc:	4610      	mov	r0, r2
    62ce:	f00f fa1e 	bl	1570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  context->tensors_size = subgraph->tensors()->size();
    62d2:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    62d4:	6868      	ldr	r0, [r5, #4]
  context->tensors_size = subgraph->tensors()->size();
    62d6:	6021      	str	r1, [r4, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
    62d8:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    62da:	2204      	movs	r2, #4
    62dc:	68db      	ldr	r3, [r3, #12]
    62de:	0189      	lsls	r1, r1, #6
    62e0:	4798      	blx	r3
  context->tensors =
    62e2:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
    62e4:	b938      	cbnz	r0, 62f6 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    TF_LITE_REPORT_ERROR(
    62e6:	6822      	ldr	r2, [r4, #0]
    62e8:	4904      	ldr	r1, [pc, #16]	; (62fc <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x38>)
    62ea:	68a8      	ldr	r0, [r5, #8]
    62ec:	0192      	lsls	r2, r2, #6
    62ee:	f017 ffd6 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    62f2:	2001      	movs	r0, #1
}
    62f4:	bd38      	pop	{r3, r4, r5, pc}
  return kTfLiteOk;
    62f6:	2000      	movs	r0, #0
    62f8:	e7fc      	b.n	62f4 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x30>
    62fa:	bf00      	nop
    62fc:	0002a443 	.word	0x0002a443

00006300 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
    6300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6304:	ed2d 8b02 	vpush	{d8}
    6308:	460c      	mov	r4, r1
    630a:	b089      	sub	sp, #36	; 0x24
    630c:	4605      	mov	r5, r0
    auto field_offset = GetOptionalFieldOffset(field);
    630e:	2106      	movs	r1, #6
    6310:	4620      	mov	r0, r4
    6312:	ee08 2a90 	vmov	s17, r2
    6316:	4698      	mov	r8, r3
    6318:	f00f f9a5 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    631c:	b340      	cbz	r0, 6370 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
    631e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6320:	5820      	ldr	r0, [r4, r0]
    6322:	4403      	add	r3, r0
    6324:	9303      	str	r3, [sp, #12]
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
    6326:	686b      	ldr	r3, [r5, #4]
      : memory_allocator_(memory_allocator) {}
    6328:	4a5d      	ldr	r2, [pc, #372]	; (64a0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a0>)
    632a:	9c14      	ldr	r4, [sp, #80]	; 0x50
    632c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    6330:	f04f 0b00 	mov.w	fp, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6334:	ee18 0a90 	vmov	r0, s17
    6338:	210a      	movs	r1, #10
    633a:	f00f f9f1 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    633e:	6803      	ldr	r3, [r0, #0]
    6340:	459b      	cmp	fp, r3
    6342:	f080 80a9 	bcs.w	6498 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x198>
    const auto* op = subgraph->operators()->Get(i);
    6346:	4659      	mov	r1, fp
    6348:	f7ff fe58 	bl	5ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    634c:	2104      	movs	r1, #4
    634e:	4607      	mov	r7, r0
    6350:	f00f f989 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6354:	b170      	cbz	r0, 6374 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x74>
    6356:	583e      	ldr	r6, [r7, r0]
    if (index >= opcodes->size()) {
    6358:	9b03      	ldr	r3, [sp, #12]
    635a:	68a8      	ldr	r0, [r5, #8]
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	42b3      	cmp	r3, r6
    6360:	d80a      	bhi.n	6378 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x78>
      TF_LITE_REPORT_ERROR(error_reporter_,
    6362:	4950      	ldr	r1, [pc, #320]	; (64a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a4>)
    6364:	4632      	mov	r2, r6
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    6366:	f017 ff9a 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    636a:	f04f 0a01 	mov.w	sl, #1
    636e:	e028      	b.n	63c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6370:	9003      	str	r0, [sp, #12]
    6372:	e7d8      	b.n	6326 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6374:	4606      	mov	r6, r0
    6376:	e7ef      	b.n	6358 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6378:	9b03      	ldr	r3, [sp, #12]
    637a:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    637c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6380:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    6384:	4499      	add	r9, r3
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
    6386:	4602      	mov	r2, r0
    6388:	f104 0324 	add.w	r3, r4, #36	; 0x24
    638c:	4641      	mov	r1, r8
    638e:	4648      	mov	r0, r9
    6390:	f00b f964 	bl	1165c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
    6394:	ee08 4a10 	vmov	s16, r4
    if (status != kTfLiteOk) {
    6398:	4682      	mov	sl, r0
    639a:	b1c0      	cbz	r0, 63ce <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
    639c:	2104      	movs	r1, #4
    639e:	4648      	mov	r0, r9
      TF_LITE_REPORT_ERROR(error_reporter_,
    63a0:	68ac      	ldr	r4, [r5, #8]
    63a2:	f00f f960 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    63a6:	b108      	cbz	r0, 63ac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
    63a8:	f919 0000 	ldrsb.w	r0, [r9, r0]
    63ac:	493e      	ldr	r1, [pc, #248]	; (64a8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a8>)
    VT_BUILTIN_CODE = 4,
    VT_CUSTOM_CODE = 6,
    VT_VERSION = 8
  };
  tflite::BuiltinOperator builtin_code() const {
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    63ae:	b2c0      	uxtb	r0, r0
  return (v < low) || (high < v);
    63b0:	287e      	cmp	r0, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    63b2:	bf96      	itet	ls
    63b4:	4b3d      	ldrls	r3, [pc, #244]	; (64ac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    63b6:	4a3e      	ldrhi	r2, [pc, #248]	; (64b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
  return EnumNamesBuiltinOperator()[index];
    63b8:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
    63bc:	4620      	mov	r0, r4
    63be:	f017 ff6e 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    63c2:	4650      	mov	r0, sl
    63c4:	b009      	add	sp, #36	; 0x24
    63c6:	ecbd 8b02 	vpop	{d8}
    63ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* registration = node_and_registrations[i].registration;
    63ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
    63d0:	b91b      	cbnz	r3, 63da <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
    63d2:	4938      	ldr	r1, [pc, #224]	; (64b4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b4>)
    63d4:	68a8      	ldr	r0, [r5, #8]
    63d6:	4632      	mov	r2, r6
    63d8:	e7c5      	b.n	6366 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
    BuiltinOperator op_type =
    63da:	7d1e      	ldrb	r6, [r3, #20]
    unsigned char* builtin_data = nullptr;
    63dc:	9005      	str	r0, [sp, #20]
    if (op_type == BuiltinOperator_CUSTOM) {
    63de:	2e20      	cmp	r6, #32
    return const_cast<Table *>(this)->GetPointer<P>(field);
    63e0:	f04f 010e 	mov.w	r1, #14
    63e4:	4638      	mov	r0, r7
    63e6:	d113      	bne.n	6410 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x110>
    63e8:	f00f f97f 	bl	156ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
    63ec:	b960      	cbnz	r0, 6408 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    size_t custom_data_size = 0;
    63ee:	f04f 0a00 	mov.w	sl, #0
    const char* custom_data = nullptr;
    63f2:	4656      	mov	r6, sl
    63f4:	2106      	movs	r1, #6
    63f6:	4638      	mov	r0, r7
    63f8:	f00f f980 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  TFLITE_DCHECK(error_reporter != nullptr);
    63fc:	68ab      	ldr	r3, [r5, #8]
    63fe:	4681      	mov	r9, r0
    6400:	2b00      	cmp	r3, #0
    6402:	d12f      	bne.n	6464 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x164>
    6404:	f018 f8e5 	bl	1e5d2 <abort>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6408:	4606      	mov	r6, r0
        custom_data_size = op->custom_options()->size();
    640a:	f856 ab04 	ldr.w	sl, [r6], #4
    640e:	e7f1      	b.n	63f4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf4>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6410:	f00f f96b 	bl	156ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
    6414:	b148      	cbz	r0, 642a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x12a>
  return (v < low) || (high < v);
    6416:	2e7e      	cmp	r6, #126	; 0x7e
    6418:	bf98      	it	ls
    641a:	4b24      	ldrls	r3, [pc, #144]	; (64ac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(
    641c:	68a8      	ldr	r0, [r5, #8]
    641e:	bf94      	ite	ls
    6420:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    6424:	4a22      	ldrhi	r2, [pc, #136]	; (64b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
    6426:	4924      	ldr	r1, [pc, #144]	; (64b8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b8>)
    6428:	e79d      	b.n	6366 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
          op_resolver.GetOpDataParser(op_type);
    642a:	f8d8 3000 	ldr.w	r3, [r8]
    642e:	4631      	mov	r1, r6
    6430:	699b      	ldr	r3, [r3, #24]
    6432:	4640      	mov	r0, r8
    6434:	4798      	blx	r3
      if (parser == nullptr) {
    6436:	4681      	mov	r9, r0
    6438:	b948      	cbnz	r0, 644e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x14e>
    643a:	2e7e      	cmp	r6, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    643c:	bf98      	it	ls
    643e:	4b1b      	ldrls	r3, [pc, #108]	; (64ac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    6440:	68a8      	ldr	r0, [r5, #8]
    6442:	bf94      	ite	ls
    6444:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    6448:	4a19      	ldrhi	r2, [pc, #100]	; (64b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
    644a:	491c      	ldr	r1, [pc, #112]	; (64bc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1bc>)
    644c:	e78b      	b.n	6366 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
    644e:	ab05      	add	r3, sp, #20
    6450:	9300      	str	r3, [sp, #0]
    6452:	68aa      	ldr	r2, [r5, #8]
    6454:	ab06      	add	r3, sp, #24
    6456:	4631      	mov	r1, r6
    6458:	4638      	mov	r0, r7
    645a:	47c8      	blx	r9
    645c:	4682      	mov	sl, r0
    645e:	2800      	cmp	r0, #0
    6460:	d0c5      	beq.n	63ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xee>
    6462:	e7ae      	b.n	63c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    6464:	2800      	cmp	r0, #0
    6466:	d0cd      	beq.n	6404 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x104>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6468:	4638      	mov	r0, r7
    646a:	2108      	movs	r1, #8
    646c:	f00f f946 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    6470:	3428      	adds	r4, #40	; 0x28
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    6472:	4607      	mov	r7, r0
    6474:	2800      	cmp	r0, #0
    6476:	d0c5      	beq.n	6404 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x104>
    *node = {};
    6478:	ee18 0a10 	vmov	r0, s16
    647c:	2224      	movs	r2, #36	; 0x24
    647e:	2100      	movs	r1, #0
    6480:	f018 f8ca 	bl	1e618 <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
    6484:	9b05      	ldr	r3, [sp, #20]
    node->custom_initial_data_size = custom_data_size;
    6486:	f844 ac0c 	str.w	sl, [r4, #-12]
    node->outputs = outputs_array;
    648a:	e944 970a 	strd	r9, r7, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
    648e:	e944 3605 	strd	r3, r6, [r4, #-20]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    6492:	f10b 0b01 	add.w	fp, fp, #1
    6496:	e74d      	b.n	6334 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
  return kTfLiteOk;
    6498:	f04f 0a00 	mov.w	sl, #0
    649c:	e791      	b.n	63c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    649e:	bf00      	nop
    64a0:	00028cd8 	.word	0x00028cd8
    64a4:	0002a485 	.word	0x0002a485
    64a8:	0002a4af 	.word	0x0002a4af
    64ac:	00028acc 	.word	0x00028acc
    64b0:	00029427 	.word	0x00029427
    64b4:	0002a4dc 	.word	0x0002a4dc
    64b8:	0002a4fd 	.word	0x0002a4fd
    64bc:	0002a543 	.word	0x0002a543

000064c0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
    64c0:	b570      	push	{r4, r5, r6, lr}
    64c2:	4604      	mov	r4, r0
    64c4:	4608      	mov	r0, r1
    64c6:	210a      	movs	r1, #10
    64c8:	4615      	mov	r5, r2
    64ca:	f00f f929 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
      memory_allocator_->AllocateFromTail(
    64ce:	6866      	ldr	r6, [r4, #4]
    64d0:	6801      	ldr	r1, [r0, #0]
          alignof(NodeAndRegistration)));
    64d2:	6833      	ldr	r3, [r6, #0]
      memory_allocator_->AllocateFromTail(
    64d4:	2028      	movs	r0, #40	; 0x28
    64d6:	4341      	muls	r1, r0
    64d8:	68db      	ldr	r3, [r3, #12]
    64da:	2204      	movs	r2, #4
    64dc:	4630      	mov	r0, r6
    64de:	4798      	blx	r3
  if (output == nullptr) {
    64e0:	b928      	cbnz	r0, 64ee <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2e>
    TF_LITE_REPORT_ERROR(
    64e2:	4904      	ldr	r1, [pc, #16]	; (64f4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>)
    64e4:	68a0      	ldr	r0, [r4, #8]
    64e6:	f017 feda 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    64ea:	2001      	movs	r0, #1
}
    64ec:	bd70      	pop	{r4, r5, r6, pc}
  *node_and_registrations = output;
    64ee:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    64f0:	2000      	movs	r0, #0
    64f2:	e7fb      	b.n	64ec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2c>
    64f4:	0002a560 	.word	0x0002a560

000064f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
    64f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64fc:	ed2d 8b02 	vpush	{d8}
    6500:	b099      	sub	sp, #100	; 0x64
    6502:	4605      	mov	r5, r0
    6504:	460e      	mov	r6, r1
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
    6506:	6881      	ldr	r1, [r0, #8]
    6508:	6840      	ldr	r0, [r0, #4]
                                                    const SubGraph* subgraph) {
    650a:	9204      	str	r2, [sp, #16]
    650c:	469a      	mov	sl, r3
                                        memory_allocator_->GetTail());
    650e:	9103      	str	r1, [sp, #12]
    6510:	f00f f9b7 	bl	15882 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
    6514:	9002      	str	r0, [sp, #8]
    6516:	6868      	ldr	r0, [r5, #4]
    6518:	f00f f9b5 	bl	15886 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
    651c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    6520:	4603      	mov	r3, r0
    6522:	a807      	add	r0, sp, #28
    6524:	f000 fcd4 	bl	6ed0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
    6528:	68ab      	ldr	r3, [r5, #8]
    652a:	2104      	movs	r1, #4
    652c:	4650      	mov	r0, sl
    652e:	ee08 3a10 	vmov	s16, r3
    6532:	f00f f8ec 	bl	1570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    TF_LITE_ENSURE_STATUS(
    6536:	6803      	ldr	r3, [r0, #0]
    6538:	9302      	str	r3, [sp, #8]
  size_t Size() const { return tensor_count_ + buffer_count_; }
    653a:	9a02      	ldr	r2, [sp, #8]
    653c:	696b      	ldr	r3, [r5, #20]
    653e:	18d3      	adds	r3, r2, r3
    6540:	9303      	str	r3, [sp, #12]
  size_t bytes = sizeof(AllocationInfo) * Size();
    6542:	9a03      	ldr	r2, [sp, #12]
    6544:	2318      	movs	r3, #24
    6546:	4353      	muls	r3, r2
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    6548:	4619      	mov	r1, r3
    654a:	2204      	movs	r2, #4
    654c:	a807      	add	r0, sp, #28
  size_t bytes = sizeof(AllocationInfo) * Size();
    654e:	ee08 3a90 	vmov	s17, r3
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    6552:	f000 fca3 	bl	6e9c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  if (info_ == nullptr) {
    6556:	4604      	mov	r4, r0
    6558:	2800      	cmp	r0, #0
    655a:	d03c      	beq.n	65d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xde>
    auto field_offset = GetOptionalFieldOffset(field);
    655c:	2110      	movs	r1, #16
    655e:	4630      	mov	r0, r6
    6560:	f00f f881 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6564:	2800      	cmp	r0, #0
    6566:	d142      	bne.n	65ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf6>
    6568:	4607      	mov	r7, r0
  for (size_t i = 0; i < tensor_count_; ++i) {
    656a:	9b04      	ldr	r3, [sp, #16]
    656c:	689b      	ldr	r3, [r3, #8]
    656e:	46a0      	mov	r8, r4
    6570:	f103 0b04 	add.w	fp, r3, #4
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
    TF_LITE_ENSURE_STATUS(
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    6574:	46a1      	mov	r9, r4
  for (size_t i = 0; i < tensor_count_; ++i) {
    6576:	2600      	movs	r6, #0
    current->first_created = -1;
    6578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < tensor_count_; ++i) {
    657c:	9a02      	ldr	r2, [sp, #8]
    657e:	42b2      	cmp	r2, r6
    6580:	f000 8094 	beq.w	66ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1b4>
    current->bytes = runtime_tensors[i].bytes;
    6584:	f8db 2014 	ldr.w	r2, [fp, #20]
    current->output_ptr = &(runtime_tensors[i].data.data);
    6588:	f8c9 b004 	str.w	fp, [r9, #4]
    current->bytes = runtime_tensors[i].bytes;
    658c:	f8c9 2000 	str.w	r2, [r9]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    6590:	f8db 2000 	ldr.w	r2, [fp]
    current->last_used = -1;
    6594:	e9c9 3302 	strd	r3, r3, [r9, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    6598:	2a00      	cmp	r2, #0
    659a:	f040 8082 	bne.w	66a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    659e:	2104      	movs	r1, #4
    65a0:	4650      	mov	r0, sl
    65a2:	f00f f8b4 	bl	1570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
                                (!subgraph->tensors()->Get(i)->is_variable());
    65a6:	4631      	mov	r1, r6
    65a8:	f7ff fd10 	bl	5fcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    65ac:	f00f f877 	bl	1569e <_ZNK6tflite6Tensor11is_variableEv>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    65b0:	f080 0001 	eor.w	r0, r0, #1
    65b4:	b2c0      	uxtb	r0, r0
    65b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65ba:	f889 0014 	strb.w	r0, [r9, #20]
    if (offline_offsets) {
    65be:	2f00      	cmp	r7, #0
    65c0:	d071      	beq.n	66a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
      current->offline_offset = offline_offsets[i];
    65c2:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    65c6:	f8c9 2010 	str.w	r2, [r9, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    65ca:	3601      	adds	r6, #1
    65cc:	f109 0918 	add.w	r9, r9, #24
    65d0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    65d4:	e7d2      	b.n	657c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x84>
    TF_LITE_REPORT_ERROR(
    65d6:	ee18 2a90 	vmov	r2, s17
    65da:	49ab      	ldr	r1, [pc, #684]	; (6888 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x390>)
    65dc:	ee18 0a10 	vmov	r0, s16
    65e0:	f017 fe5d 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    65e4:	2601      	movs	r6, #1
                                        memory_allocator_->GetTail());
    65e6:	a807      	add	r0, sp, #28
    65e8:	f00f f944 	bl	15874 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    65ec:	e183      	b.n	68f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    65ee:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
    65f0:	1833      	adds	r3, r6, r0
  if (model->metadata()) {
    65f2:	19df      	adds	r7, r3, r7
    65f4:	d0b9      	beq.n	656a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    const int32_t* offline_planner_offsets = nullptr;
    65f6:	2700      	movs	r7, #0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    65f8:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 68a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    65fc:	46b9      	mov	r9, r7
    auto field_offset = GetOptionalFieldOffset(field);
    65fe:	2110      	movs	r1, #16
    6600:	4630      	mov	r0, r6
    6602:	f00f f830 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6606:	2800      	cmp	r0, #0
    6608:	f000 81a9 	beq.w	695e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x466>
    660c:	5832      	ldr	r2, [r6, r0]
    auto p = data_ + field_offset;
    660e:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6610:	188b      	adds	r3, r1, r2
    6612:	588a      	ldr	r2, [r1, r2]
    6614:	454a      	cmp	r2, r9
    6616:	d9a8      	bls.n	656a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6618:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    661a:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    661e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    6622:	4498      	add	r8, r3
    auto field_offset = GetOptionalFieldOffset(field);
    6624:	2104      	movs	r1, #4
    6626:	4640      	mov	r0, r8
    6628:	f00f f81d 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    662c:	b380      	cbz	r0, 6690 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    auto p = data_ + field_offset;
    662e:	eb08 0300 	add.w	r3, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6632:	f858 0000 	ldr.w	r0, [r8, r0]
    6636:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    6638:	4658      	mov	r0, fp
    663a:	9305      	str	r3, [sp, #20]
    663c:	f7fa fede 	bl	13fc <strlen>
    6640:	9b05      	ldr	r3, [sp, #20]
    6642:	4602      	mov	r2, r0
    6644:	4659      	mov	r1, fp
    6646:	1d18      	adds	r0, r3, #4
    6648:	f018 f8b6 	bl	1e7b8 <strncmp>
    664c:	bb30      	cbnz	r0, 669c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
    auto field_offset = GetOptionalFieldOffset(field);
    664e:	210c      	movs	r1, #12
    6650:	4630      	mov	r0, r6
    6652:	f00f f808 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6656:	b1e8      	cbz	r0, 6694 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x19c>
    6658:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
    665a:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    665c:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
    665e:	2106      	movs	r1, #6
    6660:	4640      	mov	r0, r8
    6662:	f00f f800 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6666:	b1b8      	cbz	r0, 6698 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a0>
    6668:	f858 1000 	ldr.w	r1, [r8, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    666c:	4638      	mov	r0, r7
    666e:	f7ff fcdd 	bl	602c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6672:	2104      	movs	r1, #4
    6674:	f00f f839 	bl	156ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
        if (tensor_count_ != nbr_tensors) {
    6678:	9b02      	ldr	r3, [sp, #8]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    667a:	68c2      	ldr	r2, [r0, #12]
        if (tensor_count_ != nbr_tensors) {
    667c:	4293      	cmp	r3, r2
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    667e:	f100 0710 	add.w	r7, r0, #16
        if (tensor_count_ != nbr_tensors) {
    6682:	d00b      	beq.n	669c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
          TF_LITE_REPORT_ERROR(reporter_,
    6684:	4981      	ldr	r1, [pc, #516]	; (688c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x394>)
    6686:	ee18 0a10 	vmov	r0, s16
    668a:	f017 fe08 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(
    668e:	e7a9      	b.n	65e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6690:	4603      	mov	r3, r0
    6692:	e7d1      	b.n	6638 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x140>
    6694:	4607      	mov	r7, r0
    6696:	e7e2      	b.n	665e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x166>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6698:	4601      	mov	r1, r0
    669a:	e7e7      	b.n	666c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x174>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    669c:	f109 0901 	add.w	r9, r9, #1
    66a0:	e7ad      	b.n	65fe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x106>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    66a2:	2000      	movs	r0, #0
    66a4:	e789      	b.n	65ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xc2>
      current->offline_offset = kOnlinePlannedBuffer;
    66a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66aa:	e78c      	b.n	65c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66ac:	f04f 0b00 	mov.w	fp, #0
    current->first_created = 0;
    66b0:	f04f 0918 	mov.w	r9, #24
    66b4:	465f      	mov	r7, fp
    return const_cast<Table *>(this)->GetPointer<P>(field);
    66b6:	2106      	movs	r1, #6
    66b8:	4650      	mov	r0, sl
    66ba:	f00f f81f 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66be:	6803      	ldr	r3, [r0, #0]
    66c0:	455b      	cmp	r3, fp
    66c2:	d908      	bls.n	66d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1de>
    const int tensor_index = subgraph->inputs()->Get(i);
    66c4:	4659      	mov	r1, fp
    66c6:	f7ff fc6b 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
    66ca:	fb09 4000 	mla	r0, r9, r0, r4
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66ce:	f10b 0b01 	add.w	fp, fp, #1
    current->first_created = 0;
    66d2:	6087      	str	r7, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66d4:	e7ef      	b.n	66b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1be>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    66d6:	f04f 0b00 	mov.w	fp, #0
    current->last_used = subgraph->operators()->size() - 1;
    66da:	f04f 0918 	mov.w	r9, #24
    66de:	2108      	movs	r1, #8
    66e0:	4650      	mov	r0, sl
    66e2:	f00f f80b 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    66e6:	210a      	movs	r1, #10
    66e8:	9002      	str	r0, [sp, #8]
    66ea:	4650      	mov	r0, sl
    66ec:	f00f f818 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    66f0:	9b02      	ldr	r3, [sp, #8]
    66f2:	681a      	ldr	r2, [r3, #0]
    66f4:	455a      	cmp	r2, fp
    66f6:	4607      	mov	r7, r0
    66f8:	d90b      	bls.n	6712 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21a>
    const int tensor_index = subgraph->outputs()->Get(i);
    66fa:	4659      	mov	r1, fp
    66fc:	4618      	mov	r0, r3
    66fe:	f7ff fc4f 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = subgraph->operators()->size() - 1;
    6702:	683b      	ldr	r3, [r7, #0]
    6704:	fb09 4000 	mla	r0, r9, r0, r4
    6708:	3b01      	subs	r3, #1
    670a:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    670c:	f10b 0b01 	add.w	fp, fp, #1
    6710:	e7e5      	b.n	66de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    6712:	6807      	ldr	r7, [r0, #0]
    6714:	3f01      	subs	r7, #1
    6716:	2f00      	cmp	r7, #0
    6718:	db37      	blt.n	678a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x292>
    671a:	210a      	movs	r1, #10
    671c:	4650      	mov	r0, sl
    671e:	f00e ffff 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    const auto* op = subgraph->operators()->Get(i);
    6722:	4639      	mov	r1, r7
    6724:	f7ff fc6a 	bl	5ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6728:	f04f 0b00 	mov.w	fp, #0
    const auto* op = subgraph->operators()->Get(i);
    672c:	4681      	mov	r9, r0
    672e:	2106      	movs	r1, #6
    6730:	4648      	mov	r0, r9
    6732:	f00e ffe3 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6736:	6802      	ldr	r2, [r0, #0]
    6738:	455a      	cmp	r2, fp
    673a:	d90e      	bls.n	675a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x262>
      const int tensor_index = op->inputs()->Get(n);
    673c:	4659      	mov	r1, fp
    673e:	f7ff fc2f 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6742:	2318      	movs	r3, #24
    6744:	fb03 4000 	mla	r0, r3, r0, r4
      if (((current->last_used == -1) || (current->last_used < i))) {
    6748:	68c2      	ldr	r2, [r0, #12]
    674a:	1c51      	adds	r1, r2, #1
    674c:	d001      	beq.n	6752 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25a>
    674e:	4297      	cmp	r7, r2
    6750:	dd00      	ble.n	6754 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25c>
        current->last_used = i;
    6752:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6754:	f10b 0b01 	add.w	fp, fp, #1
    6758:	e7e9      	b.n	672e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    675a:	f04f 0b00 	mov.w	fp, #0
    675e:	2108      	movs	r1, #8
    6760:	4648      	mov	r0, r9
    6762:	f00e ffcb 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    6766:	6802      	ldr	r2, [r0, #0]
    6768:	455a      	cmp	r2, fp
    676a:	d9d3      	bls.n	6714 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
      const int tensor_index = op->outputs()->Get(n);
    676c:	4659      	mov	r1, fp
    676e:	f7ff fc17 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6772:	2318      	movs	r3, #24
    6774:	fb03 4000 	mla	r0, r3, r0, r4
      if ((current->first_created == -1) || (current->first_created > i)) {
    6778:	6882      	ldr	r2, [r0, #8]
    677a:	1c53      	adds	r3, r2, #1
    677c:	d001      	beq.n	6782 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28a>
    677e:	4297      	cmp	r7, r2
    6780:	da00      	bge.n	6784 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28c>
        current->first_created = i;
    6782:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    6784:	f10b 0b01 	add.w	fp, fp, #1
    6788:	e7e9      	b.n	675e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
  for (size_t i = 0; i < tensor_count_; ++i) {
    678a:	2200      	movs	r2, #0
    678c:	4621      	mov	r1, r4
      current->needs_allocating = false;
    678e:	4617      	mov	r7, r2
  for (size_t i = 0; i < tensor_count_; ++i) {
    6790:	4296      	cmp	r6, r2
    6792:	d018      	beq.n	67c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ce>
    const bool is_read_only =
    6794:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
        (current->first_created == -1) && (current->last_used != -1);
    6798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    679c:	d105      	bne.n	67aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b2>
    679e:	3001      	adds	r0, #1
    67a0:	d005      	beq.n	67ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b6>
      current->needs_allocating = false;
    67a2:	750f      	strb	r7, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
    67a4:	3201      	adds	r2, #1
    67a6:	3118      	adds	r1, #24
    67a8:	e7f2      	b.n	6790 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
        ((current->first_created == -1) || (current->last_used == -1));
    67aa:	3001      	adds	r0, #1
    67ac:	d1fa      	bne.n	67a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
    if (has_partial_lifetime && current->needs_allocating) {
    67ae:	7d08      	ldrb	r0, [r1, #20]
    67b0:	2800      	cmp	r0, #0
    67b2:	d0f7      	beq.n	67a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
      TF_LITE_REPORT_ERROR(
    67b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    67b8:	9100      	str	r1, [sp, #0]
    67ba:	ee18 0a10 	vmov	r0, s16
    67be:	4934      	ldr	r1, [pc, #208]	; (6890 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x398>)
    67c0:	f017 fd6d 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    67c4:	e70e      	b.n	65e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    67c6:	2318      	movs	r3, #24
    67c8:	692a      	ldr	r2, [r5, #16]
    67ca:	fb03 4306 	mla	r3, r3, r6, r4
    current->needs_allocating = true;
    67ce:	2701      	movs	r7, #1
    current->offline_offset = kOnlinePlannedBuffer;
    67d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    67d4:	9903      	ldr	r1, [sp, #12]
    67d6:	42b1      	cmp	r1, r6
    67d8:	f103 0318 	add.w	r3, r3, #24
    67dc:	d90e      	bls.n	67fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x304>
    current->bytes = handle->bytes;
    67de:	6851      	ldr	r1, [r2, #4]
    67e0:	f843 1c18 	str.w	r1, [r3, #-24]
    current->first_created = handle->node_idx;
    67e4:	6891      	ldr	r1, [r2, #8]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
    67e6:	f843 2c14 	str.w	r2, [r3, #-20]
    current->last_used = handle->node_idx;
    67ea:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
    67ee:	f803 7c04 	strb.w	r7, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
    67f2:	f843 0c08 	str.w	r0, [r3, #-8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    67f6:	3601      	adds	r6, #1
    67f8:	320c      	adds	r2, #12
    67fa:	e7eb      	b.n	67d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    67fc:	a807      	add	r0, sp, #28
    67fe:	f00f f844 	bl	1588a <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    6802:	2201      	movs	r2, #1
    6804:	4601      	mov	r1, r0
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    6806:	4606      	mov	r6, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    6808:	a807      	add	r0, sp, #28
    680a:	f000 fb2d 	bl	6e68 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    680e:	4601      	mov	r1, r0
    6810:	b958      	cbnz	r0, 682a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x332>
    6812:	68a9      	ldr	r1, [r5, #8]
    6814:	4b1f      	ldr	r3, [pc, #124]	; (6894 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>)
    6816:	9301      	str	r3, [sp, #4]
    6818:	f240 339a 	movw	r3, #922	; 0x39a
    681c:	9300      	str	r3, [sp, #0]
    681e:	4a1e      	ldr	r2, [pc, #120]	; (6898 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a0>)
    6820:	4b1e      	ldr	r3, [pc, #120]	; (689c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a4>)
    6822:	4608      	mov	r0, r1
    6824:	f017 fd49 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    6828:	e6dc      	b.n	65e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    682a:	4632      	mov	r2, r6
    682c:	a80d      	add	r0, sp, #52	; 0x34
    682e:	f009 fbfd 	bl	1002c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
    6832:	ee18 3a90 	vmov	r3, s17
    6836:	68af      	ldr	r7, [r5, #8]
TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
    6838:	4423      	add	r3, r4
    683a:	4699      	mov	r9, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
    683c:	454c      	cmp	r4, r9
    683e:	d078      	beq.n	6932 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x43a>
    if (current->needs_allocating) {
    6840:	7d23      	ldrb	r3, [r4, #20]
    6842:	b90b      	cbnz	r3, 6848 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x350>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    6844:	3418      	adds	r4, #24
    6846:	e7f9      	b.n	683c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x344>
          AlignSizeUp(current->bytes, kBufferAlignment);
    6848:	2110      	movs	r1, #16
    684a:	6820      	ldr	r0, [r4, #0]
    684c:	f017 fe1c 	bl	1e488 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
    6850:	6923      	ldr	r3, [r4, #16]
    6852:	1c59      	adds	r1, r3, #1
          AlignSizeUp(current->bytes, kBufferAlignment);
    6854:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    6856:	d10d      	bne.n	6874 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37c>
        TF_LITE_ENSURE_STATUS(
    6858:	68e3      	ldr	r3, [r4, #12]
    685a:	9300      	str	r3, [sp, #0]
    685c:	68a3      	ldr	r3, [r4, #8]
    685e:	4639      	mov	r1, r7
    6860:	a80d      	add	r0, sp, #52	; 0x34
    6862:	f009 fbc1 	bl	ffe8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    6866:	4606      	mov	r6, r0
    6868:	2800      	cmp	r0, #0
    686a:	d0eb      	beq.n	6844 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34c>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    686c:	a80d      	add	r0, sp, #52	; 0x34
    686e:	f017 fbdb 	bl	1e028 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    6872:	e6b8      	b.n	65e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xee>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    6874:	9301      	str	r3, [sp, #4]
    6876:	68e3      	ldr	r3, [r4, #12]
    6878:	9300      	str	r3, [sp, #0]
    687a:	68a3      	ldr	r3, [r4, #8]
    687c:	4639      	mov	r1, r7
    687e:	a80d      	add	r0, sp, #52	; 0x34
    6880:	f017 fbf8 	bl	1e074 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    6884:	e7ef      	b.n	6866 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36e>
    6886:	bf00      	nop
    6888:	0002a596 	.word	0x0002a596
    688c:	0002a5d7 	.word	0x0002a5d7
    6890:	0002a622 	.word	0x0002a622
    6894:	0002a6c5 	.word	0x0002a6c5
    6898:	0002a6ae 	.word	0x0002a6ae
    689c:	0002a685 	.word	0x0002a685
    68a0:	0002ac32 	.word	0x0002ac32
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    68a4:	6868      	ldr	r0, [r5, #4]
    68a6:	f00e ffec 	bl	15882 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
  int planner_index = 0;
    68aa:	f04f 0b00 	mov.w	fp, #0
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    68ae:	4607      	mov	r7, r0
      int offset = -1;
    68b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
    68b4:	4544      	cmp	r4, r8
    68b6:	d024      	beq.n	6902 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x40a>
    if (current->needs_allocating) {
    68b8:	f898 3014 	ldrb.w	r3, [r8, #20]
    68bc:	b18b      	cbz	r3, 68e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ea>
      TF_LITE_ENSURE_STATUS(
    68be:	ab06      	add	r3, sp, #24
    68c0:	465a      	mov	r2, fp
    68c2:	4649      	mov	r1, r9
    68c4:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
    68c6:	f8cd a018 	str.w	sl, [sp, #24]
      TF_LITE_ENSURE_STATUS(
    68ca:	f009 fbcd 	bl	10068 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
    68ce:	4606      	mov	r6, r0
    68d0:	2800      	cmp	r0, #0
    68d2:	d1cb      	bne.n	686c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x374>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    68d4:	9b06      	ldr	r3, [sp, #24]
    68d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    68da:	443b      	add	r3, r7
    68dc:	6013      	str	r3, [r2, #0]
      ++planner_index;
    68de:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
    68e2:	f108 0818 	add.w	r8, r8, #24
    68e6:	e7e5      	b.n	68b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3bc>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    68e8:	a80d      	add	r0, sp, #52	; 0x34
    68ea:	f017 fb9d 	bl	1e028 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
                                        memory_allocator_->GetTail());
    68ee:	a807      	add	r0, sp, #28
    68f0:	f00e ffc0 	bl	15874 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
    68f4:	2600      	movs	r6, #0
}
    68f6:	4630      	mov	r0, r6
    68f8:	b019      	add	sp, #100	; 0x64
    68fa:	ecbd 8b02 	vpop	{d8}
    68fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    6902:	686c      	ldr	r4, [r5, #4]
                                            /*alignment=*/1);
    6904:	6823      	ldr	r3, [r4, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    6906:	a80d      	add	r0, sp, #52	; 0x34
                                            /*alignment=*/1);
    6908:	689e      	ldr	r6, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    690a:	f017 fcab 	bl	1e264 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    690e:	2201      	movs	r2, #1
    6910:	4601      	mov	r1, r0
    6912:	4620      	mov	r0, r4
    6914:	47b0      	blx	r6
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    6916:	2800      	cmp	r0, #0
    6918:	d1e6      	bne.n	68e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f0>
    691a:	68a9      	ldr	r1, [r5, #8]
    691c:	4b11      	ldr	r3, [pc, #68]	; (6964 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x46c>)
    691e:	9301      	str	r3, [sp, #4]
    6920:	f240 33b3 	movw	r3, #947	; 0x3b3
    6924:	9300      	str	r3, [sp, #0]
    6926:	4a10      	ldr	r2, [pc, #64]	; (6968 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x470>)
    6928:	4b10      	ldr	r3, [pc, #64]	; (696c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x474>)
    692a:	4608      	mov	r0, r1
    692c:	f017 fcc5 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    6930:	e013      	b.n	695a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x462>
        memory_allocator_->GetAvailableMemory();
    6932:	6868      	ldr	r0, [r5, #4]
    6934:	f00e ffa9 	bl	1588a <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
    6938:	4606      	mov	r6, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    693a:	a80d      	add	r0, sp, #52	; 0x34
    693c:	f017 fc92 	bl	1e264 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    6940:	42b0      	cmp	r0, r6
    6942:	f8d5 9008 	ldr.w	r9, [r5, #8]
    6946:	d9ad      	bls.n	68a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ac>
      TF_LITE_REPORT_ERROR(
    6948:	a80d      	add	r0, sp, #52	; 0x34
    694a:	f017 fc8b 	bl	1e264 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    694e:	4908      	ldr	r1, [pc, #32]	; (6970 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x478>)
    6950:	4602      	mov	r2, r0
    6952:	4633      	mov	r3, r6
    6954:	4648      	mov	r0, r9
    6956:	f017 fca2 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    695a:	2601      	movs	r6, #1
    695c:	e786      	b.n	686c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x374>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    695e:	6803      	ldr	r3, [r0, #0]
    6960:	deff      	udf	#255	; 0xff
    6962:	bf00      	nop
    6964:	0002a733 	.word	0x0002a733
    6968:	0002a6ae 	.word	0x0002a6ae
    696c:	0002a685 	.word	0x0002a685
    6970:	0002a6de 	.word	0x0002a6de

00006974 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
    6974:	b500      	push	{lr}
    6976:	b0c1      	sub	sp, #260	; 0x104
    6978:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    697a:	4668      	mov	r0, sp
    697c:	460a      	mov	r2, r1
    697e:	f44f 7180 	mov.w	r1, #256	; 0x100
    6982:	f000 f96d 	bl	6c60 <MicroVsnprintf>
  DebugLog(log_buffer);
    6986:	4668      	mov	r0, sp
    6988:	f00b f8f2 	bl	11b70 <DebugLog>
  DebugLog("\r\n");
    698c:	4803      	ldr	r0, [pc, #12]	; (699c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
    698e:	f00b f8ef 	bl	11b70 <DebugLog>
#endif
  return 0;
}
    6992:	2000      	movs	r0, #0
    6994:	b041      	add	sp, #260	; 0x104
    6996:	f85d fb04 	ldr.w	pc, [sp], #4
    699a:	bf00      	nop
    699c:	00029425 	.word	0x00029425

000069a0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    69a0:	6943      	ldr	r3, [r0, #20]
    69a2:	2b20      	cmp	r3, #32
    69a4:	d101      	bne.n	69aa <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
    69a6:	6980      	ldr	r0, [r0, #24]
    69a8:	4770      	bx	lr
  return (v < low) || (high < v);
    69aa:	b2db      	uxtb	r3, r3
    69ac:	2b7e      	cmp	r3, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    69ae:	bf9a      	itte	ls
    69b0:	4a02      	ldrls	r2, [pc, #8]	; (69bc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    69b2:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    69b6:	4802      	ldrhi	r0, [pc, #8]	; (69c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    69b8:	4770      	bx	lr
    69ba:	bf00      	nop
    69bc:	00028acc 	.word	0x00028acc
    69c0:	00029427 	.word	0x00029427

000069c4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
    69c4:	b570      	push	{r4, r5, r6, lr}
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    69c6:	6846      	ldr	r6, [r0, #4]
    69c8:	4604      	mov	r4, r0
    69ca:	460d      	mov	r5, r1
    auto field_offset = GetOptionalFieldOffset(field);
    69cc:	4630      	mov	r0, r6
    69ce:	2108      	movs	r1, #8
    69d0:	f00e fe49 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69d4:	b1d0      	cbz	r0, 6a0c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x48>
    69d6:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
    69d8:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69da:	18d1      	adds	r1, r2, r3
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
  if (subgraphs->size() != 1) {
    69dc:	58d2      	ldr	r2, [r2, r3]
    69de:	2a01      	cmp	r2, #1
    69e0:	d007      	beq.n	69f2 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    69e2:	490b      	ldr	r1, [pc, #44]	; (6a10 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x4c>)
    69e4:	68e0      	ldr	r0, [r4, #12]
    69e6:	f017 fc5a 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
    69ea:	2301      	movs	r3, #1
  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.recommended_num_threads = 1;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
    69ec:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
    69f0:	bd70      	pop	{r4, r5, r6, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    69f2:	1d0b      	adds	r3, r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    69f4:	6849      	ldr	r1, [r1, #4]
  context_.recommended_num_threads = 1;
    69f6:	6362      	str	r2, [r4, #52]	; 0x34
    69f8:	440b      	add	r3, r1
  subgraph_ = (*subgraphs)[0];
    69fa:	66a3      	str	r3, [r4, #104]	; 0x68
  context_.impl_ = static_cast<void*>(&context_helper_);
    69fc:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    6a00:	61e3      	str	r3, [r4, #28]
  context_.ReportError = context_helper_.ReportOpError;
    6a02:	4b04      	ldr	r3, [pc, #16]	; (6a14 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x50>)
    6a04:	6263      	str	r3, [r4, #36]	; 0x24
  context_.profiler = profiler;
    6a06:	6465      	str	r5, [r4, #68]	; 0x44
  initialization_status_ = kTfLiteOk;
    6a08:	2300      	movs	r3, #0
    6a0a:	e7ef      	b.n	69ec <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x28>
  if (subgraphs->size() != 1) {
    6a0c:	6803      	ldr	r3, [r0, #0]
    6a0e:	deff      	udf	#255	; 0xff
    6a10:	00029e04 	.word	0x00029e04
    6a14:	00015751 	.word	0x00015751

00006a18 <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
    6a18:	b513      	push	{r0, r1, r4, lr}
    6a1a:	4604      	mov	r4, r0
    6a1c:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6a1e:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6a20:	2106      	movs	r1, #6
    6a22:	f00e fe6b 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
    6a26:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
    6a28:	6803      	ldr	r3, [r0, #0]
    6a2a:	429a      	cmp	r2, r3
    6a2c:	d306      	bcc.n	6a3c <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a2e:	4907      	ldr	r1, [pc, #28]	; (6a4c <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
    6a30:	68e0      	ldr	r0, [r4, #12]
    6a32:	f017 fc34 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
    6a36:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs().Get(index)]);
}
    6a38:	b002      	add	sp, #8
    6a3a:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs().Get(index)]);
    6a3c:	4611      	mov	r1, r2
    6a3e:	f7ff faaf 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    6a42:	69a3      	ldr	r3, [r4, #24]
    6a44:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6a48:	e7f6      	b.n	6a38 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
    6a4a:	bf00      	nop
    6a4c:	0002ac4a 	.word	0x0002ac4a

00006a50 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6a50:	b513      	push	{r0, r1, r4, lr}
    6a52:	4604      	mov	r4, r0
    6a54:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6a56:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6a58:	2108      	movs	r1, #8
    6a5a:	f00e fe4f 	bl	156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
    6a5e:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
    6a60:	6803      	ldr	r3, [r0, #0]
    6a62:	429a      	cmp	r2, r3
    6a64:	d306      	bcc.n	6a74 <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a66:	4907      	ldr	r1, [pc, #28]	; (6a84 <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
    6a68:	68e0      	ldr	r0, [r4, #12]
    6a6a:	f017 fc18 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
    6a6e:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs().Get(index)]);
}
    6a70:	b002      	add	sp, #8
    6a72:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs().Get(index)]);
    6a74:	4611      	mov	r1, r2
    6a76:	f7ff fa93 	bl	5fa0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    6a7a:	69a3      	ldr	r3, [r4, #24]
    6a7c:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6a80:	e7f6      	b.n	6a70 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
    6a82:	bf00      	nop
    6a84:	0002ac75 	.word	0x0002ac75

00006a88 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    6a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    6a8c:	f100 0710 	add.w	r7, r0, #16
    6a90:	9000      	str	r0, [sp, #0]
    6a92:	6883      	ldr	r3, [r0, #8]
    6a94:	6841      	ldr	r1, [r0, #4]
TfLiteStatus MicroInterpreter::AllocateTensors() {
    6a96:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    6a98:	463a      	mov	r2, r7
    6a9a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    6a9c:	f7ff fa02 	bl	5ea4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
    6aa0:	b148      	cbz	r0, 6ab6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6aa2:	4933      	ldr	r1, [pc, #204]	; (6b70 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>)
    6aa4:	68e0      	ldr	r0, [r4, #12]
    6aa6:	f017 fbfa 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    6aaa:	2001      	movs	r0, #1
    6aac:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
}
    6ab0:	b002      	add	sp, #8
    6ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  context_.GetScratchBuffer = nullptr;
    6ab6:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
    6aba:	4b2e      	ldr	r3, [pc, #184]	; (6b74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>)
    6abc:	64a3      	str	r3, [r4, #72]	; 0x48
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6abe:	4605      	mov	r5, r0
    auto* node = &(node_and_registrations_[i].node);
    6ac0:	f04f 0828 	mov.w	r8, #40	; 0x28
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6ac4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6ac6:	210a      	movs	r1, #10
    6ac8:	f00e fe2a 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6acc:	6803      	ldr	r3, [r0, #0]
    6ace:	429d      	cmp	r5, r3
    6ad0:	d212      	bcs.n	6af8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x70>
    auto* node = &(node_and_registrations_[i].node);
    6ad2:	6826      	ldr	r6, [r4, #0]
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
    6ad4:	6765      	str	r5, [r4, #116]	; 0x74
    6ad6:	fb08 6605 	mla	r6, r8, r5, r6
    auto* registration = node_and_registrations_[i].registration;
    6ada:	6a73      	ldr	r3, [r6, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->builtin_data);
    6adc:	6971      	ldr	r1, [r6, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6ade:	695a      	ldr	r2, [r3, #20]
    if (registration->init) {
    6ae0:	681b      	ldr	r3, [r3, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6ae2:	2a20      	cmp	r2, #32
      init_data_size = node->custom_initial_data_size;
    6ae4:	bf0c      	ite	eq
    6ae6:	e9d6 1206 	ldrdeq	r1, r2, [r6, #24]
      init_data_size = 0;
    6aea:	2200      	movne	r2, #0
    if (registration->init) {
    6aec:	b113      	cbz	r3, 6af4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
          registration->init(&context_, init_data, init_data_size);
    6aee:	4638      	mov	r0, r7
    6af0:	4798      	blx	r3
      node->user_data =
    6af2:	6130      	str	r0, [r6, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6af4:	3501      	adds	r5, #1
    6af6:	e7e5      	b.n	6ac4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
    6af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6afc:	6763      	str	r3, [r4, #116]	; 0x74
  context_.RequestScratchBufferInArena =
    6afe:	4b1e      	ldr	r3, [pc, #120]	; (6b78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>)
    6b00:	6523      	str	r3, [r4, #80]	; 0x50
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b02:	2500      	movs	r5, #0
    auto* node = &(node_and_registrations_[i].node);
    6b04:	2628      	movs	r6, #40	; 0x28
    6b06:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6b08:	210a      	movs	r1, #10
    6b0a:	f00e fe09 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b0e:	6803      	ldr	r3, [r0, #0]
    6b10:	429d      	cmp	r5, r3
    6b12:	d21a      	bcs.n	6b4a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    auto* node = &(node_and_registrations_[i].node);
    6b14:	6821      	ldr	r1, [r4, #0]
    6b16:	6765      	str	r5, [r4, #116]	; 0x74
    6b18:	fb06 1105 	mla	r1, r6, r5, r1
    auto* registration = node_and_registrations_[i].registration;
    6b1c:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
    if (registration->prepare) {
    6b20:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6b24:	b17b      	cbz	r3, 6b46 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
    6b26:	4638      	mov	r0, r7
    6b28:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
    6b2a:	4601      	mov	r1, r0
    6b2c:	b158      	cbz	r0, 6b46 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
        TF_LITE_REPORT_ERROR(
    6b2e:	4640      	mov	r0, r8
    6b30:	f7ff ff36 	bl	69a0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b34:	462b      	mov	r3, r5
    6b36:	4602      	mov	r2, r0
    6b38:	9100      	str	r1, [sp, #0]
    6b3a:	68e0      	ldr	r0, [r4, #12]
    6b3c:	490f      	ldr	r1, [pc, #60]	; (6b7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>)
    6b3e:	f017 fbae 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    6b42:	2001      	movs	r0, #1
    6b44:	e7b4      	b.n	6ab0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b46:	3501      	adds	r5, #1
    6b48:	e7dd      	b.n	6b06 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x7e>
    6b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b4e:	6763      	str	r3, [r4, #116]	; 0x74
  context_.AllocatePersistentBuffer = nullptr;
    6b50:	2300      	movs	r3, #0
    6b52:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    6b54:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    6b56:	4b0a      	ldr	r3, [pc, #40]	; (6b80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>)
  TF_LITE_ENSURE_OK(&context_,
    6b58:	6861      	ldr	r1, [r4, #4]
    6b5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    6b5c:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
    6b5e:	463a      	mov	r2, r7
    6b60:	f7ff f9de 	bl	5f20 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
    6b64:	2800      	cmp	r0, #0
    6b66:	d1a3      	bne.n	6ab0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    6b68:	2301      	movs	r3, #1
    6b6a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return kTfLiteOk;
    6b6e:	e79f      	b.n	6ab0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    6b70:	0002aca1 	.word	0x0002aca1
    6b74:	00015733 	.word	0x00015733
    6b78:	0001573b 	.word	0x0001573b
    6b7c:	0002acc4 	.word	0x0002acc4
    6b80:	00015749 	.word	0x00015749

00006b84 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    6b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
    6b88:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
TfLiteStatus MicroInterpreter::Invoke() {
    6b8c:	b087      	sub	sp, #28
    6b8e:	4605      	mov	r5, r0
  if (initialization_status_ != kTfLiteOk) {
    6b90:	b143      	cbz	r3, 6ba4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6b92:	4931      	ldr	r1, [pc, #196]	; (6c58 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>)
    6b94:	68c0      	ldr	r0, [r0, #12]
    6b96:	f017 fb82 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    6b9a:	2401      	movs	r4, #1
}
    6b9c:	4620      	mov	r0, r4
    6b9e:	b007      	add	sp, #28
    6ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
    6ba4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6ba8:	2b00      	cmp	r3, #0
    6baa:	d044      	beq.n	6c36 <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
TfLiteStatus MicroInterpreter::Invoke() {
    6bac:	f04f 0800 	mov.w	r8, #0
    auto* node = &(node_and_registrations_[i].node);
    6bb0:	f04f 0a28 	mov.w	sl, #40	; 0x28
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6bb4:	2600      	movs	r6, #0
    6bb6:	2700      	movs	r7, #0
    6bb8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    6bba:	210a      	movs	r1, #10
    6bbc:	f00e fdb0 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6bc0:	6803      	ldr	r3, [r0, #0]
    6bc2:	4598      	cmp	r8, r3
    6bc4:	d245      	bcs.n	6c52 <_ZN6tflite16MicroInterpreter6InvokeEv+0xce>
    auto* node = &(node_and_registrations_[i].node);
    6bc6:	682c      	ldr	r4, [r5, #0]
    6bc8:	fb0a 4408 	mla	r4, sl, r8, r4
    auto* registration = node_and_registrations_[i].registration;
    6bcc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    if (registration->invoke) {
    6bd0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d039      	beq.n	6c4c <_ZN6tflite16MicroInterpreter6InvokeEv+0xc8>
          profiler, OpNameFromRegistration(registration), i);
    6bd8:	4648      	mov	r0, r9
    6bda:	f7ff fee1 	bl	69a0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
      tflite::Profiler* profiler =
    6bde:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    6be2:	f8cd b010 	str.w	fp, [sp, #16]
    6be6:	2300      	movs	r3, #0
          profiler, OpNameFromRegistration(registration), i);
    6be8:	4601      	mov	r1, r0
    6bea:	9305      	str	r3, [sp, #20]
    if (profiler) {
    6bec:	f1bb 0f00 	cmp.w	fp, #0
    6bf0:	d00a      	beq.n	6c08 <_ZN6tflite16MicroInterpreter6InvokeEv+0x84>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6bf2:	f8db 2000 	ldr.w	r2, [fp]
    6bf6:	e9cd 6702 	strd	r6, r7, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
    6bfa:	e9cd 8300 	strd	r8, r3, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6bfe:	4658      	mov	r0, fp
    6c00:	6893      	ldr	r3, [r2, #8]
    6c02:	2202      	movs	r2, #2
    6c04:	4798      	blx	r3
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
    6c06:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
    6c08:	4621      	mov	r1, r4
    6c0a:	f8d9 300c 	ldr.w	r3, [r9, #12]
    6c0e:	f105 0010 	add.w	r0, r5, #16
    6c12:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
    6c14:	2801      	cmp	r0, #1
      invoke_status = registration->invoke(&context_, node);
    6c16:	4604      	mov	r4, r0
      if (invoke_status == kTfLiteError) {
    6c18:	d113      	bne.n	6c42 <_ZN6tflite16MicroInterpreter6InvokeEv+0xbe>
        TF_LITE_REPORT_ERROR(
    6c1a:	4648      	mov	r0, r9
    6c1c:	f7ff fec0 	bl	69a0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6c20:	490e      	ldr	r1, [pc, #56]	; (6c5c <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>)
    6c22:	9400      	str	r4, [sp, #0]
    6c24:	4602      	mov	r2, r0
    6c26:	4643      	mov	r3, r8
    6c28:	68e8      	ldr	r0, [r5, #12]
    6c2a:	f017 fb38 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
class ScopedOperatorProfile : public ScopedProfile {
    6c2e:	a804      	add	r0, sp, #16
    6c30:	f00e fd9e 	bl	15770 <_ZN6tflite13ScopedProfileD1Ev>
    6c34:	e7b2      	b.n	6b9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    6c36:	f7ff ff27 	bl	6a88 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    6c3a:	4604      	mov	r4, r0
    6c3c:	2800      	cmp	r0, #0
    6c3e:	d0b5      	beq.n	6bac <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
    6c40:	e7ac      	b.n	6b9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
      } else if (invoke_status != kTfLiteOk) {
    6c42:	2800      	cmp	r0, #0
    6c44:	d1f3      	bne.n	6c2e <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
    6c46:	a804      	add	r0, sp, #16
    6c48:	f00e fd92 	bl	15770 <_ZN6tflite13ScopedProfileD1Ev>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6c4c:	f108 0801 	add.w	r8, r8, #1
    6c50:	e7b2      	b.n	6bb8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>
  return kTfLiteOk;
    6c52:	2400      	movs	r4, #0
    6c54:	e7a2      	b.n	6b9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    6c56:	bf00      	nop
    6c58:	0002acfa 	.word	0x0002acfa
    6c5c:	0002ad27 	.word	0x0002ad27

00006c60 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    6c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c64:	b095      	sub	sp, #84	; 0x54
    6c66:	4617      	mov	r7, r2
    6c68:	9001      	str	r0, [sp, #4]
    6c6a:	461c      	mov	r4, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    6c6c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
  int output_index = 0;
    6c70:	2500      	movs	r5, #0
  while (*current != '\0' && output_index < usable_length) {
    6c72:	9a01      	ldr	r2, [sp, #4]
    6c74:	783b      	ldrb	r3, [r7, #0]
    6c76:	4629      	mov	r1, r5
    6c78:	1956      	adds	r6, r2, r5
    6c7a:	b33b      	cbz	r3, 6ccc <MicroVsnprintf+0x6c>
    6c7c:	4545      	cmp	r5, r8
    6c7e:	da25      	bge.n	6ccc <MicroVsnprintf+0x6c>
    if (*current == '%') {
    6c80:	2b25      	cmp	r3, #37	; 0x25
    6c82:	f107 0201 	add.w	r2, r7, #1
    6c86:	f040 80d1 	bne.w	6e2c <MicroVsnprintf+0x1cc>
      current++;
      switch (*current) {
    6c8a:	787b      	ldrb	r3, [r7, #1]
    6c8c:	2b73      	cmp	r3, #115	; 0x73
    6c8e:	f000 80d0 	beq.w	6e32 <MicroVsnprintf+0x1d2>
    6c92:	d808      	bhi.n	6ca6 <MicroVsnprintf+0x46>
    6c94:	2b64      	cmp	r3, #100	; 0x64
    6c96:	d015      	beq.n	6cc4 <MicroVsnprintf+0x64>
    6c98:	2b66      	cmp	r3, #102	; 0x66
    6c9a:	d041      	beq.n	6d20 <MicroVsnprintf+0xc0>
    6c9c:	2b25      	cmp	r3, #37	; 0x25
    6c9e:	f000 80c4 	beq.w	6e2a <MicroVsnprintf+0x1ca>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6ca2:	4617      	mov	r7, r2
    6ca4:	e7e5      	b.n	6c72 <MicroVsnprintf+0x12>
      switch (*current) {
    6ca6:	2b75      	cmp	r3, #117	; 0x75
    6ca8:	d021      	beq.n	6cee <MicroVsnprintf+0x8e>
    6caa:	2b78      	cmp	r3, #120	; 0x78
    6cac:	d1f9      	bne.n	6ca2 <MicroVsnprintf+0x42>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6cae:	eba8 0205 	sub.w	r2, r8, r5
    6cb2:	2a09      	cmp	r2, #9
    6cb4:	f105 0001 	add.w	r0, r5, #1
    6cb8:	dc22      	bgt.n	6d00 <MicroVsnprintf+0xa0>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
    6cba:	2300      	movs	r3, #0
    6cbc:	7033      	strb	r3, [r6, #0]
  return output_index;
}
    6cbe:	b015      	add	sp, #84	; 0x54
    6cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6cc4:	eba8 0305 	sub.w	r3, r8, r5
    6cc8:	2b0a      	cmp	r3, #10
    6cca:	dc01      	bgt.n	6cd0 <MicroVsnprintf+0x70>
  output[output_index++] = '\0';
    6ccc:	1c68      	adds	r0, r5, #1
    6cce:	e7f4      	b.n	6cba <MicroVsnprintf+0x5a>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6cd0:	f854 0b04 	ldr.w	r0, [r4], #4
    *buffer++ = '-';
    6cd4:	4631      	mov	r1, r6
  if (i < 0) {
    6cd6:	2800      	cmp	r0, #0
    *buffer++ = '-';
    6cd8:	bfbe      	ittt	lt
    6cda:	232d      	movlt	r3, #45	; 0x2d
    6cdc:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
    6ce0:	4240      	neglt	r0, r0
  return FastUInt32ToBufferLeft(u, buffer, 10);
    6ce2:	220a      	movs	r2, #10
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    6ce4:	f00e fda5 	bl	15832 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    6ce8:	1b80      	subs	r0, r0, r6
          output_index +=
    6cea:	4405      	add	r5, r0
          current++;
    6cec:	e016      	b.n	6d1c <MicroVsnprintf+0xbc>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6cee:	eba8 0305 	sub.w	r3, r8, r5
    6cf2:	2b0a      	cmp	r3, #10
    6cf4:	ddea      	ble.n	6ccc <MicroVsnprintf+0x6c>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    6cf6:	f854 0b04 	ldr.w	r0, [r4], #4
    6cfa:	220a      	movs	r2, #10
    6cfc:	4631      	mov	r1, r6
    6cfe:	e7f1      	b.n	6ce4 <MicroVsnprintf+0x84>
          output[output_index++] = '0';
    6d00:	2230      	movs	r2, #48	; 0x30
    6d02:	7032      	strb	r2, [r6, #0]
          output[output_index++] = 'x';
    6d04:	9a01      	ldr	r2, [sp, #4]
    6d06:	1cae      	adds	r6, r5, #2
    6d08:	5413      	strb	r3, [r2, r0]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6d0a:	1995      	adds	r5, r2, r6
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    6d0c:	4629      	mov	r1, r5
    6d0e:	f854 0b04 	ldr.w	r0, [r4], #4
    6d12:	2210      	movs	r2, #16
    6d14:	f00e fd8d 	bl	15832 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    6d18:	1b45      	subs	r5, r0, r5
          output_index +=
    6d1a:	4435      	add	r5, r6
          current++;
    6d1c:	1cba      	adds	r2, r7, #2
    6d1e:	e7c0      	b.n	6ca2 <MicroVsnprintf+0x42>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6d20:	eba8 0305 	sub.w	r3, r8, r5
    6d24:	ee07 3a90 	vmov	s15, r3
    6d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6d2c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    6d30:	eef4 7ac7 	vcmpe.f32	s15, s14
    6d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d38:	d4c8      	bmi.n	6ccc <MicroVsnprintf+0x6c>
              FormatFloat(&output[output_index], va_arg(args, double));
    6d3a:	3407      	adds	r4, #7
    6d3c:	f024 0407 	bic.w	r4, r4, #7
    6d40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    6d44:	f7fa faaa 	bl	129c <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    6d48:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
    6d4c:	2800      	cmp	r0, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    6d4e:	f1a3 097f 	sub.w	r9, r3, #127	; 0x7f
    6d52:	9302      	str	r3, [sp, #8]
    *current = '-';
    6d54:	4633      	mov	r3, r6
    6d56:	bfbc      	itt	lt
    6d58:	222d      	movlt	r2, #45	; 0x2d
    6d5a:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
    6d5e:	2200      	movs	r2, #0
  if (exponent == 128) {
    6d60:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  char* current_end = buffer + (kFastToBufferSize - 1);
    6d64:	f106 0b2f 	add.w	fp, r6, #47	; 0x2f
  const uint32_t fraction = (u & fraction_mask);
    6d68:	f3c0 0a16 	ubfx	sl, r0, #0, #23
  *current = 0;
    6d6c:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
    6d6e:	d10b      	bne.n	6d88 <MicroVsnprintf+0x128>
    if (fraction == 0) {
    6d70:	ebab 0103 	sub.w	r1, fp, r3
    6d74:	f1ba 0f00 	cmp.w	sl, #0
    6d78:	d104      	bne.n	6d84 <MicroVsnprintf+0x124>
      current = StrCatStr(current, (current_end - current), "Inf");
    6d7a:	4a36      	ldr	r2, [pc, #216]	; (6e54 <MicroVsnprintf+0x1f4>)
      current = StrCatStr(current, (current_end - current), "NaN");
    6d7c:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
    6d7e:	f00e fd42 	bl	15806 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  return current;
    6d82:	e7b1      	b.n	6ce8 <MicroVsnprintf+0x88>
      current = StrCatStr(current, (current_end - current), "NaN");
    6d84:	4a34      	ldr	r2, [pc, #208]	; (6e58 <MicroVsnprintf+0x1f8>)
    6d86:	e7f9      	b.n	6d7c <MicroVsnprintf+0x11c>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    6d88:	4a34      	ldr	r2, [pc, #208]	; (6e5c <MicroVsnprintf+0x1fc>)
    6d8a:	f10d 0c10 	add.w	ip, sp, #16
    6d8e:	6851      	ldr	r1, [r2, #4]
    6d90:	6810      	ldr	r0, [r2, #0]
    6d92:	46e6      	mov	lr, ip
    6d94:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    6d98:	4931      	ldr	r1, [pc, #196]	; (6e60 <MicroVsnprintf+0x200>)
    6d9a:	3208      	adds	r2, #8
    6d9c:	428a      	cmp	r2, r1
    6d9e:	46f4      	mov	ip, lr
    6da0:	d1f5      	bne.n	6d8e <MicroVsnprintf+0x12e>
    6da2:	6810      	ldr	r0, [r2, #0]
    6da4:	7912      	ldrb	r2, [r2, #4]
    6da6:	f8ce 0000 	str.w	r0, [lr]
    6daa:	f88e 2004 	strb.w	r2, [lr, #4]
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dae:	f10d 0c10 	add.w	ip, sp, #16
  uint32_t scaled_fraction = fraction;
    6db2:	4650      	mov	r0, sl
  for (int i = 0; i < scale_shifts_size; ++i) {
    6db4:	2200      	movs	r2, #0
    scaled_fraction += (fraction >> scale_shifts[i]);
    6db6:	f91c 1b01 	ldrsb.w	r1, [ip], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dba:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
    6dbc:	fa2a f101 	lsr.w	r1, sl, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dc0:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
    6dc2:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dc4:	d1f7      	bne.n	6db6 <MicroVsnprintf+0x156>
  *current = '1';
    6dc6:	2231      	movs	r2, #49	; 0x31
    6dc8:	701a      	strb	r2, [r3, #0]
  *current = '.';
    6dca:	222e      	movs	r2, #46	; 0x2e
    6dcc:	705a      	strb	r2, [r3, #1]
  current += 1;
    6dce:	f103 0a02 	add.w	sl, r3, #2
  *current = 0;
    6dd2:	2200      	movs	r2, #0
    6dd4:	709a      	strb	r2, [r3, #2]
  FastUInt32ToBufferLeft(number, number_string, base);
    6dd6:	a908      	add	r1, sp, #32
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6dd8:	ebab 030a 	sub.w	r3, fp, sl
  FastUInt32ToBufferLeft(number, number_string, base);
    6ddc:	220a      	movs	r2, #10
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6dde:	9303      	str	r3, [sp, #12]
  FastUInt32ToBufferLeft(number, number_string, base);
    6de0:	f00e fd27 	bl	15832 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    6de4:	9b03      	ldr	r3, [sp, #12]
    6de6:	aa08      	add	r2, sp, #32
    6de8:	4619      	mov	r1, r3
    6dea:	4650      	mov	r0, sl
    6dec:	f00e fd0b 	bl	15806 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatStr(current, (current_end - current), "*2^");
    6df0:	4a1c      	ldr	r2, [pc, #112]	; (6e64 <MicroVsnprintf+0x204>)
    6df2:	ebab 0100 	sub.w	r1, fp, r0
    6df6:	f00e fd06 	bl	15806 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  if (i < 0) {
    6dfa:	f1b9 0f00 	cmp.w	r9, #0
    *buffer++ = '-';
    6dfe:	bfbf      	itttt	lt
    6e00:	232d      	movlt	r3, #45	; 0x2d
    6e02:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
    6e06:	9b02      	ldrlt	r3, [sp, #8]
    6e08:	f1c3 097f 	rsblt	r9, r3, #127	; 0x7f
  current = StrCatStr(current, (current_end - current), "*2^");
    6e0c:	4682      	mov	sl, r0
  current = StrCatInt32(current, (current_end - current), exponent);
    6e0e:	ebab 0b00 	sub.w	fp, fp, r0
    *buffer++ = '-';
    6e12:	bfb4      	ite	lt
    6e14:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
    6e18:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
    6e1a:	220a      	movs	r2, #10
    6e1c:	4648      	mov	r0, r9
    6e1e:	f00e fd08 	bl	15832 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    6e22:	aa08      	add	r2, sp, #32
    6e24:	4659      	mov	r1, fp
    6e26:	4650      	mov	r0, sl
    6e28:	e7a9      	b.n	6d7e <MicroVsnprintf+0x11e>
          output[output_index++] = *current++;
    6e2a:	1cba      	adds	r2, r7, #2
      output[output_index++] = *current++;
    6e2c:	3501      	adds	r5, #1
    6e2e:	7033      	strb	r3, [r6, #0]
    6e30:	e737      	b.n	6ca2 <MicroVsnprintf+0x42>
          while (string_idx + output_index < usable_length &&
    6e32:	f854 2b04 	ldr.w	r2, [r4], #4
    6e36:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
    6e38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	f43f af6d 	beq.w	6d1c <MicroVsnprintf+0xbc>
            output[output_index++] = string[string_idx++];
    6e42:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
    6e44:	4541      	cmp	r1, r8
            output[output_index++] = string[string_idx++];
    6e46:	f806 3b01 	strb.w	r3, [r6], #1
    6e4a:	f105 0501 	add.w	r5, r5, #1
          while (string_idx + output_index < usable_length &&
    6e4e:	dbf3      	blt.n	6e38 <MicroVsnprintf+0x1d8>
    6e50:	e764      	b.n	6d1c <MicroVsnprintf+0xbc>
    6e52:	bf00      	nop
    6e54:	0002ad5b 	.word	0x0002ad5b
    6e58:	0002ad5f 	.word	0x0002ad5f
    6e5c:	0002ad67 	.word	0x0002ad67
    6e60:	0002ad6f 	.word	0x0002ad6f
    6e64:	0002ad63 	.word	0x0002ad63

00006e68 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
    6e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6e6a:	4605      	mov	r5, r0
    6e6c:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
    6e6e:	6900      	ldr	r0, [r0, #16]
    6e70:	4611      	mov	r1, r2
    6e72:	f017 fafe 	bl	1e472 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6e76:	696b      	ldr	r3, [r5, #20]
    6e78:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    6e7a:	42a3      	cmp	r3, r4
    6e7c:	d209      	bcs.n	6e92 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2a>
    TF_LITE_REPORT_ERROR(
    6e7e:	1ae2      	subs	r2, r4, r3
    6e80:	9200      	str	r2, [sp, #0]
    6e82:	4905      	ldr	r1, [pc, #20]	; (6e98 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x30>)
    6e84:	6868      	ldr	r0, [r5, #4]
    6e86:	4622      	mov	r2, r4
    6e88:	f017 fa09 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
    6e8c:	2000      	movs	r0, #0
  }
  head_ = aligned_result + size;
  return aligned_result;
}
    6e8e:	b003      	add	sp, #12
    6e90:	bd30      	pop	{r4, r5, pc}
  head_ = aligned_result + size;
    6e92:	4404      	add	r4, r0
    6e94:	612c      	str	r4, [r5, #16]
  return aligned_result;
    6e96:	e7fa      	b.n	6e8e <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x26>
    6e98:	0002ad75 	.word	0x0002ad75

00006e9c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
    6e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6e9e:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    6ea0:	6940      	ldr	r0, [r0, #20]
                                                 size_t alignment) {
    6ea2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    6ea4:	1b40      	subs	r0, r0, r5
    6ea6:	4611      	mov	r1, r2
    6ea8:	f017 faea 	bl	1e480 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    6eac:	6923      	ldr	r3, [r4, #16]
    6eae:	4283      	cmp	r3, r0
    6eb0:	d90a      	bls.n	6ec8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
    6eb2:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
    6eb4:	9300      	str	r3, [sp, #0]
    6eb6:	4905      	ldr	r1, [pc, #20]	; (6ecc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
    6eb8:	6860      	ldr	r0, [r4, #4]
    6eba:	1aeb      	subs	r3, r5, r3
    6ebc:	462a      	mov	r2, r5
    6ebe:	f017 f9ee 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
    6ec2:	2000      	movs	r0, #0
  }
  tail_ = aligned_result;
  return aligned_result;
}
    6ec4:	b003      	add	sp, #12
    6ec6:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
    6ec8:	6160      	str	r0, [r4, #20]
  return aligned_result;
    6eca:	e7fb      	b.n	6ec4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
    6ecc:	0002ad75 	.word	0x0002ad75

00006ed0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    6ed0:	b530      	push	{r4, r5, lr}
      tail_(buffer_tail) {}
    6ed2:	4d04      	ldr	r5, [pc, #16]	; (6ee4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
    6ed4:	e9c0 2302 	strd	r2, r3, [r0, #8]
    6ed8:	e9c0 5100 	strd	r5, r1, [r0]
    6edc:	e9c0 2304 	strd	r2, r3, [r0, #16]
    6ee0:	bd30      	pop	{r4, r5, pc}
    6ee2:	bf00      	nop
    6ee4:	00028d2c 	.word	0x00028d2c

00006ee8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6ee8:	b510      	push	{r4, lr}
    6eea:	b086      	sub	sp, #24
  TFLITE_DCHECK(error_reporter != nullptr);
    6eec:	b908      	cbnz	r0, 6ef2 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
    6eee:	f017 fb70 	bl	1e5d2 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    6ef2:	2900      	cmp	r1, #0
    6ef4:	d0fb      	beq.n	6eee <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
      tail_(buffer_tail) {}
    6ef6:	4c0d      	ldr	r4, [pc, #52]	; (6f2c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x44>)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    6ef8:	440a      	add	r2, r1
      tail_(buffer_tail) {}
    6efa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    6efe:	e9cd 1204 	strd	r1, r2, [sp, #16]
    6f02:	e9cd 4000 	strd	r4, r0, [sp]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6f06:	2204      	movs	r2, #4
    6f08:	2118      	movs	r1, #24
    6f0a:	4668      	mov	r0, sp
    6f0c:	f7ff ffc6 	bl	6e9c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6f10:	b150      	cbz	r0, 6f28 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6f12:	9b01      	ldr	r3, [sp, #4]
    6f14:	6043      	str	r3, [r0, #4]
    6f16:	9b02      	ldr	r3, [sp, #8]
    6f18:	6083      	str	r3, [r0, #8]
    6f1a:	9b03      	ldr	r3, [sp, #12]
    6f1c:	60c3      	str	r3, [r0, #12]
    6f1e:	9b04      	ldr	r3, [sp, #16]
    6f20:	6103      	str	r3, [r0, #16]
    6f22:	9b05      	ldr	r3, [sp, #20]
    6f24:	6004      	str	r4, [r0, #0]
    6f26:	6143      	str	r3, [r0, #20]
}
    6f28:	b006      	add	sp, #24
    6f2a:	bd10      	pop	{r4, pc}
    6f2c:	00028d2c 	.word	0x00028d2c

00006f30 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
    6f30:	680a      	ldr	r2, [r1, #0]
TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    6f32:	6883      	ldr	r3, [r0, #8]
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
  return &context->tensors[node->outputs->data[index]];
    6f34:	6849      	ldr	r1, [r1, #4]
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
    6f36:	b570      	push	{r4, r5, r6, lr}
  return &context->tensors[node->inputs->data[index]];
    6f38:	6855      	ldr	r5, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    6f3a:	684c      	ldr	r4, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    6f3c:	01aa      	lsls	r2, r5, #6
    6f3e:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    6f40:	5c98      	ldrb	r0, [r3, r2]
    6f42:	2803      	cmp	r0, #3
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
    6f44:	b08c      	sub	sp, #48	; 0x30
    6f46:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    6f4a:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
    6f4e:	d03f      	beq.n	6fd0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xa0>
    6f50:	2809      	cmp	r0, #9
    6f52:	d023      	beq.n	6f9c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    6f54:	2801      	cmp	r0, #1
    6f56:	d15e      	bne.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    case kTfLiteFloat32: {
      ReluFloat(GetTensorShape(input), GetTensorData<float>(input),
    6f58:	4629      	mov	r1, r5
    6f5a:	4668      	mov	r0, sp
    6f5c:	f00e fcea 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                GetTensorShape(output), GetTensorData<float>(output));
    6f60:	4621      	mov	r1, r4
    6f62:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6f64:	686d      	ldr	r5, [r5, #4]
    6f66:	f00e fce5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6f6a:	b104      	cbz	r4, 6f6e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3e>
    6f6c:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    6f6e:	a906      	add	r1, sp, #24
    6f70:	4668      	mov	r0, sp
    6f72:	f00e fcb6 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    output_data[i] = clamped;
    6f76:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6f7a:	462b      	mov	r3, r5
  for (int i = 0; i < flat_size; ++i) {
    6f7c:	2200      	movs	r2, #0
    6f7e:	4290      	cmp	r0, r2
    6f80:	dd40      	ble.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    const float val = input_data[i];
    6f82:	ecf3 7a01 	vldmia	r3!, {s15}
    output_data[i] = clamped;
    6f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f8e:	bfb8      	it	lt
    6f90:	eef0 7a47 	vmovlt.f32	s15, s14
    6f94:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    6f98:	3201      	adds	r2, #1
    6f9a:	e7f0      	b.n	6f7e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x4e>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(input->params.zero_point, GetTensorShape(input),
    6f9c:	4629      	mov	r1, r5
    6f9e:	4668      	mov	r0, sp
    6fa0:	692e      	ldr	r6, [r5, #16]
    6fa2:	f00e fcc7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorData<int8_t>(input),
                            GetTensorShape(output),
    6fa6:	4621      	mov	r1, r4
    6fa8:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6faa:	686d      	ldr	r5, [r5, #4]
    6fac:	f00e fcc2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6fb0:	b104      	cbz	r4, 6fb4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x84>
    6fb2:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    6fb4:	a906      	add	r1, sp, #24
    6fb6:	4668      	mov	r0, sp
    6fb8:	f00e fc93 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    6fbc:	2300      	movs	r3, #0
    6fbe:	4298      	cmp	r0, r3
    6fc0:	dd20      	ble.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    const Q clamped = val < lower ? lower : val;
    6fc2:	56ea      	ldrsb	r2, [r5, r3]
    6fc4:	42b2      	cmp	r2, r6
    6fc6:	bfb8      	it	lt
    6fc8:	4632      	movlt	r2, r6
    6fca:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    6fcc:	3301      	adds	r3, #1
    6fce:	e7f6      	b.n	6fbe <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x8e>
                            GetTensorData<int8_t>(output));
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
    6fd0:	4629      	mov	r1, r5
    6fd2:	4668      	mov	r0, sp
    6fd4:	692e      	ldr	r6, [r5, #16]
    6fd6:	f00e fcad 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                             GetTensorData<uint8_t>(input),
                             GetTensorShape(output),
    6fda:	4621      	mov	r1, r4
    6fdc:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6fde:	686d      	ldr	r5, [r5, #4]
    6fe0:	f00e fca8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6fe4:	b104      	cbz	r4, 6fe8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    6fe6:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    6fe8:	a906      	add	r1, sp, #24
    6fea:	4668      	mov	r0, sp
    6fec:	f00e fc79 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    6ff0:	2300      	movs	r3, #0
    6ff2:	4298      	cmp	r0, r3
    6ff4:	dd06      	ble.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    const Q clamped = val < lower ? lower : val;
    6ff6:	5cea      	ldrb	r2, [r5, r3]
    6ff8:	42b2      	cmp	r2, r6
    6ffa:	bfb8      	it	lt
    6ffc:	4632      	movlt	r2, r6
    6ffe:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    7000:	3301      	adds	r3, #1
    7002:	e7f6      	b.n	6ff2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xc2>
                             GetTensorShape(output),
    7004:	a806      	add	r0, sp, #24
    7006:	f00e fc50 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
    700a:	4668      	mov	r0, sp
    700c:	f00e fc4d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                             GetTensorData<uint8_t>(output));
      return kTfLiteOk;
    7010:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
    7012:	b00c      	add	sp, #48	; 0x30
    7014:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    7016:	6974      	ldr	r4, [r6, #20]
    7018:	f7f9 fc4b 	bl	8b2 <TfLiteTypeGetName>
    701c:	4903      	ldr	r1, [pc, #12]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    701e:	4602      	mov	r2, r0
    7020:	4630      	mov	r0, r6
    7022:	47a0      	blx	r4
      return kTfLiteError;
    7024:	2001      	movs	r0, #1
    7026:	e7f4      	b.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7028:	00000000 	.word	0x00000000
    702c:	0002adb9 	.word	0x0002adb9

00007030 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    7030:	680a      	ldr	r2, [r1, #0]
TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7032:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    7034:	6849      	ldr	r1, [r1, #4]
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
    7036:	b5f0      	push	{r4, r5, r6, r7, lr}
  return &context->tensors[node->inputs->data[index]];
    7038:	6855      	ldr	r5, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    703a:	684c      	ldr	r4, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    703c:	01aa      	lsls	r2, r5, #6
    703e:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    7040:	5c98      	ldrb	r0, [r3, r2]
    7042:	2803      	cmp	r0, #3
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
    7044:	b08d      	sub	sp, #52	; 0x34
    7046:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    704a:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
    704e:	d056      	beq.n	70fe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xce>
    7050:	2809      	cmp	r0, #9
    7052:	d02d      	beq.n	70b0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x80>
    7054:	2801      	cmp	r0, #1
    7056:	f040 8081 	bne.w	715c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    case kTfLiteFloat32: {
      Relu6Float(GetTensorShape(input), GetTensorData<float>(input),
    705a:	4629      	mov	r1, r5
    705c:	4668      	mov	r0, sp
    705e:	f00e fc69 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                 GetTensorShape(output), GetTensorData<float>(output));
    7062:	4621      	mov	r1, r4
    7064:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7066:	686d      	ldr	r5, [r5, #4]
    7068:	f00e fc64 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    706c:	b104      	cbz	r4, 7070 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x40>
    706e:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    7070:	a906      	add	r1, sp, #24
    7072:	4668      	mov	r0, sp
    7074:	f00e fc35 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    output_data[i] = clamped;
    7078:	eddf 6a3d 	vldr	s13, [pc, #244]	; 7170 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x140>
    707c:	462b      	mov	r3, r5
  for (int i = 0; i < flat_size; ++i) {
    707e:	2200      	movs	r2, #0
    output_data[i] = clamped;
    7080:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
  for (int i = 0; i < flat_size; ++i) {
    7084:	4290      	cmp	r0, r2
    7086:	dd60      	ble.n	714a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const float val = input_data[i];
    7088:	ecf3 7a01 	vldmia	r3!, {s15}
    output_data[i] = clamped;
    708c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7094:	bfb8      	it	lt
    7096:	eef0 7a66 	vmovlt.f32	s15, s13
    709a:	eef4 7ac7 	vcmpe.f32	s15, s14
    709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70a2:	bf88      	it	hi
    70a4:	eef0 7a47 	vmovhi.f32	s15, s14
    70a8:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    70ac:	3201      	adds	r2, #1
    70ae:	e7e9      	b.n	7084 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      const int8_t six = FloatToAsymmetricQuantizedInt8(
    70b0:	edd5 0a03 	vldr	s1, [r5, #12]
    70b4:	6928      	ldr	r0, [r5, #16]
    70b6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    70ba:	f017 fa4d 	bl	1e558 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const int8_t zero = input->params.zero_point;
      Relu6Quantized<int8_t>(
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70be:	4629      	mov	r1, r5
      const int8_t six = FloatToAsymmetricQuantizedInt8(
    70c0:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70c2:	4668      	mov	r0, sp
      const int8_t zero = input->params.zero_point;
    70c4:	f995 7010 	ldrsb.w	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70c8:	f00e fc34 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<int8_t>(output));
    70cc:	4621      	mov	r1, r4
    70ce:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    70d0:	686d      	ldr	r5, [r5, #4]
    70d2:	f00e fc2f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    70d6:	b104      	cbz	r4, 70da <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    70d8:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    70da:	a906      	add	r1, sp, #24
    70dc:	4668      	mov	r0, sp
    70de:	f00e fc00 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    70e2:	2300      	movs	r3, #0
    70e4:	4298      	cmp	r0, r3
    70e6:	dd30      	ble.n	714a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const Q val = input_data[i];
    70e8:	56ea      	ldrsb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    70ea:	4296      	cmp	r6, r2
    70ec:	db05      	blt.n	70fa <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xca>
    70ee:	42ba      	cmp	r2, r7
    70f0:	bfb8      	it	lt
    70f2:	463a      	movlt	r2, r7
    output_data[i] = clamped;
    70f4:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    70f6:	3301      	adds	r3, #1
    70f8:	e7f4      	b.n	70e4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    70fa:	4632      	mov	r2, r6
    70fc:	e7fa      	b.n	70f4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc4>
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
    70fe:	edd5 0a03 	vldr	s1, [r5, #12]
    7102:	6928      	ldr	r0, [r5, #16]
    7104:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    7108:	f017 fa0f 	bl	1e52a <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const uint8_t zero = input->params.zero_point;
      Relu6Quantized<uint8_t>(
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    710c:	4629      	mov	r1, r5
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
    710e:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7110:	4668      	mov	r0, sp
      const uint8_t zero = input->params.zero_point;
    7112:	7c2f      	ldrb	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7114:	f00e fc0e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    7118:	4621      	mov	r1, r4
    711a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    711c:	686d      	ldr	r5, [r5, #4]
    711e:	f00e fc09 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7122:	b104      	cbz	r4, 7126 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xf6>
    7124:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    7126:	a906      	add	r1, sp, #24
    7128:	4668      	mov	r0, sp
    712a:	f00e fbda 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    712e:	2300      	movs	r3, #0
    7130:	4298      	cmp	r0, r3
    7132:	dd0a      	ble.n	714a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const Q val = input_data[i];
    7134:	5cea      	ldrb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    7136:	4296      	cmp	r6, r2
    7138:	d305      	bcc.n	7146 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x116>
    713a:	42ba      	cmp	r2, r7
    713c:	bf38      	it	cc
    713e:	463a      	movcc	r2, r7
    output_data[i] = clamped;
    7140:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    7142:	3301      	adds	r3, #1
    7144:	e7f4      	b.n	7130 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x100>
    7146:	4632      	mov	r2, r6
    7148:	e7fa      	b.n	7140 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x110>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    714a:	a806      	add	r0, sp, #24
    714c:	f00e fbad 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7150:	4668      	mov	r0, sp
    7152:	f00e fbaa 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    7156:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
    7158:	b00d      	add	sp, #52	; 0x34
    715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    715c:	6974      	ldr	r4, [r6, #20]
    715e:	f7f9 fba8 	bl	8b2 <TfLiteTypeGetName>
    7162:	4904      	ldr	r1, [pc, #16]	; (7174 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x144>)
    7164:	4602      	mov	r2, r0
    7166:	4630      	mov	r0, r6
    7168:	47a0      	blx	r4
      return kTfLiteError;
    716a:	2001      	movs	r0, #1
    716c:	e7f4      	b.n	7158 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x128>
    716e:	bf00      	nop
    7170:	00000000 	.word	0x00000000
    7174:	0002adb9 	.word	0x0002adb9

00007178 <_ZN6tflite3ops5micro13Register_RELUEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7178:	4800      	ldr	r0, [pc, #0]	; (717c <_ZN6tflite3ops5micro13Register_RELUEv+0x4>)
    717a:	4770      	bx	lr
    717c:	20000068 	.word	0x20000068

00007180 <_ZN6tflite3ops5micro14Register_RELU6Ev>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7180:	4800      	ldr	r0, [pc, #0]	; (7184 <_ZN6tflite3ops5micro14Register_RELU6Ev+0x4>)
    7182:	4770      	bx	lr
    7184:	20000088 	.word	0x20000088

00007188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7188:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
    718a:	b570      	push	{r4, r5, r6, lr}
    718c:	d128      	bne.n	71e0 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x58>
    718e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    7192:	425e      	negs	r6, r3
    7194:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
    7196:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    719a:	2c00      	cmp	r4, #0
    719c:	f175 0300 	sbcs.w	r3, r5, #0
    71a0:	4b1c      	ldr	r3, [pc, #112]	; (7214 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x8c>)
    71a2:	bfa8      	it	ge
    71a4:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    71a8:	b9e6      	cbnz	r6, 71e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x5c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    71aa:	18e4      	adds	r4, r4, r3
    71ac:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
    71b0:	2c00      	cmp	r4, #0
    71b2:	f175 0300 	sbcs.w	r3, r5, #0
    71b6:	da06      	bge.n	71c6 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x3e>
    71b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    71bc:	18e4      	adds	r4, r4, r3
    71be:	f04f 0300 	mov.w	r3, #0
    71c2:	eb43 0505 	adc.w	r5, r3, r5
    71c6:	0fe0      	lsrs	r0, r4, #31
    71c8:	ea40 0145 	orr.w	r1, r0, r5, lsl #1
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
    71cc:	4252      	negs	r2, r2

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    71ce:	2a00      	cmp	r2, #0
    71d0:	da0b      	bge.n	71ea <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x62>
    71d2:	4b11      	ldr	r3, [pc, #68]	; (7218 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x90>)
    71d4:	4a11      	ldr	r2, [pc, #68]	; (721c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
    71d6:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    71da:	4811      	ldr	r0, [pc, #68]	; (7220 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x98>)
    71dc:	f00d f91c 	bl	14418 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    71e0:	2600      	movs	r6, #0
    71e2:	e7d8      	b.n	7196 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0xe>
    71e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    71e8:	e7f0      	b.n	71cc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x44>
  assert(exponent <= 31);
    71ea:	2a1f      	cmp	r2, #31
    71ec:	dd04      	ble.n	71f8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x70>
    71ee:	4b0d      	ldr	r3, [pc, #52]	; (7224 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x9c>)
    71f0:	4a0a      	ldr	r2, [pc, #40]	; (721c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
    71f2:	f240 1167 	movw	r1, #359	; 0x167
    71f6:	e7f0      	b.n	71da <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x52>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    71f8:	2301      	movs	r3, #1
    71fa:	4093      	lsls	r3, r2
    71fc:	3b01      	subs	r3, #1
  return a & b;
    71fe:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
    7202:	105b      	asrs	r3, r3, #1
  return a + b;
    7204:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
    7208:	4111      	asrs	r1, r2
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
    720a:	4298      	cmp	r0, r3
    720c:	bfd4      	ite	le
    720e:	4608      	movle	r0, r1
    7210:	1c48      	addgt	r0, r1, #1
    7212:	bd70      	pop	{r4, r5, r6, pc}
    7214:	c0000001 	.word	0xc0000001
    7218:	0002ade5 	.word	0x0002ade5
    721c:	0002adf3 	.word	0x0002adf3
    7220:	0002ae48 	.word	0x0002ae48
    7224:	0002ae94 	.word	0x0002ae94

00007228 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
    7228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    722c:	ed2d 8b06 	vpush	{d8-d10}
    7230:	b081      	sub	sp, #4
    7232:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
    7236:	4682      	mov	sl, r0
    7238:	468b      	mov	fp, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    723a:	4610      	mov	r0, r2
    723c:	4619      	mov	r1, r3
                             OpData* data) {
    723e:	461e      	mov	r6, r3
    7240:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    7242:	f017 f90d 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    7246:	782b      	ldrb	r3, [r5, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    7248:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    724c:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    724e:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    7250:	d001      	beq.n	7256 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
    7252:	2b09      	cmp	r3, #9
    7254:	d172      	bne.n	733c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x114>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
    7256:	693b      	ldr	r3, [r7, #16]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    7258:	ed97 aa03 	vldr	s20, [r7, #12]
    725c:	ed96 8a03 	vldr	s16, [r6, #12]
    7260:	425b      	negs	r3, r3
    7262:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
    7264:	6933      	ldr	r3, [r6, #16]
    7266:	425b      	negs	r3, r3
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const double twice_max_input_scale =
        2 * static_cast<double>(
    7268:	eeb4 aac8 	vcmpe.f32	s20, s16
    data->input2_offset = -input2->params.zero_point;
    726c:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
    726e:	692b      	ldr	r3, [r5, #16]
    7270:	6323      	str	r3, [r4, #48]	; 0x30
        2 * static_cast<double>(
    7272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    data->left_shift = 20;
    7276:	f04f 0314 	mov.w	r3, #20
        2 * static_cast<double>(
    727a:	bfb4      	ite	lt
    727c:	ee18 0a10 	vmovlt	r0, s16
    7280:	ee1a 0a10 	vmovge	r0, s20
    data->left_shift = 20;
    7284:	6263      	str	r3, [r4, #36]	; 0x24
        2 * static_cast<double>(
    7286:	f7f9 fcef 	bl	c68 <__aeabi_f2d>
    728a:	4602      	mov	r2, r0
    728c:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
    728e:	f7f9 fb8d 	bl	9ac <__adddf3>
    7292:	4606      	mov	r6, r0
    7294:	460f      	mov	r7, r1
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
    7296:	ee18 0a10 	vmov	r0, s16
    729a:	f7f9 fce5 	bl	c68 <__aeabi_f2d>
    const double real_input2_multiplier =
    729e:	4632      	mov	r2, r6
    72a0:	463b      	mov	r3, r7
    72a2:	f7f9 fe63 	bl	f6c <__aeabi_ddiv>
    const double real_output_multiplier =
    72a6:	4b28      	ldr	r3, [pc, #160]	; (7348 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x120>)
    const double real_input2_multiplier =
    72a8:	ec41 0b19 	vmov	d9, r0, r1
    const double real_output_multiplier =
    72ac:	2200      	movs	r2, #0
    72ae:	4630      	mov	r0, r6
    72b0:	4639      	mov	r1, r7
    72b2:	f7f9 fd31 	bl	d18 <__aeabi_dmul>
    72b6:	4680      	mov	r8, r0
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
    72b8:	68e8      	ldr	r0, [r5, #12]
    const double real_output_multiplier =
    72ba:	4689      	mov	r9, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
    72bc:	f7f9 fcd4 	bl	c68 <__aeabi_f2d>
    72c0:	4602      	mov	r2, r0
    72c2:	460b      	mov	r3, r1
    const double real_output_multiplier =
    72c4:	4640      	mov	r0, r8
    72c6:	4649      	mov	r1, r9
    72c8:	f7f9 fe50 	bl	f6c <__aeabi_ddiv>
    72cc:	ec41 0b18 	vmov	d8, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
    72d0:	ee1a 0a10 	vmov	r0, s20
    72d4:	f7f9 fcc8 	bl	c68 <__aeabi_f2d>
    const double real_input1_multiplier =
    72d8:	4632      	mov	r2, r6
    72da:	463b      	mov	r3, r7
    72dc:	f7f9 fe46 	bl	f6c <__aeabi_ddiv>

    QuantizeMultiplierSmallerThanOneExp(
    72e0:	f104 0904 	add.w	r9, r4, #4
    72e4:	f104 0814 	add.w	r8, r4, #20
    const double real_input1_multiplier =
    72e8:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    72ec:	4649      	mov	r1, r9
    72ee:	4640      	mov	r0, r8
    72f0:	f00a fa6e 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
    72f4:	eeb0 0a49 	vmov.f32	s0, s18
    72f8:	eef0 0a69 	vmov.f32	s1, s19
    72fc:	f104 0108 	add.w	r1, r4, #8
    7300:	f104 0018 	add.w	r0, r4, #24
    7304:	f00a fa64 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
    7308:	eeb0 0a48 	vmov.f32	s0, s16
    730c:	eef0 0a68 	vmov.f32	s1, s17
    7310:	f104 0120 	add.w	r1, r4, #32
    7314:	f104 001c 	add.w	r0, r4, #28
    7318:	f00a fa5a 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    731c:	f104 0310 	add.w	r3, r4, #16
    7320:	f89b 1000 	ldrb.w	r1, [fp]
    7324:	9310      	str	r3, [sp, #64]	; 0x40
    7326:	462a      	mov	r2, r5
    7328:	f104 030c 	add.w	r3, r4, #12
    732c:	4650      	mov	r0, sl
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
    732e:	b001      	add	sp, #4
    7330:	ecbd 8b06 	vpop	{d8-d10}
    7334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    7338:	f00a baa2 	b.w	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
    733c:	2000      	movs	r0, #0
    733e:	b001      	add	sp, #4
    7340:	ecbd 8b06 	vpop	{d8-d10}
    7344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7348:	3eb00000 	.word	0x3eb00000

0000734c <_ZN6tflite3ops5micro12Register_ADDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    734c:	4800      	ldr	r0, [pc, #0]	; (7350 <_ZN6tflite3ops5micro12Register_ADDEv+0x4>)
    734e:	4770      	bx	lr
    7350:	200000a8 	.word	0x200000a8

00007354 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
    7354:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
    7356:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
    7358:	b0ab      	sub	sp, #172	; 0xac
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    735a:	2a01      	cmp	r2, #1
    735c:	e9dd 6530 	ldrd	r6, r5, [sp, #192]	; 0xc0
    7360:	9c32      	ldr	r4, [sp, #200]	; 0xc8
    7362:	d03d      	beq.n	73e0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    7364:	2a03      	cmp	r2, #3
    7366:	d040      	beq.n	73ea <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x96>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
    7368:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 7458 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    736c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 745c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
    7370:	2a02      	cmp	r2, #2
    7372:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7376:	bf18      	it	ne
    7378:	eef0 7a47 	vmovne.f32	s15, s14
    737c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    7380:	bf18      	it	ne
    7382:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
    7386:	781b      	ldrb	r3, [r3, #0]
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
    7388:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
    738c:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    7390:	af10      	add	r7, sp, #64	; 0x40
    TF_LITE_ADD(BroadcastAdd4DSlow);
    7392:	4631      	mov	r1, r6
    7394:	a804      	add	r0, sp, #16
  if (data->requires_broadcast) {
    7396:	b35b      	cbz	r3, 73f0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x9c>
    TF_LITE_ADD(BroadcastAdd4DSlow);
    7398:	f00e facc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    739c:	b106      	cbz	r6, 73a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x4c>
    739e:	6876      	ldr	r6, [r6, #4]
    73a0:	4629      	mov	r1, r5
    73a2:	a80a      	add	r0, sp, #40	; 0x28
    73a4:	f00e fac6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    73a8:	b105      	cbz	r5, 73ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
    73aa:	686d      	ldr	r5, [r5, #4]
    73ac:	4621      	mov	r1, r4
    73ae:	4638      	mov	r0, r7
    73b0:	f00e fac0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    73b4:	b104      	cbz	r4, 73b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
    73b6:	6864      	ldr	r4, [r4, #4]
    73b8:	9500      	str	r5, [sp, #0]
    73ba:	e9cd 7401 	strd	r7, r4, [sp, #4]
    73be:	ab0a      	add	r3, sp, #40	; 0x28
    73c0:	4632      	mov	r2, r6
    73c2:	a904      	add	r1, sp, #16
    73c4:	a816      	add	r0, sp, #88	; 0x58
    73c6:	f00e fd5d 	bl	15e84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
    73ca:	4638      	mov	r0, r7
    73cc:	f00e fa6d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    73d0:	a80a      	add	r0, sp, #40	; 0x28
    73d2:	f00e fa6a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    73d6:	a804      	add	r0, sp, #16
    73d8:	f00e fa67 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
    73dc:	b02b      	add	sp, #172	; 0xac
    73de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
    73e0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 7458 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    *activation_min = 0;
    73e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 7460 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10c>
    73e8:	e7cd      	b.n	7386 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x32>
    *activation_max = 6;
    73ea:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    73ee:	e7f9      	b.n	73e4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x90>
    TF_LITE_ADD(Add);
    73f0:	f00e faa0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    73f4:	b106      	cbz	r6, 73f8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa4>
    73f6:	6876      	ldr	r6, [r6, #4]
    73f8:	4629      	mov	r1, r5
    73fa:	a80a      	add	r0, sp, #40	; 0x28
    73fc:	f00e fa9a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7400:	b105      	cbz	r5, 7404 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb0>
    7402:	686d      	ldr	r5, [r5, #4]
    7404:	4621      	mov	r1, r4
    7406:	4638      	mov	r0, r7
    7408:	f00e fa94 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    740c:	b104      	cbz	r4, 7410 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xbc>
    740e:	6864      	ldr	r4, [r4, #4]
inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
    7410:	463a      	mov	r2, r7
    7412:	a90a      	add	r1, sp, #40	; 0x28
    7414:	a804      	add	r0, sp, #16
    7416:	f00e fb37 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; i++) {
    741a:	2300      	movs	r3, #0
    741c:	4298      	cmp	r0, r3
    741e:	ddd4      	ble.n	73ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x76>
    auto x = input1_data[i] + input2_data[i];
    7420:	ecb5 7a01 	vldmia	r5!, {s14}
    7424:	ecf6 7a01 	vldmia	r6!, {s15}
    7428:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[i] = ActivationFunctionWithMinMax(
    742c:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
    7430:	eef4 7ac7 	vcmpe.f32	s15, s14
    7434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7438:	bfb8      	it	lt
    743a:	eef0 7a47 	vmovlt.f32	s15, s14
    743e:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
    7442:	eef4 7ac7 	vcmpe.f32	s15, s14
    7446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    744a:	bf88      	it	hi
    744c:	eef0 7a47 	vmovhi.f32	s15, s14
    7450:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
    7454:	3301      	adds	r3, #1
    7456:	e7e1      	b.n	741c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
    7458:	7f7fffff 	.word	0x7f7fffff
    745c:	ff7fffff 	.word	0xff7fffff
    7460:	00000000 	.word	0x00000000

00007464 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    7464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7468:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    746a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    746e:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
    7470:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    7472:	685a      	ldr	r2, [r3, #4]
    7474:	689b      	ldr	r3, [r3, #8]
    7476:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
    747a:	6872      	ldr	r2, [r6, #4]
    747c:	6857      	ldr	r7, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    747e:	b095      	sub	sp, #84	; 0x54
    7480:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
    7484:	f10d 0a1c 	add.w	sl, sp, #28
    7488:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    748c:	eb08 1383 	add.w	r3, r8, r3, lsl #6
    7490:	e9cd 7a00 	strd	r7, sl, [sp]
    7494:	464a      	mov	r2, r9
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    7496:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
    7498:	9305      	str	r3, [sp, #20]
    749a:	9104      	str	r1, [sp, #16]
    749c:	f7ff fec4 	bl	7228 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
    74a0:	4604      	mov	r4, r0
    74a2:	b978      	cbnz	r0, 74c4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
    74a4:	f818 000b 	ldrb.w	r0, [r8, fp]
    74a8:	2801      	cmp	r0, #1
    74aa:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    74ae:	d10d      	bne.n	74cc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
    74b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    74b4:	460a      	mov	r2, r1
    74b6:	f8cd 9000 	str.w	r9, [sp]
    74ba:	4653      	mov	r3, sl
    74bc:	4631      	mov	r1, r6
    74be:	4628      	mov	r0, r5
    74c0:	f7ff ff48 	bl	7354 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
    74c4:	4620      	mov	r0, r4
    74c6:	b015      	add	sp, #84	; 0x54
    74c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    74cc:	2803      	cmp	r0, #3
    74ce:	d001      	beq.n	74d4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    74d0:	2809      	cmp	r0, #9
    74d2:	d10b      	bne.n	74ec <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
    74d4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    74d8:	460a      	mov	r2, r1
    74da:	f8cd 9000 	str.w	r9, [sp]
    74de:	4653      	mov	r3, sl
    74e0:	4631      	mov	r1, r6
    74e2:	4628      	mov	r0, r5
    74e4:	f00e ff03 	bl	162ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
    74e8:	4604      	mov	r4, r0
    74ea:	e7eb      	b.n	74c4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    74ec:	696c      	ldr	r4, [r5, #20]
    74ee:	f7f9 f9e0 	bl	8b2 <TfLiteTypeGetName>
    74f2:	f818 300b 	ldrb.w	r3, [r8, fp]
    74f6:	4903      	ldr	r1, [pc, #12]	; (7504 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
    74f8:	4602      	mov	r2, r0
    74fa:	4628      	mov	r0, r5
    74fc:	47a0      	blx	r4
    return kTfLiteError;
    74fe:	2401      	movs	r4, #1
    7500:	e7e0      	b.n	74c4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    7502:	bf00      	nop
    7504:	0002aea3 	.word	0x0002aea3

00007508 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7508:	4800      	ldr	r0, [pc, #0]	; (750c <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x4>)
    750a:	4770      	bx	lr
    750c:	200000c8 	.word	0x200000c8

00007510 <_ZN6tflite3ops5micro16Register_ARG_MINEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7510:	4800      	ldr	r0, [pc, #0]	; (7514 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x4>)
    7512:	4770      	bx	lr
    7514:	200000e8 	.word	0x200000e8

00007518 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
    7518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    751c:	4690      	mov	r8, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    751e:	680a      	ldr	r2, [r1, #0]
    7520:	6883      	ldr	r3, [r0, #8]
    7522:	6897      	ldr	r7, [r2, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
    7524:	4604      	mov	r4, r0
    7526:	01b8      	lsls	r0, r7, #6
    7528:	b092      	sub	sp, #72	; 0x48
  if (axis->type == kTfLiteInt32) {
    752a:	5c18      	ldrb	r0, [r3, r0]
    752c:	2802      	cmp	r0, #2
    752e:	eb03 1787 	add.w	r7, r3, r7, lsl #6
    7532:	d178      	bne.n	7626 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->outputs->data[index]];
    7534:	6849      	ldr	r1, [r1, #4]
    7536:	684d      	ldr	r5, [r1, #4]
    7538:	01a9      	lsls	r1, r5, #6
    753a:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    if (output->type == kTfLiteInt32) {
    753e:	5c58      	ldrb	r0, [r3, r1]
    7540:	2802      	cmp	r0, #2
    7542:	d170      	bne.n	7626 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->inputs->data[index]];
    7544:	6856      	ldr	r6, [r2, #4]
    7546:	01b2      	lsls	r2, r6, #6
    7548:	eb03 1686 	add.w	r6, r3, r6, lsl #6
      switch (input->type) {
    754c:	5c98      	ldrb	r0, [r3, r2]
    754e:	2803      	cmp	r0, #3
    7550:	d028      	beq.n	75a4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x8c>
    7552:	2809      	cmp	r0, #9
    7554:	d042      	beq.n	75dc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xc4>
    7556:	2801      	cmp	r0, #1
    7558:	d15c      	bne.n	7614 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xfc>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
    755a:	4631      	mov	r1, r6
    755c:	a806      	add	r0, sp, #24
    755e:	f00e f9e9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7562:	687a      	ldr	r2, [r7, #4]
    7564:	6874      	ldr	r4, [r6, #4]
    7566:	9203      	str	r2, [sp, #12]
    7568:	4629      	mov	r1, r5
    756a:	a80c      	add	r0, sp, #48	; 0x30
    756c:	f00e f9e2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7570:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    7572:	9a03      	ldr	r2, [sp, #12]
    7574:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7576:	e9cd 3100 	strd	r3, r1, [sp]
    757a:	a806      	add	r0, sp, #24
    757c:	ab0c      	add	r3, sp, #48	; 0x30
    757e:	4621      	mov	r1, r4
  if (is_arg_max) {
    7580:	f1b8 0f00 	cmp.w	r8, #0
    7584:	d00b      	beq.n	759e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x86>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7586:	f00e fec0 	bl	1630a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
    758a:	a80c      	add	r0, sp, #48	; 0x30
    758c:	f00e f98d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7590:	a806      	add	r0, sp, #24
    7592:	f00e f98a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    7596:	2000      	movs	r0, #0
}
    7598:	b012      	add	sp, #72	; 0x48
    759a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    759e:	f00e ff34 	bl	1640a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75a2:	e7f2      	b.n	758a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
    75a4:	4631      	mov	r1, r6
    75a6:	a806      	add	r0, sp, #24
    75a8:	f00e f9c4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    75ac:	687a      	ldr	r2, [r7, #4]
    75ae:	6874      	ldr	r4, [r6, #4]
    75b0:	9203      	str	r2, [sp, #12]
    75b2:	4629      	mov	r1, r5
    75b4:	a80c      	add	r0, sp, #48	; 0x30
    75b6:	f00e f9bd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    75ba:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    75bc:	9a03      	ldr	r2, [sp, #12]
    75be:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75c0:	e9cd 3100 	strd	r3, r1, [sp]
    75c4:	a806      	add	r0, sp, #24
    75c6:	ab0c      	add	r3, sp, #48	; 0x30
    75c8:	4621      	mov	r1, r4
  if (is_arg_max) {
    75ca:	f1b8 0f00 	cmp.w	r8, #0
    75ce:	d002      	beq.n	75d6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xbe>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75d0:	f00e ff9b 	bl	1650a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75d4:	e7d9      	b.n	758a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75d6:	f00f f80c 	bl	165f2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75da:	e7d6      	b.n	758a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
    75dc:	4631      	mov	r1, r6
    75de:	a806      	add	r0, sp, #24
    75e0:	f00e f9a8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    75e4:	687a      	ldr	r2, [r7, #4]
    75e6:	6874      	ldr	r4, [r6, #4]
    75e8:	9203      	str	r2, [sp, #12]
    75ea:	4629      	mov	r1, r5
    75ec:	a80c      	add	r0, sp, #48	; 0x30
    75ee:	f00e f9a1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    75f2:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    75f4:	9a03      	ldr	r2, [sp, #12]
    75f6:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75f8:	e9cd 3100 	strd	r3, r1, [sp]
    75fc:	a806      	add	r0, sp, #24
    75fe:	ab0c      	add	r3, sp, #48	; 0x30
    7600:	4621      	mov	r1, r4
  if (is_arg_max) {
    7602:	f1b8 0f00 	cmp.w	r8, #0
    7606:	d002      	beq.n	760e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf6>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7608:	f00f f867 	bl	166da <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    760c:	e7bd      	b.n	758a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    760e:	f00f f8d8 	bl	167c2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    7612:	e7ba      	b.n	758a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_KERNEL_LOG(context,
    7614:	6965      	ldr	r5, [r4, #20]
    7616:	f7f9 f94c 	bl	8b2 <TfLiteTypeGetName>
    761a:	4906      	ldr	r1, [pc, #24]	; (7634 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x11c>)
    761c:	4602      	mov	r2, r0
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
    761e:	4620      	mov	r0, r4
    7620:	47a8      	blx	r5
    return kTfLiteError;
    7622:	2001      	movs	r0, #1
    7624:	e7b8      	b.n	7598 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x80>
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
    7626:	6965      	ldr	r5, [r4, #20]
    7628:	f7f9 f943 	bl	8b2 <TfLiteTypeGetName>
    762c:	4902      	ldr	r1, [pc, #8]	; (7638 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x120>)
    762e:	4602      	mov	r2, r0
    7630:	e7f5      	b.n	761e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x106>
    7632:	bf00      	nop
    7634:	0002aebf 	.word	0x0002aebf
    7638:	0002aefd 	.word	0x0002aefd

0000763c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    763c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7640:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    7642:	681e      	ldr	r6, [r3, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    7644:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7646:	b085      	sub	sp, #20
    7648:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    764a:	d00c      	beq.n	7666 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    764c:	2401      	movs	r4, #1
    764e:	4b4a      	ldr	r3, [pc, #296]	; (7778 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    7650:	9301      	str	r3, [sp, #4]
    7652:	e9cd 6402 	strd	r6, r4, [sp, #8]
    7656:	4b49      	ldr	r3, [pc, #292]	; (777c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    7658:	9300      	str	r3, [sp, #0]
    765a:	6945      	ldr	r5, [r0, #20]
    765c:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    765e:	4a48      	ldr	r2, [pc, #288]	; (7780 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    7660:	4948      	ldr	r1, [pc, #288]	; (7784 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    7662:	47a8      	blx	r5
    7664:	e00f      	b.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    7666:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    7668:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    766a:	2c01      	cmp	r4, #1
    766c:	d00f      	beq.n	768e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
    766e:	e9cd 4602 	strd	r4, r6, [sp, #8]
    7672:	4b41      	ldr	r3, [pc, #260]	; (7778 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    7674:	9301      	str	r3, [sp, #4]
    7676:	4b44      	ldr	r3, [pc, #272]	; (7788 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    7678:	9300      	str	r3, [sp, #0]
    767a:	6944      	ldr	r4, [r0, #20]
    767c:	4a40      	ldr	r2, [pc, #256]	; (7780 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    767e:	4941      	ldr	r1, [pc, #260]	; (7784 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    7680:	2322      	movs	r3, #34	; 0x22
    7682:	47a0      	blx	r4
    7684:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
    7686:	4620      	mov	r0, r4
    7688:	b005      	add	sp, #20
    768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
    768e:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7690:	6886      	ldr	r6, [r0, #8]
    7692:	ea4f 1883 	mov.w	r8, r3, lsl #6
    7696:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    769a:	f816 7008 	ldrb.w	r7, [r6, r8]
    769e:	2f01      	cmp	r7, #1
    76a0:	d014      	beq.n	76cc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    76a2:	f8d0 8014 	ldr.w	r8, [r0, #20]
    76a6:	4638      	mov	r0, r7
    76a8:	f7f9 f903 	bl	8b2 <TfLiteTypeGetName>
    76ac:	4606      	mov	r6, r0
    76ae:	4620      	mov	r0, r4
    76b0:	f7f9 f8ff 	bl	8b2 <TfLiteTypeGetName>
    76b4:	4b35      	ldr	r3, [pc, #212]	; (778c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    76b6:	9301      	str	r3, [sp, #4]
    76b8:	4b35      	ldr	r3, [pc, #212]	; (7790 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    76ba:	9300      	str	r3, [sp, #0]
    76bc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    76c0:	4a2f      	ldr	r2, [pc, #188]	; (7780 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    76c2:	4934      	ldr	r1, [pc, #208]	; (7794 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    76c4:	2323      	movs	r3, #35	; 0x23
    76c6:	4628      	mov	r0, r5
    76c8:	47c0      	blx	r8
    76ca:	e7dc      	b.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
    76cc:	6852      	ldr	r2, [r2, #4]
    76ce:	0191      	lsls	r1, r2, #6
    76d0:	eb06 1282 	add.w	r2, r6, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
    76d4:	5c74      	ldrb	r4, [r6, r1]
    76d6:	2c01      	cmp	r4, #1
    76d8:	d016      	beq.n	7708 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    76da:	f8d0 9014 	ldr.w	r9, [r0, #20]
    76de:	4620      	mov	r0, r4
    76e0:	f7f9 f8e7 	bl	8b2 <TfLiteTypeGetName>
    76e4:	4604      	mov	r4, r0
    76e6:	f816 0008 	ldrb.w	r0, [r6, r8]
    76ea:	f7f9 f8e2 	bl	8b2 <TfLiteTypeGetName>
    76ee:	4b28      	ldr	r3, [pc, #160]	; (7790 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    76f0:	9301      	str	r3, [sp, #4]
    76f2:	4b29      	ldr	r3, [pc, #164]	; (7798 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    76f4:	9300      	str	r3, [sp, #0]
    76f6:	e9cd 4002 	strd	r4, r0, [sp, #8]
    76fa:	4a21      	ldr	r2, [pc, #132]	; (7780 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    76fc:	4925      	ldr	r1, [pc, #148]	; (7794 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    76fe:	2324      	movs	r3, #36	; 0x24
    7700:	4628      	mov	r0, r5
    7702:	47c8      	blx	r9
    7704:	463c      	mov	r4, r7
    7706:	e7be      	b.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
    7708:	6991      	ldr	r1, [r2, #24]
    770a:	699e      	ldr	r6, [r3, #24]
    770c:	42b1      	cmp	r1, r6
    770e:	d008      	beq.n	7722 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    7710:	4b22      	ldr	r3, [pc, #136]	; (779c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    7712:	9301      	str	r3, [sp, #4]
    7714:	e9cd 1602 	strd	r1, r6, [sp, #8]
    7718:	4b21      	ldr	r3, [pc, #132]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    771a:	9300      	str	r3, [sp, #0]
    771c:	6945      	ldr	r5, [r0, #20]
    771e:	2325      	movs	r3, #37	; 0x25
    7720:	e79d      	b.n	765e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    7722:	6897      	ldr	r7, [r2, #8]
    7724:	689a      	ldr	r2, [r3, #8]
    7726:	6839      	ldr	r1, [r7, #0]
    7728:	6813      	ldr	r3, [r2, #0]
    772a:	4299      	cmp	r1, r3
    772c:	d008      	beq.n	7740 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    772e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    7732:	4b1c      	ldr	r3, [pc, #112]	; (77a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    7734:	9301      	str	r3, [sp, #4]
    7736:	4b1c      	ldr	r3, [pc, #112]	; (77a8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    7738:	9300      	str	r3, [sp, #0]
    773a:	6945      	ldr	r5, [r0, #20]
    773c:	2326      	movs	r3, #38	; 0x26
    773e:	e78e      	b.n	765e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7740:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    7742:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
    7744:	1e58      	subs	r0, r3, #1
    7746:	4281      	cmp	r1, r0
    7748:	dd13      	ble.n	7772 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    774a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    774e:	3301      	adds	r3, #1
    7750:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    7754:	42b0      	cmp	r0, r6
    7756:	d0f5      	beq.n	7744 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
    7758:	e9cd 0602 	strd	r0, r6, [sp, #8]
    775c:	4b13      	ldr	r3, [pc, #76]	; (77ac <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    775e:	9301      	str	r3, [sp, #4]
    7760:	4b13      	ldr	r3, [pc, #76]	; (77b0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    7762:	9300      	str	r3, [sp, #0]
    7764:	696e      	ldr	r6, [r5, #20]
    7766:	4a06      	ldr	r2, [pc, #24]	; (7780 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    7768:	4906      	ldr	r1, [pc, #24]	; (7784 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    776a:	2328      	movs	r3, #40	; 0x28
    776c:	4628      	mov	r0, r5
    776e:	47b0      	blx	r6
    7770:	e789      	b.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
    7772:	2400      	movs	r4, #0
    7774:	e787      	b.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    7776:	bf00      	nop
    7778:	0002bbe9 	.word	0x0002bbe9
    777c:	0002af69 	.word	0x0002af69
    7780:	0002af29 	.word	0x0002af29
    7784:	0002af4f 	.word	0x0002af4f
    7788:	0002af79 	.word	0x0002af79
    778c:	0002afa4 	.word	0x0002afa4
    7790:	0002b774 	.word	0x0002b774
    7794:	0002af8a 	.word	0x0002af8a
    7798:	0002b75c 	.word	0x0002b75c
    779c:	0002afb3 	.word	0x0002afb3
    77a0:	0002afc0 	.word	0x0002afc0
    77a4:	0002afce 	.word	0x0002afce
    77a8:	0002afe0 	.word	0x0002afe0
    77ac:	0002aff3 	.word	0x0002aff3
    77b0:	0002b008 	.word	0x0002b008

000077b4 <_ZN6tflite3ops5micro13Register_CEILEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77b4:	4800      	ldr	r0, [pc, #0]	; (77b8 <_ZN6tflite3ops5micro13Register_CEILEv+0x4>)
    77b6:	4770      	bx	lr
    77b8:	20000108 	.word	0x20000108

000077bc <_ZN6tflite3ops5micro14Register_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77bc:	4800      	ldr	r0, [pc, #0]	; (77c0 <_ZN6tflite3ops5micro14Register_EQUALEv+0x4>)
    77be:	4770      	bx	lr
    77c0:	20000148 	.word	0x20000148

000077c4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77c4:	4800      	ldr	r0, [pc, #0]	; (77c8 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x4>)
    77c6:	4770      	bx	lr
    77c8:	20000188 	.word	0x20000188

000077cc <_ZN6tflite3ops5micro16Register_GREATEREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77cc:	4800      	ldr	r0, [pc, #0]	; (77d0 <_ZN6tflite3ops5micro16Register_GREATEREv+0x4>)
    77ce:	4770      	bx	lr
    77d0:	20000168 	.word	0x20000168

000077d4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77d4:	4800      	ldr	r0, [pc, #0]	; (77d8 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x4>)
    77d6:	4770      	bx	lr
    77d8:	200001c8 	.word	0x200001c8

000077dc <_ZN6tflite3ops5micro13Register_LESSEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77dc:	4800      	ldr	r0, [pc, #0]	; (77e0 <_ZN6tflite3ops5micro13Register_LESSEv+0x4>)
    77de:	4770      	bx	lr
    77e0:	20000128 	.word	0x20000128

000077e4 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77e4:	4800      	ldr	r0, [pc, #0]	; (77e8 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x4>)
    77e6:	4770      	bx	lr
    77e8:	200001a8 	.word	0x200001a8

000077ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
    77ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    77f0:	680b      	ldr	r3, [r1, #0]
    77f2:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    77f6:	685e      	ldr	r6, [r3, #4]
    77f8:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    77fa:	684b      	ldr	r3, [r1, #4]
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
    77fc:	ed2d 8b02 	vpush	{d8}
    7800:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    7802:	ea4f 1986 	mov.w	r9, r6, lsl #6
    7806:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    780a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    780e:	b0ab      	sub	sp, #172	; 0xac
    7810:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    7812:	4621      	mov	r1, r4
    7814:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    7816:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    781a:	f016 fe21 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    781e:	f080 0001 	eor.w	r0, r0, #1
    7822:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    7824:	f818 0009 	ldrb.w	r0, [r8, r9]
    7828:	1e43      	subs	r3, r0, #1
    782a:	2b08      	cmp	r3, #8
    782c:	f200 82a0 	bhi.w	7d70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x584>
    7830:	e8df f013 	tbh	[pc, r3, lsl #1]
    7834:	00b80060 	.word	0x00b80060
    7838:	01060169 	.word	0x01060169
    783c:	0009029e 	.word	0x0009029e
    7840:	029e029e 	.word	0x029e029e
    7844:	0203      	.short	0x0203
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
    7846:	ad1c      	add	r5, sp, #112	; 0x70
    7848:	4631      	mov	r1, r6
    784a:	b31f      	cbz	r7, 7894 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    784c:	a810      	add	r0, sp, #64	; 0x40
    784e:	f00e f871 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7852:	4621      	mov	r1, r4
    7854:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7856:	6876      	ldr	r6, [r6, #4]
    7858:	f00e f86c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    785c:	b104      	cbz	r4, 7860 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    785e:	6864      	ldr	r4, [r4, #4]
    7860:	4651      	mov	r1, sl
    7862:	4628      	mov	r0, r5
    7864:	f00e f866 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7868:	f1ba 0f00 	cmp.w	sl, #0
    786c:	d001      	beq.n	7872 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    786e:	f8da a004 	ldr.w	sl, [sl, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
    7872:	9400      	str	r4, [sp, #0]
    7874:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7878:	ab16      	add	r3, sp, #88	; 0x58
    787a:	4632      	mov	r2, r6
    787c:	a910      	add	r1, sp, #64	; 0x40
    787e:	a822      	add	r0, sp, #136	; 0x88
    7880:	f00f fb6d 	bl	16f5e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Equal);
    7884:	4628      	mov	r0, r5
    7886:	f00e f810 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    788a:	a816      	add	r0, sp, #88	; 0x58
    788c:	f00e f80d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7890:	a810      	add	r0, sp, #64	; 0x40
    7892:	e130      	b.n	7af6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x30a>
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
    7894:	a816      	add	r0, sp, #88	; 0x58
    7896:	f00e f84d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    789a:	4621      	mov	r1, r4
    789c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    789e:	6876      	ldr	r6, [r6, #4]
    78a0:	f00e f848 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    78a4:	b104      	cbz	r4, 78a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    78a6:	6864      	ldr	r4, [r4, #4]
    78a8:	4651      	mov	r1, sl
    78aa:	a822      	add	r0, sp, #136	; 0x88
    78ac:	f00e f842 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    78b0:	f1ba 0f00 	cmp.w	sl, #0
    78b4:	d001      	beq.n	78ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
    78b6:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    78ba:	aa22      	add	r2, sp, #136	; 0x88
    78bc:	4629      	mov	r1, r5
    78be:	a816      	add	r0, sp, #88	; 0x58
    78c0:	f00f f87c 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    78c4:	2200      	movs	r2, #0
  const int64_t flatsize =
    78c6:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    78c8:	2300      	movs	r3, #0
    78ca:	4282      	cmp	r2, r0
    78cc:	eb73 0701 	sbcs.w	r7, r3, r1
    78d0:	f280 810a 	bge.w	7ae8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    78d4:	f816 c002 	ldrb.w	ip, [r6, r2]
    78d8:	f814 e002 	ldrb.w	lr, [r4, r2]
    78dc:	ebac 0e0e 	sub.w	lr, ip, lr
    78e0:	f1de 0c00 	rsbs	ip, lr, #0
    78e4:	eb4c 0c0e 	adc.w	ip, ip, lr
    78e8:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    78ec:	3201      	adds	r2, #1
    78ee:	f143 0300 	adc.w	r3, r3, #0
    78f2:	e7ea      	b.n	78ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
    78f4:	ad1c      	add	r5, sp, #112	; 0x70
    78f6:	4631      	mov	r1, r6
    78f8:	b1e7      	cbz	r7, 7934 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x148>
    78fa:	a810      	add	r0, sp, #64	; 0x40
    78fc:	f00e f81a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7900:	4621      	mov	r1, r4
    7902:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7904:	6876      	ldr	r6, [r6, #4]
    7906:	f00e f815 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    790a:	b104      	cbz	r4, 790e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x122>
    790c:	6864      	ldr	r4, [r4, #4]
    790e:	4651      	mov	r1, sl
    7910:	4628      	mov	r0, r5
    7912:	f00e f80f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7916:	f1ba 0f00 	cmp.w	sl, #0
    791a:	d001      	beq.n	7920 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x134>
    791c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7920:	9400      	str	r4, [sp, #0]
    7922:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7926:	ab16      	add	r3, sp, #88	; 0x58
    7928:	4632      	mov	r2, r6
    792a:	a910      	add	r1, sp, #64	; 0x40
    792c:	a822      	add	r0, sp, #136	; 0x88
    792e:	f00f f8ee 	bl	16b0e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7932:	e7a7      	b.n	7884 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7934:	a816      	add	r0, sp, #88	; 0x58
    7936:	f00d fffd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    793a:	4621      	mov	r1, r4
    793c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    793e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7942:	f00d fff7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7946:	b104      	cbz	r4, 794a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
    7948:	6864      	ldr	r4, [r4, #4]
    794a:	4651      	mov	r1, sl
    794c:	a822      	add	r0, sp, #136	; 0x88
    794e:	f00d fff1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7952:	f1ba 0f00 	cmp.w	sl, #0
    7956:	d001      	beq.n	795c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x170>
    7958:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    795c:	aa22      	add	r2, sp, #136	; 0x88
    795e:	4629      	mov	r1, r5
    7960:	a816      	add	r0, sp, #88	; 0x58
    7962:	f00f f82b 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7966:	4641      	mov	r1, r8
  const int64_t flatsize =
    7968:	4606      	mov	r6, r0
    796a:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    796c:	2200      	movs	r2, #0
    796e:	2300      	movs	r3, #0
    7970:	42b2      	cmp	r2, r6
    7972:	eb73 0007 	sbcs.w	r0, r3, r7
    7976:	f280 80b7 	bge.w	7ae8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    output_data[i] = F(input1_data[i], input2_data[i]);
    797a:	ecb1 7a01 	vldmia	r1!, {s14}
    797e:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs == rhs;
    7982:	eeb4 7a67 	vcmp.f32	s14, s15
    7986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    798a:	eb0a 0002 	add.w	r0, sl, r2
  return lhs == rhs;
    798e:	bf0c      	ite	eq
    7990:	f04f 0c01 	moveq.w	ip, #1
    7994:	f04f 0c00 	movne.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    7998:	3201      	adds	r2, #1
  return lhs == rhs;
    799a:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    799e:	f143 0300 	adc.w	r3, r3, #0
    79a2:	e7e5      	b.n	7970 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x184>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
    79a4:	ad1c      	add	r5, sp, #112	; 0x70
    79a6:	4631      	mov	r1, r6
    79a8:	b1e7      	cbz	r7, 79e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    79aa:	a810      	add	r0, sp, #64	; 0x40
    79ac:	f00d ffc2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79b0:	4621      	mov	r1, r4
    79b2:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    79b4:	6876      	ldr	r6, [r6, #4]
    79b6:	f00d ffbd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79ba:	b104      	cbz	r4, 79be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    79bc:	6864      	ldr	r4, [r4, #4]
    79be:	4651      	mov	r1, sl
    79c0:	4628      	mov	r0, r5
    79c2:	f00d ffb7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    79c6:	f1ba 0f00 	cmp.w	sl, #0
    79ca:	d001      	beq.n	79d0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
    79cc:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    79d0:	9400      	str	r4, [sp, #0]
    79d2:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    79d6:	ab16      	add	r3, sp, #88	; 0x58
    79d8:	4632      	mov	r2, r6
    79da:	a910      	add	r1, sp, #64	; 0x40
    79dc:	a822      	add	r0, sp, #136	; 0x88
    79de:	f00f fb12 	bl	17006 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    79e2:	e74f      	b.n	7884 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    79e4:	a816      	add	r0, sp, #88	; 0x58
    79e6:	f00d ffa5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79ea:	4621      	mov	r1, r4
    79ec:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    79ee:	6876      	ldr	r6, [r6, #4]
    79f0:	f00d ffa0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79f4:	b104      	cbz	r4, 79f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x20c>
    79f6:	6864      	ldr	r4, [r4, #4]
    79f8:	4651      	mov	r1, sl
    79fa:	a822      	add	r0, sp, #136	; 0x88
    79fc:	f00d ff9a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a00:	f1ba 0f00 	cmp.w	sl, #0
    7a04:	d001      	beq.n	7a0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x21e>
    7a06:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7a0a:	aa22      	add	r2, sp, #136	; 0x88
    7a0c:	4629      	mov	r1, r5
    7a0e:	a816      	add	r0, sp, #88	; 0x58
    7a10:	f00e ffd4 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7a14:	2200      	movs	r2, #0
  const int64_t flatsize =
    7a16:	4680      	mov	r8, r0
    7a18:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7a1c:	2300      	movs	r3, #0
    7a1e:	4542      	cmp	r2, r8
    7a20:	eb73 0109 	sbcs.w	r1, r3, r9
    7a24:	da60      	bge.n	7ae8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    7a26:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    7a2a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    7a2e:	1a08      	subs	r0, r1, r0
    7a30:	4241      	negs	r1, r0
    7a32:	4141      	adcs	r1, r0
    7a34:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7a38:	3201      	adds	r2, #1
    7a3a:	f143 0300 	adc.w	r3, r3, #0
    7a3e:	e7ee      	b.n	7a1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
    7a40:	ad1c      	add	r5, sp, #112	; 0x70
    7a42:	4631      	mov	r1, r6
    7a44:	b1e7      	cbz	r7, 7a80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x294>
    7a46:	a810      	add	r0, sp, #64	; 0x40
    7a48:	f00d ff74 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a4c:	4621      	mov	r1, r4
    7a4e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7a50:	6876      	ldr	r6, [r6, #4]
    7a52:	f00d ff6f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a56:	b104      	cbz	r4, 7a5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x26e>
    7a58:	6864      	ldr	r4, [r4, #4]
    7a5a:	4651      	mov	r1, sl
    7a5c:	4628      	mov	r0, r5
    7a5e:	f00d ff69 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a62:	f1ba 0f00 	cmp.w	sl, #0
    7a66:	d001      	beq.n	7a6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x280>
    7a68:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7a6c:	9400      	str	r4, [sp, #0]
    7a6e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7a72:	ab16      	add	r3, sp, #88	; 0x58
    7a74:	4632      	mov	r2, r6
    7a76:	a910      	add	r1, sp, #64	; 0x40
    7a78:	a822      	add	r0, sp, #136	; 0x88
    7a7a:	f00f fb18 	bl	170ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7a7e:	e701      	b.n	7884 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7a80:	a816      	add	r0, sp, #88	; 0x58
    7a82:	f00d ff57 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a86:	4621      	mov	r1, r4
    7a88:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7a8a:	6876      	ldr	r6, [r6, #4]
    7a8c:	f00d ff52 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a90:	b104      	cbz	r4, 7a94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    7a92:	6864      	ldr	r4, [r4, #4]
    7a94:	4651      	mov	r1, sl
    7a96:	a822      	add	r0, sp, #136	; 0x88
    7a98:	f00d ff4c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a9c:	f1ba 0f00 	cmp.w	sl, #0
    7aa0:	d001      	beq.n	7aa6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    7aa2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7aa6:	aa22      	add	r2, sp, #136	; 0x88
    7aa8:	4629      	mov	r1, r5
    7aaa:	a816      	add	r0, sp, #88	; 0x58
    7aac:	f00e ff86 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7ab0:	3c08      	subs	r4, #8
  const int64_t flatsize =
    7ab2:	17c1      	asrs	r1, r0, #31
    7ab4:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    7ab8:	2200      	movs	r2, #0
    7aba:	2300      	movs	r3, #0
    7abc:	4282      	cmp	r2, r0
    7abe:	eb73 0601 	sbcs.w	r6, r3, r1
    7ac2:	da11      	bge.n	7ae8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    7ac4:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    7ac8:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    7acc:	45b9      	cmp	r9, r7
    7ace:	bf08      	it	eq
    7ad0:	45b0      	cmpeq	r8, r6
    output_data[i] = F(input1_data[i], input2_data[i]);
    7ad2:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs == rhs;
    7ad6:	bf0c      	ite	eq
    7ad8:	2601      	moveq	r6, #1
    7ada:	2600      	movne	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    7adc:	3201      	adds	r2, #1
  return lhs == rhs;
    7ade:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    7ae2:	f143 0300 	adc.w	r3, r3, #0
    7ae6:	e7e9      	b.n	7abc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2d0>
    7ae8:	a822      	add	r0, sp, #136	; 0x88
    7aea:	f00d fede 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7aee:	4628      	mov	r0, r5
    7af0:	f00d fedb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7af4:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Equal);
    7af6:	f00d fed8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    7afa:	2000      	movs	r0, #0
}
    7afc:	b02b      	add	sp, #172	; 0xac
    7afe:	ecbd 8b02 	vpop	{d8}
    7b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Equal);
    7b06:	6933      	ldr	r3, [r6, #16]
    7b08:	68f0      	ldr	r0, [r6, #12]
    7b0a:	6925      	ldr	r5, [r4, #16]
    7b0c:	f1c3 0800 	rsb	r8, r3, #0
    7b10:	f7f9 f8aa 	bl	c68 <__aeabi_f2d>
    7b14:	ec41 0b10 	vmov	d0, r0, r1
    7b18:	a90d      	add	r1, sp, #52	; 0x34
    7b1a:	a80c      	add	r0, sp, #48	; 0x30
    7b1c:	f009 fe58 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7b20:	68e0      	ldr	r0, [r4, #12]
    7b22:	f7f9 f8a1 	bl	c68 <__aeabi_f2d>
    7b26:	ec41 0b10 	vmov	d0, r0, r1
    7b2a:	a90f      	add	r1, sp, #60	; 0x3c
    7b2c:	a80e      	add	r0, sp, #56	; 0x38
    7b2e:	f009 fe4f 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7b32:	2308      	movs	r3, #8
    7b34:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    7b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b3a:	9324      	str	r3, [sp, #144]	; 0x90
    7b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b3e:	426d      	negs	r5, r5
    7b40:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    7b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b46:	9327      	str	r3, [sp, #156]	; 0x9c
    7b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b4a:	9328      	str	r3, [sp, #160]	; 0xa0
    7b4c:	ad1c      	add	r5, sp, #112	; 0x70
    7b4e:	4631      	mov	r1, r6
    7b50:	a810      	add	r0, sp, #64	; 0x40
    7b52:	b1df      	cbz	r7, 7b8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
    7b54:	f00d feee 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7b58:	6872      	ldr	r2, [r6, #4]
    7b5a:	9204      	str	r2, [sp, #16]
    7b5c:	4621      	mov	r1, r4
    7b5e:	a816      	add	r0, sp, #88	; 0x58
    7b60:	f00d fee8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7b64:	4651      	mov	r1, sl
    7b66:	4628      	mov	r0, r5
    7b68:	6864      	ldr	r4, [r4, #4]
    7b6a:	f00d fee3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7b6e:	9a04      	ldr	r2, [sp, #16]
    7b70:	f1ba 0f00 	cmp.w	sl, #0
    7b74:	d001      	beq.n	7b7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x38e>
    7b76:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7b7a:	9400      	str	r4, [sp, #0]
    7b7c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7b80:	ab16      	add	r3, sp, #88	; 0x58
    7b82:	a910      	add	r1, sp, #64	; 0x40
    7b84:	a822      	add	r0, sp, #136	; 0x88
    7b86:	f00f feba 	bl	178fe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7b8a:	e67b      	b.n	7884 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7b8c:	f00d fed2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7b90:	6873      	ldr	r3, [r6, #4]
    7b92:	9304      	str	r3, [sp, #16]
    7b94:	4621      	mov	r1, r4
    7b96:	a816      	add	r0, sp, #88	; 0x58
    7b98:	f00d fecc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7b9c:	6863      	ldr	r3, [r4, #4]
    7b9e:	9305      	str	r3, [sp, #20]
    7ba0:	4651      	mov	r1, sl
    7ba2:	4628      	mov	r0, r5
    7ba4:	f00d fec6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7ba8:	f1ba 0f00 	cmp.w	sl, #0
    7bac:	d001      	beq.n	7bb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    7bae:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    7bb2:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    7bb6:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    7bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7bba:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    7bbe:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7bc2:	aa1c      	add	r2, sp, #112	; 0x70
    7bc4:	a916      	add	r1, sp, #88	; 0x58
    7bc6:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    7bc8:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7bca:	f00e fef7 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    7bce:	4602      	mov	r2, r0
    7bd0:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    7bd2:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    7bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    7bda:	f04f 0800 	mov.w	r8, #0
    7bde:	f04f 0900 	mov.w	r9, #0
    7be2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7be6:	4590      	cmp	r8, r2
    7be8:	eb79 0303 	sbcs.w	r3, r9, r3
    7bec:	f280 80be 	bge.w	7d6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x580>
    const int32 input2_val = input2_offset + input2_data[i];
    7bf0:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    7bf2:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    7bf4:	f812 5008 	ldrb.w	r5, [r2, r8]
    7bf8:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    7bfa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    7bfe:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    7c00:	9a04      	ldr	r2, [sp, #16]
    7c02:	f812 0008 	ldrb.w	r0, [r2, r8]
    7c06:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c08:	ee18 1a10 	vmov	r1, s16
    7c0c:	465a      	mov	r2, fp
    7c0e:	40b0      	lsls	r0, r6
    7c10:	f7ff faba 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    7c14:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c16:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c18:	4622      	mov	r2, r4
    7c1a:	4639      	mov	r1, r7
    7c1c:	4628      	mov	r0, r5
    7c1e:	f7ff fab3 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
    7c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7c24:	1a1a      	subs	r2, r3, r0
    7c26:	4250      	negs	r0, r2
    7c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c2a:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
    7c2c:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
    7c30:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    7c34:	f149 0900 	adc.w	r9, r9, #0
    7c38:	e7d3      	b.n	7be2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3f6>
    7c3a:	6933      	ldr	r3, [r6, #16]
    7c3c:	68f0      	ldr	r0, [r6, #12]
    7c3e:	6925      	ldr	r5, [r4, #16]
    7c40:	f1c3 0800 	rsb	r8, r3, #0
    7c44:	f7f9 f810 	bl	c68 <__aeabi_f2d>
    7c48:	ec41 0b10 	vmov	d0, r0, r1
    7c4c:	a90d      	add	r1, sp, #52	; 0x34
    7c4e:	a80c      	add	r0, sp, #48	; 0x30
    7c50:	f009 fdbe 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7c54:	68e0      	ldr	r0, [r4, #12]
    7c56:	f7f9 f807 	bl	c68 <__aeabi_f2d>
    7c5a:	ec41 0b10 	vmov	d0, r0, r1
    7c5e:	a90f      	add	r1, sp, #60	; 0x3c
    7c60:	a80e      	add	r0, sp, #56	; 0x38
    7c62:	f009 fdb5 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7c66:	2308      	movs	r3, #8
    7c68:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    7c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c6e:	9324      	str	r3, [sp, #144]	; 0x90
    7c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c72:	426d      	negs	r5, r5
    7c74:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    7c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c7a:	9327      	str	r3, [sp, #156]	; 0x9c
    7c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7c7e:	9328      	str	r3, [sp, #160]	; 0xa0
    7c80:	ad1c      	add	r5, sp, #112	; 0x70
    7c82:	4631      	mov	r1, r6
    7c84:	a810      	add	r0, sp, #64	; 0x40
    7c86:	b1df      	cbz	r7, 7cc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4d4>
    7c88:	f00d fe54 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7c8c:	6872      	ldr	r2, [r6, #4]
    7c8e:	9204      	str	r2, [sp, #16]
    7c90:	4621      	mov	r1, r4
    7c92:	a816      	add	r0, sp, #88	; 0x58
    7c94:	f00d fe4e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7c98:	4651      	mov	r1, sl
    7c9a:	4628      	mov	r0, r5
    7c9c:	6864      	ldr	r4, [r4, #4]
    7c9e:	f00d fe49 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7ca2:	9a04      	ldr	r2, [sp, #16]
    7ca4:	f1ba 0f00 	cmp.w	sl, #0
    7ca8:	d001      	beq.n	7cae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4c2>
    7caa:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7cae:	9400      	str	r4, [sp, #0]
    7cb0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7cb4:	ab16      	add	r3, sp, #88	; 0x58
    7cb6:	a910      	add	r1, sp, #64	; 0x40
    7cb8:	a822      	add	r0, sp, #136	; 0x88
    7cba:	f00f feac 	bl	17a16 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7cbe:	e5e1      	b.n	7884 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7cc0:	f00d fe38 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7cc4:	6873      	ldr	r3, [r6, #4]
    7cc6:	9304      	str	r3, [sp, #16]
    7cc8:	4621      	mov	r1, r4
    7cca:	a816      	add	r0, sp, #88	; 0x58
    7ccc:	f00d fe32 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7cd0:	6863      	ldr	r3, [r4, #4]
    7cd2:	9305      	str	r3, [sp, #20]
    7cd4:	4651      	mov	r1, sl
    7cd6:	4628      	mov	r0, r5
    7cd8:	f00d fe2c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7cdc:	f1ba 0f00 	cmp.w	sl, #0
    7ce0:	d001      	beq.n	7ce6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4fa>
    7ce2:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    7ce6:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    7cea:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    7cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7cee:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    7cf2:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7cf6:	aa1c      	add	r2, sp, #112	; 0x70
    7cf8:	a916      	add	r1, sp, #88	; 0x58
    7cfa:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    7cfc:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7cfe:	f00e fe5d 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    7d02:	4602      	mov	r2, r0
    7d04:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    7d06:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    7d0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    7d0e:	f04f 0800 	mov.w	r8, #0
    7d12:	f04f 0900 	mov.w	r9, #0
    7d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7d1a:	4590      	cmp	r8, r2
    7d1c:	eb79 0303 	sbcs.w	r3, r9, r3
    7d20:	da24      	bge.n	7d6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x580>
    const int32 input2_val = input2_offset + input2_data[i];
    7d22:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    7d24:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    7d26:	f912 5008 	ldrsb.w	r5, [r2, r8]
    7d2a:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    7d2c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    7d30:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    7d32:	9a04      	ldr	r2, [sp, #16]
    7d34:	f912 0008 	ldrsb.w	r0, [r2, r8]
    7d38:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d3a:	ee18 1a10 	vmov	r1, s16
    7d3e:	465a      	mov	r2, fp
    7d40:	40b0      	lsls	r0, r6
    7d42:	f7ff fa21 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    7d46:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d48:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d4a:	4622      	mov	r2, r4
    7d4c:	4639      	mov	r1, r7
    7d4e:	4628      	mov	r0, r5
    7d50:	f7ff fa1a 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
    7d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7d56:	1a1b      	subs	r3, r3, r0
    7d58:	4258      	negs	r0, r3
    7d5a:	4158      	adcs	r0, r3
    7d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
    7d5e:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
    7d62:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    7d66:	f149 0900 	adc.w	r9, r9, #0
    7d6a:	e7d4      	b.n	7d16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x52a>
    7d6c:	a81c      	add	r0, sp, #112	; 0x70
    7d6e:	e58a      	b.n	7886 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    7d70:	696c      	ldr	r4, [r5, #20]
    7d72:	f7f8 fd9e 	bl	8b2 <TfLiteTypeGetName>
    7d76:	f818 3009 	ldrb.w	r3, [r8, r9]
    7d7a:	4903      	ldr	r1, [pc, #12]	; (7d88 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x59c>)
    7d7c:	4602      	mov	r2, r0
    7d7e:	4628      	mov	r0, r5
    7d80:	47a0      	blx	r4
      return kTfLiteError;
    7d82:	2001      	movs	r0, #1
    7d84:	e6ba      	b.n	7afc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x310>
    7d86:	bf00      	nop
    7d88:	0002aea3 	.word	0x0002aea3

00007d8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
    7d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    7d90:	680b      	ldr	r3, [r1, #0]
    7d92:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    7d96:	685e      	ldr	r6, [r3, #4]
    7d98:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    7d9a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
    7d9c:	ed2d 8b02 	vpush	{d8}
    7da0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    7da2:	ea4f 1986 	mov.w	r9, r6, lsl #6
    7da6:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    7daa:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    7dae:	b0ab      	sub	sp, #172	; 0xac
    7db0:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    7db2:	4621      	mov	r1, r4
    7db4:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    7db6:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    7dba:	f016 fb51 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    7dbe:	f080 0001 	eor.w	r0, r0, #1
    7dc2:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    7dc4:	f818 0009 	ldrb.w	r0, [r8, r9]
    7dc8:	1e43      	subs	r3, r0, #1
    7dca:	2b08      	cmp	r3, #8
    7dcc:	f200 829c 	bhi.w	8308 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x308>
    7dd0:	e8df f013 	tbh	[pc, r3, lsl #1]
    7dd4:	00b4005c 	.word	0x00b4005c
    7dd8:	01020165 	.word	0x01020165
    7ddc:	0009029a 	.word	0x0009029a
    7de0:	029a029a 	.word	0x029a029a
    7de4:	01ff      	.short	0x01ff
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
    7de6:	ad1c      	add	r5, sp, #112	; 0x70
    7de8:	4631      	mov	r1, r6
    7dea:	b31f      	cbz	r7, 7e34 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    7dec:	a810      	add	r0, sp, #64	; 0x40
    7dee:	f00d fda1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7df2:	4621      	mov	r1, r4
    7df4:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7df6:	6876      	ldr	r6, [r6, #4]
    7df8:	f00d fd9c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7dfc:	b104      	cbz	r4, 7e00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    7dfe:	6864      	ldr	r4, [r4, #4]
    7e00:	4651      	mov	r1, sl
    7e02:	4628      	mov	r0, r5
    7e04:	f00d fd96 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7e08:	f1ba 0f00 	cmp.w	sl, #0
    7e0c:	d001      	beq.n	7e12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    7e0e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7e12:	9400      	str	r4, [sp, #0]
    7e14:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7e18:	ab16      	add	r3, sp, #88	; 0x58
    7e1a:	4632      	mov	r2, r6
    7e1c:	a910      	add	r1, sp, #64	; 0x40
    7e1e:	a822      	add	r0, sp, #136	; 0x88
    7e20:	f00f f9a2 	bl	17168 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    7e24:	4628      	mov	r0, r5
    7e26:	f00d fd40 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7e2a:	a816      	add	r0, sp, #88	; 0x58
    7e2c:	f00d fd3d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    7e30:	a810      	add	r0, sp, #64	; 0x40
    7e32:	e12c      	b.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
    7e34:	a816      	add	r0, sp, #88	; 0x58
    7e36:	f00d fd7d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e3a:	4621      	mov	r1, r4
    7e3c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7e3e:	6876      	ldr	r6, [r6, #4]
    7e40:	f00d fd78 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e44:	b104      	cbz	r4, 7e48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    7e46:	6864      	ldr	r4, [r4, #4]
    7e48:	4651      	mov	r1, sl
    7e4a:	a822      	add	r0, sp, #136	; 0x88
    7e4c:	f00d fd72 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7e50:	f1ba 0f00 	cmp.w	sl, #0
    7e54:	d001      	beq.n	7e5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
    7e56:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7e5a:	aa22      	add	r2, sp, #136	; 0x88
    7e5c:	4629      	mov	r1, r5
    7e5e:	a816      	add	r0, sp, #88	; 0x58
    7e60:	f00e fdac 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7e64:	2200      	movs	r2, #0
  const int64_t flatsize =
    7e66:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7e68:	2300      	movs	r3, #0
    7e6a:	4282      	cmp	r2, r0
    7e6c:	eb73 0701 	sbcs.w	r7, r3, r1
    7e70:	f280 8106 	bge.w	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
  return lhs != rhs;
    7e74:	f816 c002 	ldrb.w	ip, [r6, r2]
    7e78:	f814 e002 	ldrb.w	lr, [r4, r2]
    7e7c:	ea8c 0c0e 	eor.w	ip, ip, lr
    output_data[i] = F(input1_data[i], input2_data[i]);
    7e80:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7e84:	3201      	adds	r2, #1
    7e86:	f143 0300 	adc.w	r3, r3, #0
    7e8a:	e7ee      	b.n	7e6a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
    7e8c:	ad1c      	add	r5, sp, #112	; 0x70
    7e8e:	4631      	mov	r1, r6
    7e90:	b1e7      	cbz	r7, 7ecc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x140>
    7e92:	a810      	add	r0, sp, #64	; 0x40
    7e94:	f00d fd4e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e98:	4621      	mov	r1, r4
    7e9a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7e9c:	6876      	ldr	r6, [r6, #4]
    7e9e:	f00d fd49 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ea2:	b104      	cbz	r4, 7ea6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    7ea4:	6864      	ldr	r4, [r4, #4]
    7ea6:	4651      	mov	r1, sl
    7ea8:	4628      	mov	r0, r5
    7eaa:	f00d fd43 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7eae:	f1ba 0f00 	cmp.w	sl, #0
    7eb2:	d001      	beq.n	7eb8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    7eb4:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7eb8:	9400      	str	r4, [sp, #0]
    7eba:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7ebe:	ab16      	add	r3, sp, #88	; 0x58
    7ec0:	4632      	mov	r2, r6
    7ec2:	a910      	add	r1, sp, #64	; 0x40
    7ec4:	a822      	add	r0, sp, #136	; 0x88
    7ec6:	f00e fe7e 	bl	16bc6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7eca:	e7ab      	b.n	7e24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7ecc:	a816      	add	r0, sp, #88	; 0x58
    7ece:	f00d fd31 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ed2:	4621      	mov	r1, r4
    7ed4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7ed6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7eda:	f00d fd2b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ede:	b104      	cbz	r4, 7ee2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x156>
    7ee0:	6864      	ldr	r4, [r4, #4]
    7ee2:	4651      	mov	r1, sl
    7ee4:	a822      	add	r0, sp, #136	; 0x88
    7ee6:	f00d fd25 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7eea:	f1ba 0f00 	cmp.w	sl, #0
    7eee:	d001      	beq.n	7ef4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x168>
    7ef0:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7ef4:	aa22      	add	r2, sp, #136	; 0x88
    7ef6:	4629      	mov	r1, r5
    7ef8:	a816      	add	r0, sp, #88	; 0x58
    7efa:	f00e fd5f 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7efe:	4641      	mov	r1, r8
  const int64_t flatsize =
    7f00:	4606      	mov	r6, r0
    7f02:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7f04:	2200      	movs	r2, #0
    7f06:	2300      	movs	r3, #0
    7f08:	42b2      	cmp	r2, r6
    7f0a:	eb73 0007 	sbcs.w	r0, r3, r7
    7f0e:	f280 80b7 	bge.w	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
    output_data[i] = F(input1_data[i], input2_data[i]);
    7f12:	ecb1 7a01 	vldmia	r1!, {s14}
    7f16:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs != rhs;
    7f1a:	eeb4 7a67 	vcmp.f32	s14, s15
    7f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    7f22:	eb0a 0002 	add.w	r0, sl, r2
  return lhs != rhs;
    7f26:	bf14      	ite	ne
    7f28:	f04f 0c01 	movne.w	ip, #1
    7f2c:	f04f 0c00 	moveq.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    7f30:	3201      	adds	r2, #1
  return lhs != rhs;
    7f32:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    7f36:	f143 0300 	adc.w	r3, r3, #0
    7f3a:	e7e5      	b.n	7f08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
    7f3c:	ad1c      	add	r5, sp, #112	; 0x70
    7f3e:	4631      	mov	r1, r6
    7f40:	b1e7      	cbz	r7, 7f7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    7f42:	a810      	add	r0, sp, #64	; 0x40
    7f44:	f00d fcf6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f48:	4621      	mov	r1, r4
    7f4a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7f4c:	6876      	ldr	r6, [r6, #4]
    7f4e:	f00d fcf1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f52:	b104      	cbz	r4, 7f56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    7f54:	6864      	ldr	r4, [r4, #4]
    7f56:	4651      	mov	r1, sl
    7f58:	4628      	mov	r0, r5
    7f5a:	f00d fceb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7f5e:	f1ba 0f00 	cmp.w	sl, #0
    7f62:	d001      	beq.n	7f68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    7f64:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7f68:	9400      	str	r4, [sp, #0]
    7f6a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7f6e:	ab16      	add	r3, sp, #88	; 0x58
    7f70:	4632      	mov	r2, r6
    7f72:	a910      	add	r1, sp, #64	; 0x40
    7f74:	a822      	add	r0, sp, #136	; 0x88
    7f76:	f00f f949 	bl	1720c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7f7a:	e753      	b.n	7e24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7f7c:	a816      	add	r0, sp, #88	; 0x58
    7f7e:	f00d fcd9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f82:	4621      	mov	r1, r4
    7f84:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7f86:	6876      	ldr	r6, [r6, #4]
    7f88:	f00d fcd4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f8c:	b104      	cbz	r4, 7f90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
    7f8e:	6864      	ldr	r4, [r4, #4]
    7f90:	4651      	mov	r1, sl
    7f92:	a822      	add	r0, sp, #136	; 0x88
    7f94:	f00d fcce 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7f98:	f1ba 0f00 	cmp.w	sl, #0
    7f9c:	d001      	beq.n	7fa2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x216>
    7f9e:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7fa2:	aa22      	add	r2, sp, #136	; 0x88
    7fa4:	4629      	mov	r1, r5
    7fa6:	a816      	add	r0, sp, #88	; 0x58
    7fa8:	f00e fd08 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7fac:	2200      	movs	r2, #0
  const int64_t flatsize =
    7fae:	4680      	mov	r8, r0
    7fb0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7fb4:	2300      	movs	r3, #0
    7fb6:	4542      	cmp	r2, r8
    7fb8:	eb73 0109 	sbcs.w	r1, r3, r9
    7fbc:	da60      	bge.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
  return lhs != rhs;
    7fbe:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    7fc2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    7fc6:	1a09      	subs	r1, r1, r0
    7fc8:	bf18      	it	ne
    7fca:	2101      	movne	r1, #1
    7fcc:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7fd0:	3201      	adds	r2, #1
    7fd2:	f143 0300 	adc.w	r3, r3, #0
    7fd6:	e7ee      	b.n	7fb6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
    7fd8:	ad1c      	add	r5, sp, #112	; 0x70
    7fda:	4631      	mov	r1, r6
    7fdc:	b1e7      	cbz	r7, 8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
    7fde:	a810      	add	r0, sp, #64	; 0x40
    7fe0:	f00d fca8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7fe4:	4621      	mov	r1, r4
    7fe6:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7fe8:	6876      	ldr	r6, [r6, #4]
    7fea:	f00d fca3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7fee:	b104      	cbz	r4, 7ff2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x266>
    7ff0:	6864      	ldr	r4, [r4, #4]
    7ff2:	4651      	mov	r1, sl
    7ff4:	4628      	mov	r0, r5
    7ff6:	f00d fc9d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7ffa:	f1ba 0f00 	cmp.w	sl, #0
    7ffe:	d001      	beq.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    8000:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8004:	9400      	str	r4, [sp, #0]
    8006:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    800a:	ab16      	add	r3, sp, #88	; 0x58
    800c:	4632      	mov	r2, r6
    800e:	a910      	add	r1, sp, #64	; 0x40
    8010:	a822      	add	r0, sp, #136	; 0x88
    8012:	f00f f94f 	bl	172b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8016:	e705      	b.n	7e24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8018:	a816      	add	r0, sp, #88	; 0x58
    801a:	f00d fc8b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    801e:	4621      	mov	r1, r4
    8020:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8022:	6876      	ldr	r6, [r6, #4]
    8024:	f00d fc86 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8028:	b104      	cbz	r4, 802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    802a:	6864      	ldr	r4, [r4, #4]
    802c:	4651      	mov	r1, sl
    802e:	a822      	add	r0, sp, #136	; 0x88
    8030:	f00d fc80 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8034:	f1ba 0f00 	cmp.w	sl, #0
    8038:	d001      	beq.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
    803a:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    803e:	aa22      	add	r2, sp, #136	; 0x88
    8040:	4629      	mov	r1, r5
    8042:	a816      	add	r0, sp, #88	; 0x58
    8044:	f00e fcba 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8048:	3c08      	subs	r4, #8
  const int64_t flatsize =
    804a:	17c1      	asrs	r1, r0, #31
    804c:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8050:	2200      	movs	r2, #0
    8052:	2300      	movs	r3, #0
    8054:	4282      	cmp	r2, r0
    8056:	eb73 0601 	sbcs.w	r6, r3, r1
    805a:	da11      	bge.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
  return lhs != rhs;
    805c:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8060:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8064:	45b9      	cmp	r9, r7
    8066:	bf08      	it	eq
    8068:	45b0      	cmpeq	r8, r6
    output_data[i] = F(input1_data[i], input2_data[i]);
    806a:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs != rhs;
    806e:	bf14      	ite	ne
    8070:	2601      	movne	r6, #1
    8072:	2600      	moveq	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8074:	3201      	adds	r2, #1
  return lhs != rhs;
    8076:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    807a:	f143 0300 	adc.w	r3, r3, #0
    807e:	e7e9      	b.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    8080:	a822      	add	r0, sp, #136	; 0x88
    8082:	f00d fc12 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8086:	4628      	mov	r0, r5
    8088:	f00d fc0f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    808c:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    808e:	f00d fc0c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8092:	2000      	movs	r0, #0
}
    8094:	b02b      	add	sp, #172	; 0xac
    8096:	ecbd 8b02 	vpop	{d8}
    809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    809e:	6933      	ldr	r3, [r6, #16]
    80a0:	68f0      	ldr	r0, [r6, #12]
    80a2:	6925      	ldr	r5, [r4, #16]
    80a4:	f1c3 0800 	rsb	r8, r3, #0
    80a8:	f7f8 fdde 	bl	c68 <__aeabi_f2d>
    80ac:	ec41 0b10 	vmov	d0, r0, r1
    80b0:	a90d      	add	r1, sp, #52	; 0x34
    80b2:	a80c      	add	r0, sp, #48	; 0x30
    80b4:	f009 fb8c 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    80b8:	68e0      	ldr	r0, [r4, #12]
    80ba:	f7f8 fdd5 	bl	c68 <__aeabi_f2d>
    80be:	ec41 0b10 	vmov	d0, r0, r1
    80c2:	a90f      	add	r1, sp, #60	; 0x3c
    80c4:	a80e      	add	r0, sp, #56	; 0x38
    80c6:	f009 fb83 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    80ca:	2308      	movs	r3, #8
    80cc:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    80d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80d2:	9324      	str	r3, [sp, #144]	; 0x90
    80d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80d6:	426d      	negs	r5, r5
    80d8:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    80dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80de:	9327      	str	r3, [sp, #156]	; 0x9c
    80e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80e2:	9328      	str	r3, [sp, #160]	; 0xa0
    80e4:	ad1c      	add	r5, sp, #112	; 0x70
    80e6:	4631      	mov	r1, r6
    80e8:	a810      	add	r0, sp, #64	; 0x40
    80ea:	b1df      	cbz	r7, 8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>
    80ec:	f00d fc22 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    80f0:	6872      	ldr	r2, [r6, #4]
    80f2:	9204      	str	r2, [sp, #16]
    80f4:	4621      	mov	r1, r4
    80f6:	a816      	add	r0, sp, #88	; 0x58
    80f8:	f00d fc1c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    80fc:	4651      	mov	r1, sl
    80fe:	4628      	mov	r0, r5
    8100:	6864      	ldr	r4, [r4, #4]
    8102:	f00d fc17 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8106:	9a04      	ldr	r2, [sp, #16]
    8108:	f1ba 0f00 	cmp.w	sl, #0
    810c:	d001      	beq.n	8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
    810e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8112:	9400      	str	r4, [sp, #0]
    8114:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8118:	ab16      	add	r3, sp, #88	; 0x58
    811a:	a910      	add	r1, sp, #64	; 0x40
    811c:	a822      	add	r0, sp, #136	; 0x88
    811e:	f00f fd06 	bl	17b2e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8122:	e67f      	b.n	7e24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8124:	f00d fc06 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8128:	6873      	ldr	r3, [r6, #4]
    812a:	9304      	str	r3, [sp, #16]
    812c:	4621      	mov	r1, r4
    812e:	a816      	add	r0, sp, #88	; 0x58
    8130:	f00d fc00 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8134:	6863      	ldr	r3, [r4, #4]
    8136:	9305      	str	r3, [sp, #20]
    8138:	4651      	mov	r1, sl
    813a:	4628      	mov	r0, r5
    813c:	f00d fbfa 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8140:	f1ba 0f00 	cmp.w	sl, #0
    8144:	d001      	beq.n	814a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14a>
    8146:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    814a:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    814e:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8150:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8152:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8156:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    815a:	aa1c      	add	r2, sp, #112	; 0x70
    815c:	a916      	add	r1, sp, #88	; 0x58
    815e:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8160:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8162:	f00e fc2b 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8166:	4602      	mov	r2, r0
    8168:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    816a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    816e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8172:	f04f 0800 	mov.w	r8, #0
    8176:	f04f 0900 	mov.w	r9, #0
    817a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    817e:	4590      	cmp	r8, r2
    8180:	eb79 0303 	sbcs.w	r3, r9, r3
    8184:	f280 80be 	bge.w	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
    const int32 input2_val = input2_offset + input2_data[i];
    8188:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    818a:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    818c:	f812 5008 	ldrb.w	r5, [r2, r8]
    8190:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8192:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8196:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    8198:	9a04      	ldr	r2, [sp, #16]
    819a:	f812 0008 	ldrb.w	r0, [r2, r8]
    819e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81a0:	ee18 1a10 	vmov	r1, s16
    81a4:	465a      	mov	r2, fp
    81a6:	40b0      	lsls	r0, r6
    81a8:	f7fe ffee 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    81ac:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81ae:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81b0:	4622      	mov	r2, r4
    81b2:	4639      	mov	r1, r7
    81b4:	4628      	mov	r0, r5
    81b6:	f7fe ffe7 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
    81ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81bc:	1a18      	subs	r0, r3, r0
    81be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    81c0:	bf18      	it	ne
    81c2:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    81c4:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
    81c8:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    81cc:	f149 0900 	adc.w	r9, r9, #0
    81d0:	e7d3      	b.n	817a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a>
    81d2:	6933      	ldr	r3, [r6, #16]
    81d4:	68f0      	ldr	r0, [r6, #12]
    81d6:	6925      	ldr	r5, [r4, #16]
    81d8:	f1c3 0800 	rsb	r8, r3, #0
    81dc:	f7f8 fd44 	bl	c68 <__aeabi_f2d>
    81e0:	ec41 0b10 	vmov	d0, r0, r1
    81e4:	a90d      	add	r1, sp, #52	; 0x34
    81e6:	a80c      	add	r0, sp, #48	; 0x30
    81e8:	f009 faf2 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    81ec:	68e0      	ldr	r0, [r4, #12]
    81ee:	f7f8 fd3b 	bl	c68 <__aeabi_f2d>
    81f2:	ec41 0b10 	vmov	d0, r0, r1
    81f6:	a90f      	add	r1, sp, #60	; 0x3c
    81f8:	a80e      	add	r0, sp, #56	; 0x38
    81fa:	f009 fae9 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    81fe:	2308      	movs	r3, #8
    8200:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8206:	9324      	str	r3, [sp, #144]	; 0x90
    8208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    820a:	426d      	negs	r5, r5
    820c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8212:	9327      	str	r3, [sp, #156]	; 0x9c
    8214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8216:	9328      	str	r3, [sp, #160]	; 0xa0
    8218:	ad1c      	add	r5, sp, #112	; 0x70
    821a:	4631      	mov	r1, r6
    821c:	a810      	add	r0, sp, #64	; 0x40
    821e:	b1df      	cbz	r7, 8258 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x258>
    8220:	f00d fb88 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8224:	6872      	ldr	r2, [r6, #4]
    8226:	9204      	str	r2, [sp, #16]
    8228:	4621      	mov	r1, r4
    822a:	a816      	add	r0, sp, #88	; 0x58
    822c:	f00d fb82 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8230:	4651      	mov	r1, sl
    8232:	4628      	mov	r0, r5
    8234:	6864      	ldr	r4, [r4, #4]
    8236:	f00d fb7d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    823a:	9a04      	ldr	r2, [sp, #16]
    823c:	f1ba 0f00 	cmp.w	sl, #0
    8240:	d001      	beq.n	8246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x246>
    8242:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8246:	9400      	str	r4, [sp, #0]
    8248:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    824c:	ab16      	add	r3, sp, #88	; 0x58
    824e:	a910      	add	r1, sp, #64	; 0x40
    8250:	a822      	add	r0, sp, #136	; 0x88
    8252:	f00f fcf7 	bl	17c44 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8256:	e5e5      	b.n	7e24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8258:	f00d fb6c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    825c:	6873      	ldr	r3, [r6, #4]
    825e:	9304      	str	r3, [sp, #16]
    8260:	4621      	mov	r1, r4
    8262:	a816      	add	r0, sp, #88	; 0x58
    8264:	f00d fb66 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8268:	6863      	ldr	r3, [r4, #4]
    826a:	9305      	str	r3, [sp, #20]
    826c:	4651      	mov	r1, sl
    826e:	4628      	mov	r0, r5
    8270:	f00d fb60 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8274:	f1ba 0f00 	cmp.w	sl, #0
    8278:	d001      	beq.n	827e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27e>
    827a:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    827e:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8282:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8284:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8286:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    828a:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    828e:	aa1c      	add	r2, sp, #112	; 0x70
    8290:	a916      	add	r1, sp, #88	; 0x58
    8292:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8294:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8296:	f00e fb91 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    829a:	4602      	mov	r2, r0
    829c:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    829e:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    82a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    82a6:	f04f 0800 	mov.w	r8, #0
    82aa:	f04f 0900 	mov.w	r9, #0
    82ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    82b2:	4590      	cmp	r8, r2
    82b4:	eb79 0303 	sbcs.w	r3, r9, r3
    82b8:	da24      	bge.n	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
    const int32 input2_val = input2_offset + input2_data[i];
    82ba:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    82bc:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    82be:	f912 5008 	ldrsb.w	r5, [r2, r8]
    82c2:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    82c4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    82c8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    82ca:	9a04      	ldr	r2, [sp, #16]
    82cc:	f912 0008 	ldrsb.w	r0, [r2, r8]
    82d0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    82d2:	ee18 1a10 	vmov	r1, s16
    82d6:	465a      	mov	r2, fp
    82d8:	40b0      	lsls	r0, r6
    82da:	f7fe ff55 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    82de:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    82e0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    82e2:	4622      	mov	r2, r4
    82e4:	4639      	mov	r1, r7
    82e6:	4628      	mov	r0, r5
    82e8:	f7fe ff4e 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
    82ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    82ee:	1a18      	subs	r0, r3, r0
    82f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82f2:	bf18      	it	ne
    82f4:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    82f6:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
    82fa:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    82fe:	f149 0900 	adc.w	r9, r9, #0
    8302:	e7d4      	b.n	82ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ae>
    8304:	a81c      	add	r0, sp, #112	; 0x70
    8306:	e58e      	b.n	7e26 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8308:	696c      	ldr	r4, [r5, #20]
    830a:	f7f8 fad2 	bl	8b2 <TfLiteTypeGetName>
    830e:	f818 3009 	ldrb.w	r3, [r8, r9]
    8312:	4903      	ldr	r1, [pc, #12]	; (8320 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x320>)
    8314:	4602      	mov	r2, r0
    8316:	4628      	mov	r0, r5
    8318:	47a0      	blx	r4
      return kTfLiteError;
    831a:	2001      	movs	r0, #1
    831c:	e6ba      	b.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    831e:	bf00      	nop
    8320:	0002aea3 	.word	0x0002aea3

00008324 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
    8324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    8328:	680b      	ldr	r3, [r1, #0]
    832a:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    832e:	685e      	ldr	r6, [r3, #4]
    8330:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8332:	684b      	ldr	r3, [r1, #4]
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
    8334:	ed2d 8b02 	vpush	{d8}
    8338:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    833a:	ea4f 1986 	mov.w	r9, r6, lsl #6
    833e:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8342:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    8346:	b0ab      	sub	sp, #172	; 0xac
    8348:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    834a:	4621      	mov	r1, r4
    834c:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    834e:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8352:	f016 f885 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    8356:	f080 0001 	eor.w	r0, r0, #1
    835a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    835c:	f818 0009 	ldrb.w	r0, [r8, r9]
    8360:	1e43      	subs	r3, r0, #1
    8362:	2b08      	cmp	r3, #8
    8364:	f200 8253 	bhi.w	880e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    8368:	e8df f013 	tbh	[pc, r3, lsl #1]
    836c:	00680009 	.word	0x00680009
    8370:	00b7011a 	.word	0x00b7011a
    8374:	02510251 	.word	0x02510251
    8378:	02510251 	.word	0x02510251
    837c:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
    837e:	ad1c      	add	r5, sp, #112	; 0x70
    8380:	4631      	mov	r1, r6
    8382:	b31f      	cbz	r7, 83cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    8384:	a810      	add	r0, sp, #64	; 0x40
    8386:	f00d fad5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    838a:	4621      	mov	r1, r4
    838c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    838e:	6876      	ldr	r6, [r6, #4]
    8390:	f00d fad0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8394:	b104      	cbz	r4, 8398 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x74>
    8396:	6864      	ldr	r4, [r4, #4]
    8398:	4651      	mov	r1, sl
    839a:	4628      	mov	r0, r5
    839c:	f00d faca 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    83a0:	f1ba 0f00 	cmp.w	sl, #0
    83a4:	d001      	beq.n	83aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x86>
    83a6:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    83aa:	9400      	str	r4, [sp, #0]
    83ac:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    83b0:	ab16      	add	r3, sp, #88	; 0x58
    83b2:	4632      	mov	r2, r6
    83b4:	a910      	add	r1, sp, #64	; 0x40
    83b6:	a822      	add	r0, sp, #136	; 0x88
    83b8:	f00e fc61 	bl	16c7e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Greater);
    83bc:	4628      	mov	r0, r5
    83be:	f00d fa74 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    83c2:	a816      	add	r0, sp, #88	; 0x58
    83c4:	f00d fa71 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    83c8:	a810      	add	r0, sp, #64	; 0x40
    83ca:	e0e1      	b.n	8590 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
    83cc:	a816      	add	r0, sp, #88	; 0x58
    83ce:	f00d fab1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83d2:	4621      	mov	r1, r4
    83d4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    83d6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    83da:	f00d faab 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83de:	b104      	cbz	r4, 83e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    83e0:	6864      	ldr	r4, [r4, #4]
    83e2:	4651      	mov	r1, sl
    83e4:	a822      	add	r0, sp, #136	; 0x88
    83e6:	f00d faa5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    83ea:	f1ba 0f00 	cmp.w	sl, #0
    83ee:	d001      	beq.n	83f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    83f0:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    83f4:	aa22      	add	r2, sp, #136	; 0x88
    83f6:	4629      	mov	r1, r5
    83f8:	a816      	add	r0, sp, #88	; 0x58
    83fa:	f00e fadf 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    83fe:	4641      	mov	r1, r8
  const int64_t flatsize =
    8400:	4606      	mov	r6, r0
    8402:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8404:	2200      	movs	r2, #0
    8406:	2300      	movs	r3, #0
    8408:	42b2      	cmp	r2, r6
    840a:	eb73 0007 	sbcs.w	r0, r3, r7
    840e:	f280 80b8 	bge.w	8582 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8412:	ecb1 7a01 	vldmia	r1!, {s14}
    8416:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs > rhs;
    841a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8422:	eb0a 0002 	add.w	r0, sl, r2
  return lhs > rhs;
    8426:	bfcc      	ite	gt
    8428:	f04f 0c01 	movgt.w	ip, #1
    842c:	f04f 0c00 	movle.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8430:	3201      	adds	r2, #1
  return lhs > rhs;
    8432:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    8436:	f143 0300 	adc.w	r3, r3, #0
    843a:	e7e5      	b.n	8408 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
    843c:	ad1c      	add	r5, sp, #112	; 0x70
    843e:	4631      	mov	r1, r6
    8440:	b1e7      	cbz	r7, 847c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8442:	a810      	add	r0, sp, #64	; 0x40
    8444:	f00d fa76 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8448:	4621      	mov	r1, r4
    844a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    844c:	6876      	ldr	r6, [r6, #4]
    844e:	f00d fa71 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8452:	b104      	cbz	r4, 8456 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8454:	6864      	ldr	r4, [r4, #4]
    8456:	4651      	mov	r1, sl
    8458:	4628      	mov	r0, r5
    845a:	f00d fa6b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    845e:	f1ba 0f00 	cmp.w	sl, #0
    8462:	d001      	beq.n	8468 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8464:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8468:	9400      	str	r4, [sp, #0]
    846a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    846e:	ab16      	add	r3, sp, #88	; 0x58
    8470:	4632      	mov	r2, r6
    8472:	a910      	add	r1, sp, #64	; 0x40
    8474:	a822      	add	r0, sp, #136	; 0x88
    8476:	f00e ff7a 	bl	1736e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    847a:	e79f      	b.n	83bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    847c:	a816      	add	r0, sp, #88	; 0x58
    847e:	f00d fa59 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8482:	4621      	mov	r1, r4
    8484:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8486:	6876      	ldr	r6, [r6, #4]
    8488:	f00d fa54 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    848c:	b104      	cbz	r4, 8490 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    848e:	6864      	ldr	r4, [r4, #4]
    8490:	4651      	mov	r1, sl
    8492:	a822      	add	r0, sp, #136	; 0x88
    8494:	f00d fa4e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8498:	f1ba 0f00 	cmp.w	sl, #0
    849c:	d001      	beq.n	84a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    849e:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    84a2:	aa22      	add	r2, sp, #136	; 0x88
    84a4:	4629      	mov	r1, r5
    84a6:	a816      	add	r0, sp, #88	; 0x58
    84a8:	f00e fa88 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    84ac:	2200      	movs	r2, #0
  const int64_t flatsize =
    84ae:	4680      	mov	r8, r0
    84b0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    84b4:	2300      	movs	r3, #0
    84b6:	4542      	cmp	r2, r8
    84b8:	eb73 0109 	sbcs.w	r1, r3, r9
    84bc:	da61      	bge.n	8582 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
    84be:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    84c2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    84c6:	4281      	cmp	r1, r0
    84c8:	bfd4      	ite	le
    84ca:	2100      	movle	r1, #0
    84cc:	2101      	movgt	r1, #1
    84ce:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    84d2:	3201      	adds	r2, #1
    84d4:	f143 0300 	adc.w	r3, r3, #0
    84d8:	e7ed      	b.n	84b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
    84da:	ad1c      	add	r5, sp, #112	; 0x70
    84dc:	4631      	mov	r1, r6
    84de:	b1e7      	cbz	r7, 851a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    84e0:	a810      	add	r0, sp, #64	; 0x40
    84e2:	f00d fa27 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    84e6:	4621      	mov	r1, r4
    84e8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    84ea:	6876      	ldr	r6, [r6, #4]
    84ec:	f00d fa22 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    84f0:	b104      	cbz	r4, 84f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    84f2:	6864      	ldr	r4, [r4, #4]
    84f4:	4651      	mov	r1, sl
    84f6:	4628      	mov	r0, r5
    84f8:	f00d fa1c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    84fc:	f1ba 0f00 	cmp.w	sl, #0
    8500:	d001      	beq.n	8506 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8502:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8506:	9400      	str	r4, [sp, #0]
    8508:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    850c:	ab16      	add	r3, sp, #88	; 0x58
    850e:	4632      	mov	r2, r6
    8510:	a910      	add	r1, sp, #64	; 0x40
    8512:	a822      	add	r0, sp, #136	; 0x88
    8514:	f00e ff80 	bl	17418 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8518:	e750      	b.n	83bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    851a:	a816      	add	r0, sp, #88	; 0x58
    851c:	f00d fa0a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8520:	4621      	mov	r1, r4
    8522:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8524:	6876      	ldr	r6, [r6, #4]
    8526:	f00d fa05 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    852a:	b104      	cbz	r4, 852e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    852c:	6864      	ldr	r4, [r4, #4]
    852e:	4651      	mov	r1, sl
    8530:	a822      	add	r0, sp, #136	; 0x88
    8532:	f00d f9ff 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8536:	f1ba 0f00 	cmp.w	sl, #0
    853a:	d001      	beq.n	8540 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    853c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8540:	aa22      	add	r2, sp, #136	; 0x88
    8542:	4629      	mov	r1, r5
    8544:	a816      	add	r0, sp, #88	; 0x58
    8546:	f00e fa39 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    854a:	3c08      	subs	r4, #8
  const int64_t flatsize =
    854c:	17c1      	asrs	r1, r0, #31
    854e:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8552:	2200      	movs	r2, #0
    8554:	2300      	movs	r3, #0
    8556:	4282      	cmp	r2, r0
    8558:	eb73 0601 	sbcs.w	r6, r3, r1
    855c:	da11      	bge.n	8582 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
    855e:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
    8562:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
    8566:	45b0      	cmp	r8, r6
    8568:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    856c:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs > rhs;
    8570:	bfb4      	ite	lt
    8572:	2601      	movlt	r6, #1
    8574:	2600      	movge	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8576:	3201      	adds	r2, #1
  return lhs > rhs;
    8578:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    857c:	f143 0300 	adc.w	r3, r3, #0
    8580:	e7e9      	b.n	8556 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x232>
    8582:	a822      	add	r0, sp, #136	; 0x88
    8584:	f00d f991 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8588:	4628      	mov	r0, r5
    858a:	f00d f98e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    858e:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Greater);
    8590:	f00d f98b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8594:	2000      	movs	r0, #0
}
    8596:	b02b      	add	sp, #172	; 0xac
    8598:	ecbd 8b02 	vpop	{d8}
    859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Greater);
    85a0:	6933      	ldr	r3, [r6, #16]
    85a2:	68f0      	ldr	r0, [r6, #12]
    85a4:	6925      	ldr	r5, [r4, #16]
    85a6:	f1c3 0800 	rsb	r8, r3, #0
    85aa:	f7f8 fb5d 	bl	c68 <__aeabi_f2d>
    85ae:	ec41 0b10 	vmov	d0, r0, r1
    85b2:	a90d      	add	r1, sp, #52	; 0x34
    85b4:	a80c      	add	r0, sp, #48	; 0x30
    85b6:	f009 f90b 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    85ba:	68e0      	ldr	r0, [r4, #12]
    85bc:	f7f8 fb54 	bl	c68 <__aeabi_f2d>
    85c0:	ec41 0b10 	vmov	d0, r0, r1
    85c4:	a90f      	add	r1, sp, #60	; 0x3c
    85c6:	a80e      	add	r0, sp, #56	; 0x38
    85c8:	f009 f902 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    85cc:	2308      	movs	r3, #8
    85ce:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    85d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85d4:	9324      	str	r3, [sp, #144]	; 0x90
    85d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    85d8:	426d      	negs	r5, r5
    85da:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    85de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    85e0:	9327      	str	r3, [sp, #156]	; 0x9c
    85e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85e4:	9328      	str	r3, [sp, #160]	; 0xa0
    85e6:	ad1c      	add	r5, sp, #112	; 0x70
    85e8:	4631      	mov	r1, r6
    85ea:	a810      	add	r0, sp, #64	; 0x40
    85ec:	b1df      	cbz	r7, 8626 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x302>
    85ee:	f00d f9a1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    85f2:	6872      	ldr	r2, [r6, #4]
    85f4:	9204      	str	r2, [sp, #16]
    85f6:	4621      	mov	r1, r4
    85f8:	a816      	add	r0, sp, #88	; 0x58
    85fa:	f00d f99b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    85fe:	4651      	mov	r1, sl
    8600:	4628      	mov	r0, r5
    8602:	6864      	ldr	r4, [r4, #4]
    8604:	f00d f996 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8608:	9a04      	ldr	r2, [sp, #16]
    860a:	f1ba 0f00 	cmp.w	sl, #0
    860e:	d001      	beq.n	8614 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    8610:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8614:	9400      	str	r4, [sp, #0]
    8616:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    861a:	ab16      	add	r3, sp, #88	; 0x58
    861c:	a910      	add	r1, sp, #64	; 0x40
    861e:	a822      	add	r0, sp, #136	; 0x88
    8620:	f00f fb9b 	bl	17d5a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8624:	e6ca      	b.n	83bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8626:	f00d f985 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    862a:	6873      	ldr	r3, [r6, #4]
    862c:	9304      	str	r3, [sp, #16]
    862e:	4621      	mov	r1, r4
    8630:	a816      	add	r0, sp, #88	; 0x58
    8632:	f00d f97f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8636:	6863      	ldr	r3, [r4, #4]
    8638:	9305      	str	r3, [sp, #20]
    863a:	4651      	mov	r1, sl
    863c:	4628      	mov	r0, r5
    863e:	f00d f979 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8642:	f1ba 0f00 	cmp.w	sl, #0
    8646:	d001      	beq.n	864c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x328>
    8648:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    864c:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8650:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8652:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8654:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8658:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    865c:	aa1c      	add	r2, sp, #112	; 0x70
    865e:	a916      	add	r1, sp, #88	; 0x58
    8660:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8662:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8664:	f00e f9aa 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8668:	4602      	mov	r2, r0
    866a:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    866c:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8670:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8674:	f04f 0800 	mov.w	r8, #0
    8678:	f04f 0900 	mov.w	r9, #0
    867c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    8680:	4590      	cmp	r8, r2
    8682:	eb79 0303 	sbcs.w	r3, r9, r3
    8686:	f280 80c0 	bge.w	880a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    868a:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    868c:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    868e:	f812 5008 	ldrb.w	r5, [r2, r8]
    8692:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8694:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8698:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    869a:	9a04      	ldr	r2, [sp, #16]
    869c:	f812 0008 	ldrb.w	r0, [r2, r8]
    86a0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86a2:	ee18 1a10 	vmov	r1, s16
    86a6:	465a      	mov	r2, fp
    86a8:	40b0      	lsls	r0, r6
    86aa:	f7fe fd6d 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    86ae:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86b0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86b2:	4622      	mov	r2, r4
    86b4:	4639      	mov	r1, r7
    86b6:	4628      	mov	r0, r5
    86b8:	f7fe fd66 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
    86bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    86be:	4283      	cmp	r3, r0
    86c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86c2:	bfd4      	ite	le
    86c4:	2000      	movle	r0, #0
    86c6:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    86c8:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
    86cc:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    86d0:	f149 0900 	adc.w	r9, r9, #0
    86d4:	e7d2      	b.n	867c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x358>
    86d6:	6933      	ldr	r3, [r6, #16]
    86d8:	68f0      	ldr	r0, [r6, #12]
    86da:	6925      	ldr	r5, [r4, #16]
    86dc:	f1c3 0800 	rsb	r8, r3, #0
    86e0:	f7f8 fac2 	bl	c68 <__aeabi_f2d>
    86e4:	ec41 0b10 	vmov	d0, r0, r1
    86e8:	a90d      	add	r1, sp, #52	; 0x34
    86ea:	a80c      	add	r0, sp, #48	; 0x30
    86ec:	f009 f870 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    86f0:	68e0      	ldr	r0, [r4, #12]
    86f2:	f7f8 fab9 	bl	c68 <__aeabi_f2d>
    86f6:	ec41 0b10 	vmov	d0, r0, r1
    86fa:	a90f      	add	r1, sp, #60	; 0x3c
    86fc:	a80e      	add	r0, sp, #56	; 0x38
    86fe:	f009 f867 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8702:	2308      	movs	r3, #8
    8704:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    870a:	9324      	str	r3, [sp, #144]	; 0x90
    870c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    870e:	426d      	negs	r5, r5
    8710:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8716:	9327      	str	r3, [sp, #156]	; 0x9c
    8718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    871a:	9328      	str	r3, [sp, #160]	; 0xa0
    871c:	ad1c      	add	r5, sp, #112	; 0x70
    871e:	4631      	mov	r1, r6
    8720:	a810      	add	r0, sp, #64	; 0x40
    8722:	b1df      	cbz	r7, 875c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x438>
    8724:	f00d f906 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8728:	6872      	ldr	r2, [r6, #4]
    872a:	9204      	str	r2, [sp, #16]
    872c:	4621      	mov	r1, r4
    872e:	a816      	add	r0, sp, #88	; 0x58
    8730:	f00d f900 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8734:	4651      	mov	r1, sl
    8736:	4628      	mov	r0, r5
    8738:	6864      	ldr	r4, [r4, #4]
    873a:	f00d f8fb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    873e:	9a04      	ldr	r2, [sp, #16]
    8740:	f1ba 0f00 	cmp.w	sl, #0
    8744:	d001      	beq.n	874a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x426>
    8746:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    874a:	9400      	str	r4, [sp, #0]
    874c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8750:	ab16      	add	r3, sp, #88	; 0x58
    8752:	a910      	add	r1, sp, #64	; 0x40
    8754:	a822      	add	r0, sp, #136	; 0x88
    8756:	f00f fb8c 	bl	17e72 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    875a:	e62f      	b.n	83bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    875c:	f00d f8ea 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8760:	6873      	ldr	r3, [r6, #4]
    8762:	9304      	str	r3, [sp, #16]
    8764:	4621      	mov	r1, r4
    8766:	a816      	add	r0, sp, #88	; 0x58
    8768:	f00d f8e4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    876c:	6863      	ldr	r3, [r4, #4]
    876e:	9305      	str	r3, [sp, #20]
    8770:	4651      	mov	r1, sl
    8772:	4628      	mov	r0, r5
    8774:	f00d f8de 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8778:	f1ba 0f00 	cmp.w	sl, #0
    877c:	d001      	beq.n	8782 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    877e:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    8782:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8786:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8788:	9b24      	ldr	r3, [sp, #144]	; 0x90
    878a:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    878e:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8792:	aa1c      	add	r2, sp, #112	; 0x70
    8794:	a916      	add	r1, sp, #88	; 0x58
    8796:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8798:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    879a:	f00e f90f 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    879e:	4602      	mov	r2, r0
    87a0:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    87a2:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    87a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    87aa:	f04f 0800 	mov.w	r8, #0
    87ae:	f04f 0900 	mov.w	r9, #0
    87b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    87b6:	4590      	cmp	r8, r2
    87b8:	eb79 0303 	sbcs.w	r3, r9, r3
    87bc:	da25      	bge.n	880a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    87be:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    87c0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    87c2:	f912 5008 	ldrsb.w	r5, [r2, r8]
    87c6:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    87c8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    87cc:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    87ce:	9a04      	ldr	r2, [sp, #16]
    87d0:	f912 0008 	ldrsb.w	r0, [r2, r8]
    87d4:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    87d6:	ee18 1a10 	vmov	r1, s16
    87da:	465a      	mov	r2, fp
    87dc:	40b0      	lsls	r0, r6
    87de:	f7fe fcd3 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    87e2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    87e4:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    87e6:	4622      	mov	r2, r4
    87e8:	4639      	mov	r1, r7
    87ea:	4628      	mov	r0, r5
    87ec:	f7fe fccc 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
    87f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    87f2:	4283      	cmp	r3, r0
    87f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    87f6:	bfd4      	ite	le
    87f8:	2000      	movle	r0, #0
    87fa:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    87fc:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
    8800:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8804:	f149 0900 	adc.w	r9, r9, #0
    8808:	e7d3      	b.n	87b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    880a:	a81c      	add	r0, sp, #112	; 0x70
    880c:	e5d7      	b.n	83be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    880e:	696c      	ldr	r4, [r5, #20]
    8810:	f7f8 f84f 	bl	8b2 <TfLiteTypeGetName>
    8814:	f818 3009 	ldrb.w	r3, [r8, r9]
    8818:	4902      	ldr	r1, [pc, #8]	; (8824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    881a:	4602      	mov	r2, r0
    881c:	4628      	mov	r0, r5
    881e:	47a0      	blx	r4
      return kTfLiteError;
    8820:	2001      	movs	r0, #1
    8822:	e6b8      	b.n	8596 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x272>
    8824:	0002aea3 	.word	0x0002aea3

00008828 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
    8828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    882c:	680b      	ldr	r3, [r1, #0]
    882e:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    8832:	685e      	ldr	r6, [r3, #4]
    8834:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8836:	684b      	ldr	r3, [r1, #4]
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
    8838:	ed2d 8b02 	vpush	{d8}
    883c:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    883e:	ea4f 1986 	mov.w	r9, r6, lsl #6
    8842:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8846:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    884a:	b0ab      	sub	sp, #172	; 0xac
    884c:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    884e:	4621      	mov	r1, r4
    8850:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    8852:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8856:	f015 fe03 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    885a:	f080 0001 	eor.w	r0, r0, #1
    885e:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    8860:	f818 0009 	ldrb.w	r0, [r8, r9]
    8864:	1e43      	subs	r3, r0, #1
    8866:	2b08      	cmp	r3, #8
    8868:	f200 8253 	bhi.w	8d12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    886c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8870:	00680009 	.word	0x00680009
    8874:	00b7011a 	.word	0x00b7011a
    8878:	02510251 	.word	0x02510251
    887c:	02510251 	.word	0x02510251
    8880:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
    8882:	ad1c      	add	r5, sp, #112	; 0x70
    8884:	4631      	mov	r1, r6
    8886:	b31f      	cbz	r7, 88d0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    8888:	a810      	add	r0, sp, #64	; 0x40
    888a:	f00d f853 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    888e:	4621      	mov	r1, r4
    8890:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8892:	6876      	ldr	r6, [r6, #4]
    8894:	f00d f84e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8898:	b104      	cbz	r4, 889c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    889a:	6864      	ldr	r4, [r4, #4]
    889c:	4651      	mov	r1, sl
    889e:	4628      	mov	r0, r5
    88a0:	f00d f848 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    88a4:	f1ba 0f00 	cmp.w	sl, #0
    88a8:	d001      	beq.n	88ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    88aa:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    88ae:	9400      	str	r4, [sp, #0]
    88b0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    88b4:	ab16      	add	r3, sp, #88	; 0x58
    88b6:	4632      	mov	r2, r6
    88b8:	a910      	add	r1, sp, #64	; 0x40
    88ba:	a822      	add	r0, sp, #136	; 0x88
    88bc:	f00e fa3b 	bl	16d36 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    88c0:	4628      	mov	r0, r5
    88c2:	f00c fff2 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    88c6:	a816      	add	r0, sp, #88	; 0x58
    88c8:	f00c ffef 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    88cc:	a810      	add	r0, sp, #64	; 0x40
    88ce:	e0e1      	b.n	8a94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
    88d0:	a816      	add	r0, sp, #88	; 0x58
    88d2:	f00d f82f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    88d6:	4621      	mov	r1, r4
    88d8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    88da:	f8d6 8004 	ldr.w	r8, [r6, #4]
    88de:	f00d f829 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    88e2:	b104      	cbz	r4, 88e6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    88e4:	6864      	ldr	r4, [r4, #4]
    88e6:	4651      	mov	r1, sl
    88e8:	a822      	add	r0, sp, #136	; 0x88
    88ea:	f00d f823 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    88ee:	f1ba 0f00 	cmp.w	sl, #0
    88f2:	d001      	beq.n	88f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    88f4:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    88f8:	aa22      	add	r2, sp, #136	; 0x88
    88fa:	4629      	mov	r1, r5
    88fc:	a816      	add	r0, sp, #88	; 0x58
    88fe:	f00e f85d 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8902:	4641      	mov	r1, r8
  const int64_t flatsize =
    8904:	4606      	mov	r6, r0
    8906:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8908:	2200      	movs	r2, #0
    890a:	2300      	movs	r3, #0
    890c:	42b2      	cmp	r2, r6
    890e:	eb73 0007 	sbcs.w	r0, r3, r7
    8912:	f280 80b8 	bge.w	8a86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8916:	ecb1 7a01 	vldmia	r1!, {s14}
    891a:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs >= rhs;
    891e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8926:	eb0a 0002 	add.w	r0, sl, r2
  return lhs >= rhs;
    892a:	bfac      	ite	ge
    892c:	f04f 0c01 	movge.w	ip, #1
    8930:	f04f 0c00 	movlt.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8934:	3201      	adds	r2, #1
  return lhs >= rhs;
    8936:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    893a:	f143 0300 	adc.w	r3, r3, #0
    893e:	e7e5      	b.n	890c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
    8940:	ad1c      	add	r5, sp, #112	; 0x70
    8942:	4631      	mov	r1, r6
    8944:	b1e7      	cbz	r7, 8980 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8946:	a810      	add	r0, sp, #64	; 0x40
    8948:	f00c fff4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    894c:	4621      	mov	r1, r4
    894e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8950:	6876      	ldr	r6, [r6, #4]
    8952:	f00c ffef 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8956:	b104      	cbz	r4, 895a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8958:	6864      	ldr	r4, [r4, #4]
    895a:	4651      	mov	r1, sl
    895c:	4628      	mov	r0, r5
    895e:	f00c ffe9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8962:	f1ba 0f00 	cmp.w	sl, #0
    8966:	d001      	beq.n	896c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8968:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    896c:	9400      	str	r4, [sp, #0]
    896e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8972:	ab16      	add	r3, sp, #88	; 0x58
    8974:	4632      	mov	r2, r6
    8976:	a910      	add	r1, sp, #64	; 0x40
    8978:	a822      	add	r0, sp, #136	; 0x88
    897a:	f00e fdaa 	bl	174d2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    897e:	e79f      	b.n	88c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8980:	a816      	add	r0, sp, #88	; 0x58
    8982:	f00c ffd7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8986:	4621      	mov	r1, r4
    8988:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    898a:	6876      	ldr	r6, [r6, #4]
    898c:	f00c ffd2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8990:	b104      	cbz	r4, 8994 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    8992:	6864      	ldr	r4, [r4, #4]
    8994:	4651      	mov	r1, sl
    8996:	a822      	add	r0, sp, #136	; 0x88
    8998:	f00c ffcc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    899c:	f1ba 0f00 	cmp.w	sl, #0
    89a0:	d001      	beq.n	89a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    89a2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    89a6:	aa22      	add	r2, sp, #136	; 0x88
    89a8:	4629      	mov	r1, r5
    89aa:	a816      	add	r0, sp, #88	; 0x58
    89ac:	f00e f806 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    89b0:	2200      	movs	r2, #0
  const int64_t flatsize =
    89b2:	4680      	mov	r8, r0
    89b4:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    89b8:	2300      	movs	r3, #0
    89ba:	4542      	cmp	r2, r8
    89bc:	eb73 0109 	sbcs.w	r1, r3, r9
    89c0:	da61      	bge.n	8a86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
    89c2:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    89c6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    89ca:	4281      	cmp	r1, r0
    89cc:	bfb4      	ite	lt
    89ce:	2100      	movlt	r1, #0
    89d0:	2101      	movge	r1, #1
    89d2:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    89d6:	3201      	adds	r2, #1
    89d8:	f143 0300 	adc.w	r3, r3, #0
    89dc:	e7ed      	b.n	89ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
    89de:	ad1c      	add	r5, sp, #112	; 0x70
    89e0:	4631      	mov	r1, r6
    89e2:	b1e7      	cbz	r7, 8a1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    89e4:	a810      	add	r0, sp, #64	; 0x40
    89e6:	f00c ffa5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    89ea:	4621      	mov	r1, r4
    89ec:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    89ee:	6876      	ldr	r6, [r6, #4]
    89f0:	f00c ffa0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    89f4:	b104      	cbz	r4, 89f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    89f6:	6864      	ldr	r4, [r4, #4]
    89f8:	4651      	mov	r1, sl
    89fa:	4628      	mov	r0, r5
    89fc:	f00c ff9a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8a00:	f1ba 0f00 	cmp.w	sl, #0
    8a04:	d001      	beq.n	8a0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8a06:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8a0a:	9400      	str	r4, [sp, #0]
    8a0c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8a10:	ab16      	add	r3, sp, #88	; 0x58
    8a12:	4632      	mov	r2, r6
    8a14:	a910      	add	r1, sp, #64	; 0x40
    8a16:	a822      	add	r0, sp, #136	; 0x88
    8a18:	f00e fdb0 	bl	1757c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8a1c:	e750      	b.n	88c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8a1e:	a816      	add	r0, sp, #88	; 0x58
    8a20:	f00c ff88 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a24:	4621      	mov	r1, r4
    8a26:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8a28:	6876      	ldr	r6, [r6, #4]
    8a2a:	f00c ff83 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a2e:	b104      	cbz	r4, 8a32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    8a30:	6864      	ldr	r4, [r4, #4]
    8a32:	4651      	mov	r1, sl
    8a34:	a822      	add	r0, sp, #136	; 0x88
    8a36:	f00c ff7d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8a3a:	f1ba 0f00 	cmp.w	sl, #0
    8a3e:	d001      	beq.n	8a44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    8a40:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8a44:	aa22      	add	r2, sp, #136	; 0x88
    8a46:	4629      	mov	r1, r5
    8a48:	a816      	add	r0, sp, #88	; 0x58
    8a4a:	f00d ffb7 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8a4e:	3c08      	subs	r4, #8
  const int64_t flatsize =
    8a50:	17c1      	asrs	r1, r0, #31
    8a52:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8a56:	2200      	movs	r2, #0
    8a58:	2300      	movs	r3, #0
    8a5a:	4282      	cmp	r2, r0
    8a5c:	eb73 0601 	sbcs.w	r6, r3, r1
    8a60:	da11      	bge.n	8a86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
    8a62:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8a66:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8a6a:	45b0      	cmp	r8, r6
    8a6c:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    8a70:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs >= rhs;
    8a74:	bfac      	ite	ge
    8a76:	2601      	movge	r6, #1
    8a78:	2600      	movlt	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8a7a:	3201      	adds	r2, #1
  return lhs >= rhs;
    8a7c:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    8a80:	f143 0300 	adc.w	r3, r3, #0
    8a84:	e7e9      	b.n	8a5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
    8a86:	a822      	add	r0, sp, #136	; 0x88
    8a88:	f00c ff0f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8a8c:	4628      	mov	r0, r5
    8a8e:	f00c ff0c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8a92:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    8a94:	f00c ff09 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8a98:	2000      	movs	r0, #0
}
    8a9a:	b02b      	add	sp, #172	; 0xac
    8a9c:	ecbd 8b02 	vpop	{d8}
    8aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    8aa4:	6933      	ldr	r3, [r6, #16]
    8aa6:	68f0      	ldr	r0, [r6, #12]
    8aa8:	6925      	ldr	r5, [r4, #16]
    8aaa:	f1c3 0800 	rsb	r8, r3, #0
    8aae:	f7f8 f8db 	bl	c68 <__aeabi_f2d>
    8ab2:	ec41 0b10 	vmov	d0, r0, r1
    8ab6:	a90d      	add	r1, sp, #52	; 0x34
    8ab8:	a80c      	add	r0, sp, #48	; 0x30
    8aba:	f008 fe89 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8abe:	68e0      	ldr	r0, [r4, #12]
    8ac0:	f7f8 f8d2 	bl	c68 <__aeabi_f2d>
    8ac4:	ec41 0b10 	vmov	d0, r0, r1
    8ac8:	a90f      	add	r1, sp, #60	; 0x3c
    8aca:	a80e      	add	r0, sp, #56	; 0x38
    8acc:	f008 fe80 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8ad0:	2308      	movs	r3, #8
    8ad2:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ad8:	9324      	str	r3, [sp, #144]	; 0x90
    8ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8adc:	426d      	negs	r5, r5
    8ade:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ae4:	9327      	str	r3, [sp, #156]	; 0x9c
    8ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ae8:	9328      	str	r3, [sp, #160]	; 0xa0
    8aea:	ad1c      	add	r5, sp, #112	; 0x70
    8aec:	4631      	mov	r1, r6
    8aee:	a810      	add	r0, sp, #64	; 0x40
    8af0:	b1df      	cbz	r7, 8b2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x302>
    8af2:	f00c ff1f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8af6:	6872      	ldr	r2, [r6, #4]
    8af8:	9204      	str	r2, [sp, #16]
    8afa:	4621      	mov	r1, r4
    8afc:	a816      	add	r0, sp, #88	; 0x58
    8afe:	f00c ff19 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8b02:	4651      	mov	r1, sl
    8b04:	4628      	mov	r0, r5
    8b06:	6864      	ldr	r4, [r4, #4]
    8b08:	f00c ff14 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8b0c:	9a04      	ldr	r2, [sp, #16]
    8b0e:	f1ba 0f00 	cmp.w	sl, #0
    8b12:	d001      	beq.n	8b18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    8b14:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8b18:	9400      	str	r4, [sp, #0]
    8b1a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8b1e:	ab16      	add	r3, sp, #88	; 0x58
    8b20:	a910      	add	r1, sp, #64	; 0x40
    8b22:	a822      	add	r0, sp, #136	; 0x88
    8b24:	f00f fa31 	bl	17f8a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8b28:	e6ca      	b.n	88c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8b2a:	f00c ff03 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8b2e:	6873      	ldr	r3, [r6, #4]
    8b30:	9304      	str	r3, [sp, #16]
    8b32:	4621      	mov	r1, r4
    8b34:	a816      	add	r0, sp, #88	; 0x58
    8b36:	f00c fefd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8b3a:	6863      	ldr	r3, [r4, #4]
    8b3c:	9305      	str	r3, [sp, #20]
    8b3e:	4651      	mov	r1, sl
    8b40:	4628      	mov	r0, r5
    8b42:	f00c fef7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8b46:	f1ba 0f00 	cmp.w	sl, #0
    8b4a:	d001      	beq.n	8b50 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x328>
    8b4c:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    8b50:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8b54:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8b56:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8b58:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8b5c:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8b60:	aa1c      	add	r2, sp, #112	; 0x70
    8b62:	a916      	add	r1, sp, #88	; 0x58
    8b64:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8b66:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8b68:	f00d ff28 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8b6c:	4602      	mov	r2, r0
    8b6e:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    8b70:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8b74:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8b78:	f04f 0800 	mov.w	r8, #0
    8b7c:	f04f 0900 	mov.w	r9, #0
    8b80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    8b84:	4590      	cmp	r8, r2
    8b86:	eb79 0303 	sbcs.w	r3, r9, r3
    8b8a:	f280 80c0 	bge.w	8d0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    8b8e:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    8b90:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    8b92:	f812 5008 	ldrb.w	r5, [r2, r8]
    8b96:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8b98:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8b9c:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    8b9e:	9a04      	ldr	r2, [sp, #16]
    8ba0:	f812 0008 	ldrb.w	r0, [r2, r8]
    8ba4:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8ba6:	ee18 1a10 	vmov	r1, s16
    8baa:	465a      	mov	r2, fp
    8bac:	40b0      	lsls	r0, r6
    8bae:	f7fe faeb 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    8bb2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8bb4:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8bb6:	4622      	mov	r2, r4
    8bb8:	4639      	mov	r1, r7
    8bba:	4628      	mov	r0, r5
    8bbc:	f7fe fae4 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
    8bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8bc2:	4283      	cmp	r3, r0
    8bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8bc6:	bfb4      	ite	lt
    8bc8:	2000      	movlt	r0, #0
    8bca:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    8bcc:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
    8bd0:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8bd4:	f149 0900 	adc.w	r9, r9, #0
    8bd8:	e7d2      	b.n	8b80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x358>
    8bda:	6933      	ldr	r3, [r6, #16]
    8bdc:	68f0      	ldr	r0, [r6, #12]
    8bde:	6925      	ldr	r5, [r4, #16]
    8be0:	f1c3 0800 	rsb	r8, r3, #0
    8be4:	f7f8 f840 	bl	c68 <__aeabi_f2d>
    8be8:	ec41 0b10 	vmov	d0, r0, r1
    8bec:	a90d      	add	r1, sp, #52	; 0x34
    8bee:	a80c      	add	r0, sp, #48	; 0x30
    8bf0:	f008 fdee 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8bf4:	68e0      	ldr	r0, [r4, #12]
    8bf6:	f7f8 f837 	bl	c68 <__aeabi_f2d>
    8bfa:	ec41 0b10 	vmov	d0, r0, r1
    8bfe:	a90f      	add	r1, sp, #60	; 0x3c
    8c00:	a80e      	add	r0, sp, #56	; 0x38
    8c02:	f008 fde5 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8c06:	2308      	movs	r3, #8
    8c08:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c0e:	9324      	str	r3, [sp, #144]	; 0x90
    8c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c12:	426d      	negs	r5, r5
    8c14:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c1a:	9327      	str	r3, [sp, #156]	; 0x9c
    8c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c1e:	9328      	str	r3, [sp, #160]	; 0xa0
    8c20:	ad1c      	add	r5, sp, #112	; 0x70
    8c22:	4631      	mov	r1, r6
    8c24:	a810      	add	r0, sp, #64	; 0x40
    8c26:	b1df      	cbz	r7, 8c60 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    8c28:	f00c fe84 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8c2c:	6872      	ldr	r2, [r6, #4]
    8c2e:	9204      	str	r2, [sp, #16]
    8c30:	4621      	mov	r1, r4
    8c32:	a816      	add	r0, sp, #88	; 0x58
    8c34:	f00c fe7e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8c38:	4651      	mov	r1, sl
    8c3a:	4628      	mov	r0, r5
    8c3c:	6864      	ldr	r4, [r4, #4]
    8c3e:	f00c fe79 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8c42:	9a04      	ldr	r2, [sp, #16]
    8c44:	f1ba 0f00 	cmp.w	sl, #0
    8c48:	d001      	beq.n	8c4e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x426>
    8c4a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8c4e:	9400      	str	r4, [sp, #0]
    8c50:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8c54:	ab16      	add	r3, sp, #88	; 0x58
    8c56:	a910      	add	r1, sp, #64	; 0x40
    8c58:	a822      	add	r0, sp, #136	; 0x88
    8c5a:	f00f fa22 	bl	180a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8c5e:	e62f      	b.n	88c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8c60:	f00c fe68 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8c64:	6873      	ldr	r3, [r6, #4]
    8c66:	9304      	str	r3, [sp, #16]
    8c68:	4621      	mov	r1, r4
    8c6a:	a816      	add	r0, sp, #88	; 0x58
    8c6c:	f00c fe62 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8c70:	6863      	ldr	r3, [r4, #4]
    8c72:	9305      	str	r3, [sp, #20]
    8c74:	4651      	mov	r1, sl
    8c76:	4628      	mov	r0, r5
    8c78:	f00c fe5c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8c7c:	f1ba 0f00 	cmp.w	sl, #0
    8c80:	d001      	beq.n	8c86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    8c82:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    8c86:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8c8a:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8c8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8c8e:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8c92:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8c96:	aa1c      	add	r2, sp, #112	; 0x70
    8c98:	a916      	add	r1, sp, #88	; 0x58
    8c9a:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8c9c:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8c9e:	f00d fe8d 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8ca2:	4602      	mov	r2, r0
    8ca4:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    8ca6:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8cae:	f04f 0800 	mov.w	r8, #0
    8cb2:	f04f 0900 	mov.w	r9, #0
    8cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    8cba:	4590      	cmp	r8, r2
    8cbc:	eb79 0303 	sbcs.w	r3, r9, r3
    8cc0:	da25      	bge.n	8d0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    8cc2:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    8cc4:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    8cc6:	f912 5008 	ldrsb.w	r5, [r2, r8]
    8cca:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8ccc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8cd0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    8cd2:	9a04      	ldr	r2, [sp, #16]
    8cd4:	f912 0008 	ldrsb.w	r0, [r2, r8]
    8cd8:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8cda:	ee18 1a10 	vmov	r1, s16
    8cde:	465a      	mov	r2, fp
    8ce0:	40b0      	lsls	r0, r6
    8ce2:	f7fe fa51 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    8ce6:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8ce8:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8cea:	4622      	mov	r2, r4
    8cec:	4639      	mov	r1, r7
    8cee:	4628      	mov	r0, r5
    8cf0:	f7fe fa4a 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
    8cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cf6:	4283      	cmp	r3, r0
    8cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cfa:	bfb4      	ite	lt
    8cfc:	2000      	movlt	r0, #0
    8cfe:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    8d00:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
    8d04:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8d08:	f149 0900 	adc.w	r9, r9, #0
    8d0c:	e7d3      	b.n	8cb6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    8d0e:	a81c      	add	r0, sp, #112	; 0x70
    8d10:	e5d7      	b.n	88c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8d12:	696c      	ldr	r4, [r5, #20]
    8d14:	f7f7 fdcd 	bl	8b2 <TfLiteTypeGetName>
    8d18:	f818 3009 	ldrb.w	r3, [r8, r9]
    8d1c:	4902      	ldr	r1, [pc, #8]	; (8d28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    8d1e:	4602      	mov	r2, r0
    8d20:	4628      	mov	r0, r5
    8d22:	47a0      	blx	r4
      return kTfLiteError;
    8d24:	2001      	movs	r0, #1
    8d26:	e6b8      	b.n	8a9a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
    8d28:	0002aea3 	.word	0x0002aea3

00008d2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
    8d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    8d30:	680b      	ldr	r3, [r1, #0]
    8d32:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    8d36:	685e      	ldr	r6, [r3, #4]
    8d38:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8d3a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
    8d3c:	ed2d 8b02 	vpush	{d8}
    8d40:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    8d42:	ea4f 1986 	mov.w	r9, r6, lsl #6
    8d46:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8d4a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    8d4e:	b0ab      	sub	sp, #172	; 0xac
    8d50:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    8d52:	4621      	mov	r1, r4
    8d54:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    8d56:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8d5a:	f015 fb81 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    8d5e:	f080 0001 	eor.w	r0, r0, #1
    8d62:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    8d64:	f818 0009 	ldrb.w	r0, [r8, r9]
    8d68:	1e43      	subs	r3, r0, #1
    8d6a:	2b08      	cmp	r3, #8
    8d6c:	f200 8253 	bhi.w	9216 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    8d70:	e8df f013 	tbh	[pc, r3, lsl #1]
    8d74:	00680009 	.word	0x00680009
    8d78:	00b7011a 	.word	0x00b7011a
    8d7c:	02510251 	.word	0x02510251
    8d80:	02510251 	.word	0x02510251
    8d84:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
    8d86:	ad1c      	add	r5, sp, #112	; 0x70
    8d88:	4631      	mov	r1, r6
    8d8a:	b31f      	cbz	r7, 8dd4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    8d8c:	a810      	add	r0, sp, #64	; 0x40
    8d8e:	f00c fdd1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8d92:	4621      	mov	r1, r4
    8d94:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8d96:	6876      	ldr	r6, [r6, #4]
    8d98:	f00c fdcc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8d9c:	b104      	cbz	r4, 8da0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x74>
    8d9e:	6864      	ldr	r4, [r4, #4]
    8da0:	4651      	mov	r1, sl
    8da2:	4628      	mov	r0, r5
    8da4:	f00c fdc6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8da8:	f1ba 0f00 	cmp.w	sl, #0
    8dac:	d001      	beq.n	8db2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x86>
    8dae:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8db2:	9400      	str	r4, [sp, #0]
    8db4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8db8:	ab16      	add	r3, sp, #88	; 0x58
    8dba:	4632      	mov	r2, r6
    8dbc:	a910      	add	r1, sp, #64	; 0x40
    8dbe:	a822      	add	r0, sp, #136	; 0x88
    8dc0:	f00e f815 	bl	16dee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Less);
    8dc4:	4628      	mov	r0, r5
    8dc6:	f00c fd70 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8dca:	a816      	add	r0, sp, #88	; 0x58
    8dcc:	f00c fd6d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8dd0:	a810      	add	r0, sp, #64	; 0x40
    8dd2:	e0e1      	b.n	8f98 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
    8dd4:	a816      	add	r0, sp, #88	; 0x58
    8dd6:	f00c fdad 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8dda:	4621      	mov	r1, r4
    8ddc:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8dde:	f8d6 8004 	ldr.w	r8, [r6, #4]
    8de2:	f00c fda7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8de6:	b104      	cbz	r4, 8dea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    8de8:	6864      	ldr	r4, [r4, #4]
    8dea:	4651      	mov	r1, sl
    8dec:	a822      	add	r0, sp, #136	; 0x88
    8dee:	f00c fda1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8df2:	f1ba 0f00 	cmp.w	sl, #0
    8df6:	d001      	beq.n	8dfc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    8df8:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8dfc:	aa22      	add	r2, sp, #136	; 0x88
    8dfe:	4629      	mov	r1, r5
    8e00:	a816      	add	r0, sp, #88	; 0x58
    8e02:	f00d fddb 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8e06:	4641      	mov	r1, r8
  const int64_t flatsize =
    8e08:	4606      	mov	r6, r0
    8e0a:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8e0c:	2200      	movs	r2, #0
    8e0e:	2300      	movs	r3, #0
    8e10:	42b2      	cmp	r2, r6
    8e12:	eb73 0007 	sbcs.w	r0, r3, r7
    8e16:	f280 80b8 	bge.w	8f8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8e1a:	ecb1 7a01 	vldmia	r1!, {s14}
    8e1e:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs < rhs;
    8e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8e2a:	eb0a 0002 	add.w	r0, sl, r2
  return lhs < rhs;
    8e2e:	bf4c      	ite	mi
    8e30:	f04f 0c01 	movmi.w	ip, #1
    8e34:	f04f 0c00 	movpl.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8e38:	3201      	adds	r2, #1
  return lhs < rhs;
    8e3a:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    8e3e:	f143 0300 	adc.w	r3, r3, #0
    8e42:	e7e5      	b.n	8e10 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
    8e44:	ad1c      	add	r5, sp, #112	; 0x70
    8e46:	4631      	mov	r1, r6
    8e48:	b1e7      	cbz	r7, 8e84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8e4a:	a810      	add	r0, sp, #64	; 0x40
    8e4c:	f00c fd72 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e50:	4621      	mov	r1, r4
    8e52:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8e54:	6876      	ldr	r6, [r6, #4]
    8e56:	f00c fd6d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e5a:	b104      	cbz	r4, 8e5e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8e5c:	6864      	ldr	r4, [r4, #4]
    8e5e:	4651      	mov	r1, sl
    8e60:	4628      	mov	r0, r5
    8e62:	f00c fd67 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8e66:	f1ba 0f00 	cmp.w	sl, #0
    8e6a:	d001      	beq.n	8e70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8e6c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8e70:	9400      	str	r4, [sp, #0]
    8e72:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8e76:	ab16      	add	r3, sp, #88	; 0x58
    8e78:	4632      	mov	r2, r6
    8e7a:	a910      	add	r1, sp, #64	; 0x40
    8e7c:	a822      	add	r0, sp, #136	; 0x88
    8e7e:	f00e fbda 	bl	17636 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8e82:	e79f      	b.n	8dc4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8e84:	a816      	add	r0, sp, #88	; 0x58
    8e86:	f00c fd55 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e8a:	4621      	mov	r1, r4
    8e8c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8e8e:	6876      	ldr	r6, [r6, #4]
    8e90:	f00c fd50 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e94:	b104      	cbz	r4, 8e98 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    8e96:	6864      	ldr	r4, [r4, #4]
    8e98:	4651      	mov	r1, sl
    8e9a:	a822      	add	r0, sp, #136	; 0x88
    8e9c:	f00c fd4a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8ea0:	f1ba 0f00 	cmp.w	sl, #0
    8ea4:	d001      	beq.n	8eaa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    8ea6:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8eaa:	aa22      	add	r2, sp, #136	; 0x88
    8eac:	4629      	mov	r1, r5
    8eae:	a816      	add	r0, sp, #88	; 0x58
    8eb0:	f00d fd84 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    8eb4:	2200      	movs	r2, #0
  const int64_t flatsize =
    8eb6:	4680      	mov	r8, r0
    8eb8:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8ebc:	2300      	movs	r3, #0
    8ebe:	4542      	cmp	r2, r8
    8ec0:	eb73 0109 	sbcs.w	r1, r3, r9
    8ec4:	da61      	bge.n	8f8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
    8ec6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    8eca:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8ece:	4281      	cmp	r1, r0
    8ed0:	bfac      	ite	ge
    8ed2:	2100      	movge	r1, #0
    8ed4:	2101      	movlt	r1, #1
    8ed6:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    8eda:	3201      	adds	r2, #1
    8edc:	f143 0300 	adc.w	r3, r3, #0
    8ee0:	e7ed      	b.n	8ebe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
    8ee2:	ad1c      	add	r5, sp, #112	; 0x70
    8ee4:	4631      	mov	r1, r6
    8ee6:	b1e7      	cbz	r7, 8f22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    8ee8:	a810      	add	r0, sp, #64	; 0x40
    8eea:	f00c fd23 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8eee:	4621      	mov	r1, r4
    8ef0:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8ef2:	6876      	ldr	r6, [r6, #4]
    8ef4:	f00c fd1e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8ef8:	b104      	cbz	r4, 8efc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    8efa:	6864      	ldr	r4, [r4, #4]
    8efc:	4651      	mov	r1, sl
    8efe:	4628      	mov	r0, r5
    8f00:	f00c fd18 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8f04:	f1ba 0f00 	cmp.w	sl, #0
    8f08:	d001      	beq.n	8f0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8f0a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8f0e:	9400      	str	r4, [sp, #0]
    8f10:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8f14:	ab16      	add	r3, sp, #88	; 0x58
    8f16:	4632      	mov	r2, r6
    8f18:	a910      	add	r1, sp, #64	; 0x40
    8f1a:	a822      	add	r0, sp, #136	; 0x88
    8f1c:	f00e fbe0 	bl	176e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8f20:	e750      	b.n	8dc4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8f22:	a816      	add	r0, sp, #88	; 0x58
    8f24:	f00c fd06 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f28:	4621      	mov	r1, r4
    8f2a:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8f2c:	6876      	ldr	r6, [r6, #4]
    8f2e:	f00c fd01 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f32:	b104      	cbz	r4, 8f36 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    8f34:	6864      	ldr	r4, [r4, #4]
    8f36:	4651      	mov	r1, sl
    8f38:	a822      	add	r0, sp, #136	; 0x88
    8f3a:	f00c fcfb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8f3e:	f1ba 0f00 	cmp.w	sl, #0
    8f42:	d001      	beq.n	8f48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    8f44:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8f48:	aa22      	add	r2, sp, #136	; 0x88
    8f4a:	4629      	mov	r1, r5
    8f4c:	a816      	add	r0, sp, #88	; 0x58
    8f4e:	f00d fd35 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8f52:	3c08      	subs	r4, #8
  const int64_t flatsize =
    8f54:	17c1      	asrs	r1, r0, #31
    8f56:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8f5a:	2200      	movs	r2, #0
    8f5c:	2300      	movs	r3, #0
    8f5e:	4282      	cmp	r2, r0
    8f60:	eb73 0601 	sbcs.w	r6, r3, r1
    8f64:	da11      	bge.n	8f8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
    8f66:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8f6a:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8f6e:	45b0      	cmp	r8, r6
    8f70:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    8f74:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs < rhs;
    8f78:	bfb4      	ite	lt
    8f7a:	2601      	movlt	r6, #1
    8f7c:	2600      	movge	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8f7e:	3201      	adds	r2, #1
  return lhs < rhs;
    8f80:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    8f84:	f143 0300 	adc.w	r3, r3, #0
    8f88:	e7e9      	b.n	8f5e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x232>
    8f8a:	a822      	add	r0, sp, #136	; 0x88
    8f8c:	f00c fc8d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8f90:	4628      	mov	r0, r5
    8f92:	f00c fc8a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    8f96:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Less);
    8f98:	f00c fc87 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8f9c:	2000      	movs	r0, #0
}
    8f9e:	b02b      	add	sp, #172	; 0xac
    8fa0:	ecbd 8b02 	vpop	{d8}
    8fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Less);
    8fa8:	6933      	ldr	r3, [r6, #16]
    8faa:	68f0      	ldr	r0, [r6, #12]
    8fac:	6925      	ldr	r5, [r4, #16]
    8fae:	f1c3 0800 	rsb	r8, r3, #0
    8fb2:	f7f7 fe59 	bl	c68 <__aeabi_f2d>
    8fb6:	ec41 0b10 	vmov	d0, r0, r1
    8fba:	a90d      	add	r1, sp, #52	; 0x34
    8fbc:	a80c      	add	r0, sp, #48	; 0x30
    8fbe:	f008 fc07 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8fc2:	68e0      	ldr	r0, [r4, #12]
    8fc4:	f7f7 fe50 	bl	c68 <__aeabi_f2d>
    8fc8:	ec41 0b10 	vmov	d0, r0, r1
    8fcc:	a90f      	add	r1, sp, #60	; 0x3c
    8fce:	a80e      	add	r0, sp, #56	; 0x38
    8fd0:	f008 fbfe 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8fd4:	2308      	movs	r3, #8
    8fd6:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8fdc:	9324      	str	r3, [sp, #144]	; 0x90
    8fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8fe0:	426d      	negs	r5, r5
    8fe2:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8fe8:	9327      	str	r3, [sp, #156]	; 0x9c
    8fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8fec:	9328      	str	r3, [sp, #160]	; 0xa0
    8fee:	ad1c      	add	r5, sp, #112	; 0x70
    8ff0:	4631      	mov	r1, r6
    8ff2:	a810      	add	r0, sp, #64	; 0x40
    8ff4:	b1df      	cbz	r7, 902e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x302>
    8ff6:	f00c fc9d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8ffa:	6872      	ldr	r2, [r6, #4]
    8ffc:	9204      	str	r2, [sp, #16]
    8ffe:	4621      	mov	r1, r4
    9000:	a816      	add	r0, sp, #88	; 0x58
    9002:	f00c fc97 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9006:	4651      	mov	r1, sl
    9008:	4628      	mov	r0, r5
    900a:	6864      	ldr	r4, [r4, #4]
    900c:	f00c fc92 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9010:	9a04      	ldr	r2, [sp, #16]
    9012:	f1ba 0f00 	cmp.w	sl, #0
    9016:	d001      	beq.n	901c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    9018:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    901c:	9400      	str	r4, [sp, #0]
    901e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9022:	ab16      	add	r3, sp, #88	; 0x58
    9024:	a910      	add	r1, sp, #64	; 0x40
    9026:	a822      	add	r0, sp, #136	; 0x88
    9028:	f00f f8c7 	bl	181ba <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    902c:	e6ca      	b.n	8dc4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    902e:	f00c fc81 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9032:	6873      	ldr	r3, [r6, #4]
    9034:	9304      	str	r3, [sp, #16]
    9036:	4621      	mov	r1, r4
    9038:	a816      	add	r0, sp, #88	; 0x58
    903a:	f00c fc7b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    903e:	6863      	ldr	r3, [r4, #4]
    9040:	9305      	str	r3, [sp, #20]
    9042:	4651      	mov	r1, sl
    9044:	4628      	mov	r0, r5
    9046:	f00c fc75 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    904a:	f1ba 0f00 	cmp.w	sl, #0
    904e:	d001      	beq.n	9054 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x328>
    9050:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    9054:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    9058:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    905a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    905c:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    9060:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9064:	aa1c      	add	r2, sp, #112	; 0x70
    9066:	a916      	add	r1, sp, #88	; 0x58
    9068:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    906a:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    906c:	f00d fca6 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    9070:	4602      	mov	r2, r0
    9072:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    9074:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    9078:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    907c:	f04f 0800 	mov.w	r8, #0
    9080:	f04f 0900 	mov.w	r9, #0
    9084:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    9088:	4590      	cmp	r8, r2
    908a:	eb79 0303 	sbcs.w	r3, r9, r3
    908e:	f280 80c0 	bge.w	9212 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    9092:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    9094:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    9096:	f812 5008 	ldrb.w	r5, [r2, r8]
    909a:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    909c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    90a0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    90a2:	9a04      	ldr	r2, [sp, #16]
    90a4:	f812 0008 	ldrb.w	r0, [r2, r8]
    90a8:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90aa:	ee18 1a10 	vmov	r1, s16
    90ae:	465a      	mov	r2, fp
    90b0:	40b0      	lsls	r0, r6
    90b2:	f7fe f869 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    90b6:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90b8:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90ba:	4622      	mov	r2, r4
    90bc:	4639      	mov	r1, r7
    90be:	4628      	mov	r0, r5
    90c0:	f7fe f862 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
    90c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    90c6:	4283      	cmp	r3, r0
    90c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    90ca:	bfac      	ite	ge
    90cc:	2000      	movge	r0, #0
    90ce:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    90d0:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
    90d4:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    90d8:	f149 0900 	adc.w	r9, r9, #0
    90dc:	e7d2      	b.n	9084 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x358>
    90de:	6933      	ldr	r3, [r6, #16]
    90e0:	68f0      	ldr	r0, [r6, #12]
    90e2:	6925      	ldr	r5, [r4, #16]
    90e4:	f1c3 0800 	rsb	r8, r3, #0
    90e8:	f7f7 fdbe 	bl	c68 <__aeabi_f2d>
    90ec:	ec41 0b10 	vmov	d0, r0, r1
    90f0:	a90d      	add	r1, sp, #52	; 0x34
    90f2:	a80c      	add	r0, sp, #48	; 0x30
    90f4:	f008 fb6c 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    90f8:	68e0      	ldr	r0, [r4, #12]
    90fa:	f7f7 fdb5 	bl	c68 <__aeabi_f2d>
    90fe:	ec41 0b10 	vmov	d0, r0, r1
    9102:	a90f      	add	r1, sp, #60	; 0x3c
    9104:	a80e      	add	r0, sp, #56	; 0x38
    9106:	f008 fb63 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    910a:	2308      	movs	r3, #8
    910c:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    9110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9112:	9324      	str	r3, [sp, #144]	; 0x90
    9114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9116:	426d      	negs	r5, r5
    9118:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    911c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    911e:	9327      	str	r3, [sp, #156]	; 0x9c
    9120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9122:	9328      	str	r3, [sp, #160]	; 0xa0
    9124:	ad1c      	add	r5, sp, #112	; 0x70
    9126:	4631      	mov	r1, r6
    9128:	a810      	add	r0, sp, #64	; 0x40
    912a:	b1df      	cbz	r7, 9164 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x438>
    912c:	f00c fc02 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9130:	6872      	ldr	r2, [r6, #4]
    9132:	9204      	str	r2, [sp, #16]
    9134:	4621      	mov	r1, r4
    9136:	a816      	add	r0, sp, #88	; 0x58
    9138:	f00c fbfc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    913c:	4651      	mov	r1, sl
    913e:	4628      	mov	r0, r5
    9140:	6864      	ldr	r4, [r4, #4]
    9142:	f00c fbf7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9146:	9a04      	ldr	r2, [sp, #16]
    9148:	f1ba 0f00 	cmp.w	sl, #0
    914c:	d001      	beq.n	9152 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x426>
    914e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    9152:	9400      	str	r4, [sp, #0]
    9154:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9158:	ab16      	add	r3, sp, #88	; 0x58
    915a:	a910      	add	r1, sp, #64	; 0x40
    915c:	a822      	add	r0, sp, #136	; 0x88
    915e:	f00f f8b8 	bl	182d2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9162:	e62f      	b.n	8dc4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9164:	f00c fbe6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9168:	6873      	ldr	r3, [r6, #4]
    916a:	9304      	str	r3, [sp, #16]
    916c:	4621      	mov	r1, r4
    916e:	a816      	add	r0, sp, #88	; 0x58
    9170:	f00c fbe0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9174:	6863      	ldr	r3, [r4, #4]
    9176:	9305      	str	r3, [sp, #20]
    9178:	4651      	mov	r1, sl
    917a:	4628      	mov	r0, r5
    917c:	f00c fbda 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9180:	f1ba 0f00 	cmp.w	sl, #0
    9184:	d001      	beq.n	918a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    9186:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    918a:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    918e:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    9190:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9192:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    9196:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    919a:	aa1c      	add	r2, sp, #112	; 0x70
    919c:	a916      	add	r1, sp, #88	; 0x58
    919e:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    91a0:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    91a2:	f00d fc0b 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    91a6:	4602      	mov	r2, r0
    91a8:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    91aa:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    91ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    91b2:	f04f 0800 	mov.w	r8, #0
    91b6:	f04f 0900 	mov.w	r9, #0
    91ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    91be:	4590      	cmp	r8, r2
    91c0:	eb79 0303 	sbcs.w	r3, r9, r3
    91c4:	da25      	bge.n	9212 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    91c6:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    91c8:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    91ca:	f912 5008 	ldrsb.w	r5, [r2, r8]
    91ce:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    91d0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    91d4:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    91d6:	9a04      	ldr	r2, [sp, #16]
    91d8:	f912 0008 	ldrsb.w	r0, [r2, r8]
    91dc:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    91de:	ee18 1a10 	vmov	r1, s16
    91e2:	465a      	mov	r2, fp
    91e4:	40b0      	lsls	r0, r6
    91e6:	f7fd ffcf 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    91ea:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    91ec:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    91ee:	4622      	mov	r2, r4
    91f0:	4639      	mov	r1, r7
    91f2:	4628      	mov	r0, r5
    91f4:	f7fd ffc8 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
    91f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    91fa:	4283      	cmp	r3, r0
    91fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    91fe:	bfac      	ite	ge
    9200:	2000      	movge	r0, #0
    9202:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    9204:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
    9208:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    920c:	f149 0900 	adc.w	r9, r9, #0
    9210:	e7d3      	b.n	91ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    9212:	a81c      	add	r0, sp, #112	; 0x70
    9214:	e5d7      	b.n	8dc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    9216:	696c      	ldr	r4, [r5, #20]
    9218:	f7f7 fb4b 	bl	8b2 <TfLiteTypeGetName>
    921c:	f818 3009 	ldrb.w	r3, [r8, r9]
    9220:	4902      	ldr	r1, [pc, #8]	; (922c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    9222:	4602      	mov	r2, r0
    9224:	4628      	mov	r0, r5
    9226:	47a0      	blx	r4
      return kTfLiteError;
    9228:	2001      	movs	r0, #1
    922a:	e6b8      	b.n	8f9e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x272>
    922c:	0002aea3 	.word	0x0002aea3

00009230 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
    9230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    9234:	680b      	ldr	r3, [r1, #0]
    9236:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    923a:	685e      	ldr	r6, [r3, #4]
    923c:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    923e:	684b      	ldr	r3, [r1, #4]
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
    9240:	ed2d 8b02 	vpush	{d8}
    9244:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    9246:	ea4f 1986 	mov.w	r9, r6, lsl #6
    924a:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    924e:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    9252:	b0ab      	sub	sp, #172	; 0xac
    9254:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    9256:	4621      	mov	r1, r4
    9258:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    925a:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    925e:	f015 f8ff 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    9262:	f080 0001 	eor.w	r0, r0, #1
    9266:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    9268:	f818 0009 	ldrb.w	r0, [r8, r9]
    926c:	1e43      	subs	r3, r0, #1
    926e:	2b08      	cmp	r3, #8
    9270:	f200 8253 	bhi.w	971a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    9274:	e8df f013 	tbh	[pc, r3, lsl #1]
    9278:	00680009 	.word	0x00680009
    927c:	00b7011a 	.word	0x00b7011a
    9280:	02510251 	.word	0x02510251
    9284:	02510251 	.word	0x02510251
    9288:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
    928a:	ad1c      	add	r5, sp, #112	; 0x70
    928c:	4631      	mov	r1, r6
    928e:	b31f      	cbz	r7, 92d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    9290:	a810      	add	r0, sp, #64	; 0x40
    9292:	f00c fb4f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9296:	4621      	mov	r1, r4
    9298:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    929a:	6876      	ldr	r6, [r6, #4]
    929c:	f00c fb4a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92a0:	b104      	cbz	r4, 92a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    92a2:	6864      	ldr	r4, [r4, #4]
    92a4:	4651      	mov	r1, sl
    92a6:	4628      	mov	r0, r5
    92a8:	f00c fb44 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    92ac:	f1ba 0f00 	cmp.w	sl, #0
    92b0:	d001      	beq.n	92b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    92b2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    92b6:	9400      	str	r4, [sp, #0]
    92b8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    92bc:	ab16      	add	r3, sp, #88	; 0x58
    92be:	4632      	mov	r2, r6
    92c0:	a910      	add	r1, sp, #64	; 0x40
    92c2:	a822      	add	r0, sp, #136	; 0x88
    92c4:	f00d fdef 	bl	16ea6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    92c8:	4628      	mov	r0, r5
    92ca:	f00c faee 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    92ce:	a816      	add	r0, sp, #88	; 0x58
    92d0:	f00c faeb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    92d4:	a810      	add	r0, sp, #64	; 0x40
    92d6:	e0e1      	b.n	949c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
    92d8:	a816      	add	r0, sp, #88	; 0x58
    92da:	f00c fb2b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92de:	4621      	mov	r1, r4
    92e0:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    92e2:	f8d6 8004 	ldr.w	r8, [r6, #4]
    92e6:	f00c fb25 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92ea:	b104      	cbz	r4, 92ee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    92ec:	6864      	ldr	r4, [r4, #4]
    92ee:	4651      	mov	r1, sl
    92f0:	a822      	add	r0, sp, #136	; 0x88
    92f2:	f00c fb1f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    92f6:	f1ba 0f00 	cmp.w	sl, #0
    92fa:	d001      	beq.n	9300 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    92fc:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9300:	aa22      	add	r2, sp, #136	; 0x88
    9302:	4629      	mov	r1, r5
    9304:	a816      	add	r0, sp, #88	; 0x58
    9306:	f00d fb59 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    930a:	4641      	mov	r1, r8
  const int64_t flatsize =
    930c:	4606      	mov	r6, r0
    930e:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    9310:	2200      	movs	r2, #0
    9312:	2300      	movs	r3, #0
    9314:	42b2      	cmp	r2, r6
    9316:	eb73 0007 	sbcs.w	r0, r3, r7
    931a:	f280 80b8 	bge.w	948e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    931e:	ecb1 7a01 	vldmia	r1!, {s14}
    9322:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs <= rhs;
    9326:	eeb4 7ae7 	vcmpe.f32	s14, s15
    932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    932e:	eb0a 0002 	add.w	r0, sl, r2
  return lhs <= rhs;
    9332:	bf94      	ite	ls
    9334:	f04f 0c01 	movls.w	ip, #1
    9338:	f04f 0c00 	movhi.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    933c:	3201      	adds	r2, #1
  return lhs <= rhs;
    933e:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    9342:	f143 0300 	adc.w	r3, r3, #0
    9346:	e7e5      	b.n	9314 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
    9348:	ad1c      	add	r5, sp, #112	; 0x70
    934a:	4631      	mov	r1, r6
    934c:	b1e7      	cbz	r7, 9388 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
    934e:	a810      	add	r0, sp, #64	; 0x40
    9350:	f00c faf0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9354:	4621      	mov	r1, r4
    9356:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9358:	6876      	ldr	r6, [r6, #4]
    935a:	f00c faeb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    935e:	b104      	cbz	r4, 9362 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
    9360:	6864      	ldr	r4, [r4, #4]
    9362:	4651      	mov	r1, sl
    9364:	4628      	mov	r0, r5
    9366:	f00c fae5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    936a:	f1ba 0f00 	cmp.w	sl, #0
    936e:	d001      	beq.n	9374 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
    9370:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9374:	9400      	str	r4, [sp, #0]
    9376:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    937a:	ab16      	add	r3, sp, #88	; 0x58
    937c:	4632      	mov	r2, r6
    937e:	a910      	add	r1, sp, #64	; 0x40
    9380:	a822      	add	r0, sp, #136	; 0x88
    9382:	f00e fa0a 	bl	1779a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9386:	e79f      	b.n	92c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9388:	a816      	add	r0, sp, #88	; 0x58
    938a:	f00c fad3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    938e:	4621      	mov	r1, r4
    9390:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9392:	6876      	ldr	r6, [r6, #4]
    9394:	f00c face 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9398:	b104      	cbz	r4, 939c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    939a:	6864      	ldr	r4, [r4, #4]
    939c:	4651      	mov	r1, sl
    939e:	a822      	add	r0, sp, #136	; 0x88
    93a0:	f00c fac8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    93a4:	f1ba 0f00 	cmp.w	sl, #0
    93a8:	d001      	beq.n	93ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    93aa:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    93ae:	aa22      	add	r2, sp, #136	; 0x88
    93b0:	4629      	mov	r1, r5
    93b2:	a816      	add	r0, sp, #88	; 0x58
    93b4:	f00d fb02 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    93b8:	2200      	movs	r2, #0
  const int64_t flatsize =
    93ba:	4680      	mov	r8, r0
    93bc:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    93c0:	2300      	movs	r3, #0
    93c2:	4542      	cmp	r2, r8
    93c4:	eb73 0109 	sbcs.w	r1, r3, r9
    93c8:	da61      	bge.n	948e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
    93ca:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    93ce:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    93d2:	4281      	cmp	r1, r0
    93d4:	bfcc      	ite	gt
    93d6:	2100      	movgt	r1, #0
    93d8:	2101      	movle	r1, #1
    93da:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    93de:	3201      	adds	r2, #1
    93e0:	f143 0300 	adc.w	r3, r3, #0
    93e4:	e7ed      	b.n	93c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
    93e6:	ad1c      	add	r5, sp, #112	; 0x70
    93e8:	4631      	mov	r1, r6
    93ea:	b1e7      	cbz	r7, 9426 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    93ec:	a810      	add	r0, sp, #64	; 0x40
    93ee:	f00c faa1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    93f2:	4621      	mov	r1, r4
    93f4:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    93f6:	6876      	ldr	r6, [r6, #4]
    93f8:	f00c fa9c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    93fc:	b104      	cbz	r4, 9400 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    93fe:	6864      	ldr	r4, [r4, #4]
    9400:	4651      	mov	r1, sl
    9402:	4628      	mov	r0, r5
    9404:	f00c fa96 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9408:	f1ba 0f00 	cmp.w	sl, #0
    940c:	d001      	beq.n	9412 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    940e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9412:	9400      	str	r4, [sp, #0]
    9414:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9418:	ab16      	add	r3, sp, #88	; 0x58
    941a:	4632      	mov	r2, r6
    941c:	a910      	add	r1, sp, #64	; 0x40
    941e:	a822      	add	r0, sp, #136	; 0x88
    9420:	f00e fa10 	bl	17844 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9424:	e750      	b.n	92c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9426:	a816      	add	r0, sp, #88	; 0x58
    9428:	f00c fa84 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    942c:	4621      	mov	r1, r4
    942e:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9430:	6876      	ldr	r6, [r6, #4]
    9432:	f00c fa7f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9436:	b104      	cbz	r4, 943a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    9438:	6864      	ldr	r4, [r4, #4]
    943a:	4651      	mov	r1, sl
    943c:	a822      	add	r0, sp, #136	; 0x88
    943e:	f00c fa79 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9442:	f1ba 0f00 	cmp.w	sl, #0
    9446:	d001      	beq.n	944c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    9448:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    944c:	aa22      	add	r2, sp, #136	; 0x88
    944e:	4629      	mov	r1, r5
    9450:	a816      	add	r0, sp, #88	; 0x58
    9452:	f00d fab3 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    9456:	3c08      	subs	r4, #8
  const int64_t flatsize =
    9458:	17c1      	asrs	r1, r0, #31
    945a:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    945e:	2200      	movs	r2, #0
    9460:	2300      	movs	r3, #0
    9462:	4282      	cmp	r2, r0
    9464:	eb73 0601 	sbcs.w	r6, r3, r1
    9468:	da11      	bge.n	948e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
    946a:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
    946e:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
    9472:	45b0      	cmp	r8, r6
    9474:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    9478:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs <= rhs;
    947c:	bfac      	ite	ge
    947e:	2601      	movge	r6, #1
    9480:	2600      	movlt	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    9482:	3201      	adds	r2, #1
  return lhs <= rhs;
    9484:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    9488:	f143 0300 	adc.w	r3, r3, #0
    948c:	e7e9      	b.n	9462 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
    948e:	a822      	add	r0, sp, #136	; 0x88
    9490:	f00c fa0b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    9494:	4628      	mov	r0, r5
    9496:	f00c fa08 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    949a:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    949c:	f00c fa05 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    94a0:	2000      	movs	r0, #0
}
    94a2:	b02b      	add	sp, #172	; 0xac
    94a4:	ecbd 8b02 	vpop	{d8}
    94a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    94ac:	6933      	ldr	r3, [r6, #16]
    94ae:	68f0      	ldr	r0, [r6, #12]
    94b0:	6925      	ldr	r5, [r4, #16]
    94b2:	f1c3 0800 	rsb	r8, r3, #0
    94b6:	f7f7 fbd7 	bl	c68 <__aeabi_f2d>
    94ba:	ec41 0b10 	vmov	d0, r0, r1
    94be:	a90d      	add	r1, sp, #52	; 0x34
    94c0:	a80c      	add	r0, sp, #48	; 0x30
    94c2:	f008 f985 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    94c6:	68e0      	ldr	r0, [r4, #12]
    94c8:	f7f7 fbce 	bl	c68 <__aeabi_f2d>
    94cc:	ec41 0b10 	vmov	d0, r0, r1
    94d0:	a90f      	add	r1, sp, #60	; 0x3c
    94d2:	a80e      	add	r0, sp, #56	; 0x38
    94d4:	f008 f97c 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    94d8:	2308      	movs	r3, #8
    94da:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    94de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    94e0:	9324      	str	r3, [sp, #144]	; 0x90
    94e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    94e4:	426d      	negs	r5, r5
    94e6:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    94ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    94ec:	9327      	str	r3, [sp, #156]	; 0x9c
    94ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    94f0:	9328      	str	r3, [sp, #160]	; 0xa0
    94f2:	ad1c      	add	r5, sp, #112	; 0x70
    94f4:	4631      	mov	r1, r6
    94f6:	a810      	add	r0, sp, #64	; 0x40
    94f8:	b1df      	cbz	r7, 9532 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x302>
    94fa:	f00c fa1b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    94fe:	6872      	ldr	r2, [r6, #4]
    9500:	9204      	str	r2, [sp, #16]
    9502:	4621      	mov	r1, r4
    9504:	a816      	add	r0, sp, #88	; 0x58
    9506:	f00c fa15 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    950a:	4651      	mov	r1, sl
    950c:	4628      	mov	r0, r5
    950e:	6864      	ldr	r4, [r4, #4]
    9510:	f00c fa10 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9514:	9a04      	ldr	r2, [sp, #16]
    9516:	f1ba 0f00 	cmp.w	sl, #0
    951a:	d001      	beq.n	9520 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    951c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9520:	9400      	str	r4, [sp, #0]
    9522:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9526:	ab16      	add	r3, sp, #88	; 0x58
    9528:	a910      	add	r1, sp, #64	; 0x40
    952a:	a822      	add	r0, sp, #136	; 0x88
    952c:	f00e ff5d 	bl	183ea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9530:	e6ca      	b.n	92c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9532:	f00c f9ff 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9536:	6873      	ldr	r3, [r6, #4]
    9538:	9304      	str	r3, [sp, #16]
    953a:	4621      	mov	r1, r4
    953c:	a816      	add	r0, sp, #88	; 0x58
    953e:	f00c f9f9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9542:	6863      	ldr	r3, [r4, #4]
    9544:	9305      	str	r3, [sp, #20]
    9546:	4651      	mov	r1, sl
    9548:	4628      	mov	r0, r5
    954a:	f00c f9f3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    954e:	f1ba 0f00 	cmp.w	sl, #0
    9552:	d001      	beq.n	9558 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x328>
    9554:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    9558:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    955c:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    955e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9560:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    9564:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9568:	aa1c      	add	r2, sp, #112	; 0x70
    956a:	a916      	add	r1, sp, #88	; 0x58
    956c:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    956e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9570:	f00d fa24 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    9574:	4602      	mov	r2, r0
    9576:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    9578:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    957c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    9580:	f04f 0800 	mov.w	r8, #0
    9584:	f04f 0900 	mov.w	r9, #0
    9588:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    958c:	4590      	cmp	r8, r2
    958e:	eb79 0303 	sbcs.w	r3, r9, r3
    9592:	f280 80c0 	bge.w	9716 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    9596:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    9598:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    959a:	f812 5008 	ldrb.w	r5, [r2, r8]
    959e:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    95a0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    95a4:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    95a6:	9a04      	ldr	r2, [sp, #16]
    95a8:	f812 0008 	ldrb.w	r0, [r2, r8]
    95ac:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95ae:	ee18 1a10 	vmov	r1, s16
    95b2:	465a      	mov	r2, fp
    95b4:	40b0      	lsls	r0, r6
    95b6:	f7fd fde7 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    95ba:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95bc:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95be:	4622      	mov	r2, r4
    95c0:	4639      	mov	r1, r7
    95c2:	4628      	mov	r0, r5
    95c4:	f7fd fde0 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
    95c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95ca:	4283      	cmp	r3, r0
    95cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    95ce:	bfcc      	ite	gt
    95d0:	2000      	movgt	r0, #0
    95d2:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    95d4:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
    95d8:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    95dc:	f149 0900 	adc.w	r9, r9, #0
    95e0:	e7d2      	b.n	9588 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x358>
    95e2:	6933      	ldr	r3, [r6, #16]
    95e4:	68f0      	ldr	r0, [r6, #12]
    95e6:	6925      	ldr	r5, [r4, #16]
    95e8:	f1c3 0800 	rsb	r8, r3, #0
    95ec:	f7f7 fb3c 	bl	c68 <__aeabi_f2d>
    95f0:	ec41 0b10 	vmov	d0, r0, r1
    95f4:	a90d      	add	r1, sp, #52	; 0x34
    95f6:	a80c      	add	r0, sp, #48	; 0x30
    95f8:	f008 f8ea 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    95fc:	68e0      	ldr	r0, [r4, #12]
    95fe:	f7f7 fb33 	bl	c68 <__aeabi_f2d>
    9602:	ec41 0b10 	vmov	d0, r0, r1
    9606:	a90f      	add	r1, sp, #60	; 0x3c
    9608:	a80e      	add	r0, sp, #56	; 0x38
    960a:	f008 f8e1 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    960e:	2308      	movs	r3, #8
    9610:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    9614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9616:	9324      	str	r3, [sp, #144]	; 0x90
    9618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    961a:	426d      	negs	r5, r5
    961c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    9620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9622:	9327      	str	r3, [sp, #156]	; 0x9c
    9624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9626:	9328      	str	r3, [sp, #160]	; 0xa0
    9628:	ad1c      	add	r5, sp, #112	; 0x70
    962a:	4631      	mov	r1, r6
    962c:	a810      	add	r0, sp, #64	; 0x40
    962e:	b1df      	cbz	r7, 9668 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    9630:	f00c f980 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9634:	6872      	ldr	r2, [r6, #4]
    9636:	9204      	str	r2, [sp, #16]
    9638:	4621      	mov	r1, r4
    963a:	a816      	add	r0, sp, #88	; 0x58
    963c:	f00c f97a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9640:	4651      	mov	r1, sl
    9642:	4628      	mov	r0, r5
    9644:	6864      	ldr	r4, [r4, #4]
    9646:	f00c f975 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    964a:	9a04      	ldr	r2, [sp, #16]
    964c:	f1ba 0f00 	cmp.w	sl, #0
    9650:	d001      	beq.n	9656 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x426>
    9652:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9656:	9400      	str	r4, [sp, #0]
    9658:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    965c:	ab16      	add	r3, sp, #88	; 0x58
    965e:	a910      	add	r1, sp, #64	; 0x40
    9660:	a822      	add	r0, sp, #136	; 0x88
    9662:	f00e ff4e 	bl	18502 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9666:	e62f      	b.n	92c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9668:	f00c f964 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    966c:	6873      	ldr	r3, [r6, #4]
    966e:	9304      	str	r3, [sp, #16]
    9670:	4621      	mov	r1, r4
    9672:	a816      	add	r0, sp, #88	; 0x58
    9674:	f00c f95e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9678:	6863      	ldr	r3, [r4, #4]
    967a:	9305      	str	r3, [sp, #20]
    967c:	4651      	mov	r1, sl
    967e:	4628      	mov	r0, r5
    9680:	f00c f958 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9684:	f1ba 0f00 	cmp.w	sl, #0
    9688:	d001      	beq.n	968e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    968a:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    968e:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    9692:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    9694:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9696:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    969a:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    969e:	aa1c      	add	r2, sp, #112	; 0x70
    96a0:	a916      	add	r1, sp, #88	; 0x58
    96a2:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    96a4:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    96a6:	f00d f989 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    96aa:	4602      	mov	r2, r0
    96ac:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    96ae:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    96b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    96b6:	f04f 0800 	mov.w	r8, #0
    96ba:	f04f 0900 	mov.w	r9, #0
    96be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    96c2:	4590      	cmp	r8, r2
    96c4:	eb79 0303 	sbcs.w	r3, r9, r3
    96c8:	da25      	bge.n	9716 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    96ca:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    96cc:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    96ce:	f912 5008 	ldrsb.w	r5, [r2, r8]
    96d2:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    96d4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    96d8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    96da:	9a04      	ldr	r2, [sp, #16]
    96dc:	f912 0008 	ldrsb.w	r0, [r2, r8]
    96e0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    96e2:	ee18 1a10 	vmov	r1, s16
    96e6:	465a      	mov	r2, fp
    96e8:	40b0      	lsls	r0, r6
    96ea:	f7fd fd4d 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    96ee:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    96f0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    96f2:	4622      	mov	r2, r4
    96f4:	4639      	mov	r1, r7
    96f6:	4628      	mov	r0, r5
    96f8:	f7fd fd46 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
    96fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96fe:	4283      	cmp	r3, r0
    9700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9702:	bfcc      	ite	gt
    9704:	2000      	movgt	r0, #0
    9706:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    9708:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
    970c:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    9710:	f149 0900 	adc.w	r9, r9, #0
    9714:	e7d3      	b.n	96be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    9716:	a81c      	add	r0, sp, #112	; 0x70
    9718:	e5d7      	b.n	92ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    971a:	696c      	ldr	r4, [r5, #20]
    971c:	f7f7 f8c9 	bl	8b2 <TfLiteTypeGetName>
    9720:	f818 3009 	ldrb.w	r3, [r8, r9]
    9724:	4902      	ldr	r1, [pc, #8]	; (9730 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    9726:	4602      	mov	r2, r0
    9728:	4628      	mov	r0, r5
    972a:	47a0      	blx	r4
      return kTfLiteError;
    972c:	2001      	movs	r0, #1
    972e:	e6b8      	b.n	94a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
    9730:	0002aea3 	.word	0x0002aea3

00009734 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace concatenation {

constexpr int kMaxInputNum = 10;  // Maximum number of input tensors
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9734:	b5f0      	push	{r4, r5, r6, r7, lr}

  TfLiteType input_type = GetInput(context, node, 0)->type;
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;

  // Check activation and input type
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
    9736:	694b      	ldr	r3, [r1, #20]
    9738:	791b      	ldrb	r3, [r3, #4]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    973a:	b085      	sub	sp, #20
    973c:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
    973e:	b17b      	cbz	r3, 9760 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
    9740:	2200      	movs	r2, #0
    9742:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9746:	4b28      	ldr	r3, [pc, #160]	; (97e8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
    9748:	9301      	str	r3, [sp, #4]
    974a:	4b28      	ldr	r3, [pc, #160]	; (97ec <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
    974c:	9300      	str	r3, [sp, #0]
    974e:	6944      	ldr	r4, [r0, #20]
    9750:	4a27      	ldr	r2, [pc, #156]	; (97f0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    9752:	4928      	ldr	r1, [pc, #160]	; (97f4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
    9754:	232c      	movs	r3, #44	; 0x2c
    9756:	47a0      	blx	r4
  TF_LITE_ENSURE(context,
    9758:	2301      	movs	r3, #1
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    975a:	4618      	mov	r0, r3
    975c:	b005      	add	sp, #20
    975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteType input_type = GetInput(context, node, 0)->type;
    9760:	680a      	ldr	r2, [r1, #0]
    9762:	6886      	ldr	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    9764:	6855      	ldr	r5, [r2, #4]
    9766:	01ad      	lsls	r5, r5, #6
    9768:	5d75      	ldrb	r5, [r6, r5]
  TF_LITE_ENSURE(context,
    976a:	1e6f      	subs	r7, r5, #1
    976c:	2f03      	cmp	r7, #3
    976e:	d909      	bls.n	9784 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
    9770:	2d09      	cmp	r5, #9
    9772:	d007      	beq.n	9784 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
    9774:	4b20      	ldr	r3, [pc, #128]	; (97f8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
    9776:	9300      	str	r3, [sp, #0]
    9778:	6944      	ldr	r4, [r0, #20]
    977a:	4a1d      	ldr	r2, [pc, #116]	; (97f0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    977c:	491f      	ldr	r1, [pc, #124]	; (97fc <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
    977e:	232d      	movs	r3, #45	; 0x2d
    9780:	47a0      	blx	r4
    9782:	e7e9      	b.n	9758 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return &context->tensors[node->outputs->data[index]];
    9784:	6849      	ldr	r1, [r1, #4]
    9786:	6849      	ldr	r1, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    9788:	0189      	lsls	r1, r1, #6
    978a:	5c71      	ldrb	r1, [r6, r1]
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
    978c:	428d      	cmp	r5, r1
    978e:	d00c      	beq.n	97aa <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    9790:	e9cd 1502 	strd	r1, r5, [sp, #8]
    9794:	4b1a      	ldr	r3, [pc, #104]	; (9800 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
    9796:	9301      	str	r3, [sp, #4]
    9798:	4b1a      	ldr	r3, [pc, #104]	; (9804 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
    979a:	9300      	str	r3, [sp, #0]
    979c:	6965      	ldr	r5, [r4, #20]
    979e:	4a14      	ldr	r2, [pc, #80]	; (97f0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    97a0:	4914      	ldr	r1, [pc, #80]	; (97f4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
    97a2:	2333      	movs	r3, #51	; 0x33
    97a4:	4620      	mov	r0, r4
    97a6:	47a8      	blx	r5
    97a8:	e7d6      	b.n	9758 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    97aa:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
    97ac:	2d0a      	cmp	r5, #10
    97ae:	dc10      	bgt.n	97d2 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x9e>
    97b0:	1d11      	adds	r1, r2, #4
  for (int i = 0; i < num_inputs; ++i) {
    97b2:	2000      	movs	r0, #0
    97b4:	42a8      	cmp	r0, r5
    97b6:	dad0      	bge.n	975a <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  return &context->tensors[node->inputs->data[index]];
    97b8:	f851 2b04 	ldr.w	r2, [r1], #4
    int num_dimensions = NumDimensions(input);
    97bc:	eb06 1282 	add.w	r2, r6, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    97c0:	6892      	ldr	r2, [r2, #8]
    97c2:	6812      	ldr	r2, [r2, #0]
    if (num_dimensions > 4) {
    97c4:	2a04      	cmp	r2, #4
    97c6:	dd0d      	ble.n	97e4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_KERNEL_LOG(
    97c8:	6963      	ldr	r3, [r4, #20]
    97ca:	490f      	ldr	r1, [pc, #60]	; (9808 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
    97cc:	4620      	mov	r0, r4
    97ce:	4798      	blx	r3
      return kTfLiteError;
    97d0:	e7c2      	b.n	9758 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
    97d2:	4b0e      	ldr	r3, [pc, #56]	; (980c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
    97d4:	9300      	str	r3, [sp, #0]
    97d6:	6965      	ldr	r5, [r4, #20]
    97d8:	4a05      	ldr	r2, [pc, #20]	; (97f0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    97da:	4908      	ldr	r1, [pc, #32]	; (97fc <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
    97dc:	2337      	movs	r3, #55	; 0x37
    97de:	4620      	mov	r0, r4
    97e0:	47a8      	blx	r5
    97e2:	e7b9      	b.n	9758 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  for (int i = 0; i < num_inputs; ++i) {
    97e4:	3001      	adds	r0, #1
    97e6:	e7e5      	b.n	97b4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    97e8:	0002b04d 	.word	0x0002b04d
    97ec:	0002b05c 	.word	0x0002b05c
    97f0:	0002b01e 	.word	0x0002b01e
    97f4:	0002af4f 	.word	0x0002af4f
    97f8:	0002b06f 	.word	0x0002b06f
    97fc:	0002a6ae 	.word	0x0002a6ae
    9800:	0002b103 	.word	0x0002b103
    9804:	0002b10e 	.word	0x0002b10e
    9808:	0002b135 	.word	0x0002b135
    980c:	0002b11a 	.word	0x0002b11a

00009810 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    9810:	4800      	ldr	r0, [pc, #0]	; (9814 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv+0x4>)
    9812:	4770      	bx	lr
    9814:	200001e8 	.word	0x200001e8

00009818 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9818:	b538      	push	{r3, r4, r5, lr}
  return &context->tensors[node->outputs->data[index]];
    981a:	684b      	ldr	r3, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    981c:	6882      	ldr	r2, [r0, #8]
    981e:	685b      	ldr	r3, [r3, #4]
    9820:	019b      	lsls	r3, r3, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9822:	4604      	mov	r4, r0
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    9824:	5cd0      	ldrb	r0, [r2, r3]
  switch (output_type) {  // Already know in/outtypes are same.
    9826:	1e43      	subs	r3, r0, #1
    9828:	2b08      	cmp	r3, #8
    982a:	d81b      	bhi.n	9864 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    982c:	e8df f003 	tbb	[pc, r3]
    9830:	160e0a05 	.word	0x160e0a05
    9834:	1a1a1a1a 	.word	0x1a1a1a1a
    9838:	12          	.byte	0x12
    9839:	00          	.byte	0x00
      EvalUnquantized<float>(context, node);
    983a:	4620      	mov	r0, r4
    983c:	f00f f91d 	bl	18a7a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
  return kTfLiteOk;
    9840:	2000      	movs	r0, #0
}
    9842:	bd38      	pop	{r3, r4, r5, pc}
      EvalUnquantized<int32_t>(context, node);
    9844:	4620      	mov	r0, r4
    9846:	f00f f9fb 	bl	18c40 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>
    984a:	e7f9      	b.n	9840 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalQuantizedUInt8(context, node);
    984c:	4620      	mov	r0, r4
    984e:	f00f f816 	bl	1887e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>
      break;
    9852:	e7f5      	b.n	9840 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int8_t>(context, node);
    9854:	4620      	mov	r0, r4
    9856:	f00f fad4 	bl	18e02 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
      break;
    985a:	e7f1      	b.n	9840 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int64_t>(context, node);
    985c:	4620      	mov	r0, r4
    985e:	f00f fbb3 	bl	18fc8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
      break;
    9862:	e7ed      	b.n	9840 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      TF_LITE_KERNEL_LOG(
    9864:	6965      	ldr	r5, [r4, #20]
    9866:	f7f7 f824 	bl	8b2 <TfLiteTypeGetName>
    986a:	4903      	ldr	r1, [pc, #12]	; (9878 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x60>)
    986c:	4602      	mov	r2, r0
    986e:	4620      	mov	r0, r4
    9870:	47a8      	blx	r5
      return kTfLiteError;
    9872:	2001      	movs	r0, #1
    9874:	e7e5      	b.n	9842 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
    9876:	bf00      	nop
    9878:	0002b18d 	.word	0x0002b18d

0000987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
    987c:	b570      	push	{r4, r5, r6, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    987e:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    9882:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    9884:	fa00 f004 	lsl.w	r0, r0, r4
  int right_shift = shift > 0 ? 0 : -shift;
    9888:	bfd4      	ite	le
    988a:	4252      	negle	r2, r2
    988c:	2200      	movgt	r2, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    988e:	4288      	cmp	r0, r1
    9890:	d127      	bne.n	98e2 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x66>
    9892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    9896:	425e      	negs	r6, r3
    9898:	415e      	adcs	r6, r3
  std::int64_t ab_64 = a_64 * b_64;
    989a:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    989e:	2c00      	cmp	r4, #0
    98a0:	f175 0300 	sbcs.w	r3, r5, #0
    98a4:	4b1c      	ldr	r3, [pc, #112]	; (9918 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x9c>)
    98a6:	bfa8      	it	ge
    98a8:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    98ac:	b9de      	cbnz	r6, 98e6 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x6a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    98ae:	18e4      	adds	r4, r4, r3
    98b0:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
    98b4:	2c00      	cmp	r4, #0
    98b6:	f175 0300 	sbcs.w	r3, r5, #0
    98ba:	da06      	bge.n	98ca <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x4e>
    98bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    98c0:	18e4      	adds	r4, r4, r3
    98c2:	f04f 0300 	mov.w	r3, #0
    98c6:	eb43 0505 	adc.w	r5, r3, r5
    98ca:	0fe1      	lsrs	r1, r4, #31
    98cc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  assert(exponent >= 0);
    98d0:	2a00      	cmp	r2, #0
    98d2:	da0b      	bge.n	98ec <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x70>
    98d4:	4b11      	ldr	r3, [pc, #68]	; (991c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa0>)
    98d6:	4a12      	ldr	r2, [pc, #72]	; (9920 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
    98d8:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    98dc:	4811      	ldr	r0, [pc, #68]	; (9924 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa8>)
    98de:	f00a fd9b 	bl	14418 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    98e2:	2600      	movs	r6, #0
    98e4:	e7d9      	b.n	989a <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x1e>
    98e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    98ea:	e7f1      	b.n	98d0 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x54>
  assert(exponent <= 31);
    98ec:	2a1f      	cmp	r2, #31
    98ee:	dd04      	ble.n	98fa <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x7e>
    98f0:	4b0d      	ldr	r3, [pc, #52]	; (9928 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xac>)
    98f2:	4a0b      	ldr	r2, [pc, #44]	; (9920 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
    98f4:	f240 1167 	movw	r1, #359	; 0x167
    98f8:	e7f0      	b.n	98dc <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x60>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    98fa:	2301      	movs	r3, #1
    98fc:	4093      	lsls	r3, r2
    98fe:	3b01      	subs	r3, #1
  return a & b;
    9900:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
    9904:	105b      	asrs	r3, r3, #1
  return a + b;
    9906:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
    990a:	fa41 f202 	asr.w	r2, r1, r2
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
    990e:	4298      	cmp	r0, r3
    9910:	bfd4      	ite	le
    9912:	4610      	movle	r0, r2
    9914:	1c50      	addgt	r0, r2, #1
    9916:	bd70      	pop	{r4, r5, r6, pc}
    9918:	c0000001 	.word	0xc0000001
    991c:	0002ade5 	.word	0x0002ade5
    9920:	0002adf3 	.word	0x0002adf3
    9924:	0002ae48 	.word	0x0002ae48
    9928:	0002ae94 	.word	0x0002ae94

0000992c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
    992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9930:	ed2d 8b04 	vpush	{d8-d9}
    9934:	b09b      	sub	sp, #108	; 0x6c
    9936:	461c      	mov	r4, r3
  const int stride_width = params.stride_width;
    9938:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    993c:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_height = params.stride_height;
    993e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    9942:	930b      	str	r3, [sp, #44]	; 0x2c
  const int dilation_width_factor = params.dilation_width_factor;
    9944:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    9948:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_height_factor = params.dilation_height_factor;
    994a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    994e:	930d      	str	r3, [sp, #52]	; 0x34
  const int pad_width = params.padding_values.width;
    9950:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    9954:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
    9956:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    995a:	9310      	str	r3, [sp, #64]	; 0x40
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    995c:	680b      	ldr	r3, [r1, #0]
                 float* im2col_data) {
    995e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const float output_activation_min = params.float_activation_min;
    9960:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    9964:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
                 float* im2col_data) {
    9968:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    996a:	2b04      	cmp	r3, #4
                 float* im2col_data) {
    996c:	4688      	mov	r8, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    996e:	d001      	beq.n	9974 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48>
    9970:	f014 fe2f 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    9974:	6823      	ldr	r3, [r4, #0]
    9976:	2b04      	cmp	r3, #4
    9978:	d1fa      	bne.n	9970 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    997a:	6833      	ldr	r3, [r6, #0]
    997c:	2b04      	cmp	r3, #4
    997e:	d1f7      	bne.n	9970 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    9980:	2300      	movs	r3, #0
    9982:	4619      	mov	r1, r3
    9984:	4632      	mov	r2, r6
    9986:	4640      	mov	r0, r8
    9988:	f00e fe47 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    998c:	2303      	movs	r3, #3
    998e:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    9990:	9011      	str	r0, [sp, #68]	; 0x44
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    9992:	4622      	mov	r2, r4
    9994:	4640      	mov	r0, r8
    9996:	f00e fe40 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    999a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    999c:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    999e:	4632      	mov	r2, r6
    99a0:	2100      	movs	r1, #0
    99a2:	4620      	mov	r0, r4
    99a4:	f00e fe39 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    99a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    99aa:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
    99ac:	b12b      	cbz	r3, 99ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    99ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
    99b0:	f00c f80b 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    99b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99b6:	4298      	cmp	r0, r3
    99b8:	d1da      	bne.n	9970 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  }
  const int input_height = input_shape.Dims(1);
    99ba:	2101      	movs	r1, #1
    99bc:	4640      	mov	r0, r8
    99be:	f00b ff7f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    99c2:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    99c4:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
    99c6:	4640      	mov	r0, r8
    99c8:	f00b ff7a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    99cc:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    99ce:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
    99d0:	4620      	mov	r0, r4
    99d2:	f00b ff75 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    99d6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    99d8:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
    99da:	4620      	mov	r0, r4
    99dc:	f00b ff70 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    99e0:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    99e2:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
    99e4:	4630      	mov	r0, r6
    99e6:	f00b ff6b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    99ea:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    99ec:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
    99ee:	4630      	mov	r0, r6
    99f0:	f00b ff66 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
                  total += (input_value * filter_value);
                }
              }
            }
          }
          float bias_value = 0.0f;
    99f4:	eddf 9a55 	vldr	s19, [pc, #340]	; 9b4c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
  const int output_width = output_shape.Dims(2);
    99f8:	9018      	str	r0, [sp, #96]	; 0x60
  for (int batch = 0; batch < batches; ++batch) {
    99fa:	f04f 0900 	mov.w	r9, #0
    99fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9a00:	4599      	cmp	r9, r3
    9a02:	f280 809e 	bge.w	9b42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x216>
    9a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a08:	425b      	negs	r3, r3
    9a0a:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    9a0c:	2300      	movs	r3, #0
    9a0e:	9304      	str	r3, [sp, #16]
    9a10:	9b04      	ldr	r3, [sp, #16]
    9a12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a14:	4293      	cmp	r3, r2
    9a16:	f280 8091 	bge.w	9b3c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x210>
    9a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9a1c:	425b      	negs	r3, r3
    9a1e:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    9a20:	2300      	movs	r3, #0
    9a22:	9305      	str	r3, [sp, #20]
    9a24:	9b05      	ldr	r3, [sp, #20]
    9a26:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9a28:	4293      	cmp	r3, r2
    9a2a:	da7f      	bge.n	9b2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9a2c:	2500      	movs	r5, #0
    9a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a30:	429d      	cmp	r5, r3
    9a32:	da73      	bge.n	9b1c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9a34:	2300      	movs	r3, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9a36:	f8dd a020 	ldr.w	sl, [sp, #32]
          float total = 0.f;
    9a3a:	ed9f 8a44 	vldr	s16, [pc, #272]	; 9b4c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9a3e:	9306      	str	r3, [sp, #24]
    9a40:	9b06      	ldr	r3, [sp, #24]
    9a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9a44:	4293      	cmp	r3, r2
    9a46:	da42      	bge.n	9ace <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a2>
                const int in_y =
    9a48:	9f07      	ldr	r7, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    9a4a:	f04f 0b00 	mov.w	fp, #0
    9a4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a50:	459b      	cmp	fp, r3
    9a52:	da36      	bge.n	9ac2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    9a54:	2300      	movs	r3, #0
    9a56:	9303      	str	r3, [sp, #12]
    9a58:	9b03      	ldr	r3, [sp, #12]
    9a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9a5c:	4293      	cmp	r3, r2
    9a5e:	da2b      	bge.n	9ab8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18c>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    9a60:	2f00      	cmp	r7, #0
    9a62:	db26      	blt.n	9ab2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a64:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9a66:	42bb      	cmp	r3, r7
    9a68:	dd23      	ble.n	9ab2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a6a:	f1ba 0f00 	cmp.w	sl, #0
    9a6e:	db20      	blt.n	9ab2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9a72:	4553      	cmp	r3, sl
    9a74:	dd1d      	ble.n	9ab2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
                  float input_value = input_data[Offset(
    9a76:	9b03      	ldr	r3, [sp, #12]
    9a78:	9300      	str	r3, [sp, #0]
    9a7a:	4652      	mov	r2, sl
    9a7c:	463b      	mov	r3, r7
    9a7e:	4649      	mov	r1, r9
    9a80:	4640      	mov	r0, r8
    9a82:	f00b ffdf 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
    9a86:	9b03      	ldr	r3, [sp, #12]
    9a88:	9a06      	ldr	r2, [sp, #24]
                  float input_value = input_data[Offset(
    9a8a:	900e      	str	r0, [sp, #56]	; 0x38
                      filter_data[Offset(filter_shape, out_channel, filter_y,
    9a8c:	9300      	str	r3, [sp, #0]
    9a8e:	4629      	mov	r1, r5
    9a90:	465b      	mov	r3, fp
    9a92:	4620      	mov	r0, r4
    9a94:	f00b ffd6 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
    9a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9a9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
    9aa0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
    9aa2:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
    9aa6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
    9aaa:	edd0 7a00 	vldr	s15, [r0]
    9aae:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    9ab2:	9b03      	ldr	r3, [sp, #12]
    9ab4:	3301      	adds	r3, #1
    9ab6:	e7ce      	b.n	9a56 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    9ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9aba:	f10b 0b01 	add.w	fp, fp, #1
    9abe:	441f      	add	r7, r3
    9ac0:	e7c5      	b.n	9a4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9ac2:	9b06      	ldr	r3, [sp, #24]
    9ac4:	3301      	adds	r3, #1
    9ac6:	9306      	str	r3, [sp, #24]
    9ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9aca:	449a      	add	sl, r3
    9acc:	e7b8      	b.n	9a40 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
          if (bias_data) {
    9ace:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    9ad0:	b30b      	cbz	r3, 9b16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ea>
            bias_value = bias_data[out_channel];
    9ad2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9ad6:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    9ada:	9500      	str	r5, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
    9adc:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    9ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9ae4:	4649      	mov	r1, r9
    9ae6:	4630      	mov	r0, r6
    9ae8:	f00b ffac 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    9aec:	eeb4 8ae8 	vcmpe.f32	s16, s17
    9af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9af4:	bfb8      	it	lt
    9af6:	eeb0 8a68 	vmovlt.f32	s16, s17
    9afa:	eeb4 8ac9 	vcmpe.f32	s16, s18
    9afe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9b08:	bf88      	it	hi
    9b0a:	eeb0 8a49 	vmovhi.f32	s16, s18
    9b0e:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9b12:	3501      	adds	r5, #1
    9b14:	e78b      	b.n	9a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
    9b16:	eef0 7a69 	vmov.f32	s15, s19
    9b1a:	e7de      	b.n	9ada <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ae>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    9b1c:	9b05      	ldr	r3, [sp, #20]
    9b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b20:	3301      	adds	r3, #1
    9b22:	9305      	str	r3, [sp, #20]
    9b24:	9b07      	ldr	r3, [sp, #28]
    9b26:	4413      	add	r3, r2
    9b28:	9307      	str	r3, [sp, #28]
    9b2a:	e77b      	b.n	9a24 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    9b2c:	9b04      	ldr	r3, [sp, #16]
    9b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9b30:	3301      	adds	r3, #1
    9b32:	9304      	str	r3, [sp, #16]
    9b34:	9b08      	ldr	r3, [sp, #32]
    9b36:	4413      	add	r3, r2
    9b38:	9308      	str	r3, [sp, #32]
    9b3a:	e769      	b.n	9a10 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
    9b3c:	f109 0901 	add.w	r9, r9, #1
    9b40:	e75d      	b.n	99fe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd2>
                                           output_activation_max);
        }
      }
    }
  }
}
    9b42:	b01b      	add	sp, #108	; 0x6c
    9b44:	ecbd 8b04 	vpop	{d8-d9}
    9b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b4c:	00000000 	.word	0x00000000

00009b50 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
    9b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool has_bias = node->inputs->size == 3;
    9b54:	f8d1 8000 	ldr.w	r8, [r1]
                             const TfLiteType data_type, OpData* data) {
    9b58:	b091      	sub	sp, #68	; 0x44
    9b5a:	461f      	mov	r7, r3
  bool has_bias = node->inputs->size == 3;
    9b5c:	f8d8 3000 	ldr.w	r3, [r8]
    9b60:	930b      	str	r3, [sp, #44]	; 0x2c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    9b62:	3b02      	subs	r3, #2
    9b64:	2b01      	cmp	r3, #1
                             const TfLiteType data_type, OpData* data) {
    9b66:	9c20      	ldr	r4, [sp, #128]	; 0x80
    9b68:	4606      	mov	r6, r0
    9b6a:	4615      	mov	r5, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    9b6c:	d90a      	bls.n	9b84 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
    9b6e:	4b49      	ldr	r3, [pc, #292]	; (9c94 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>)
    9b70:	9300      	str	r3, [sp, #0]
    9b72:	6944      	ldr	r4, [r0, #20]
    9b74:	4a48      	ldr	r2, [pc, #288]	; (9c98 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
    9b76:	4949      	ldr	r1, [pc, #292]	; (9c9c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>)
    9b78:	234f      	movs	r3, #79	; 0x4f
    9b7a:	47a0      	blx	r4
    9b7c:	2001      	movs	r0, #1
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
}
    9b7e:	b011      	add	sp, #68	; 0x44
    9b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    9b84:	684b      	ldr	r3, [r1, #4]
    9b86:	930c      	str	r3, [sp, #48]	; 0x30
    9b88:	681b      	ldr	r3, [r3, #0]
    9b8a:	2b01      	cmp	r3, #1
    9b8c:	d00c      	beq.n	9ba8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x58>
    9b8e:	2401      	movs	r4, #1
    9b90:	e9cd 3402 	strd	r3, r4, [sp, #8]
    9b94:	4b42      	ldr	r3, [pc, #264]	; (9ca0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>)
    9b96:	9301      	str	r3, [sp, #4]
    9b98:	4b42      	ldr	r3, [pc, #264]	; (9ca4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
    9b9a:	9300      	str	r3, [sp, #0]
    9b9c:	6945      	ldr	r5, [r0, #20]
    9b9e:	4a3e      	ldr	r2, [pc, #248]	; (9c98 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
    9ba0:	4941      	ldr	r1, [pc, #260]	; (9ca8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
    9ba2:	2350      	movs	r3, #80	; 0x50
    9ba4:	47a8      	blx	r5
    9ba6:	e7e9      	b.n	9b7c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2c>
      params->stride_height, params->stride_width,
    9ba8:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]
  auto padding = params->padding;
    9bac:	f892 b000 	ldrb.w	fp, [r2]
      params->dilation_height_factor, params->dilation_width_factor, height,
    9bb0:	6953      	ldr	r3, [r2, #20]
    9bb2:	930d      	str	r3, [sp, #52]	; 0x34
    9bb4:	6913      	ldr	r3, [r2, #16]
    9bb6:	930e      	str	r3, [sp, #56]	; 0x38

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    9bb8:	4639      	mov	r1, r7
    9bba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9bbc:	9300      	str	r3, [sp, #0]
    9bbe:	4658      	mov	r0, fp
    9bc0:	464b      	mov	r3, r9
    9bc2:	f00f fc89 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    9bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9bca:	991a      	ldr	r1, [sp, #104]	; 0x68
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    9bcc:	900f      	str	r0, [sp, #60]	; 0x3c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    9bce:	9300      	str	r3, [sp, #0]
    9bd0:	4658      	mov	r0, fp
    9bd2:	4653      	mov	r3, sl
    9bd4:	f00f fc80 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9bd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  int total_padding =
    9bda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9bdc:	990d      	ldr	r1, [sp, #52]	; 0x34
    9bde:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9be2:	3b01      	subs	r3, #1
  int total_padding =
    9be4:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    9be8:	3801      	subs	r0, #1
  int total_padding =
    9bea:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9bf0:	1e5a      	subs	r2, r3, #1
  int total_padding =
    9bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9bf4:	f1c7 0701 	rsb	r7, r7, #1
    9bf8:	fb03 7702 	mla	r7, r3, r2, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
    9bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9bfe:	1e58      	subs	r0, r3, #1
  int total_padding =
    9c00:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    9c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    9c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    9c0c:	ea4f 0369 	mov.w	r3, r9, asr #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    9c10:	6023      	str	r3, [r4, #0]
    9c12:	ea4f 036a 	mov.w	r3, sl, asr #1
    9c16:	6063      	str	r3, [r4, #4]
  if (data_type != kTfLiteFloat32) {
    9c18:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
  *offset = total_padding % 2;
    9c1c:	f009 0701 	and.w	r7, r9, #1
    9c20:	f00a 0001 	and.w	r0, sl, #1
    9c24:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    9c26:	60a7      	str	r7, [r4, #8]
    9c28:	60e0      	str	r0, [r4, #12]
  if (data_type != kTfLiteFloat32) {
    9c2a:	d030      	beq.n	9c8e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13e>
  const bool use_tensor = index < node->inputs->size &&
    9c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9c2e:	68b0      	ldr	r0, [r6, #8]
  return &context->tensors[node->inputs->data[index]];
    9c30:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9c34:	f8d8 2008 	ldr.w	r2, [r8, #8]
  const bool use_tensor = index < node->inputs->size &&
    9c38:	2b03      	cmp	r3, #3
  return &context->tensors[node->inputs->data[index]];
    9c3a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    9c3e:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9c42:	d122      	bne.n	9c8a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    9c44:	f8d8 300c 	ldr.w	r3, [r8, #12]
  const bool use_tensor = index < node->inputs->size &&
    9c48:	1c5f      	adds	r7, r3, #1
    9c4a:	d01e      	beq.n	9c8a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
    return &context->tensors[node->inputs->data[index]];
    9c4c:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    9c50:	6897      	ldr	r7, [r2, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    9c52:	687f      	ldr	r7, [r7, #4]
    9c54:	9708      	str	r7, [sp, #32]
    9c56:	69e7      	ldr	r7, [r4, #28]
    9c58:	9707      	str	r7, [sp, #28]
    9c5a:	69a7      	ldr	r7, [r4, #24]
    9c5c:	9706      	str	r7, [sp, #24]
    9c5e:	f104 0724 	add.w	r7, r4, #36	; 0x24
    9c62:	9705      	str	r7, [sp, #20]
    9c64:	f104 0720 	add.w	r7, r4, #32
    9c68:	9704      	str	r7, [sp, #16]
    9c6a:	f104 0714 	add.w	r7, r4, #20
    9c6e:	3410      	adds	r4, #16
    9c70:	9402      	str	r4, [sp, #8]
    9c72:	350c      	adds	r5, #12
  return &context->tensors[node->outputs->data[index]];
    9c74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9c76:	9703      	str	r7, [sp, #12]
    9c78:	9501      	str	r5, [sp, #4]
    9c7a:	6864      	ldr	r4, [r4, #4]
    9c7c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
    9c80:	9000      	str	r0, [sp, #0]
    9c82:	4630      	mov	r0, r6
    9c84:	f007 fe5c 	bl	11940 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    9c88:	e779      	b.n	9b7e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
  return nullptr;
    9c8a:	2300      	movs	r3, #0
    9c8c:	e7e0      	b.n	9c50 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x100>
  return kTfLiteOk;
    9c8e:	2000      	movs	r0, #0
    9c90:	e775      	b.n	9b7e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
    9c92:	bf00      	nop
    9c94:	0002b1ea 	.word	0x0002b1ea
    9c98:	0002b1c4 	.word	0x0002b1c4
    9c9c:	0002a6ae 	.word	0x0002a6ae
    9ca0:	0002bbe9 	.word	0x0002bbe9
    9ca4:	0002b20e 	.word	0x0002b20e
    9ca8:	0002af4f 	.word	0x0002af4f

00009cac <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    9cb0:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9cb2:	b091      	sub	sp, #68	; 0x44
    9cb4:	4604      	mov	r4, r0
    9cb6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    9cb8:	b90f      	cbnz	r7, 9cbe <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    9cba:	f014 fc8a 	bl	1e5d2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9cbe:	f8d1 8014 	ldr.w	r8, [r1, #20]
    9cc2:	f1b8 0f00 	cmp.w	r8, #0
    9cc6:	d0f8      	beq.n	9cba <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9cc8:	680a      	ldr	r2, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    9cca:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    9cce:	6853      	ldr	r3, [r2, #4]
    9cd0:	6896      	ldr	r6, [r2, #8]
    9cd2:	0199      	lsls	r1, r3, #6
    9cd4:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
    9cd8:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
    9cdc:	689b      	ldr	r3, [r3, #8]
    9cde:	910e      	str	r1, [sp, #56]	; 0x38
  int input_height = input->dims->data[1];
    9ce0:	e9d3 3902 	ldrd	r3, r9, [r3, #8]
    9ce4:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
    9ce6:	68b3      	ldr	r3, [r6, #8]
    9ce8:	68da      	ldr	r2, [r3, #12]
    9cea:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
    9cec:	689a      	ldr	r2, [r3, #8]
    9cee:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
    9cf0:	686a      	ldr	r2, [r5, #4]
    9cf2:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
    9cf4:	eb0a 1282 	add.w	r2, sl, r2, lsl #6
    9cf8:	6892      	ldr	r2, [r2, #8]
    9cfa:	68d1      	ldr	r1, [r2, #12]
    9cfc:	910c      	str	r1, [sp, #48]	; 0x30
  int output_height = output->dims->data[1];

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9cfe:	6859      	ldr	r1, [r3, #4]
  int output_height = output->dims->data[1];
    9d00:	6892      	ldr	r2, [r2, #8]
    9d02:	920d      	str	r2, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9d04:	0089      	lsls	r1, r1, #2
    9d06:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9d08:	910f      	str	r1, [sp, #60]	; 0x3c
    9d0a:	f107 0218 	add.w	r2, r7, #24
    9d0e:	4798      	blx	r3
    9d10:	4683      	mov	fp, r0
    9d12:	b9f8      	cbnz	r0, 9d54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9d16:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9d18:	f107 021c 	add.w	r2, r7, #28
    9d1c:	4620      	mov	r0, r4
    9d1e:	4798      	blx	r3
    9d20:	4683      	mov	fp, r0
    9d22:	b9b8      	cbnz	r0, 9d54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    9d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d26:	f81a 2003 	ldrb.w	r2, [sl, r3]
    9d2a:	2a09      	cmp	r2, #9
    9d2c:	d14b      	bne.n	9dc6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    9d2e:	f896 b030 	ldrb.w	fp, [r6, #48]	; 0x30
    9d32:	f1bb 0f01 	cmp.w	fp, #1
    9d36:	d011      	beq.n	9d5c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    9d38:	4b2d      	ldr	r3, [pc, #180]	; (9df0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    9d3a:	9301      	str	r3, [sp, #4]
    9d3c:	2501      	movs	r5, #1
    9d3e:	4b2d      	ldr	r3, [pc, #180]	; (9df4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    9d40:	9300      	str	r3, [sp, #0]
    9d42:	e9cd b502 	strd	fp, r5, [sp, #8]
    9d46:	6966      	ldr	r6, [r4, #20]
    9d48:	4a2b      	ldr	r2, [pc, #172]	; (9df8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9d4a:	492c      	ldr	r1, [pc, #176]	; (9dfc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    9d4c:	2395      	movs	r3, #149	; 0x95
    9d4e:	4620      	mov	r0, r4
    9d50:	47b0      	blx	r6
    9d52:	46ab      	mov	fp, r5
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
    9d54:	4658      	mov	r0, fp
    9d56:	b011      	add	sp, #68	; 0x44
    9d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* affine_quantization =
    9d5c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    9d5e:	b943      	cbnz	r3, 9d72 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
    9d60:	4b27      	ldr	r3, [pc, #156]	; (9e00 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    9d62:	6965      	ldr	r5, [r4, #20]
    9d64:	9300      	str	r3, [sp, #0]
    9d66:	239a      	movs	r3, #154	; 0x9a
    TF_LITE_ENSURE(context, affine_quantization->scale);
    9d68:	4a23      	ldr	r2, [pc, #140]	; (9df8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9d6a:	4926      	ldr	r1, [pc, #152]	; (9e04 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    9d6c:	4620      	mov	r0, r4
    9d6e:	47a8      	blx	r5
    9d70:	e7f0      	b.n	9d54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    9d72:	6818      	ldr	r0, [r3, #0]
    9d74:	b920      	cbnz	r0, 9d80 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
    9d76:	4b24      	ldr	r3, [pc, #144]	; (9e08 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    9d78:	9300      	str	r3, [sp, #0]
    9d7a:	6965      	ldr	r5, [r4, #20]
    9d7c:	239b      	movs	r3, #155	; 0x9b
    9d7e:	e7f3      	b.n	9d68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    9d80:	6859      	ldr	r1, [r3, #4]
    9d82:	b921      	cbnz	r1, 9d8e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    9d84:	4b21      	ldr	r3, [pc, #132]	; (9e0c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    9d86:	9300      	str	r3, [sp, #0]
    9d88:	6965      	ldr	r5, [r4, #20]
    9d8a:	239c      	movs	r3, #156	; 0x9c
    9d8c:	e7ec      	b.n	9d68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context,
    9d8e:	6803      	ldr	r3, [r0, #0]
    9d90:	2b01      	cmp	r3, #1
    9d92:	d008      	beq.n	9da6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    9d94:	68b0      	ldr	r0, [r6, #8]
    9d96:	6840      	ldr	r0, [r0, #4]
    9d98:	4283      	cmp	r3, r0
    9d9a:	d004      	beq.n	9da6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    9d9c:	4b1c      	ldr	r3, [pc, #112]	; (9e10 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    9d9e:	9300      	str	r3, [sp, #0]
    9da0:	6965      	ldr	r5, [r4, #20]
    9da2:	239e      	movs	r3, #158	; 0x9e
    9da4:	e7e0      	b.n	9d68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    9da6:	6809      	ldr	r1, [r1, #0]
    9da8:	428b      	cmp	r3, r1
    9daa:	d00c      	beq.n	9dc6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    9dac:	e9cd 3102 	strd	r3, r1, [sp, #8]
    9db0:	4b18      	ldr	r3, [pc, #96]	; (9e14 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    9db2:	9301      	str	r3, [sp, #4]
    9db4:	4b18      	ldr	r3, [pc, #96]	; (9e18 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    9db6:	9300      	str	r3, [sp, #0]
    9db8:	6965      	ldr	r5, [r4, #20]
    9dba:	4a0f      	ldr	r2, [pc, #60]	; (9df8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9dbc:	490f      	ldr	r1, [pc, #60]	; (9dfc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    9dbe:	23a2      	movs	r3, #162	; 0xa2
    9dc0:	4620      	mov	r0, r4
    9dc2:	47a8      	blx	r5
    9dc4:	e7c6      	b.n	9d54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  return CalculateOpData(context, node, params, input_width, input_height,
    9dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9dc8:	9304      	str	r3, [sp, #16]
    9dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9dcc:	9303      	str	r3, [sp, #12]
    9dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dd0:	9302      	str	r3, [sp, #8]
    9dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9dd4:	9301      	str	r3, [sp, #4]
    9dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9dd8:	9300      	str	r3, [sp, #0]
    9dda:	e9cd 2705 	strd	r2, r7, [sp, #20]
    9dde:	464b      	mov	r3, r9
    9de0:	4642      	mov	r2, r8
    9de2:	4629      	mov	r1, r5
    9de4:	4620      	mov	r0, r4
    9de6:	f7ff feb3 	bl	9b50 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
    9dea:	4683      	mov	fp, r0
                         output_height, input->type, data);
    9dec:	e7b2      	b.n	9d54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    9dee:	bf00      	nop
    9df0:	0002b222 	.word	0x0002b222
    9df4:	0002b23c 	.word	0x0002b23c
    9df8:	0002b1c4 	.word	0x0002b1c4
    9dfc:	0002af4f 	.word	0x0002af4f
    9e00:	0002b256 	.word	0x0002b256
    9e04:	0002a6ae 	.word	0x0002a6ae
    9e08:	0002b26a 	.word	0x0002b26a
    9e0c:	0002b285 	.word	0x0002b285
    9e10:	0002b2a5 	.word	0x0002b2a5
    9e14:	0002b31e 	.word	0x0002b31e
    9e18:	0002b344 	.word	0x0002b344

00009e1c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    9e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
    9e20:	7b11      	ldrb	r1, [r2, #12]
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    9e22:	b0b5      	sub	sp, #212	; 0xd4
  if (activation == kTfLiteActRelu) {
    9e24:	2901      	cmp	r1, #1
    9e26:	e9dd 453e 	ldrd	r4, r5, [sp, #248]	; 0xf8
    9e2a:	e9dd 6840 	ldrd	r6, r8, [sp, #256]	; 0x100
    9e2e:	9f43      	ldr	r7, [sp, #268]	; 0x10c
    9e30:	d074      	beq.n	9f1c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x100>
  } else if (activation == kTfLiteActRelu6) {
    9e32:	2903      	cmp	r1, #3
    9e34:	d077      	beq.n	9f26 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10a>
    *activation_max = std::numeric_limits<T>::max();
    9e36:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 9f2c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
    9e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 9f30 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
    9e3e:	2902      	cmp	r1, #2
    9e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9e44:	bf18      	it	ne
    9e46:	eef0 7a47 	vmovne.f32	s15, s14
    9e4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    9e4e:	bf18      	it	ne
    9e50:	eeb0 7a66 	vmovne.f32	s14, s13
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
    9e54:	7811      	ldrb	r1, [r2, #0]
  switch (padding) {
    9e56:	2901      	cmp	r1, #1
    9e58:	d002      	beq.n	9e60 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x44>
      return PaddingType::kNone;
    9e5a:	2902      	cmp	r1, #2
    9e5c:	bf18      	it	ne
    9e5e:	2100      	movne	r1, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
    9e60:	f88d 1098 	strb.w	r1, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
    9e64:	6819      	ldr	r1, [r3, #0]
  op_params.padding_values.height = data.padding.height;
    9e66:	685b      	ldr	r3, [r3, #4]
    9e68:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
    9e6c:	6853      	ldr	r3, [r2, #4]
    9e6e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
    9e72:	6893      	ldr	r3, [r2, #8]
    9e74:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
    9e78:	6913      	ldr	r3, [r2, #16]
  op_params.padding_values.width = data.padding.width;
    9e7a:	f8ad 109a 	strh.w	r1, [sp, #154]	; 0x9a
  op_params.dilation_width_factor = params->dilation_width_factor;
    9e7e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
    9e82:	4621      	mov	r1, r4
  op_params.dilation_height_factor = params->dilation_height_factor;
    9e84:	6953      	ldr	r3, [r2, #20]
    9e86:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  reference_ops::Conv(op_params, GetTensorShape(input),
    9e8a:	a808      	add	r0, sp, #32
  op_params.float_activation_min = output_activation_min;
    9e8c:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
  op_params.float_activation_max = output_activation_max;
    9e90:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
  reference_ops::Conv(op_params, GetTensorShape(input),
    9e94:	f00b fd4e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9e98:	b104      	cbz	r4, 9e9c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x80>
    9e9a:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<float>(input), GetTensorShape(filter),
    9e9c:	4629      	mov	r1, r5
    9e9e:	a80e      	add	r0, sp, #56	; 0x38
    9ea0:	f00b fd48 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9ea4:	b105      	cbz	r5, 9ea8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x8c>
    9ea6:	686d      	ldr	r5, [r5, #4]
                      GetTensorData<float>(filter), GetTensorShape(bias),
    9ea8:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    9eac:	4631      	mov	r1, r6
    9eae:	4648      	mov	r0, r9
    9eb0:	f00b fd40 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9eb4:	b106      	cbz	r6, 9eb8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x9c>
    9eb6:	6876      	ldr	r6, [r6, #4]
                      GetTensorData<float>(bias), GetTensorShape(output),
    9eb8:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
    9ebc:	4639      	mov	r1, r7
    9ebe:	4650      	mov	r0, sl
    9ec0:	f00b fd38 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9ec4:	b107      	cbz	r7, 9ec8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xac>
    9ec6:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<float>(output), GetTensorShape(im2col),
    9ec8:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
    9ecc:	4641      	mov	r1, r8
    9ece:	4658      	mov	r0, fp
    9ed0:	f00b fd30 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9ed4:	f1b8 0f00 	cmp.w	r8, #0
    9ed8:	d001      	beq.n	9ede <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xc2>
    9eda:	f8d8 8004 	ldr.w	r8, [r8, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
    9ede:	9500      	str	r5, [sp, #0]
    9ee0:	ab0e      	add	r3, sp, #56	; 0x38
    9ee2:	4622      	mov	r2, r4
    9ee4:	a908      	add	r1, sp, #32
    9ee6:	a826      	add	r0, sp, #152	; 0x98
    9ee8:	e9cd b805 	strd	fp, r8, [sp, #20]
    9eec:	e9cd a703 	strd	sl, r7, [sp, #12]
    9ef0:	e9cd 9601 	strd	r9, r6, [sp, #4]
    9ef4:	f7ff fd1a 	bl	992c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
    9ef8:	4658      	mov	r0, fp
    9efa:	f00b fcd6 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
    9efe:	4650      	mov	r0, sl
    9f00:	f00b fcd3 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
    9f04:	4648      	mov	r0, r9
    9f06:	f00b fcd0 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
    9f0a:	a80e      	add	r0, sp, #56	; 0x38
    9f0c:	f00b fccd 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
    9f10:	a808      	add	r0, sp, #32
    9f12:	f00b fcca 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
    9f16:	b035      	add	sp, #212	; 0xd4
    9f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
    9f1c:	eddf 7a03 	vldr	s15, [pc, #12]	; 9f2c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
    *activation_min = 0;
    9f20:	ed9f 7a04 	vldr	s14, [pc, #16]	; 9f34 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x118>
    9f24:	e796      	b.n	9e54 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38>
    *activation_max = 6;
    9f26:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    9f2a:	e7f9      	b.n	9f20 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x104>
    9f2c:	7f7fffff 	.word	0x7f7fffff
    9f30:	ff7fffff 	.word	0xff7fffff
    9f34:	00000000 	.word	0x00000000

00009f38 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
    9f38:	684b      	ldr	r3, [r1, #4]

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    9f3a:	694a      	ldr	r2, [r1, #20]
    9f3c:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    9f42:	6884      	ldr	r4, [r0, #8]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9f44:	680e      	ldr	r6, [r1, #0]
    9f46:	eb04 1c83 	add.w	ip, r4, r3, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9f4a:	6833      	ldr	r3, [r6, #0]
  return &context->tensors[node->inputs->data[index]];
    9f4c:	6877      	ldr	r7, [r6, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9f4e:	4605      	mov	r5, r0
    9f50:	68b0      	ldr	r0, [r6, #8]
  const bool use_tensor = index < node->inputs->size &&
    9f52:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    9f54:	ea4f 1887 	mov.w	r8, r7, lsl #6
    9f58:	b086      	sub	sp, #24
    9f5a:	eb04 1787 	add.w	r7, r4, r7, lsl #6
    9f5e:	eb04 1080 	add.w	r0, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9f62:	dd08      	ble.n	9f76 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    9f64:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
    9f66:	1c73      	adds	r3, r6, #1
    9f68:	d005      	beq.n	9f76 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    return &context->tensors[node->inputs->data[index]];
    9f6a:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    9f6e:	690b      	ldr	r3, [r1, #16]
    9f70:	b91b      	cbnz	r3, 9f7a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
    9f72:	f014 fb2e 	bl	1e5d2 <abort>
  return nullptr;
    9f76:	2600      	movs	r6, #0
    9f78:	e7f9      	b.n	9f6e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x36>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
    9f7a:	f814 e008 	ldrb.w	lr, [r4, r8]
    9f7e:	f1be 0f03 	cmp.w	lr, #3
    9f82:	d01e      	beq.n	9fc2 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    9f84:	f1be 0f09 	cmp.w	lr, #9
    9f88:	d011      	beq.n	9fae <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x76>
    9f8a:	f1be 0f01 	cmp.w	lr, #1
    9f8e:	d124      	bne.n	9fda <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
    9f90:	2400      	movs	r4, #0
    9f92:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9f96:	e9cd 4403 	strd	r4, r4, [sp, #12]
    9f9a:	f8cd c014 	str.w	ip, [sp, #20]
    9f9e:	9700      	str	r7, [sp, #0]
    9fa0:	4628      	mov	r0, r5
    9fa2:	f7ff ff3b 	bl	9e1c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    9fa6:	4620      	mov	r0, r4
    9fa8:	b006      	add	sp, #24
    9faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
    9fae:	2400      	movs	r4, #0
    9fb0:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9fb4:	e9cd c403 	strd	ip, r4, [sp, #12]
    9fb8:	9700      	str	r7, [sp, #0]
    9fba:	4628      	mov	r0, r5
    9fbc:	f00f fb19 	bl	195f2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
      break;
    9fc0:	e7f1      	b.n	9fa6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
    9fc2:	2400      	movs	r4, #0
    9fc4:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9fc8:	e9cd 4403 	strd	r4, r4, [sp, #12]
    9fcc:	f8cd c014 	str.w	ip, [sp, #20]
    9fd0:	9700      	str	r7, [sp, #0]
    9fd2:	4628      	mov	r0, r5
    9fd4:	f00f fa92 	bl	194fc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      break;
    9fd8:	e7e5      	b.n	9fa6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    9fda:	4670      	mov	r0, lr
    9fdc:	696e      	ldr	r6, [r5, #20]
    9fde:	f7f6 fc68 	bl	8b2 <TfLiteTypeGetName>
    9fe2:	f814 3008 	ldrb.w	r3, [r4, r8]
    9fe6:	4903      	ldr	r1, [pc, #12]	; (9ff4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    9fe8:	4602      	mov	r2, r0
    9fea:	4628      	mov	r0, r5
    9fec:	47b0      	blx	r6
      return kTfLiteError;
    9fee:	2401      	movs	r4, #1
    9ff0:	e7d9      	b.n	9fa6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    9ff2:	bf00      	nop
    9ff4:	0002aea3 	.word	0x0002aea3

00009ff8 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    9ff8:	4800      	ldr	r0, [pc, #0]	; (9ffc <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x4>)
    9ffa:	4770      	bx	lr
    9ffc:	20000208 	.word	0x20000208

0000a000 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
    a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a004:	ed2d 8b04 	vpush	{d8-d9}
    a008:	b09b      	sub	sp, #108	; 0x6c
    a00a:	469a      	mov	sl, r3
  const int stride_width = params.stride_width;
    a00c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    a010:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
    a012:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    a016:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
    a018:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    a01c:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
    a01e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    a022:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
    a024:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    a028:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
    a02a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    a02e:	9311      	str	r3, [sp, #68]	; 0x44
  const int depth_multiplier = params.depth_multiplier;
    a030:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    a034:	9307      	str	r3, [sp, #28]
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a036:	680b      	ldr	r3, [r1, #0]
    float* output_data) {
    a038:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const float output_activation_min = params.float_activation_min;
    a03a:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    a03e:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
    float* output_data) {
    a042:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a044:	2b04      	cmp	r3, #4
    float* output_data) {
    a046:	460c      	mov	r4, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a048:	d001      	beq.n	a04e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
    a04a:	f014 fac2 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a04e:	f8da 3000 	ldr.w	r3, [sl]
    a052:	2b04      	cmp	r3, #4
    a054:	d1f9      	bne.n	a04a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a056:	683b      	ldr	r3, [r7, #0]
    a058:	2b04      	cmp	r3, #4
    a05a:	d1f6      	bne.n	a04a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    a05c:	2300      	movs	r3, #0
    a05e:	4619      	mov	r1, r3
    a060:	463a      	mov	r2, r7
    a062:	4620      	mov	r0, r4
    a064:	f00e fad9 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a068:	2303      	movs	r3, #3
    a06a:	4619      	mov	r1, r3
    a06c:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    a06e:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a070:	4650      	mov	r0, sl
    a072:	f00e fad2 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    a076:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a078:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
    a07a:	4620      	mov	r0, r4
    a07c:	f00b fc20 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    a080:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    a082:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
    a084:	4620      	mov	r0, r4
    a086:	f00b fc1b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
    a08a:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
    a08c:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
    a08e:	4620      	mov	r0, r4
    a090:	f00b fc16 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    a094:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
    a096:	900a      	str	r0, [sp, #40]	; 0x28
  const int filter_height = filter_shape.Dims(1);
    a098:	4650      	mov	r0, sl
    a09a:	f00b fc11 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    a09e:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    a0a0:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
    a0a2:	4650      	mov	r0, sl
    a0a4:	f00b fc0c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    a0a8:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    a0aa:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
    a0ac:	4638      	mov	r0, r7
    a0ae:	f00b fc07 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    a0b2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    a0b4:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
    a0b6:	4638      	mov	r0, r7
    a0b8:	f00b fc02 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0be:	9a07      	ldr	r2, [sp, #28]
  const int output_width = output_shape.Dims(2);
    a0c0:	9018      	str	r0, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    a0c2:	fb03 f602 	mul.w	r6, r3, r2
    a0c6:	42ae      	cmp	r6, r5
    a0c8:	d1bf      	bne.n	a04a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a0ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
    a0cc:	f00b fc7d 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    a0d0:	42b0      	cmp	r0, r6
    a0d2:	d1ba      	bne.n	a04a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
    a0d4:	eddf 9a59 	vldr	s19, [pc, #356]	; a23c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
  for (int b = 0; b < batches; ++b) {
    a0d8:	f04f 0900 	mov.w	r9, #0
    a0dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0de:	4599      	cmp	r9, r3
    a0e0:	f280 80a6 	bge.w	a230 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    a0e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a0e6:	425b      	negs	r3, r3
    a0e8:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a0ea:	2300      	movs	r3, #0
    a0ec:	9302      	str	r3, [sp, #8]
    a0ee:	9b02      	ldr	r3, [sp, #8]
    a0f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0f2:	4293      	cmp	r3, r2
    a0f4:	f280 8099 	bge.w	a22a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
    a0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a0fa:	425b      	negs	r3, r3
    a0fc:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a0fe:	2300      	movs	r3, #0
    a100:	9303      	str	r3, [sp, #12]
    a102:	9b03      	ldr	r3, [sp, #12]
    a104:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a106:	4293      	cmp	r3, r2
    a108:	f280 8087 	bge.w	a21a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    a10c:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
    a10e:	9604      	str	r6, [sp, #16]
    a110:	9b04      	ldr	r3, [sp, #16]
    a112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a114:	4293      	cmp	r3, r2
    a116:	da78      	bge.n	a20a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
    a118:	4635      	mov	r5, r6
          for (int m = 0; m < depth_multiplier; m++) {
    a11a:	9a07      	ldr	r2, [sp, #28]
    a11c:	1bab      	subs	r3, r5, r6
    a11e:	429a      	cmp	r2, r3
    a120:	dd6d      	ble.n	a1fe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a122:	2300      	movs	r3, #0
            const int oc = m + ic * depth_multiplier;
    a124:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
            float total = 0.f;
    a128:	ed9f 8a44 	vldr	s16, [pc, #272]	; a23c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a12c:	9305      	str	r3, [sp, #20]
    a12e:	9b05      	ldr	r3, [sp, #20]
    a130:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a132:	4293      	cmp	r3, r2
    a134:	da3c      	bge.n	a1b0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a136:	2300      	movs	r3, #0
                const int in_y =
    a138:	f8dd 8020 	ldr.w	r8, [sp, #32]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a13c:	9306      	str	r3, [sp, #24]
    a13e:	9b06      	ldr	r3, [sp, #24]
    a140:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a142:	4293      	cmp	r3, r2
    a144:	da2e      	bge.n	a1a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a4>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    a146:	f1b8 0f00 	cmp.w	r8, #0
    a14a:	db25      	blt.n	a198 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a14c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a14e:	4543      	cmp	r3, r8
    a150:	dd22      	ble.n	a198 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a152:	f1bb 0f00 	cmp.w	fp, #0
    a156:	db1f      	blt.n	a198 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a15a:	455b      	cmp	r3, fp
    a15c:	dd1c      	ble.n	a198 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a15e:	9b04      	ldr	r3, [sp, #16]
    a160:	9300      	str	r3, [sp, #0]
    a162:	465a      	mov	r2, fp
    a164:	4643      	mov	r3, r8
    a166:	4649      	mov	r1, r9
    a168:	4620      	mov	r0, r4
    a16a:	f00b fc6b 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
    a16e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a172:	900f      	str	r0, [sp, #60]	; 0x3c
                  float filter_value = filter_data[Offset(
    a174:	9500      	str	r5, [sp, #0]
    a176:	2100      	movs	r1, #0
    a178:	4650      	mov	r0, sl
    a17a:	f00b fc63 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a17e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a180:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a182:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
    a186:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
    a188:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
    a18c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
    a190:	edd0 7a00 	vldr	s15, [r0]
    a194:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a198:	9b06      	ldr	r3, [sp, #24]
    a19a:	3301      	adds	r3, #1
    a19c:	9306      	str	r3, [sp, #24]
    a19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a1a0:	4498      	add	r8, r3
    a1a2:	e7cc      	b.n	a13e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a1a4:	9b05      	ldr	r3, [sp, #20]
    a1a6:	3301      	adds	r3, #1
    a1a8:	9305      	str	r3, [sp, #20]
    a1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1ac:	449b      	add	fp, r3
    a1ae:	e7be      	b.n	a12e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12e>
            if (bias_data) {
    a1b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    a1b2:	b30b      	cbz	r3, a1f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
              bias_value = bias_data[oc];
    a1b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a1b8:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    a1bc:	9500      	str	r5, [sp, #0]
                ActivationFunctionWithMinMax(total + bias_value,
    a1be:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    a1c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a1c6:	4649      	mov	r1, r9
    a1c8:	4638      	mov	r0, r7
    a1ca:	f00b fc3b 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    a1ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
    a1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1d6:	bfb8      	it	lt
    a1d8:	eeb0 8a68 	vmovlt.f32	s16, s17
    a1dc:	eeb4 8ac9 	vcmpe.f32	s16, s18
    a1e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1ea:	bf88      	it	hi
    a1ec:	eeb0 8a49 	vmovhi.f32	s16, s18
    a1f0:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
    a1f4:	3501      	adds	r5, #1
    a1f6:	e790      	b.n	a11a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
            float bias_value = 0.0f;
    a1f8:	eef0 7a69 	vmov.f32	s15, s19
    a1fc:	e7de      	b.n	a1bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
        for (int ic = 0; ic < input_depth; ++ic) {
    a1fe:	9b04      	ldr	r3, [sp, #16]
    a200:	3301      	adds	r3, #1
    a202:	9304      	str	r3, [sp, #16]
    a204:	9b07      	ldr	r3, [sp, #28]
    a206:	441e      	add	r6, r3
    a208:	e782      	b.n	a110 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a20a:	9b03      	ldr	r3, [sp, #12]
    a20c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a20e:	3301      	adds	r3, #1
    a210:	9303      	str	r3, [sp, #12]
    a212:	9b08      	ldr	r3, [sp, #32]
    a214:	4413      	add	r3, r2
    a216:	9308      	str	r3, [sp, #32]
    a218:	e773      	b.n	a102 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a21a:	9b02      	ldr	r3, [sp, #8]
    a21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a21e:	3301      	adds	r3, #1
    a220:	9302      	str	r3, [sp, #8]
    a222:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a224:	4413      	add	r3, r2
    a226:	9309      	str	r3, [sp, #36]	; 0x24
    a228:	e761      	b.n	a0ee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xee>
  for (int b = 0; b < batches; ++b) {
    a22a:	f109 0901 	add.w	r9, r9, #1
    a22e:	e755      	b.n	a0dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xdc>
          }
        }
      }
    }
  }
}
    a230:	b01b      	add	sp, #108	; 0x6c
    a232:	ecbd 8b04 	vpop	{d8-d9}
    a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a23a:	bf00      	nop
    a23c:	00000000 	.word	0x00000000

0000a240 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a244:	690d      	ldr	r5, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a246:	b093      	sub	sp, #76	; 0x4c
    a248:	4604      	mov	r4, r0
    a24a:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    a24c:	b90d      	cbnz	r5, a252 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    a24e:	f014 f9c0 	bl	1e5d2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a252:	694e      	ldr	r6, [r1, #20]
    a254:	2e00      	cmp	r6, #0
    a256:	d0fa      	beq.n	a24e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  auto* params =
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a258:	680a      	ldr	r2, [r1, #0]
    a25a:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    a25e:	6853      	ldr	r3, [r2, #4]
    a260:	6897      	ldr	r7, [r2, #8]
    a262:	ea4f 1983 	mov.w	r9, r3, lsl #6
    a266:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
    a26a:	f81a 2009 	ldrb.w	r2, [sl, r9]
  int width = SizeOfDimension(input, 2);
    a26e:	689b      	ldr	r3, [r3, #8]
  const TfLiteType data_type = input->type;
    a270:	9210      	str	r2, [sp, #64]	; 0x40
    a272:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
  return t->dims->data[dim];
    a276:	68da      	ldr	r2, [r3, #12]
    a278:	689b      	ldr	r3, [r3, #8]
    a27a:	930a      	str	r3, [sp, #40]	; 0x28
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
    a27c:	68bb      	ldr	r3, [r7, #8]
    a27e:	920d      	str	r2, [sp, #52]	; 0x34

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    a280:	6919      	ldr	r1, [r3, #16]
    a282:	68da      	ldr	r2, [r3, #12]
    a284:	920b      	str	r2, [sp, #44]	; 0x2c
    a286:	689a      	ldr	r2, [r3, #8]
    a288:	920c      	str	r2, [sp, #48]	; 0x30
    a28a:	0089      	lsls	r1, r1, #2
    a28c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a28e:	910e      	str	r1, [sp, #56]	; 0x38
    a290:	f105 0218 	add.w	r2, r5, #24
    a294:	4798      	blx	r3
    a296:	4683      	mov	fp, r0
    a298:	bb48      	cbnz	r0, a2ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    a29a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a29c:	990e      	ldr	r1, [sp, #56]	; 0x38
    a29e:	f105 021c 	add.w	r2, r5, #28
    a2a2:	4620      	mov	r0, r4
    a2a4:	4798      	blx	r3
    a2a6:	2800      	cmp	r0, #0
    a2a8:	f040 80d3 	bne.w	a452 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x212>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    a2ac:	f81a 3009 	ldrb.w	r3, [sl, r9]
    a2b0:	2b09      	cmp	r3, #9
    a2b2:	d14a      	bne.n	a34a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    a2b4:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
    a2b8:	f1bb 0f01 	cmp.w	fp, #1
    a2bc:	d00d      	beq.n	a2da <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
    a2be:	2501      	movs	r5, #1
    a2c0:	4b67      	ldr	r3, [pc, #412]	; (a460 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
    a2c2:	9301      	str	r3, [sp, #4]
    a2c4:	e9cd b502 	strd	fp, r5, [sp, #8]
    a2c8:	4b66      	ldr	r3, [pc, #408]	; (a464 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
    a2ca:	6966      	ldr	r6, [r4, #20]
    a2cc:	9300      	str	r3, [sp, #0]
    a2ce:	2388      	movs	r3, #136	; 0x88
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    a2d0:	4a65      	ldr	r2, [pc, #404]	; (a468 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a2d2:	4966      	ldr	r1, [pc, #408]	; (a46c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
    a2d4:	4620      	mov	r0, r4
    a2d6:	47b0      	blx	r6
    a2d8:	e046      	b.n	a368 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
    a2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    a2dc:	b95b      	cbnz	r3, a2f6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
    a2de:	4b64      	ldr	r3, [pc, #400]	; (a470 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
    a2e0:	6965      	ldr	r5, [r4, #20]
    a2e2:	9300      	str	r3, [sp, #0]
    a2e4:	238e      	movs	r3, #142	; 0x8e
    TF_LITE_ENSURE(context, affine_quantization->scale);
    a2e6:	4a60      	ldr	r2, [pc, #384]	; (a468 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a2e8:	4962      	ldr	r1, [pc, #392]	; (a474 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    a2ea:	4620      	mov	r0, r4
    a2ec:	47a8      	blx	r5
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
    a2ee:	4658      	mov	r0, fp
    a2f0:	b013      	add	sp, #76	; 0x4c
    a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
    a2f6:	6819      	ldr	r1, [r3, #0]
    a2f8:	b921      	cbnz	r1, a304 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
    a2fa:	4b5f      	ldr	r3, [pc, #380]	; (a478 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    a2fc:	9300      	str	r3, [sp, #0]
    a2fe:	6965      	ldr	r5, [r4, #20]
    a300:	238f      	movs	r3, #143	; 0x8f
    a302:	e7f0      	b.n	a2e6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    a304:	685a      	ldr	r2, [r3, #4]
    a306:	b922      	cbnz	r2, a312 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
    a308:	4b5c      	ldr	r3, [pc, #368]	; (a47c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    a30a:	9300      	str	r3, [sp, #0]
    a30c:	6965      	ldr	r5, [r4, #20]
    a30e:	2390      	movs	r3, #144	; 0x90
    a310:	e7e9      	b.n	a2e6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(
    a312:	680b      	ldr	r3, [r1, #0]
    a314:	2b01      	cmp	r3, #1
    a316:	d008      	beq.n	a32a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
    a318:	68b9      	ldr	r1, [r7, #8]
    a31a:	6909      	ldr	r1, [r1, #16]
    a31c:	428b      	cmp	r3, r1
    a31e:	d004      	beq.n	a32a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
    a320:	4b57      	ldr	r3, [pc, #348]	; (a480 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
    a322:	9300      	str	r3, [sp, #0]
    a324:	6965      	ldr	r5, [r4, #20]
    a326:	2391      	movs	r3, #145	; 0x91
    a328:	e7dd      	b.n	a2e6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    a32a:	6812      	ldr	r2, [r2, #0]
    a32c:	4293      	cmp	r3, r2
    a32e:	d00c      	beq.n	a34a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    a330:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a334:	4b53      	ldr	r3, [pc, #332]	; (a484 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    a336:	9301      	str	r3, [sp, #4]
    a338:	4b53      	ldr	r3, [pc, #332]	; (a488 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    a33a:	9300      	str	r3, [sp, #0]
    a33c:	6965      	ldr	r5, [r4, #20]
    a33e:	4a4a      	ldr	r2, [pc, #296]	; (a468 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a340:	494a      	ldr	r1, [pc, #296]	; (a46c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
    a342:	2395      	movs	r3, #149	; 0x95
    a344:	4620      	mov	r0, r4
    a346:	47a8      	blx	r5
    a348:	e7d1      	b.n	a2ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  bool has_bias = node->inputs->size == 3;
    a34a:	f8d8 7000 	ldr.w	r7, [r8]
    a34e:	683b      	ldr	r3, [r7, #0]
    a350:	930e      	str	r3, [sp, #56]	; 0x38
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    a352:	3b02      	subs	r3, #2
    a354:	2b01      	cmp	r3, #1
    a356:	d90a      	bls.n	a36e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    a358:	4b4c      	ldr	r3, [pc, #304]	; (a48c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	6965      	ldr	r5, [r4, #20]
    a35e:	4a42      	ldr	r2, [pc, #264]	; (a468 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a360:	4944      	ldr	r1, [pc, #272]	; (a474 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    a362:	2341      	movs	r3, #65	; 0x41
    a364:	4620      	mov	r0, r4
    a366:	47a8      	blx	r5
    a368:	f04f 0b01 	mov.w	fp, #1
    a36c:	e7bf      	b.n	a2ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    a36e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a372:	930f      	str	r3, [sp, #60]	; 0x3c
    a374:	f8d3 8000 	ldr.w	r8, [r3]
    a378:	f1b8 0f01 	cmp.w	r8, #1
    a37c:	d009      	beq.n	a392 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
    a37e:	4b44      	ldr	r3, [pc, #272]	; (a490 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
    a380:	9301      	str	r3, [sp, #4]
    a382:	2501      	movs	r5, #1
    a384:	4b43      	ldr	r3, [pc, #268]	; (a494 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    a386:	9300      	str	r3, [sp, #0]
    a388:	e9cd 8502 	strd	r8, r5, [sp, #8]
    a38c:	6966      	ldr	r6, [r4, #20]
    a38e:	2342      	movs	r3, #66	; 0x42
    a390:	e79e      	b.n	a2d0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
      &unused_output_width);
    a392:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
    a396:	f896 b000 	ldrb.w	fp, [r6]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    a39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a39c:	990d      	ldr	r1, [sp, #52]	; 0x34
    a39e:	f8cd 8000 	str.w	r8, [sp]
    a3a2:	464b      	mov	r3, r9
    a3a4:	4658      	mov	r0, fp
    a3a6:	f00f f897 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    a3aa:	4653      	mov	r3, sl
    a3ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    a3ae:	9011      	str	r0, [sp, #68]	; 0x44
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    a3b0:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3b2:	f8cd 8000 	str.w	r8, [sp]
    a3b6:	4658      	mov	r0, fp
    a3b8:	f00f f88e 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
    a3bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3c0:	3801      	subs	r0, #1
  int total_padding =
    a3c2:	1a9b      	subs	r3, r3, r2
    a3c4:	fb0a 3a00 	mla	sl, sl, r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  int total_padding =
    a3ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3cc:	1e58      	subs	r0, r3, #1
  int total_padding =
    a3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3d0:	1a9b      	subs	r3, r3, r2
    a3d2:	fb09 3900 	mla	r9, r9, r0, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    a3d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    a3da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    a3de:	ea4f 0369 	mov.w	r3, r9, asr #1
    a3e2:	602b      	str	r3, [r5, #0]
    a3e4:	ea4f 036a 	mov.w	r3, sl, asr #1
    a3e8:	606b      	str	r3, [r5, #4]
  *offset = total_padding % 2;
    a3ea:	f009 0301 	and.w	r3, r9, #1
    a3ee:	60ab      	str	r3, [r5, #8]
  if (data_type != kTfLiteFloat32) {
    a3f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a3f2:	f00a 0001 	and.w	r0, sl, #1
    a3f6:	2b01      	cmp	r3, #1
      &unused_output_width);
    a3f8:	60e8      	str	r0, [r5, #12]
  if (data_type != kTfLiteFloat32) {
    a3fa:	d02e      	beq.n	a45a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
  const bool use_tensor = index < node->inputs->size &&
    a3fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a3fe:	68a0      	ldr	r0, [r4, #8]
  return &context->tensors[node->inputs->data[index]];
    a400:	6879      	ldr	r1, [r7, #4]
    a402:	68ba      	ldr	r2, [r7, #8]
  const bool use_tensor = index < node->inputs->size &&
    a404:	2b03      	cmp	r3, #3
  return &context->tensors[node->inputs->data[index]];
    a406:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    a40a:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    a40e:	d122      	bne.n	a456 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    a410:	68fb      	ldr	r3, [r7, #12]
  const bool use_tensor = index < node->inputs->size &&
    a412:	1c5f      	adds	r7, r3, #1
    a414:	d01f      	beq.n	a456 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
    return &context->tensors[node->inputs->data[index]];
    a416:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    a41a:	6897      	ldr	r7, [r2, #8]
    return tflite::PopulateConvolutionQuantizationParams(
    a41c:	693f      	ldr	r7, [r7, #16]
    a41e:	9708      	str	r7, [sp, #32]
    a420:	69ef      	ldr	r7, [r5, #28]
    a422:	9707      	str	r7, [sp, #28]
    a424:	69af      	ldr	r7, [r5, #24]
    a426:	9706      	str	r7, [sp, #24]
    a428:	f105 0724 	add.w	r7, r5, #36	; 0x24
    a42c:	9705      	str	r7, [sp, #20]
    a42e:	f105 0720 	add.w	r7, r5, #32
    a432:	9704      	str	r7, [sp, #16]
    a434:	f105 0714 	add.w	r7, r5, #20
    a438:	3510      	adds	r5, #16
    a43a:	9502      	str	r5, [sp, #8]
        context, input, filter, bias, output, params->activation,
    a43c:	3610      	adds	r6, #16
  return &context->tensors[node->outputs->data[index]];
    a43e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return tflite::PopulateConvolutionQuantizationParams(
    a440:	9703      	str	r7, [sp, #12]
    a442:	9601      	str	r6, [sp, #4]
    a444:	686d      	ldr	r5, [r5, #4]
    a446:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    a44a:	9000      	str	r0, [sp, #0]
    a44c:	4620      	mov	r0, r4
    a44e:	f007 fa77 	bl	11940 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    a452:	4683      	mov	fp, r0
    a454:	e74b      	b.n	a2ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  return nullptr;
    a456:	2300      	movs	r3, #0
    a458:	e7df      	b.n	a41a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  return kTfLiteOk;
    a45a:	f04f 0b00 	mov.w	fp, #0
    a45e:	e746      	b.n	a2ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    a460:	0002b222 	.word	0x0002b222
    a464:	0002b23c 	.word	0x0002b23c
    a468:	0002b365 	.word	0x0002b365
    a46c:	0002af4f 	.word	0x0002af4f
    a470:	0002b256 	.word	0x0002b256
    a474:	0002a6ae 	.word	0x0002a6ae
    a478:	0002b26a 	.word	0x0002b26a
    a47c:	0002b285 	.word	0x0002b285
    a480:	0002b395 	.word	0x0002b395
    a484:	0002b31e 	.word	0x0002b31e
    a488:	0002b344 	.word	0x0002b344
    a48c:	0002b1ea 	.word	0x0002b1ea
    a490:	0002bbe9 	.word	0x0002bbe9
    a494:	0002b20e 	.word	0x0002b20e

0000a498 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    a498:	4800      	ldr	r0, [pc, #0]	; (a49c <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x4>)
    a49a:	4770      	bx	lr
    a49c:	20000228 	.word	0x20000228

0000a4a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a4a4:	690a      	ldr	r2, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a4a6:	b0b3      	sub	sp, #204	; 0xcc
    a4a8:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a4aa:	b90a      	cbnz	r2, a4b0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10>
    a4ac:	f014 f891 	bl	1e5d2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a4b0:	694b      	ldr	r3, [r1, #20]
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d0fa      	beq.n	a4ac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    a4b6:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    a4b8:	6848      	ldr	r0, [r1, #4]
    a4ba:	6840      	ldr	r0, [r0, #4]
    a4bc:	eb07 1b80 	add.w	fp, r7, r0, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a4c0:	6808      	ldr	r0, [r1, #0]
  return &context->tensors[node->inputs->data[index]];
    a4c2:	6846      	ldr	r6, [r0, #4]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
    a4c4:	6801      	ldr	r1, [r0, #0]
    a4c6:	6885      	ldr	r5, [r0, #8]
    a4c8:	ea4f 1986 	mov.w	r9, r6, lsl #6
    a4cc:	2903      	cmp	r1, #3
    a4ce:	bf08      	it	eq
    a4d0:	68c4      	ldreq	r4, [r0, #12]
  switch (input->type) {  // Already know in/out types are same.
    a4d2:	f817 0009 	ldrb.w	r0, [r7, r9]
    a4d6:	bf0c      	ite	eq
    a4d8:	eb07 1484 	addeq.w	r4, r7, r4, lsl #6
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
    a4dc:	2400      	movne	r4, #0
  switch (input->type) {  // Already know in/out types are same.
    a4de:	2803      	cmp	r0, #3
    a4e0:	eb07 1686 	add.w	r6, r7, r6, lsl #6
    a4e4:	eb07 1585 	add.w	r5, r7, r5, lsl #6
    a4e8:	f000 80ce 	beq.w	a688 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
    a4ec:	2809      	cmp	r0, #9
    a4ee:	d06a      	beq.n	a5c6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    a4f0:	2801      	cmp	r0, #1
    a4f2:	f040 811e 	bne.w	a732 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x292>
  CalculateActivationRange(params->activation, &output_activation_min,
    a4f6:	7c19      	ldrb	r1, [r3, #16]
  if (activation == kTfLiteActRelu) {
    a4f8:	2901      	cmp	r1, #1
    a4fa:	d05c      	beq.n	a5b6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116>
  } else if (activation == kTfLiteActRelu6) {
    a4fc:	2903      	cmp	r1, #3
    a4fe:	d05f      	beq.n	a5c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x120>
    *activation_max = std::numeric_limits<T>::max();
    a500:	ed9f 7a92 	vldr	s14, [pc, #584]	; a74c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    a504:	eddf 6a92 	vldr	s13, [pc, #584]	; a750 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
    a508:	2902      	cmp	r1, #2
    a50a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a50e:	bf18      	it	ne
    a510:	eef0 7a47 	vmovne.f32	s15, s14
    a514:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    a518:	bf18      	it	ne
    a51a:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.padding_type = PaddingType::kSame;
    a51e:	2101      	movs	r1, #1
    a520:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a524:	6811      	ldr	r1, [r2, #0]
  op_params.padding_values.height = data->padding.height;
    a526:	6852      	ldr	r2, [r2, #4]
    a528:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a52c:	685a      	ldr	r2, [r3, #4]
    a52e:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a532:	689a      	ldr	r2, [r3, #8]
    a534:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a538:	695a      	ldr	r2, [r3, #20]
  op_params.padding_values.width = data->padding.width;
    a53a:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.dilation_width_factor = params->dilation_width_factor;
    a53e:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a542:	4631      	mov	r1, r6
  op_params.dilation_height_factor = params->dilation_height_factor;
    a544:	699a      	ldr	r2, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a546:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a548:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a54c:	a80a      	add	r0, sp, #40	; 0x28
  op_params.depth_multiplier = params->depth_multiplier;
    a54e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.float_activation_min = output_activation_min;
    a552:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
  op_params.float_activation_max = output_activation_max;
    a556:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a55a:	f00b f9eb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
    a55e:	4629      	mov	r1, r5
    a560:	a810      	add	r0, sp, #64	; 0x40
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    a562:	f8d6 8004 	ldr.w	r8, [r6, #4]
    a566:	f00b f9e5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a56a:	b105      	cbz	r5, a56e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xce>
    a56c:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    a56e:	ae16      	add	r6, sp, #88	; 0x58
    a570:	4621      	mov	r1, r4
    a572:	4630      	mov	r0, r6
    a574:	f00b f9de 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a578:	b104      	cbz	r4, a57c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xdc>
    a57a:	6864      	ldr	r4, [r4, #4]
    a57c:	af1c      	add	r7, sp, #112	; 0x70
    a57e:	4659      	mov	r1, fp
    a580:	4638      	mov	r0, r7
    a582:	f00b f9d7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    a586:	f1bb 0f00 	cmp.w	fp, #0
    a58a:	d001      	beq.n	a590 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    a58c:	f8db b004 	ldr.w	fp, [fp, #4]
  tflite::reference_ops::DepthwiseConv(
    a590:	9500      	str	r5, [sp, #0]
    a592:	ab10      	add	r3, sp, #64	; 0x40
    a594:	4642      	mov	r2, r8
    a596:	a90a      	add	r1, sp, #40	; 0x28
    a598:	a822      	add	r0, sp, #136	; 0x88
    a59a:	e9cd 7b03 	strd	r7, fp, [sp, #12]
    a59e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    a5a2:	f7ff fd2d 	bl	a000 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    a5a6:	4638      	mov	r0, r7
    a5a8:	f00b f97f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    a5ac:	4630      	mov	r0, r6
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a5ae:	f00b f97c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
    a5b2:	a810      	add	r0, sp, #64	; 0x40
    a5b4:	e05f      	b.n	a676 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
    *activation_max = std::numeric_limits<T>::max();
    a5b6:	eddf 7a65 	vldr	s15, [pc, #404]	; a74c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    *activation_min = 0;
    a5ba:	ed9f 7a66 	vldr	s14, [pc, #408]	; a754 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    a5be:	e7ae      	b.n	a51e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    *activation_max = 6;
    a5c0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    a5c4:	e7f9      	b.n	a5ba <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11a>
  op_params.padding_type = PaddingType::kSame;
    a5c6:	2101      	movs	r1, #1
    a5c8:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a5cc:	6811      	ldr	r1, [r2, #0]
    a5ce:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
    a5d2:	6851      	ldr	r1, [r2, #4]
    a5d4:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a5d8:	6859      	ldr	r1, [r3, #4]
    a5da:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a5de:	6899      	ldr	r1, [r3, #8]
    a5e0:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a5e4:	6959      	ldr	r1, [r3, #20]
    a5e6:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
    a5ea:	6999      	ldr	r1, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a5ec:	68db      	ldr	r3, [r3, #12]
    a5ee:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.input_offset = -input->params.zero_point;
    a5f2:	6933      	ldr	r3, [r6, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a5f4:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.input_offset = -input->params.zero_point;
    a5f8:	425b      	negs	r3, r3
    a5fa:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.weights_offset = 0;
    a5fc:	2300      	movs	r3, #0
    a5fe:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.output_offset = output->params.zero_point;
    a600:	f8db 3010 	ldr.w	r3, [fp, #16]
    a604:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
    a606:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a60a:	237f      	movs	r3, #127	; 0x7f
    a60c:	e9cd 132c 	strd	r1, r3, [sp, #176]	; 0xb0
      data->per_channel_output_shift, GetTensorShape(input),
    a610:	a80a      	add	r0, sp, #40	; 0x28
    a612:	4631      	mov	r1, r6
    a614:	e9d2 9a06 	ldrd	r9, sl, [r2, #24]
    a618:	f00b f98c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    a61c:	6873      	ldr	r3, [r6, #4]
    a61e:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
    a620:	ae10      	add	r6, sp, #64	; 0x40
    a622:	4629      	mov	r1, r5
    a624:	4630      	mov	r0, r6
    a626:	f00b f985 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a62a:	b105      	cbz	r5, a62e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18e>
    a62c:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
    a62e:	af16      	add	r7, sp, #88	; 0x58
    a630:	4621      	mov	r1, r4
    a632:	4638      	mov	r0, r7
    a634:	f00b f97e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a638:	b104      	cbz	r4, a63c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    a63a:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
    a63c:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    a640:	4659      	mov	r1, fp
    a642:	4640      	mov	r0, r8
    a644:	f00b f976 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
    a648:	f8db 3004 	ldr.w	r3, [fp, #4]
    a64c:	e9cd 8305 	strd	r8, r3, [sp, #20]
    a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a652:	9300      	str	r3, [sp, #0]
    a654:	4652      	mov	r2, sl
    a656:	ab0a      	add	r3, sp, #40	; 0x28
    a658:	4649      	mov	r1, r9
    a65a:	a822      	add	r0, sp, #136	; 0x88
    a65c:	e9cd 7403 	strd	r7, r4, [sp, #12]
    a660:	e9cd 6501 	strd	r6, r5, [sp, #4]
    a664:	f00f f833 	bl	196ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
    a668:	4640      	mov	r0, r8
    a66a:	f00b f91e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
    a66e:	4638      	mov	r0, r7
    a670:	f00b f91b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
    a674:	4630      	mov	r0, r6
    a676:	f00b f918 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
    a67a:	a80a      	add	r0, sp, #40	; 0x28
    a67c:	f00b f915 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    a680:	2000      	movs	r0, #0
}
    a682:	b033      	add	sp, #204	; 0xcc
    a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.padding_type = PaddingType::kSame;
    a688:	2001      	movs	r0, #1
  const int32_t filter_offset = -filter->params.zero_point;
    a68a:	6929      	ldr	r1, [r5, #16]
  const int32_t input_offset = -input->params.zero_point;
    a68c:	6937      	ldr	r7, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
    a68e:	f8db c010 	ldr.w	ip, [fp, #16]
  op_params.padding_type = PaddingType::kSame;
    a692:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a696:	6810      	ldr	r0, [r2, #0]
    a698:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
    a69c:	6850      	ldr	r0, [r2, #4]
    a69e:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a6a2:	6858      	ldr	r0, [r3, #4]
    a6a4:	f8ad 0092 	strh.w	r0, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a6a8:	6898      	ldr	r0, [r3, #8]
    a6aa:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a6ae:	6958      	ldr	r0, [r3, #20]
    a6b0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
    a6b4:	6998      	ldr	r0, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a6b6:	68db      	ldr	r3, [r3, #12]
    a6b8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.quantized_activation_min = data->output_activation_min;
    a6bc:	6a13      	ldr	r3, [r2, #32]
    a6be:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data->output_activation_max;
    a6c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a6c2:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_multiplier = data->output_multiplier;
    a6c4:	6913      	ldr	r3, [r2, #16]
    a6c6:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.output_shift = -data->output_shift;
    a6c8:	6953      	ldr	r3, [r2, #20]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a6ca:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  const int32_t input_offset = -input->params.zero_point;
    a6ce:	427f      	negs	r7, r7
  const int32_t filter_offset = -filter->params.zero_point;
    a6d0:	4249      	negs	r1, r1
  op_params.weights_offset = filter_offset;
    a6d2:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
  op_params.output_shift = -data->output_shift;
    a6d6:	425b      	negs	r3, r3
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a6d8:	4631      	mov	r1, r6
    a6da:	a80a      	add	r0, sp, #40	; 0x28
  op_params.output_offset = output_offset;
    a6dc:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
  op_params.output_shift = -data->output_shift;
    a6e0:	932b      	str	r3, [sp, #172]	; 0xac
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a6e2:	f00b f927 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
    a6e6:	4629      	mov	r1, r5
    a6e8:	a810      	add	r0, sp, #64	; 0x40
    a6ea:	6877      	ldr	r7, [r6, #4]
    a6ec:	f00b f922 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a6f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a6f4:	ad16      	add	r5, sp, #88	; 0x58
    a6f6:	4621      	mov	r1, r4
    a6f8:	4628      	mov	r0, r5
    a6fa:	f00b f91b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a6fe:	b104      	cbz	r4, a702 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    a700:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
    a702:	ae1c      	add	r6, sp, #112	; 0x70
    a704:	4659      	mov	r1, fp
    a706:	4630      	mov	r0, r6
    a708:	f00b f914 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
    a70c:	f8db 3004 	ldr.w	r3, [fp, #4]
    a710:	f8cd 8000 	str.w	r8, [sp]
    a714:	e9cd 6303 	strd	r6, r3, [sp, #12]
    a718:	463a      	mov	r2, r7
    a71a:	ab10      	add	r3, sp, #64	; 0x40
    a71c:	a90a      	add	r1, sp, #40	; 0x28
    a71e:	a822      	add	r0, sp, #136	; 0x88
    a720:	e9cd 5401 	strd	r5, r4, [sp, #4]
    a724:	f00f f8ed 	bl	19902 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>
    a728:	4630      	mov	r0, r6
    a72a:	f00b f8be 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a72e:	4628      	mov	r0, r5
    a730:	e73d      	b.n	a5ae <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    a732:	f8d8 4014 	ldr.w	r4, [r8, #20]
    a736:	f7f6 f8bc 	bl	8b2 <TfLiteTypeGetName>
    a73a:	f817 3009 	ldrb.w	r3, [r7, r9]
    a73e:	4906      	ldr	r1, [pc, #24]	; (a758 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    a740:	4602      	mov	r2, r0
    a742:	4640      	mov	r0, r8
    a744:	47a0      	blx	r4
      return kTfLiteError;
    a746:	2001      	movs	r0, #1
    a748:	e79b      	b.n	a682 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    a74a:	bf00      	nop
    a74c:	7f7fffff 	.word	0x7f7fffff
    a750:	ff7fffff 	.word	0xff7fffff
    a754:	00000000 	.word	0x00000000
    a758:	0002aea3 	.word	0x0002aea3

0000a75c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a75c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a760:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a762:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a764:	b90f      	cbnz	r7, a76a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    a766:	f013 ff34 	bl	1e5d2 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    a76a:	f8d1 c000 	ldr.w	ip, [r1]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    a76e:	f8dc 6000 	ldr.w	r6, [ip]
    a772:	2e01      	cmp	r6, #1
    a774:	d00f      	beq.n	a796 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    a776:	2401      	movs	r4, #1
    a778:	4b31      	ldr	r3, [pc, #196]	; (a840 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    a77a:	9301      	str	r3, [sp, #4]
    a77c:	e9cd 6402 	strd	r6, r4, [sp, #8]
    a780:	4b30      	ldr	r3, [pc, #192]	; (a844 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
    a782:	9300      	str	r3, [sp, #0]
    a784:	6945      	ldr	r5, [r0, #20]
    a786:	4a30      	ldr	r2, [pc, #192]	; (a848 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a788:	4930      	ldr	r1, [pc, #192]	; (a84c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
    a78a:	2334      	movs	r3, #52	; 0x34
    a78c:	47a8      	blx	r5
  TfLiteTensor* output = GetOutput(context, node, 0);

  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
                              input->type == kTfLiteInt8 ||
                              input->type == kTfLiteInt16);
  TF_LITE_ENSURE(
    a78e:	2001      	movs	r0, #1
        static_cast<double>(output->params.scale);
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
    a790:	b004      	add	sp, #16
    a792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    a796:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    a798:	6814      	ldr	r4, [r2, #0]
    a79a:	2c01      	cmp	r4, #1
    a79c:	d00b      	beq.n	a7b6 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    a79e:	e9cd 4602 	strd	r4, r6, [sp, #8]
    a7a2:	4b27      	ldr	r3, [pc, #156]	; (a840 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    a7a4:	9301      	str	r3, [sp, #4]
    a7a6:	4b2a      	ldr	r3, [pc, #168]	; (a850 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    a7a8:	9300      	str	r3, [sp, #0]
    a7aa:	6944      	ldr	r4, [r0, #20]
    a7ac:	4a26      	ldr	r2, [pc, #152]	; (a848 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a7ae:	4927      	ldr	r1, [pc, #156]	; (a84c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
    a7b0:	2335      	movs	r3, #53	; 0x35
    a7b2:	47a0      	blx	r4
    a7b4:	e7eb      	b.n	a78e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
    a7b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    a7ba:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    a7bc:	6856      	ldr	r6, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
    a7be:	ea4f 1e81 	mov.w	lr, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a7c2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
    a7c6:	f813 200e 	ldrb.w	r2, [r3, lr]
    a7ca:	f002 0efb 	and.w	lr, r2, #251	; 0xfb
    a7ce:	f1be 0f03 	cmp.w	lr, #3
  return &context->tensors[node->inputs->data[index]];
    a7d2:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a7d6:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    a7da:	d009      	beq.n	a7f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
    a7dc:	2a09      	cmp	r2, #9
    a7de:	d007      	beq.n	a7f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
    a7e0:	4b1c      	ldr	r3, [pc, #112]	; (a854 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    a7e2:	9300      	str	r3, [sp, #0]
    a7e4:	6945      	ldr	r5, [r0, #20]
    a7e6:	4a18      	ldr	r2, [pc, #96]	; (a848 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a7e8:	491b      	ldr	r1, [pc, #108]	; (a858 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    a7ea:	233b      	movs	r3, #59	; 0x3b
    a7ec:	47a8      	blx	r5
    a7ee:	e7ce      	b.n	a78e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE(
    a7f0:	f813 300c 	ldrb.w	r3, [r3, ip]
    a7f4:	1e5a      	subs	r2, r3, #1
    a7f6:	2a01      	cmp	r2, #1
    a7f8:	d908      	bls.n	a80c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    a7fa:	4b18      	ldr	r3, [pc, #96]	; (a85c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    a7fc:	9300      	str	r3, [sp, #0]
    a7fe:	696c      	ldr	r4, [r5, #20]
    a800:	4a11      	ldr	r2, [pc, #68]	; (a848 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a802:	4915      	ldr	r1, [pc, #84]	; (a858 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    a804:	233e      	movs	r3, #62	; 0x3e
    a806:	4628      	mov	r0, r5
    a808:	47a0      	blx	r4
    a80a:	e7c0      	b.n	a78e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  if (output->type == kTfLiteInt32) {
    a80c:	2b02      	cmp	r3, #2
    a80e:	d115      	bne.n	a83c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
        static_cast<double>(input->params.scale) /
    a810:	68c8      	ldr	r0, [r1, #12]
    a812:	f7f6 fa29 	bl	c68 <__aeabi_f2d>
    a816:	4604      	mov	r4, r0
        static_cast<double>(output->params.scale);
    a818:	68f0      	ldr	r0, [r6, #12]
        static_cast<double>(input->params.scale) /
    a81a:	460d      	mov	r5, r1
        static_cast<double>(output->params.scale);
    a81c:	f7f6 fa24 	bl	c68 <__aeabi_f2d>
    a820:	4602      	mov	r2, r0
    a822:	460b      	mov	r3, r1
    const double effective_output_scale =
    a824:	4620      	mov	r0, r4
    a826:	4629      	mov	r1, r5
    a828:	f7f6 fba0 	bl	f6c <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    a82c:	f107 0804 	add.w	r8, r7, #4
    const double effective_output_scale =
    a830:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    a834:	4641      	mov	r1, r8
    a836:	4638      	mov	r0, r7
    a838:	f006 ff6a 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
    a83c:	2000      	movs	r0, #0
    a83e:	e7a7      	b.n	a790 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
    a840:	0002bbe9 	.word	0x0002bbe9
    a844:	0002af69 	.word	0x0002af69
    a848:	0002b417 	.word	0x0002b417
    a84c:	0002af4f 	.word	0x0002af4f
    a850:	0002af79 	.word	0x0002af79
    a854:	0002b443 	.word	0x0002b443
    a858:	0002a6ae 	.word	0x0002a6ae
    a85c:	0002b49c 	.word	0x0002b49c

0000a860 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a864:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a868:	b08f      	sub	sp, #60	; 0x3c
    a86a:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a86c:	f1b8 0f00 	cmp.w	r8, #0
    a870:	d101      	bne.n	a876 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16>
    a872:	f013 feae 	bl	1e5d2 <abort>
  return &context->tensors[node->inputs->data[index]];
    a876:	680a      	ldr	r2, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
    a878:	6849      	ldr	r1, [r1, #4]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
    a87a:	f8d0 b008 	ldr.w	fp, [r0, #8]
    a87e:	684d      	ldr	r5, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    a880:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    a882:	ea4f 1a85 	mov.w	sl, r5, lsl #6
  return &context->tensors[node->inputs->data[index]];
    a886:	01a2      	lsls	r2, r4, #6
  TfLiteTensor* output = GetOutput(context, node, 0);

  if (output->type == kTfLiteFloat32) {
    a888:	f81b 700a 	ldrb.w	r7, [fp, sl]
    a88c:	2f01      	cmp	r7, #1
    a88e:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a892:	eb0b 1585 	add.w	r5, fp, r5, lsl #6
    a896:	f040 808e 	bne.w	a9b6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x156>
    tflite::DequantizationParams op_params;
    op_params.zero_point = input->params.zero_point;
    a89a:	6923      	ldr	r3, [r4, #16]
    op_params.scale = static_cast<double>(input->params.scale);
    a89c:	68e0      	ldr	r0, [r4, #12]
    a89e:	9201      	str	r2, [sp, #4]
    op_params.zero_point = input->params.zero_point;
    a8a0:	9300      	str	r3, [sp, #0]
    op_params.scale = static_cast<double>(input->params.scale);
    a8a2:	f7f6 f9e1 	bl	c68 <__aeabi_f2d>
    switch (input->type) {
    a8a6:	9a01      	ldr	r2, [sp, #4]
    op_params.scale = static_cast<double>(input->params.scale);
    a8a8:	4680      	mov	r8, r0
    switch (input->type) {
    a8aa:	f81b 0002 	ldrb.w	r0, [fp, r2]
    a8ae:	2807      	cmp	r0, #7
    op_params.scale = static_cast<double>(input->params.scale);
    a8b0:	4689      	mov	r9, r1
    switch (input->type) {
    a8b2:	d045      	beq.n	a940 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
    a8b4:	2809      	cmp	r0, #9
    a8b6:	d022      	beq.n	a8fe <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    a8b8:	2803      	cmp	r0, #3
    a8ba:	d16b      	bne.n	a994 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x134>
      case kTfLiteUInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a8bc:	4621      	mov	r1, r4
    a8be:	a802      	add	r0, sp, #8
    a8c0:	f00b f838 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a8c4:	4629      	mov	r1, r5
    a8c6:	a808      	add	r0, sp, #32
    a8c8:	6867      	ldr	r7, [r4, #4]
    a8ca:	f00b f833 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a8ce:	a908      	add	r1, sp, #32
    a8d0:	a802      	add	r0, sp, #8
    a8d2:	f00b f806 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a8d6:	686d      	ldr	r5, [r5, #4]
    a8d8:	4606      	mov	r6, r0

  for (int i = 0; i < flat_size; i++) {
    a8da:	2400      	movs	r4, #0
    a8dc:	42a6      	cmp	r6, r4
    a8de:	dd51      	ble.n	a984 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a8e0:	5d38      	ldrb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a8e2:	9b00      	ldr	r3, [sp, #0]
    a8e4:	1ac0      	subs	r0, r0, r3
    a8e6:	f7f6 f9ad 	bl	c44 <__aeabi_i2d>
    a8ea:	4642      	mov	r2, r8
    a8ec:	464b      	mov	r3, r9
    a8ee:	f7f6 fa13 	bl	d18 <__aeabi_dmul>
    a8f2:	f7f6 fcd3 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a8f6:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a8f8:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a8fc:	e7ee      	b.n	a8dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        break;
      case kTfLiteInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    a8fe:	4621      	mov	r1, r4
    a900:	a802      	add	r0, sp, #8
    a902:	f00b f817 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a906:	4629      	mov	r1, r5
    a908:	a808      	add	r0, sp, #32
    a90a:	6867      	ldr	r7, [r4, #4]
    a90c:	f00b f812 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a910:	a908      	add	r1, sp, #32
    a912:	a802      	add	r0, sp, #8
    a914:	f00a ffe5 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a918:	686d      	ldr	r5, [r5, #4]
    a91a:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    a91c:	2400      	movs	r4, #0
    a91e:	42a6      	cmp	r6, r4
    a920:	dd30      	ble.n	a984 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a922:	5738      	ldrsb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a924:	9b00      	ldr	r3, [sp, #0]
    a926:	1ac0      	subs	r0, r0, r3
    a928:	f7f6 f98c 	bl	c44 <__aeabi_i2d>
    a92c:	4642      	mov	r2, r8
    a92e:	464b      	mov	r3, r9
    a930:	f7f6 f9f2 	bl	d18 <__aeabi_dmul>
    a934:	f7f6 fcb2 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a938:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a93a:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a93e:	e7ee      	b.n	a91e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        break;
      case kTfLiteInt16:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
    a940:	4621      	mov	r1, r4
    a942:	a802      	add	r0, sp, #8
    a944:	f00a fff6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a948:	4629      	mov	r1, r5
    a94a:	a808      	add	r0, sp, #32
    a94c:	6867      	ldr	r7, [r4, #4]
    a94e:	f00a fff1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a952:	a908      	add	r1, sp, #32
    a954:	a802      	add	r0, sp, #8
    a956:	f00a ffc4 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a95a:	686d      	ldr	r5, [r5, #4]
    a95c:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    a95e:	2400      	movs	r4, #0
    a960:	42a6      	cmp	r6, r4
    a962:	dd0f      	ble.n	a984 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a964:	f937 0014 	ldrsh.w	r0, [r7, r4, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a968:	9b00      	ldr	r3, [sp, #0]
    a96a:	1ac0      	subs	r0, r0, r3
    a96c:	f7f6 f96a 	bl	c44 <__aeabi_i2d>
    a970:	4642      	mov	r2, r8
    a972:	464b      	mov	r3, r9
    a974:	f7f6 f9d0 	bl	d18 <__aeabi_dmul>
    a978:	f7f6 fc90 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a97c:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a97e:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a982:	e7ed      	b.n	a960 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x100>
    a984:	a808      	add	r0, sp, #32
    a986:	f00a ff90 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
    a98a:	a802      	add	r0, sp, #8
    a98c:	f00a ff8d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    a990:	2700      	movs	r7, #0
    a992:	e00c      	b.n	a9ae <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a994:	6974      	ldr	r4, [r6, #20]
    a996:	f7f5 ff8c 	bl	8b2 <TfLiteTypeGetName>
    a99a:	9000      	str	r0, [sp, #0]
    a99c:	f81b 000a 	ldrb.w	r0, [fp, sl]
    a9a0:	f7f5 ff87 	bl	8b2 <TfLiteTypeGetName>
    a9a4:	9a00      	ldr	r2, [sp, #0]
    a9a6:	4934      	ldr	r1, [pc, #208]	; (aa78 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    a9a8:	4603      	mov	r3, r0
    a9aa:	4630      	mov	r0, r6
    a9ac:	47a0      	blx	r4
}
    a9ae:	4638      	mov	r0, r7
    a9b0:	b00f      	add	sp, #60	; 0x3c
    a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt32) {
    a9b6:	2f02      	cmp	r7, #2
    a9b8:	d159      	bne.n	aa6e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
        MatchingFlatSize(GetTensorShape(input), GetTensorShape(output));
    a9ba:	4621      	mov	r1, r4
    a9bc:	a802      	add	r0, sp, #8
    a9be:	9200      	str	r2, [sp, #0]
    a9c0:	f00a ffb8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a9c4:	4629      	mov	r1, r5
    a9c6:	a808      	add	r0, sp, #32
    a9c8:	f00a ffb4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a9cc:	a908      	add	r1, sp, #32
    a9ce:	a802      	add	r0, sp, #8
    a9d0:	f00a ff87 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a9d4:	4607      	mov	r7, r0
    a9d6:	a808      	add	r0, sp, #32
    a9d8:	f00a ff67 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    a9dc:	a802      	add	r0, sp, #8
    a9de:	f00a ff64 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    switch (input->type) {
    a9e2:	9a00      	ldr	r2, [sp, #0]
    a9e4:	f81b 0002 	ldrb.w	r0, [fp, r2]
    a9e8:	2807      	cmp	r0, #7
    a9ea:	d010      	beq.n	aa0e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
    a9ec:	2809      	cmp	r0, #9
    a9ee:	d026      	beq.n	aa3e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a9f0:	6974      	ldr	r4, [r6, #20]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a9f2:	f7f5 ff5e 	bl	8b2 <TfLiteTypeGetName>
    a9f6:	9000      	str	r0, [sp, #0]
    a9f8:	f81b 000a 	ldrb.w	r0, [fp, sl]
    a9fc:	f7f5 ff59 	bl	8b2 <TfLiteTypeGetName>
    aa00:	9a00      	ldr	r2, [sp, #0]
    aa02:	491d      	ldr	r1, [pc, #116]	; (aa78 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    aa04:	4603      	mov	r3, r0
    aa06:	4630      	mov	r0, r6
    aa08:	47a0      	blx	r4
    return kTfLiteError;
    aa0a:	2701      	movs	r7, #1
    aa0c:	e7cf      	b.n	a9ae <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        reference_ops::Requantize(
    aa0e:	692e      	ldr	r6, [r5, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa10:	686d      	ldr	r5, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    aa12:	f8d4 9004 	ldr.w	r9, [r4, #4]
    aa16:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
    aa1a:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa1e:	2400      	movs	r4, #0
      }
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
    aa20:	42a7      	cmp	r7, r4
    aa22:	ddb5      	ble.n	a990 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
    aa24:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    aa28:	465a      	mov	r2, fp
    aa2a:	4651      	mov	r1, sl
    aa2c:	eba0 0008 	sub.w	r0, r0, r8
    aa30:	f7fe ff24 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    aa34:	4430      	add	r0, r6
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
    aa36:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
    aa3a:	3401      	adds	r4, #1
    aa3c:	e7f0      	b.n	aa20 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
        reference_ops::Requantize(
    aa3e:	692e      	ldr	r6, [r5, #16]
    aa40:	686d      	ldr	r5, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    aa42:	f8d4 9004 	ldr.w	r9, [r4, #4]
    aa46:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
    aa4a:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa4e:	2400      	movs	r4, #0
    aa50:	42a7      	cmp	r7, r4
    aa52:	dd9d      	ble.n	a990 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
    aa54:	f919 0004 	ldrsb.w	r0, [r9, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    aa58:	465a      	mov	r2, fp
    aa5a:	4651      	mov	r1, sl
    aa5c:	eba0 0008 	sub.w	r0, r0, r8
    aa60:	f7fe ff0c 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    aa64:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
    aa66:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
    aa6a:	3401      	adds	r4, #1
    aa6c:	e7f0      	b.n	aa50 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    aa6e:	6944      	ldr	r4, [r0, #20]
    aa70:	f81b 0002 	ldrb.w	r0, [fp, r2]
    aa74:	e7bd      	b.n	a9f2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x192>
    aa76:	bf00      	nop
    aa78:	0002b4db 	.word	0x0002b4db

0000aa7c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    aa7c:	4800      	ldr	r0, [pc, #0]	; (aa80 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x4>)
    aa7e:	4770      	bx	lr
    aa80:	20000248 	.word	0x20000248

0000aa84 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
  return type == kTfLiteBool;
}

typedef bool (*IsSupportedType)(TfLiteType);
template <IsSupportedType>
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
    aa84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    aa88:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    aa8a:	6816      	ldr	r6, [r2, #0]
    aa8c:	2e01      	cmp	r6, #1
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
    aa8e:	b085      	sub	sp, #20
    aa90:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    aa92:	d00f      	beq.n	aab4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x30>
    aa94:	2401      	movs	r4, #1
    aa96:	4b27      	ldr	r3, [pc, #156]	; (ab34 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
    aa98:	9301      	str	r3, [sp, #4]
    aa9a:	e9cd 6402 	strd	r6, r4, [sp, #8]
    aa9e:	4b26      	ldr	r3, [pc, #152]	; (ab38 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb4>)
    aaa0:	9300      	str	r3, [sp, #0]
    aaa2:	6945      	ldr	r5, [r0, #20]
    aaa4:	4a25      	ldr	r2, [pc, #148]	; (ab3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    aaa6:	4926      	ldr	r1, [pc, #152]	; (ab40 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
    aaa8:	2327      	movs	r3, #39	; 0x27
    aaaa:	47a8      	blx	r5
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
                       TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
  }
  return kTfLiteOk;
}
    aaac:	4620      	mov	r0, r4
    aaae:	b005      	add	sp, #20
    aab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    aab4:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    aab6:	681c      	ldr	r4, [r3, #0]
    aab8:	2c01      	cmp	r4, #1
    aaba:	d00c      	beq.n	aad6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x52>
    aabc:	e9cd 4602 	strd	r4, r6, [sp, #8]
    aac0:	4b1c      	ldr	r3, [pc, #112]	; (ab34 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
    aac2:	9301      	str	r3, [sp, #4]
    aac4:	4b1f      	ldr	r3, [pc, #124]	; (ab44 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc0>)
    aac6:	9300      	str	r3, [sp, #0]
    aac8:	6944      	ldr	r4, [r0, #20]
    aaca:	4a1c      	ldr	r2, [pc, #112]	; (ab3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    aacc:	491c      	ldr	r1, [pc, #112]	; (ab40 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
    aace:	2328      	movs	r3, #40	; 0x28
    aad0:	47a0      	blx	r4
    aad2:	4634      	mov	r4, r6
    aad4:	e7ea      	b.n	aaac <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return &context->tensors[node->outputs->data[index]];
    aad6:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    aad8:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    aada:	6887      	ldr	r7, [r0, #8]
    aadc:	01b6      	lsls	r6, r6, #6
  return &context->tensors[node->outputs->data[index]];
    aade:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    aae2:	5db8      	ldrb	r0, [r7, r6]
    aae4:	f817 3008 	ldrb.w	r3, [r7, r8]
    aae8:	4283      	cmp	r3, r0
    aaea:	d014      	beq.n	ab16 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x92>
    aaec:	f8d5 9014 	ldr.w	r9, [r5, #20]
    aaf0:	f7f5 fedf 	bl	8b2 <TfLiteTypeGetName>
    aaf4:	4606      	mov	r6, r0
    aaf6:	f817 0008 	ldrb.w	r0, [r7, r8]
    aafa:	f7f5 feda 	bl	8b2 <TfLiteTypeGetName>
    aafe:	4b12      	ldr	r3, [pc, #72]	; (ab48 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
    ab00:	9301      	str	r3, [sp, #4]
    ab02:	4b12      	ldr	r3, [pc, #72]	; (ab4c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc8>)
    ab04:	9300      	str	r3, [sp, #0]
    ab06:	e9cd 6002 	strd	r6, r0, [sp, #8]
    ab0a:	4a0c      	ldr	r2, [pc, #48]	; (ab3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    ab0c:	4910      	ldr	r1, [pc, #64]	; (ab50 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
    ab0e:	232b      	movs	r3, #43	; 0x2b
    ab10:	4628      	mov	r0, r5
    ab12:	47c8      	blx	r9
    ab14:	e7ca      	b.n	aaac <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  if (!IsSupportedType(input->type)) {
    ab16:	b953      	cbnz	r3, ab2e <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
    ab18:	4618      	mov	r0, r3
    ab1a:	f8d5 8014 	ldr.w	r8, [r5, #20]
    ab1e:	f7f5 fec8 	bl	8b2 <TfLiteTypeGetName>
    ab22:	5dbb      	ldrb	r3, [r7, r6]
    ab24:	490b      	ldr	r1, [pc, #44]	; (ab54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd0>)
    ab26:	4602      	mov	r2, r0
    ab28:	4628      	mov	r0, r5
    ab2a:	47c0      	blx	r8
    return kTfLiteError;
    ab2c:	e7be      	b.n	aaac <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return kTfLiteOk;
    ab2e:	2400      	movs	r4, #0
    ab30:	e7bc      	b.n	aaac <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
    ab32:	bf00      	nop
    ab34:	0002bbe9 	.word	0x0002bbe9
    ab38:	0002af69 	.word	0x0002af69
    ab3c:	0002b4fe 	.word	0x0002b4fe
    ab40:	0002af4f 	.word	0x0002af4f
    ab44:	0002af79 	.word	0x0002af79
    ab48:	0002b75c 	.word	0x0002b75c
    ab4c:	0002b774 	.word	0x0002b774
    ab50:	0002af8a 	.word	0x0002af8a
    ab54:	0002b52b 	.word	0x0002b52b

0000ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>:

template <typename T>
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
    ab58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ab5c:	4692      	mov	sl, r2
  return &context->tensors[node->inputs->data[index]];
    ab5e:	680a      	ldr	r2, [r1, #0]
                             T func(T), TfLiteType expected_type) {
  const TfLiteTensor* input = GetInput(context, node, 0);
    ab60:	6883      	ldr	r3, [r0, #8]
    ab62:	6854      	ldr	r4, [r2, #4]
    ab64:	01a2      	lsls	r2, r4, #6
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
    ab66:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
    ab68:	5c98      	ldrb	r0, [r3, r2]
    ab6a:	2801      	cmp	r0, #1
    ab6c:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    ab70:	d015      	beq.n	ab9e <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x46>
    ab72:	696e      	ldr	r6, [r5, #20]
    ab74:	f7f5 fe9d 	bl	8b2 <TfLiteTypeGetName>
    ab78:	4604      	mov	r4, r0
    ab7a:	2001      	movs	r0, #1
    ab7c:	f7f5 fe99 	bl	8b2 <TfLiteTypeGetName>
    ab80:	4b1f      	ldr	r3, [pc, #124]	; (ac00 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa8>)
    ab82:	9301      	str	r3, [sp, #4]
    ab84:	4b1f      	ldr	r3, [pc, #124]	; (ac04 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xac>)
    ab86:	9300      	str	r3, [sp, #0]
    ab88:	e9cd 4002 	strd	r4, r0, [sp, #8]
    ab8c:	4a1e      	ldr	r2, [pc, #120]	; (ac08 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb0>)
    ab8e:	491f      	ldr	r1, [pc, #124]	; (ac0c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb4>)
    ab90:	4628      	mov	r0, r5
    ab92:	2339      	movs	r3, #57	; 0x39
    ab94:	47b0      	blx	r6
    ab96:	2001      	movs	r0, #1
  T* out_data = GetTensorData<T>(output);
  for (int64_t i = 0; i < num_elements; ++i) {
    out_data[i] = func(in_data[i]);
  }
  return kTfLiteOk;
}
    ab98:	b004      	add	sp, #16
    ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
    ab9e:	68a2      	ldr	r2, [r4, #8]
    aba0:	f852 eb04 	ldr.w	lr, [r2], #4
    aba4:	2000      	movs	r0, #0
  int64_t count = 1;
    aba6:	f04f 0801 	mov.w	r8, #1
    abaa:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < dims->size; ++i) {
    abae:	4586      	cmp	lr, r0
    abb0:	dd0c      	ble.n	abcc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x74>
    count *= dims->data[i];
    abb2:	f852 cb04 	ldr.w	ip, [r2], #4
    abb6:	4666      	mov	r6, ip
    abb8:	17f7      	asrs	r7, r6, #31
    abba:	fb08 f507 	mul.w	r5, r8, r7
    abbe:	fb0c 5509 	mla	r5, ip, r9, r5
    abc2:	fba8 890c 	umull	r8, r9, r8, ip
    abc6:	44a9      	add	r9, r5
  for (int i = 0; i < dims->size; ++i) {
    abc8:	3001      	adds	r0, #1
    abca:	e7f0      	b.n	abae <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x56>
  return &context->tensors[node->outputs->data[index]];
    abcc:	684a      	ldr	r2, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    abce:	6865      	ldr	r5, [r4, #4]
    abd0:	6852      	ldr	r2, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    abd2:	eb13 1482 	adds.w	r4, r3, r2, lsl #6
  for (int64_t i = 0; i < num_elements; ++i) {
    abd6:	f04f 0600 	mov.w	r6, #0
    abda:	bf18      	it	ne
    abdc:	6864      	ldrne	r4, [r4, #4]
    abde:	2700      	movs	r7, #0
    abe0:	4546      	cmp	r6, r8
    abe2:	eb77 0309 	sbcs.w	r3, r7, r9
    abe6:	da08      	bge.n	abfa <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa2>
    out_data[i] = func(in_data[i]);
    abe8:	ecb5 0a01 	vldmia	r5!, {s0}
    abec:	47d0      	blx	sl
  for (int64_t i = 0; i < num_elements; ++i) {
    abee:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
    abf0:	eca4 0a01 	vstmia	r4!, {s0}
  for (int64_t i = 0; i < num_elements; ++i) {
    abf4:	f147 0700 	adc.w	r7, r7, #0
    abf8:	e7f2      	b.n	abe0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x88>
  return kTfLiteOk;
    abfa:	2000      	movs	r0, #0
    abfc:	e7cc      	b.n	ab98 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x40>
    abfe:	bf00      	nop
    ac00:	0002b555 	.word	0x0002b555
    ac04:	0002b774 	.word	0x0002b774
    ac08:	0002b4fe 	.word	0x0002b4fe
    ac0c:	0002af8a 	.word	0x0002af8a

0000ac10 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:

inline TfLiteStatus EvalNumeric(TfLiteContext* context, TfLiteNode* node,
                                float float_func(float)) {
  return EvalImpl<float>(context, node, float_func, kTfLiteFloat32);
    ac10:	4a01      	ldr	r2, [pc, #4]	; (ac18 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac12:	f7ff bfa1 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac16:	bf00      	nop
    ac18:	00019b6d 	.word	0x00019b6d

0000ac1c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
    ac1c:	4a01      	ldr	r2, [pc, #4]	; (ac24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac1e:	f7ff bf9b 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac22:	bf00      	nop
    ac24:	00019b67 	.word	0x00019b67

0000ac28 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
    ac28:	4a01      	ldr	r2, [pc, #4]	; (ac30 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac2a:	f7ff bf95 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac2e:	bf00      	nop
    ac30:	00019b77 	.word	0x00019b77

0000ac34 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
    ac34:	4a01      	ldr	r2, [pc, #4]	; (ac3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac36:	f7ff bf8f 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac3a:	bf00      	nop
    ac3c:	00019b7b 	.word	0x00019b7b

0000ac40 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
    ac40:	4a01      	ldr	r2, [pc, #4]	; (ac48 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac42:	f7ff bf89 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac46:	bf00      	nop
    ac48:	00019b89 	.word	0x00019b89

0000ac4c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
    ac4c:	4a01      	ldr	r2, [pc, #4]	; (ac54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac4e:	f7ff bf83 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac52:	bf00      	nop
    ac54:	00019b7f 	.word	0x00019b7f

0000ac58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
    ac58:	4a01      	ldr	r2, [pc, #4]	; (ac60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac5a:	f7ff bf7d 	b.w	ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac5e:	bf00      	nop
    ac60:	00019b83 	.word	0x00019b83

0000ac64 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
    ac64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
    ac68:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, 0);
    ac6a:	6883      	ldr	r3, [r0, #8]
    ac6c:	6852      	ldr	r2, [r2, #4]
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
    ac6e:	4604      	mov	r4, r0
    ac70:	0190      	lsls	r0, r2, #6
    ac72:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
    ac76:	5c18      	ldrb	r0, [r3, r0]
    ac78:	2806      	cmp	r0, #6
    ac7a:	d015      	beq.n	aca8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
    ac7c:	6966      	ldr	r6, [r4, #20]
    ac7e:	f7f5 fe18 	bl	8b2 <TfLiteTypeGetName>
    ac82:	4605      	mov	r5, r0
    ac84:	2006      	movs	r0, #6
    ac86:	f7f5 fe14 	bl	8b2 <TfLiteTypeGetName>
    ac8a:	4b1f      	ldr	r3, [pc, #124]	; (ad08 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa4>)
    ac8c:	9301      	str	r3, [sp, #4]
    ac8e:	4b1f      	ldr	r3, [pc, #124]	; (ad0c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    ac90:	9300      	str	r3, [sp, #0]
    ac92:	e9cd 5002 	strd	r5, r0, [sp, #8]
    ac96:	4a1e      	ldr	r2, [pc, #120]	; (ad10 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    ac98:	491e      	ldr	r1, [pc, #120]	; (ad14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    ac9a:	4620      	mov	r0, r4
    ac9c:	2339      	movs	r3, #57	; 0x39
    ac9e:	47b0      	blx	r6
    aca0:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
    aca2:	b004      	add	sp, #16
    aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < dims->size; ++i) {
    aca8:	6890      	ldr	r0, [r2, #8]
    acaa:	f850 8b04 	ldr.w	r8, [r0], #4
    acae:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    acb2:	2401      	movs	r4, #1
    acb4:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
    acb6:	45e0      	cmp	r8, ip
    acb8:	dd0d      	ble.n	acd6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x72>
    count *= dims->data[i];
    acba:	f850 eb04 	ldr.w	lr, [r0], #4
    acbe:	4676      	mov	r6, lr
    acc0:	17f7      	asrs	r7, r6, #31
    acc2:	fb04 f607 	mul.w	r6, r4, r7
    acc6:	fb0e 6605 	mla	r6, lr, r5, r6
    acca:	fba4 450e 	umull	r4, r5, r4, lr
    acce:	4435      	add	r5, r6
  for (int i = 0; i < dims->size; ++i) {
    acd0:	f10c 0c01 	add.w	ip, ip, #1
    acd4:	e7ef      	b.n	acb6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x52>
  return &context->tensors[node->outputs->data[index]];
    acd6:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    acd8:	6857      	ldr	r7, [r2, #4]
    acda:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    acdc:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int64_t i = 0; i < num_elements; ++i) {
    ace0:	f04f 0200 	mov.w	r2, #0
    ace4:	bf18      	it	ne
    ace6:	6849      	ldrne	r1, [r1, #4]
    ace8:	2300      	movs	r3, #0
    acea:	42a2      	cmp	r2, r4
    acec:	eb73 0005 	sbcs.w	r0, r3, r5
    acf0:	da07      	bge.n	ad02 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return EvalLogical(context, node, [](bool v) { return !v; });
    acf2:	5cb8      	ldrb	r0, [r7, r2]
    acf4:	f080 0001 	eor.w	r0, r0, #1
    out_data[i] = func(in_data[i]);
    acf8:	5488      	strb	r0, [r1, r2]
  for (int64_t i = 0; i < num_elements; ++i) {
    acfa:	3201      	adds	r2, #1
    acfc:	f143 0300 	adc.w	r3, r3, #0
    ad00:	e7f3      	b.n	acea <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
    ad02:	2000      	movs	r0, #0
    ad04:	e7cd      	b.n	aca2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x3e>
    ad06:	bf00      	nop
    ad08:	0002b555 	.word	0x0002b555
    ad0c:	0002b774 	.word	0x0002b774
    ad10:	0002b4fe 	.word	0x0002b4fe
    ad14:	0002af8a 	.word	0x0002af8a

0000ad18 <_ZN6tflite3ops5micro12Register_ABSEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad18:	4800      	ldr	r0, [pc, #0]	; (ad1c <_ZN6tflite3ops5micro12Register_ABSEv+0x4>)
    ad1a:	4770      	bx	lr
    ad1c:	20000268 	.word	0x20000268

0000ad20 <_ZN6tflite3ops5micro12Register_SINEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad20:	4800      	ldr	r0, [pc, #0]	; (ad24 <_ZN6tflite3ops5micro12Register_SINEv+0x4>)
    ad22:	4770      	bx	lr
    ad24:	200002c8 	.word	0x200002c8

0000ad28 <_ZN6tflite3ops5micro12Register_COSEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad28:	4800      	ldr	r0, [pc, #0]	; (ad2c <_ZN6tflite3ops5micro12Register_COSEv+0x4>)
    ad2a:	4770      	bx	lr
    ad2c:	20000288 	.word	0x20000288

0000ad30 <_ZN6tflite3ops5micro12Register_LOGEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad30:	4800      	ldr	r0, [pc, #0]	; (ad34 <_ZN6tflite3ops5micro12Register_LOGEv+0x4>)
    ad32:	4770      	bx	lr
    ad34:	200002a8 	.word	0x200002a8

0000ad38 <_ZN6tflite3ops5micro13Register_SQRTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad38:	4800      	ldr	r0, [pc, #0]	; (ad3c <_ZN6tflite3ops5micro13Register_SQRTEv+0x4>)
    ad3a:	4770      	bx	lr
    ad3c:	200002e8 	.word	0x200002e8

0000ad40 <_ZN6tflite3ops5micro14Register_RSQRTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad40:	4800      	ldr	r0, [pc, #0]	; (ad44 <_ZN6tflite3ops5micro14Register_RSQRTEv+0x4>)
    ad42:	4770      	bx	lr
    ad44:	20000308 	.word	0x20000308

0000ad48 <_ZN6tflite3ops5micro15Register_SQUAREEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad48:	4800      	ldr	r0, [pc, #0]	; (ad4c <_ZN6tflite3ops5micro15Register_SQUAREEv+0x4>)
    ad4a:	4770      	bx	lr
    ad4c:	20000328 	.word	0x20000328

0000ad50 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad50:	4800      	ldr	r0, [pc, #0]	; (ad54 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x4>)
    ad52:	4770      	bx	lr
    ad54:	20000348 	.word	0x20000348

0000ad58 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>:
namespace ops {
namespace micro {
namespace custom {
TfLiteRegistration* Register_ETHOSU() { return nullptr; }

const char* GetString_ETHOSU() { return ""; }
    ad58:	4800      	ldr	r0, [pc, #0]	; (ad5c <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv+0x4>)
    ad5a:	4770      	bx	lr
    ad5c:	00029427 	.word	0x00029427

0000ad60 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    ad60:	680b      	ldr	r3, [r1, #0]
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad66:	685d      	ldr	r5, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ad68:	6884      	ldr	r4, [r0, #8]
    ad6a:	01ab      	lsls	r3, r5, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad6c:	4606      	mov	r6, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    ad6e:	5ce0      	ldrb	r0, [r4, r3]
    ad70:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad72:	b090      	sub	sp, #64	; 0x40
    ad74:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    ad78:	d015      	beq.n	ada6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    ad7a:	6975      	ldr	r5, [r6, #20]
    ad7c:	f7f5 fd99 	bl	8b2 <TfLiteTypeGetName>
    ad80:	4604      	mov	r4, r0
    ad82:	2001      	movs	r0, #1
    ad84:	f7f5 fd95 	bl	8b2 <TfLiteTypeGetName>
    ad88:	4b2a      	ldr	r3, [pc, #168]	; (ae34 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
    ad8a:	9301      	str	r3, [sp, #4]
    ad8c:	4b2a      	ldr	r3, [pc, #168]	; (ae38 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
    ad8e:	9300      	str	r3, [sp, #0]
    ad90:	e9cd 4002 	strd	r4, r0, [sp, #8]
    ad94:	4a29      	ldr	r2, [pc, #164]	; (ae3c <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
    ad96:	492a      	ldr	r1, [pc, #168]	; (ae40 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
    ad98:	4630      	mov	r0, r6
    ad9a:	2320      	movs	r3, #32
    ad9c:	47a8      	blx	r5
    ad9e:	2001      	movs	r0, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
    ada0:	b010      	add	sp, #64	; 0x40
    ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
    ada6:	684b      	ldr	r3, [r1, #4]
    ada8:	685b      	ldr	r3, [r3, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
    adaa:	4629      	mov	r1, r5
    adac:	eb04 1483 	add.w	r4, r4, r3, lsl #6
    adb0:	a804      	add	r0, sp, #16
    adb2:	f00a fdbf 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
    adb6:	4621      	mov	r1, r4
    adb8:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    adba:	f8d5 8004 	ldr.w	r8, [r5, #4]
    adbe:	f00a fdb9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    adc2:	b104      	cbz	r4, adc6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
    adc4:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    adc6:	9e04      	ldr	r6, [sp, #16]
    adc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adca:	429e      	cmp	r6, r3
    adcc:	d001      	beq.n	add2 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x72>
    adce:	f013 fc00 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
    add2:	2500      	movs	r5, #0
    add4:	42ae      	cmp	r6, r5
    add6:	dd0c      	ble.n	adf2 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    add8:	4629      	mov	r1, r5
    adda:	a804      	add	r0, sp, #16
    addc:	f00a fd70 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    ade0:	4629      	mov	r1, r5
    ade2:	4607      	mov	r7, r0
    ade4:	a80a      	add	r0, sp, #40	; 0x28
    ade6:	f00a fd6b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    adea:	4287      	cmp	r7, r0
    adec:	d1ef      	bne.n	adce <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  for (int i = 0; i < dims_count; ++i) {
    adee:	3501      	adds	r5, #1
    adf0:	e7f0      	b.n	add4 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    adf2:	2e05      	cmp	r6, #5
    adf4:	bfcc      	ite	gt
    adf6:	9a05      	ldrgt	r2, [sp, #20]
    adf8:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
    adfa:	2300      	movs	r3, #0
    int buffer_size = 1;
    adfc:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
    adfe:	429e      	cmp	r6, r3
    ae00:	dc0a      	bgt.n	ae18 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xb8>

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    ae02:	2600      	movs	r6, #0
    ae04:	42be      	cmp	r6, r7
    ae06:	da0c      	bge.n	ae22 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
    ae08:	ecb8 0a01 	vldmia	r8!, {s0}
    ae0c:	f007 f986 	bl	1211c <floorf>
    ae10:	3601      	adds	r6, #1
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
    ae12:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    ae16:	e7f5      	b.n	ae04 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
      buffer_size *= dims_data[i];
    ae18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    ae1c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    ae1e:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
    ae20:	e7ed      	b.n	adfe <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    ae22:	a80a      	add	r0, sp, #40	; 0x28
    ae24:	f00a fd41 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
    ae28:	a804      	add	r0, sp, #16
    ae2a:	f00a fd3e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    ae2e:	2000      	movs	r0, #0
    ae30:	e7b6      	b.n	ada0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    ae32:	bf00      	nop
    ae34:	0002afa4 	.word	0x0002afa4
    ae38:	0002b774 	.word	0x0002b774
    ae3c:	0002b563 	.word	0x0002b563
    ae40:	0002af8a 	.word	0x0002af8a

0000ae44 <_ZN6tflite3ops5micro14Register_FLOOREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ae44:	4800      	ldr	r0, [pc, #0]	; (ae48 <_ZN6tflite3ops5micro14Register_FLOOREv+0x4>)
    ae46:	4770      	bx	lr
    ae48:	20000368 	.word	0x20000368

0000ae4c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ae4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    ae50:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ae52:	b089      	sub	sp, #36	; 0x24
    ae54:	4604      	mov	r4, r0
    ae56:	460a      	mov	r2, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    ae58:	b90f      	cbnz	r7, ae5e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    ae5a:	f013 fbba 	bl	1e5d2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ae5e:	f8d1 9014 	ldr.w	r9, [r1, #20]
    ae62:	f1b9 0f00 	cmp.w	r9, #0
    ae66:	d0f8      	beq.n	ae5a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ae68:	f8d1 e000 	ldr.w	lr, [r1]
    ae6c:	6885      	ldr	r5, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
    ae6e:	f8de 3000 	ldr.w	r3, [lr]
  return &context->tensors[node->inputs->data[index]];
    ae72:	f8de 1004 	ldr.w	r1, [lr, #4]
  const bool use_tensor = index < node->inputs->size &&
    ae76:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    ae78:	ea4f 1081 	mov.w	r0, r1, lsl #6
    ae7c:	eb05 1181 	add.w	r1, r5, r1, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    ae80:	dd27      	ble.n	aed2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    ae82:	f8de 300c 	ldr.w	r3, [lr, #12]
  const bool use_tensor = index < node->inputs->size &&
    ae86:	1c5e      	adds	r6, r3, #1
    ae88:	d023      	beq.n	aed2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    return &context->tensors[node->inputs->data[index]];
    ae8a:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    ae8e:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    ae90:	5c28      	ldrb	r0, [r5, r0]
    ae92:	6856      	ldr	r6, [r2, #4]
    ae94:	ea4f 1886 	mov.w	r8, r6, lsl #6
    ae98:	eb05 1686 	add.w	r6, r5, r6, lsl #6
    ae9c:	f815 c008 	ldrb.w	ip, [r5, r8]
    aea0:	4584      	cmp	ip, r0
    aea2:	d018      	beq.n	aed6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    aea4:	6967      	ldr	r7, [r4, #20]
    aea6:	f7f5 fd04 	bl	8b2 <TfLiteTypeGetName>
    aeaa:	4606      	mov	r6, r0
    aeac:	f815 0008 	ldrb.w	r0, [r5, r8]
    aeb0:	f7f5 fcff 	bl	8b2 <TfLiteTypeGetName>
    aeb4:	4b22      	ldr	r3, [pc, #136]	; (af40 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    aeb6:	9301      	str	r3, [sp, #4]
    aeb8:	4b22      	ldr	r3, [pc, #136]	; (af44 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    aeba:	9300      	str	r3, [sp, #0]
    aebc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    aec0:	4a21      	ldr	r2, [pc, #132]	; (af48 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    aec2:	4922      	ldr	r1, [pc, #136]	; (af4c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    aec4:	2360      	movs	r3, #96	; 0x60
    aec6:	4620      	mov	r0, r4
    aec8:	47b8      	blx	r7
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    aeca:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
    aecc:	b009      	add	sp, #36	; 0x24
    aece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
    aed2:	2300      	movs	r3, #0
    aed4:	e7db      	b.n	ae8e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
    aed6:	f8de 2008 	ldr.w	r2, [lr, #8]
    aeda:	0190      	lsls	r0, r2, #6
    aedc:	eb05 1282 	add.w	r2, r5, r2, lsl #6
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    aee0:	5c28      	ldrb	r0, [r5, r0]
    aee2:	4560      	cmp	r0, ip
    aee4:	d004      	beq.n	aef0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
    aee6:	6963      	ldr	r3, [r4, #20]
    aee8:	4919      	ldr	r1, [pc, #100]	; (af50 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    aeea:	4620      	mov	r0, r4
    aeec:	4798      	blx	r3
    aeee:	e7ec      	b.n	aeca <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  if (data_type != kTfLiteFloat32) {
    aef0:	2801      	cmp	r0, #1
    aef2:	d023      	beq.n	af3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    aef4:	a806      	add	r0, sp, #24
  return CalculateOpData(context, params->activation, input->type, input,
    aef6:	f899 5000 	ldrb.w	r5, [r9]
    double real_multiplier = 0.0;
    aefa:	f04f 0800 	mov.w	r8, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    aefe:	e9cd 6000 	strd	r6, r0, [sp]
    double real_multiplier = 0.0;
    af02:	f04f 0900 	mov.w	r9, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af06:	4620      	mov	r0, r4
    double real_multiplier = 0.0;
    af08:	e9cd 8906 	strd	r8, r9, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af0c:	f7f6 fabc 	bl	1488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    af10:	2800      	cmp	r0, #0
    af12:	d1db      	bne.n	aecc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
    af14:	a905      	add	r1, sp, #20
    af16:	4638      	mov	r0, r7
    af18:	ed9d 0b06 	vldr	d0, [sp, #24]
    af1c:	f006 fbf8 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->output_shift = -exponent;
    af20:	9b05      	ldr	r3, [sp, #20]
    af22:	425b      	negs	r3, r3
    af24:	607b      	str	r3, [r7, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    af26:	f107 030c 	add.w	r3, r7, #12
    af2a:	9300      	str	r3, [sp, #0]
    af2c:	4632      	mov	r2, r6
    af2e:	f107 0308 	add.w	r3, r7, #8
    af32:	4629      	mov	r1, r5
    af34:	4620      	mov	r0, r4
    af36:	f006 fca3 	bl	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    af3a:	e7c7      	b.n	aecc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return status;
    af3c:	2000      	movs	r0, #0
    af3e:	e7c5      	b.n	aecc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    af40:	0002b75c 	.word	0x0002b75c
    af44:	0002b774 	.word	0x0002b774
    af48:	0002b58a 	.word	0x0002b58a
    af4c:	0002af8a 	.word	0x0002af8a
    af50:	0002b5bb 	.word	0x0002b5bb

0000af54 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
    af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af58:	ed2d 8b02 	vpush	{d8}
    af5c:	b09d      	sub	sp, #116	; 0x74
  if (activation == kTfLiteActRelu) {
    af5e:	2a01      	cmp	r2, #1
    af60:	e9dd 8528 	ldrd	r8, r5, [sp, #160]	; 0xa0
    af64:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
    af68:	461c      	mov	r4, r3
    af6a:	d069      	beq.n	b040 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xec>
  } else if (activation == kTfLiteActRelu6) {
    af6c:	2a03      	cmp	r2, #3
    af6e:	d06c      	beq.n	b04a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf6>
    *activation_max = std::numeric_limits<T>::max();
    af70:	eddf 7a53 	vldr	s15, [pc, #332]	; b0c0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    af74:	2a02      	cmp	r2, #2
    af76:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    af7a:	bf18      	it	ne
    af7c:	eef0 8a67 	vmovne.f32	s17, s15
    af80:	eddf 7a50 	vldr	s15, [pc, #320]	; b0c4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x170>
    af84:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    af88:	bf18      	it	ne
    af8a:	eeb0 8a67 	vmovne.f32	s16, s15
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    af8e:	4621      	mov	r1, r4
    af90:	a804      	add	r0, sp, #16
    af92:	f00a fccf 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    af96:	b104      	cbz	r4, af9a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x46>
    af98:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(filter), GetTensorData<float>(filter),
    af9a:	4641      	mov	r1, r8
    af9c:	a80a      	add	r0, sp, #40	; 0x28
    af9e:	f00a fcc9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    afa2:	f1b8 0f00 	cmp.w	r8, #0
    afa6:	d001      	beq.n	afac <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x58>
    afa8:	f8d8 8004 	ldr.w	r8, [r8, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    afac:	4629      	mov	r1, r5
    afae:	a810      	add	r0, sp, #64	; 0x40
    afb0:	f00a fcc0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    afb4:	b105      	cbz	r5, afb8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x64>
    afb6:	686d      	ldr	r5, [r5, #4]
    afb8:	4649      	mov	r1, r9
    afba:	a816      	add	r0, sp, #88	; 0x58
    afbc:	f00a fcba 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    afc0:	f1b9 0f00 	cmp.w	r9, #0
    afc4:	d001      	beq.n	afca <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x76>
    afc6:	f8d9 9004 	ldr.w	r9, [r9, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    afca:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const int weights_dims_count = weights_shape.DimensionsCount();
    afcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    afce:	3b01      	subs	r3, #1
    afd0:	4619      	mov	r1, r3
    afd2:	a816      	add	r0, sp, #88	; 0x58
    afd4:	9300      	str	r3, [sp, #0]
    afd6:	f00e fdf0 	bl	19bba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    afda:	9b00      	ldr	r3, [sp, #0]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    afdc:	9002      	str	r0, [sp, #8]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    afde:	1eb1      	subs	r1, r6, #2
    afe0:	aa16      	add	r2, sp, #88	; 0x58
    afe2:	a80a      	add	r0, sp, #40	; 0x28
    afe4:	f00d fb19 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    afe8:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    afea:	4683      	mov	fp, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    afec:	a80a      	add	r0, sp, #40	; 0x28
    afee:	f00a fc67 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    aff2:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    aff4:	eddf 6a34 	vldr	s13, [pc, #208]	; b0c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    aff8:	9300      	str	r3, [sp, #0]
  for (int b = 0; b < batches; ++b) {
    affa:	461e      	mov	r6, r3
    affc:	9a02      	ldr	r2, [sp, #8]
    affe:	42b2      	cmp	r2, r6
    b000:	dd4b      	ble.n	b09a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x146>
    b002:	9a00      	ldr	r2, [sp, #0]
    b004:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    b008:	9201      	str	r2, [sp, #4]
    b00a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    b00e:	9203      	str	r2, [sp, #12]
    b010:	2200      	movs	r2, #0
    b012:	462f      	mov	r7, r5
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b014:	4694      	mov	ip, r2
    b016:	45e3      	cmp	fp, ip
    b018:	dd39      	ble.n	b08e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x13a>
    b01a:	f8dd a00c 	ldr.w	sl, [sp, #12]
      float total = 0.f;
    b01e:	eddf 7a2a 	vldr	s15, [pc, #168]	; b0c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
    b022:	eb08 0182 	add.w	r1, r8, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
    b026:	f04f 0e00 	mov.w	lr, #0
    b02a:	4570      	cmp	r0, lr
    b02c:	dd10      	ble.n	b050 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfc>
        total += input_data[b * accum_depth + d] *
    b02e:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
    b032:	ecb1 7a01 	vldmia	r1!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
    b036:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
    b03a:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
    b03e:	e7f4      	b.n	b02a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd6>
    *activation_max = std::numeric_limits<T>::max();
    b040:	eddf 8a1f 	vldr	s17, [pc, #124]	; b0c0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    *activation_min = 0;
    b044:	ed9f 8a20 	vldr	s16, [pc, #128]	; b0c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
    b048:	e7a1      	b.n	af8e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x3a>
    *activation_max = 6;
    b04a:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
    b04e:	e7f9      	b.n	b044 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf0>
      if (bias_data) {
    b050:	b1d5      	cbz	r5, b088 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x134>
        bias_value = bias_data[out_c];
    b052:	ed97 7a00 	vldr	s14, [r7]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    b056:	9901      	ldr	r1, [sp, #4]
    b058:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b05c:	f10c 0c01 	add.w	ip, ip, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    b060:	eef4 7ac8 	vcmpe.f32	s15, s16
    b064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b068:	bfb8      	it	lt
    b06a:	eef0 7a48 	vmovlt.f32	s15, s16
    b06e:	eef4 7ae8 	vcmpe.f32	s15, s17
    b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b076:	bf88      	it	hi
    b078:	eef0 7a68 	vmovhi.f32	s15, s17
    b07c:	ece1 7a01 	vstmia	r1!, {s15}
    b080:	9101      	str	r1, [sp, #4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b082:	3704      	adds	r7, #4
    b084:	4402      	add	r2, r0
    b086:	e7c6      	b.n	b016 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xc2>
      float bias_value = 0.0f;
    b088:	eeb0 7a66 	vmov.f32	s14, s13
    b08c:	e7e3      	b.n	b056 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x102>
  for (int b = 0; b < batches; ++b) {
    b08e:	9a00      	ldr	r2, [sp, #0]
    b090:	445a      	add	r2, fp
    b092:	3601      	adds	r6, #1
    b094:	9200      	str	r2, [sp, #0]
    b096:	4403      	add	r3, r0
    b098:	e7b0      	b.n	affc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa8>
    b09a:	a816      	add	r0, sp, #88	; 0x58
    b09c:	f00a fc05 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b0a0:	a810      	add	r0, sp, #64	; 0x40
    b0a2:	f00a fc02 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
    b0a6:	a80a      	add	r0, sp, #40	; 0x28
    b0a8:	f00a fbff 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    b0ac:	a804      	add	r0, sp, #16
    b0ae:	f00a fbfc 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
}
    b0b2:	2000      	movs	r0, #0
    b0b4:	b01d      	add	sp, #116	; 0x74
    b0b6:	ecbd 8b02 	vpop	{d8}
    b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0be:	bf00      	nop
    b0c0:	7f7fffff 	.word	0x7f7fffff
    b0c4:	ff7fffff 	.word	0xff7fffff
    b0c8:	00000000 	.word	0x00000000

0000b0cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0d0:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b0d4:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b0d6:	b0b5      	sub	sp, #212	; 0xd4
    b0d8:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b0da:	b90a      	cbnz	r2, b0e0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14>
    b0dc:	f013 fa79 	bl	1e5d2 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    b0e0:	f8d0 9008 	ldr.w	r9, [r0, #8]
    b0e4:	6808      	ldr	r0, [r1, #0]
  const bool use_tensor = index < node->inputs->size &&
    b0e6:	6803      	ldr	r3, [r0, #0]
  return &context->tensors[node->inputs->data[index]];
    b0e8:	6846      	ldr	r6, [r0, #4]
    b0ea:	6887      	ldr	r7, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
    b0ec:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    b0ee:	ea4f 1b86 	mov.w	fp, r6, lsl #6
    b0f2:	eb09 1787 	add.w	r7, r9, r7, lsl #6
    b0f6:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    b0fa:	dd23      	ble.n	b144 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    b0fc:	68c4      	ldr	r4, [r0, #12]
  const bool use_tensor = index < node->inputs->size &&
    b0fe:	1c63      	adds	r3, r4, #1
    b100:	d020      	beq.n	b144 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
    b102:	eb09 1484 	add.w	r4, r9, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    b106:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    b108:	6908      	ldr	r0, [r1, #16]
    b10a:	685d      	ldr	r5, [r3, #4]
    b10c:	ea4f 1a85 	mov.w	sl, r5, lsl #6
    b110:	eb09 1585 	add.w	r5, r9, r5, lsl #6
    b114:	2800      	cmp	r0, #0
    b116:	d0e1      	beq.n	b0dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    b118:	f819 300b 	ldrb.w	r3, [r9, fp]
    b11c:	2b03      	cmp	r3, #3
    b11e:	d057      	beq.n	b1d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    b120:	2b09      	cmp	r3, #9
    b122:	d011      	beq.n	b148 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    b124:	2b01      	cmp	r3, #1
    b126:	f040 8126 	bne.w	b376 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
    b12a:	7812      	ldrb	r2, [r2, #0]
    b12c:	9700      	str	r7, [sp, #0]
    b12e:	e9cd 4501 	strd	r4, r5, [sp, #4]
    b132:	4633      	mov	r3, r6
    b134:	4640      	mov	r0, r8
    b136:	f7ff ff0d 	bl	af54 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    b13a:	b035      	add	sp, #212	; 0xd4
    b13c:	ecbd 8b02 	vpop	{d8}
    b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
    b144:	2400      	movs	r4, #0
    b146:	e7de      	b.n	b106 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  op_params.input_offset = -input->params.zero_point;
    b148:	6933      	ldr	r3, [r6, #16]
    b14a:	425b      	negs	r3, r3
    b14c:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.weights_offset = -filter->params.zero_point;
    b14e:	693b      	ldr	r3, [r7, #16]
    b150:	425b      	negs	r3, r3
    b152:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.output_offset = output->params.zero_point;
    b154:	692b      	ldr	r3, [r5, #16]
    b156:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
    b158:	6803      	ldr	r3, [r0, #0]
    b15a:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
    b15c:	6843      	ldr	r3, [r0, #4]
    b15e:	425b      	negs	r3, r3
    b160:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
    b162:	6883      	ldr	r3, [r0, #8]
    b164:	932f      	str	r3, [sp, #188]	; 0xbc
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    b166:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data.output_activation_max;
    b168:	68c3      	ldr	r3, [r0, #12]
    b16a:	9330      	str	r3, [sp, #192]	; 0xc0
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    b16c:	a812      	add	r0, sp, #72	; 0x48
    b16e:	f00a fbe1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b172:	f8d6 8004 	ldr.w	r8, [r6, #4]
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
    b176:	4639      	mov	r1, r7
    b178:	a818      	add	r0, sp, #96	; 0x60
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    b17a:	ae1e      	add	r6, sp, #120	; 0x78
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
    b17c:	f00a fbda 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    b180:	4621      	mov	r1, r4
    b182:	4630      	mov	r0, r6
    b184:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b188:	f00a fbd4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b18c:	b104      	cbz	r4, b190 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    b18e:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
    b190:	af24      	add	r7, sp, #144	; 0x90
    b192:	4629      	mov	r1, r5
    b194:	4638      	mov	r0, r7
    b196:	f00a fbcd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
    b19a:	686b      	ldr	r3, [r5, #4]
    b19c:	f8cd 9000 	str.w	r9, [sp]
    b1a0:	e9cd 7303 	strd	r7, r3, [sp, #12]
    b1a4:	e9cd 6401 	strd	r6, r4, [sp, #4]
    b1a8:	ab18      	add	r3, sp, #96	; 0x60
    b1aa:	4642      	mov	r2, r8
    b1ac:	a912      	add	r1, sp, #72	; 0x48
    b1ae:	a82a      	add	r0, sp, #168	; 0xa8
    b1b0:	f00e fda1 	bl	19cf6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
      TF_LITE_FULLY_CONNECTED(uint8_t);
    b1b4:	4638      	mov	r0, r7
    b1b6:	f00a fb78 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b1ba:	4630      	mov	r0, r6
      TF_LITE_FULLY_CONNECTED(int16_t);
    b1bc:	f00a fb75 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b1c0:	a818      	add	r0, sp, #96	; 0x60
    b1c2:	f00a fb72 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b1c6:	a812      	add	r0, sp, #72	; 0x48
    b1c8:	f00a fb6f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    b1cc:	2000      	movs	r0, #0
      break;
    b1ce:	e7b4      	b.n	b13a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  const int32_t filter_offset = -filter->params.zero_point;
    b1d0:	693b      	ldr	r3, [r7, #16]
  const int32_t input_offset = -input->params.zero_point;
    b1d2:	6932      	ldr	r2, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
    b1d4:	6929      	ldr	r1, [r5, #16]
  op_params.output_offset = output_offset;
    b1d6:	912c      	str	r1, [sp, #176]	; 0xb0
  const int32_t filter_offset = -filter->params.zero_point;
    b1d8:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
    b1da:	4252      	negs	r2, r2
  op_params.weights_offset = filter_offset;
    b1dc:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
    b1e0:	6803      	ldr	r3, [r0, #0]
    b1e2:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
    b1e4:	6843      	ldr	r3, [r0, #4]
    b1e6:	425b      	negs	r3, r3
    b1e8:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
    b1ea:	6883      	ldr	r3, [r0, #8]
    b1ec:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
    b1ee:	68c3      	ldr	r3, [r0, #12]
  switch (output->type) {
    b1f0:	f819 000a 	ldrb.w	r0, [r9, sl]
  op_params.quantized_activation_max = data.output_activation_max;
    b1f4:	9330      	str	r3, [sp, #192]	; 0xc0
  switch (output->type) {
    b1f6:	2803      	cmp	r0, #3
    b1f8:	d00d      	beq.n	b216 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    b1fa:	2807      	cmp	r0, #7
    b1fc:	d031      	beq.n	b262 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x196>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b1fe:	f8d8 4014 	ldr.w	r4, [r8, #20]
    b202:	f7f5 fb56 	bl	8b2 <TfLiteTypeGetName>
    b206:	f819 300a 	ldrb.w	r3, [r9, sl]
    b20a:	4602      	mov	r2, r0
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b20c:	4640      	mov	r0, r8
    b20e:	495e      	ldr	r1, [pc, #376]	; (b388 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    b210:	47a0      	blx	r4
      return kTfLiteError;
    b212:	2001      	movs	r0, #1
    b214:	e791      	b.n	b13a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_FULLY_CONNECTED(uint8_t);
    b216:	4631      	mov	r1, r6
    b218:	a812      	add	r0, sp, #72	; 0x48
    b21a:	f00a fb8b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b21e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    b222:	4639      	mov	r1, r7
    b224:	a818      	add	r0, sp, #96	; 0x60
    b226:	ae1e      	add	r6, sp, #120	; 0x78
    b228:	f00a fb84 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b22c:	4621      	mov	r1, r4
    b22e:	4630      	mov	r0, r6
    b230:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b234:	f00a fb7e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b238:	b104      	cbz	r4, b23c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x170>
    b23a:	6864      	ldr	r4, [r4, #4]
    b23c:	af24      	add	r7, sp, #144	; 0x90
    b23e:	4629      	mov	r1, r5
    b240:	4638      	mov	r0, r7
    b242:	f00a fb77 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b246:	686b      	ldr	r3, [r5, #4]
    b248:	f8cd 9000 	str.w	r9, [sp]
    b24c:	e9cd 7303 	strd	r7, r3, [sp, #12]
    b250:	e9cd 6401 	strd	r6, r4, [sp, #4]
    b254:	ab18      	add	r3, sp, #96	; 0x60
    b256:	4642      	mov	r2, r8
    b258:	a912      	add	r1, sp, #72	; 0x48
    b25a:	a82a      	add	r0, sp, #168	; 0xa8
    b25c:	f00e fcc8 	bl	19bf0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
    b260:	e7a8      	b.n	b1b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_FULLY_CONNECTED(int16_t);
    b262:	4631      	mov	r1, r6
    b264:	a812      	add	r0, sp, #72	; 0x48
    b266:	f00a fb65 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b26a:	6873      	ldr	r3, [r6, #4]
    b26c:	930a      	str	r3, [sp, #40]	; 0x28
    b26e:	4639      	mov	r1, r7
    b270:	a818      	add	r0, sp, #96	; 0x60
    b272:	f00a fb5f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b276:	687b      	ldr	r3, [r7, #4]
    b278:	930b      	str	r3, [sp, #44]	; 0x2c
    b27a:	4621      	mov	r1, r4
    b27c:	a81e      	add	r0, sp, #120	; 0x78
    b27e:	f00a fb59 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b282:	b104      	cbz	r4, b286 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    b284:	6864      	ldr	r4, [r4, #4]
    b286:	4629      	mov	r1, r5
    b288:	a824      	add	r0, sp, #144	; 0x90
    b28a:	f00a fb53 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    b28e:	686b      	ldr	r3, [r5, #4]
    b290:	930c      	str	r3, [sp, #48]	; 0x30
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
  const int32 input_offset = params.input_offset;
    b292:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b294:	930d      	str	r3, [sp, #52]	; 0x34
  const int32 filter_offset = params.weights_offset;
    b296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    b298:	930e      	str	r3, [sp, #56]	; 0x38
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
    b29a:	e9dd 532c 	ldrd	r5, r3, [sp, #176]	; 0xb0
    b29e:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
    b2a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    b2a4:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
    b2a8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    b2aa:	9307      	str	r3, [sp, #28]
  const int32 output_activation_max = params.quantized_activation_max;
    b2ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    b2ae:	9308      	str	r3, [sp, #32]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b2b0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    b2b4:	4293      	cmp	r3, r2
    b2b6:	f73f af11 	bgt.w	b0dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  TFLITE_DCHECK_EQ(output_offset, 0);
    b2ba:	2d00      	cmp	r5, #0
    b2bc:	f47f af0e 	bne.w	b0dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  const int filter_dim_count = filter_shape.DimensionsCount();
    b2c2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2c4:	3b01      	subs	r3, #1
    b2c6:	4619      	mov	r1, r3
    b2c8:	a824      	add	r0, sp, #144	; 0x90
    b2ca:	9309      	str	r3, [sp, #36]	; 0x24
    b2cc:	f00e fc75 	bl	19bba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2d2:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b2d4:	1eb1      	subs	r1, r6, #2
    b2d6:	aa24      	add	r2, sp, #144	; 0x90
    b2d8:	a818      	add	r0, sp, #96	; 0x60
    b2da:	f00d f99e 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    b2de:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b2e0:	9009      	str	r0, [sp, #36]	; 0x24
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    b2e2:	a818      	add	r0, sp, #96	; 0x60
    b2e4:	f00a faec 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    b2e8:	46a8      	mov	r8, r5
    b2ea:	4606      	mov	r6, r0
    b2ec:	46a9      	mov	r9, r5
  for (int b = 0; b < batches; ++b) {
    b2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b2f0:	42ab      	cmp	r3, r5
    b2f2:	dd3b      	ble.n	b36c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    b2f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b2f6:	2700      	movs	r7, #0
    b2f8:	eb03 0b49 	add.w	fp, r3, r9, lsl #1
  for (int b = 0; b < batches; ++b) {
    b2fc:	46ba      	mov	sl, r7
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b300:	42bb      	cmp	r3, r7
    b302:	dd2e      	ble.n	b362 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x296>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
    b304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b306:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
    b30a:	eb03 0e08 	add.w	lr, r3, r8
    b30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b310:	eb03 0c0a 	add.w	ip, r3, sl
    b314:	2300      	movs	r3, #0
    b316:	429e      	cmp	r6, r3
    b318:	dd10      	ble.n	b33c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x270>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b31a:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    b31e:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b322:	9210      	str	r2, [sp, #64]	; 0x40
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    b324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b326:	188a      	adds	r2, r1, r2
    b328:	9211      	str	r2, [sp, #68]	; 0x44
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b32a:	9910      	ldr	r1, [sp, #64]	; 0x40
    b32c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b32e:	4411      	add	r1, r2
    b330:	460a      	mov	r2, r1
        accum += filter_val * input_val;
    b332:	9911      	ldr	r1, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    b334:	3301      	adds	r3, #1
        accum += filter_val * input_val;
    b336:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
    b33a:	e7ec      	b.n	b316 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
    b33c:	ee18 2a90 	vmov	r2, s17
    b340:	ee18 1a10 	vmov	r1, s16
    b344:	f7fe fa9a 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
    b348:	9b07      	ldr	r3, [sp, #28]
    b34a:	4298      	cmp	r0, r3
    b34c:	bfb8      	it	lt
    b34e:	4618      	movlt	r0, r3
    b350:	9b08      	ldr	r3, [sp, #32]
    b352:	4298      	cmp	r0, r3
    b354:	bfa8      	it	ge
    b356:	4618      	movge	r0, r3
    b358:	f82b 0b02 	strh.w	r0, [fp], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b35c:	3701      	adds	r7, #1
    b35e:	44b2      	add	sl, r6
    b360:	e7cd      	b.n	b2fe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x232>
  for (int b = 0; b < batches; ++b) {
    b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b364:	3501      	adds	r5, #1
    b366:	4499      	add	r9, r3
    b368:	44b0      	add	r8, r6
    b36a:	e7c0      	b.n	b2ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x222>
    b36c:	a824      	add	r0, sp, #144	; 0x90
    b36e:	f00a fa9c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b372:	a81e      	add	r0, sp, #120	; 0x78
    b374:	e722      	b.n	b1bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b376:	4618      	mov	r0, r3
    b378:	f8d8 4014 	ldr.w	r4, [r8, #20]
    b37c:	f7f5 fa99 	bl	8b2 <TfLiteTypeGetName>
    b380:	f819 300b 	ldrb.w	r3, [r9, fp]
    b384:	4602      	mov	r2, r0
    b386:	e741      	b.n	b20c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x140>
    b388:	0002aea3 	.word	0x0002aea3

0000b38c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b38c:	4800      	ldr	r0, [pc, #0]	; (b390 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x4>)
    b38e:	4770      	bx	lr
    b390:	20000388 	.word	0x20000388

0000b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b394:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    b396:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b398:	d11f      	bne.n	b3da <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
    b39a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    b39e:	425c      	negs	r4, r3
    b3a0:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    b3a2:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b3a6:	2a00      	cmp	r2, #0
    b3a8:	f173 0100 	sbcs.w	r1, r3, #0
    b3ac:	490d      	ldr	r1, [pc, #52]	; (b3e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
    b3ae:	bfa8      	it	ge
    b3b0:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b3b4:	b99c      	cbnz	r4, b3de <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b3b6:	1852      	adds	r2, r2, r1
    b3b8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b3bc:	2a00      	cmp	r2, #0
    b3be:	f173 0100 	sbcs.w	r1, r3, #0
    b3c2:	da06      	bge.n	b3d2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
    b3c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b3c8:	1852      	adds	r2, r2, r1
    b3ca:	f04f 0100 	mov.w	r1, #0
    b3ce:	eb41 0303 	adc.w	r3, r1, r3
    b3d2:	0fd0      	lsrs	r0, r2, #31
    b3d4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    b3d8:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3da:	2400      	movs	r4, #0
    b3dc:	e7e1      	b.n	b3a2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    b3de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b3e2:	e7f9      	b.n	b3d8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
    b3e4:	c0000001 	.word	0xc0000001

0000b3e8 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>:
    b3e8:	4800      	ldr	r0, [pc, #0]	; (b3ec <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv+0x4>)
    b3ea:	4770      	bx	lr
    b3ec:	200003a8 	.word	0x200003a8

0000b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    b3f0:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    b3f2:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    b3f4:	da06      	bge.n	b404 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    b3f6:	4b0d      	ldr	r3, [pc, #52]	; (b42c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    b3f8:	4a0d      	ldr	r2, [pc, #52]	; (b430 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    b3fa:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    b3fe:	480d      	ldr	r0, [pc, #52]	; (b434 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    b400:	f009 f80a 	bl	14418 <__assert_func>
    b404:	291f      	cmp	r1, #31
    b406:	dd04      	ble.n	b412 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    b408:	4b0b      	ldr	r3, [pc, #44]	; (b438 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    b40a:	4a09      	ldr	r2, [pc, #36]	; (b430 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    b40c:	f240 1167 	movw	r1, #359	; 0x167
    b410:	e7f5      	b.n	b3fe <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b412:	2301      	movs	r3, #1
    b414:	408b      	lsls	r3, r1
    b416:	3b01      	subs	r3, #1
  return a & b;
    b418:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    b41c:	105b      	asrs	r3, r3, #1
  return a + b;
    b41e:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    b422:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    b424:	429a      	cmp	r2, r3
    b426:	bfc8      	it	gt
    b428:	3001      	addgt	r0, #1
    b42a:	bd08      	pop	{r3, pc}
    b42c:	0002ade5 	.word	0x0002ade5
    b430:	0002adf3 	.word	0x0002adf3
    b434:	0002ae48 	.word	0x0002ae48
    b438:	0002ae94 	.word	0x0002ae94

0000b43c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>:
  return shifted_scale.raw();
}

inline void GetInvSqrtQuantizedMultiplierExp(int32 input, int reverse_shift,
                                             int32* output_inv_sqrt,
                                             int* output_shift) {
    b43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GE(input, 0);
    b440:	2800      	cmp	r0, #0
                                             int* output_shift) {
    b442:	9101      	str	r1, [sp, #4]
    b444:	4616      	mov	r6, r2
    b446:	461d      	mov	r5, r3
  TFLITE_DCHECK_GE(input, 0);
    b448:	da01      	bge.n	b44e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x12>
    b44a:	f013 f8c2 	bl	1e5d2 <abort>
  if (input <= 1) {
    b44e:	2801      	cmp	r0, #1
    b450:	dc07      	bgt.n	b462 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x26>
    // Handle the input value 1 separately to avoid overflow in that case
    // in the general computation below (b/143972021). Also handle 0 as if it
    // were a 1. 0 is an invalid input here (divide by zero) and 1 is a valid
    // but rare/unrealistic input value. We can expect both to occur in some
    // incompletely trained models, but probably not in fully trained models.
    *output_inv_sqrt = std::numeric_limits<std::int32_t>::max();
    b452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    b456:	6013      	str	r3, [r2, #0]
    *output_shift = 0;
    b458:	2300      	movs	r3, #0
    b45a:	602b      	str	r3, [r5, #0]
    *output_inv_sqrt <<= -*output_shift;
    *output_shift = 0;
  }
  // Convert right shift (right is positive) to left shift.
  *output_shift *= reverse_shift;
}
    b45c:	b003      	add	sp, #12
    b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *output_shift = 11;
    b462:	230b      	movs	r3, #11
    b464:	602b      	str	r3, [r5, #0]
  while (input >= (1 << 29)) {
    b466:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    b46a:	682a      	ldr	r2, [r5, #0]
    b46c:	db03      	blt.n	b476 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x3a>
    ++*output_shift;
    b46e:	3201      	adds	r2, #1
    input /= 4;
    b470:	1080      	asrs	r0, r0, #2
    ++*output_shift;
    b472:	602a      	str	r2, [r5, #0]
  while (input >= (1 << 29)) {
    b474:	e7f7      	b.n	b466 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x2a>
  return integer_input ? __builtin_clz(integer_input)
    b476:	fab0 f380 	clz	r3, r0
      CountLeadingZeros(static_cast<uint32>(input)) - 1;
    b47a:	3b01      	subs	r3, #1
  const unsigned max_left_shift_bit_pairs = max_left_shift_bits / 2;
    b47c:	085b      	lsrs	r3, r3, #1
  const unsigned left_shift_bit_pairs = max_left_shift_bit_pairs - 1;
    b47e:	3b01      	subs	r3, #1
  *output_shift -= left_shift_bit_pairs;
    b480:	1ad2      	subs	r2, r2, r3
  input <<= 2 * left_shift_bit_pairs;
    b482:	005b      	lsls	r3, r3, #1
    b484:	4098      	lsls	r0, r3
  TFLITE_DCHECK_GE(input, (1 << 27));
    b486:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
    b48a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  *output_shift -= left_shift_bit_pairs;
    b48e:	602a      	str	r2, [r5, #0]
  TFLITE_DCHECK_GE(input, (1 << 27));
    b490:	d2db      	bcs.n	b44a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xe>
};

template <int Exponent, typename IntegerType>
struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, -1> {
  static IntegerType eval(IntegerType x) {
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b492:	2101      	movs	r1, #1
    b494:	4108      	asrs	r0, r1
    b496:	f7ff ffab 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
    b49a:	2705      	movs	r7, #5
    b49c:	4682      	mov	sl, r0
  F3 x = F3::One();
    b49e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
             : wide_shifted > max ? max
    b4a2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    b4a6:	f04f 0900 	mov.w	r9, #0
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b4aa:	4621      	mov	r1, r4
    b4ac:	4620      	mov	r0, r4
    b4ae:	f7ff ff71 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b4b2:	4621      	mov	r1, r4
    b4b4:	f7ff ff6e 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    b4b8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
    b4bc:	da71      	bge.n	b5a2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x166>
    b4be:	f1b0 4f7e 	cmp.w	r0, #4261412864	; 0xfe000000
    b4c2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    b4c6:	f04f 0100 	mov.w	r1, #0
    b4ca:	bfc8      	it	gt
    b4cc:	f04f 0e00 	movgt.w	lr, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b4d0:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    b4d4:	0182      	lsls	r2, r0, #6
    b4d6:	ea4f 138c 	mov.w	r3, ip, lsl #6
    b4da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
             ? min
    b4de:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b4e2:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
    b4e6:	db61      	blt.n	b5ac <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x170>
             : wide_shifted > max ? max
    b4e8:	4590      	cmp	r8, r2
    b4ea:	eb79 0003 	sbcs.w	r0, r9, r3
    b4ee:	bfb8      	it	lt
    b4f0:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b4f4:	ea6f 0b01 	mvn.w	fp, r1
  return a & b;
    b4f8:	ea0b 0202 	and.w	r2, fp, r2
    b4fc:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  return a ^ b;
    b500:	ea82 0b0b 	eor.w	fp, r2, fp
  return ~a;
    b504:	ea6f 020e 	mvn.w	r2, lr
  return a & b;
    b508:	ea0b 0b02 	and.w	fp, fp, r2
    b50c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b510:	4621      	mov	r1, r4
    b512:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
  return a ^ b;
    b516:	ea8b 0b0e 	eor.w	fp, fp, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b51a:	f7ff ff3b 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b51e:	4659      	mov	r1, fp
    b520:	4604      	mov	r4, r0
    b522:	4650      	mov	r0, sl
    b524:	f7ff ff36 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a - b;
    b528:	1a24      	subs	r4, r4, r0
  return a ? BitNot(zero) : zero;
    b52a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
    b52e:	da40      	bge.n	b5b2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x176>
    b530:	f1b4 4f70 	cmp.w	r4, #4026531840	; 0xf0000000
    b534:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b538:	f04f 0e00 	mov.w	lr, #0
    b53c:	bfc8      	it	gt
    b53e:	f04f 0c00 	movgt.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b542:	17e1      	asrs	r1, r4, #31
    b544:	00cb      	lsls	r3, r1, #3
    b546:	00e2      	lsls	r2, r4, #3
    b548:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
             ? min
    b54c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b550:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
    b554:	db32      	blt.n	b5bc <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x180>
             : wide_shifted > max ? max
    b556:	4590      	cmp	r8, r2
    b558:	eb79 0103 	sbcs.w	r1, r9, r3
    b55c:	bfb8      	it	lt
    b55e:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b562:	ea6f 040e 	mvn.w	r4, lr
  return a & b;
    b566:	4022      	ands	r2, r4
    b568:	f02e 4400 	bic.w	r4, lr, #2147483648	; 0x80000000
  return a ^ b;
    b56c:	4054      	eors	r4, r2
  return ~a;
    b56e:	ea6f 020c 	mvn.w	r2, ip
  return a & b;
    b572:	4014      	ands	r4, r2
    b574:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  for (int i = 0; i < 5; i++) {
    b578:	3f01      	subs	r7, #1
  return a ^ b;
    b57a:	ea84 040c 	eor.w	r4, r4, ip
    b57e:	d194      	bne.n	b4aa <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x6e>
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b580:	4910      	ldr	r1, [pc, #64]	; (b5c4 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x188>)
    b582:	4620      	mov	r0, r4
    b584:	f7ff ff06 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  *output_inv_sqrt = x.raw();
    b588:	6030      	str	r0, [r6, #0]
  if (*output_shift < 0) {
    b58a:	682b      	ldr	r3, [r5, #0]
    b58c:	2b00      	cmp	r3, #0
    *output_inv_sqrt <<= -*output_shift;
    b58e:	bfbf      	itttt	lt
    b590:	425b      	neglt	r3, r3
    b592:	4098      	lsllt	r0, r3
    b594:	6030      	strlt	r0, [r6, #0]
    *output_shift = 0;
    b596:	602f      	strlt	r7, [r5, #0]
  *output_shift *= reverse_shift;
    b598:	6829      	ldr	r1, [r5, #0]
    b59a:	9b01      	ldr	r3, [sp, #4]
    b59c:	434b      	muls	r3, r1
    b59e:	602b      	str	r3, [r5, #0]
    b5a0:	e75c      	b.n	b45c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x20>
  return a ? BitNot(zero) : zero;
    b5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b5a6:	f04f 0e00 	mov.w	lr, #0
    b5aa:	e791      	b.n	b4d0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x94>
             ? min
    b5ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b5b0:	e7a0      	b.n	b4f4 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xb8>
  return a ? BitNot(zero) : zero;
    b5b2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    b5b6:	f04f 0c00 	mov.w	ip, #0
    b5ba:	e7c2      	b.n	b542 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x106>
             ? min
    b5bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b5c0:	e7cf      	b.n	b562 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x126>
    b5c2:	bf00      	nop
    b5c4:	5a82799a 	.word	0x5a82799a

0000b5c8 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    b5c8:	680a      	ldr	r2, [r1, #0]

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    b5ca:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ce:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    b5d0:	684a      	ldr	r2, [r1, #4]
    b5d2:	6855      	ldr	r5, [r2, #4]
    b5d4:	01aa      	lsls	r2, r5, #6
    b5d6:	4606      	mov	r6, r0
  // is just dominated by the zero point.
  // Also, GetInvSqrtQuantizedMultiplierExp handles the scenario where the sum
  // of input value squared is zero case well.
  // So we don't even need to do handle the epsilon for quantized kernel case.
  const float epsilon = 1e-6f;
  if (output->type == kTfLiteFloat32) {
    b5d8:	5c98      	ldrb	r0, [r3, r2]
    b5da:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b5dc:	b093      	sub	sp, #76	; 0x4c
  return &context->tensors[node->inputs->data[index]];
    b5de:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    b5e2:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  if (output->type == kTfLiteFloat32) {
    b5e6:	d14a      	bne.n	b67e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  op_params.input_zero_point = 0;                                            \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<float>(input), GetTensorShape(output), \
                        GetTensorData<float>(output), epsilon)

    TF_LITE_L2NORM(reference_ops);
    b5e8:	4621      	mov	r1, r4
    b5ea:	a806      	add	r0, sp, #24
    b5ec:	f00a f9a2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b5f0:	b104      	cbz	r4, b5f4 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
    b5f2:	6864      	ldr	r4, [r4, #4]
    b5f4:	4629      	mov	r1, r5
    b5f6:	a80c      	add	r0, sp, #48	; 0x30
    b5f8:	f00a f99c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const float* input_data,
                            const RuntimeShape& output_shape,
                            float* output_data, float epsilon = 1e-6) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    b5fc:	9b06      	ldr	r3, [sp, #24]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    b5fe:	686e      	ldr	r6, [r5, #4]
    b600:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b602:	4619      	mov	r1, r3
    b604:	aa0c      	add	r2, sp, #48	; 0x30
    b606:	a806      	add	r0, sp, #24
    b608:	9303      	str	r3, [sp, #12]
    b60a:	f00e fbfb 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b60e:	9b03      	ldr	r3, [sp, #12]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b610:	4605      	mov	r5, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b612:	4619      	mov	r1, r3
    b614:	aa0c      	add	r2, sp, #48	; 0x30
    b616:	a806      	add	r0, sp, #24
    b618:	f00c ffff 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    b61c:	2300      	movs	r3, #0
    b61e:	eddf 6a3c 	vldr	s13, [pc, #240]	; b710 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x148>
  for (int i = 0; i < outer_size; ++i) {
    b622:	4619      	mov	r1, r3
    b624:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    b628:	428d      	cmp	r5, r1
    b62a:	dd3e      	ble.n	b6aa <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    b62c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    float squared_l2_norm = 0;
    b630:	ed9f 7a38 	vldr	s14, [pc, #224]	; b714 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    b634:	009a      	lsls	r2, r3, #2
  for (int i = 0; i < outer_size; ++i) {
    b636:	46e6      	mov	lr, ip
    for (int c = 0; c < depth; ++c) {
    b638:	2700      	movs	r7, #0
    b63a:	42b8      	cmp	r0, r7
    b63c:	dd05      	ble.n	b64a <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      const float val = input_data[depth * i + c];
    b63e:	ecfe 7a01 	vldmia	lr!, {s15}
    for (int c = 0; c < depth; ++c) {
    b642:	3701      	adds	r7, #1
      squared_l2_norm += val * val;
    b644:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (int c = 0; c < depth; ++c) {
    b648:	e7f7      	b.n	b63a <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    b64a:	eef1 7ac7 	vsqrt.f32	s15, s14
    }
    float l2_norm = std::sqrt(squared_l2_norm);
    l2_norm = std::max(l2_norm, epsilon);
    for (int c = 0; c < depth; ++c) {
    b64e:	4432      	add	r2, r6
    b650:	2700      	movs	r7, #0
    b652:	eef4 7ae6 	vcmpe.f32	s15, s13
    b656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b65a:	bfb8      	it	lt
    b65c:	eef0 7a66 	vmovlt.f32	s15, s13
    b660:	ee86 7a27 	vdiv.f32	s14, s12, s15
    b664:	42b8      	cmp	r0, r7
    b666:	dd07      	ble.n	b678 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
    b668:	3701      	adds	r7, #1
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
    b66a:	ecfc 7a01 	vldmia	ip!, {s15}
    b66e:	ee67 7a27 	vmul.f32	s15, s14, s15
    b672:	ece2 7a01 	vstmia	r2!, {s15}
    for (int c = 0; c < depth; ++c) {
    b676:	e7f5      	b.n	b664 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  for (int i = 0; i < outer_size; ++i) {
    b678:	3101      	adds	r1, #1
    b67a:	4403      	add	r3, r0
    b67c:	e7d4      	b.n	b628 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x60>
#undef TF_LITE_L2NORM
  } else if (output->type == kTfLiteUInt8) {
    b67e:	2803      	cmp	r0, #3
    b680:	d11c      	bne.n	b6bc <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
  op_params.input_zero_point = input->params.zero_point;                     \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<uint8>(input), GetTensorShape(output), \
                        GetTensorData<uint8>(output))

    TF_LITE_L2NORM(reference_ops);
    b682:	6923      	ldr	r3, [r4, #16]
    b684:	9305      	str	r3, [sp, #20]
    b686:	4621      	mov	r1, r4
    b688:	a806      	add	r0, sp, #24
    b68a:	f00a f953 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b68e:	6862      	ldr	r2, [r4, #4]
    b690:	9203      	str	r2, [sp, #12]
    b692:	4629      	mov	r1, r5
    b694:	a80c      	add	r0, sp, #48	; 0x30
    b696:	f00a f94d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b69a:	686b      	ldr	r3, [r5, #4]
    b69c:	9300      	str	r3, [sp, #0]
    b69e:	9a03      	ldr	r2, [sp, #12]
    b6a0:	ab0c      	add	r3, sp, #48	; 0x30
    b6a2:	a906      	add	r1, sp, #24
    b6a4:	a805      	add	r0, sp, #20
    b6a6:	f00e fbdf 	bl	19e68 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    b6aa:	a80c      	add	r0, sp, #48	; 0x30
    b6ac:	f00a f8fd 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    b6b0:	a806      	add	r0, sp, #24
    b6b2:	f00a f8fa 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    b6b6:	2000      	movs	r0, #0
}
    b6b8:	b013      	add	sp, #76	; 0x4c
    b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteInt8) {
    b6bc:	2809      	cmp	r0, #9
    b6be:	d11e      	bne.n	b6fe <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x136>
    const auto input_shape = GetTensorShape(input);
    b6c0:	4621      	mov	r1, r4
    b6c2:	a806      	add	r0, sp, #24
    b6c4:	f00a f936 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const auto output_shape = GetTensorShape(output);
    b6c8:	4629      	mov	r1, r5
    b6ca:	a80c      	add	r0, sp, #48	; 0x30
    b6cc:	f00a f932 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int trailing_dim = input_shape.DimensionsCount() - 1;
    b6d0:	9906      	ldr	r1, [sp, #24]
    b6d2:	3901      	subs	r1, #1
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b6d4:	460b      	mov	r3, r1
    b6d6:	aa0c      	add	r2, sp, #48	; 0x30
    b6d8:	a806      	add	r0, sp, #24
    b6da:	9103      	str	r1, [sp, #12]
    b6dc:	f00c ff9d 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b6e0:	9903      	ldr	r1, [sp, #12]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b6e2:	4606      	mov	r6, r0
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b6e4:	aa0c      	add	r2, sp, #48	; 0x30
    b6e6:	a806      	add	r0, sp, #24
    b6e8:	f00e fb8c 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
    b6ec:	686b      	ldr	r3, [r5, #4]
    b6ee:	9300      	str	r3, [sp, #0]
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b6f0:	4601      	mov	r1, r0
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
    b6f2:	6863      	ldr	r3, [r4, #4]
    b6f4:	6920      	ldr	r0, [r4, #16]
    b6f6:	4632      	mov	r2, r6
    b6f8:	f00e fc14 	bl	19f24 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>
    b6fc:	e7d5      	b.n	b6aa <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
    b6fe:	6974      	ldr	r4, [r6, #20]
    b700:	f7f5 f8d7 	bl	8b2 <TfLiteTypeGetName>
    b704:	4904      	ldr	r1, [pc, #16]	; (b718 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
    b706:	4602      	mov	r2, r0
    b708:	4630      	mov	r0, r6
    b70a:	47a0      	blx	r4
    return kTfLiteError;
    b70c:	2001      	movs	r0, #1
    b70e:	e7d3      	b.n	b6b8 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    b710:	358637bd 	.word	0x358637bd
    b714:	00000000 	.word	0x00000000
    b718:	0002b61d 	.word	0x0002b61d

0000b71c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b71c:	4800      	ldr	r0, [pc, #0]	; (b720 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x4>)
    b71e:	4770      	bx	lr
    b720:	200003c8 	.word	0x200003c8

0000b724 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b724:	4800      	ldr	r0, [pc, #0]	; (b728 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x4>)
    b726:	4770      	bx	lr
    b728:	200003e8 	.word	0x200003e8

0000b72c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
    b72c:	4a01      	ldr	r2, [pc, #4]	; (b734 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    b72e:	f00e bd6b 	b.w	1a208 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
    b732:	bf00      	nop
    b734:	00019fdb 	.word	0x00019fdb

0000b738 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
    b738:	4a01      	ldr	r2, [pc, #4]	; (b740 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    b73a:	f00e bd65 	b.w	1a208 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
    b73e:	bf00      	nop
    b740:	00019fe3 	.word	0x00019fe3

0000b744 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
    b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    b748:	f8d0 8000 	ldr.w	r8, [r0]
    b74c:	461e      	mov	r6, r3
    b74e:	6813      	ldr	r3, [r2, #0]
    b750:	4598      	cmp	r8, r3
    b752:	ed2d 8b04 	vpush	{d8-d9}
    b756:	4604      	mov	r4, r0
    b758:	460f      	mov	r7, r1
    b75a:	4691      	mov	r9, r2
    b75c:	d001      	beq.n	b762 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
    b75e:	f012 ff38 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
    b762:	2500      	movs	r5, #0
    b764:	45a8      	cmp	r8, r5
    b766:	dd0c      	ble.n	b782 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    b768:	4629      	mov	r1, r5
    b76a:	4620      	mov	r0, r4
    b76c:	f00a f8a8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    b770:	4629      	mov	r1, r5
    b772:	4682      	mov	sl, r0
    b774:	4648      	mov	r0, r9
    b776:	f00a f8a3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    b77a:	4582      	cmp	sl, r0
    b77c:	d1ef      	bne.n	b75e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
    b77e:	3501      	adds	r5, #1
    b780:	e7f0      	b.n	b764 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b782:	f1b8 0f05 	cmp.w	r8, #5
    b786:	bfcc      	ite	gt
    b788:	6864      	ldrgt	r4, [r4, #4]
    b78a:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
    b78c:	2300      	movs	r3, #0
    int buffer_size = 1;
    b78e:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
    b792:	4598      	cmp	r8, r3
    b794:	dc1b      	bgt.n	b7ce <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
  // optimized kernels. (check the definition of scalar_logistic_op<float>)

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result;
    if (val > cutoff_upper) {
    b796:	eddf 8a19 	vldr	s17, [pc, #100]	; b7fc <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xb8>
    b79a:	4634      	mov	r4, r6
      result = 1.0f;
    b79c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; i++) {
    b7a0:	2600      	movs	r6, #0
    } else if (val < cutoff_lower) {
    b7a2:	eeba 9a02 	vmov.f32	s18, #162	; 0xc1100000 -9.0
  for (int i = 0; i < flat_size; i++) {
    b7a6:	454e      	cmp	r6, r9
    b7a8:	da23      	bge.n	b7f2 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xae>
    float val = input_data[i];
    b7aa:	ecb7 0a01 	vldmia	r7!, {s0}
    if (val > cutoff_upper) {
    b7ae:	eeb4 0ae8 	vcmpe.f32	s0, s17
    b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7b6:	dc19      	bgt.n	b7ec <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xa8>
    } else if (val < cutoff_lower) {
    b7b8:	eeb4 0ac9 	vcmpe.f32	s0, s18
    b7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7c0:	d50b      	bpl.n	b7da <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
  { return __builtin_expf(__x); }
    b7c2:	f006 fdbd 	bl	12340 <expf>
      result = std::exp(val);
    } else {
      result = 1.f / (1.f + std::exp(-val));
    }
    output_data[i] = result;
    b7c6:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    b7ca:	3601      	adds	r6, #1
    b7cc:	e7eb      	b.n	b7a6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x62>
      buffer_size *= dims_data[i];
    b7ce:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    b7d2:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    b7d4:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
    b7d8:	e7db      	b.n	b792 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
    b7da:	eeb1 0a40 	vneg.f32	s0, s0
    b7de:	f006 fdaf 	bl	12340 <expf>
      result = 1.f / (1.f + std::exp(-val));
    b7e2:	ee70 7a08 	vadd.f32	s15, s0, s16
    b7e6:	ee88 0a27 	vdiv.f32	s0, s16, s15
    b7ea:	e7ec      	b.n	b7c6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x82>
      result = 1.0f;
    b7ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    b7f0:	e7e9      	b.n	b7c6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x82>
  }
}
    b7f2:	ecbd 8b04 	vpop	{d8-d9}
    b7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7fa:	bf00      	nop
    b7fc:	4184f3cf 	.word	0x4184f3cf

0000b800 <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b800:	4800      	ldr	r0, [pc, #0]	; (b804 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x4>)
    b802:	4770      	bx	lr
    b804:	20000408 	.word	0x20000408

0000b808 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    b808:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b80c:	1812      	adds	r2, r2, r0
    b80e:	f04f 0300 	mov.w	r3, #0
    b812:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    b816:	1c59      	adds	r1, r3, #1
    b818:	bf06      	itte	eq
    b81a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b81e:	4611      	moveq	r1, r2
    b820:	2101      	movne	r1, #1

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    b822:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
    b826:	bf0c      	ite	eq
    b828:	4618      	moveq	r0, r3
    b82a:	2000      	movne	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    b82c:	1854      	adds	r4, r2, r1
    b82e:	eb43 0500 	adc.w	r5, r3, r0
    b832:	0feb      	lsrs	r3, r5, #31
    b834:	18e4      	adds	r4, r4, r3
    b836:	f145 0500 	adc.w	r5, r5, #0
    b83a:	ea4f 0854 	mov.w	r8, r4, lsr #1
    b83e:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b842:	493c      	ldr	r1, [pc, #240]	; (b934 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x12c>)
    b844:	4640      	mov	r0, r8
    b846:	f7ff fda5 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    b84a:	2503      	movs	r5, #3
    b84c:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b850:	4621      	mov	r1, r4
    b852:	4640      	mov	r0, r8
    b854:	f7ff fd9e 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b858:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    b85c:	4620      	mov	r0, r4
    b85e:	f7ff fd99 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    b862:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    b866:	da56      	bge.n	b916 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10e>
    b868:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    b86c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b870:	f04f 0c00 	mov.w	ip, #0
    b874:	bfc8      	it	gt
    b876:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b878:	ea4f 7be0 	mov.w	fp, r0, asr #31
    b87c:	0082      	lsls	r2, r0, #2
    b87e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    b882:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
    b886:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b88a:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
    b88e:	db46      	blt.n	b91e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x116>
             : wide_shifted > max ? max
    b890:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    b894:	4592      	cmp	sl, r2
    b896:	f04f 0b00 	mov.w	fp, #0
    b89a:	eb7b 0003 	sbcs.w	r0, fp, r3
    b89e:	bfb8      	it	lt
    b8a0:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b8a4:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
    b8a8:	401a      	ands	r2, r3
    b8aa:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return ~a;
    b8ae:	43cb      	mvns	r3, r1
  return a ^ b;
    b8b0:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
    b8b4:	401a      	ands	r2, r3
    b8b6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    b8ba:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    b8bc:	3d01      	subs	r5, #1
  return a + b;
    b8be:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
    b8c0:	d1c6      	bne.n	b850 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x48>
  return a ? BitNot(zero) : zero;
    b8c2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    b8c6:	da2d      	bge.n	b924 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11c>
    b8c8:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    b8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b8d0:	462a      	mov	r2, r5
    b8d2:	bfc8      	it	gt
    b8d4:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b8d6:	1926      	adds	r6, r4, r4
    b8d8:	ea4f 75e4 	mov.w	r5, r4, asr #31
    b8dc:	eb45 0705 	adc.w	r7, r5, r5
             ? min
    b8e0:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b8e4:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
    b8e8:	db20      	blt.n	b92c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x124>
             : wide_shifted > max ? max
    b8ea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b8ee:	2500      	movs	r5, #0
    b8f0:	42b4      	cmp	r4, r6
    b8f2:	eb75 0307 	sbcs.w	r3, r5, r7
    b8f6:	bfac      	ite	ge
    b8f8:	4633      	movge	r3, r6
    b8fa:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
    b8fe:	43d6      	mvns	r6, r2
  return a & b;
    b900:	401e      	ands	r6, r3
    b902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return ~a;
    b906:	43c3      	mvns	r3, r0
  return a ^ b;
    b908:	4056      	eors	r6, r2
  return a & b;
    b90a:	401e      	ands	r6, r3
    b90c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    b910:	4070      	eors	r0, r6
    b912:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
    b916:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b91a:	2100      	movs	r1, #0
    b91c:	e7ac      	b.n	b878 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x70>
             ? min
    b91e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b922:	e7bf      	b.n	b8a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9c>
  return a ? BitNot(zero) : zero;
    b924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b928:	4628      	mov	r0, r5
    b92a:	e7d4      	b.n	b8d6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xce>
             ? min
    b92c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b930:	e7e5      	b.n	b8fe <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
    b932:	bf00      	nop
    b934:	c3c3c3c4 	.word	0xc3c3c3c4

0000b938 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b93c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    b93e:	4814      	ldr	r0, [pc, #80]	; (b990 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    b940:	f00e fcba 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b944:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    b946:	4813      	ldr	r0, [pc, #76]	; (b994 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    b948:	f00e fcb6 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    b94c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    b950:	4680      	mov	r8, r0
  F x2 = x * x;
    b952:	4621      	mov	r1, r4
    b954:	4620      	mov	r0, r4
    b956:	f00e fcb4 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    b95a:	4621      	mov	r1, r4
  F x2 = x * x;
    b95c:	4605      	mov	r5, r0
  F x3 = x2 * x;
    b95e:	f00e fcb0 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    b962:	4629      	mov	r1, r5
  F x3 = x2 * x;
    b964:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    b966:	4628      	mov	r0, r5
    b968:	f00e fcab 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b96c:	2102      	movs	r1, #2
    b96e:	f7ff fd3f 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    b972:	4641      	mov	r1, r8
    b974:	4438      	add	r0, r7
    b976:	f00e fca4 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b97a:	2101      	movs	r1, #1
    b97c:	4428      	add	r0, r5
    b97e:	f7ff fd37 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    b982:	1821      	adds	r1, r4, r0
    b984:	4630      	mov	r0, r6
    b986:	f00e fc9c 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    b98a:	4430      	add	r0, r6
    b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b990:	70f5a894 	.word	0x70f5a894
    b994:	2aaaaaab 	.word	0x2aaaaaab

0000b998 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    b998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    b99c:	f040 447e 	orr.w	r4, r0, #4261412864	; 0xfe000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    b9a0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    b9a2:	0120      	lsls	r0, r4, #4
    b9a4:	f7ff ffc8 	bl	b938 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    b9a8:	4682      	mov	sl, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    b9aa:	4838      	ldr	r0, [pc, #224]	; (ba8c <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf4>)
    b9ac:	f00e fc84 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b9b0:	4601      	mov	r1, r0
    b9b2:	4650      	mov	r0, sl
  return a - b;
    b9b4:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    b9b6:	f00e fc84 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    b9ba:	f3c4 6940 	ubfx	r9, r4, #25, #1
    b9be:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
    b9c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b9c6:	4007      	ands	r7, r0
    b9c8:	ea09 000a 	and.w	r0, r9, sl
  return a ^ b;
    b9cc:	ea87 0800 	eor.w	r8, r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    b9d0:	482f      	ldr	r0, [pc, #188]	; (ba90 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf8>)
    b9d2:	f00e fc71 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b9d6:	4601      	mov	r1, r0
    b9d8:	4640      	mov	r0, r8
    b9da:	f00e fc72 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    b9de:	f3c4 6780 	ubfx	r7, r4, #26, #1
    b9e2:	427e      	negs	r6, r7
  return a & b;
    b9e4:	3f01      	subs	r7, #1
    b9e6:	4030      	ands	r0, r6
    b9e8:	ea07 0708 	and.w	r7, r7, r8
  return a ^ b;
    b9ec:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    b9ee:	4829      	ldr	r0, [pc, #164]	; (ba94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
    b9f0:	f00e fc62 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b9f4:	4601      	mov	r1, r0
    b9f6:	4638      	mov	r0, r7
    b9f8:	f00e fc63 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    b9fc:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    ba00:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    ba04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    ba08:	ea00 000a 	and.w	r0, r0, sl
    ba0c:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    ba10:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    ba14:	4820      	ldr	r0, [pc, #128]	; (ba98 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
    ba16:	f00e fc4f 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba1a:	4601      	mov	r1, r0
    ba1c:	4658      	mov	r0, fp
    ba1e:	f00e fc50 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba22:	f3c4 7900 	ubfx	r9, r4, #28, #1
    ba26:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    ba2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ba2e:	ea00 0008 	and.w	r0, r0, r8
    ba32:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    ba36:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    ba3a:	4818      	ldr	r0, [pc, #96]	; (ba9c <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
    ba3c:	f00e fc3c 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba40:	4601      	mov	r1, r0
    ba42:	4648      	mov	r0, r9
    ba44:	f00e fc3d 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba48:	f3c4 7740 	ubfx	r7, r4, #29, #1
    ba4c:	427e      	negs	r6, r7
  return a & b;
    ba4e:	3f01      	subs	r7, #1
    ba50:	4030      	ands	r0, r6
    ba52:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    ba56:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    ba58:	4811      	ldr	r0, [pc, #68]	; (baa0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
    ba5a:	f00e fc2d 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba5e:	4601      	mov	r1, r0
    ba60:	4638      	mov	r0, r7
    ba62:	f00e fc2e 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba66:	f3c4 7480 	ubfx	r4, r4, #30, #1
    ba6a:	4263      	negs	r3, r4
  return a & b;
    ba6c:	4018      	ands	r0, r3
    ba6e:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    ba70:	fab5 f385 	clz	r3, r5
  return a & b;
    ba74:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    ba76:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    ba78:	4044      	eors	r4, r0
  return a & b;
    ba7a:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    ba7c:	425b      	negs	r3, r3
  return a & b;
    ba7e:	4020      	ands	r0, r4
    ba80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    ba84:	4058      	eors	r0, r3
    ba86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba8a:	bf00      	nop
    ba8c:	63afbe7b 	.word	0x63afbe7b
    ba90:	4da2cbf2 	.word	0x4da2cbf2
    ba94:	2f16ac6c 	.word	0x2f16ac6c
    ba98:	1152aaa4 	.word	0x1152aaa4
    ba9c:	02582ab7 	.word	0x02582ab7
    baa0:	000afe11 	.word	0x000afe11

0000baa4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    baa4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
    baa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baaa:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    baac:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    baae:	6885      	ldr	r5, [r0, #8]
    bab0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    bab2:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
    bab6:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    baba:	f815 200a 	ldrb.w	r2, [r5, sl]
    babe:	eb05 1983 	add.w	r9, r5, r3, lsl #6
    bac2:	f815 3008 	ldrb.w	r3, [r5, r8]
    bac6:	4293      	cmp	r3, r2
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
    bac8:	b097      	sub	sp, #92	; 0x5c
    baca:	4604      	mov	r4, r0
  return &context->tensors[node->inputs->data[index]];
    bacc:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    bad0:	d034      	beq.n	bb3c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x98>
    bad2:	f8d0 b014 	ldr.w	fp, [r0, #20]
    bad6:	4610      	mov	r0, r2
    bad8:	f7f4 feeb 	bl	8b2 <TfLiteTypeGetName>
    badc:	4606      	mov	r6, r0
    bade:	f815 0008 	ldrb.w	r0, [r5, r8]
    bae2:	f7f4 fee6 	bl	8b2 <TfLiteTypeGetName>
    bae6:	4b5c      	ldr	r3, [pc, #368]	; (bc58 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
    bae8:	9301      	str	r3, [sp, #4]
    baea:	4b5c      	ldr	r3, [pc, #368]	; (bc5c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
    baec:	9300      	str	r3, [sp, #0]
    baee:	e9cd 6002 	strd	r6, r0, [sp, #8]
    baf2:	4a5b      	ldr	r2, [pc, #364]	; (bc60 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
    baf4:	495b      	ldr	r1, [pc, #364]	; (bc64 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
    baf6:	232f      	movs	r3, #47	; 0x2f
    baf8:	4620      	mov	r0, r4
    bafa:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
    bafc:	f815 600a 	ldrb.w	r6, [r5, sl]
    bb00:	2e01      	cmp	r6, #1
    bb02:	d164      	bne.n	bbce <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x12a>
    switch (output->type) {
    bb04:	f815 3008 	ldrb.w	r3, [r5, r8]
    bb08:	2b01      	cmp	r3, #1
    bb0a:	d14e      	bne.n	bbaa <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x106>
            GetTensorShape(input), GetTensorData<float>(input),
    bb0c:	4639      	mov	r1, r7
    bb0e:	a80a      	add	r0, sp, #40	; 0x28
    bb10:	f009 ff10 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bb14:	687c      	ldr	r4, [r7, #4]
            GetTensorShape(output), GetTensorData<float>(output));
    bb16:	4649      	mov	r1, r9
    bb18:	a810      	add	r0, sp, #64	; 0x40
    bb1a:	f009 ff0b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Logistic(
    bb1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bb22:	aa10      	add	r2, sp, #64	; 0x40
    bb24:	4621      	mov	r1, r4
    bb26:	a80a      	add	r0, sp, #40	; 0x28
    bb28:	f7ff fe0c 	bl	b744 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
            GetTensorShape(output), GetTensorData<float>(output));
    bb2c:	a810      	add	r0, sp, #64	; 0x40
    bb2e:	f009 febc 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorShape(input), GetTensorData<float>(input),
    bb32:	a80a      	add	r0, sp, #40	; 0x28
    bb34:	f009 feb9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
    bb38:	2600      	movs	r6, #0
    bb3a:	e044      	b.n	bbc6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x122>
  if (input->type == kTfLiteInt8) {
    bb3c:	2b09      	cmp	r3, #9
    bb3e:	d1dd      	bne.n	bafc <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point,
    bb40:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bb44:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bb48:	d00d      	beq.n	bb66 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xc2>
    bb4a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    bb4e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    bb52:	4b45      	ldr	r3, [pc, #276]	; (bc68 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
    bb54:	9301      	str	r3, [sp, #4]
    bb56:	4b45      	ldr	r3, [pc, #276]	; (bc6c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
    bb58:	9300      	str	r3, [sp, #0]
    bb5a:	6946      	ldr	r6, [r0, #20]
    bb5c:	4a40      	ldr	r2, [pc, #256]	; (bc60 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
    bb5e:	4944      	ldr	r1, [pc, #272]	; (bc70 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1cc>)
    bb60:	2331      	movs	r3, #49	; 0x31
    bb62:	47b0      	blx	r6
    bb64:	e7ca      	b.n	bafc <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
    bb66:	68f8      	ldr	r0, [r7, #12]
    bb68:	f7f5 f87e 	bl	c68 <__aeabi_f2d>
    const double input_real_multiplier =
    bb6c:	4b41      	ldr	r3, [pc, #260]	; (bc74 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d0>)
    bb6e:	2200      	movs	r2, #0
    bb70:	f7f5 f8d2 	bl	d18 <__aeabi_dmul>
    bb74:	ec41 0b10 	vmov	d0, r0, r1
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    bb78:	a809      	add	r0, sp, #36	; 0x24
    bb7a:	f006 f9bd 	bl	11ef8 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bb7e:	4b3e      	ldr	r3, [pc, #248]	; (bc78 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
    bb80:	2200      	movs	r2, #0
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    bb82:	ec51 0b10 	vmov	r0, r1, d0
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bb86:	f7f5 f8c7 	bl	d18 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    bb8a:	ec41 0b10 	vmov	d0, r0, r1
    bb8e:	f006 f9e9 	bl	11f64 <round>
    bb92:	ec51 0b10 	vmov	r0, r1, d0
    bb96:	f7f5 fb59 	bl	124c <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    bb9a:	9909      	ldr	r1, [sp, #36]	; 0x24
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bb9c:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    bb9e:	221f      	movs	r2, #31
    bba0:	2004      	movs	r0, #4
    bba2:	f012 fc01 	bl	1e3a8 <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
    bba6:	9007      	str	r0, [sp, #28]
    bba8:	e7a8      	b.n	bafc <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    bbaa:	4630      	mov	r0, r6
    bbac:	6967      	ldr	r7, [r4, #20]
    bbae:	f7f4 fe80 	bl	8b2 <TfLiteTypeGetName>
    bbb2:	9004      	str	r0, [sp, #16]
    bbb4:	f815 0008 	ldrb.w	r0, [r5, r8]
    bbb8:	f7f4 fe7b 	bl	8b2 <TfLiteTypeGetName>
    bbbc:	9a04      	ldr	r2, [sp, #16]
    bbbe:	492f      	ldr	r1, [pc, #188]	; (bc7c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
    bbc0:	4603      	mov	r3, r0
    bbc2:	4620      	mov	r0, r4
    bbc4:	47b8      	blx	r7
}
    bbc6:	4630      	mov	r0, r6
    bbc8:	b017      	add	sp, #92	; 0x5c
    bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
    bbce:	2e09      	cmp	r6, #9
    bbd0:	d131      	bne.n	bc36 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x192>
    switch (output->type) {
    bbd2:	f815 3008 	ldrb.w	r3, [r5, r8]
    bbd6:	2b09      	cmp	r3, #9
    bbd8:	d12d      	bne.n	bc36 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x192>
  for (int i = 0; i < dims->size; ++i) {
    bbda:	68be      	ldr	r6, [r7, #8]
            input->params.zero_point, data.input_range_radius,
    bbdc:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Logistic(
    bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbe0:	f856 8b04 	ldr.w	r8, [r6], #4
  int64_t count = 1;
    bbe4:	2401      	movs	r4, #1
    bbe6:	2500      	movs	r5, #0
    bbe8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    bbec:	e9cd 4504 	strd	r4, r5, [sp, #16]
  for (int i = 0; i < dims->size; ++i) {
    bbf0:	f04f 0c00 	mov.w	ip, #0
    bbf4:	45e0      	cmp	r8, ip
    bbf6:	dd14      	ble.n	bc22 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    count *= dims->data[i];
    bbf8:	f856 eb04 	ldr.w	lr, [r6], #4
    bbfc:	9c04      	ldr	r4, [sp, #16]
    bbfe:	ea4f 7bee 	mov.w	fp, lr, asr #31
    bc02:	fb04 fa0b 	mul.w	sl, r4, fp
    bc06:	9c05      	ldr	r4, [sp, #20]
    bc08:	fb0e aa04 	mla	sl, lr, r4, sl
    bc0c:	9c04      	ldr	r4, [sp, #16]
    bc0e:	fba4 450e 	umull	r4, r5, r4, lr
    bc12:	e9cd 4504 	strd	r4, r5, [sp, #16]
    bc16:	9c05      	ldr	r4, [sp, #20]
    bc18:	4454      	add	r4, sl
    bc1a:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
    bc1c:	f10c 0c01 	add.w	ip, ip, #1
    bc20:	e7e8      	b.n	bbf4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x150>
    bc22:	f8d9 5004 	ldr.w	r5, [r9, #4]
    bc26:	9502      	str	r5, [sp, #8]
    bc28:	687d      	ldr	r5, [r7, #4]
    bc2a:	9c04      	ldr	r4, [sp, #16]
    bc2c:	9501      	str	r5, [sp, #4]
    bc2e:	9400      	str	r4, [sp, #0]
    bc30:	f00e fb4b 	bl	1a2ca <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>
    bc34:	e780      	b.n	bb38 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x94>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    bc36:	4630      	mov	r0, r6
    bc38:	6967      	ldr	r7, [r4, #20]
    bc3a:	f7f4 fe3a 	bl	8b2 <TfLiteTypeGetName>
    bc3e:	9004      	str	r0, [sp, #16]
    bc40:	f815 0008 	ldrb.w	r0, [r5, r8]
    bc44:	f7f4 fe35 	bl	8b2 <TfLiteTypeGetName>
    bc48:	9a04      	ldr	r2, [sp, #16]
    bc4a:	490c      	ldr	r1, [pc, #48]	; (bc7c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
    bc4c:	4603      	mov	r3, r0
    bc4e:	4620      	mov	r0, r4
    bc50:	47b8      	blx	r7
    return kTfLiteError;
    bc52:	2601      	movs	r6, #1
    bc54:	e7b7      	b.n	bbc6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x122>
    bc56:	bf00      	nop
    bc58:	0002b75c 	.word	0x0002b75c
    bc5c:	0002b774 	.word	0x0002b774
    bc60:	0002b640 	.word	0x0002b640
    bc64:	0002af8a 	.word	0x0002af8a
    bc68:	0002ba1d 	.word	0x0002ba1d
    bc6c:	0002b968 	.word	0x0002b968
    bc70:	0002af4f 	.word	0x0002af4f
    bc74:	41a00000 	.word	0x41a00000
    bc78:	41e00000 	.word	0x41e00000
    bc7c:	0002b4db 	.word	0x0002b4db

0000bc80 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    bc80:	4800      	ldr	r0, [pc, #0]	; (bc84 <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x4>)
    bc82:	4770      	bx	lr
    bc84:	20000428 	.word	0x20000428

0000bc88 <_ZN6tflite3ops5micro16Register_MINIMUMEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    bc88:	4800      	ldr	r0, [pc, #0]	; (bc8c <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x4>)
    bc8a:	4770      	bx	lr
    bc8c:	20000448 	.word	0x20000448

0000bc90 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
    bc90:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bc92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
    bc96:	685c      	ldr	r4, [r3, #4]
    bc98:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    bc9a:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
    bc9c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    bca0:	685e      	ldr	r6, [r3, #4]
    bca2:	ea4f 1986 	mov.w	r9, r6, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bca6:	4607      	mov	r7, r0
    switch (op_context.output->type) {
    bca8:	f818 0009 	ldrb.w	r0, [r8, r9]
    bcac:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bcae:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
    bcb0:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    bcb4:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    bcb8:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    bcbc:	2b08      	cmp	r3, #8
    bcbe:	f200 80a4 	bhi.w	be0a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
    bcc2:	e8df f003 	tbb	[pc, r3]
    bcc6:	6805      	.short	0x6805
    bcc8:	a2a2852e 	.word	0xa2a2852e
    bccc:	a2a2      	.short	0xa2a2
    bcce:	4b          	.byte	0x4b
    bccf:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
    bcd0:	4621      	mov	r1, r4
    bcd2:	a804      	add	r0, sp, #16
    bcd4:	f009 fe2e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bcd8:	b104      	cbz	r4, bcdc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
    bcda:	6864      	ldr	r4, [r4, #4]
    bcdc:	4629      	mov	r1, r5
    bcde:	a80a      	add	r0, sp, #40	; 0x28
    bce0:	f009 fe28 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bce4:	b105      	cbz	r5, bce8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
    bce6:	686d      	ldr	r5, [r5, #4]
    bce8:	af10      	add	r7, sp, #64	; 0x40
    bcea:	4631      	mov	r1, r6
    bcec:	4638      	mov	r0, r7
    bcee:	f009 fe21 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bcf2:	4b4b      	ldr	r3, [pc, #300]	; (be20 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
    bcf4:	9302      	str	r3, [sp, #8]
    bcf6:	6873      	ldr	r3, [r6, #4]
    bcf8:	aa0a      	add	r2, sp, #40	; 0x28
    bcfa:	e9cd 7300 	strd	r7, r3, [sp]
    bcfe:	4621      	mov	r1, r4
    bd00:	462b      	mov	r3, r5
    bd02:	a804      	add	r0, sp, #16
    bd04:	f00e fc59 	bl	1a5ba <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
    bd08:	4638      	mov	r0, r7
    bd0a:	f009 fdce 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
    bd0e:	a80a      	add	r0, sp, #40	; 0x28
    bd10:	f009 fdcb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
    bd14:	a804      	add	r0, sp, #16
    bd16:	f009 fdc8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    bd1a:	2000      	movs	r0, #0
}
    bd1c:	b017      	add	sp, #92	; 0x5c
    bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
    bd22:	4621      	mov	r1, r4
    bd24:	a804      	add	r0, sp, #16
    bd26:	f009 fe05 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd2a:	b104      	cbz	r4, bd2e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
    bd2c:	6864      	ldr	r4, [r4, #4]
    bd2e:	4629      	mov	r1, r5
    bd30:	a80a      	add	r0, sp, #40	; 0x28
    bd32:	f009 fdff 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd36:	b105      	cbz	r5, bd3a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    bd38:	686d      	ldr	r5, [r5, #4]
    bd3a:	af10      	add	r7, sp, #64	; 0x40
    bd3c:	4631      	mov	r1, r6
    bd3e:	4638      	mov	r0, r7
    bd40:	f009 fdf8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd44:	4b37      	ldr	r3, [pc, #220]	; (be24 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
    bd46:	9302      	str	r3, [sp, #8]
    bd48:	6873      	ldr	r3, [r6, #4]
    bd4a:	aa0a      	add	r2, sp, #40	; 0x28
    bd4c:	e9cd 7300 	strd	r7, r3, [sp]
    bd50:	4621      	mov	r1, r4
    bd52:	462b      	mov	r3, r5
    bd54:	a804      	add	r0, sp, #16
    bd56:	f00e fce4 	bl	1a722 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bd5a:	e7d5      	b.n	bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bd5c:	4621      	mov	r1, r4
    bd5e:	a804      	add	r0, sp, #16
    bd60:	f009 fde8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd64:	b104      	cbz	r4, bd68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
    bd66:	6864      	ldr	r4, [r4, #4]
    bd68:	4629      	mov	r1, r5
    bd6a:	a80a      	add	r0, sp, #40	; 0x28
    bd6c:	f009 fde2 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd70:	b105      	cbz	r5, bd74 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
    bd72:	686d      	ldr	r5, [r5, #4]
    bd74:	af10      	add	r7, sp, #64	; 0x40
    bd76:	4631      	mov	r1, r6
    bd78:	4638      	mov	r0, r7
    bd7a:	f009 fddb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd7e:	4b2a      	ldr	r3, [pc, #168]	; (be28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
    bd80:	9302      	str	r3, [sp, #8]
    bd82:	6873      	ldr	r3, [r6, #4]
    bd84:	aa0a      	add	r2, sp, #40	; 0x28
    bd86:	e9cd 7300 	strd	r7, r3, [sp]
    bd8a:	4621      	mov	r1, r4
    bd8c:	462b      	mov	r3, r5
    bd8e:	a804      	add	r0, sp, #16
    bd90:	f00e fd72 	bl	1a878 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bd94:	e7b8      	b.n	bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bd96:	4621      	mov	r1, r4
    bd98:	a804      	add	r0, sp, #16
    bd9a:	f009 fdcb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd9e:	b104      	cbz	r4, bda2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
    bda0:	6864      	ldr	r4, [r4, #4]
    bda2:	4629      	mov	r1, r5
    bda4:	a80a      	add	r0, sp, #40	; 0x28
    bda6:	f009 fdc5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdaa:	b105      	cbz	r5, bdae <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
    bdac:	686d      	ldr	r5, [r5, #4]
    bdae:	af10      	add	r7, sp, #64	; 0x40
    bdb0:	4631      	mov	r1, r6
    bdb2:	4638      	mov	r0, r7
    bdb4:	f009 fdbe 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdb8:	4b1c      	ldr	r3, [pc, #112]	; (be2c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
    bdba:	9302      	str	r3, [sp, #8]
    bdbc:	6873      	ldr	r3, [r6, #4]
    bdbe:	aa0a      	add	r2, sp, #40	; 0x28
    bdc0:	e9cd 7300 	strd	r7, r3, [sp]
    bdc4:	4621      	mov	r1, r4
    bdc6:	462b      	mov	r3, r5
    bdc8:	a804      	add	r0, sp, #16
    bdca:	f00e fe00 	bl	1a9ce <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bdce:	e79b      	b.n	bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bdd0:	4621      	mov	r1, r4
    bdd2:	a804      	add	r0, sp, #16
    bdd4:	f009 fdae 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdd8:	b104      	cbz	r4, bddc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
    bdda:	6864      	ldr	r4, [r4, #4]
    bddc:	4629      	mov	r1, r5
    bdde:	a80a      	add	r0, sp, #40	; 0x28
    bde0:	f009 fda8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bde4:	b105      	cbz	r5, bde8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
    bde6:	686d      	ldr	r5, [r5, #4]
    bde8:	af10      	add	r7, sp, #64	; 0x40
    bdea:	4631      	mov	r1, r6
    bdec:	4638      	mov	r0, r7
    bdee:	f009 fda1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdf2:	4b0f      	ldr	r3, [pc, #60]	; (be30 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
    bdf4:	9302      	str	r3, [sp, #8]
    bdf6:	6873      	ldr	r3, [r6, #4]
    bdf8:	aa0a      	add	r2, sp, #40	; 0x28
    bdfa:	e9cd 7300 	strd	r7, r3, [sp]
    bdfe:	4621      	mov	r1, r4
    be00:	462b      	mov	r3, r5
    be02:	a804      	add	r0, sp, #16
    be04:	f00e fe96 	bl	1ab34 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    be08:	e77e      	b.n	bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
    be0a:	697c      	ldr	r4, [r7, #20]
    be0c:	f7f4 fd51 	bl	8b2 <TfLiteTypeGetName>
    be10:	f818 3009 	ldrb.w	r3, [r8, r9]
    be14:	4907      	ldr	r1, [pc, #28]	; (be34 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
    be16:	4602      	mov	r2, r0
    be18:	4638      	mov	r0, r7
    be1a:	47a0      	blx	r4
        return kTfLiteError;
    be1c:	2001      	movs	r0, #1
    be1e:	e77d      	b.n	bd1c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
    be20:	0001a3a5 	.word	0x0001a3a5
    be24:	0001a3b5 	.word	0x0001a3b5
    be28:	0001a3bd 	.word	0x0001a3bd
    be2c:	0001a3c5 	.word	0x0001a3c5
    be30:	0001a3cd 	.word	0x0001a3cd
    be34:	0002b66a 	.word	0x0002b66a

0000be38 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
    be38:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
    be3e:	685c      	ldr	r4, [r3, #4]
    be40:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    be42:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
    be44:	f8d0 8008 	ldr.w	r8, [r0, #8]
    be48:	685e      	ldr	r6, [r3, #4]
    be4a:	ea4f 1986 	mov.w	r9, r6, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be4e:	4607      	mov	r7, r0
    switch (op_context.output->type) {
    be50:	f818 0009 	ldrb.w	r0, [r8, r9]
    be54:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be56:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
    be58:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    be5c:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    be60:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    be64:	2b08      	cmp	r3, #8
    be66:	f200 80a4 	bhi.w	bfb2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
    be6a:	e8df f003 	tbb	[pc, r3]
    be6e:	6805      	.short	0x6805
    be70:	a2a2852e 	.word	0xa2a2852e
    be74:	a2a2      	.short	0xa2a2
    be76:	4b          	.byte	0x4b
    be77:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
    be78:	4621      	mov	r1, r4
    be7a:	a804      	add	r0, sp, #16
    be7c:	f009 fd5a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    be80:	b104      	cbz	r4, be84 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
    be82:	6864      	ldr	r4, [r4, #4]
    be84:	4629      	mov	r1, r5
    be86:	a80a      	add	r0, sp, #40	; 0x28
    be88:	f009 fd54 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    be8c:	b105      	cbz	r5, be90 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
    be8e:	686d      	ldr	r5, [r5, #4]
    be90:	af10      	add	r7, sp, #64	; 0x40
    be92:	4631      	mov	r1, r6
    be94:	4638      	mov	r0, r7
    be96:	f009 fd4d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    be9a:	4b4b      	ldr	r3, [pc, #300]	; (bfc8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
    be9c:	9302      	str	r3, [sp, #8]
    be9e:	6873      	ldr	r3, [r6, #4]
    bea0:	aa0a      	add	r2, sp, #40	; 0x28
    bea2:	e9cd 7300 	strd	r7, r3, [sp]
    bea6:	4621      	mov	r1, r4
    bea8:	462b      	mov	r3, r5
    beaa:	a804      	add	r0, sp, #16
    beac:	f00e fb85 	bl	1a5ba <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
    beb0:	4638      	mov	r0, r7
    beb2:	f009 fcfa 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
    beb6:	a80a      	add	r0, sp, #40	; 0x28
    beb8:	f009 fcf7 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
    bebc:	a804      	add	r0, sp, #16
    bebe:	f009 fcf4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    bec2:	2000      	movs	r0, #0
}
    bec4:	b017      	add	sp, #92	; 0x5c
    bec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
    beca:	4621      	mov	r1, r4
    becc:	a804      	add	r0, sp, #16
    bece:	f009 fd31 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bed2:	b104      	cbz	r4, bed6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
    bed4:	6864      	ldr	r4, [r4, #4]
    bed6:	4629      	mov	r1, r5
    bed8:	a80a      	add	r0, sp, #40	; 0x28
    beda:	f009 fd2b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bede:	b105      	cbz	r5, bee2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    bee0:	686d      	ldr	r5, [r5, #4]
    bee2:	af10      	add	r7, sp, #64	; 0x40
    bee4:	4631      	mov	r1, r6
    bee6:	4638      	mov	r0, r7
    bee8:	f009 fd24 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    beec:	4b37      	ldr	r3, [pc, #220]	; (bfcc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
    beee:	9302      	str	r3, [sp, #8]
    bef0:	6873      	ldr	r3, [r6, #4]
    bef2:	aa0a      	add	r2, sp, #40	; 0x28
    bef4:	e9cd 7300 	strd	r7, r3, [sp]
    bef8:	4621      	mov	r1, r4
    befa:	462b      	mov	r3, r5
    befc:	a804      	add	r0, sp, #16
    befe:	f00e fc10 	bl	1a722 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf02:	e7d5      	b.n	beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf04:	4621      	mov	r1, r4
    bf06:	a804      	add	r0, sp, #16
    bf08:	f009 fd14 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf0c:	b104      	cbz	r4, bf10 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
    bf0e:	6864      	ldr	r4, [r4, #4]
    bf10:	4629      	mov	r1, r5
    bf12:	a80a      	add	r0, sp, #40	; 0x28
    bf14:	f009 fd0e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf18:	b105      	cbz	r5, bf1c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
    bf1a:	686d      	ldr	r5, [r5, #4]
    bf1c:	af10      	add	r7, sp, #64	; 0x40
    bf1e:	4631      	mov	r1, r6
    bf20:	4638      	mov	r0, r7
    bf22:	f009 fd07 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf26:	4b2a      	ldr	r3, [pc, #168]	; (bfd0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
    bf28:	9302      	str	r3, [sp, #8]
    bf2a:	6873      	ldr	r3, [r6, #4]
    bf2c:	aa0a      	add	r2, sp, #40	; 0x28
    bf2e:	e9cd 7300 	strd	r7, r3, [sp]
    bf32:	4621      	mov	r1, r4
    bf34:	462b      	mov	r3, r5
    bf36:	a804      	add	r0, sp, #16
    bf38:	f00e fc9e 	bl	1a878 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf3c:	e7b8      	b.n	beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf3e:	4621      	mov	r1, r4
    bf40:	a804      	add	r0, sp, #16
    bf42:	f009 fcf7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf46:	b104      	cbz	r4, bf4a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
    bf48:	6864      	ldr	r4, [r4, #4]
    bf4a:	4629      	mov	r1, r5
    bf4c:	a80a      	add	r0, sp, #40	; 0x28
    bf4e:	f009 fcf1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf52:	b105      	cbz	r5, bf56 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
    bf54:	686d      	ldr	r5, [r5, #4]
    bf56:	af10      	add	r7, sp, #64	; 0x40
    bf58:	4631      	mov	r1, r6
    bf5a:	4638      	mov	r0, r7
    bf5c:	f009 fcea 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf60:	4b1c      	ldr	r3, [pc, #112]	; (bfd4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
    bf62:	9302      	str	r3, [sp, #8]
    bf64:	6873      	ldr	r3, [r6, #4]
    bf66:	aa0a      	add	r2, sp, #40	; 0x28
    bf68:	e9cd 7300 	strd	r7, r3, [sp]
    bf6c:	4621      	mov	r1, r4
    bf6e:	462b      	mov	r3, r5
    bf70:	a804      	add	r0, sp, #16
    bf72:	f00e fd2c 	bl	1a9ce <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf76:	e79b      	b.n	beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf78:	4621      	mov	r1, r4
    bf7a:	a804      	add	r0, sp, #16
    bf7c:	f009 fcda 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf80:	b104      	cbz	r4, bf84 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
    bf82:	6864      	ldr	r4, [r4, #4]
    bf84:	4629      	mov	r1, r5
    bf86:	a80a      	add	r0, sp, #40	; 0x28
    bf88:	f009 fcd4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf8c:	b105      	cbz	r5, bf90 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
    bf8e:	686d      	ldr	r5, [r5, #4]
    bf90:	af10      	add	r7, sp, #64	; 0x40
    bf92:	4631      	mov	r1, r6
    bf94:	4638      	mov	r0, r7
    bf96:	f009 fccd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf9a:	4b0f      	ldr	r3, [pc, #60]	; (bfd8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
    bf9c:	9302      	str	r3, [sp, #8]
    bf9e:	6873      	ldr	r3, [r6, #4]
    bfa0:	aa0a      	add	r2, sp, #40	; 0x28
    bfa2:	e9cd 7300 	strd	r7, r3, [sp]
    bfa6:	4621      	mov	r1, r4
    bfa8:	462b      	mov	r3, r5
    bfaa:	a804      	add	r0, sp, #16
    bfac:	f00e fdc2 	bl	1ab34 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bfb0:	e77e      	b.n	beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
    bfb2:	697c      	ldr	r4, [r7, #20]
    bfb4:	f7f4 fc7d 	bl	8b2 <TfLiteTypeGetName>
    bfb8:	f818 3009 	ldrb.w	r3, [r8, r9]
    bfbc:	4907      	ldr	r1, [pc, #28]	; (bfdc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
    bfbe:	4602      	mov	r2, r0
    bfc0:	4638      	mov	r0, r7
    bfc2:	47a0      	blx	r4
        return kTfLiteError;
    bfc4:	2001      	movs	r0, #1
    bfc6:	e77d      	b.n	bec4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
    bfc8:	0001a3e9 	.word	0x0001a3e9
    bfcc:	0001a3f9 	.word	0x0001a3f9
    bfd0:	0001a401 	.word	0x0001a401
    bfd4:	0001a409 	.word	0x0001a409
    bfd8:	0001a411 	.word	0x0001a411
    bfdc:	0002b66a 	.word	0x0002b66a

0000bfe0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>:
  int32_t output_multiplier;
  int output_shift;
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteMulParams* params, OpData* data) {
    bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfe4:	4699      	mov	r9, r3
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    bfe6:	680b      	ldr	r3, [r1, #0]
                             TfLiteMulParams* params, OpData* data) {
    bfe8:	4694      	mov	ip, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    bfea:	681a      	ldr	r2, [r3, #0]
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
    bfec:	2a02      	cmp	r2, #2
                             TfLiteMulParams* params, OpData* data) {
    bfee:	b085      	sub	sp, #20
    bff0:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
    bff2:	d010      	beq.n	c016 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x36>
    bff4:	2302      	movs	r3, #2
    bff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    bffa:	4b3f      	ldr	r3, [pc, #252]	; (c0f8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x118>)
    bffc:	9301      	str	r3, [sp, #4]
    bffe:	4b3f      	ldr	r3, [pc, #252]	; (c0fc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
    c000:	9300      	str	r3, [sp, #0]
    c002:	6944      	ldr	r4, [r0, #20]
    c004:	2330      	movs	r3, #48	; 0x30
    c006:	4a3e      	ldr	r2, [pc, #248]	; (c100 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
    c008:	493e      	ldr	r1, [pc, #248]	; (c104 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x124>)
    c00a:	47a0      	blx	r4
    c00c:	2401      	movs	r4, #1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
                       &data->output_shift);
  }

  return kTfLiteOk;
}
    c00e:	4620      	mov	r0, r4
    c010:	b005      	add	sp, #20
    c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    c016:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    c018:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    c01a:	2c01      	cmp	r4, #1
    c01c:	d009      	beq.n	c032 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x52>
    c01e:	2501      	movs	r5, #1
    c020:	4b39      	ldr	r3, [pc, #228]	; (c108 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x128>)
    c022:	9301      	str	r3, [sp, #4]
    c024:	e9cd 4502 	strd	r4, r5, [sp, #8]
    c028:	4b38      	ldr	r3, [pc, #224]	; (c10c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x12c>)
    c02a:	9300      	str	r3, [sp, #0]
    c02c:	6944      	ldr	r4, [r0, #20]
    c02e:	2331      	movs	r3, #49	; 0x31
    c030:	e7e9      	b.n	c006 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x26>
  return &context->tensors[node->inputs->data[index]];
    c032:	6859      	ldr	r1, [r3, #4]
    c034:	689b      	ldr	r3, [r3, #8]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c036:	6885      	ldr	r5, [r0, #8]
    c038:	ea4f 1b83 	mov.w	fp, r3, lsl #6
    c03c:	0188      	lsls	r0, r1, #6
    c03e:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
    c042:	5c28      	ldrb	r0, [r5, r0]
    c044:	f815 300b 	ldrb.w	r3, [r5, fp]
    c048:	4283      	cmp	r3, r0
    c04a:	eb05 1881 	add.w	r8, r5, r1, lsl #6
    c04e:	d014      	beq.n	c07a <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x9a>
    c050:	f8d6 8014 	ldr.w	r8, [r6, #20]
    c054:	f7f4 fc2d 	bl	8b2 <TfLiteTypeGetName>
    c058:	4607      	mov	r7, r0
    c05a:	f815 000b 	ldrb.w	r0, [r5, fp]
    c05e:	f7f4 fc28 	bl	8b2 <TfLiteTypeGetName>
    c062:	4b2b      	ldr	r3, [pc, #172]	; (c110 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x130>)
    c064:	9301      	str	r3, [sp, #4]
    c066:	4b2b      	ldr	r3, [pc, #172]	; (c114 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x134>)
    c068:	9300      	str	r3, [sp, #0]
    c06a:	e9cd 7002 	strd	r7, r0, [sp, #8]
    c06e:	4a24      	ldr	r2, [pc, #144]	; (c100 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
    c070:	4929      	ldr	r1, [pc, #164]	; (c118 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x138>)
    c072:	2333      	movs	r3, #51	; 0x33
    c074:	4630      	mov	r0, r6
    c076:	47c0      	blx	r8
    c078:	e7c9      	b.n	c00e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return &context->tensors[node->outputs->data[index]];
    c07a:	6857      	ldr	r7, [r2, #4]
    c07c:	01bb      	lsls	r3, r7, #6
    c07e:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    c082:	5ceb      	ldrb	r3, [r5, r3]
    c084:	2b03      	cmp	r3, #3
    c086:	d001      	beq.n	c08c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xac>
    c088:	2b09      	cmp	r3, #9
    c08a:	d132      	bne.n	c0f2 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x112>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    c08c:	f109 0304 	add.w	r3, r9, #4
    c090:	9300      	str	r3, [sp, #0]
    c092:	f89c 1000 	ldrb.w	r1, [ip]
    c096:	464b      	mov	r3, r9
    c098:	463a      	mov	r2, r7
    c09a:	4630      	mov	r0, r6
    c09c:	f005 fbf0 	bl	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    c0a0:	4604      	mov	r4, r0
    c0a2:	2800      	cmp	r0, #0
    c0a4:	d1b3      	bne.n	c00e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0a6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    c0aa:	f7f4 fddd 	bl	c68 <__aeabi_f2d>
    c0ae:	4680      	mov	r8, r0
                             static_cast<double>(input2->params.scale) /
    c0b0:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    c0b4:	f109 060c 	add.w	r6, r9, #12
    c0b8:	f109 0508 	add.w	r5, r9, #8
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0bc:	4689      	mov	r9, r1
                             static_cast<double>(input2->params.scale) /
    c0be:	f7f4 fdd3 	bl	c68 <__aeabi_f2d>
    c0c2:	4602      	mov	r2, r0
    c0c4:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0c6:	4640      	mov	r0, r8
    c0c8:	4649      	mov	r1, r9
    c0ca:	f7f4 fe25 	bl	d18 <__aeabi_dmul>
    c0ce:	4680      	mov	r8, r0
                             static_cast<double>(output->params.scale);
    c0d0:	68f8      	ldr	r0, [r7, #12]
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0d2:	4689      	mov	r9, r1
                             static_cast<double>(output->params.scale);
    c0d4:	f7f4 fdc8 	bl	c68 <__aeabi_f2d>
    c0d8:	4602      	mov	r2, r0
    c0da:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0dc:	4640      	mov	r0, r8
    c0de:	4649      	mov	r1, r9
    c0e0:	f7f4 ff44 	bl	f6c <__aeabi_ddiv>
    c0e4:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    c0e8:	4631      	mov	r1, r6
    c0ea:	4628      	mov	r0, r5
    c0ec:	f005 fb10 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    c0f0:	e78d      	b.n	c00e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return kTfLiteOk;
    c0f2:	2400      	movs	r4, #0
    c0f4:	e78b      	b.n	c00e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    c0f6:	bf00      	nop
    c0f8:	0002b7c1 	.word	0x0002b7c1
    c0fc:	0002af69 	.word	0x0002af69
    c100:	0002b69c 	.word	0x0002b69c
    c104:	0002af4f 	.word	0x0002af4f
    c108:	0002bbe9 	.word	0x0002bbe9
    c10c:	0002af79 	.word	0x0002af79
    c110:	0002b6c1 	.word	0x0002b6c1
    c114:	0002b6ce 	.word	0x0002b6ce
    c118:	0002af8a 	.word	0x0002af8a

0000c11c <_ZN6tflite3ops5micro12Register_MULEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c11c:	4800      	ldr	r0, [pc, #0]	; (c120 <_ZN6tflite3ops5micro12Register_MULEv+0x4>)
    c11e:	4770      	bx	lr
    c120:	20000468 	.word	0x20000468

0000c124 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
               TfLiteTensor* output) {
    c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c128:	ed2d 8b02 	vpush	{d8}
  CalculateActivationRange(params->activation, &output_activation_min,
    c12c:	7813      	ldrb	r3, [r2, #0]
               TfLiteTensor* output) {
    c12e:	b0aa      	sub	sp, #168	; 0xa8
  if (activation == kTfLiteActRelu) {
    c130:	2b01      	cmp	r3, #1
    c132:	e9dd 5432 	ldrd	r5, r4, [sp, #200]	; 0xc8
    c136:	9e34      	ldr	r6, [sp, #208]	; 0xd0
    c138:	d055      	beq.n	c1e6 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc2>
  } else if (activation == kTfLiteActRelu6) {
    c13a:	2b03      	cmp	r3, #3
    c13c:	d058      	beq.n	c1f0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xcc>
    *activation_max = std::numeric_limits<T>::max();
    c13e:	ed9f 7a48 	vldr	s14, [pc, #288]	; c260 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
    c142:	eddf 6a48 	vldr	s13, [pc, #288]	; c264 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x140>
    c146:	2b02      	cmp	r3, #2
    c148:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c14c:	bf18      	it	ne
    c14e:	eef0 7a47 	vmovne.f32	s15, s14
    c152:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    c156:	bf18      	it	ne
    c158:	eeb0 7a66 	vmovne.f32	s14, s13
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
    c15c:	af10      	add	r7, sp, #64	; 0x40
    c15e:	4629      	mov	r1, r5
    c160:	a80a      	add	r0, sp, #40	; 0x28
  params->float_activation_min = min;
    c162:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
    c166:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    c16a:	f009 fbe3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c16e:	4621      	mov	r1, r4
    c170:	4638      	mov	r0, r7
    c172:	f009 fbdf 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
    c176:	4639      	mov	r1, r7
    c178:	aa16      	add	r2, sp, #88	; 0x58
    c17a:	a80a      	add	r0, sp, #40	; 0x28
    c17c:	f009 fd51 	bl	15c22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
    c180:	4680      	mov	r8, r0
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
    c182:	4638      	mov	r0, r7
    c184:	f009 fb91 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    c188:	a80a      	add	r0, sp, #40	; 0x28
    c18a:	f009 fb8e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_MUL(BroadcastMul4DSlow);
    c18e:	4629      	mov	r1, r5
    c190:	a804      	add	r0, sp, #16
  if (need_broadcast) {
    c192:	f1b8 0f00 	cmp.w	r8, #0
    c196:	d02e      	beq.n	c1f6 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xd2>
    TF_LITE_MUL(BroadcastMul4DSlow);
    c198:	f009 fbcc 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c19c:	b105      	cbz	r5, c1a0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x7c>
    c19e:	686d      	ldr	r5, [r5, #4]
    c1a0:	4621      	mov	r1, r4
    c1a2:	a80a      	add	r0, sp, #40	; 0x28
    c1a4:	f009 fbc6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c1a8:	b104      	cbz	r4, c1ac <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x88>
    c1aa:	6864      	ldr	r4, [r4, #4]
    c1ac:	4631      	mov	r1, r6
    c1ae:	4638      	mov	r0, r7
    c1b0:	f009 fbc0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c1b4:	b106      	cbz	r6, c1b8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x94>
    c1b6:	6876      	ldr	r6, [r6, #4]
    c1b8:	9400      	str	r4, [sp, #0]
    c1ba:	e9cd 7601 	strd	r7, r6, [sp, #4]
    c1be:	ab0a      	add	r3, sp, #40	; 0x28
    c1c0:	462a      	mov	r2, r5
    c1c2:	a904      	add	r1, sp, #16
    c1c4:	a816      	add	r0, sp, #88	; 0x58
    c1c6:	f00e fd30 	bl	1ac2a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    TF_LITE_MUL(Mul);
    c1ca:	4638      	mov	r0, r7
    c1cc:	f009 fb6d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    c1d0:	a80a      	add	r0, sp, #40	; 0x28
    c1d2:	f009 fb6a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    c1d6:	a804      	add	r0, sp, #16
    c1d8:	f009 fb67 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
    c1dc:	b02a      	add	sp, #168	; 0xa8
    c1de:	ecbd 8b02 	vpop	{d8}
    c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *activation_max = std::numeric_limits<T>::max();
    c1e6:	eddf 7a1e 	vldr	s15, [pc, #120]	; c260 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
    *activation_min = 0;
    c1ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c268 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x144>
    c1ee:	e7b5      	b.n	c15c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x38>
    *activation_max = 6;
    c1f0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    c1f4:	e7f9      	b.n	c1ea <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc6>
    TF_LITE_MUL(Mul);
    c1f6:	f009 fb9d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c1fa:	b105      	cbz	r5, c1fe <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xda>
    c1fc:	686d      	ldr	r5, [r5, #4]
    c1fe:	4621      	mov	r1, r4
    c200:	a80a      	add	r0, sp, #40	; 0x28
    c202:	f009 fb97 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c206:	b104      	cbz	r4, c20a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xe6>
    c208:	6864      	ldr	r4, [r4, #4]
    c20a:	4631      	mov	r1, r6
    c20c:	4638      	mov	r0, r7
    c20e:	f009 fb91 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c212:	b106      	cbz	r6, c216 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xf2>
    c214:	6876      	ldr	r6, [r6, #4]
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
    c216:	eddd 8a23 	vldr	s17, [sp, #140]	; 0x8c
  *max = params.float_activation_max;
    c21a:	ed9d 8a24 	vldr	s16, [sp, #144]	; 0x90
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    c21e:	463a      	mov	r2, r7
    c220:	a90a      	add	r1, sp, #40	; 0x28
    c222:	a804      	add	r0, sp, #16
    c224:	f00a fbca 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; ++i) {
    c228:	2300      	movs	r3, #0
    c22a:	4298      	cmp	r0, r3
    c22c:	ddcd      	ble.n	c1ca <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xa6>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] * input2_data[i], output_activation_min,
    c22e:	ecf5 7a01 	vldmia	r5!, {s15}
    c232:	ecb4 7a01 	vldmia	r4!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
    c236:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int i = 0; i < flat_size; ++i) {
    c23a:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
    c23c:	eef4 7ae8 	vcmpe.f32	s15, s17
    c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c244:	bfb8      	it	lt
    c246:	eef0 7a68 	vmovlt.f32	s15, s17
    c24a:	eef4 7ac8 	vcmpe.f32	s15, s16
    c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c252:	bf88      	it	hi
    c254:	eef0 7a48 	vmovhi.f32	s15, s16
    c258:	ece6 7a01 	vstmia	r6!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    c25c:	e7e5      	b.n	c22a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x106>
    c25e:	bf00      	nop
    c260:	7f7fffff 	.word	0x7f7fffff
    c264:	ff7fffff 	.word	0xff7fffff
    c268:	00000000 	.word	0x00000000

0000c26c <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c270:	680b      	ldr	r3, [r1, #0]
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);
    c272:	694a      	ldr	r2, [r1, #20]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c274:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    c276:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    c27a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c27c:	b08b      	sub	sp, #44	; 0x2c
    c27e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
    c282:	9205      	str	r2, [sp, #20]
    c284:	ab06      	add	r3, sp, #24
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c286:	4604      	mov	r4, r0
    c288:	460d      	mov	r5, r1
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
    c28a:	f7ff fea9 	bl	bfe0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>
    c28e:	4606      	mov	r6, r0
    c290:	bb08      	cbnz	r0, c2d6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  return &context->tensors[node->inputs->data[index]];
    c292:	ea4f 1b88 	mov.w	fp, r8, lsl #6
  switch (input1->type) {
    c296:	9a05      	ldr	r2, [sp, #20]
    c298:	f817 000b 	ldrb.w	r0, [r7, fp]
    c29c:	2803      	cmp	r0, #3
    c29e:	eb07 1388 	add.w	r3, r7, r8, lsl #6
    c2a2:	eb07 1189 	add.w	r1, r7, r9, lsl #6
  return &context->tensors[node->outputs->data[index]];
    c2a6:	eb07 1a8a 	add.w	sl, r7, sl, lsl #6
    c2aa:	d00c      	beq.n	c2c6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    c2ac:	2809      	cmp	r0, #9
    c2ae:	d00a      	beq.n	c2c6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    c2b0:	2801      	cmp	r0, #1
    c2b2:	d114      	bne.n	c2de <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      EvalFloat(context, node, params, &data, input1, input2, output);
    c2b4:	e9cd 1a01 	strd	r1, sl, [sp, #4]
    c2b8:	9300      	str	r3, [sp, #0]
    c2ba:	4629      	mov	r1, r5
    c2bc:	ab06      	add	r3, sp, #24
    c2be:	4620      	mov	r0, r4
    c2c0:	f7ff ff30 	bl	c124 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
    c2c4:	e007      	b.n	c2d6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      EvalQuantized(context, node, params, &data, input1, input2, output);
    c2c6:	e9cd 1a01 	strd	r1, sl, [sp, #4]
    c2ca:	9300      	str	r3, [sp, #0]
    c2cc:	4629      	mov	r1, r5
    c2ce:	ab06      	add	r3, sp, #24
    c2d0:	4620      	mov	r0, r4
    c2d2:	f00e ff02 	bl	1b0da <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
}
    c2d6:	4630      	mov	r0, r6
    c2d8:	b00b      	add	sp, #44	; 0x2c
    c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c2de:	6965      	ldr	r5, [r4, #20]
    c2e0:	f7f4 fae7 	bl	8b2 <TfLiteTypeGetName>
    c2e4:	f817 300b 	ldrb.w	r3, [r7, fp]
    c2e8:	4902      	ldr	r1, [pc, #8]	; (c2f4 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
    c2ea:	4602      	mov	r2, r0
    c2ec:	4620      	mov	r0, r4
    c2ee:	47a8      	blx	r5
      return kTfLiteError;
    c2f0:	2601      	movs	r6, #1
    c2f2:	e7f0      	b.n	c2d6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    c2f4:	0002aea3 	.word	0x0002aea3

0000c2f8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    c2f8:	680b      	ldr	r3, [r1, #0]
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2fe:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    c300:	6884      	ldr	r4, [r0, #8]
    c302:	01b7      	lsls	r7, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c304:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
    c306:	5de0      	ldrb	r0, [r4, r7]
    c308:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c30a:	b08c      	sub	sp, #48	; 0x30
    c30c:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  switch (input->type) {
    c310:	d147      	bne.n	c3a2 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  return &context->tensors[node->outputs->data[index]];
    c312:	684b      	ldr	r3, [r1, #4]
    c314:	685b      	ldr	r3, [r3, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
    c316:	4631      	mov	r1, r6
    c318:	eb04 1483 	add.w	r4, r4, r3, lsl #6
    c31c:	4668      	mov	r0, sp
    c31e:	f009 fb09 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
    c322:	4621      	mov	r1, r4
    c324:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c326:	6876      	ldr	r6, [r6, #4]
    c328:	f009 fb04 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c32c:	b104      	cbz	r4, c330 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    c32e:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    c330:	9f00      	ldr	r7, [sp, #0]
    c332:	9b06      	ldr	r3, [sp, #24]
    c334:	429f      	cmp	r7, r3
    c336:	d001      	beq.n	c33c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    c338:	f012 f94b 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
    c33c:	2500      	movs	r5, #0
    c33e:	42af      	cmp	r7, r5
    c340:	dd0c      	ble.n	c35c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    c342:	4629      	mov	r1, r5
    c344:	4668      	mov	r0, sp
    c346:	f009 fabb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    c34a:	4629      	mov	r1, r5
    c34c:	4680      	mov	r8, r0
    c34e:	a806      	add	r0, sp, #24
    c350:	f009 fab6 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    c354:	4580      	cmp	r8, r0
    c356:	d1ef      	bne.n	c338 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
    c358:	3501      	adds	r5, #1
    c35a:	e7f0      	b.n	c33e <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c35c:	2f05      	cmp	r7, #5
    c35e:	bfcc      	ite	gt
    c360:	9a01      	ldrgt	r2, [sp, #4]
    c362:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
    c364:	2300      	movs	r3, #0
    int buffer_size = 1;
    c366:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    c368:	429f      	cmp	r7, r3
    c36a:	dc0b      	bgt.n	c384 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
    c36c:	4633      	mov	r3, r6
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
    c36e:	2200      	movs	r2, #0
    c370:	428a      	cmp	r2, r1
    c372:	da0c      	bge.n	c38e <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
    c374:	ecf3 7a01 	vldmia	r3!, {s15}
    c378:	eef1 7a67 	vneg.f32	s15, s15
    c37c:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    c380:	3201      	adds	r2, #1
    c382:	e7f5      	b.n	c370 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
    c384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    c388:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    c38a:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
    c38c:	e7ec      	b.n	c368 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    c38e:	a806      	add	r0, sp, #24
    c390:	f009 fa8b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
    c394:	4668      	mov	r0, sp
    c396:	f009 fa88 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
    c39a:	2000      	movs	r0, #0
}
    c39c:	b00c      	add	sp, #48	; 0x30
    c39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c3a2:	696e      	ldr	r6, [r5, #20]
    c3a4:	f7f4 fa85 	bl	8b2 <TfLiteTypeGetName>
    c3a8:	5de3      	ldrb	r3, [r4, r7]
    c3aa:	4903      	ldr	r1, [pc, #12]	; (c3b8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    c3ac:	4602      	mov	r2, r0
    c3ae:	4628      	mov	r0, r5
    c3b0:	47b0      	blx	r6
      return kTfLiteError;
    c3b2:	2001      	movs	r0, #1
    c3b4:	e7f2      	b.n	c39c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    c3b6:	bf00      	nop
    c3b8:	0002aea3 	.word	0x0002aea3

0000c3bc <_ZN6tflite3ops5micro12Register_NEGEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c3bc:	4800      	ldr	r0, [pc, #0]	; (c3c0 <_ZN6tflite3ops5micro12Register_NEGEv+0x4>)
    c3be:	4770      	bx	lr
    c3c0:	20000488 	.word	0x20000488

0000c3c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3c8:	b085      	sub	sp, #20
  const TfLitePackParams* data =
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    c3ca:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c3cc:	9000      	str	r0, [sp, #0]
    c3ce:	6848      	ldr	r0, [r1, #4]
  const TfLitePackParams* data =
    c3d0:	694a      	ldr	r2, [r1, #20]
    c3d2:	6847      	ldr	r7, [r0, #4]
    c3d4:	01b8      	lsls	r0, r7, #6
    c3d6:	eb03 1787 	add.w	r7, r3, r7, lsl #6

  switch (output->type) {
    c3da:	5c18      	ldrb	r0, [r3, r0]
    c3dc:	1e45      	subs	r5, r0, #1
    c3de:	2d08      	cmp	r5, #8
    c3e0:	f200 821a 	bhi.w	c818 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
    c3e4:	e8df f015 	tbh	[pc, r5, lsl #1]
    c3e8:	01430009 	.word	0x01430009
    c3ec:	01ab0075 	.word	0x01ab0075
    c3f0:	02180218 	.word	0x02180218
    c3f4:	02180218 	.word	0x02180218
    c3f8:	00db      	.short	0x00db
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c3fa:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c3fc:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
    c3fe:	6841      	ldr	r1, [r0, #4]
    c400:	f8d5 e000 	ldr.w	lr, [r5]
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
    c404:	e9d2 9200 	ldrd	r9, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c408:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    c40c:	f105 0c04 	add.w	ip, r5, #4
  if (axis < 0) {
    c410:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c412:	688c      	ldr	r4, [r1, #8]
    axis += dimensions;
    c414:	bfb8      	it	lt
    c416:	4472      	addlt	r2, lr
    c418:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    c41a:	2100      	movs	r1, #0
  int outer_size = 1;
    c41c:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    c41e:	428a      	cmp	r2, r1
    c420:	dd05      	ble.n	c42e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    outer_size *= output_dims->data[i];
    c422:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    c426:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c428:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    c42c:	e7f7      	b.n	c41e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  for (int i = axis + 1; i < dimensions; ++i) {
    c42e:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c430:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c432:	458e      	cmp	lr, r1
    c434:	dc0c      	bgt.n	c450 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
  for (int i = 0; i < input_dims->size; ++i) {
    c436:	4621      	mov	r1, r4
    c438:	2600      	movs	r6, #0
    c43a:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c43e:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c440:	45b6      	cmp	lr, r6
    c442:	dd0a      	ble.n	c45a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
    input_size *= input_dims->data[i];
    c444:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c448:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
    c44a:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
    c44e:	e7f7      	b.n	c440 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    copy_size *= output_dims->data[i];
    c450:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c454:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c456:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    c458:	e7eb      	b.n	c432 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c45a:	fb02 f105 	mul.w	r1, r2, r5
    c45e:	428c      	cmp	r4, r1
    c460:	d001      	beq.n	c466 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    c462:	f012 f8b6 	bl	1e5d2 <abort>
    c466:	6879      	ldr	r1, [r7, #4]
    c468:	9101      	str	r1, [sp, #4]
    c46a:	1d01      	adds	r1, r0, #4
    c46c:	9100      	str	r1, [sp, #0]
    c46e:	2400      	movs	r4, #0
    c470:	fb02 f109 	mul.w	r1, r2, r9
    c474:	9102      	str	r1, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c476:	4627      	mov	r7, r4
    c478:	45b9      	cmp	r9, r7
    c47a:	dc03      	bgt.n	c484 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return PackImpl<float>(context, node, output, data->values_count,
    c47c:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    c47e:	b005      	add	sp, #20
    c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c484:	9800      	ldr	r0, [sp, #0]
    c486:	f850 1b04 	ldr.w	r1, [r0], #4
    c48a:	9000      	str	r0, [sp, #0]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c48c:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int i = 0; i < values_count; ++i) {
    c490:	f04f 0600 	mov.w	r6, #0
    c494:	bf18      	it	ne
    c496:	6849      	ldrne	r1, [r1, #4]
    c498:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    c49a:	46b6      	mov	lr, r6
    c49c:	4575      	cmp	r5, lr
    c49e:	dd15      	ble.n	c4cc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
    c4a0:	9801      	ldr	r0, [sp, #4]
    c4a2:	eb01 0b86 	add.w	fp, r1, r6, lsl #2
    c4a6:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c4aa:	f04f 0800 	mov.w	r8, #0
    c4ae:	4542      	cmp	r2, r8
    c4b0:	dd06      	ble.n	c4c0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    c4b2:	ecfb 7a01 	vldmia	fp!, {s15}
    c4b6:	f108 0801 	add.w	r8, r8, #1
    c4ba:	ecea 7a01 	vstmia	sl!, {s15}
    c4be:	e7f6      	b.n	c4ae <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    for (int k = 0; k < outer_size; ++k) {
    c4c0:	9802      	ldr	r0, [sp, #8]
    c4c2:	f10e 0e01 	add.w	lr, lr, #1
    c4c6:	4416      	add	r6, r2
    c4c8:	4484      	add	ip, r0
    c4ca:	e7e7      	b.n	c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
  for (int i = 0; i < values_count; ++i) {
    c4cc:	3701      	adds	r7, #1
    c4ce:	4414      	add	r4, r2
    c4d0:	e7d2      	b.n	c478 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    c4d2:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c4d4:	68be      	ldr	r6, [r7, #8]
    c4d6:	6840      	ldr	r0, [r0, #4]
    c4d8:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
    c4dc:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c4e0:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    c4e4:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
    c4e8:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c4ea:	689d      	ldr	r5, [r3, #8]
    axis += dimensions;
    c4ec:	bfb8      	it	lt
    c4ee:	4472      	addlt	r2, lr
    c4f0:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    c4f2:	2300      	movs	r3, #0
  int outer_size = 1;
    c4f4:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    c4f6:	429a      	cmp	r2, r3
    c4f8:	dd05      	ble.n	c506 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
    outer_size *= output_dims->data[i];
    c4fa:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    c4fe:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
    c500:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    c504:	e7f7      	b.n	c4f6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
  for (int i = axis + 1; i < dimensions; ++i) {
    c506:	3201      	adds	r2, #1
  int copy_size = 1;
    c508:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c50a:	4596      	cmp	lr, r2
    c50c:	dc0c      	bgt.n	c528 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x164>
  for (int i = 0; i < input_dims->size; ++i) {
    c50e:	462a      	mov	r2, r5
  int input_size = 1;
    c510:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c512:	f852 eb04 	ldr.w	lr, [r2], #4
    c516:	2500      	movs	r5, #0
    c518:	45ae      	cmp	lr, r5
    c51a:	dd0a      	ble.n	c532 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
    input_size *= input_dims->data[i];
    c51c:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c520:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c522:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
    c526:	e7f7      	b.n	c518 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x154>
    copy_size *= output_dims->data[i];
    c528:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c52c:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
    c52e:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    c530:	e7eb      	b.n	c50a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c532:	fb03 f206 	mul.w	r2, r3, r6
    c536:	4290      	cmp	r0, r2
    c538:	d193      	bne.n	c462 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c53a:	687a      	ldr	r2, [r7, #4]
    c53c:	9201      	str	r2, [sp, #4]
    c53e:	2000      	movs	r0, #0
    c540:	fb03 f20b 	mul.w	r2, r3, fp
    c544:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c546:	4605      	mov	r5, r0
    c548:	45ab      	cmp	fp, r5
    c54a:	dd97      	ble.n	c47c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c54c:	680a      	ldr	r2, [r1, #0]
    c54e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    c552:	4684      	mov	ip, r0
    c554:	6857      	ldr	r7, [r2, #4]
    c556:	9a00      	ldr	r2, [sp, #0]
    c558:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c55a:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    c55e:	f04f 0700 	mov.w	r7, #0
    c562:	bf18      	it	ne
    c564:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    c566:	46be      	mov	lr, r7
    c568:	4576      	cmp	r6, lr
    c56a:	dd15      	ble.n	c598 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    c56c:	9c01      	ldr	r4, [sp, #4]
    c56e:	eb02 0a07 	add.w	sl, r2, r7
    c572:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c576:	f04f 0800 	mov.w	r8, #0
    c57a:	4543      	cmp	r3, r8
    c57c:	dd06      	ble.n	c58c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
    c57e:	f81a 4b01 	ldrb.w	r4, [sl], #1
    c582:	f809 4b01 	strb.w	r4, [r9], #1
    c586:	f108 0801 	add.w	r8, r8, #1
    c58a:	e7f6      	b.n	c57a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    for (int k = 0; k < outer_size; ++k) {
    c58c:	9c02      	ldr	r4, [sp, #8]
    c58e:	f10e 0e01 	add.w	lr, lr, #1
    c592:	441f      	add	r7, r3
    c594:	44a4      	add	ip, r4
    c596:	e7e7      	b.n	c568 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
  for (int i = 0; i < values_count; ++i) {
    c598:	3501      	adds	r5, #1
    c59a:	4418      	add	r0, r3
    c59c:	e7d4      	b.n	c548 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>
    c59e:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c5a0:	68be      	ldr	r6, [r7, #8]
    c5a2:	6840      	ldr	r0, [r0, #4]
    c5a4:	f8d6 e000 	ldr.w	lr, [r6]
                              data->axis);
    c5a8:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c5ac:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    c5b0:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
    c5b4:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c5b6:	689d      	ldr	r5, [r3, #8]
    axis += dimensions;
    c5b8:	bfb8      	it	lt
    c5ba:	4472      	addlt	r2, lr
    c5bc:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    c5be:	2300      	movs	r3, #0
  int outer_size = 1;
    c5c0:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    c5c2:	429a      	cmp	r2, r3
    c5c4:	dd05      	ble.n	c5d2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    outer_size *= output_dims->data[i];
    c5c6:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    c5ca:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
    c5cc:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    c5d0:	e7f7      	b.n	c5c2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
  for (int i = axis + 1; i < dimensions; ++i) {
    c5d2:	3201      	adds	r2, #1
  int copy_size = 1;
    c5d4:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c5d6:	4596      	cmp	lr, r2
    c5d8:	dc0c      	bgt.n	c5f4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  for (int i = 0; i < input_dims->size; ++i) {
    c5da:	462a      	mov	r2, r5
  int input_size = 1;
    c5dc:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c5de:	f852 eb04 	ldr.w	lr, [r2], #4
    c5e2:	2500      	movs	r5, #0
    c5e4:	45ae      	cmp	lr, r5
    c5e6:	dd0a      	ble.n	c5fe <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23a>
    input_size *= input_dims->data[i];
    c5e8:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c5ec:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c5ee:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
    c5f2:	e7f7      	b.n	c5e4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>
    copy_size *= output_dims->data[i];
    c5f4:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c5f8:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
    c5fa:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    c5fc:	e7eb      	b.n	c5d6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c5fe:	fb03 f206 	mul.w	r2, r3, r6
    c602:	4290      	cmp	r0, r2
    c604:	f47f af2d 	bne.w	c462 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c608:	687a      	ldr	r2, [r7, #4]
    c60a:	9201      	str	r2, [sp, #4]
    c60c:	2000      	movs	r0, #0
    c60e:	fb03 f20b 	mul.w	r2, r3, fp
    c612:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c614:	4605      	mov	r5, r0
    c616:	45ab      	cmp	fp, r5
    c618:	f77f af30 	ble.w	c47c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c61c:	680a      	ldr	r2, [r1, #0]
    c61e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    c622:	4684      	mov	ip, r0
    c624:	6857      	ldr	r7, [r2, #4]
    c626:	9a00      	ldr	r2, [sp, #0]
    c628:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c62a:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    c62e:	f04f 0700 	mov.w	r7, #0
    c632:	bf18      	it	ne
    c634:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    c636:	46be      	mov	lr, r7
    c638:	4576      	cmp	r6, lr
    c63a:	dd15      	ble.n	c668 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>
    c63c:	9c01      	ldr	r4, [sp, #4]
    c63e:	eb02 0a07 	add.w	sl, r2, r7
    c642:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c646:	f04f 0800 	mov.w	r8, #0
    c64a:	4543      	cmp	r3, r8
    c64c:	dd06      	ble.n	c65c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>
    c64e:	f91a 4b01 	ldrsb.w	r4, [sl], #1
    c652:	f809 4b01 	strb.w	r4, [r9], #1
    c656:	f108 0801 	add.w	r8, r8, #1
    c65a:	e7f6      	b.n	c64a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x286>
    for (int k = 0; k < outer_size; ++k) {
    c65c:	9c02      	ldr	r4, [sp, #8]
    c65e:	f10e 0e01 	add.w	lr, lr, #1
    c662:	441f      	add	r7, r3
    c664:	44a4      	add	ip, r4
    c666:	e7e7      	b.n	c638 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
  for (int i = 0; i < values_count; ++i) {
    c668:	3501      	adds	r5, #1
    c66a:	4418      	add	r0, r3
    c66c:	e7d3      	b.n	c616 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x252>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c66e:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c670:	68bd      	ldr	r5, [r7, #8]
    c672:	6841      	ldr	r1, [r0, #4]
    c674:	f8d5 e000 	ldr.w	lr, [r5]
                               data->axis);
    c678:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c67c:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    c680:	f105 0c04 	add.w	ip, r5, #4
  if (axis < 0) {
    c684:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c686:	688c      	ldr	r4, [r1, #8]
    axis += dimensions;
    c688:	bfb8      	it	lt
    c68a:	4472      	addlt	r2, lr
    c68c:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    c68e:	2100      	movs	r1, #0
  int outer_size = 1;
    c690:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    c692:	428a      	cmp	r2, r1
    c694:	dd05      	ble.n	c6a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2de>
    outer_size *= output_dims->data[i];
    c696:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    c69a:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c69c:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    c6a0:	e7f7      	b.n	c692 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
  for (int i = axis + 1; i < dimensions; ++i) {
    c6a2:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c6a4:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c6a6:	458e      	cmp	lr, r1
    c6a8:	dc0c      	bgt.n	c6c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
  for (int i = 0; i < input_dims->size; ++i) {
    c6aa:	4621      	mov	r1, r4
    c6ac:	2600      	movs	r6, #0
    c6ae:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c6b2:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c6b4:	45b6      	cmp	lr, r6
    c6b6:	dd0a      	ble.n	c6ce <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30a>
    input_size *= input_dims->data[i];
    c6b8:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c6bc:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
    c6be:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
    c6c2:	e7f7      	b.n	c6b4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    copy_size *= output_dims->data[i];
    c6c4:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c6c8:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c6ca:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    c6cc:	e7eb      	b.n	c6a6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c6ce:	fb02 f105 	mul.w	r1, r2, r5
    c6d2:	428c      	cmp	r4, r1
    c6d4:	f47f aec5 	bne.w	c462 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c6d8:	6879      	ldr	r1, [r7, #4]
    c6da:	9101      	str	r1, [sp, #4]
    c6dc:	1d01      	adds	r1, r0, #4
    c6de:	9100      	str	r1, [sp, #0]
    c6e0:	2400      	movs	r4, #0
    c6e2:	fb02 f10b 	mul.w	r1, r2, fp
    c6e6:	9102      	str	r1, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c6e8:	4627      	mov	r7, r4
    c6ea:	45bb      	cmp	fp, r7
    c6ec:	f77f aec6 	ble.w	c47c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c6f0:	9800      	ldr	r0, [sp, #0]
    c6f2:	f850 1b04 	ldr.w	r1, [r0], #4
    c6f6:	9000      	str	r0, [sp, #0]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c6f8:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    c6fc:	f04f 0600 	mov.w	r6, #0
    c700:	bf18      	it	ne
    c702:	6849      	ldrne	r1, [r1, #4]
    c704:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    c706:	46b6      	mov	lr, r6
    c708:	4575      	cmp	r5, lr
    c70a:	dd15      	ble.n	c738 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    c70c:	9801      	ldr	r0, [sp, #4]
    c70e:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
    c712:	eb00 098c 	add.w	r9, r0, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c716:	f04f 0800 	mov.w	r8, #0
    c71a:	4542      	cmp	r2, r8
    c71c:	dd06      	ble.n	c72c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>
    c71e:	f85a 0b04 	ldr.w	r0, [sl], #4
    c722:	f849 0b04 	str.w	r0, [r9], #4
    c726:	f108 0801 	add.w	r8, r8, #1
    c72a:	e7f6      	b.n	c71a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x356>
    for (int k = 0; k < outer_size; ++k) {
    c72c:	9802      	ldr	r0, [sp, #8]
    c72e:	f10e 0e01 	add.w	lr, lr, #1
    c732:	4416      	add	r6, r2
    c734:	4484      	add	ip, r0
    c736:	e7e7      	b.n	c708 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x344>
  for (int i = 0; i < values_count; ++i) {
    c738:	3701      	adds	r7, #1
    c73a:	4414      	add	r4, r2
    c73c:	e7d5      	b.n	c6ea <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x326>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c73e:	f8d1 c000 	ldr.w	ip, [r1]
  const int dimensions = output->dims->size;
    c742:	68be      	ldr	r6, [r7, #8]
    c744:	f8dc 1004 	ldr.w	r1, [ip, #4]
      return PackImpl<int64_t>(context, node, output, data->values_count,
    c748:	6810      	ldr	r0, [r2, #0]
                               data->axis);
    c74a:	6852      	ldr	r2, [r2, #4]
  const int dimensions = output->dims->size;
    c74c:	f8d6 e000 	ldr.w	lr, [r6]
      return PackImpl<int64_t>(context, node, output, data->values_count,
    c750:	9000      	str	r0, [sp, #0]
  const TfLiteIntArray* input_dims = input0->dims;
    c752:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  if (axis < 0) {
    c756:	2a00      	cmp	r2, #0
    c758:	f106 0604 	add.w	r6, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
    c75c:	6888      	ldr	r0, [r1, #8]
    axis += dimensions;
    c75e:	bfb8      	it	lt
    c760:	4472      	addlt	r2, lr
    c762:	4635      	mov	r5, r6
  for (int i = 0; i < axis; ++i) {
    c764:	2100      	movs	r1, #0
  int outer_size = 1;
    c766:	2401      	movs	r4, #1
  for (int i = 0; i < axis; ++i) {
    c768:	428a      	cmp	r2, r1
    c76a:	dd05      	ble.n	c778 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>
    outer_size *= output_dims->data[i];
    c76c:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
    c770:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c772:	fb08 f404 	mul.w	r4, r8, r4
  for (int i = 0; i < axis; ++i) {
    c776:	e7f7      	b.n	c768 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a4>
  for (int i = axis + 1; i < dimensions; ++i) {
    c778:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c77a:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c77c:	458e      	cmp	lr, r1
    c77e:	dc0b      	bgt.n	c798 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
  for (int i = 0; i < input_dims->size; ++i) {
    c780:	4601      	mov	r1, r0
    c782:	2500      	movs	r5, #0
    c784:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c788:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c78a:	45ae      	cmp	lr, r5
    c78c:	dd09      	ble.n	c7a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3de>
    input_size *= input_dims->data[i];
    c78e:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c792:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c794:	4370      	muls	r0, r6
  for (int i = 0; i < input_dims->size; ++i) {
    c796:	e7f8      	b.n	c78a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    copy_size *= output_dims->data[i];
    c798:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c79c:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c79e:	436a      	muls	r2, r5
  for (int i = axis + 1; i < dimensions; ++i) {
    c7a0:	e7ec      	b.n	c77c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c7a2:	fb02 f104 	mul.w	r1, r2, r4
    c7a6:	4288      	cmp	r0, r1
    c7a8:	f47f ae5b 	bne.w	c462 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c7ac:	6879      	ldr	r1, [r7, #4]
    c7ae:	9102      	str	r1, [sp, #8]
    c7b0:	f10c 0104 	add.w	r1, ip, #4
    c7b4:	9101      	str	r1, [sp, #4]
    c7b6:	9900      	ldr	r1, [sp, #0]
    c7b8:	2000      	movs	r0, #0
    c7ba:	4351      	muls	r1, r2
    c7bc:	9103      	str	r1, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
    c7be:	4684      	mov	ip, r0
    c7c0:	9900      	ldr	r1, [sp, #0]
    c7c2:	4561      	cmp	r1, ip
    c7c4:	f77f ae5a 	ble.w	c47c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c7c8:	9d01      	ldr	r5, [sp, #4]
    c7ca:	f855 1b04 	ldr.w	r1, [r5], #4
    c7ce:	9501      	str	r5, [sp, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c7d0:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    c7d4:	f04f 0500 	mov.w	r5, #0
    c7d8:	bf18      	it	ne
    c7da:	6849      	ldrne	r1, [r1, #4]
    c7dc:	4686      	mov	lr, r0
    for (int k = 0; k < outer_size; ++k) {
    c7de:	46a8      	mov	r8, r5
    c7e0:	4544      	cmp	r4, r8
    c7e2:	dd15      	ble.n	c810 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>
    c7e4:	9f02      	ldr	r7, [sp, #8]
    c7e6:	eb01 0bc5 	add.w	fp, r1, r5, lsl #3
    c7ea:	eb07 0ace 	add.w	sl, r7, lr, lsl #3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c7ee:	f04f 0900 	mov.w	r9, #0
    c7f2:	454a      	cmp	r2, r9
    c7f4:	dd06      	ble.n	c804 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
    c7f6:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    c7fa:	f109 0901 	add.w	r9, r9, #1
    c7fe:	e8ea 6702 	strd	r6, r7, [sl], #8
    c802:	e7f6      	b.n	c7f2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42e>
    for (int k = 0; k < outer_size; ++k) {
    c804:	9f03      	ldr	r7, [sp, #12]
    c806:	f108 0801 	add.w	r8, r8, #1
    c80a:	4415      	add	r5, r2
    c80c:	44be      	add	lr, r7
    c80e:	e7e7      	b.n	c7e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  for (int i = 0; i < values_count; ++i) {
    c810:	f10c 0c01 	add.w	ip, ip, #1
    c814:	4410      	add	r0, r2
    c816:	e7d3      	b.n	c7c0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by pack.",
    c818:	9b00      	ldr	r3, [sp, #0]
    c81a:	695d      	ldr	r5, [r3, #20]
    c81c:	f7f4 f849 	bl	8b2 <TfLiteTypeGetName>
    c820:	4902      	ldr	r1, [pc, #8]	; (c82c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x468>)
    c822:	4602      	mov	r2, r0
    c824:	9800      	ldr	r0, [sp, #0]
    c826:	47a8      	blx	r5
      return kTfLiteError;
    c828:	2001      	movs	r0, #1
    c82a:	e628      	b.n	c47e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    c82c:	0002b6db 	.word	0x0002b6db

0000c830 <_ZN6tflite3ops5micro13Register_PACKEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c830:	4800      	ldr	r0, [pc, #0]	; (c834 <_ZN6tflite3ops5micro13Register_PACKEv+0x4>)
    c832:	4770      	bx	lr
    c834:	200004a8 	.word	0x200004a8

0000c838 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    c838:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output;
  int dims;
  ResizingCategory resizing_category;
};

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
    c83e:	681b      	ldr	r3, [r3, #0]
    c840:	3b02      	subs	r3, #2
    c842:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c844:	b090      	sub	sp, #64	; 0x40
    c846:	4604      	mov	r4, r0
    c848:	460a      	mov	r2, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
    c84a:	d90a      	bls.n	c862 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    c84c:	4b58      	ldr	r3, [pc, #352]	; (c9b0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    c84e:	9300      	str	r3, [sp, #0]
    c850:	6944      	ldr	r4, [r0, #20]
    c852:	4a58      	ldr	r2, [pc, #352]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c854:	4958      	ldr	r1, [pc, #352]	; (c9b8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    c856:	2347      	movs	r3, #71	; 0x47
    c858:	47a0      	blx	r4
  }

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(
      context, op_context.dims <= reference_ops::PadKernelMaxDimensionCount());
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
    c85a:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    c85c:	b010      	add	sp, #64	; 0x40
    c85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    c862:	684b      	ldr	r3, [r1, #4]
    c864:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    c866:	2d01      	cmp	r5, #1
    c868:	d00c      	beq.n	c884 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    c86a:	2601      	movs	r6, #1
    c86c:	e9cd 5602 	strd	r5, r6, [sp, #8]
    c870:	4b52      	ldr	r3, [pc, #328]	; (c9bc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    c872:	9301      	str	r3, [sp, #4]
    c874:	4b52      	ldr	r3, [pc, #328]	; (c9c0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    c876:	9300      	str	r3, [sp, #0]
    c878:	6944      	ldr	r4, [r0, #20]
    c87a:	4a4e      	ldr	r2, [pc, #312]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c87c:	4951      	ldr	r1, [pc, #324]	; (c9c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c87e:	2348      	movs	r3, #72	; 0x48
    c880:	47a0      	blx	r4
    c882:	e7ea      	b.n	c85a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  PadContext op_context(context, node);
    c884:	4601      	mov	r1, r0
    c886:	a804      	add	r0, sp, #16
    c888:	f00e fc38 	bl	1b0fc <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);
    c88c:	9b05      	ldr	r3, [sp, #20]
    c88e:	9a07      	ldr	r2, [sp, #28]
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	7812      	ldrb	r2, [r2, #0]
    c894:	4293      	cmp	r3, r2
    c896:	d00c      	beq.n	c8b2 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
    c898:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c89c:	4b4a      	ldr	r3, [pc, #296]	; (c9c8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c89e:	9301      	str	r3, [sp, #4]
    c8a0:	4b4a      	ldr	r3, [pc, #296]	; (c9cc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c8a2:	9300      	str	r3, [sp, #0]
    c8a4:	6966      	ldr	r6, [r4, #20]
    c8a6:	234b      	movs	r3, #75	; 0x4b
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
    c8a8:	4a42      	ldr	r2, [pc, #264]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c8aa:	4946      	ldr	r1, [pc, #280]	; (c9c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c8ac:	4620      	mov	r0, r4
    c8ae:	47b0      	blx	r6
    c8b0:	e7d3      	b.n	c85a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  if (op_context.constant_values != nullptr) {
    c8b2:	9a04      	ldr	r2, [sp, #16]
    c8b4:	b15a      	cbz	r2, c8ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
    c8b6:	7812      	ldrb	r2, [r2, #0]
    c8b8:	4293      	cmp	r3, r2
    c8ba:	d008      	beq.n	c8ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    c8bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c8c0:	4b43      	ldr	r3, [pc, #268]	; (c9d0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c8c2:	9301      	str	r3, [sp, #4]
    c8c4:	4b41      	ldr	r3, [pc, #260]	; (c9cc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c8c6:	9300      	str	r3, [sp, #0]
    c8c8:	6966      	ldr	r6, [r4, #20]
    c8ca:	234d      	movs	r3, #77	; 0x4d
    c8cc:	e7ec      	b.n	c8a8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(op_context.paddings).FlatSize(),
    c8ce:	9906      	ldr	r1, [sp, #24]
    c8d0:	a80a      	add	r0, sp, #40	; 0x28
    c8d2:	f009 f82f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c8d6:	a80a      	add	r0, sp, #40	; 0x28
    c8d8:	f009 f877 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    c8dc:	9b07      	ldr	r3, [sp, #28]
    c8de:	689b      	ldr	r3, [r3, #8]
    c8e0:	681d      	ldr	r5, [r3, #0]
    c8e2:	4606      	mov	r6, r0
    c8e4:	006d      	lsls	r5, r5, #1
    c8e6:	a80a      	add	r0, sp, #40	; 0x28
    c8e8:	f008 ffdf 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    c8ec:	42ae      	cmp	r6, r5
    c8ee:	d01a      	beq.n	c926 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xee>
    c8f0:	9906      	ldr	r1, [sp, #24]
    c8f2:	6965      	ldr	r5, [r4, #20]
    c8f4:	a80a      	add	r0, sp, #40	; 0x28
    c8f6:	f009 f81d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c8fa:	a80a      	add	r0, sp, #40	; 0x28
    c8fc:	f009 f865 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    c900:	9b07      	ldr	r3, [sp, #28]
    c902:	4a2c      	ldr	r2, [pc, #176]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c904:	689b      	ldr	r3, [r3, #8]
    c906:	492f      	ldr	r1, [pc, #188]	; (c9c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c908:	681b      	ldr	r3, [r3, #0]
    c90a:	005b      	lsls	r3, r3, #1
    c90c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    c910:	4b30      	ldr	r3, [pc, #192]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    c912:	9301      	str	r3, [sp, #4]
    c914:	4b30      	ldr	r3, [pc, #192]	; (c9d8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    c916:	9300      	str	r3, [sp, #0]
    c918:	4620      	mov	r0, r4
    c91a:	2352      	movs	r3, #82	; 0x52
    c91c:	47a8      	blx	r5
    c91e:	a80a      	add	r0, sp, #40	; 0x28
    c920:	f008 ffc3 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    c924:	e799      	b.n	c85a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
    c926:	9906      	ldr	r1, [sp, #24]
    c928:	b339      	cbz	r1, c97a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x142>
    c92a:	684d      	ldr	r5, [r1, #4]
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c92c:	9b07      	ldr	r3, [sp, #28]
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c92e:	f8dd e014 	ldr.w	lr, [sp, #20]
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c932:	6898      	ldr	r0, [r3, #8]
    c934:	f850 cb04 	ldr.w	ip, [r0], #4
    c938:	2300      	movs	r3, #0
                       paddings_data[i * 2 + 1];
    c93a:	f105 0804 	add.w	r8, r5, #4
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c93e:	459c      	cmp	ip, r3
    c940:	dd1f      	ble.n	c982 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c942:	f855 6033 	ldr.w	r6, [r5, r3, lsl #3]
    c946:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
    int output_dim = op_context.output->dims->data[i];
    c94a:	f850 7b04 	ldr.w	r7, [r0], #4
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c94e:	4432      	add	r2, r6
    c950:	f8de 6008 	ldr.w	r6, [lr, #8]
    c954:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    c958:	6876      	ldr	r6, [r6, #4]
    c95a:	4432      	add	r2, r6
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
    c95c:	4297      	cmp	r7, r2
    c95e:	d00e      	beq.n	c97e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
    c960:	e9cd 7202 	strd	r7, r2, [sp, #8]
    c964:	4b1d      	ldr	r3, [pc, #116]	; (c9dc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    c966:	9301      	str	r3, [sp, #4]
    c968:	4b1d      	ldr	r3, [pc, #116]	; (c9e0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    c96a:	9300      	str	r3, [sp, #0]
    c96c:	6965      	ldr	r5, [r4, #20]
    c96e:	4a11      	ldr	r2, [pc, #68]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c970:	4914      	ldr	r1, [pc, #80]	; (c9c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c972:	235b      	movs	r3, #91	; 0x5b
    c974:	4620      	mov	r0, r4
    c976:	47a8      	blx	r5
    c978:	e76f      	b.n	c85a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    c97a:	460d      	mov	r5, r1
    c97c:	e7d6      	b.n	c92c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c97e:	3301      	adds	r3, #1
    c980:	e7dd      	b.n	c93e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TF_LITE_ENSURE(
    c982:	9b08      	ldr	r3, [sp, #32]
    c984:	2b04      	cmp	r3, #4
    c986:	dd08      	ble.n	c99a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
    c988:	4b16      	ldr	r3, [pc, #88]	; (c9e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    c98a:	9300      	str	r3, [sp, #0]
    c98c:	6965      	ldr	r5, [r4, #20]
    c98e:	235f      	movs	r3, #95	; 0x5f
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
    c990:	4a08      	ldr	r2, [pc, #32]	; (c9b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c992:	4909      	ldr	r1, [pc, #36]	; (c9b8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    c994:	4620      	mov	r0, r4
    c996:	47a8      	blx	r5
    c998:	e75f      	b.n	c85a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    c99a:	7d0b      	ldrb	r3, [r1, #20]
    c99c:	2b01      	cmp	r3, #1
    c99e:	d004      	beq.n	c9aa <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
    c9a0:	4b11      	ldr	r3, [pc, #68]	; (c9e8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    c9a2:	9300      	str	r3, [sp, #0]
    c9a4:	6965      	ldr	r5, [r4, #20]
    c9a6:	2361      	movs	r3, #97	; 0x61
    c9a8:	e7f2      	b.n	c990 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
  return kTfLiteOk;
    c9aa:	2000      	movs	r0, #0
    c9ac:	e756      	b.n	c85c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
    c9ae:	bf00      	nop
    c9b0:	0002b724 	.word	0x0002b724
    c9b4:	0002b6ff 	.word	0x0002b6ff
    c9b8:	0002a6ae 	.word	0x0002a6ae
    c9bc:	0002bbe9 	.word	0x0002bbe9
    c9c0:	0002af79 	.word	0x0002af79
    c9c4:	0002af4f 	.word	0x0002af4f
    c9c8:	0002b751 	.word	0x0002b751
    c9cc:	0002b769 	.word	0x0002b769
    c9d0:	0002b780 	.word	0x0002b780
    c9d4:	0002b7a1 	.word	0x0002b7a1
    c9d8:	0002b7c3 	.word	0x0002b7c3
    c9dc:	0002b7f2 	.word	0x0002b7f2
    c9e0:	0002b7ff 	.word	0x0002b7ff
    c9e4:	0002b80a 	.word	0x0002b80a
    c9e8:	0002b849 	.word	0x0002b849

0000c9ec <_ZN6tflite3ops5micro12Register_PADEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c9ec:	4800      	ldr	r0, [pc, #0]	; (c9f0 <_ZN6tflite3ops5micro12Register_PADEv+0x4>)
    c9ee:	4770      	bx	lr
    c9f0:	200004c8 	.word	0x200004c8

0000c9f4 <_ZN6tflite3ops5micro14Register_PADV2Ev>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c9f4:	4800      	ldr	r0, [pc, #0]	; (c9f8 <_ZN6tflite3ops5micro14Register_PADV2Ev+0x4>)
    c9f6:	4770      	bx	lr
    c9f8:	200004e8 	.word	0x200004e8

0000c9fc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca00:	ed2d 8b02 	vpush	{d8}
    ca04:	b0a5      	sub	sp, #148	; 0x94
    ca06:	460a      	mov	r2, r1
    ca08:	4604      	mov	r4, r0
  PadContext op_context(context, node);
    ca0a:	4601      	mov	r1, r0
    ca0c:	a807      	add	r0, sp, #28
    ca0e:	f00e fb75 	bl	1b0fc <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  if (op_context.constant_values != nullptr) {
    ca12:	9b07      	ldr	r3, [sp, #28]
    ca14:	b343      	cbz	r3, ca68 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  for (int i = 0; i < dims->size; ++i) {
    ca16:	6899      	ldr	r1, [r3, #8]
    ca18:	f851 7b04 	ldr.w	r7, [r1], #4
    ca1c:	2000      	movs	r0, #0
  int64_t count = 1;
    ca1e:	2201      	movs	r2, #1
    ca20:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    ca22:	4287      	cmp	r7, r0
    ca24:	dd0c      	ble.n	ca40 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    count *= dims->data[i];
    ca26:	f851 6b04 	ldr.w	r6, [r1], #4
    ca2a:	ea4f 79e6 	mov.w	r9, r6, asr #31
    ca2e:	fb02 f509 	mul.w	r5, r2, r9
    ca32:	fb06 5503 	mla	r5, r6, r3, r5
    ca36:	fba2 2306 	umull	r2, r3, r2, r6
    ca3a:	442b      	add	r3, r5
  for (int i = 0; i < dims->size; ++i) {
    ca3c:	3001      	adds	r0, #1
    ca3e:	e7f0      	b.n	ca22 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x26>
    TF_LITE_ENSURE_EQ(context, NumElements(op_context.constant_values), 1);
    ca40:	2b00      	cmp	r3, #0
    ca42:	bf08      	it	eq
    ca44:	2a01      	cmpeq	r2, #1
    ca46:	d00f      	beq.n	ca68 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    ca48:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ca4c:	4b8a      	ldr	r3, [pc, #552]	; (cc78 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x27c>)
    ca4e:	9301      	str	r3, [sp, #4]
    ca50:	2501      	movs	r5, #1
    ca52:	4b8a      	ldr	r3, [pc, #552]	; (cc7c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x280>)
    ca54:	9300      	str	r3, [sp, #0]
    ca56:	9504      	str	r5, [sp, #16]
    ca58:	6966      	ldr	r6, [r4, #20]
    ca5a:	4a89      	ldr	r2, [pc, #548]	; (cc80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    ca5c:	4989      	ldr	r1, [pc, #548]	; (cc84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    ca5e:	236a      	movs	r3, #106	; 0x6a
    ca60:	4620      	mov	r0, r4
    ca62:	47b0      	blx	r6
      return kTfLiteError;
    ca64:	2001      	movs	r0, #1
    ca66:	e050      	b.n	cb0a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
    ca68:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ca6a:	b105      	cbz	r5, ca6e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x72>
    ca6c:	686d      	ldr	r5, [r5, #4]
  memset(&op_params, 0, sizeof(PadParams));
    ca6e:	222c      	movs	r2, #44	; 0x2c
    ca70:	2100      	movs	r1, #0
    ca72:	a819      	add	r0, sp, #100	; 0x64
    ca74:	f011 fdd0 	bl	1e618 <memset>
  op_params.left_padding_count = op_context.dims;
    ca78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca7a:	a919      	add	r1, sp, #100	; 0x64
    ca7c:	b25a      	sxtb	r2, r3
    ca7e:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  op_params.right_padding_count = op_context.dims;
    ca82:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
    ca86:	1d28      	adds	r0, r5, #4
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
    ca88:	1e5a      	subs	r2, r3, #1
    ca8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ca8e:	2a00      	cmp	r2, #0
    ca90:	db08      	blt.n	caa4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
    op_params.left_padding[idx] = paddings_data[idx * 2];
    ca92:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    ca96:	f843 1904 	str.w	r1, [r3], #-4
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
    ca9a:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
    ca9e:	6199      	str	r1, [r3, #24]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
    caa0:	3a01      	subs	r2, #1
    caa2:	e7f4      	b.n	ca8e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  switch (op_context.input->type) {
    caa4:	9908      	ldr	r1, [sp, #32]
    caa6:	7808      	ldrb	r0, [r1, #0]
    caa8:	1e43      	subs	r3, r0, #1
    caaa:	2b08      	cmp	r3, #8
    caac:	f200 811d 	bhi.w	ccea <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
    cab0:	e8df f013 	tbh	[pc, r3, lsl #1]
    cab4:	00fe0009 	.word	0x00fe0009
    cab8:	011b0032 	.word	0x011b0032
    cabc:	011b011b 	.word	0x011b011b
    cac0:	011b011b 	.word	0x011b011b
    cac4:	0096      	.short	0x0096
      float pad_value = op_context.constant_values == nullptr
    cac6:	9b07      	ldr	r3, [sp, #28]
                            ? 0.f
    cac8:	b323      	cbz	r3, cb14 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x118>
    caca:	685b      	ldr	r3, [r3, #4]
    cacc:	681b      	ldr	r3, [r3, #0]
        TF_LITE_PAD(reference_ops, PadImageStyle, float, pad_value);
    cace:	9306      	str	r3, [sp, #24]
    cad0:	a80d      	add	r0, sp, #52	; 0x34
        TF_LITE_PAD(reference_ops, Pad, float, pad_value);
    cad2:	f008 ff2f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cad6:	9c08      	ldr	r4, [sp, #32]
    cad8:	b104      	cbz	r4, cadc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
    cada:	6864      	ldr	r4, [r4, #4]
    cadc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cade:	a813      	add	r0, sp, #76	; 0x4c
    cae0:	f008 ff28 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cae6:	b103      	cbz	r3, caea <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    cae8:	685b      	ldr	r3, [r3, #4]
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
    caea:	9301      	str	r3, [sp, #4]
    caec:	ab13      	add	r3, sp, #76	; 0x4c
    caee:	9300      	str	r3, [sp, #0]
    caf0:	4622      	mov	r2, r4
    caf2:	ab06      	add	r3, sp, #24
    caf4:	a90d      	add	r1, sp, #52	; 0x34
    caf6:	a819      	add	r0, sp, #100	; 0x64
    caf8:	f00e fbfa 	bl	1b2f0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
    cafc:	a813      	add	r0, sp, #76	; 0x4c
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
    cafe:	f008 fed4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    cb02:	a80d      	add	r0, sp, #52	; 0x34
    cb04:	f008 fed1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    cb08:	2000      	movs	r0, #0
}
    cb0a:	b025      	add	sp, #148	; 0x94
    cb0c:	ecbd 8b02 	vpop	{d8}
    cb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            ? 0.f
    cb14:	2300      	movs	r3, #0
    cb16:	e7da      	b.n	cace <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xd2>
      if (op_context.constant_values == nullptr) {
    cb18:	980a      	ldr	r0, [sp, #40]	; 0x28
    cb1a:	9a07      	ldr	r2, [sp, #28]
    cb1c:	6903      	ldr	r3, [r0, #16]
    cb1e:	2a00      	cmp	r2, #0
    cb20:	d12b      	bne.n	cb7a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x17e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
    cb22:	2b00      	cmp	r3, #0
    cb24:	da08      	bge.n	cb38 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    cb26:	4b58      	ldr	r3, [pc, #352]	; (cc88 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    cb28:	9300      	str	r3, [sp, #0]
    cb2a:	6965      	ldr	r5, [r4, #20]
    cb2c:	2391      	movs	r3, #145	; 0x91
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
    cb2e:	4a54      	ldr	r2, [pc, #336]	; (cc80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cb30:	4956      	ldr	r1, [pc, #344]	; (cc8c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x290>)
    cb32:	4620      	mov	r0, r4
    cb34:	47a8      	blx	r5
    cb36:	e795      	b.n	ca64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
    cb38:	2bff      	cmp	r3, #255	; 0xff
    cb3a:	dd04      	ble.n	cb46 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    cb3c:	4b54      	ldr	r3, [pc, #336]	; (cc90 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x294>)
    cb3e:	9300      	str	r3, [sp, #0]
    cb40:	6965      	ldr	r5, [r4, #20]
    cb42:	2393      	movs	r3, #147	; 0x93
    cb44:	e7f3      	b.n	cb2e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<uint8_t>(op_context.output->params.zero_point);
    cb46:	b2db      	uxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, uint8_t, pad_value);
    cb48:	a80d      	add	r0, sp, #52	; 0x34
    cb4a:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, uint8_t, pad_value);
    cb4e:	f008 fef1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cb52:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cb54:	b104      	cbz	r4, cb58 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    cb56:	6864      	ldr	r4, [r4, #4]
    cb58:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb5a:	a813      	add	r0, sp, #76	; 0x4c
    cb5c:	f008 feea 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cb62:	b103      	cbz	r3, cb66 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    cb64:	685b      	ldr	r3, [r3, #4]
    cb66:	9301      	str	r3, [sp, #4]
    cb68:	ab13      	add	r3, sp, #76	; 0x4c
    cb6a:	9300      	str	r3, [sp, #0]
    cb6c:	4622      	mov	r2, r4
    cb6e:	ab06      	add	r3, sp, #24
    cb70:	a90d      	add	r1, sp, #52	; 0x34
    cb72:	a819      	add	r0, sp, #100	; 0x64
    cb74:	f00e fc72 	bl	1b45c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cb78:	e7c0      	b.n	cafc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cb7a:	6915      	ldr	r5, [r2, #16]
    cb7c:	429d      	cmp	r5, r3
    cb7e:	d00c      	beq.n	cb9a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    cb80:	e9cd 3502 	strd	r3, r5, [sp, #8]
    cb84:	4b43      	ldr	r3, [pc, #268]	; (cc94 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
    cb86:	9301      	str	r3, [sp, #4]
    cb88:	4b43      	ldr	r3, [pc, #268]	; (cc98 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    cb8a:	9300      	str	r3, [sp, #0]
    cb8c:	6965      	ldr	r5, [r4, #20]
    cb8e:	2399      	movs	r3, #153	; 0x99
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cb90:	4a3b      	ldr	r2, [pc, #236]	; (cc80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cb92:	493c      	ldr	r1, [pc, #240]	; (cc84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    cb94:	4620      	mov	r0, r4
    cb96:	47a8      	blx	r5
    cb98:	e764      	b.n	ca64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE_EQ(
    cb9a:	ed90 8a03 	vldr	s16, [r0, #12]
    cb9e:	edd2 7a03 	vldr	s15, [r2, #12]
    cba2:	eeb4 8a67 	vcmp.f32	s16, s15
    cba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbaa:	d016      	beq.n	cbda <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    cbac:	ee17 0a90 	vmov	r0, s15
    cbb0:	f7f4 f85a 	bl	c68 <__aeabi_f2d>
    cbb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    cbb8:	ee18 0a10 	vmov	r0, s16
    cbbc:	f7f4 f854 	bl	c68 <__aeabi_f2d>
    cbc0:	4b36      	ldr	r3, [pc, #216]	; (cc9c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
    cbc2:	9301      	str	r3, [sp, #4]
    cbc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cbc8:	4b35      	ldr	r3, [pc, #212]	; (cca0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
    cbca:	9300      	str	r3, [sp, #0]
    cbcc:	6965      	ldr	r5, [r4, #20]
    cbce:	4a2c      	ldr	r2, [pc, #176]	; (cc80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cbd0:	492c      	ldr	r1, [pc, #176]	; (cc84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    cbd2:	239b      	movs	r3, #155	; 0x9b
    cbd4:	4620      	mov	r0, r4
    cbd6:	47a8      	blx	r5
    cbd8:	e744      	b.n	ca64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        pad_value = *GetTensorData<uint8_t>(op_context.constant_values);
    cbda:	6853      	ldr	r3, [r2, #4]
    cbdc:	781b      	ldrb	r3, [r3, #0]
    cbde:	e7b3      	b.n	cb48 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
      if (op_context.constant_values == nullptr) {
    cbe0:	980a      	ldr	r0, [sp, #40]	; 0x28
    cbe2:	9a07      	ldr	r2, [sp, #28]
    cbe4:	6903      	ldr	r3, [r0, #16]
    cbe6:	bb42      	cbnz	r2, cc3a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x23e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
    cbe8:	f113 0f80 	cmn.w	r3, #128	; 0x80
    cbec:	da04      	bge.n	cbf8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    cbee:	4b2d      	ldr	r3, [pc, #180]	; (cca4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
    cbf0:	9300      	str	r3, [sp, #0]
    cbf2:	6965      	ldr	r5, [r4, #20]
    cbf4:	23ab      	movs	r3, #171	; 0xab
    cbf6:	e79a      	b.n	cb2e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
    cbf8:	2b7f      	cmp	r3, #127	; 0x7f
    cbfa:	dd04      	ble.n	cc06 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    cbfc:	4b2a      	ldr	r3, [pc, #168]	; (cca8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    cbfe:	9300      	str	r3, [sp, #0]
    cc00:	6965      	ldr	r5, [r4, #20]
    cc02:	23ad      	movs	r3, #173	; 0xad
    cc04:	e793      	b.n	cb2e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<int8_t>(op_context.output->params.zero_point);
    cc06:	b25b      	sxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, int8_t, pad_value);
    cc08:	a80d      	add	r0, sp, #52	; 0x34
    cc0a:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
    cc0e:	f008 fe91 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cc12:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cc14:	b104      	cbz	r4, cc18 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x21c>
    cc16:	6864      	ldr	r4, [r4, #4]
    cc18:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc1a:	a813      	add	r0, sp, #76	; 0x4c
    cc1c:	f008 fe8a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cc20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cc22:	b103      	cbz	r3, cc26 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x22a>
    cc24:	685b      	ldr	r3, [r3, #4]
    cc26:	9301      	str	r3, [sp, #4]
    cc28:	ab13      	add	r3, sp, #76	; 0x4c
    cc2a:	9300      	str	r3, [sp, #0]
    cc2c:	4622      	mov	r2, r4
    cc2e:	ab06      	add	r3, sp, #24
    cc30:	a90d      	add	r1, sp, #52	; 0x34
    cc32:	a819      	add	r0, sp, #100	; 0x64
    cc34:	f00e fcc9 	bl	1b5ca <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cc38:	e760      	b.n	cafc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cc3a:	6915      	ldr	r5, [r2, #16]
    cc3c:	429d      	cmp	r5, r3
    cc3e:	d008      	beq.n	cc52 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x256>
    cc40:	e9cd 3502 	strd	r3, r5, [sp, #8]
    cc44:	4b13      	ldr	r3, [pc, #76]	; (cc94 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
    cc46:	9301      	str	r3, [sp, #4]
    cc48:	4b13      	ldr	r3, [pc, #76]	; (cc98 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    cc4a:	9300      	str	r3, [sp, #0]
    cc4c:	6965      	ldr	r5, [r4, #20]
    cc4e:	23b3      	movs	r3, #179	; 0xb3
    cc50:	e79e      	b.n	cb90 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x194>
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
    cc52:	ed90 7a03 	vldr	s14, [r0, #12]
    cc56:	edd2 7a03 	vldr	s15, [r2, #12]
    cc5a:	eeb4 7a67 	vcmp.f32	s14, s15
    cc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc62:	d004      	beq.n	cc6e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x272>
    cc64:	4b11      	ldr	r3, [pc, #68]	; (ccac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    cc66:	9300      	str	r3, [sp, #0]
    cc68:	6965      	ldr	r5, [r4, #20]
    cc6a:	23b5      	movs	r3, #181	; 0xb5
    cc6c:	e75f      	b.n	cb2e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = *GetTensorData<int8_t>(op_context.constant_values);
    cc6e:	6853      	ldr	r3, [r2, #4]
    cc70:	f993 3000 	ldrsb.w	r3, [r3]
    cc74:	e7c8      	b.n	cc08 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20c>
    cc76:	bf00      	nop
    cc78:	0002bbe9 	.word	0x0002bbe9
    cc7c:	0002b86f 	.word	0x0002b86f
    cc80:	0002b6ff 	.word	0x0002b6ff
    cc84:	0002af4f 	.word	0x0002af4f
    cc88:	0002b897 	.word	0x0002b897
    cc8c:	0002a6ae 	.word	0x0002a6ae
    cc90:	0002b8e3 	.word	0x0002b8e3
    cc94:	0002b92f 	.word	0x0002b92f
    cc98:	0002b95d 	.word	0x0002b95d
    cc9c:	0002b982 	.word	0x0002b982
    cca0:	0002b9c0 	.word	0x0002b9c0
    cca4:	0002b9f5 	.word	0x0002b9f5
    cca8:	0002ba40 	.word	0x0002ba40
    ccac:	0002ba8b 	.word	0x0002ba8b
          op_context.constant_values == nullptr
    ccb0:	9b07      	ldr	r3, [sp, #28]
              ? 0
    ccb2:	b10b      	cbz	r3, ccb8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
    ccb4:	685b      	ldr	r3, [r3, #4]
    ccb6:	681b      	ldr	r3, [r3, #0]
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
    ccb8:	9306      	str	r3, [sp, #24]
    ccba:	a80d      	add	r0, sp, #52	; 0x34
    ccbc:	f008 fe3a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ccc0:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ccc2:	b104      	cbz	r4, ccc6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ca>
    ccc4:	6864      	ldr	r4, [r4, #4]
    ccc6:	990a      	ldr	r1, [sp, #40]	; 0x28
    ccc8:	ad13      	add	r5, sp, #76	; 0x4c
    ccca:	4628      	mov	r0, r5
    cccc:	f008 fe32 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ccd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ccd2:	b103      	cbz	r3, ccd6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
    ccd4:	685b      	ldr	r3, [r3, #4]
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32* input_data,
                const int32* pad_value_ptr, const RuntimeShape& output_shape,
                int32* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
    ccd6:	e9cd 5300 	strd	r5, r3, [sp]
    ccda:	a819      	add	r0, sp, #100	; 0x64
    ccdc:	ab06      	add	r3, sp, #24
    ccde:	4622      	mov	r2, r4
    cce0:	a90d      	add	r1, sp, #52	; 0x34
    cce2:	f00e fa4e 	bl	1b182 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cce6:	4628      	mov	r0, r5
    cce8:	e709      	b.n	cafe <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x102>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
    ccea:	6965      	ldr	r5, [r4, #20]
    ccec:	f7f3 fde1 	bl	8b2 <TfLiteTypeGetName>
    ccf0:	4902      	ldr	r1, [pc, #8]	; (ccfc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
    ccf2:	4602      	mov	r2, r0
    ccf4:	4620      	mov	r0, r4
    ccf6:	47a8      	blx	r5
    ccf8:	e6b4      	b.n	ca64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    ccfa:	bf00      	nop
    ccfc:	0002bad7 	.word	0x0002bad7

0000cd00 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
    cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd04:	ed2d 8b04 	vpush	{d8-d9}
    cd08:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd0a:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
    cd0c:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd0e:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
    cd10:	4604      	mov	r4, r0
    cd12:	460d      	mov	r5, r1
    cd14:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd16:	d001      	beq.n	cd1c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
    cd18:	f011 fc5b 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    cd1c:	6833      	ldr	r3, [r6, #0]
    cd1e:	2b04      	cmp	r3, #4
    cd20:	d1fa      	bne.n	cd18 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    cd22:	2300      	movs	r3, #0
    cd24:	4619      	mov	r1, r3
    cd26:	4632      	mov	r2, r6
    cd28:	4628      	mov	r0, r5
    cd2a:	f00b fc76 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd2e:	2303      	movs	r3, #3
    cd30:	4619      	mov	r1, r3
    cd32:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    cd34:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd36:	4628      	mov	r0, r5
    cd38:	f00b fc6f 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    cd3c:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd3e:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
    cd40:	4628      	mov	r0, r5
    cd42:	f008 fdbd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    cd46:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    cd48:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
    cd4a:	4628      	mov	r0, r5
    cd4c:	f008 fdb8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    cd50:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    cd52:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
    cd54:	4630      	mov	r0, r6
    cd56:	f008 fdb3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    cd5a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    cd5c:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
    cd5e:	4630      	mov	r0, r6
    cd60:	f008 fdae 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
    cd64:	68e3      	ldr	r3, [r4, #12]
    cd66:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
    cd68:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
    cd6a:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
    cd6c:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
    cd6e:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
    cd72:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
    cd76:	9b08      	ldr	r3, [sp, #32]
    cd78:	459b      	cmp	fp, r3
    cd7a:	f280 808e 	bge.w	ce9a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19a>
    cd7e:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cd82:	46d0      	mov	r8, sl
    cd84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd86:	4598      	cmp	r8, r3
    cd88:	f280 8084 	bge.w	ce94 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x194>
              (out_y * stride_height) - params.padding_values.height;
    cd8c:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cd8e:	46b9      	mov	r9, r7
    cd90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd92:	4599      	cmp	r9, r3
    cd94:	da79      	bge.n	ce8a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
        for (int channel = 0; channel < depth; ++channel) {
    cd96:	2300      	movs	r3, #0
    cd98:	9303      	str	r3, [sp, #12]
    cd9a:	9b03      	ldr	r3, [sp, #12]
    cd9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd9e:	4293      	cmp	r3, r2
    cda0:	da6e      	bge.n	ce80 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x180>
              (out_x * stride_width) - params.padding_values.width;
    cda2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    cda6:	69a0      	ldr	r0, [r4, #24]
          float filter_count = 0;
    cda8:	ed9f 8a3e 	vldr	s16, [pc, #248]	; cea4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
          const int in_x_origin =
    cdac:	1afa      	subs	r2, r7, r3
    cdae:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
    cdb0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int filter_x_start = std::max(0, -in_x_origin);
    cdb4:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
    cdb6:	ebaa 0102 	sub.w	r1, sl, r2
    cdba:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
    cdbc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    cdc0:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
    cdc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cdc4:	440b      	add	r3, r1
    cdc6:	4283      	cmp	r3, r0
    cdc8:	bfa8      	it	ge
    cdca:	4603      	movge	r3, r0
    cdcc:	9307      	str	r3, [sp, #28]
              std::min(params.filter_height, input_height - in_y_origin);
    cdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
    cdd0:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_height, input_height - in_y_origin);
    cdd4:	18d0      	adds	r0, r2, r3
    cdd6:	6963      	ldr	r3, [r4, #20]
    cdd8:	4298      	cmp	r0, r3
    cdda:	bfa8      	it	ge
    cddc:	4618      	movge	r0, r3
    cdde:	9b05      	ldr	r3, [sp, #20]
    cde0:	9011      	str	r0, [sp, #68]	; 0x44
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    cde2:	2a00      	cmp	r2, #0
    cde4:	bfa8      	it	ge
    cde6:	189b      	addge	r3, r3, r2
    cde8:	461a      	mov	r2, r3
          float total = 0.f;
    cdea:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    cdee:	9b05      	ldr	r3, [sp, #20]
    cdf0:	9911      	ldr	r1, [sp, #68]	; 0x44
    cdf2:	1ad3      	subs	r3, r2, r3
    cdf4:	4299      	cmp	r1, r3
    cdf6:	dd1f      	ble.n	ce38 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x138>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    cdf8:	9b06      	ldr	r3, [sp, #24]
    cdfa:	9304      	str	r3, [sp, #16]
    cdfc:	9b04      	ldr	r3, [sp, #16]
    cdfe:	9907      	ldr	r1, [sp, #28]
    ce00:	428b      	cmp	r3, r1
    ce02:	da17      	bge.n	ce34 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    ce04:	9b03      	ldr	r3, [sp, #12]
    ce06:	9910      	ldr	r1, [sp, #64]	; 0x40
    ce08:	9300      	str	r3, [sp, #0]
    ce0a:	9b04      	ldr	r3, [sp, #16]
    ce0c:	9213      	str	r2, [sp, #76]	; 0x4c
    ce0e:	440b      	add	r3, r1
    ce10:	4628      	mov	r0, r5
    ce12:	4659      	mov	r1, fp
    ce14:	f008 fe16 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    ce18:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    ce1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce20:	9b04      	ldr	r3, [sp, #16]
              total +=
    ce22:	edd0 7a00 	vldr	s15, [r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce26:	3301      	adds	r3, #1
              total +=
    ce28:	ee78 8aa7 	vadd.f32	s17, s17, s15
              filter_count++;
    ce2c:	ee38 8a29 	vadd.f32	s16, s16, s19
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce30:	9304      	str	r3, [sp, #16]
    ce32:	e7e3      	b.n	cdfc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    ce34:	3201      	adds	r2, #1
    ce36:	e7da      	b.n	cdee <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          const float average = total / filter_count;
    ce38:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    ce3c:	9b03      	ldr	r3, [sp, #12]
    ce3e:	9300      	str	r3, [sp, #0]
    ce40:	4642      	mov	r2, r8
    ce42:	464b      	mov	r3, r9
    ce44:	4659      	mov	r1, fp
    ce46:	4630      	mov	r0, r6
    ce48:	f008 fdfc 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    ce4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
    ce52:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    ce54:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    ce58:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    ce5c:	eef4 7ac9 	vcmpe.f32	s15, s18
    ce60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce64:	bfb8      	it	lt
    ce66:	eef0 7a49 	vmovlt.f32	s15, s18
    ce6a:	eef4 7ac7 	vcmpe.f32	s15, s14
    ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce72:	bf88      	it	hi
    ce74:	eef0 7a47 	vmovhi.f32	s15, s14
    ce78:	edc0 7a00 	vstr	s15, [r0]
        for (int channel = 0; channel < depth; ++channel) {
    ce7c:	3301      	adds	r3, #1
    ce7e:	e78b      	b.n	cd98 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ce80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce82:	f109 0901 	add.w	r9, r9, #1
    ce86:	441f      	add	r7, r3
    ce88:	e782      	b.n	cd90 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x90>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ce8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce8c:	f108 0801 	add.w	r8, r8, #1
    ce90:	449a      	add	sl, r3
    ce92:	e777      	b.n	cd84 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int batch = 0; batch < batches; ++batch) {
    ce94:	f10b 0b01 	add.w	fp, fp, #1
    ce98:	e76d      	b.n	cd76 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
                                           params.float_activation_max);
        }
      }
    }
  }
}
    ce9a:	b015      	add	sp, #84	; 0x54
    ce9c:	ecbd 8b04 	vpop	{d8-d9}
    cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cea4:	00000000 	.word	0x00000000

0000cea8 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    cea8:	4800      	ldr	r0, [pc, #0]	; (ceac <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x4>)
    ceaa:	4770      	bx	lr
    ceac:	20000528 	.word	0x20000528

0000ceb0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ceb0:	4800      	ldr	r0, [pc, #0]	; (ceb4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x4>)
    ceb2:	4770      	bx	lr
    ceb4:	20000508 	.word	0x20000508

0000ceb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
    ceb8:	2801      	cmp	r0, #1
    ceba:	d103      	bne.n	cec4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
    cebc:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    cebe:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    cec0:	4b09      	ldr	r3, [pc, #36]	; (cee8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
    cec2:	e004      	b.n	cece <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
    cec4:	2803      	cmp	r0, #3
    cec6:	d104      	bne.n	ced2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
    cec8:	2300      	movs	r3, #0
    ceca:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    cecc:	4b07      	ldr	r3, [pc, #28]	; (ceec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    cece:	6013      	str	r3, [r2, #0]
  }
}
    ced0:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    ced2:	2802      	cmp	r0, #2
    ced4:	d104      	bne.n	cee0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
    ced6:	4b06      	ldr	r3, [pc, #24]	; (cef0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    ced8:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    ceda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    cede:	e7f6      	b.n	cece <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    cee0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    cee4:	e7eb      	b.n	cebe <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
    cee6:	bf00      	nop
    cee8:	7f7fffff 	.word	0x7f7fffff
    ceec:	40c00000 	.word	0x40c00000
    cef0:	bf800000 	.word	0xbf800000

0000cef4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
    cef8:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    cefa:	f8d0 9008 	ldr.w	r9, [r0, #8]
    cefe:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    cf00:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    cf02:	684b      	ldr	r3, [r1, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    cf04:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
    cf06:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    cf0a:	eb09 1686 	add.w	r6, r9, r6, lsl #6
    cf0e:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    cf10:	aa07      	add	r2, sp, #28
    cf12:	4631      	mov	r1, r6
    cf14:	4628      	mov	r0, r5
  return &context->tensors[node->outputs->data[index]];
    cf16:	685c      	ldr	r4, [r3, #4]
    cf18:	f00f f827 	bl	1bf6a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
    cf1c:	4680      	mov	r8, r0
    cf1e:	2800      	cmp	r0, #0
    cf20:	d139      	bne.n	cf96 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
    cf22:	f819 000a 	ldrb.w	r0, [r9, sl]
    cf26:	2803      	cmp	r0, #3
    cf28:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    cf2c:	d037      	beq.n	cf9e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    cf2e:	2809      	cmp	r0, #9
    cf30:	d035      	beq.n	cf9e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    cf32:	2801      	cmp	r0, #1
    cf34:	d177      	bne.n	d026 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
    cf36:	aa06      	add	r2, sp, #24
    cf38:	7d28      	ldrb	r0, [r5, #20]
    cf3a:	a905      	add	r1, sp, #20
    cf3c:	f7ff ffbc 	bl	ceb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    cf40:	68ab      	ldr	r3, [r5, #8]
    cf42:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    cf44:	686b      	ldr	r3, [r5, #4]
    cf46:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    cf48:	692b      	ldr	r3, [r5, #16]
    cf4a:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    cf4c:	68eb      	ldr	r3, [r5, #12]
    cf4e:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    cf50:	9b08      	ldr	r3, [sp, #32]
    cf52:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    cf56:	9b07      	ldr	r3, [sp, #28]
    cf58:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
    cf5c:	9b05      	ldr	r3, [sp, #20]
    cf5e:	9320      	str	r3, [sp, #128]	; 0x80
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    cf60:	4631      	mov	r1, r6
  op_params.float_activation_max = activation_max;
    cf62:	9b06      	ldr	r3, [sp, #24]
    cf64:	9321      	str	r3, [sp, #132]	; 0x84
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    cf66:	a80b      	add	r0, sp, #44	; 0x2c
    cf68:	f008 fce4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cf6c:	6872      	ldr	r2, [r6, #4]
    cf6e:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<float>(output));
    cf70:	4621      	mov	r1, r4
    cf72:	a811      	add	r0, sp, #68	; 0x44
    cf74:	f008 fcde 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cf78:	9a03      	ldr	r2, [sp, #12]
    cf7a:	b104      	cbz	r4, cf7e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    cf7c:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
    cf7e:	9400      	str	r4, [sp, #0]
    cf80:	ab11      	add	r3, sp, #68	; 0x44
    cf82:	a90b      	add	r1, sp, #44	; 0x2c
    cf84:	a817      	add	r0, sp, #92	; 0x5c
    cf86:	f7ff febb 	bl	cd00 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    cf8a:	a811      	add	r0, sp, #68	; 0x44
    cf8c:	f008 fc8d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cf90:	a80b      	add	r0, sp, #44	; 0x2c
    cf92:	f008 fc8a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
    cf96:	4640      	mov	r0, r8
    cf98:	b022      	add	sp, #136	; 0x88
    cf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
    cf9e:	ab06      	add	r3, sp, #24
    cfa0:	7d29      	ldrb	r1, [r5, #20]
    cfa2:	9300      	str	r3, [sp, #0]
    cfa4:	4622      	mov	r2, r4
    cfa6:	ab05      	add	r3, sp, #20
    cfa8:	4638      	mov	r0, r7
    cfaa:	f004 fc69 	bl	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
    cfae:	68ab      	ldr	r3, [r5, #8]
    cfb0:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    cfb2:	686b      	ldr	r3, [r5, #4]
    cfb4:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    cfb6:	692b      	ldr	r3, [r5, #16]
    cfb8:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    cfba:	68eb      	ldr	r3, [r5, #12]
    cfbc:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    cfbe:	9b08      	ldr	r3, [sp, #32]
    cfc0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    cfc4:	9b07      	ldr	r3, [sp, #28]
    cfc6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
    cfca:	9b05      	ldr	r3, [sp, #20]
    cfcc:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
    cfce:	9b06      	ldr	r3, [sp, #24]
    cfd0:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
    cfd2:	f819 300a 	ldrb.w	r3, [r9, sl]
    cfd6:	2b03      	cmp	r3, #3
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cfd8:	4631      	mov	r1, r6
    cfda:	a80b      	add	r0, sp, #44	; 0x2c
  if (input->type == kTfLiteUInt8) {
    cfdc:	d111      	bne.n	d002 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cfde:	f008 fca9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cfe2:	6872      	ldr	r2, [r6, #4]
    cfe4:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    cfe6:	4621      	mov	r1, r4
    cfe8:	a811      	add	r0, sp, #68	; 0x44
    cfea:	f008 fca3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cfee:	9a03      	ldr	r2, [sp, #12]
    cff0:	b104      	cbz	r4, cff4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x100>
    cff2:	6864      	ldr	r4, [r4, #4]
    reference_ops::AveragePool(
    cff4:	9400      	str	r4, [sp, #0]
    cff6:	ab11      	add	r3, sp, #68	; 0x44
    cff8:	a90b      	add	r1, sp, #44	; 0x2c
    cffa:	a817      	add	r0, sp, #92	; 0x5c
    cffc:	f00e fb9d 	bl	1b73a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    d000:	e7c3      	b.n	cf8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d002:	f008 fc97 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d006:	6872      	ldr	r2, [r6, #4]
    d008:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    d00a:	4621      	mov	r1, r4
    d00c:	a811      	add	r0, sp, #68	; 0x44
    d00e:	f008 fc91 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d012:	9a03      	ldr	r2, [sp, #12]
    d014:	b104      	cbz	r4, d018 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x124>
    d016:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::AveragePool(
    d018:	9400      	str	r4, [sp, #0]
    d01a:	ab11      	add	r3, sp, #68	; 0x44
    d01c:	a90b      	add	r1, sp, #44	; 0x2c
    d01e:	a817      	add	r0, sp, #92	; 0x5c
    d020:	f00e fdff 	bl	1bc22 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
    d024:	e7b1      	b.n	cf8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    d026:	697c      	ldr	r4, [r7, #20]
    d028:	f7f3 fc43 	bl	8b2 <TfLiteTypeGetName>
    d02c:	4903      	ldr	r1, [pc, #12]	; (d03c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x148>)
    d02e:	4602      	mov	r2, r0
    d030:	4638      	mov	r0, r7
    d032:	47a0      	blx	r4
      return kTfLiteError;
    d034:	f04f 0801 	mov.w	r8, #1
    d038:	e7ad      	b.n	cf96 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
    d03a:	bf00      	nop
    d03c:	0002baff 	.word	0x0002baff

0000d040 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
    d044:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    d046:	f8d0 9008 	ldr.w	r9, [r0, #8]
    d04a:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    d04c:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    d04e:	684b      	ldr	r3, [r1, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d050:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
    d052:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    d056:	eb09 1686 	add.w	r6, r9, r6, lsl #6
    d05a:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    d05c:	aa07      	add	r2, sp, #28
    d05e:	4631      	mov	r1, r6
    d060:	4628      	mov	r0, r5
  return &context->tensors[node->outputs->data[index]];
    d062:	685c      	ldr	r4, [r3, #4]
    d064:	f00e ff81 	bl	1bf6a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
    d068:	4680      	mov	r8, r0
    d06a:	2800      	cmp	r0, #0
    d06c:	d139      	bne.n	d0e2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
    d06e:	f819 000a 	ldrb.w	r0, [r9, sl]
    d072:	2803      	cmp	r0, #3
    d074:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    d078:	d037      	beq.n	d0ea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    d07a:	2809      	cmp	r0, #9
    d07c:	d035      	beq.n	d0ea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    d07e:	2801      	cmp	r0, #1
    d080:	d177      	bne.n	d172 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
    d082:	aa06      	add	r2, sp, #24
    d084:	7d28      	ldrb	r0, [r5, #20]
    d086:	a905      	add	r1, sp, #20
    d088:	f7ff ff16 	bl	ceb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    d08c:	68ab      	ldr	r3, [r5, #8]
    d08e:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    d090:	686b      	ldr	r3, [r5, #4]
    d092:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    d094:	692b      	ldr	r3, [r5, #16]
    d096:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    d098:	68eb      	ldr	r3, [r5, #12]
    d09a:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    d09c:	9b08      	ldr	r3, [sp, #32]
    d09e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    d0a2:	9b07      	ldr	r3, [sp, #28]
    d0a4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
    d0a8:	9b05      	ldr	r3, [sp, #20]
    d0aa:	9320      	str	r3, [sp, #128]	; 0x80
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0ac:	4631      	mov	r1, r6
  op_params.float_activation_max = activation_max;
    d0ae:	9b06      	ldr	r3, [sp, #24]
    d0b0:	9321      	str	r3, [sp, #132]	; 0x84
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0b2:	a80b      	add	r0, sp, #44	; 0x2c
    d0b4:	f008 fc3e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d0b8:	6872      	ldr	r2, [r6, #4]
    d0ba:	9203      	str	r2, [sp, #12]
                         GetTensorData<float>(input), GetTensorShape(output),
    d0bc:	4621      	mov	r1, r4
    d0be:	a811      	add	r0, sp, #68	; 0x44
    d0c0:	f008 fc38 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d0c4:	9a03      	ldr	r2, [sp, #12]
    d0c6:	b104      	cbz	r4, d0ca <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    d0c8:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0ca:	9400      	str	r4, [sp, #0]
    d0cc:	ab11      	add	r3, sp, #68	; 0x44
    d0ce:	a90b      	add	r1, sp, #44	; 0x2c
    d0d0:	a817      	add	r0, sp, #92	; 0x5c
    d0d2:	f00e fc01 	bl	1b8d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    d0d6:	a811      	add	r0, sp, #68	; 0x44
    d0d8:	f008 fbe7 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d0dc:	a80b      	add	r0, sp, #44	; 0x2c
    d0de:	f008 fbe4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
    d0e2:	4640      	mov	r0, r8
    d0e4:	b022      	add	sp, #136	; 0x88
    d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
    d0ea:	ab06      	add	r3, sp, #24
    d0ec:	7d29      	ldrb	r1, [r5, #20]
    d0ee:	9300      	str	r3, [sp, #0]
    d0f0:	4622      	mov	r2, r4
    d0f2:	ab05      	add	r3, sp, #20
    d0f4:	4638      	mov	r0, r7
    d0f6:	f004 fbc3 	bl	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
    d0fa:	68ab      	ldr	r3, [r5, #8]
    d0fc:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    d0fe:	686b      	ldr	r3, [r5, #4]
    d100:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    d102:	692b      	ldr	r3, [r5, #16]
    d104:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    d106:	68eb      	ldr	r3, [r5, #12]
    d108:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    d10a:	9b08      	ldr	r3, [sp, #32]
    d10c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    d110:	9b07      	ldr	r3, [sp, #28]
    d112:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
    d116:	9b05      	ldr	r3, [sp, #20]
    d118:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
    d11a:	9b06      	ldr	r3, [sp, #24]
    d11c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
    d11e:	f819 300a 	ldrb.w	r3, [r9, sl]
    d122:	2b03      	cmp	r3, #3
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d124:	4631      	mov	r1, r6
    d126:	a80b      	add	r0, sp, #44	; 0x2c
  if (input->type == kTfLiteUInt8) {
    d128:	d111      	bne.n	d14e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d12a:	f008 fc03 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d12e:	6872      	ldr	r2, [r6, #4]
    d130:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    d132:	4621      	mov	r1, r4
    d134:	a811      	add	r0, sp, #68	; 0x44
    d136:	f008 fbfd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d13a:	9a03      	ldr	r2, [sp, #12]
    d13c:	b104      	cbz	r4, d140 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x100>
    d13e:	6864      	ldr	r4, [r4, #4]
    reference_ops::MaxPool(
    d140:	9400      	str	r4, [sp, #0]
    d142:	ab11      	add	r3, sp, #68	; 0x44
    d144:	a90b      	add	r1, sp, #44	; 0x2c
    d146:	a817      	add	r0, sp, #92	; 0x5c
    d148:	f00e fc9c 	bl	1ba84 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    d14c:	e7c3      	b.n	d0d6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d14e:	f008 fbf1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d152:	6872      	ldr	r2, [r6, #4]
    d154:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    d156:	4621      	mov	r1, r4
    d158:	a811      	add	r0, sp, #68	; 0x44
    d15a:	f008 fbeb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d15e:	9a03      	ldr	r2, [sp, #12]
    d160:	b104      	cbz	r4, d164 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x124>
    d162:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::MaxPool(
    d164:	9400      	str	r4, [sp, #0]
    d166:	ab11      	add	r3, sp, #68	; 0x44
    d168:	a90b      	add	r1, sp, #44	; 0x2c
    d16a:	a817      	add	r0, sp, #92	; 0x5c
    d16c:	f00e fe2d 	bl	1bdca <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
    d170:	e7b1      	b.n	d0d6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    d172:	697c      	ldr	r4, [r7, #20]
    d174:	f7f3 fb9d 	bl	8b2 <TfLiteTypeGetName>
    d178:	4903      	ldr	r1, [pc, #12]	; (d188 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
    d17a:	4602      	mov	r2, r0
    d17c:	4638      	mov	r0, r7
    d17e:	47a0      	blx	r4
      return kTfLiteError;
    d180:	f04f 0801 	mov.w	r8, #1
    d184:	e7ad      	b.n	d0e2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
    d186:	bf00      	nop
    d188:	0002bb28 	.word	0x0002bb28

0000d18c <_ZN6tflite3ops5micro14Register_PRELUEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d18c:	4800      	ldr	r0, [pc, #0]	; (d190 <_ZN6tflite3ops5micro14Register_PRELUEv+0x4>)
    d18e:	4770      	bx	lr
    d190:	20000548 	.word	0x20000548

0000d194 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
    d198:	680b      	ldr	r3, [r1, #0]
    d19a:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    d19e:	685e      	ldr	r6, [r3, #4]
    d1a0:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    d1a2:	684b      	ldr	r3, [r1, #4]
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1a4:	ed2d 8b04 	vpush	{d8-d9}
    d1a8:	685d      	ldr	r5, [r3, #4]
    d1aa:	01aa      	lsls	r2, r5, #6
  int32_t output_multiplier_1 = 0;
    d1ac:	2300      	movs	r3, #0
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1ae:	b0a5      	sub	sp, #148	; 0x94
  int output_shift_1 = 0;
    d1b0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  int output_shift_2 = 0;
    d1b4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
    d1b8:	f81a 3002 	ldrb.w	r3, [sl, r2]
    d1bc:	2b09      	cmp	r3, #9
  return &context->tensors[node->inputs->data[index]];
    d1be:	ea4f 1b86 	mov.w	fp, r6, lsl #6
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1c2:	4607      	mov	r7, r0
    d1c4:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
    d1c8:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d1cc:	eb0a 1585 	add.w	r5, sl, r5, lsl #6
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
    d1d0:	d003      	beq.n	d1da <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x46>
    d1d2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d1d6:	2b03      	cmp	r3, #3
    d1d8:	d12a      	bne.n	d230 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d1da:	68f0      	ldr	r0, [r6, #12]
    d1dc:	f7f3 fd44 	bl	c68 <__aeabi_f2d>
    d1e0:	ec41 0b19 	vmov	d9, r0, r1
                               static_cast<double>(output->params.scale);
    d1e4:	68e8      	ldr	r0, [r5, #12]
    d1e6:	f7f3 fd3f 	bl	c68 <__aeabi_f2d>
    d1ea:	4680      	mov	r8, r0
                               static_cast<double>(alpha->params.scale) /
    d1ec:	68e0      	ldr	r0, [r4, #12]
                               static_cast<double>(output->params.scale);
    d1ee:	4689      	mov	r9, r1
                               static_cast<double>(alpha->params.scale) /
    d1f0:	f7f3 fd3a 	bl	c68 <__aeabi_f2d>
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
    d1f4:	ec53 2b19 	vmov	r2, r3, d9
    d1f8:	f7f3 fd8e 	bl	d18 <__aeabi_dmul>
    d1fc:	4642      	mov	r2, r8
    d1fe:	464b      	mov	r3, r9
    d200:	f7f3 feb4 	bl	f6c <__aeabi_ddiv>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d204:	4642      	mov	r2, r8
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
    d206:	ec41 0b18 	vmov	d8, r0, r1
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d20a:	464b      	mov	r3, r9
    d20c:	ec51 0b19 	vmov	r0, r1, d9
    d210:	f7f3 feac 	bl	f6c <__aeabi_ddiv>
    d214:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier_1, &output_multiplier_1,
    d218:	a908      	add	r1, sp, #32
    d21a:	a807      	add	r0, sp, #28
    d21c:	f004 fa78 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(real_multiplier_2, &output_multiplier_2,
    d220:	eeb0 0a48 	vmov.f32	s0, s16
    d224:	eef0 0a68 	vmov.f32	s1, s17
    d228:	a90a      	add	r1, sp, #40	; 0x28
    d22a:	a809      	add	r0, sp, #36	; 0x24
    d22c:	f004 fa70 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  switch (input->type) {
    d230:	f81a 000b 	ldrb.w	r0, [sl, fp]
    d234:	2803      	cmp	r0, #3
    d236:	d02c      	beq.n	d292 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xfe>
    d238:	2809      	cmp	r0, #9
    d23a:	d05c      	beq.n	d2f6 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    d23c:	2801      	cmp	r0, #1
    d23e:	f040 8085 	bne.w	d34c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
          GetTensorShape(input), GetTensorData<float>(input),
    d242:	4631      	mov	r1, r6
    d244:	a811      	add	r0, sp, #68	; 0x44
    d246:	f008 fb75 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
    d24a:	4621      	mov	r1, r4
    d24c:	a817      	add	r0, sp, #92	; 0x5c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d24e:	6877      	ldr	r7, [r6, #4]
    d250:	f008 fb70 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d254:	b104      	cbz	r4, d258 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    d256:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
    d258:	ae1d      	add	r6, sp, #116	; 0x74
    d25a:	4629      	mov	r1, r5
    d25c:	4630      	mov	r0, r6
    d25e:	f008 fb69 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
    d262:	686b      	ldr	r3, [r5, #4]
    d264:	aa17      	add	r2, sp, #92	; 0x5c
    d266:	4639      	mov	r1, r7
    d268:	e9cd 6300 	strd	r6, r3, [sp]
    d26c:	a811      	add	r0, sp, #68	; 0x44
    d26e:	4623      	mov	r3, r4
    d270:	f00e feb9 	bl	1bfe6 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
    d274:	4630      	mov	r0, r6
    d276:	f008 fb18 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
    d27a:	a817      	add	r0, sp, #92	; 0x5c
    d27c:	f008 fb15 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
    d280:	a811      	add	r0, sp, #68	; 0x44
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d282:	f008 fb12 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    d286:	2000      	movs	r0, #0
}
    d288:	b025      	add	sp, #148	; 0x94
    d28a:	ecbd 8b04 	vpop	{d8-d9}
    d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      op_params.input_offset = -input->params.zero_point;
    d292:	6933      	ldr	r3, [r6, #16]
    d294:	425b      	negs	r3, r3
    d296:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
    d298:	6923      	ldr	r3, [r4, #16]
    d29a:	425b      	negs	r3, r3
    d29c:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
    d29e:	692b      	ldr	r3, [r5, #16]
    d2a0:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
    d2a2:	9b07      	ldr	r3, [sp, #28]
    d2a4:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
    d2a6:	9b08      	ldr	r3, [sp, #32]
    d2a8:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
    d2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2ac:	9322      	str	r3, [sp, #136]	; 0x88
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2ae:	4631      	mov	r1, r6
      op_params.output_shift_2 = output_shift_2;
    d2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d2b2:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2b4:	a80b      	add	r0, sp, #44	; 0x2c
    d2b6:	f008 fb3d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d2ba:	6872      	ldr	r2, [r6, #4]
    d2bc:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
    d2be:	4621      	mov	r1, r4
    d2c0:	a811      	add	r0, sp, #68	; 0x44
    d2c2:	f008 fb37 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d2c6:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    d2c8:	ac17      	add	r4, sp, #92	; 0x5c
    d2ca:	4629      	mov	r1, r5
    d2cc:	4620      	mov	r0, r4
    d2ce:	f008 fb31 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
    d2d2:	686b      	ldr	r3, [r5, #4]
    d2d4:	9a05      	ldr	r2, [sp, #20]
    d2d6:	9600      	str	r6, [sp, #0]
    d2d8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d2dc:	a90b      	add	r1, sp, #44	; 0x2c
    d2de:	ab11      	add	r3, sp, #68	; 0x44
    d2e0:	a81d      	add	r0, sp, #116	; 0x74
    d2e2:	f00e fef8 	bl	1c0d6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    d2e6:	4620      	mov	r0, r4
    d2e8:	f008 fadf 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
    d2ec:	a811      	add	r0, sp, #68	; 0x44
    d2ee:	f008 fadc 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2f2:	a80b      	add	r0, sp, #44	; 0x2c
    d2f4:	e7c5      	b.n	d282 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xee>
      op_params.input_offset = -input->params.zero_point;
    d2f6:	6933      	ldr	r3, [r6, #16]
    d2f8:	425b      	negs	r3, r3
    d2fa:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
    d2fc:	6923      	ldr	r3, [r4, #16]
    d2fe:	425b      	negs	r3, r3
    d300:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
    d302:	692b      	ldr	r3, [r5, #16]
    d304:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
    d306:	9b07      	ldr	r3, [sp, #28]
    d308:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
    d30a:	9b08      	ldr	r3, [sp, #32]
    d30c:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
    d30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d310:	9322      	str	r3, [sp, #136]	; 0x88
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d312:	4631      	mov	r1, r6
      op_params.output_shift_2 = output_shift_2;
    d314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d316:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d318:	a80b      	add	r0, sp, #44	; 0x2c
    d31a:	f008 fb0b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d31e:	6872      	ldr	r2, [r6, #4]
    d320:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<int8_t>(alpha),
    d322:	4621      	mov	r1, r4
    d324:	a811      	add	r0, sp, #68	; 0x44
    d326:	f008 fb05 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d32a:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
    d32c:	ac17      	add	r4, sp, #92	; 0x5c
    d32e:	4629      	mov	r1, r5
    d330:	4620      	mov	r0, r4
    d332:	f008 faff 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
    d336:	686b      	ldr	r3, [r5, #4]
    d338:	9a05      	ldr	r2, [sp, #20]
    d33a:	9600      	str	r6, [sp, #0]
    d33c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d340:	a90b      	add	r1, sp, #44	; 0x2c
    d342:	ab11      	add	r3, sp, #68	; 0x44
    d344:	a81d      	add	r0, sp, #116	; 0x74
    d346:	f00e ff4e 	bl	1c1e6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    d34a:	e7cc      	b.n	d2e6 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x152>
      TF_LITE_KERNEL_LOG(
    d34c:	697c      	ldr	r4, [r7, #20]
    d34e:	f7f3 fab0 	bl	8b2 <TfLiteTypeGetName>
    d352:	4903      	ldr	r1, [pc, #12]	; (d360 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1cc>)
    d354:	4602      	mov	r2, r0
    d356:	4638      	mov	r0, r7
    d358:	47a0      	blx	r4
      return kTfLiteError;
    d35a:	2001      	movs	r0, #1
    d35c:	e794      	b.n	d288 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xf4>
    d35e:	bf00      	nop
    d360:	0002bb49 	.word	0x0002bb49

0000d364 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d364:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    d368:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d36c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    d36e:	f1b8 0f00 	cmp.w	r8, #0
    d372:	d101      	bne.n	d378 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    d374:	f011 f92d 	bl	1e5d2 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    d378:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d37a:	6814      	ldr	r4, [r2, #0]
    d37c:	2c01      	cmp	r4, #1
    d37e:	d010      	beq.n	d3a2 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    d380:	2601      	movs	r6, #1
    d382:	e9cd 4602 	strd	r4, r6, [sp, #8]
    d386:	4b42      	ldr	r3, [pc, #264]	; (d490 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    d388:	9301      	str	r3, [sp, #4]
    d38a:	4b42      	ldr	r3, [pc, #264]	; (d494 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
    d38c:	9300      	str	r3, [sp, #0]
    d38e:	6944      	ldr	r4, [r0, #20]
    d390:	4a41      	ldr	r2, [pc, #260]	; (d498 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d392:	4942      	ldr	r1, [pc, #264]	; (d49c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d394:	2332      	movs	r3, #50	; 0x32
    d396:	47a0      	blx	r4
    d398:	4634      	mov	r4, r6

    QuantizeMultiplier(effective_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
    d39a:	4620      	mov	r0, r4
    d39c:	b004      	add	sp, #16
    d39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    d3a2:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    d3a4:	681f      	ldr	r7, [r3, #0]
    d3a6:	2f01      	cmp	r7, #1
    d3a8:	d00b      	beq.n	d3c2 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    d3aa:	e9cd 7402 	strd	r7, r4, [sp, #8]
    d3ae:	4b38      	ldr	r3, [pc, #224]	; (d490 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    d3b0:	9301      	str	r3, [sp, #4]
    d3b2:	4b3b      	ldr	r3, [pc, #236]	; (d4a0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    d3b4:	9300      	str	r3, [sp, #0]
    d3b6:	6945      	ldr	r5, [r0, #20]
    d3b8:	4a37      	ldr	r2, [pc, #220]	; (d498 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d3ba:	4938      	ldr	r1, [pc, #224]	; (d49c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d3bc:	2333      	movs	r3, #51	; 0x33
    d3be:	47a8      	blx	r5
    d3c0:	e7eb      	b.n	d39a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  return &context->tensors[node->outputs->data[index]];
    d3c2:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    d3c4:	6886      	ldr	r6, [r0, #8]
    d3c6:	ea4f 1c83 	mov.w	ip, r3, lsl #6
    d3ca:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
    d3ce:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    d3d2:	2c01      	cmp	r4, #1
    d3d4:	d00c      	beq.n	d3f0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>
    d3d6:	e9cd 4702 	strd	r4, r7, [sp, #8]
    d3da:	4b32      	ldr	r3, [pc, #200]	; (d4a4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    d3dc:	9301      	str	r3, [sp, #4]
    d3de:	4b32      	ldr	r3, [pc, #200]	; (d4a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    d3e0:	9300      	str	r3, [sp, #0]
    d3e2:	6944      	ldr	r4, [r0, #20]
    d3e4:	4a2c      	ldr	r2, [pc, #176]	; (d498 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d3e6:	492d      	ldr	r1, [pc, #180]	; (d49c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d3e8:	233a      	movs	r3, #58	; 0x3a
    d3ea:	47a0      	blx	r4
    d3ec:	463c      	mov	r4, r7
    d3ee:	e7d4      	b.n	d39a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  const auto* affine_quantization =
    d3f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    d3f2:	b939      	cbnz	r1, d404 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    d3f4:	4b2d      	ldr	r3, [pc, #180]	; (d4ac <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    d3f6:	9300      	str	r3, [sp, #0]
    d3f8:	6945      	ldr	r5, [r0, #20]
    d3fa:	233e      	movs	r3, #62	; 0x3e
  TF_LITE_ENSURE(context, affine_quantization->scale);
    d3fc:	4a26      	ldr	r2, [pc, #152]	; (d498 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d3fe:	492c      	ldr	r1, [pc, #176]	; (d4b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    d400:	47a8      	blx	r5
    d402:	e7ca      	b.n	d39a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    d404:	6809      	ldr	r1, [r1, #0]
    d406:	b921      	cbnz	r1, d412 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    d408:	4b2a      	ldr	r3, [pc, #168]	; (d4b4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    d40a:	9300      	str	r3, [sp, #0]
    d40c:	6945      	ldr	r5, [r0, #20]
    d40e:	233f      	movs	r3, #63	; 0x3f
    d410:	e7f4      	b.n	d3fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
    d412:	6809      	ldr	r1, [r1, #0]
    d414:	2901      	cmp	r1, #1
    d416:	d004      	beq.n	d422 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xbe>
    d418:	4b27      	ldr	r3, [pc, #156]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    d41a:	9300      	str	r3, [sp, #0]
    d41c:	6945      	ldr	r5, [r0, #20]
    d41e:	2340      	movs	r3, #64	; 0x40
    d420:	e7ec      	b.n	d3fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  return &context->tensors[node->inputs->data[index]];
    d422:	6851      	ldr	r1, [r2, #4]
    d424:	018f      	lsls	r7, r1, #6
    d426:	eb06 1181 	add.w	r1, r6, r1, lsl #6
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
    d42a:	5df2      	ldrb	r2, [r6, r7]
    d42c:	f002 07f7 	and.w	r7, r2, #247	; 0xf7
    d430:	2f01      	cmp	r7, #1
    d432:	d006      	beq.n	d442 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    d434:	2a07      	cmp	r2, #7
    d436:	d004      	beq.n	d442 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    d438:	4b20      	ldr	r3, [pc, #128]	; (d4bc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    d43a:	9300      	str	r3, [sp, #0]
    d43c:	6945      	ldr	r5, [r0, #20]
    d43e:	2342      	movs	r3, #66	; 0x42
    d440:	e7dc      	b.n	d3fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TF_LITE_ENSURE(context,
    d442:	f816 000c 	ldrb.w	r0, [r6, ip]
    d446:	2803      	cmp	r0, #3
    d448:	d020      	beq.n	d48c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
    d44a:	2809      	cmp	r0, #9
    d44c:	d008      	beq.n	d460 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    d44e:	4b1c      	ldr	r3, [pc, #112]	; (d4c0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    d450:	9300      	str	r3, [sp, #0]
    d452:	696e      	ldr	r6, [r5, #20]
    d454:	4a10      	ldr	r2, [pc, #64]	; (d498 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d456:	4916      	ldr	r1, [pc, #88]	; (d4b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    d458:	2345      	movs	r3, #69	; 0x45
    d45a:	4628      	mov	r0, r5
    d45c:	47b0      	blx	r6
    d45e:	e79c      	b.n	d39a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  if ((input->type == kTfLiteInt16 || input->type == kTfLiteInt8) &&
    d460:	2a07      	cmp	r2, #7
    d462:	d001      	beq.n	d468 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    d464:	2a09      	cmp	r2, #9
    d466:	d111      	bne.n	d48c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
        static_cast<double>(input->params.scale / output->params.scale);
    d468:	ed91 7a03 	vldr	s14, [r1, #12]
    d46c:	edd3 7a03 	vldr	s15, [r3, #12]
    double effective_scale =
    d470:	eec7 7a27 	vdiv.f32	s15, s14, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
    d474:	f108 0404 	add.w	r4, r8, #4
    double effective_scale =
    d478:	ee17 0a90 	vmov	r0, s15
    d47c:	f7f3 fbf4 	bl	c68 <__aeabi_f2d>
    d480:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
    d484:	4621      	mov	r1, r4
    d486:	4640      	mov	r0, r8
    d488:	f004 f942 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
    d48c:	2400      	movs	r4, #0
    d48e:	e784      	b.n	d39a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    d490:	0002bbe9 	.word	0x0002bbe9
    d494:	0002af69 	.word	0x0002af69
    d498:	0002bb81 	.word	0x0002bb81
    d49c:	0002af4f 	.word	0x0002af4f
    d4a0:	0002af79 	.word	0x0002af79
    d4a4:	0002b222 	.word	0x0002b222
    d4a8:	0002bbab 	.word	0x0002bbab
    d4ac:	0002b256 	.word	0x0002b256
    d4b0:	0002a6ae 	.word	0x0002a6ae
    d4b4:	0002b26a 	.word	0x0002b26a
    d4b8:	0002bbc5 	.word	0x0002bbc5
    d4bc:	0002bbeb 	.word	0x0002bbeb
    d4c0:	0002bc46 	.word	0x0002bc46

0000d4c4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4c8:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
    d4cc:	f8d1 b010 	ldr.w	fp, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d4d0:	b08f      	sub	sp, #60	; 0x3c
    d4d2:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    d4d4:	f1bb 0f00 	cmp.w	fp, #0
    d4d8:	d101      	bne.n	d4de <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
    d4da:	f011 f87a 	bl	1e5d2 <abort>
    d4de:	680b      	ldr	r3, [r1, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
    d4e0:	6887      	ldr	r7, [r0, #8]
    d4e2:	685d      	ldr	r5, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    d4e4:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    d4e6:	ea4f 1985 	mov.w	r9, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d4ea:	685c      	ldr	r4, [r3, #4]

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = static_cast<double>(output->params.scale);

  if (input->type == kTfLiteFloat32) {
    d4ec:	f817 6009 	ldrb.w	r6, [r7, r9]
    d4f0:	2e01      	cmp	r6, #1
    d4f2:	ea4f 1a84 	mov.w	sl, r4, lsl #6
  return &context->tensors[node->inputs->data[index]];
    d4f6:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d4fa:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    d4fe:	f040 8090 	bne.w	d622 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    switch (output->type) {
    d502:	f817 300a 	ldrb.w	r3, [r7, sl]
  op_params.zero_point = output->params.zero_point;
    d506:	f8d4 9010 	ldr.w	r9, [r4, #16]
  op_params.scale = static_cast<double>(output->params.scale);
    d50a:	ed94 8a03 	vldr	s16, [r4, #12]
    switch (output->type) {
    d50e:	2b03      	cmp	r3, #3
    d510:	d039      	beq.n	d586 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xc2>
    d512:	2b09      	cmp	r3, #9
    d514:	d171      	bne.n	d5fa <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x136>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d516:	4629      	mov	r1, r5
    d518:	a802      	add	r0, sp, #8
    d51a:	f008 fa0b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<int8_t>(output));
    d51e:	4621      	mov	r1, r4
    d520:	a808      	add	r0, sp, #32
    d522:	686d      	ldr	r5, [r5, #4]
    d524:	f008 fa06 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    d528:	a908      	add	r1, sp, #32
    d52a:	a802      	add	r0, sp, #8
    d52c:	f008 f9d9 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    d530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d534:	eec7 8a88 	vdiv.f32	s17, s15, s16
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d538:	6867      	ldr	r7, [r4, #4]
    d53a:	4606      	mov	r6, r0
  static constexpr int32 min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32 max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
    d53c:	2400      	movs	r4, #0
    const InputT val = input_data[i];
    int32 unclamped =
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
    d53e:	f06f 087f 	mvn.w	r8, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
    d542:	42a6      	cmp	r6, r4
    d544:	dd51      	ble.n	d5ea <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    const InputT val = input_data[i];
    d546:	ecf5 7a01 	vldmia	r5!, {s15}
    d54a:	ee67 7aa8 	vmul.f32	s15, s15, s17
    d54e:	ee17 0a90 	vmov	r0, s15
    d552:	f7f3 fb89 	bl	c68 <__aeabi_f2d>
    d556:	ec41 0b10 	vmov	d0, r0, r1
    d55a:	f004 fd03 	bl	11f64 <round>
    d55e:	ec51 0b10 	vmov	r0, r1, d0
    d562:	f7f3 fe9b 	bl	129c <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
    d566:	ee07 0a90 	vmov	s15, r0
    d56a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    d56e:	ee17 3a90 	vmov	r3, s15
    d572:	444b      	add	r3, r9
    output_data[i] = clamped;
    d574:	2b7f      	cmp	r3, #127	; 0x7f
    d576:	bfa8      	it	ge
    d578:	237f      	movge	r3, #127	; 0x7f
    d57a:	4543      	cmp	r3, r8
    d57c:	bfb8      	it	lt
    d57e:	4643      	movlt	r3, r8
    d580:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
    d582:	3401      	adds	r4, #1
    d584:	e7dd      	b.n	d542 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
        break;
      case kTfLiteUInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d586:	4629      	mov	r1, r5
    d588:	a802      	add	r0, sp, #8
    d58a:	f008 f9d3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<uint8_t>(output));
    d58e:	4621      	mov	r1, r4
    d590:	a808      	add	r0, sp, #32
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d592:	686d      	ldr	r5, [r5, #4]
    d594:	f008 f9ce 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    d598:	a908      	add	r1, sp, #32
    d59a:	a802      	add	r0, sp, #8
    d59c:	f008 f9a1 	bl	158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    d5a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d5a4:	eec7 8a88 	vdiv.f32	s17, s15, s16
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d5a8:	6867      	ldr	r7, [r4, #4]
    d5aa:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    d5ac:	2400      	movs	r4, #0
    d5ae:	42a6      	cmp	r6, r4
    d5b0:	dd1b      	ble.n	d5ea <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    const InputT val = input_data[i];
    d5b2:	ecf5 7a01 	vldmia	r5!, {s15}
    d5b6:	ee67 7aa8 	vmul.f32	s15, s15, s17
    d5ba:	ee17 0a90 	vmov	r0, s15
    d5be:	f7f3 fb53 	bl	c68 <__aeabi_f2d>
    d5c2:	ec41 0b10 	vmov	d0, r0, r1
    d5c6:	f004 fccd 	bl	11f64 <round>
    d5ca:	ec51 0b10 	vmov	r0, r1, d0
    d5ce:	f7f3 fe65 	bl	129c <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
    d5d2:	ee07 0a90 	vmov	s15, r0
    d5d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    d5da:	ee17 3a90 	vmov	r3, s15
    d5de:	444b      	add	r3, r9
    output_data[i] = clamped;
    d5e0:	f383 0308 	usat	r3, #8, r3
    d5e4:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
    d5e6:	3401      	adds	r4, #1
    d5e8:	e7e1      	b.n	d5ae <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    d5ea:	a808      	add	r0, sp, #32
    d5ec:	f008 f95d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d5f0:	a802      	add	r0, sp, #8
    d5f2:	f008 f95a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    d5f6:	2600      	movs	r6, #0
    d5f8:	e00d      	b.n	d616 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x152>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d5fa:	6944      	ldr	r4, [r0, #20]
    d5fc:	4630      	mov	r0, r6
    d5fe:	f7f3 f958 	bl	8b2 <TfLiteTypeGetName>
    d602:	9001      	str	r0, [sp, #4]
    d604:	f817 000a 	ldrb.w	r0, [r7, sl]
    d608:	f7f3 f953 	bl	8b2 <TfLiteTypeGetName>
    d60c:	9a01      	ldr	r2, [sp, #4]
    d60e:	4938      	ldr	r1, [pc, #224]	; (d6f0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    d610:	4603      	mov	r3, r0
    d612:	4640      	mov	r0, r8
    d614:	47a0      	blx	r4
}
    d616:	4630      	mov	r0, r6
    d618:	b00f      	add	sp, #60	; 0x3c
    d61a:	ecbd 8b02 	vpop	{d8}
    d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt16) {
    d622:	2e07      	cmp	r6, #7
    d624:	d126      	bne.n	d674 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
    size_t size = ElementCount(*input->dims);
    d626:	68a8      	ldr	r0, [r5, #8]
    d628:	f010 ff71 	bl	1e50e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
    d62c:	f817 300a 	ldrb.w	r3, [r7, sl]
    d630:	2b09      	cmp	r3, #9
    size_t size = ElementCount(*input->dims);
    d632:	4606      	mov	r6, r0
    switch (output->type) {
    d634:	d147      	bne.n	d6c6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x202>
        reference_ops::Requantize(
    d636:	e9db ab00 	ldrd	sl, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d63a:	f8d5 9004 	ldr.w	r9, [r5, #4]
            data->output_shift, input->params.zero_point,
    d63e:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
    d640:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d642:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
    d644:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    d648:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
    d64a:	42a6      	cmp	r6, r4
    d64c:	ddd3      	ble.n	d5f6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
    const int32_t input = input_data[i] - input_zeropoint;
    d64e:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    d652:	9301      	str	r3, [sp, #4]
    d654:	1ac0      	subs	r0, r0, r3
    d656:	465a      	mov	r2, fp
    d658:	4651      	mov	r1, sl
    d65a:	f7fc f90f 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    d65e:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
    d660:	4540      	cmp	r0, r8
    d662:	bfb8      	it	lt
    d664:	4640      	movlt	r0, r8
    d666:	287f      	cmp	r0, #127	; 0x7f
    d668:	bfa8      	it	ge
    d66a:	207f      	movge	r0, #127	; 0x7f
    d66c:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
    d66e:	9b01      	ldr	r3, [sp, #4]
    d670:	3401      	adds	r4, #1
    d672:	e7ea      	b.n	d64a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x186>
  } else if (input->type == kTfLiteInt8) {
    d674:	2e09      	cmp	r6, #9
    d676:	d138      	bne.n	d6ea <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x226>
    size_t size = ElementCount(*input->dims);
    d678:	68a8      	ldr	r0, [r5, #8]
    d67a:	f010 ff48 	bl	1e50e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
    d67e:	f817 300a 	ldrb.w	r3, [r7, sl]
    d682:	2b09      	cmp	r3, #9
    size_t size = ElementCount(*input->dims);
    d684:	4606      	mov	r6, r0
    switch (output->type) {
    d686:	d11e      	bne.n	d6c6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x202>
        reference_ops::Requantize(
    d688:	e9db 9b00 	ldrd	r9, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d68c:	f8d5 a004 	ldr.w	sl, [r5, #4]
            data->output_shift, input->params.zero_point,
    d690:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
    d692:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d694:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
    d696:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    d69a:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
    d69c:	42a6      	cmp	r6, r4
    d69e:	ddaa      	ble.n	d5f6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
    const int32_t input = input_data[i] - input_zeropoint;
    d6a0:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    d6a4:	9301      	str	r3, [sp, #4]
    d6a6:	1ac0      	subs	r0, r0, r3
    d6a8:	465a      	mov	r2, fp
    d6aa:	4649      	mov	r1, r9
    d6ac:	f7fc f8e6 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    d6b0:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
    d6b2:	4540      	cmp	r0, r8
    d6b4:	bfb8      	it	lt
    d6b6:	4640      	movlt	r0, r8
    d6b8:	287f      	cmp	r0, #127	; 0x7f
    d6ba:	bfa8      	it	ge
    d6bc:	207f      	movge	r0, #127	; 0x7f
    d6be:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
    d6c0:	9b01      	ldr	r3, [sp, #4]
    d6c2:	3401      	adds	r4, #1
    d6c4:	e7ea      	b.n	d69c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d6c6:	f8d8 4014 	ldr.w	r4, [r8, #20]
    d6ca:	f817 0009 	ldrb.w	r0, [r7, r9]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d6ce:	f7f3 f8f0 	bl	8b2 <TfLiteTypeGetName>
    d6d2:	9001      	str	r0, [sp, #4]
    d6d4:	f817 000a 	ldrb.w	r0, [r7, sl]
    d6d8:	f7f3 f8eb 	bl	8b2 <TfLiteTypeGetName>
    d6dc:	9a01      	ldr	r2, [sp, #4]
    d6de:	4904      	ldr	r1, [pc, #16]	; (d6f0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    d6e0:	4603      	mov	r3, r0
    d6e2:	4640      	mov	r0, r8
    d6e4:	47a0      	blx	r4
    return kTfLiteError;
    d6e6:	2601      	movs	r6, #1
    d6e8:	e795      	b.n	d616 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x152>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d6ea:	6944      	ldr	r4, [r0, #20]
    d6ec:	4630      	mov	r0, r6
    d6ee:	e7ee      	b.n	d6ce <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    d6f0:	0002b4db 	.word	0x0002b4db

0000d6f4 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d6f4:	4800      	ldr	r0, [pc, #0]	; (d6f8 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x4>)
    d6f6:	4770      	bx	lr
    d6f8:	20000568 	.word	0x20000568

0000d6fc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
namespace reduce {

constexpr int kMaxNumberOfAxis = 4;
constexpr int kMaxNumberOfReducedAxis = 2;

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
    d6fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
    d700:	680b      	ldr	r3, [r1, #0]
    d702:	681f      	ldr	r7, [r3, #0]
    d704:	2f02      	cmp	r7, #2
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
    d706:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
    d708:	d00f      	beq.n	d72a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x2e>
    d70a:	2302      	movs	r3, #2
    d70c:	e9cd 7302 	strd	r7, r3, [sp, #8]
    d710:	4b1b      	ldr	r3, [pc, #108]	; (d780 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x84>)
    d712:	9301      	str	r3, [sp, #4]
    d714:	4b1b      	ldr	r3, [pc, #108]	; (d784 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x88>)
    d716:	9300      	str	r3, [sp, #0]
    d718:	6944      	ldr	r4, [r0, #20]
    d71a:	232a      	movs	r3, #42	; 0x2a
    d71c:	4a1a      	ldr	r2, [pc, #104]	; (d788 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
    d71e:	491b      	ldr	r1, [pc, #108]	; (d78c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x90>)
    d720:	47a0      	blx	r4
    d722:	2001      	movs	r0, #1

  // Validate axis type
  const TfLiteTensor* axis = GetInput(context, node, 1);
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
  return kTfLiteOk;
}
    d724:	b004      	add	sp, #16
    d726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    d72a:	684a      	ldr	r2, [r1, #4]
    d72c:	6814      	ldr	r4, [r2, #0]
    d72e:	2c01      	cmp	r4, #1
    d730:	d009      	beq.n	d746 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x4a>
    d732:	2601      	movs	r6, #1
    d734:	4b16      	ldr	r3, [pc, #88]	; (d790 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x94>)
    d736:	9301      	str	r3, [sp, #4]
    d738:	e9cd 4602 	strd	r4, r6, [sp, #8]
    d73c:	4b15      	ldr	r3, [pc, #84]	; (d794 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x98>)
    d73e:	9300      	str	r3, [sp, #0]
    d740:	6944      	ldr	r4, [r0, #20]
    d742:	232b      	movs	r3, #43	; 0x2b
    d744:	e7ea      	b.n	d71c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x20>
  return &context->tensors[node->inputs->data[index]];
    d746:	689b      	ldr	r3, [r3, #8]
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
    d748:	6882      	ldr	r2, [r0, #8]
    d74a:	019b      	lsls	r3, r3, #6
    d74c:	5cd0      	ldrb	r0, [r2, r3]
    d74e:	2802      	cmp	r0, #2
    d750:	d013      	beq.n	d77a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x7e>
    d752:	f8d5 8014 	ldr.w	r8, [r5, #20]
    d756:	f7f3 f8ac 	bl	8b2 <TfLiteTypeGetName>
    d75a:	4606      	mov	r6, r0
    d75c:	4638      	mov	r0, r7
    d75e:	f7f3 f8a8 	bl	8b2 <TfLiteTypeGetName>
    d762:	4b0d      	ldr	r3, [pc, #52]	; (d798 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x9c>)
    d764:	9301      	str	r3, [sp, #4]
    d766:	4b0d      	ldr	r3, [pc, #52]	; (d79c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa0>)
    d768:	9300      	str	r3, [sp, #0]
    d76a:	e9cd 6002 	strd	r6, r0, [sp, #8]
    d76e:	4a06      	ldr	r2, [pc, #24]	; (d788 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
    d770:	490b      	ldr	r1, [pc, #44]	; (d7a0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa4>)
    d772:	232f      	movs	r3, #47	; 0x2f
    d774:	4628      	mov	r0, r5
    d776:	47c0      	blx	r8
    d778:	e7d3      	b.n	d722 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x26>
  return kTfLiteOk;
    d77a:	2000      	movs	r0, #0
    d77c:	e7d2      	b.n	d724 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x28>
    d77e:	bf00      	nop
    d780:	0002b7c1 	.word	0x0002b7c1
    d784:	0002bcaa 	.word	0x0002bcaa
    d788:	0002bc82 	.word	0x0002bc82
    d78c:	0002af4f 	.word	0x0002af4f
    d790:	0002bbe9 	.word	0x0002bbe9
    d794:	0002b20e 	.word	0x0002b20e
    d798:	0002b4ce 	.word	0x0002b4ce
    d79c:	0002bcbd 	.word	0x0002bcbd
    d7a0:	0002af8a 	.word	0x0002af8a

0000d7a4 <_ZN6tflite3ops5micro13Register_MEANEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d7a4:	4800      	ldr	r0, [pc, #0]	; (d7a8 <_ZN6tflite3ops5micro13Register_MEANEv+0x4>)
    d7a6:	4770      	bx	lr
    d7a8:	20000588 	.word	0x20000588

0000d7ac <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
  }
  return true;
}

template <typename T>
inline void Mean(const tflite::MeanParams& op_params,
    d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7b0:	4604      	mov	r4, r0
    d7b2:	ed2d 8b02 	vpush	{d8}
    d7b6:	4608      	mov	r0, r1
                 const RuntimeShape& unextended_output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("Mean4D");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
    d7b8:	6809      	ldr	r1, [r1, #0]
    d7ba:	2904      	cmp	r1, #4
inline void Mean(const tflite::MeanParams& op_params,
    d7bc:	b091      	sub	sp, #68	; 0x44
    d7be:	4692      	mov	sl, r2
    d7c0:	461d      	mov	r5, r3
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
    d7c2:	d001      	beq.n	d7c8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    d7c4:	f010 ff05 	bl	1e5d2 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
    d7c8:	681b      	ldr	r3, [r3, #0]
    d7ca:	2b04      	cmp	r3, #4
    d7cc:	dcfa      	bgt.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    return RuntimeShape(new_shape_size, shape, 1);
    d7ce:	4602      	mov	r2, r0
    d7d0:	2301      	movs	r3, #1
    d7d2:	a804      	add	r0, sp, #16
    d7d4:	9103      	str	r1, [sp, #12]
    d7d6:	f008 f908 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    d7da:	462a      	mov	r2, r5
    d7dc:	2301      	movs	r3, #1
    d7de:	9903      	ldr	r1, [sp, #12]
    d7e0:	a80a      	add	r0, sp, #40	; 0x28
    d7e2:	f008 f902 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  const int output_batch = output_shape.Dims(0);
    d7e6:	2100      	movs	r1, #0
    d7e8:	a80a      	add	r0, sp, #40	; 0x28
    d7ea:	f008 f869 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    d7ee:	2101      	movs	r1, #1
  const int output_batch = output_shape.Dims(0);
    d7f0:	4680      	mov	r8, r0
  const int output_height = output_shape.Dims(1);
    d7f2:	a80a      	add	r0, sp, #40	; 0x28
    d7f4:	f008 f864 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    d7f8:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    d7fa:	4606      	mov	r6, r0
  const int output_width = output_shape.Dims(2);
    d7fc:	a80a      	add	r0, sp, #40	; 0x28
    d7fe:	f008 f85f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(3);
    d802:	2103      	movs	r1, #3
  const int output_width = output_shape.Dims(2);
    d804:	4683      	mov	fp, r0
  const int output_depth = output_shape.Dims(3);
    d806:	a80a      	add	r0, sp, #40	; 0x28
    d808:	f008 f85a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>

  const int input_height = input_shape.Dims(1);
    d80c:	2101      	movs	r1, #1
  const int output_depth = output_shape.Dims(3);
    d80e:	4681      	mov	r9, r0
  const int input_height = input_shape.Dims(1);
    d810:	a804      	add	r0, sp, #16
    d812:	f008 f855 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    d816:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    d818:	4605      	mov	r5, r0
  const int input_width = input_shape.Dims(2);
    d81a:	a804      	add	r0, sp, #16
    d81c:	f008 f850 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
    d820:	f994 2000 	ldrsb.w	r2, [r4]
    d824:	2a02      	cmp	r2, #2
  const int input_width = input_shape.Dims(2);
    d826:	4607      	mov	r7, r0
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
    d828:	d1cc      	bne.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    d82a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    d82e:	2a01      	cmp	r2, #1
    d830:	d131      	bne.n	d896 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xea>
    d832:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    d836:	2a02      	cmp	r2, #2
    d838:	d1c4      	bne.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
    d83a:	2e01      	cmp	r6, #1
    d83c:	d1c2      	bne.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK_EQ(output_width, 1);
    d83e:	f1bb 0f01 	cmp.w	fp, #1
    d842:	d1bf      	bne.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
        for (int in_w = 0; in_w < input_width; ++in_w) {
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
          value / (input_width * input_height);
    d844:	fb07 f305 	mul.w	r3, r7, r5
    d848:	ee07 3a90 	vmov	s15, r3
    d84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d854:	eec7 8a27 	vdiv.f32	s17, s14, s15
  for (int out_b = 0; out_b < output_batch; ++out_b) {
    d858:	2400      	movs	r4, #0
    d85a:	4544      	cmp	r4, r8
    d85c:	da36      	bge.n	d8cc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x120>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
    d85e:	2600      	movs	r6, #0
    d860:	454e      	cmp	r6, r9
    d862:	da31      	bge.n	d8c8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x11c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d864:	f04f 0b00 	mov.w	fp, #0
      float value = 0;
    d868:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d8e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x138>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d86c:	45ab      	cmp	fp, r5
    d86e:	da1b      	bge.n	d8a8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d870:	2300      	movs	r3, #0
    d872:	42bb      	cmp	r3, r7
    d874:	da15      	bge.n	d8a2 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf6>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
    d876:	9600      	str	r6, [sp, #0]
    d878:	465a      	mov	r2, fp
    d87a:	4621      	mov	r1, r4
    d87c:	a804      	add	r0, sp, #16
    d87e:	9303      	str	r3, [sp, #12]
    d880:	f008 f8e0 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    d884:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    d888:	edd0 7a00 	vldr	s15, [r0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d88c:	9b03      	ldr	r3, [sp, #12]
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
    d88e:	ee38 8a27 	vadd.f32	s16, s16, s15
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d892:	3301      	adds	r3, #1
    d894:	e7ed      	b.n	d872 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xc6>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    d896:	2a02      	cmp	r2, #2
    d898:	d194      	bne.n	d7c4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    d89a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    d89e:	2a01      	cmp	r2, #1
    d8a0:	e7ca      	b.n	d838 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x8c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d8a2:	f10b 0b01 	add.w	fp, fp, #1
    d8a6:	e7e1      	b.n	d86c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xc0>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
    d8a8:	2300      	movs	r3, #0
    d8aa:	9600      	str	r6, [sp, #0]
    d8ac:	461a      	mov	r2, r3
    d8ae:	4621      	mov	r1, r4
    d8b0:	a80a      	add	r0, sp, #40	; 0x28
    d8b2:	f008 f8c7 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    d8b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
          value / (input_width * input_height);
    d8b8:	ee28 8a28 	vmul.f32	s16, s16, s17
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
    d8bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d8c0:	ed80 8a00 	vstr	s16, [r0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
    d8c4:	3601      	adds	r6, #1
    d8c6:	e7cb      	b.n	d860 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xb4>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
    d8c8:	3401      	adds	r4, #1
    d8ca:	e7c6      	b.n	d85a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xae>
  const RuntimeShape output_shape =
    d8cc:	a80a      	add	r0, sp, #40	; 0x28
    d8ce:	f007 ffec 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
    d8d2:	a804      	add	r0, sp, #16
    d8d4:	f007 ffe9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    }
  }
}
    d8d8:	b011      	add	sp, #68	; 0x44
    d8da:	ecbd 8b02 	vpop	{d8}
    d8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8e2:	bf00      	nop
    d8e4:	00000000 	.word	0x00000000

0000d8e8 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
    d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8ec:	b089      	sub	sp, #36	; 0x24
    d8ee:	4614      	mov	r4, r2
    d8f0:	9007      	str	r0, [sp, #28]
    d8f2:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
    d8f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    d8f8:	9003      	str	r0, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d8fa:	f04f 0c00 	mov.w	ip, #0
  size_t num_outputs = 1;
    d8fe:	2701      	movs	r7, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d900:	45b4      	cmp	ip, r6
    d902:	db10      	blt.n	d926 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x3e>
    d904:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    d908:	461d      	mov	r5, r3
    d90a:	00bb      	lsls	r3, r7, #2
    d90c:	9306      	str	r3, [sp, #24]
    d90e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    d912:	4648      	mov	r0, r9
    d914:	462b      	mov	r3, r5
    output_data[idx] = T();
    d916:	2600      	movs	r6, #0
  for (size_t idx = 0; idx < num_outputs; ++idx) {
    d918:	42bb      	cmp	r3, r7
    d91a:	d010      	beq.n	d93e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x56>
    output_data[idx] = T();
    d91c:	f843 6b04 	str.w	r6, [r3], #4
    temp_sum[idx] = U();
    d920:	f840 6b04 	str.w	r6, [r0], #4
  for (size_t idx = 0; idx < num_outputs; ++idx) {
    d924:	e7f8      	b.n	d918 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x30>
    size_t current = static_cast<size_t>(output_dims[idx]);
    d926:	9812      	ldr	r0, [sp, #72]	; 0x48
    d928:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
    d92c:	fba5 e007 	umull	lr, r0, r5, r7
    d930:	2800      	cmp	r0, #0
    d932:	f040 80aa 	bne.w	da8a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a2>
    num_outputs *= current;
    d936:	436f      	muls	r7, r5
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d938:	f10c 0c01 	add.w	ip, ip, #1
    d93c:	e7e0      	b.n	d900 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x18>
  if (num_dims == 0) {
    d93e:	b37c      	cbz	r4, d9a0 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xb8>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
    d940:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d942:	461e      	mov	r6, r3
    d944:	17df      	asrs	r7, r3, #31
    d946:	e9cd 6704 	strd	r6, r7, [sp, #16]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    d94a:	f04f 0a00 	mov.w	sl, #0
  *out_num_axis = 0;  // Just in case.
    d94e:	2600      	movs	r6, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    d950:	f04f 0b00 	mov.w	fp, #0
    d954:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    d958:	45ba      	cmp	sl, r7
    d95a:	eb7b 0308 	sbcs.w	r3, fp, r8
    d95e:	da17      	bge.n	d990 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xa8>
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
    d960:	9814      	ldr	r0, [sp, #80]	; 0x50
    d962:	ea4f 038a 	mov.w	r3, sl, lsl #2
    d966:	58c0      	ldr	r0, [r0, r3]
    d968:	2800      	cmp	r0, #0
    d96a:	da01      	bge.n	d970 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x88>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
    d96c:	1900      	adds	r0, r0, r4
    d96e:	d401      	bmi.n	d974 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
    d970:	4284      	cmp	r4, r0
    d972:	dc01      	bgt.n	d978 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x90>
    d974:	f010 fe2d 	bl	1e5d2 <abort>
    for (int j = 0; j < *out_num_axis; ++j) {
    d978:	2700      	movs	r7, #0
    d97a:	42b7      	cmp	r7, r6
      out_axis[*out_num_axis] = current;
    d97c:	9b03      	ldr	r3, [sp, #12]
    for (int j = 0; j < *out_num_axis; ++j) {
    d97e:	f280 8086 	bge.w	da8e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a6>
      if (out_axis[j] == current) {
    d982:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    d986:	4283      	cmp	r3, r0
    d988:	f000 8084 	beq.w	da94 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1ac>
    for (int j = 0; j < *out_num_axis; ++j) {
    d98c:	3701      	adds	r7, #1
    d98e:	e7f4      	b.n	d97a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x92>
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d990:	2300      	movs	r3, #0
    input_iter[idx] = 0;
    d992:	4618      	mov	r0, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d994:	429c      	cmp	r4, r3
    d996:	dd04      	ble.n	d9a2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xba>
    input_iter[idx] = 0;
    d998:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d99c:	3301      	adds	r3, #1
    d99e:	e7f9      	b.n	d994 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xac>
  *out_num_axis = 0;  // Just in case.
    d9a0:	4626      	mov	r6, r4
    d9a2:	eb02 0b84 	add.w	fp, r2, r4, lsl #2
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
    d9a6:	f04f 0a00 	mov.w	sl, #0
    d9aa:	2300      	movs	r3, #0
    d9ac:	f8cd a000 	str.w	sl, [sp]
    d9b0:	4620      	mov	r0, r4
    d9b2:	9217      	str	r2, [sp, #92]	; 0x5c
    d9b4:	9104      	str	r1, [sp, #16]
    d9b6:	f00e fcb0 	bl	1c31a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
    d9ba:	9b03      	ldr	r3, [sp, #12]
    d9bc:	9904      	ldr	r1, [sp, #16]
    d9be:	9300      	str	r3, [sp, #0]
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
    d9c0:	4607      	mov	r7, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
    d9c2:	4633      	mov	r3, r6
    d9c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d9c6:	4620      	mov	r0, r4
    d9c8:	f00e fca7 	bl	1c31a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
        reducer(output_data[output_offset], input_data[input_offset]);
    d9cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  if (num_dims == 0) {
    d9ce:	9904      	ldr	r1, [sp, #16]
    d9d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d9d4:	9b07      	ldr	r3, [sp, #28]
    return current + actual_in;
    d9d6:	edd0 7a00 	vldr	s15, [r0]
        reducer(output_data[output_offset], input_data[input_offset]);
    d9da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return current + actual_in;
    d9de:	ed97 7a00 	vldr	s14, [r7]
    d9e2:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
    d9e6:	edc0 7a00 	vstr	s15, [r0]
    d9ea:	b1d4      	cbz	r4, da22 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
  TFLITE_DCHECK(dims != nullptr);
    d9ec:	2900      	cmp	r1, #0
    d9ee:	d0c1      	beq.n	d974 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
  TFLITE_DCHECK(current != nullptr);
    d9f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d9f2:	2a00      	cmp	r2, #0
    d9f4:	d0be      	beq.n	d974 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
    d9f6:	1e67      	subs	r7, r4, #1
    d9f8:	465b      	mov	r3, fp
    d9fa:	2f00      	cmp	r7, #0
    d9fc:	db11      	blt.n	da22 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
    int current_val = current[idx] + carry;
    d9fe:	f1a3 0c04 	sub.w	ip, r3, #4
    da02:	f853 3c04 	ldr.w	r3, [r3, #-4]
    TFLITE_DCHECK_GE(dims[idx], current_val);
    da06:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
    int current_val = current[idx] + carry;
    da0a:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
    da0c:	4283      	cmp	r3, r0
    da0e:	dcb1      	bgt.n	d974 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
    if (dims[idx] == current_val) {
    da10:	d104      	bne.n	da1c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x134>
      current[idx] = 0;
    da12:	4663      	mov	r3, ip
    da14:	f8cc a000 	str.w	sl, [ip]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
    da18:	3f01      	subs	r7, #1
    da1a:	e7ee      	b.n	d9fa <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x112>
      current[idx] = current_val;
    da1c:	f8cc 3000 	str.w	r3, [ip]
  return (carry == 0);
    da20:	e7c3      	b.n	d9aa <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc2>
  U num_elements_in_axis = 1;
    da22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da26:	ed9f 6a1e 	vldr	s12, [pc, #120]	; daa0 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1b8>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
    da2a:	2300      	movs	r3, #0
    da2c:	eef0 6a67 	vmov.f32	s13, s15
    da30:	42b3      	cmp	r3, r6
    da32:	da13      	bge.n	da5c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x174>
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da34:	eec6 5a27 	vdiv.f32	s11, s12, s15
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
    da38:	9a03      	ldr	r2, [sp, #12]
    da3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da3e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    da42:	ed92 7a00 	vldr	s14, [r2]
    da46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    da4a:	eeb4 7ae5 	vcmpe.f32	s14, s11
    da4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da52:	dc1a      	bgt.n	da8a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a2>
    num_elements_in_axis *= current;
    da54:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
    da58:	3301      	adds	r3, #1
    da5a:	e7e9      	b.n	da30 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x148>
  if (num_elements_in_axis > 0) {
    da5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da64:	dc03      	bgt.n	da6e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x186>
  return true;
    da66:	2001      	movs	r0, #1
}
    da68:	b009      	add	sp, #36	; 0x24
    da6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    da72:	9b06      	ldr	r3, [sp, #24]
    da74:	9a19      	ldr	r2, [sp, #100]	; 0x64
    da76:	4413      	add	r3, r2
    for (size_t idx = 0; idx < num_outputs; ++idx) {
    da78:	4599      	cmp	r9, r3
    da7a:	d0f4      	beq.n	da66 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x17e>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
    da7c:	ecf9 7a01 	vldmia	r9!, {s15}
    da80:	ee67 7a87 	vmul.f32	s15, s15, s14
      output_data[idx] =
    da84:	ece5 7a01 	vstmia	r5!, {s15}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
    da88:	e7f6      	b.n	da78 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x190>
      return false;
    da8a:	2000      	movs	r0, #0
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
    da8c:	e7ec      	b.n	da68 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
      out_axis[*out_num_axis] = current;
    da8e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      *out_num_axis += 1;
    da92:	3601      	adds	r6, #1
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    da94:	f11a 0a01 	adds.w	sl, sl, #1
    da98:	f14b 0b00 	adc.w	fp, fp, #0
    da9c:	e75a      	b.n	d954 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6c>
    da9e:	bf00      	nop
    daa0:	7f7fffff 	.word	0x7f7fffff

0000daa4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
  const TfLiteTensor* input = GetInput(context, node, 0);
    daa4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
    daa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
    daaa:	f8d0 9008 	ldr.w	r9, [r0, #8]
    daae:	689f      	ldr	r7, [r3, #8]
    dab0:	685e      	ldr	r6, [r3, #4]
    dab2:	eb09 1787 	add.w	r7, r9, r7, lsl #6
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
    dab6:	4605      	mov	r5, r0
  for (int i = 0; i < dims->size; ++i) {
    dab8:	68bc      	ldr	r4, [r7, #8]
    daba:	f854 bb04 	ldr.w	fp, [r4], #4
    dabe:	468c      	mov	ip, r1
  return &context->tensors[node->inputs->data[index]];
    dac0:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    dac4:	b09b      	sub	sp, #108	; 0x6c
    dac6:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
    daca:	f04f 0e00 	mov.w	lr, #0
  int64_t count = 1;
    dace:	2001      	movs	r0, #1
    dad0:	2100      	movs	r1, #0
  for (int i = 0; i < dims->size; ++i) {
    dad2:	45f3      	cmp	fp, lr
    dad4:	dd0c      	ble.n	daf0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4c>
    count *= dims->data[i];
    dad6:	f854 8b04 	ldr.w	r8, [r4], #4
    dada:	4642      	mov	r2, r8
    dadc:	17d3      	asrs	r3, r2, #31
    dade:	4343      	muls	r3, r0
    dae0:	fb08 3301 	mla	r3, r8, r1, r3
    dae4:	fba0 0108 	umull	r0, r1, r0, r8
    dae8:	4419      	add	r1, r3
  for (int i = 0; i < dims->size; ++i) {
    daea:	f10e 0e01 	add.w	lr, lr, #1
    daee:	e7f0      	b.n	dad2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2e>
  switch (input->type) {
    daf0:	f819 800a 	ldrb.w	r8, [r9, sl]
    daf4:	f1b8 0f01 	cmp.w	r8, #1
    daf8:	d16f      	bne.n	dbda <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x136>
  return &context->tensors[node->outputs->data[index]];
    dafa:	f8dc 3004 	ldr.w	r3, [ip, #4]
  TfLiteReducerParams* params =
    dafe:	f8dc b014 	ldr.w	fp, [ip, #20]
    db02:	685c      	ldr	r4, [r3, #4]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
    db04:	4601      	mov	r1, r0
  int num_axis = static_cast<int>(NumElements(axis));
    db06:	4682      	mov	sl, r0
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
    db08:	aa0b      	add	r2, sp, #44	; 0x2c
    db0a:	6878      	ldr	r0, [r7, #4]
    db0c:	f00e fc29 	bl	1c362 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
    db10:	68b1      	ldr	r1, [r6, #8]
    db12:	680b      	ldr	r3, [r1, #0]
    db14:	2b04      	cmp	r3, #4
    db16:	d10b      	bne.n	db30 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
    db18:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
    db1c:	2b02      	cmp	r3, #2
    db1e:	d107      	bne.n	db30 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db20:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
    db24:	2b01      	cmp	r3, #1
    db26:	d10b      	bne.n	db40 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db28:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    db2c:	2b02      	cmp	r3, #2
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
    db2e:	d00d      	beq.n	db4c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_MSG(
    db30:	696b      	ldr	r3, [r5, #20]
    db32:	492d      	ldr	r1, [pc, #180]	; (dbe8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x144>)
    db34:	4628      	mov	r0, r5
    db36:	4798      	blx	r3
}
    db38:	4640      	mov	r0, r8
    db3a:	b01b      	add	sp, #108	; 0x6c
    db3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db40:	2b02      	cmp	r3, #2
    db42:	d1f5      	bne.n	db30 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
    db44:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    db48:	2b01      	cmp	r3, #1
    db4a:	e7f0      	b.n	db2e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a>
      if (params->keep_dims) {
    db4c:	f89b 3000 	ldrb.w	r3, [fp]
    db50:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    db54:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
    db58:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    db5c:	b1db      	cbz	r3, db96 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf2>
        reference_ops::Mean(op_params, GetTensorShape(input),
    db5e:	4631      	mov	r1, r6
    db60:	4648      	mov	r0, r9
    db62:	f007 fee7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    db66:	6872      	ldr	r2, [r6, #4]
    db68:	9209      	str	r2, [sp, #36]	; 0x24
                            GetTensorData<float>(input), GetTensorShape(output),
    db6a:	4621      	mov	r1, r4
    db6c:	4658      	mov	r0, fp
    db6e:	f007 fee1 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    db72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    db74:	b104      	cbz	r4, db78 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd4>
    db76:	6864      	ldr	r4, [r4, #4]
        reference_ops::Mean(op_params, GetTensorShape(input),
    db78:	9400      	str	r4, [sp, #0]
    db7a:	465b      	mov	r3, fp
    db7c:	4649      	mov	r1, r9
    db7e:	a80b      	add	r0, sp, #44	; 0x2c
    db80:	f7ff fe14 	bl	d7ac <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                            GetTensorData<float>(input), GetTensorShape(output),
    db84:	4658      	mov	r0, fp
    db86:	f007 fe90 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Mean(op_params, GetTensorShape(input),
    db8a:	4648      	mov	r0, r9
    db8c:	f007 fe8d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    db90:	f04f 0800 	mov.w	r8, #0
    db94:	e7d0      	b.n	db38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    db96:	6870      	ldr	r0, [r6, #4]
        TF_LITE_ENSURE(
    db98:	3104      	adds	r1, #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    db9a:	b1e4      	cbz	r4, dbd6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x132>
    db9c:	6863      	ldr	r3, [r4, #4]
    db9e:	68a2      	ldr	r2, [r4, #8]
    dba0:	f8cd b014 	str.w	fp, [sp, #20]
    dba4:	2400      	movs	r4, #0
    dba6:	e9cd 9306 	strd	r9, r3, [sp, #24]
    dbaa:	e9cd a403 	strd	sl, r4, [sp, #12]
    dbae:	687c      	ldr	r4, [r7, #4]
    dbb0:	9402      	str	r4, [sp, #8]
    dbb2:	f852 4b04 	ldr.w	r4, [r2], #4
    dbb6:	e9cd 2400 	strd	r2, r4, [sp]
    dbba:	2204      	movs	r2, #4
    dbbc:	f7ff fe94 	bl	d8e8 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
    dbc0:	2800      	cmp	r0, #0
    dbc2:	d1e5      	bne.n	db90 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xec>
    dbc4:	4b09      	ldr	r3, [pc, #36]	; (dbec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x148>)
    dbc6:	9300      	str	r3, [sp, #0]
    dbc8:	696c      	ldr	r4, [r5, #20]
    dbca:	4a09      	ldr	r2, [pc, #36]	; (dbf0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14c>)
    dbcc:	4909      	ldr	r1, [pc, #36]	; (dbf4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x150>)
    dbce:	2366      	movs	r3, #102	; 0x66
    dbd0:	4628      	mov	r0, r5
    dbd2:	47a0      	blx	r4
    dbd4:	e7b0      	b.n	db38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
    dbd6:	4623      	mov	r3, r4
    dbd8:	e7e1      	b.n	db9e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_MSG(context, false,
    dbda:	696b      	ldr	r3, [r5, #20]
    dbdc:	4906      	ldr	r1, [pc, #24]	; (dbf8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x154>)
    dbde:	4628      	mov	r0, r5
    dbe0:	4798      	blx	r3
    dbe2:	f04f 0801 	mov.w	r8, #1
    dbe6:	e7a7      	b.n	db38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
    dbe8:	0002bcc8 	.word	0x0002bcc8
    dbec:	0002bd3b 	.word	0x0002bd3b
    dbf0:	0002bc82 	.word	0x0002bc82
    dbf4:	0002a6ae 	.word	0x0002a6ae
    dbf8:	0002be48 	.word	0x0002be48

0000dbfc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    dbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    dc00:	f8d1 e000 	ldr.w	lr, [r1]
    dc04:	6885      	ldr	r5, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    dc06:	f8de 3004 	ldr.w	r3, [lr, #4]
  return &context->tensors[node->outputs->data[index]];
    dc0a:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    dc0c:	ea4f 1c83 	mov.w	ip, r3, lsl #6
    dc10:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    dc14:	6856      	ldr	r6, [r2, #4]
  for (int i = 0; i < dims->size; ++i) {
    dc16:	689f      	ldr	r7, [r3, #8]
    dc18:	f857 bb04 	ldr.w	fp, [r7], #4
  return &context->tensors[node->outputs->data[index]];
    dc1c:	ea4f 1886 	mov.w	r8, r6, lsl #6
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    dc20:	b085      	sub	sp, #20
    dc22:	4604      	mov	r4, r0
    dc24:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
    dc28:	f04f 0900 	mov.w	r9, #0
  int64_t count = 1;
    dc2c:	2201      	movs	r2, #1
    dc2e:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    dc30:	45cb      	cmp	fp, r9
    dc32:	dd0c      	ble.n	dc4e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    count *= dims->data[i];
    dc34:	f857 ab04 	ldr.w	sl, [r7], #4
    dc38:	4650      	mov	r0, sl
    dc3a:	17c1      	asrs	r1, r0, #31
    dc3c:	4351      	muls	r1, r2
    dc3e:	fb0a 1103 	mla	r1, sl, r3, r1
    dc42:	fba2 230a 	umull	r2, r3, r2, sl
    dc46:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    dc48:	f109 0901 	add.w	r9, r9, #1
    dc4c:	e7f0      	b.n	dc30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
  TfLiteIntArray* output_shape = output->dims;

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc4e:	f8de 3000 	ldr.w	r3, [lr]
  TfLiteIntArray* output_shape = output->dims;
    dc52:	68b1      	ldr	r1, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc54:	2b01      	cmp	r3, #1
    dc56:	d105      	bne.n	dc64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    dc58:	680b      	ldr	r3, [r1, #0]
    dc5a:	2b01      	cmp	r3, #1
    dc5c:	d102      	bne.n	dc64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc5e:	684b      	ldr	r3, [r1, #4]
    dc60:	b903      	cbnz	r3, dc64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
    dc62:	600b      	str	r3, [r1, #0]
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
    dc64:	460f      	mov	r7, r1
    dc66:	2600      	movs	r6, #0
    dc68:	f857 9b04 	ldr.w	r9, [r7], #4
  int stretch_dim = -1;
    dc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int num_output_elements = 1;
    dc70:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
    dc72:	45b1      	cmp	r9, r6
    dc74:	dd1a      	ble.n	dcac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    int value = output_shape->data[i];
    dc76:	f857 eb04 	ldr.w	lr, [r7], #4
    if (value == -1) {
    dc7a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    dc7e:	d10f      	bne.n	dca0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    dc80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    dc84:	d010      	beq.n	dca8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xac>
    dc86:	4b23      	ldr	r3, [pc, #140]	; (dd14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
    dc88:	9301      	str	r3, [sp, #4]
    dc8a:	e9cd 0e02 	strd	r0, lr, [sp, #8]
    dc8e:	4b22      	ldr	r3, [pc, #136]	; (dd18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
    dc90:	6965      	ldr	r5, [r4, #20]
    dc92:	9300      	str	r3, [sp, #0]
    dc94:	2335      	movs	r3, #53	; 0x35
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dc96:	4a21      	ldr	r2, [pc, #132]	; (dd1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
    dc98:	4921      	ldr	r1, [pc, #132]	; (dd20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
    dc9a:	4620      	mov	r0, r4
    dc9c:	47a8      	blx	r5
    dc9e:	e028      	b.n	dcf2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
      num_output_elements *= value;
    dca0:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
    dca4:	3601      	adds	r6, #1
    dca6:	e7e4      	b.n	dc72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
    dca8:	4630      	mov	r0, r6
    dcaa:	e7fb      	b.n	dca4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (stretch_dim != -1) {
    dcac:	1c46      	adds	r6, r0, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    dcae:	bf1c      	itt	ne
    dcb0:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
    dcb4:	fb92 f6f3 	sdivne	r6, r2, r3
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dcb8:	f815 000c 	ldrb.w	r0, [r5, ip]
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    dcbc:	bf18      	it	ne
    dcbe:	604e      	strne	r6, [r1, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dcc0:	f815 1008 	ldrb.w	r1, [r5, r8]
    num_output_elements *= output_shape->data[stretch_dim];
    dcc4:	bf18      	it	ne
    dcc6:	4373      	mulne	r3, r6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dcc8:	4281      	cmp	r1, r0
    dcca:	d016      	beq.n	dcfa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    dccc:	6967      	ldr	r7, [r4, #20]
    dcce:	f7f2 fdf0 	bl	8b2 <TfLiteTypeGetName>
    dcd2:	4606      	mov	r6, r0
    dcd4:	f815 0008 	ldrb.w	r0, [r5, r8]
    dcd8:	f7f2 fdeb 	bl	8b2 <TfLiteTypeGetName>
    dcdc:	4b11      	ldr	r3, [pc, #68]	; (dd24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
    dcde:	9301      	str	r3, [sp, #4]
    dce0:	4b11      	ldr	r3, [pc, #68]	; (dd28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    dce2:	9300      	str	r3, [sp, #0]
    dce4:	e9cd 6002 	strd	r6, r0, [sp, #8]
    dce8:	4a0c      	ldr	r2, [pc, #48]	; (dd1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
    dcea:	4910      	ldr	r1, [pc, #64]	; (dd2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    dcec:	2340      	movs	r3, #64	; 0x40
    dcee:	4620      	mov	r0, r4
    dcf0:	47b8      	blx	r7
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dcf2:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    dcf4:	b005      	add	sp, #20
    dcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dcfa:	4293      	cmp	r3, r2
    dcfc:	d008      	beq.n	dd10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>
    dcfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    dd02:	4b0b      	ldr	r3, [pc, #44]	; (dd30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
    dd04:	9301      	str	r3, [sp, #4]
    dd06:	4b0b      	ldr	r3, [pc, #44]	; (dd34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
    dd08:	9300      	str	r3, [sp, #0]
    dd0a:	6965      	ldr	r5, [r4, #20]
    dd0c:	2341      	movs	r3, #65	; 0x41
    dd0e:	e7c2      	b.n	dc96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
  return kTfLiteOk;
    dd10:	2000      	movs	r0, #0
    dd12:	e7ef      	b.n	dcf4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
    dd14:	0002beca 	.word	0x0002beca
    dd18:	0002becd 	.word	0x0002becd
    dd1c:	0002bea1 	.word	0x0002bea1
    dd20:	0002af4f 	.word	0x0002af4f
    dd24:	0002b75c 	.word	0x0002b75c
    dd28:	0002b774 	.word	0x0002b774
    dd2c:	0002af8a 	.word	0x0002af8a
    dd30:	0002bed9 	.word	0x0002bed9
    dd34:	0002beed 	.word	0x0002beed

0000dd38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    dd38:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dd3a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    dd3c:	681b      	ldr	r3, [r3, #0]
    dd3e:	3b01      	subs	r3, #1
    dd40:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dd42:	b085      	sub	sp, #20
    dd44:	4605      	mov	r5, r0
    dd46:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    dd48:	d909      	bls.n	dd5e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    dd4a:	4b19      	ldr	r3, [pc, #100]	; (ddb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    dd4c:	9300      	str	r3, [sp, #0]
    dd4e:	6944      	ldr	r4, [r0, #20]
    dd50:	4a18      	ldr	r2, [pc, #96]	; (ddb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    dd52:	4919      	ldr	r1, [pc, #100]	; (ddb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    dd54:	2346      	movs	r3, #70	; 0x46
    dd56:	47a0      	blx	r4
    dd58:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    dd5a:	b005      	add	sp, #20
    dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    dd5e:	684b      	ldr	r3, [r1, #4]
    dd60:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    dd62:	2e01      	cmp	r6, #1
    dd64:	d00c      	beq.n	dd80 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    dd66:	2401      	movs	r4, #1
    dd68:	e9cd 6402 	strd	r6, r4, [sp, #8]
    dd6c:	4b13      	ldr	r3, [pc, #76]	; (ddbc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    dd6e:	9301      	str	r3, [sp, #4]
    dd70:	4b13      	ldr	r3, [pc, #76]	; (ddc0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    dd72:	9300      	str	r3, [sp, #0]
    dd74:	6945      	ldr	r5, [r0, #20]
    dd76:	4a0f      	ldr	r2, [pc, #60]	; (ddb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    dd78:	4912      	ldr	r1, [pc, #72]	; (ddc4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    dd7a:	2347      	movs	r3, #71	; 0x47
    dd7c:	47a8      	blx	r5
    dd7e:	e7eb      	b.n	dd58 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    dd80:	f7ff ff3c 	bl	dbfc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    dd84:	2800      	cmp	r0, #0
    dd86:	d0e8      	beq.n	dd5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    dd88:	4621      	mov	r1, r4
    dd8a:	4628      	mov	r0, r5
    dd8c:	696f      	ldr	r7, [r5, #20]
    dd8e:	f7ff ff35 	bl	dbfc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    dd92:	2300      	movs	r3, #0
    dd94:	e9cd 0302 	strd	r0, r3, [sp, #8]
    dd98:	4b0b      	ldr	r3, [pc, #44]	; (ddc8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    dd9a:	9301      	str	r3, [sp, #4]
    dd9c:	4b0b      	ldr	r3, [pc, #44]	; (ddcc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    dd9e:	9300      	str	r3, [sp, #0]
    dda0:	4628      	mov	r0, r5
    dda2:	4a04      	ldr	r2, [pc, #16]	; (ddb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    dda4:	4907      	ldr	r1, [pc, #28]	; (ddc4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    dda6:	2348      	movs	r3, #72	; 0x48
    dda8:	47b8      	blx	r7
    ddaa:	4630      	mov	r0, r6
    ddac:	e7d5      	b.n	dd5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    ddae:	bf00      	nop
    ddb0:	0002bf00 	.word	0x0002bf00
    ddb4:	0002bea1 	.word	0x0002bea1
    ddb8:	0002a6ae 	.word	0x0002a6ae
    ddbc:	0002bbe9 	.word	0x0002bbe9
    ddc0:	0002af79 	.word	0x0002af79
    ddc4:	0002af4f 	.word	0x0002af4f
    ddc8:	0002bf2d 	.word	0x0002bf2d
    ddcc:	0002bf37 	.word	0x0002bf37

0000ddd0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ddd0:	4800      	ldr	r0, [pc, #0]	; (ddd4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x4>)
    ddd2:	4770      	bx	lr
    ddd4:	200005a8 	.word	0x200005a8

0000ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>:
namespace reference_ops {

inline int32 GetNearestNeighbor(const int input_value, const int32 input_size,
                                const int32 output_size,
                                const bool align_corners,
                                const bool half_pixel_centers) {
    ddd8:	b538      	push	{r3, r4, r5, lr}
    ddda:	ee07 0a90 	vmov	s15, r0
    ddde:	f89d 4010 	ldrb.w	r4, [sp, #16]
    dde2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    dde6:	1e4d      	subs	r5, r1, #1
  const float scale =
      (align_corners && output_size > 1)
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    dde8:	b38b      	cbz	r3, de4e <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x76>
      (align_corners && output_size > 1)
    ddea:	2a01      	cmp	r2, #1
    ddec:	dd2f      	ble.n	de4e <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x76>
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    ddee:	3a01      	subs	r2, #1
    ddf0:	ee07 2a90 	vmov	s15, r2
    ddf4:	ee06 5a90 	vmov	s13, r5
    ddf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ddfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    de00:	ee86 6aa7 	vdiv.f32	s12, s13, s15
          : input_size / static_cast<float>(output_size);
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de04:	bbb4      	cbnz	r4, de74 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x9c>
    de06:	eddf 7a1f 	vldr	s15, [pc, #124]	; de84 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xac>
  int32 output_value = std::min(
    de0a:	ee37 0a27 	vadd.f32	s0, s14, s15
    de0e:	ee20 0a06 	vmul.f32	s0, s0, s12
      align_corners
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
    de12:	b393      	cbz	r3, de7a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa2>
    de14:	ee37 7a27 	vadd.f32	s14, s14, s15
    de18:	ee67 7a06 	vmul.f32	s15, s14, s12
    de1c:	ee17 0a90 	vmov	r0, s15
    de20:	f7f2 ff22 	bl	c68 <__aeabi_f2d>
    de24:	ec41 0b10 	vmov	d0, r0, r1
    de28:	f004 f89c 	bl	11f64 <round>
    de2c:	ec51 0b10 	vmov	r0, r1, d0
    de30:	f7f3 fa34 	bl	129c <__aeabi_d2f>
    de34:	ee07 0a90 	vmov	s15, r0
    de38:	eebd 0ae7 	vcvt.s32.f32	s0, s15
    de3c:	ee10 0a10 	vmov	r0, s0
    de40:	42a8      	cmp	r0, r5
    de42:	bfa8      	it	ge
    de44:	4628      	movge	r0, r5
          : static_cast<int32>(std::floor((input_value + offset) * scale)),
      input_size - 1);
  if (half_pixel_centers) {
    de46:	b10c      	cbz	r4, de4c <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x74>
    output_value = std::max(static_cast<int32>(0), output_value);
    de48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return output_value;
}
    de4c:	bd38      	pop	{r3, r4, r5, pc}
          : input_size / static_cast<float>(output_size);
    de4e:	ee07 1a90 	vmov	s15, r1
    de52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    de56:	ee07 2a90 	vmov	s15, r2
    de5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de5e:	2c00      	cmp	r4, #0
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    de60:	ee86 6aa7 	vdiv.f32	s12, s13, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de64:	eddf 6a07 	vldr	s13, [pc, #28]	; de84 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xac>
    de68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    de6c:	bf08      	it	eq
    de6e:	eef0 7a66 	vmoveq.f32	s15, s13
    de72:	e7ca      	b.n	de0a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x32>
    de74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    de78:	e7cc      	b.n	de14 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x3c>
  { return __builtin_floorf(__x); }
    de7a:	f004 f94f 	bl	1211c <floorf>
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
    de7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    de82:	e7db      	b.n	de3c <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x64>
    de84:	00000000 	.word	0x00000000

0000de88 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    de88:	4800      	ldr	r0, [pc, #0]	; (de8c <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv+0x4>)
    de8a:	4770      	bx	lr
    de8c:	200005c8 	.word	0x200005c8

0000de90 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
    de90:	684a      	ldr	r2, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    de92:	b5f0      	push	{r4, r5, r6, r7, lr}
    de94:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    de96:	6887      	ldr	r7, [r0, #8]
    de98:	680d      	ldr	r5, [r1, #0]
  op_params.align_corners = params->align_corners;
    de9a:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    de9c:	686c      	ldr	r4, [r5, #4]
    de9e:	7809      	ldrb	r1, [r1, #0]
    dea0:	68ad      	ldr	r5, [r5, #8]
  return &context->tensors[node->outputs->data[index]];
    dea2:	01b2      	lsls	r2, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    dea4:	b099      	sub	sp, #100	; 0x64
  if (output->type == kTfLiteFloat32) {
    dea6:	5cba      	ldrb	r2, [r7, r2]
  op_params.align_corners = params->align_corners;
    dea8:	f88d 1014 	strb.w	r1, [sp, #20]
  if (output->type == kTfLiteFloat32) {
    deac:	2a01      	cmp	r2, #1
  op_params.half_pixel_centers = false;
    deae:	f04f 0100 	mov.w	r1, #0
  return &context->tensors[node->inputs->data[index]];
    deb2:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    deb6:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    deba:	eb07 1686 	add.w	r6, r7, r6, lsl #6
    debe:	f88d 1015 	strb.w	r1, [sp, #21]
  if (output->type == kTfLiteFloat32) {
    dec2:	d126      	bne.n	df12 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x82>
        op_params, GetTensorShape(input), GetTensorData<int32>(input),
    dec4:	4621      	mov	r1, r4
    dec6:	a806      	add	r0, sp, #24
    dec8:	f007 fd34 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    decc:	b104      	cbz	r4, ded0 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    dece:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    ded0:	4629      	mov	r1, r5
    ded2:	a80c      	add	r0, sp, #48	; 0x30
    ded4:	f007 fd2e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ded8:	b105      	cbz	r5, dedc <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    deda:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int32>(output));
    dedc:	af12      	add	r7, sp, #72	; 0x48
    dede:	4631      	mov	r1, r6
    dee0:	4638      	mov	r0, r7
    dee2:	f007 fd27 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    dee6:	6873      	ldr	r3, [r6, #4]
    dee8:	9500      	str	r5, [sp, #0]
    deea:	e9cd 7301 	strd	r7, r3, [sp, #4]
    deee:	4622      	mov	r2, r4
    def0:	ab0c      	add	r3, sp, #48	; 0x30
    def2:	a906      	add	r1, sp, #24
    def4:	a805      	add	r0, sp, #20
    def6:	f00e fa67 	bl	1c3c8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    defa:	4638      	mov	r0, r7
    defc:	f007 fcd5 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(size), GetTensorData<int32>(size),
    df00:	a80c      	add	r0, sp, #48	; 0x30
    df02:	f007 fcd2 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    df06:	a806      	add	r0, sp, #24
    df08:	f007 fccf 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    df0c:	2000      	movs	r0, #0
}
    df0e:	b019      	add	sp, #100	; 0x64
    df10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteUInt8) {
    df12:	2a03      	cmp	r2, #3
    df14:	d11b      	bne.n	df4e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    df16:	4621      	mov	r1, r4
    df18:	a806      	add	r0, sp, #24
    df1a:	f007 fd0b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df1e:	b104      	cbz	r4, df22 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    df20:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    df22:	4629      	mov	r1, r5
    df24:	a80c      	add	r0, sp, #48	; 0x30
    df26:	f007 fd05 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df2a:	b105      	cbz	r5, df2e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    df2c:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    df2e:	af12      	add	r7, sp, #72	; 0x48
    df30:	4631      	mov	r1, r6
    df32:	4638      	mov	r0, r7
    df34:	f007 fcfe 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    df38:	6873      	ldr	r3, [r6, #4]
    df3a:	9500      	str	r5, [sp, #0]
    df3c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    df40:	4622      	mov	r2, r4
    df42:	ab0c      	add	r3, sp, #48	; 0x30
    df44:	a906      	add	r1, sp, #24
    df46:	a805      	add	r0, sp, #20
    df48:	f00e fad1 	bl	1c4ee <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
    df4c:	e7d5      	b.n	defa <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  } else if (output->type == kTfLiteInt8) {
    df4e:	2a09      	cmp	r2, #9
    df50:	d11b      	bne.n	df8a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xfa>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    df52:	4621      	mov	r1, r4
    df54:	a806      	add	r0, sp, #24
    df56:	f007 fced 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df5a:	b104      	cbz	r4, df5e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xce>
    df5c:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    df5e:	4629      	mov	r1, r5
    df60:	a80c      	add	r0, sp, #48	; 0x30
    df62:	f007 fce7 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df66:	b105      	cbz	r5, df6a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    df68:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    df6a:	af12      	add	r7, sp, #72	; 0x48
    df6c:	4631      	mov	r1, r6
    df6e:	4638      	mov	r0, r7
    df70:	f007 fce0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    df74:	6873      	ldr	r3, [r6, #4]
    df76:	9500      	str	r5, [sp, #0]
    df78:	e9cd 7301 	strd	r7, r3, [sp, #4]
    df7c:	4622      	mov	r2, r4
    df7e:	ab0c      	add	r3, sp, #48	; 0x30
    df80:	a906      	add	r1, sp, #24
    df82:	a805      	add	r0, sp, #20
    df84:	f00e fb43 	bl	1c60e <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
    df88:	e7b7      	b.n	defa <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_KERNEL_LOG(context,
    df8a:	6943      	ldr	r3, [r0, #20]
    df8c:	4901      	ldr	r1, [pc, #4]	; (df94 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x104>)
    df8e:	4798      	blx	r3
    return kTfLiteError;
    df90:	2001      	movs	r0, #1
    df92:	e7bc      	b.n	df0e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    df94:	0002bf54 	.word	0x0002bf54

0000df98 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    df98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    df9c:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    df9e:	681e      	ldr	r6, [r3, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    dfa0:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dfa2:	b085      	sub	sp, #20
    dfa4:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    dfa6:	d00c      	beq.n	dfc2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    dfa8:	2401      	movs	r4, #1
    dfaa:	4b4a      	ldr	r3, [pc, #296]	; (e0d4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    dfac:	9301      	str	r3, [sp, #4]
    dfae:	e9cd 6402 	strd	r6, r4, [sp, #8]
    dfb2:	4b49      	ldr	r3, [pc, #292]	; (e0d8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    dfb4:	9300      	str	r3, [sp, #0]
    dfb6:	6945      	ldr	r5, [r0, #20]
    dfb8:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    dfba:	4a48      	ldr	r2, [pc, #288]	; (e0dc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    dfbc:	4948      	ldr	r1, [pc, #288]	; (e0e0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    dfbe:	47a8      	blx	r5
    dfc0:	e00f      	b.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    dfc2:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    dfc4:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    dfc6:	2c01      	cmp	r4, #1
    dfc8:	d00f      	beq.n	dfea <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
    dfca:	e9cd 4602 	strd	r4, r6, [sp, #8]
    dfce:	4b41      	ldr	r3, [pc, #260]	; (e0d4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    dfd0:	9301      	str	r3, [sp, #4]
    dfd2:	4b44      	ldr	r3, [pc, #272]	; (e0e4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	6944      	ldr	r4, [r0, #20]
    dfd8:	4a40      	ldr	r2, [pc, #256]	; (e0dc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    dfda:	4941      	ldr	r1, [pc, #260]	; (e0e0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    dfdc:	2322      	movs	r3, #34	; 0x22
    dfde:	47a0      	blx	r4
    dfe0:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
    dfe2:	4620      	mov	r0, r4
    dfe4:	b005      	add	sp, #20
    dfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
    dfea:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    dfec:	6886      	ldr	r6, [r0, #8]
    dfee:	ea4f 1883 	mov.w	r8, r3, lsl #6
    dff2:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    dff6:	f816 7008 	ldrb.w	r7, [r6, r8]
    dffa:	2f01      	cmp	r7, #1
    dffc:	d014      	beq.n	e028 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    dffe:	f8d0 8014 	ldr.w	r8, [r0, #20]
    e002:	4638      	mov	r0, r7
    e004:	f7f2 fc55 	bl	8b2 <TfLiteTypeGetName>
    e008:	4606      	mov	r6, r0
    e00a:	4620      	mov	r0, r4
    e00c:	f7f2 fc51 	bl	8b2 <TfLiteTypeGetName>
    e010:	4b35      	ldr	r3, [pc, #212]	; (e0e8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    e012:	9301      	str	r3, [sp, #4]
    e014:	4b35      	ldr	r3, [pc, #212]	; (e0ec <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    e016:	9300      	str	r3, [sp, #0]
    e018:	e9cd 6002 	strd	r6, r0, [sp, #8]
    e01c:	4a2f      	ldr	r2, [pc, #188]	; (e0dc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e01e:	4934      	ldr	r1, [pc, #208]	; (e0f0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    e020:	2323      	movs	r3, #35	; 0x23
    e022:	4628      	mov	r0, r5
    e024:	47c0      	blx	r8
    e026:	e7dc      	b.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
    e028:	6852      	ldr	r2, [r2, #4]
    e02a:	0191      	lsls	r1, r2, #6
    e02c:	eb06 1282 	add.w	r2, r6, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
    e030:	5c74      	ldrb	r4, [r6, r1]
    e032:	2c01      	cmp	r4, #1
    e034:	d016      	beq.n	e064 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    e036:	f8d0 9014 	ldr.w	r9, [r0, #20]
    e03a:	4620      	mov	r0, r4
    e03c:	f7f2 fc39 	bl	8b2 <TfLiteTypeGetName>
    e040:	4604      	mov	r4, r0
    e042:	f816 0008 	ldrb.w	r0, [r6, r8]
    e046:	f7f2 fc34 	bl	8b2 <TfLiteTypeGetName>
    e04a:	4b28      	ldr	r3, [pc, #160]	; (e0ec <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    e04c:	9301      	str	r3, [sp, #4]
    e04e:	4b29      	ldr	r3, [pc, #164]	; (e0f4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    e050:	9300      	str	r3, [sp, #0]
    e052:	e9cd 4002 	strd	r4, r0, [sp, #8]
    e056:	4a21      	ldr	r2, [pc, #132]	; (e0dc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e058:	4925      	ldr	r1, [pc, #148]	; (e0f0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    e05a:	2324      	movs	r3, #36	; 0x24
    e05c:	4628      	mov	r0, r5
    e05e:	47c8      	blx	r9
    e060:	463c      	mov	r4, r7
    e062:	e7be      	b.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
    e064:	6991      	ldr	r1, [r2, #24]
    e066:	699e      	ldr	r6, [r3, #24]
    e068:	42b1      	cmp	r1, r6
    e06a:	d008      	beq.n	e07e <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    e06c:	4b22      	ldr	r3, [pc, #136]	; (e0f8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    e06e:	9301      	str	r3, [sp, #4]
    e070:	e9cd 1602 	strd	r1, r6, [sp, #8]
    e074:	4b21      	ldr	r3, [pc, #132]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    e076:	9300      	str	r3, [sp, #0]
    e078:	6945      	ldr	r5, [r0, #20]
    e07a:	2325      	movs	r3, #37	; 0x25
    e07c:	e79d      	b.n	dfba <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    e07e:	6897      	ldr	r7, [r2, #8]
    e080:	689a      	ldr	r2, [r3, #8]
    e082:	6839      	ldr	r1, [r7, #0]
    e084:	6813      	ldr	r3, [r2, #0]
    e086:	4299      	cmp	r1, r3
    e088:	d008      	beq.n	e09c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    e08a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    e08e:	4b1c      	ldr	r3, [pc, #112]	; (e100 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    e090:	9301      	str	r3, [sp, #4]
    e092:	4b1c      	ldr	r3, [pc, #112]	; (e104 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    e094:	9300      	str	r3, [sp, #0]
    e096:	6945      	ldr	r5, [r0, #20]
    e098:	2326      	movs	r3, #38	; 0x26
    e09a:	e78e      	b.n	dfba <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    e09c:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    e09e:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
    e0a0:	1e58      	subs	r0, r3, #1
    e0a2:	4281      	cmp	r1, r0
    e0a4:	dd13      	ble.n	e0ce <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    e0a6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    e0aa:	3301      	adds	r3, #1
    e0ac:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    e0b0:	42b0      	cmp	r0, r6
    e0b2:	d0f5      	beq.n	e0a0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
    e0b4:	e9cd 0602 	strd	r0, r6, [sp, #8]
    e0b8:	4b13      	ldr	r3, [pc, #76]	; (e108 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    e0ba:	9301      	str	r3, [sp, #4]
    e0bc:	4b13      	ldr	r3, [pc, #76]	; (e10c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    e0be:	9300      	str	r3, [sp, #0]
    e0c0:	696e      	ldr	r6, [r5, #20]
    e0c2:	4a06      	ldr	r2, [pc, #24]	; (e0dc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e0c4:	4906      	ldr	r1, [pc, #24]	; (e0e0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    e0c6:	2328      	movs	r3, #40	; 0x28
    e0c8:	4628      	mov	r0, r5
    e0ca:	47b0      	blx	r6
    e0cc:	e789      	b.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
    e0ce:	2400      	movs	r4, #0
    e0d0:	e787      	b.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    e0d2:	bf00      	nop
    e0d4:	0002bbe9 	.word	0x0002bbe9
    e0d8:	0002af69 	.word	0x0002af69
    e0dc:	0002bf86 	.word	0x0002bf86
    e0e0:	0002af4f 	.word	0x0002af4f
    e0e4:	0002af79 	.word	0x0002af79
    e0e8:	0002afa4 	.word	0x0002afa4
    e0ec:	0002b774 	.word	0x0002b774
    e0f0:	0002af8a 	.word	0x0002af8a
    e0f4:	0002b75c 	.word	0x0002b75c
    e0f8:	0002afb3 	.word	0x0002afb3
    e0fc:	0002afc0 	.word	0x0002afc0
    e100:	0002afce 	.word	0x0002afce
    e104:	0002afe0 	.word	0x0002afe0
    e108:	0002aff3 	.word	0x0002aff3
    e10c:	0002b008 	.word	0x0002b008

0000e110 <_ZN6tflite3ops5micro14Register_ROUNDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e110:	4800      	ldr	r0, [pc, #0]	; (e114 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x4>)
    e112:	4770      	bx	lr
    e114:	200005e8 	.word	0x200005e8

0000e118 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    e118:	b530      	push	{r4, r5, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    e11a:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    e11c:	6815      	ldr	r5, [r2, #0]
    e11e:	2d01      	cmp	r5, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    e120:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    e122:	d00d      	beq.n	e140 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
    e124:	2401      	movs	r4, #1
    e126:	4a18      	ldr	r2, [pc, #96]	; (e188 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e128:	9201      	str	r2, [sp, #4]
    e12a:	e9cd 5402 	strd	r5, r4, [sp, #8]
    e12e:	4a17      	ldr	r2, [pc, #92]	; (e18c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    e130:	9200      	str	r2, [sp, #0]
    e132:	6945      	ldr	r5, [r0, #20]
    e134:	4a16      	ldr	r2, [pc, #88]	; (e190 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e136:	4917      	ldr	r1, [pc, #92]	; (e194 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e138:	234c      	movs	r3, #76	; 0x4c
    e13a:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e13c:	4620      	mov	r0, r4
    e13e:	e00f      	b.n	e160 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    e140:	6849      	ldr	r1, [r1, #4]
    e142:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    e144:	2c01      	cmp	r4, #1
    e146:	d00d      	beq.n	e164 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    e148:	e9cd 4502 	strd	r4, r5, [sp, #8]
    e14c:	4a0e      	ldr	r2, [pc, #56]	; (e188 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e14e:	9201      	str	r2, [sp, #4]
    e150:	4a11      	ldr	r2, [pc, #68]	; (e198 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    e152:	9200      	str	r2, [sp, #0]
    e154:	6944      	ldr	r4, [r0, #20]
    e156:	4a0e      	ldr	r2, [pc, #56]	; (e190 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e158:	490e      	ldr	r1, [pc, #56]	; (e194 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e15a:	234d      	movs	r3, #77	; 0x4d
    e15c:	47a0      	blx	r4
    e15e:	4628      	mov	r0, r5

  return kTfLiteOk;
}
    e160:	b005      	add	sp, #20
    e162:	bd30      	pop	{r4, r5, pc}
  return &context->tensors[node->inputs->data[index]];
    e164:	6851      	ldr	r1, [r2, #4]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e166:	6882      	ldr	r2, [r0, #8]
    e168:	eb02 1281 	add.w	r2, r2, r1, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    e16c:	6892      	ldr	r2, [r2, #8]
    e16e:	6812      	ldr	r2, [r2, #0]
    e170:	2a00      	cmp	r2, #0
    e172:	dc07      	bgt.n	e184 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
    e174:	4a09      	ldr	r2, [pc, #36]	; (e19c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    e176:	9200      	str	r2, [sp, #0]
    e178:	6945      	ldr	r5, [r0, #20]
    e17a:	4a05      	ldr	r2, [pc, #20]	; (e190 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e17c:	4908      	ldr	r1, [pc, #32]	; (e1a0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    e17e:	234f      	movs	r3, #79	; 0x4f
    e180:	47a8      	blx	r5
    e182:	e7db      	b.n	e13c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
    e184:	2000      	movs	r0, #0
    e186:	e7eb      	b.n	e160 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
    e188:	0002bbe9 	.word	0x0002bbe9
    e18c:	0002af69 	.word	0x0002af69
    e190:	0002bfad 	.word	0x0002bfad
    e194:	0002af4f 	.word	0x0002af4f
    e198:	0002af79 	.word	0x0002af79
    e19c:	0002bfd6 	.word	0x0002bfd6
    e1a0:	0002a6ae 	.word	0x0002a6ae

0000e1a4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    e1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1a8:	ed2d 8b06 	vpush	{d8-d10}
    e1ac:	b087      	sub	sp, #28
    e1ae:	460c      	mov	r4, r1
    e1b0:	9200      	str	r2, [sp, #0]
    e1b2:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e1b4:	680b      	ldr	r3, [r1, #0]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1b6:	9202      	str	r2, [sp, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e1b8:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1ba:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
    e1bc:	4606      	mov	r6, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1be:	4620      	mov	r0, r4
    e1c0:	9301      	str	r3, [sp, #4]
    e1c2:	f00b fe1f 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1c6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1ca:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1cc:	4619      	mov	r1, r3
    e1ce:	4620      	mov	r0, r4
    e1d0:	f00a fa23 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    e1d4:	2500      	movs	r5, #0

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    e1d6:	eddf 9a34 	vldr	s19, [pc, #208]	; e2a8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1da:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    e1dc:	46aa      	mov	sl, r5
	return __b;
      return __a;
    e1de:	f10d 0b14 	add.w	fp, sp, #20
    e1e2:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    e1e6:	45ba      	cmp	sl, r7
    e1e8:	da58      	bge.n	e29c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf8>
    float max = std::numeric_limits<float>::lowest();
    e1ea:	9b00      	ldr	r3, [sp, #0]
    e1ec:	edcd 9a05 	vstr	s19, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    e1f0:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    e1f4:	ea4f 0885 	mov.w	r8, r5, lsl #2
    float max = std::numeric_limits<float>::lowest();
    e1f8:	4649      	mov	r1, r9
    for (int c = 0; c < depth; ++c) {
    e1fa:	2200      	movs	r2, #0
    e1fc:	42a2      	cmp	r2, r4
    e1fe:	ed9d 8a05 	vldr	s16, [sp, #20]
    e202:	da0d      	bge.n	e220 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7c>
      max = std::max(max, input_data[i * depth + c]);
    e204:	460b      	mov	r3, r1
      if (__a < __b)
    e206:	edd3 7a00 	vldr	s15, [r3]
    e20a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    e20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
    e212:	bf58      	it	pl
    e214:	465b      	movpl	r3, fp
    e216:	3104      	adds	r1, #4
    e218:	681b      	ldr	r3, [r3, #0]
    e21a:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    e21c:	3201      	adds	r2, #1
    e21e:	e7ed      	b.n	e1fc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x58>
    }

    // Compute sum.
    float sum = 0.f;
    e220:	eddf 8a22 	vldr	s17, [pc, #136]	; e2ac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
    e224:	464a      	mov	r2, r9
    for (int c = 0; c < depth; ++c) {
    e226:	2300      	movs	r3, #0
    e228:	42a3      	cmp	r3, r4
    e22a:	db1c      	blt.n	e266 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc2>
    e22c:	ee8a 9a28 	vdiv.f32	s18, s20, s17
    e230:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e232:	4498      	add	r8, r3
      sum += std::exp((input_data[i * depth + c] - max) *
                      static_cast<float>(params.beta));
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    e234:	2300      	movs	r3, #0
    e236:	42a3      	cmp	r3, r4
    e238:	9301      	str	r3, [sp, #4]
    e23a:	da2b      	bge.n	e294 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
                                            static_cast<float>(params.beta)) /
    e23c:	e9d6 0100 	ldrd	r0, r1, [r6]
    e240:	f7f3 f82c 	bl	129c <__aeabi_d2f>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    e244:	ecf9 8a01 	vldmia	r9!, {s17}
  { return __builtin_expf(__x); }
    e248:	ee07 0a90 	vmov	s15, r0
    e24c:	ee38 0ac8 	vsub.f32	s0, s17, s16
    e250:	ee27 0a80 	vmul.f32	s0, s15, s0
    e254:	f004 f874 	bl	12340 <expf>
    for (int c = 0; c < depth; ++c) {
    e258:	9b01      	ldr	r3, [sp, #4]
                                            static_cast<float>(params.beta)) /
    e25a:	ee29 0a00 	vmul.f32	s0, s18, s0
    for (int c = 0; c < depth; ++c) {
    e25e:	3301      	adds	r3, #1
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    e260:	eca8 0a01 	vstmia	r8!, {s0}
    for (int c = 0; c < depth; ++c) {
    e264:	e7e7      	b.n	e236 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
      sum += std::exp((input_data[i * depth + c] - max) *
    e266:	ecb2 9a01 	vldmia	r2!, {s18}
    e26a:	9302      	str	r3, [sp, #8]
                      static_cast<float>(params.beta));
    e26c:	e9d6 0100 	ldrd	r0, r1, [r6]
      sum += std::exp((input_data[i * depth + c] - max) *
    e270:	9201      	str	r2, [sp, #4]
    e272:	9203      	str	r2, [sp, #12]
                      static_cast<float>(params.beta));
    e274:	f7f3 f812 	bl	129c <__aeabi_d2f>
      sum += std::exp((input_data[i * depth + c] - max) *
    e278:	ee39 0a48 	vsub.f32	s0, s18, s16
    e27c:	ee07 0a90 	vmov	s15, r0
    e280:	ee27 0a80 	vmul.f32	s0, s15, s0
    e284:	f004 f85c 	bl	12340 <expf>
    for (int c = 0; c < depth; ++c) {
    e288:	9b02      	ldr	r3, [sp, #8]
    e28a:	9a01      	ldr	r2, [sp, #4]
      sum += std::exp((input_data[i * depth + c] - max) *
    e28c:	ee78 8a80 	vadd.f32	s17, s17, s0
    for (int c = 0; c < depth; ++c) {
    e290:	3301      	adds	r3, #1
    e292:	e7c9      	b.n	e228 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int i = 0; i < outer_size; ++i) {
    e294:	f10a 0a01 	add.w	sl, sl, #1
    e298:	4425      	add	r5, r4
    e29a:	e7a4      	b.n	e1e6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x42>
                                   sum;
    }
  }
}
    e29c:	b007      	add	sp, #28
    e29e:	ecbd 8b06 	vpop	{d8-d10}
    e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2a6:	bf00      	nop
    e2a8:	ff7fffff 	.word	0xff7fffff
    e2ac:	00000000 	.word	0x00000000

0000e2b0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e2b0:	4800      	ldr	r0, [pc, #0]	; (e2b4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x4>)
    e2b2:	4770      	bx	lr
    e2b4:	20000608 	.word	0x20000608

0000e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    e2bc:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2c0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    e2c2:	0160      	lsls	r0, r4, #5
    e2c4:	f7fd fb38 	bl	b938 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    e2c8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    e2ca:	4842      	ldr	r0, [pc, #264]	; (e3d4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    e2cc:	f00b fff4 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e2d0:	4601      	mov	r1, r0
    e2d2:	4630      	mov	r0, r6
  return a - b;
    e2d4:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    e2d6:	f00b fff4 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e2da:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    e2de:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    e2e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e2e6:	ea00 0909 	and.w	r9, r0, r9
    e2ea:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    e2ee:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    e2f2:	4839      	ldr	r0, [pc, #228]	; (e3d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    e2f4:	f00b ffe0 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e2f8:	4601      	mov	r1, r0
    e2fa:	4650      	mov	r0, sl
    e2fc:	f00b ffe1 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e300:	f3c4 6940 	ubfx	r9, r4, #25, #1
    e304:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e308:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e30c:	ea00 0008 	and.w	r0, r0, r8
    e310:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    e314:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    e318:	4830      	ldr	r0, [pc, #192]	; (e3dc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    e31a:	f00b ffcd 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e31e:	4601      	mov	r1, r0
    e320:	4648      	mov	r0, r9
    e322:	f00b ffce 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e326:	f3c4 6780 	ubfx	r7, r4, #26, #1
    e32a:	427e      	negs	r6, r7
  return a & b;
    e32c:	3f01      	subs	r7, #1
    e32e:	4030      	ands	r0, r6
    e330:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e334:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    e336:	482a      	ldr	r0, [pc, #168]	; (e3e0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    e338:	f00b ffbe 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e33c:	4601      	mov	r1, r0
    e33e:	4638      	mov	r0, r7
    e340:	f00b ffbf 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e344:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    e348:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    e34c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e350:	ea00 000a 	and.w	r0, r0, sl
    e354:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    e358:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    e35c:	4821      	ldr	r0, [pc, #132]	; (e3e4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    e35e:	f00b ffab 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e362:	4601      	mov	r1, r0
    e364:	4658      	mov	r0, fp
    e366:	f00b ffac 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e36a:	f3c4 7900 	ubfx	r9, r4, #28, #1
    e36e:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e372:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e376:	ea00 0008 	and.w	r0, r0, r8
    e37a:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    e37e:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    e382:	4819      	ldr	r0, [pc, #100]	; (e3e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    e384:	f00b ff98 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e388:	4601      	mov	r1, r0
    e38a:	4648      	mov	r0, r9
    e38c:	f00b ff99 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e390:	f3c4 7740 	ubfx	r7, r4, #29, #1
    e394:	427e      	negs	r6, r7
  return a & b;
    e396:	3f01      	subs	r7, #1
    e398:	4030      	ands	r0, r6
    e39a:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e39e:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    e3a0:	20f2      	movs	r0, #242	; 0xf2
    e3a2:	f00b ff89 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e3a6:	4601      	mov	r1, r0
    e3a8:	4638      	mov	r0, r7
    e3aa:	f00b ff8a 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e3ae:	f3c4 7480 	ubfx	r4, r4, #30, #1
    e3b2:	4263      	negs	r3, r4
  return a & b;
    e3b4:	4018      	ands	r0, r3
    e3b6:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    e3b8:	fab5 f385 	clz	r3, r5
  return a & b;
    e3bc:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    e3be:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    e3c0:	4044      	eors	r4, r0
  return a & b;
    e3c2:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    e3c4:	425b      	negs	r3, r3
  return a & b;
    e3c6:	4020      	ands	r0, r4
    e3c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    e3cc:	4058      	eors	r0, r3
    e3ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3d2:	bf00      	nop
    e3d4:	63afbe7b 	.word	0x63afbe7b
    e3d8:	4da2cbf2 	.word	0x4da2cbf2
    e3dc:	2f16ac6c 	.word	0x2f16ac6c
    e3e0:	1152aaa4 	.word	0x1152aaa4
    e3e4:	02582ab7 	.word	0x02582ab7
    e3e8:	000afe11 	.word	0x000afe11

0000e3ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    e3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f0:	4614      	mov	r4, r2
    e3f2:	461a      	mov	r2, r3
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e3f4:	680b      	ldr	r3, [r1, #0]
  const int diff_min = params.diff_min;
    e3f6:	f8d0 b018 	ldr.w	fp, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
    e3fa:	b08b      	sub	sp, #44	; 0x2c
    e3fc:	460d      	mov	r5, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e3fe:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e400:	4619      	mov	r1, r3
  const int32 input_beta_left_shift = params.input_left_shift;
    e402:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e406:	4628      	mov	r0, r5
    e408:	9202      	str	r2, [sp, #8]
    e40a:	9301      	str	r3, [sp, #4]
    e40c:	f00b fcfa 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e410:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e414:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e416:	4619      	mov	r1, r3
    e418:	4628      	mov	r0, r5
    e41a:	f00a f8fe 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    e41e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    e420:	0043      	lsls	r3, r0, #1
    e422:	4605      	mov	r5, r0
    e424:	9301      	str	r3, [sp, #4]

  for (int i = 0; i < outer_size; ++i) {
    e426:	2700      	movs	r7, #0
    e428:	9b00      	ldr	r3, [sp, #0]
    e42a:	429f      	cmp	r7, r3
    e42c:	da79      	bge.n	e522 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e42e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    e432:	f88d 3017 	strb.w	r3, [sp, #23]
    e436:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
    e438:	2200      	movs	r2, #0
    e43a:	f10d 0e17 	add.w	lr, sp, #23
    e43e:	42aa      	cmp	r2, r5
    e440:	da0e      	bge.n	e460 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e442:	460b      	mov	r3, r1
      if (__a < __b)
    e444:	f99d 0017 	ldrsb.w	r0, [sp, #23]
    e448:	f993 c000 	ldrsb.w	ip, [r3]
    e44c:	4584      	cmp	ip, r0
      return __a;
    e44e:	bfd8      	it	le
    e450:	4673      	movle	r3, lr
    e452:	3101      	adds	r1, #1
    e454:	f993 3000 	ldrsb.w	r3, [r3]
    e458:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
    e45c:	3201      	adds	r2, #1
    e45e:	e7ee      	b.n	e43e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    e460:	f04f 0800 	mov.w	r8, #0
    e464:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
    e466:	4643      	mov	r3, r8
    e468:	42ab      	cmp	r3, r5
    e46a:	da17      	bge.n	e49c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    e46c:	f912 0b01 	ldrsb.w	r0, [r2], #1
    e470:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
    e474:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    e476:	4583      	cmp	fp, r0
    e478:	dc0e      	bgt.n	e498 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    e47a:	4649      	mov	r1, r9
    e47c:	fa00 f00a 	lsl.w	r0, r0, sl
    e480:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e484:	f7fc ff86 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    e488:	f7ff ff16 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    e48c:	210c      	movs	r1, #12
    e48e:	f7fc ffaf 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    e492:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    e496:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
    e498:	3301      	adds	r3, #1
    e49a:	e7e5      	b.n	e468 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    e49c:	aa06      	add	r2, sp, #24
    e49e:	4640      	mov	r0, r8
    e4a0:	210c      	movs	r1, #12
    e4a2:	f00e f9ef 	bl	1c884 <_ZN6tflite13GetReciprocalEiiPi>
    e4a6:	4622      	mov	r2, r4
    e4a8:	4680      	mov	r8, r0
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    e4aa:	2300      	movs	r3, #0
    e4ac:	42ab      	cmp	r3, r5
    e4ae:	da33      	bge.n	e518 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    e4b0:	f912 0b01 	ldrsb.w	r0, [r2], #1
    e4b4:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
    e4b8:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    e4ba:	4583      	cmp	fp, r0
    e4bc:	dc29      	bgt.n	e512 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    e4be:	4649      	mov	r1, r9
    e4c0:	fa00 f00a 	lsl.w	r0, r0, sl
    e4c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e4c8:	f7fc ff64 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    e4cc:	f7ff fef4 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e4d0:	4601      	mov	r1, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
    e4d2:	4640      	mov	r0, r8
    e4d4:	f00b fef5 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
    e4d8:	9906      	ldr	r1, [sp, #24]
    e4da:	310f      	adds	r1, #15
    e4dc:	f7fc ff88 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));

        const int32 shifted_output =
            unsat_output +
    e4e0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
    e4e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    e4e8:	bfb4      	ite	lt
    e4ea:	a907      	addlt	r1, sp, #28
	return __b;
    e4ec:	a908      	addge	r1, sp, #32
            static_cast<int32>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    e4ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
        const int32 shifted_output =
    e4f2:	9007      	str	r0, [sp, #28]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    e4f4:	9308      	str	r3, [sp, #32]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    e4f6:	480c      	ldr	r0, [pc, #48]	; (e528 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>)
    e4f8:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
    e4fa:	6808      	ldr	r0, [r1, #0]
    e4fc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    e500:	bfb8      	it	lt
    e502:	a909      	addlt	r1, sp, #36	; 0x24
      if (__b < __a)
    e504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e508:	6809      	ldr	r1, [r1, #0]
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e50a:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e50e:	3301      	adds	r3, #1
    e510:	e7cc      	b.n	e4ac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e512:	f248 0100 	movw	r1, #32768	; 0x8000
    e516:	e7f8      	b.n	e50a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
  for (int i = 0; i < outer_size; ++i) {
    e518:	9b01      	ldr	r3, [sp, #4]
    e51a:	3701      	adds	r7, #1
    e51c:	442c      	add	r4, r5
    e51e:	441e      	add	r6, r3
    e520:	e782      	b.n	e428 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
      }
    }
  }
}
    e522:	b00b      	add	sp, #44	; 0x2c
    e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e528:	ffff8000 	.word	0xffff8000

0000e52c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    e52c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e532:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    e534:	6886      	ldr	r6, [r0, #8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    e536:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e53a:	019f      	lsls	r7, r3, #6
    e53c:	eb06 1883 	add.w	r8, r6, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    e540:	684b      	ldr	r3, [r1, #4]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e542:	f816 9007 	ldrb.w	r9, [r6, r7]
    e546:	685d      	ldr	r5, [r3, #4]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e548:	ed2d 8b02 	vpush	{d8}
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e54c:	f1b9 0f03 	cmp.w	r9, #3
    e550:	ea4f 1385 	mov.w	r3, r5, lsl #6
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e554:	b094      	sub	sp, #80	; 0x50
    e556:	4604      	mov	r4, r0
    e558:	eb06 1585 	add.w	r5, r6, r5, lsl #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e55c:	d014      	beq.n	e588 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
    e55e:	f1b9 0f09 	cmp.w	r9, #9
    e562:	f040 809e 	bne.w	e6a2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x176>
      if (output->type == kTfLiteInt16) {
    e566:	5cf3      	ldrb	r3, [r6, r3]
    e568:	2b07      	cmp	r3, #7
    e56a:	d136      	bne.n	e5da <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    e56c:	692b      	ldr	r3, [r5, #16]
    e56e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    e572:	d064      	beq.n	e63e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e574:	4a6d      	ldr	r2, [pc, #436]	; (e72c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x200>)
    e576:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e57a:	4b6d      	ldr	r3, [pc, #436]	; (e730 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
    e57c:	9301      	str	r3, [sp, #4]
    e57e:	4b6d      	ldr	r3, [pc, #436]	; (e734 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e580:	9300      	str	r3, [sp, #0]
    e582:	6944      	ldr	r4, [r0, #20]
    e584:	232c      	movs	r3, #44	; 0x2c
    e586:	e024      	b.n	e5d2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
    e588:	5cf3      	ldrb	r3, [r6, r3]
    e58a:	2b03      	cmp	r3, #3
    e58c:	d015      	beq.n	e5ba <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
    e58e:	6946      	ldr	r6, [r0, #20]
    e590:	4618      	mov	r0, r3
    e592:	f7f2 f98e 	bl	8b2 <TfLiteTypeGetName>
    e596:	4605      	mov	r5, r0
    e598:	4648      	mov	r0, r9
    e59a:	f7f2 f98a 	bl	8b2 <TfLiteTypeGetName>
    e59e:	4b66      	ldr	r3, [pc, #408]	; (e738 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
    e5a0:	9301      	str	r3, [sp, #4]
    e5a2:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e5a6:	4b65      	ldr	r3, [pc, #404]	; (e73c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e5a8:	9300      	str	r3, [sp, #0]
    e5aa:	2327      	movs	r3, #39	; 0x27
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    e5ac:	4a64      	ldr	r2, [pc, #400]	; (e740 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e5ae:	4965      	ldr	r1, [pc, #404]	; (e744 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    e5b0:	4620      	mov	r0, r4
    e5b2:	47b0      	blx	r6
      return kTfLiteError;
    e5b4:	f04f 0901 	mov.w	r9, #1
    e5b8:	e09b      	b.n	e6f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    e5ba:	692b      	ldr	r3, [r5, #16]
    e5bc:	2b00      	cmp	r3, #0
    e5be:	d03e      	beq.n	e63e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e5c0:	2200      	movs	r2, #0
    e5c2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e5c6:	4b60      	ldr	r3, [pc, #384]	; (e748 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
    e5c8:	9301      	str	r3, [sp, #4]
    e5ca:	4b5a      	ldr	r3, [pc, #360]	; (e734 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e5cc:	9300      	str	r3, [sp, #0]
    e5ce:	6944      	ldr	r4, [r0, #20]
    e5d0:	2328      	movs	r3, #40	; 0x28
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    e5d2:	4a5b      	ldr	r2, [pc, #364]	; (e740 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e5d4:	495d      	ldr	r1, [pc, #372]	; (e74c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x220>)
    e5d6:	47a0      	blx	r4
    e5d8:	e7ec      	b.n	e5b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    e5da:	2b09      	cmp	r3, #9
    e5dc:	d00f      	beq.n	e5fe <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    e5de:	6946      	ldr	r6, [r0, #20]
    e5e0:	4618      	mov	r0, r3
    e5e2:	f7f2 f966 	bl	8b2 <TfLiteTypeGetName>
    e5e6:	4605      	mov	r5, r0
    e5e8:	4648      	mov	r0, r9
    e5ea:	f7f2 f962 	bl	8b2 <TfLiteTypeGetName>
    e5ee:	4b58      	ldr	r3, [pc, #352]	; (e750 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x224>)
    e5f0:	9301      	str	r3, [sp, #4]
    e5f2:	4b52      	ldr	r3, [pc, #328]	; (e73c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e5f4:	9300      	str	r3, [sp, #0]
    e5f6:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e5fa:	2330      	movs	r3, #48	; 0x30
    e5fc:	e7d6      	b.n	e5ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    e5fe:	692b      	ldr	r3, [r5, #16]
    e600:	f113 0f80 	cmn.w	r3, #128	; 0x80
    e604:	d00a      	beq.n	e61c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    e606:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    e60a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e60e:	4b51      	ldr	r3, [pc, #324]	; (e754 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x228>)
    e610:	9301      	str	r3, [sp, #4]
    e612:	4b48      	ldr	r3, [pc, #288]	; (e734 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e614:	9300      	str	r3, [sp, #0]
    e616:	6944      	ldr	r4, [r0, #20]
    e618:	2331      	movs	r3, #49	; 0x31
    e61a:	e7da      	b.n	e5d2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    e61c:	ed95 7a03 	vldr	s14, [r5, #12]
    e620:	eddf 7a4d 	vldr	s15, [pc, #308]	; e758 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
    e624:	eeb4 7a67 	vcmp.f32	s14, s15
    e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e62c:	d007      	beq.n	e63e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e62e:	4b4b      	ldr	r3, [pc, #300]	; (e75c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>)
    e630:	9300      	str	r3, [sp, #0]
    e632:	6944      	ldr	r4, [r0, #20]
    e634:	4a42      	ldr	r2, [pc, #264]	; (e740 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e636:	494a      	ldr	r1, [pc, #296]	; (e760 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
    e638:	2332      	movs	r3, #50	; 0x32
    e63a:	47a0      	blx	r4
    e63c:	e7ba      	b.n	e5b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    tflite::PreprocessSoftmaxScaling(
    e63e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    e642:	f7f2 fb11 	bl	c68 <__aeabi_f2d>
    e646:	ec41 0b18 	vmov	d8, r0, r1
    e64a:	f8da 0000 	ldr.w	r0, [sl]
    e64e:	f7f2 fb0b 	bl	c68 <__aeabi_f2d>
    e652:	eeb0 1a48 	vmov.f32	s2, s16
    e656:	eef0 1a68 	vmov.f32	s3, s17
    e65a:	ec41 0b10 	vmov	d0, r0, r1
    e65e:	aa05      	add	r2, sp, #20
    e660:	a908      	add	r1, sp, #32
    e662:	2005      	movs	r0, #5
    e664:	f7f2 fed4 	bl	1410 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
    op_data->input_left_shift = input_left_shift;
    e668:	9905      	ldr	r1, [sp, #20]
    e66a:	9109      	str	r1, [sp, #36]	; 0x24
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    e66c:	221f      	movs	r2, #31
    e66e:	2005      	movs	r0, #5
    e670:	f00f fe9a 	bl	1e3a8 <_ZN6tflite20CalculateInputRadiusEiii>
    e674:	f7f2 fae6 	bl	c44 <__aeabi_i2d>
    e678:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
    e67c:	4619      	mov	r1, r3
    e67e:	f7f2 fde5 	bl	124c <__aeabi_d2iz>
    e682:	900c      	str	r0, [sp, #48]	; 0x30
  switch (input->type) {
    e684:	5df0      	ldrb	r0, [r6, r7]
    e686:	2803      	cmp	r0, #3
    e688:	d040      	beq.n	e70c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>
    e68a:	2809      	cmp	r0, #9
    e68c:	d03e      	beq.n	e70c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>
    e68e:	2801      	cmp	r0, #1
    e690:	d142      	bne.n	e718 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
      SoftmaxFloat(input, output, op_data);
    e692:	aa06      	add	r2, sp, #24
    e694:	4629      	mov	r1, r5
    e696:	4640      	mov	r0, r8
    e698:	f00e f8d4 	bl	1c844 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
    e69c:	f04f 0900 	mov.w	r9, #0
    e6a0:	e027      	b.n	e6f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    e6a2:	f1b9 0f01 	cmp.w	r9, #1
    e6a6:	d00f      	beq.n	e6c8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x19c>
    e6a8:	6946      	ldr	r6, [r0, #20]
    e6aa:	4648      	mov	r0, r9
    e6ac:	f7f2 f901 	bl	8b2 <TfLiteTypeGetName>
    e6b0:	4605      	mov	r5, r0
    e6b2:	2001      	movs	r0, #1
    e6b4:	f7f2 f8fd 	bl	8b2 <TfLiteTypeGetName>
    e6b8:	4b2a      	ldr	r3, [pc, #168]	; (e764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e6ba:	9301      	str	r3, [sp, #4]
    e6bc:	4b2a      	ldr	r3, [pc, #168]	; (e768 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    e6be:	9300      	str	r3, [sp, #0]
    e6c0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e6c4:	2342      	movs	r3, #66	; 0x42
    e6c6:	e771      	b.n	e5ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    e6c8:	5cf0      	ldrb	r0, [r6, r3]
    e6ca:	2801      	cmp	r0, #1
    e6cc:	d017      	beq.n	e6fe <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    e6ce:	6966      	ldr	r6, [r4, #20]
    e6d0:	f7f2 f8ef 	bl	8b2 <TfLiteTypeGetName>
    e6d4:	4605      	mov	r5, r0
    e6d6:	4648      	mov	r0, r9
    e6d8:	f7f2 f8eb 	bl	8b2 <TfLiteTypeGetName>
    e6dc:	4b21      	ldr	r3, [pc, #132]	; (e764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e6de:	9301      	str	r3, [sp, #4]
    e6e0:	4b16      	ldr	r3, [pc, #88]	; (e73c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e6e2:	9300      	str	r3, [sp, #0]
    e6e4:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e6e8:	4a15      	ldr	r2, [pc, #84]	; (e740 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e6ea:	4916      	ldr	r1, [pc, #88]	; (e744 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    e6ec:	2343      	movs	r3, #67	; 0x43
    e6ee:	4620      	mov	r0, r4
    e6f0:	47b0      	blx	r6
}
    e6f2:	4648      	mov	r0, r9
    e6f4:	b014      	add	sp, #80	; 0x50
    e6f6:	ecbd 8b02 	vpop	{d8}
    e6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_data->beta = static_cast<double>(params->beta);
    e6fe:	f8da 0000 	ldr.w	r0, [sl]
    e702:	f7f2 fab1 	bl	c68 <__aeabi_f2d>
    e706:	e9cd 0106 	strd	r0, r1, [sp, #24]
  TF_LITE_ENSURE_STATUS(
    e70a:	e7bb      	b.n	e684 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x158>
      SoftmaxQuantized(input, output, op_data);
    e70c:	aa06      	add	r2, sp, #24
    e70e:	4629      	mov	r1, r5
    e710:	4640      	mov	r0, r8
    e712:	f00e f9f0 	bl	1caf6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
    e716:	e7c1      	b.n	e69c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e718:	6965      	ldr	r5, [r4, #20]
    e71a:	f7f2 f8ca 	bl	8b2 <TfLiteTypeGetName>
    e71e:	5df3      	ldrb	r3, [r6, r7]
    e720:	4912      	ldr	r1, [pc, #72]	; (e76c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x240>)
    e722:	4602      	mov	r2, r0
    e724:	4620      	mov	r0, r4
    e726:	47a8      	blx	r5
    e728:	e744      	b.n	e5b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    e72a:	bf00      	nop
    e72c:	ffff8000 	.word	0xffff8000
    e730:	0002bffd 	.word	0x0002bffd
    e734:	0002b968 	.word	0x0002b968
    e738:	0002bff0 	.word	0x0002bff0
    e73c:	0002b75c 	.word	0x0002b75c
    e740:	0002bfad 	.word	0x0002bfad
    e744:	0002af8a 	.word	0x0002af8a
    e748:	0002c745 	.word	0x0002c745
    e74c:	0002af4f 	.word	0x0002af4f
    e750:	0002c26e 	.word	0x0002c26e
    e754:	0002c004 	.word	0x0002c004
    e758:	3b800000 	.word	0x3b800000
    e75c:	0002c009 	.word	0x0002c009
    e760:	0002a6ae 	.word	0x0002a6ae
    e764:	0002afa4 	.word	0x0002afa4
    e768:	0002b774 	.word	0x0002b774
    e76c:	0002aea3 	.word	0x0002aea3

0000e770 <_ZN6tflite3ops5micro14Register_SPLITEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e770:	4800      	ldr	r0, [pc, #0]	; (e774 <_ZN6tflite3ops5micro14Register_SPLITEv+0x4>)
    e772:	4770      	bx	lr
    e774:	20000628 	.word	0x20000628

0000e778 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const TfLiteTensor* axis = GetInput(context, node, 0);
    e77a:	680a      	ldr	r2, [r1, #0]
    e77c:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    e77e:	6853      	ldr	r3, [r2, #4]
    e780:	eb07 1383 	add.w	r3, r7, r3, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e784:	4605      	mov	r5, r0
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
    e786:	7d1c      	ldrb	r4, [r3, #20]
    e788:	2c01      	cmp	r4, #1
    e78a:	d006      	beq.n	e79a <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x22>
    e78c:	6943      	ldr	r3, [r0, #20]
    e78e:	4927      	ldr	r1, [pc, #156]	; (e82c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
    e790:	4798      	blx	r3
    e792:	2401      	movs	r4, #1
}
    e794:	4620      	mov	r0, r4
    e796:	b003      	add	sp, #12
    e798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e79a:	6892      	ldr	r2, [r2, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
    e79c:	685b      	ldr	r3, [r3, #4]
    e79e:	ea4f 1c82 	mov.w	ip, r2, lsl #6
    e7a2:	eb07 1282 	add.w	r2, r7, r2, lsl #6
    e7a6:	681b      	ldr	r3, [r3, #0]
  if (axis_value < 0) {
    e7a8:	6896      	ldr	r6, [r2, #8]
    e7aa:	2b00      	cmp	r3, #0
    e7ac:	6836      	ldr	r6, [r6, #0]
    e7ae:	da09      	bge.n	e7c4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
  TF_LITE_ENSURE(context, axis_value >= 0);
    e7b0:	199b      	adds	r3, r3, r6
    e7b2:	d507      	bpl.n	e7c4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    e7b4:	4b1e      	ldr	r3, [pc, #120]	; (e830 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
    e7b6:	9300      	str	r3, [sp, #0]
    e7b8:	6945      	ldr	r5, [r0, #20]
    e7ba:	4a1e      	ldr	r2, [pc, #120]	; (e834 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    e7bc:	491e      	ldr	r1, [pc, #120]	; (e838 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    e7be:	2353      	movs	r3, #83	; 0x53
    e7c0:	47a8      	blx	r5
    e7c2:	e7e7      	b.n	e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
    e7c4:	429e      	cmp	r6, r3
    e7c6:	dc08      	bgt.n	e7da <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x62>
    e7c8:	4b1c      	ldr	r3, [pc, #112]	; (e83c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
    e7ca:	9300      	str	r3, [sp, #0]
    e7cc:	696e      	ldr	r6, [r5, #20]
    e7ce:	4a19      	ldr	r2, [pc, #100]	; (e834 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    e7d0:	4919      	ldr	r1, [pc, #100]	; (e838 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    e7d2:	2354      	movs	r3, #84	; 0x54
    e7d4:	4628      	mov	r0, r5
    e7d6:	47b0      	blx	r6
    e7d8:	e7dc      	b.n	e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  switch (input->type) {
    e7da:	f817 000c 	ldrb.w	r0, [r7, ip]
    e7de:	1e46      	subs	r6, r0, #1
    e7e0:	2e08      	cmp	r6, #8
    e7e2:	d81b      	bhi.n	e81c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    e7e4:	e8df f006 	tbb	[pc, r6]
    e7e8:	1a0a1605 	.word	0x1a0a1605
    e7ec:	1a121a1a 	.word	0x1a121a1a
    e7f0:	0e          	.byte	0x0e
    e7f1:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
    e7f2:	4628      	mov	r0, r5
    e7f4:	f00e f9c9 	bl	1cb8a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
    e7f8:	4604      	mov	r4, r0
    e7fa:	e7cb      	b.n	e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    e7fc:	4628      	mov	r0, r5
    e7fe:	f00e fa54 	bl	1ccaa <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e802:	e7f9      	b.n	e7f8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int8_t>(context, node, input, axis_value);
    e804:	4628      	mov	r0, r5
    e806:	f00e facb 	bl	1cda0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e80a:	e7f5      	b.n	e7f8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int16_t>(context, node, input, axis_value);
    e80c:	4628      	mov	r0, r5
    e80e:	f00e fb42 	bl	1ce96 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e812:	e7f1      	b.n	e7f8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int32_t>(context, node, input, axis_value);
    e814:	4628      	mov	r0, r5
    e816:	f00e fbc9 	bl	1cfac <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e81a:	e7ed      	b.n	e7f8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s currently not supported.",
    e81c:	696e      	ldr	r6, [r5, #20]
    e81e:	f7f2 f848 	bl	8b2 <TfLiteTypeGetName>
    e822:	4907      	ldr	r1, [pc, #28]	; (e840 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
    e824:	4602      	mov	r2, r0
    e826:	4628      	mov	r0, r5
    e828:	47b0      	blx	r6
      return kTfLiteError;
    e82a:	e7b3      	b.n	e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    e82c:	0002c02b 	.word	0x0002c02b
    e830:	0002c0a0 	.word	0x0002c0a0
    e834:	0002c079 	.word	0x0002c079
    e838:	0002a6ae 	.word	0x0002a6ae
    e83c:	0002c0b0 	.word	0x0002c0b0
    e840:	0002c0d2 	.word	0x0002c0d2

0000e844 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
    e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  using ::tflite::strided_slice::StartForAxis;
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
    e848:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
    e84a:	b0a1      	sub	sp, #132	; 0x84
    e84c:	460e      	mov	r6, r1
    e84e:	4604      	mov	r4, r0
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
    e850:	a80b      	add	r0, sp, #44	; 0x2c
  TfLiteIntArray* output_shape = op_context->output->dims;
    e852:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
    e856:	f00e fcf6 	bl	1d246 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
    e85a:	6871      	ldr	r1, [r6, #4]
    e85c:	a805      	add	r0, sp, #20
    e85e:	f007 f869 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e862:	2500      	movs	r5, #0
    e864:	f8d6 9018 	ldr.w	r9, [r6, #24]
  int shape_size = 0;
    e868:	462f      	mov	r7, r5
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e86a:	45a9      	cmp	r9, r5
    e86c:	dd4d      	ble.n	e90a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
    e86e:	6933      	ldr	r3, [r6, #16]
    e870:	b103      	cbz	r3, e874 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
    e872:	685b      	ldr	r3, [r3, #4]
    e874:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
    e878:	f1bb 0f00 	cmp.w	fp, #0
    e87c:	d10b      	bne.n	e896 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
    e87e:	6963      	ldr	r3, [r4, #20]
    e880:	4929      	ldr	r1, [pc, #164]	; (e928 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
    e882:	4620      	mov	r0, r4
    e884:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e886:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
    e888:	a805      	add	r0, sp, #20
    e88a:	f007 f80e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
    e88e:	4620      	mov	r0, r4
    e890:	b021      	add	sp, #132	; 0x84
    e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
    e896:	462a      	mov	r2, r5
    e898:	a905      	add	r1, sp, #20
    e89a:	a80b      	add	r0, sp, #44	; 0x2c
    e89c:	f00e fc59 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
    e8a0:	462a      	mov	r2, r5
    e8a2:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
    e8a4:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
    e8a6:	a905      	add	r1, sp, #20
    e8a8:	a80b      	add	r0, sp, #44	; 0x2c
    e8aa:	f00e fc77 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
    e8ae:	6833      	ldr	r3, [r6, #0]
    e8b0:	691b      	ldr	r3, [r3, #16]
    e8b2:	412b      	asrs	r3, r5
    if (shrink_axis) {
    e8b4:	07db      	lsls	r3, r3, #31
    e8b6:	d426      	bmi.n	e906 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
    e8b8:	eba0 000a 	sub.w	r0, r0, sl
    e8bc:	ee07 0a90 	vmov	s15, r0
    e8c0:	ee07 ba10 	vmov	s14, fp
    e8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e8c8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
  { return __builtin_ceilf(__x); }
    e8cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
    e8d0:	f003 fb96 	bl	12000 <ceilf>
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
    e8d4:	eb08 0287 	add.w	r2, r8, r7, lsl #2
    e8d8:	6852      	ldr	r2, [r2, #4]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
    e8da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    e8de:	ee17 3a90 	vmov	r3, s15
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
    e8e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
    e8e6:	429a      	cmp	r2, r3
    e8e8:	d00c      	beq.n	e904 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
    e8ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e8ee:	4b0f      	ldr	r3, [pc, #60]	; (e92c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
    e8f0:	9301      	str	r3, [sp, #4]
    e8f2:	4b0f      	ldr	r3, [pc, #60]	; (e930 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
    e8f4:	9300      	str	r3, [sp, #0]
    e8f6:	6965      	ldr	r5, [r4, #20]
    e8f8:	2373      	movs	r3, #115	; 0x73
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e8fa:	4a0e      	ldr	r2, [pc, #56]	; (e934 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
    e8fc:	490e      	ldr	r1, [pc, #56]	; (e938 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
    e8fe:	4620      	mov	r0, r4
    e900:	47a8      	blx	r5
    e902:	e7c0      	b.n	e886 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
    e904:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e906:	3501      	adds	r5, #1
    e908:	e7af      	b.n	e86a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e90a:	f8d8 3000 	ldr.w	r3, [r8]
    e90e:	42bb      	cmp	r3, r7
    e910:	d008      	beq.n	e924 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
    e912:	e9cd 3702 	strd	r3, r7, [sp, #8]
    e916:	4b09      	ldr	r3, [pc, #36]	; (e93c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
    e918:	9301      	str	r3, [sp, #4]
    e91a:	4b09      	ldr	r3, [pc, #36]	; (e940 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
    e91c:	9300      	str	r3, [sp, #0]
    e91e:	6965      	ldr	r5, [r4, #20]
    e920:	2377      	movs	r3, #119	; 0x77
    e922:	e7ea      	b.n	e8fa <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
    e924:	2400      	movs	r4, #0
    e926:	e7af      	b.n	e888 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
    e928:	0002c0f3 	.word	0x0002c0f3
    e92c:	0002c171 	.word	0x0002c171
    e930:	0002c17b 	.word	0x0002c17b
    e934:	0002c142 	.word	0x0002c142
    e938:	0002af4f 	.word	0x0002af4f
    e93c:	0002c19a 	.word	0x0002c19a
    e940:	0002c1a5 	.word	0x0002c1a5

0000e944 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e944:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    e946:	680b      	ldr	r3, [r1, #0]
    e948:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
    e94a:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e94c:	b08c      	sub	sp, #48	; 0x30
    e94e:	4605      	mov	r5, r0
    e950:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
    e952:	d00e      	beq.n	e972 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    e954:	2204      	movs	r2, #4
    e956:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e95a:	4b15      	ldr	r3, [pc, #84]	; (e9b0 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
    e95c:	9301      	str	r3, [sp, #4]
    e95e:	4b15      	ldr	r3, [pc, #84]	; (e9b4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e960:	9300      	str	r3, [sp, #0]
    e962:	6944      	ldr	r4, [r0, #20]
    e964:	237c      	movs	r3, #124	; 0x7c
    e966:	4a14      	ldr	r2, [pc, #80]	; (e9b8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    e968:	4914      	ldr	r1, [pc, #80]	; (e9bc <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e96a:	47a0      	blx	r4
    e96c:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
    e96e:	b00c      	add	sp, #48	; 0x30
    e970:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    e972:	684b      	ldr	r3, [r1, #4]
    e974:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    e976:	2c01      	cmp	r4, #1
    e978:	d009      	beq.n	e98e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    e97a:	2601      	movs	r6, #1
    e97c:	4b10      	ldr	r3, [pc, #64]	; (e9c0 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e97e:	9301      	str	r3, [sp, #4]
    e980:	e9cd 4602 	strd	r4, r6, [sp, #8]
    e984:	4b0f      	ldr	r3, [pc, #60]	; (e9c4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    e986:	9300      	str	r3, [sp, #0]
    e988:	6944      	ldr	r4, [r0, #20]
    e98a:	237d      	movs	r3, #125	; 0x7d
    e98c:	e7eb      	b.n	e966 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
    e98e:	4601      	mov	r1, r0
    e990:	a805      	add	r0, sp, #20
    e992:	f00e fc3a 	bl	1d20a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
    e996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e998:	2b04      	cmp	r3, #4
    e99a:	dd04      	ble.n	e9a6 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    e99c:	696b      	ldr	r3, [r5, #20]
    e99e:	490a      	ldr	r1, [pc, #40]	; (e9c8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    e9a0:	4628      	mov	r0, r5
    e9a2:	4798      	blx	r3
    e9a4:	e7e2      	b.n	e96c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
    e9a6:	a905      	add	r1, sp, #20
    e9a8:	4628      	mov	r0, r5
    e9aa:	f7ff ff4b 	bl	e844 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
    e9ae:	e7de      	b.n	e96e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    e9b0:	0002c203 	.word	0x0002c203
    e9b4:	0002af69 	.word	0x0002af69
    e9b8:	0002c142 	.word	0x0002c142
    e9bc:	0002af4f 	.word	0x0002af4f
    e9c0:	0002bbe9 	.word	0x0002bbe9
    e9c4:	0002af79 	.word	0x0002af79
    e9c8:	0002c1b8 	.word	0x0002c1b8

0000e9cc <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    e9cc:	4800      	ldr	r0, [pc, #0]	; (e9d0 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x4>)
    e9ce:	4770      	bx	lr
    e9d0:	20000648 	.word	0x20000648

0000e9d4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e9d4:	b530      	push	{r4, r5, lr}
    e9d6:	b0ab      	sub	sp, #172	; 0xac
    e9d8:	460a      	mov	r2, r1
    e9da:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
    e9dc:	4601      	mov	r1, r0
    e9de:	a80e      	add	r0, sp, #56	; 0x38
    e9e0:	f00e fc13 	bl	1d20a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
    e9e4:	a90e      	add	r1, sp, #56	; 0x38
    e9e6:	a815      	add	r0, sp, #84	; 0x54
    e9e8:	f00e fc2d 	bl	1d246 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
    e9ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e9ee:	7808      	ldrb	r0, [r1, #0]
    e9f0:	2803      	cmp	r0, #3
    e9f2:	d020      	beq.n	ea36 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
    e9f4:	2809      	cmp	r0, #9
    e9f6:	d033      	beq.n	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
    e9f8:	2801      	cmp	r0, #1
    e9fa:	d146      	bne.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
    e9fc:	a802      	add	r0, sp, #8
    e9fe:	f006 ff99 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ea04:	b104      	cbz	r4, ea08 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
    ea06:	6864      	ldr	r4, [r4, #4]
    ea08:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea0a:	a808      	add	r0, sp, #32
    ea0c:	f006 ff92 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea12:	b103      	cbz	r3, ea16 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
    ea14:	685b      	ldr	r3, [r3, #4]
    ea16:	9300      	str	r3, [sp, #0]
    ea18:	4622      	mov	r2, r4
    ea1a:	ab08      	add	r3, sp, #32
    ea1c:	a902      	add	r1, sp, #8
    ea1e:	a815      	add	r0, sp, #84	; 0x54
    ea20:	f00e fc40 	bl	1d2a4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
    ea24:	a808      	add	r0, sp, #32
    ea26:	f006 ff40 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    ea2a:	a802      	add	r0, sp, #8
    ea2c:	f006 ff3d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    ea30:	2000      	movs	r0, #0
}
    ea32:	b02b      	add	sp, #172	; 0xac
    ea34:	bd30      	pop	{r4, r5, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
    ea36:	a802      	add	r0, sp, #8
    ea38:	f006 ff7c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ea3e:	b104      	cbz	r4, ea42 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x6e>
    ea40:	6864      	ldr	r4, [r4, #4]
    ea42:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea44:	a808      	add	r0, sp, #32
    ea46:	f006 ff75 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea4c:	b103      	cbz	r3, ea50 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
    ea4e:	685b      	ldr	r3, [r3, #4]
    ea50:	9300      	str	r3, [sp, #0]
    ea52:	4622      	mov	r2, r4
    ea54:	ab08      	add	r3, sp, #32
    ea56:	a902      	add	r1, sp, #8
    ea58:	a815      	add	r0, sp, #84	; 0x54
    ea5a:	f00e fd3e 	bl	1d4da <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
    ea5e:	e7e1      	b.n	ea24 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
    ea60:	a802      	add	r0, sp, #8
    ea62:	f006 ff67 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ea68:	b104      	cbz	r4, ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
    ea6a:	6864      	ldr	r4, [r4, #4]
    ea6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea6e:	a808      	add	r0, sp, #32
    ea70:	f006 ff60 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea76:	b103      	cbz	r3, ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
    ea78:	685b      	ldr	r3, [r3, #4]
    ea7a:	9300      	str	r3, [sp, #0]
    ea7c:	4622      	mov	r2, r4
    ea7e:	ab08      	add	r3, sp, #32
    ea80:	a902      	add	r1, sp, #8
    ea82:	a815      	add	r0, sp, #84	; 0x54
    ea84:	f00e fe42 	bl	1d70c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
    ea88:	e7cc      	b.n	ea24 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    ea8a:	6965      	ldr	r5, [r4, #20]
    ea8c:	f7f1 ff11 	bl	8b2 <TfLiteTypeGetName>
    ea90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ea92:	4903      	ldr	r1, [pc, #12]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea94:	781b      	ldrb	r3, [r3, #0]
    ea96:	4602      	mov	r2, r0
    ea98:	4620      	mov	r0, r4
    ea9a:	47a8      	blx	r5
      return kTfLiteError;
    ea9c:	2001      	movs	r0, #1
    ea9e:	e7c8      	b.n	ea32 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
    eaa0:	0002aea3 	.word	0x0002aea3

0000eaa4 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteSubParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
    eaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eaa8:	ed2d 8b06 	vpush	{d8-d10}
    eaac:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
    eab0:	4680      	mov	r8, r0
    eab2:	4689      	mov	r9, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eab4:	4610      	mov	r0, r2
    eab6:	4619      	mov	r1, r3
                             OpData* data) {
    eab8:	461d      	mov	r5, r3
    eaba:	4616      	mov	r6, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eabc:	f00f fcd0 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eac0:	783b      	ldrb	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eac2:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eac6:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eac8:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eaca:	d001      	beq.n	ead0 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2c>
    eacc:	2b09      	cmp	r3, #9
    eace:	d15e      	bne.n	eb8e <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xea>
      if (__a < __b)
    ead0:	ed96 aa03 	vldr	s20, [r6, #12]
    ead4:	edd5 8a03 	vldr	s17, [r5, #12]
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale / twice_max_input_scale);
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale / twice_max_input_scale);
    const double real_output_multiplier =
        static_cast<double>(twice_max_input_scale /
    ead8:	eddf 7a2f 	vldr	s15, [pc, #188]	; eb98 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xf4>
    eadc:	ed97 7a03 	vldr	s14, [r7, #12]
    data->input1_offset = -input1->params.zero_point;
    eae0:	6933      	ldr	r3, [r6, #16]
        2 * std::max(input1->params.scale, input2->params.scale);
    eae2:	eeb4 aae8 	vcmpe.f32	s20, s17
    eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eaea:	bfb4      	ite	lt
    eaec:	eeb0 8a68 	vmovlt.f32	s16, s17
    eaf0:	eeb0 8a4a 	vmovge.f32	s16, s20
    eaf4:	ee38 8a08 	vadd.f32	s16, s16, s16
    data->input1_offset = -input1->params.zero_point;
    eaf8:	425b      	negs	r3, r3
        static_cast<double>(twice_max_input_scale /
    eafa:	ee68 7a27 	vmul.f32	s15, s16, s15
    data->input1_offset = -input1->params.zero_point;
    eafe:	62a3      	str	r3, [r4, #40]	; 0x28
    const double real_output_multiplier =
    eb00:	eec7 7a87 	vdiv.f32	s15, s15, s14
    data->input2_offset = -input2->params.zero_point;
    eb04:	692b      	ldr	r3, [r5, #16]
    eb06:	425b      	negs	r3, r3
    eb08:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
    eb0a:	693b      	ldr	r3, [r7, #16]
    eb0c:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
    eb0e:	2314      	movs	r3, #20
    eb10:	6263      	str	r3, [r4, #36]	; 0x24
                            ((1 << data->left_shift) * output->params.scale));

    QuantizeMultiplierSmallerThanOneExp(
    eb12:	1d26      	adds	r6, r4, #4
    eb14:	f104 0514 	add.w	r5, r4, #20
    const double real_output_multiplier =
    eb18:	ee17 0a90 	vmov	r0, s15
    eb1c:	f7f2 f8a4 	bl	c68 <__aeabi_f2d>
    const double real_input1_multiplier =
    eb20:	eeca 7a08 	vdiv.f32	s15, s20, s16
    const double real_output_multiplier =
    eb24:	ec41 0b19 	vmov	d9, r0, r1
    const double real_input1_multiplier =
    eb28:	ee17 0a90 	vmov	r0, s15
    eb2c:	f7f2 f89c 	bl	c68 <__aeabi_f2d>
    eb30:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    eb34:	4631      	mov	r1, r6
    eb36:	4628      	mov	r0, r5
    eb38:	f002 fe4a 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    const double real_input2_multiplier =
    eb3c:	eec8 7a88 	vdiv.f32	s15, s17, s16
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
    eb40:	f104 0608 	add.w	r6, r4, #8
    eb44:	f104 0518 	add.w	r5, r4, #24
    const double real_input2_multiplier =
    eb48:	ee17 0a90 	vmov	r0, s15
    eb4c:	f7f2 f88c 	bl	c68 <__aeabi_f2d>
    eb50:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    eb54:	4631      	mov	r1, r6
    eb56:	4628      	mov	r0, r5
    eb58:	f002 fe3a 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
    eb5c:	eeb0 0a49 	vmov.f32	s0, s18
    eb60:	eef0 0a69 	vmov.f32	s1, s19
    eb64:	f104 0120 	add.w	r1, r4, #32
    eb68:	f104 001c 	add.w	r0, r4, #28
    eb6c:	f002 fe30 	bl	117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    eb70:	f104 0310 	add.w	r3, r4, #16
    eb74:	930e      	str	r3, [sp, #56]	; 0x38
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
    eb76:	ecbd 8b06 	vpop	{d8-d10}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    eb7a:	f899 1000 	ldrb.w	r1, [r9]
    eb7e:	f104 030c 	add.w	r3, r4, #12
    eb82:	463a      	mov	r2, r7
    eb84:	4640      	mov	r0, r8
}
    eb86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    eb8a:	f002 be79 	b.w	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
    eb8e:	ecbd 8b06 	vpop	{d8-d10}
    eb92:	2000      	movs	r0, #0
    eb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb98:	35800000 	.word	0x35800000

0000eb9c <_ZN6tflite3ops5micro12Register_SUBEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    eb9c:	4800      	ldr	r0, [pc, #0]	; (eba0 <_ZN6tflite3ops5micro12Register_SUBEv+0x4>)
    eb9e:	4770      	bx	lr
    eba0:	20000668 	.word	0x20000668

0000eba4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
    eba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
    eba8:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
    ebaa:	b0d4      	sub	sp, #336	; 0x150
  if (activation == kTfLiteActRelu) {
    ebac:	2a01      	cmp	r2, #1
    ebae:	e9dd 655c 	ldrd	r6, r5, [sp, #368]	; 0x170
    ebb2:	9c5e      	ldr	r4, [sp, #376]	; 0x178
    ebb4:	d03a      	beq.n	ec2c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
  } else if (activation == kTfLiteActRelu6) {
    ebb6:	2a03      	cmp	r2, #3
    ebb8:	d03d      	beq.n	ec36 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x92>
    *activation_max = std::numeric_limits<T>::max();
    ebba:	ed9f 7a67 	vldr	s14, [pc, #412]	; ed58 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
    ebbe:	eddf 6a67 	vldr	s13, [pc, #412]	; ed5c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b8>
    ebc2:	2a02      	cmp	r2, #2
    ebc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ebc8:	bf18      	it	ne
    ebca:	eef0 7a47 	vmovne.f32	s15, s14
    ebce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    ebd2:	bf18      	it	ne
    ebd4:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
    ebd8:	781b      	ldrb	r3, [r3, #0]
  params->float_activation_min = min;
    ebda:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
  params->float_activation_max = max;
    ebde:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
    ebe2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    ebe6:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    ebea:	af36      	add	r7, sp, #216	; 0xd8
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
    ebec:	4631      	mov	r1, r6
  if (data->requires_broadcast) {
    ebee:	2b00      	cmp	r3, #0
    ebf0:	d074      	beq.n	ecdc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x138>
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
    ebf2:	a809      	add	r0, sp, #36	; 0x24
    ebf4:	f006 fe9e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ebf8:	b106      	cbz	r6, ebfc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
    ebfa:	6876      	ldr	r6, [r6, #4]
    ebfc:	4629      	mov	r1, r5
    ebfe:	a80f      	add	r0, sp, #60	; 0x3c
    ec00:	f006 fe98 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ec04:	b105      	cbz	r5, ec08 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
    ec06:	686d      	ldr	r5, [r5, #4]
    ec08:	4621      	mov	r1, r4
    ec0a:	a815      	add	r0, sp, #84	; 0x54
    ec0c:	f006 fe92 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ec10:	b104      	cbz	r4, ec14 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x70>
    ec12:	6864      	ldr	r4, [r4, #4]
    ec14:	9601      	str	r6, [sp, #4]
                             const RuntimeShape& input2_shape,
                             const float* input2_data,
                             const RuntimeShape& output_shape,
                             float* output_data) {
  ruy::profiler::ScopeLabel label("BroadcastSubSlow/float");
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
    ec16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec18:	9502      	str	r5, [sp, #8]
    ec1a:	2b05      	cmp	r3, #5
    ec1c:	f10d 0a04 	add.w	sl, sp, #4
    ec20:	ae02      	add	r6, sp, #8
    ec22:	ad03      	add	r5, sp, #12
    ec24:	602c      	str	r4, [r5, #0]
    ec26:	dd09      	ble.n	ec3c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x98>
    ec28:	f00f fcd3 	bl	1e5d2 <abort>
    *activation_max = std::numeric_limits<T>::max();
    ec2c:	eddf 7a4a 	vldr	s15, [pc, #296]	; ed58 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
    *activation_min = 0;
    ec30:	ed9f 7a4b 	vldr	s14, [pc, #300]	; ed60 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1bc>
    ec34:	e7d0      	b.n	ebd8 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x34>
    *activation_max = 6;
    ec36:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    ec3a:	e7f9      	b.n	ec30 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
    ec3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec3e:	2b05      	cmp	r3, #5
    ec40:	dcf2      	bgt.n	ec28 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
    ec42:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ec44:	2b05      	cmp	r3, #5
    ec46:	dcef      	bgt.n	ec28 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  NdArrayDesc<N> desc1;
  NdArrayDesc<N> desc2;
  NdArrayDesc<N> output_desc;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
    ec48:	464b      	mov	r3, r9
    ec4a:	4642      	mov	r2, r8
    ec4c:	a90f      	add	r1, sp, #60	; 0x3c
    ec4e:	a809      	add	r0, sp, #36	; 0x24
    ec50:	f00b fc2d 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
    ec54:	2301      	movs	r3, #1
    ec56:	aa15      	add	r2, sp, #84	; 0x54
    ec58:	2105      	movs	r1, #5
    ec5a:	a81b      	add	r0, sp, #108	; 0x6c
    ec5c:	f006 fec5 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
    ec60:	4639      	mov	r1, r7
    ec62:	a81b      	add	r0, sp, #108	; 0x6c
    ec64:	f00b fc0d 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

// Execute the calc function in the innermost iteration based on the shape of
// the output. The calc function should take a single argument of type int[N].
template <int N, typename Calc>
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
  int indexes[N] = {0};
    ec68:	2400      	movs	r4, #0
    ec6a:	a81b      	add	r0, sp, #108	; 0x6c
    ec6c:	f006 fe1d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  auto sub_func = [&](int indexes[N]) {
    ec70:	e9cd 571b 	strd	r5, r7, [sp, #108]	; 0x6c
    ec74:	e9cd a81d 	strd	sl, r8, [sp, #116]	; 0x74
    ec78:	e9cd 691f 	strd	r6, r9, [sp, #124]	; 0x7c
    ec7c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    ec80:	ab40      	add	r3, sp, #256	; 0x100
    ec82:	9321      	str	r3, [sp, #132]	; 0x84
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
    ec84:	9404      	str	r4, [sp, #16]
    ec86:	9a04      	ldr	r2, [sp, #16]
    ec88:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    ec8a:	429a      	cmp	r2, r3
    ec8c:	da1a      	bge.n	ecc4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x120>
    ec8e:	9405      	str	r4, [sp, #20]
    ec90:	9a05      	ldr	r2, [sp, #20]
    ec92:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    ec94:	429a      	cmp	r2, r3
    ec96:	da11      	bge.n	ecbc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x118>
    ec98:	9406      	str	r4, [sp, #24]
    ec9a:	9a06      	ldr	r2, [sp, #24]
    ec9c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    ec9e:	429a      	cmp	r2, r3
    eca0:	da08      	bge.n	ecb4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x110>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
    eca2:	aa04      	add	r2, sp, #16
    eca4:	a91b      	add	r1, sp, #108	; 0x6c
    eca6:	4638      	mov	r0, r7
    eca8:	f00f f8cf 	bl	1de4a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
    ecac:	9b06      	ldr	r3, [sp, #24]
    ecae:	3301      	adds	r3, #1
    ecb0:	9306      	str	r3, [sp, #24]
    ecb2:	e7f2      	b.n	ec9a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xf6>
    ecb4:	9b05      	ldr	r3, [sp, #20]
    ecb6:	3301      	adds	r3, #1
    ecb8:	9305      	str	r3, [sp, #20]
    ecba:	e7e9      	b.n	ec90 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xec>
    ecbc:	9b04      	ldr	r3, [sp, #16]
    ecbe:	3301      	adds	r3, #1
    ecc0:	9304      	str	r3, [sp, #16]
    ecc2:	e7e0      	b.n	ec86 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xe2>
    ecc4:	a815      	add	r0, sp, #84	; 0x54
    ecc6:	f006 fdf0 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    ecca:	a80f      	add	r0, sp, #60	; 0x3c
    eccc:	f006 fded 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    ecd0:	a809      	add	r0, sp, #36	; 0x24
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
    ecd2:	f006 fdea 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
    ecd6:	b054      	add	sp, #336	; 0x150
    ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
    ecdc:	4640      	mov	r0, r8
    ecde:	f006 fe29 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ece2:	b106      	cbz	r6, ece6 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x142>
    ece4:	6876      	ldr	r6, [r6, #4]
    ece6:	4629      	mov	r1, r5
    ece8:	4648      	mov	r0, r9
    ecea:	f006 fe23 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ecee:	b105      	cbz	r5, ecf2 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14e>
    ecf0:	686d      	ldr	r5, [r5, #4]
    ecf2:	4621      	mov	r1, r4
    ecf4:	4638      	mov	r0, r7
    ecf6:	f006 fe1d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ecfa:	b104      	cbz	r4, ecfe <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x15a>
    ecfc:	6864      	ldr	r4, [r4, #4]
                              const RuntimeShape& input2_shape,
                              const float* input2_data,
                              const RuntimeShape& output_shape,
                              float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
    ecfe:	463a      	mov	r2, r7
    ed00:	4649      	mov	r1, r9
    ed02:	4640      	mov	r0, r8
    ed04:	f006 fec0 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; ++i) {
    ed08:	2300      	movs	r3, #0
    ed0a:	4298      	cmp	r0, r3
    ed0c:	dd1b      	ble.n	ed46 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a2>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] - input2_data[i], params.float_activation_min,
    ed0e:	ecb5 7a01 	vldmia	r5!, {s14}
    ed12:	ecf6 7a01 	vldmia	r6!, {s15}
    output_data[i] = ActivationFunctionWithMinMax(
    ed16:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ed1a:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
    ed1e:	eef4 7ac7 	vcmpe.f32	s15, s14
    ed22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed26:	bfb8      	it	lt
    ed28:	eef0 7a47 	vmovlt.f32	s15, s14
    ed2c:	ed9d 7a4e 	vldr	s14, [sp, #312]	; 0x138
    ed30:	eef4 7ac7 	vcmpe.f32	s15, s14
    ed34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed38:	bf88      	it	hi
    ed3a:	eef0 7a47 	vmovhi.f32	s15, s14
    ed3e:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    ed42:	3301      	adds	r3, #1
    ed44:	e7e1      	b.n	ed0a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x166>
    ed46:	4638      	mov	r0, r7
    ed48:	f006 fdaf 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    ed4c:	4648      	mov	r0, r9
    ed4e:	f006 fdac 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    ed52:	4640      	mov	r0, r8
    ed54:	e7bd      	b.n	ecd2 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x12e>
    ed56:	bf00      	nop
    ed58:	7f7fffff 	.word	0x7f7fffff
    ed5c:	ff7fffff 	.word	0xff7fffff
    ed60:	00000000 	.word	0x00000000

0000ed64 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed68:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    ed6a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    ed6e:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);
    ed70:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    ed72:	685a      	ldr	r2, [r3, #4]
    ed74:	689b      	ldr	r3, [r3, #8]
    ed76:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
    ed7a:	6872      	ldr	r2, [r6, #4]
    ed7c:	6857      	ldr	r7, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ed7e:	b095      	sub	sp, #84	; 0x54
    ed80:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
    ed84:	f10d 0a1c 	add.w	sl, sp, #28
    ed88:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    ed8c:	eb08 1383 	add.w	r3, r8, r3, lsl #6
    ed90:	e9cd 7a00 	strd	r7, sl, [sp]
    ed94:	464a      	mov	r2, r9
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ed96:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
    ed98:	9305      	str	r3, [sp, #20]
    ed9a:	9104      	str	r1, [sp, #16]
    ed9c:	f7ff fe82 	bl	eaa4 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
    eda0:	4604      	mov	r4, r0
    eda2:	b978      	cbnz	r0, edc4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
    eda4:	f818 000b 	ldrb.w	r0, [r8, fp]
    eda8:	2801      	cmp	r0, #1
    edaa:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    edae:	d10d      	bne.n	edcc <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalSub(context, node, params, &data, input1, input2, output);
    edb0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    edb4:	460a      	mov	r2, r1
    edb6:	f8cd 9000 	str.w	r9, [sp]
    edba:	4653      	mov	r3, sl
    edbc:	4631      	mov	r1, r6
    edbe:	4628      	mov	r0, r5
    edc0:	f7ff fef0 	bl	eba4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
    edc4:	4620      	mov	r0, r4
    edc6:	b015      	add	sp, #84	; 0x54
    edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    edcc:	2803      	cmp	r0, #3
    edce:	d001      	beq.n	edd4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    edd0:	2809      	cmp	r0, #9
    edd2:	d10b      	bne.n	edec <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalSubQuantized(context, node, params, &data,
    edd4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    edd8:	460a      	mov	r2, r1
    edda:	f8cd 9000 	str.w	r9, [sp]
    edde:	4653      	mov	r3, sl
    ede0:	4631      	mov	r1, r6
    ede2:	4628      	mov	r0, r5
    ede4:	f00f f823 	bl	1de2e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
    ede8:	4604      	mov	r4, r0
    edea:	e7eb      	b.n	edc4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    edec:	696c      	ldr	r4, [r5, #20]
    edee:	f7f1 fd60 	bl	8b2 <TfLiteTypeGetName>
    edf2:	f818 300b 	ldrb.w	r3, [r8, fp]
    edf6:	4903      	ldr	r1, [pc, #12]	; (ee04 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
    edf8:	4602      	mov	r2, r0
    edfa:	4628      	mov	r0, r5
    edfc:	47a0      	blx	r4
    return kTfLiteError;
    edfe:	2401      	movs	r4, #1
    ee00:	e7e0      	b.n	edc4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    ee02:	bf00      	nop
    ee04:	0002aea3 	.word	0x0002aea3

0000ee08 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee0c:	ed2d 8b04 	vpush	{d8-d9}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ee10:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ee12:	b08d      	sub	sp, #52	; 0x34
    ee14:	4604      	mov	r4, r0
    ee16:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ee18:	b90a      	cbnz	r2, ee1e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
    ee1a:	f00f fbda 	bl	1e5d2 <abort>
  // [1] = Weights Feature, {2, num_filters, input_size}
  // [2] = Weights Time, {2, num_filters, memory_size}
  // [3] = Bias (optional), {1, num_units}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ee1e:	f8d1 c000 	ldr.w	ip, [r1]
    ee22:	6883      	ldr	r3, [r0, #8]
    ee24:	f8dc 1008 	ldr.w	r1, [ip, #8]
    ee28:	0188      	lsls	r0, r1, #6
    ee2a:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    ee2e:	9107      	str	r1, [sp, #28]
  const bool use_tensor = index < node->inputs->size &&
    ee30:	f8dc 1000 	ldr.w	r1, [ip]
  return &context->tensors[node->inputs->data[index]];
    ee34:	900b      	str	r0, [sp, #44]	; 0x2c
  const bool use_tensor = index < node->inputs->size &&
    ee36:	2903      	cmp	r1, #3
    ee38:	9106      	str	r1, [sp, #24]
    ee3a:	dd24      	ble.n	ee86 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    ee3c:	f8dc 1010 	ldr.w	r1, [ip, #16]
  const bool use_tensor = index < node->inputs->size &&
    ee40:	1c48      	adds	r0, r1, #1
    ee42:	d020      	beq.n	ee86 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    return &context->tensors[node->inputs->data[index]];
    ee44:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  const TfLiteTensor* activation_state =
      GetInput(context, node, kInputActivationStateTensor);

  // Define input constants based on input tensor definition above:
  const int rank = params->rank;
    ee48:	6810      	ldr	r0, [r2, #0]
  const int input_size = input->dims->data[1];
  const int batch_size = input->dims->data[0];
  const int num_filters = weights_feature->dims->data[0];
    ee4a:	9a07      	ldr	r2, [sp, #28]
    ee4c:	6892      	ldr	r2, [r2, #8]
    ee4e:	9204      	str	r2, [sp, #16]
    ee50:	6856      	ldr	r6, [r2, #4]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
    ee52:	fb96 f7f0 	sdiv	r7, r6, r0
    ee56:	fb00 6017 	mls	r0, r0, r7, r6
    ee5a:	b1b0      	cbz	r0, ee8a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
    ee5c:	2300      	movs	r3, #0
    ee5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
    ee62:	4ba7      	ldr	r3, [pc, #668]	; (f100 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    ee64:	9301      	str	r3, [sp, #4]
    ee66:	6965      	ldr	r5, [r4, #20]
    ee68:	4ba6      	ldr	r3, [pc, #664]	; (f104 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    ee6a:	9300      	str	r3, [sp, #0]
    ee6c:	f240 1377 	movw	r3, #375	; 0x177
    ee70:	4aa5      	ldr	r2, [pc, #660]	; (f108 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    ee72:	49a6      	ldr	r1, [pc, #664]	; (f10c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ee74:	4620      	mov	r0, r4
    ee76:	47a8      	blx	r5
    ee78:	2501      	movs	r5, #1
        &(data->scratch_tensor_index));
    TF_LITE_ENSURE_OK(context, scratch_status);
  }

  return kTfLiteOk;
}
    ee7a:	4628      	mov	r0, r5
    ee7c:	b00d      	add	sp, #52	; 0x34
    ee7e:	ecbd 8b04 	vpop	{d8-d9}
    ee82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
    ee86:	2100      	movs	r1, #0
    ee88:	e7de      	b.n	ee48 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  return &context->tensors[node->inputs->data[index]];
    ee8a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ee8e:	0185      	lsls	r5, r0, #6
    ee90:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    ee94:	9008      	str	r0, [sp, #32]
  TF_LITE_ENSURE(context,
    ee96:	5d58      	ldrb	r0, [r3, r5]
    ee98:	9005      	str	r0, [sp, #20]
    ee9a:	f000 05f7 	and.w	r5, r0, #247	; 0xf7
    ee9e:	2d01      	cmp	r5, #1
    eea0:	d009      	beq.n	eeb6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    eea2:	4b9b      	ldr	r3, [pc, #620]	; (f110 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    eea4:	9300      	str	r3, [sp, #0]
    eea6:	6965      	ldr	r5, [r4, #20]
    eea8:	4a97      	ldr	r2, [pc, #604]	; (f108 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    eeaa:	499a      	ldr	r1, [pc, #616]	; (f114 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    eeac:	f44f 73be 	mov.w	r3, #380	; 0x17c
    eeb0:	4620      	mov	r0, r4
    eeb2:	47a8      	blx	r5
    eeb4:	e7e0      	b.n	ee78 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  const int input_size = input->dims->data[1];
    eeb6:	9808      	ldr	r0, [sp, #32]
    eeb8:	6880      	ldr	r0, [r0, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    eeba:	f8d0 8000 	ldr.w	r8, [r0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
    eebe:	f1b8 0f02 	cmp.w	r8, #2
    eec2:	d00e      	beq.n	eee2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    eec4:	2302      	movs	r3, #2
    eec6:	e9cd 8302 	strd	r8, r3, [sp, #8]
    eeca:	4b93      	ldr	r3, [pc, #588]	; (f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    eecc:	9301      	str	r3, [sp, #4]
    eece:	6966      	ldr	r6, [r4, #20]
    eed0:	4b92      	ldr	r3, [pc, #584]	; (f11c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
    eed2:	9300      	str	r3, [sp, #0]
    eed4:	f44f 73bf 	mov.w	r3, #382	; 0x17e
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    eed8:	4a8b      	ldr	r2, [pc, #556]	; (f108 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    eeda:	498c      	ldr	r1, [pc, #560]	; (f10c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    eedc:	4620      	mov	r0, r4
    eede:	47b0      	blx	r6
    eee0:	e7cb      	b.n	ee7a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
    eee2:	f8d9 e004 	ldr.w	lr, [r9, #4]
    eee6:	f8de a000 	ldr.w	sl, [lr]
    eeea:	f1ba 0f01 	cmp.w	sl, #1
    eeee:	d009      	beq.n	ef04 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    eef0:	4b8b      	ldr	r3, [pc, #556]	; (f120 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
    eef2:	9301      	str	r3, [sp, #4]
    eef4:	4b8b      	ldr	r3, [pc, #556]	; (f124 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
    eef6:	9300      	str	r3, [sp, #0]
    eef8:	e9cd a502 	strd	sl, r5, [sp, #8]
    eefc:	6966      	ldr	r6, [r4, #20]
    eefe:	f44f 73c1 	mov.w	r3, #386	; 0x182
    ef02:	e7e9      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->outputs->data[index]];
    ef04:	f8de e004 	ldr.w	lr, [lr, #4]
    ef08:	ea4f 128e 	mov.w	r2, lr, lsl #6
    ef0c:	920a      	str	r2, [sp, #40]	; 0x28
    ef0e:	eb03 128e 	add.w	r2, r3, lr, lsl #6
    ef12:	9209      	str	r2, [sp, #36]	; 0x24
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
    ef14:	f8d2 a008 	ldr.w	sl, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    ef18:	f8da e000 	ldr.w	lr, [sl]
    ef1c:	f1be 0f02 	cmp.w	lr, #2
    ef20:	d009      	beq.n	ef36 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    ef22:	4b7d      	ldr	r3, [pc, #500]	; (f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    ef24:	9301      	str	r3, [sp, #4]
    ef26:	4b80      	ldr	r3, [pc, #512]	; (f128 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
    ef28:	9300      	str	r3, [sp, #0]
    ef2a:	e9cd e802 	strd	lr, r8, [sp, #8]
    ef2e:	6966      	ldr	r6, [r4, #20]
    ef30:	f44f 73c2 	mov.w	r3, #388	; 0x184
    ef34:	e7d0      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  const int batch_size = input->dims->data[0];
    ef36:	f8d0 8004 	ldr.w	r8, [r0, #4]
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
    ef3a:	f8da b004 	ldr.w	fp, [sl, #4]
    ef3e:	45c3      	cmp	fp, r8
    ef40:	d009      	beq.n	ef56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    ef42:	4b7a      	ldr	r3, [pc, #488]	; (f12c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
    ef44:	9301      	str	r3, [sp, #4]
    ef46:	4b7a      	ldr	r3, [pc, #488]	; (f130 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
    ef48:	9300      	str	r3, [sp, #0]
    ef4a:	e9cd b802 	strd	fp, r8, [sp, #8]
    ef4e:	6966      	ldr	r6, [r4, #20]
    ef50:	f240 1385 	movw	r3, #389	; 0x185
    ef54:	e7c0      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
    ef56:	f8da a008 	ldr.w	sl, [sl, #8]
    ef5a:	45ba      	cmp	sl, r7
    ef5c:	d009      	beq.n	ef72 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ef5e:	4b75      	ldr	r3, [pc, #468]	; (f134 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
    ef60:	9301      	str	r3, [sp, #4]
    ef62:	4b75      	ldr	r3, [pc, #468]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
    ef64:	9300      	str	r3, [sp, #0]
    ef66:	e9cd a702 	strd	sl, r7, [sp, #8]
    ef6a:	6966      	ldr	r6, [r4, #20]
    ef6c:	f44f 73c3 	mov.w	r3, #390	; 0x186
    ef70:	e7b2      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    ef72:	9a04      	ldr	r2, [sp, #16]
    ef74:	f8d2 a000 	ldr.w	sl, [r2]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
    ef78:	f1ba 0f02 	cmp.w	sl, #2
    ef7c:	d009      	beq.n	ef92 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
    ef7e:	4b66      	ldr	r3, [pc, #408]	; (f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    ef80:	9301      	str	r3, [sp, #4]
    ef82:	4b6e      	ldr	r3, [pc, #440]	; (f13c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
    ef84:	9300      	str	r3, [sp, #0]
    ef86:	e9cd ae02 	strd	sl, lr, [sp, #8]
    ef8a:	6966      	ldr	r6, [r4, #20]
    ef8c:	f240 1389 	movw	r3, #393	; 0x189
    ef90:	e7a2      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
    ef92:	9a04      	ldr	r2, [sp, #16]
  const int input_size = input->dims->data[1];
    ef94:	6880      	ldr	r0, [r0, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
    ef96:	6892      	ldr	r2, [r2, #8]
    ef98:	4282      	cmp	r2, r0
    ef9a:	d009      	beq.n	efb0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
    ef9c:	4b68      	ldr	r3, [pc, #416]	; (f140 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
    ef9e:	9301      	str	r3, [sp, #4]
    efa0:	4b68      	ldr	r3, [pc, #416]	; (f144 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
    efa2:	9300      	str	r3, [sp, #0]
    efa4:	e9cd 2002 	strd	r2, r0, [sp, #8]
    efa8:	6966      	ldr	r6, [r4, #20]
    efaa:	f44f 73c5 	mov.w	r3, #394	; 0x18a
    efae:	e793      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->inputs->data[index]];
    efb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    efb4:	ea4f 1e82 	mov.w	lr, r2, lsl #6
    efb8:	eb03 1282 	add.w	r2, r3, r2, lsl #6
    efbc:	9204      	str	r2, [sp, #16]
  const int memory_size = weights_time->dims->data[1];
    efbe:	6890      	ldr	r0, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    efc0:	6802      	ldr	r2, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
    efc2:	2a02      	cmp	r2, #2
    efc4:	d00a      	beq.n	efdc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
    efc6:	2302      	movs	r3, #2
    efc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    efcc:	4b52      	ldr	r3, [pc, #328]	; (f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    efce:	9301      	str	r3, [sp, #4]
    efd0:	4b5d      	ldr	r3, [pc, #372]	; (f148 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
    efd2:	9300      	str	r3, [sp, #0]
    efd4:	6966      	ldr	r6, [r4, #20]
    efd6:	f240 138d 	movw	r3, #397	; 0x18d
    efda:	e77d      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
    efdc:	6842      	ldr	r2, [r0, #4]
    efde:	42b2      	cmp	r2, r6
    efe0:	d009      	beq.n	eff6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    efe2:	4b5a      	ldr	r3, [pc, #360]	; (f14c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
    efe4:	9301      	str	r3, [sp, #4]
    efe6:	4b5a      	ldr	r3, [pc, #360]	; (f150 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
    efe8:	9300      	str	r3, [sp, #0]
    efea:	e9cd 2602 	strd	r2, r6, [sp, #8]
    efee:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    eff2:	6966      	ldr	r6, [r4, #20]
    eff4:	e770      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  if (bias != nullptr) {
    eff6:	b169      	cbz	r1, f014 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
    eff8:	688a      	ldr	r2, [r1, #8]
    effa:	6852      	ldr	r2, [r2, #4]
    effc:	42ba      	cmp	r2, r7
    effe:	d009      	beq.n	f014 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
    f000:	4b4c      	ldr	r3, [pc, #304]	; (f134 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
    f002:	9301      	str	r3, [sp, #4]
    f004:	4b53      	ldr	r3, [pc, #332]	; (f154 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
    f006:	9300      	str	r3, [sp, #0]
    f008:	e9cd 2702 	strd	r2, r7, [sp, #8]
    f00c:	6966      	ldr	r6, [r4, #20]
    f00e:	f240 1393 	movw	r3, #403	; 0x193
    f012:	e761      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->inputs->data[index]];
    f014:	f8dc 2014 	ldr.w	r2, [ip, #20]
    f018:	ea4f 1c82 	mov.w	ip, r2, lsl #6
    f01c:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
    f020:	f8d2 a008 	ldr.w	sl, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    f024:	f8da b000 	ldr.w	fp, [sl]
    f028:	f1bb 0f02 	cmp.w	fp, #2
    f02c:	d00a      	beq.n	f044 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>
    f02e:	2302      	movs	r3, #2
    f030:	e9cd b302 	strd	fp, r3, [sp, #8]
    f034:	4b38      	ldr	r3, [pc, #224]	; (f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    f036:	9301      	str	r3, [sp, #4]
    f038:	4b47      	ldr	r3, [pc, #284]	; (f158 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
    f03a:	9300      	str	r3, [sp, #0]
    f03c:	6966      	ldr	r6, [r4, #20]
    f03e:	f240 1397 	movw	r3, #407	; 0x197
    f042:	e749      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
    f044:	f8da b004 	ldr.w	fp, [sl, #4]
    f048:	45c3      	cmp	fp, r8
    f04a:	d009      	beq.n	f060 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    f04c:	4b37      	ldr	r3, [pc, #220]	; (f12c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
    f04e:	9301      	str	r3, [sp, #4]
    f050:	4b42      	ldr	r3, [pc, #264]	; (f15c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
    f052:	9300      	str	r3, [sp, #0]
    f054:	e9cd b802 	strd	fp, r8, [sp, #8]
    f058:	6966      	ldr	r6, [r4, #20]
    f05a:	f44f 73cc 	mov.w	r3, #408	; 0x198
    f05e:	e73b      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
    f060:	6880      	ldr	r0, [r0, #8]
    f062:	f8da a008 	ldr.w	sl, [sl, #8]
    f066:	4370      	muls	r0, r6
    f068:	4582      	cmp	sl, r0
    f06a:	d009      	beq.n	f080 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x278>
    f06c:	4b3c      	ldr	r3, [pc, #240]	; (f160 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x358>)
    f06e:	9301      	str	r3, [sp, #4]
    f070:	4b3c      	ldr	r3, [pc, #240]	; (f164 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
    f072:	9300      	str	r3, [sp, #0]
    f074:	e9cd a002 	strd	sl, r0, [sp, #8]
    f078:	6966      	ldr	r6, [r4, #20]
    f07a:	f240 1399 	movw	r3, #409	; 0x199
    f07e:	e72b      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
    f080:	9806      	ldr	r0, [sp, #24]
    f082:	2805      	cmp	r0, #5
    f084:	d00a      	beq.n	f09c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x294>
    f086:	2305      	movs	r3, #5
    f088:	9303      	str	r3, [sp, #12]
    f08a:	4b37      	ldr	r3, [pc, #220]	; (f168 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x360>)
    f08c:	9301      	str	r3, [sp, #4]
    f08e:	4b37      	ldr	r3, [pc, #220]	; (f16c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x364>)
    f090:	9300      	str	r3, [sp, #0]
    f092:	6966      	ldr	r6, [r4, #20]
    f094:	9002      	str	r0, [sp, #8]
    f096:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    f09a:	e71d      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  if (input->type == kTfLiteInt8) {
    f09c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f09e:	f813 a000 	ldrb.w	sl, [r3, r0]
    f0a2:	9805      	ldr	r0, [sp, #20]
    f0a4:	2809      	cmp	r0, #9
    f0a6:	f040 80f5 	bne.w	f294 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x48c>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);
    f0aa:	f1ba 0f09 	cmp.w	sl, #9
    f0ae:	d009      	beq.n	f0c4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    f0b0:	4b2f      	ldr	r3, [pc, #188]	; (f170 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x368>)
    f0b2:	9301      	str	r3, [sp, #4]
    f0b4:	4b2f      	ldr	r3, [pc, #188]	; (f174 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x36c>)
    f0b6:	9300      	str	r3, [sp, #0]
    f0b8:	e9cd a002 	strd	sl, r0, [sp, #8]
    f0bc:	6966      	ldr	r6, [r4, #20]
    f0be:	f240 139f 	movw	r3, #415	; 0x19f
    f0c2:	e709      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);
    f0c4:	f813 000e 	ldrb.w	r0, [r3, lr]
    f0c8:	2807      	cmp	r0, #7
    f0ca:	d00a      	beq.n	f0e2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2da>
    f0cc:	2307      	movs	r3, #7
    f0ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f0d2:	4b29      	ldr	r3, [pc, #164]	; (f178 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x370>)
    f0d4:	9301      	str	r3, [sp, #4]
    f0d6:	4b29      	ldr	r3, [pc, #164]	; (f17c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x374>)
    f0d8:	9300      	str	r3, [sp, #0]
    f0da:	6966      	ldr	r6, [r4, #20]
    f0dc:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
    f0e0:	e6fa      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);
    f0e2:	f813 c00c 	ldrb.w	ip, [r3, ip]
    f0e6:	f1bc 0f07 	cmp.w	ip, #7
    f0ea:	d04b      	beq.n	f184 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    f0ec:	4b22      	ldr	r3, [pc, #136]	; (f178 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x370>)
    f0ee:	9301      	str	r3, [sp, #4]
    f0f0:	4b23      	ldr	r3, [pc, #140]	; (f180 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x378>)
    f0f2:	9300      	str	r3, [sp, #0]
    f0f4:	e9cd c002 	strd	ip, r0, [sp, #8]
    f0f8:	6966      	ldr	r6, [r4, #20]
    f0fa:	f240 13a1 	movw	r3, #417	; 0x1a1
    f0fe:	e6eb      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    f100:	0002c745 	.word	0x0002c745
    f104:	0002c22b 	.word	0x0002c22b
    f108:	0002c205 	.word	0x0002c205
    f10c:	0002af4f 	.word	0x0002af4f
    f110:	0002c23e 	.word	0x0002c23e
    f114:	0002a6ae 	.word	0x0002a6ae
    f118:	0002b7c1 	.word	0x0002b7c1
    f11c:	0002c0bd 	.word	0x0002c0bd
    f120:	0002bbe9 	.word	0x0002bbe9
    f124:	0002b20e 	.word	0x0002b20e
    f128:	0002c27a 	.word	0x0002c27a
    f12c:	0002c290 	.word	0x0002c290
    f130:	0002c29b 	.word	0x0002c29b
    f134:	0002c2b1 	.word	0x0002c2b1
    f138:	0002c2bb 	.word	0x0002c2bb
    f13c:	0002c2d1 	.word	0x0002c2d1
    f140:	0002c2f0 	.word	0x0002c2f0
    f144:	0002c2fb 	.word	0x0002c2fb
    f148:	0002c31a 	.word	0x0002c31a
    f14c:	0002c3b4 	.word	0x0002c3b4
    f150:	0002c336 	.word	0x0002c336
    f154:	0002c352 	.word	0x0002c352
    f158:	0002c366 	.word	0x0002c366
    f15c:	0002c386 	.word	0x0002c386
    f160:	0002c3a6 	.word	0x0002c3a6
    f164:	0002c3c0 	.word	0x0002c3c0
    f168:	0002abe7 	.word	0x0002abe7
    f16c:	0002bcaa 	.word	0x0002bcaa
    f170:	0002c26e 	.word	0x0002c26e
    f174:	0002c3e0 	.word	0x0002c3e0
    f178:	0002b48f 	.word	0x0002b48f
    f17c:	0002c3f6 	.word	0x0002c3f6
    f180:	0002c409 	.word	0x0002c409
    if (bias != nullptr) {
    f184:	b169      	cbz	r1, f1a2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);
    f186:	7809      	ldrb	r1, [r1, #0]
    f188:	2902      	cmp	r1, #2
    f18a:	d00a      	beq.n	f1a2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
    f18c:	2302      	movs	r3, #2
    f18e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    f192:	4b6d      	ldr	r3, [pc, #436]	; (f348 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x540>)
    f194:	9301      	str	r3, [sp, #4]
    f196:	4b6d      	ldr	r3, [pc, #436]	; (f34c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
    f198:	9300      	str	r3, [sp, #0]
    f19a:	6966      	ldr	r6, [r4, #20]
    f19c:	f240 13a3 	movw	r3, #419	; 0x1a3
    f1a0:	e69a      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    f1a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    f1a4:	5c58      	ldrb	r0, [r3, r1]
    f1a6:	2809      	cmp	r0, #9
    f1a8:	d013      	beq.n	f1d2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ca>
    f1aa:	6967      	ldr	r7, [r4, #20]
    f1ac:	f7f1 fb81 	bl	8b2 <TfLiteTypeGetName>
    f1b0:	4606      	mov	r6, r0
    f1b2:	2009      	movs	r0, #9
    f1b4:	f7f1 fb7d 	bl	8b2 <TfLiteTypeGetName>
    f1b8:	4b65      	ldr	r3, [pc, #404]	; (f350 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x548>)
    f1ba:	9301      	str	r3, [sp, #4]
    f1bc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    f1c0:	4b64      	ldr	r3, [pc, #400]	; (f354 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x54c>)
    f1c2:	9300      	str	r3, [sp, #0]
    f1c4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    f1c8:	4a63      	ldr	r2, [pc, #396]	; (f358 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x550>)
    f1ca:	4964      	ldr	r1, [pc, #400]	; (f35c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x554>)
    f1cc:	4620      	mov	r0, r4
    f1ce:	47b8      	blx	r7
    f1d0:	e653      	b.n	ee7a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
        state_params->scale->data[0]);
    f1d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    f1d4:	681b      	ldr	r3, [r3, #0]
    f1d6:	ed93 8a01 	vldr	s16, [r3, #4]
        input_params->scale->data[0] * weights_feature_params->scale->data[0] /
    f1da:	9b08      	ldr	r3, [sp, #32]
    f1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1de:	681a      	ldr	r2, [r3, #0]
    f1e0:	9b07      	ldr	r3, [sp, #28]
    f1e2:	edd2 7a01 	vldr	s15, [r2, #4]
    f1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1e8:	681b      	ldr	r3, [r3, #0]
    f1ea:	ed93 7a01 	vldr	s14, [r3, #4]
    f1ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    const double effective_scale_1 = static_cast<double>(
    f1f2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    f1f6:	ee17 0a90 	vmov	r0, s15
    f1fa:	f7f1 fd35 	bl	c68 <__aeabi_f2d>
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
    f1fe:	9b04      	ldr	r3, [sp, #16]
    f200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f202:	681b      	ldr	r3, [r3, #0]
    f204:	edd3 7a01 	vldr	s15, [r3, #4]
        output_params->scale->data[0]);
    f208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f20c:	681b      	ldr	r3, [r3, #0]
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
    f20e:	ee28 8a27 	vmul.f32	s16, s16, s15
    f212:	edd3 7a01 	vldr	s15, [r3, #4]
    const double effective_scale_2 = static_cast<double>(
    f216:	eec8 7a27 	vdiv.f32	s15, s16, s15
    const double effective_scale_1 = static_cast<double>(
    f21a:	ec41 0b19 	vmov	d9, r0, r1
    const double effective_scale_2 = static_cast<double>(
    f21e:	ee17 0a90 	vmov	r0, s15
    f222:	f7f1 fd21 	bl	c68 <__aeabi_f2d>
    TFLITE_DCHECK(node->user_data != nullptr);
    f226:	f8d9 9010 	ldr.w	r9, [r9, #16]
    const double effective_scale_2 = static_cast<double>(
    f22a:	ec41 0b18 	vmov	d8, r0, r1
    TFLITE_DCHECK(node->user_data != nullptr);
    f22e:	f1b9 0f00 	cmp.w	r9, #0
    f232:	f43f adf2 	beq.w	ee1a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    QuantizeMultiplier(effective_scale_1, &(data->effective_scale_1_a),
    f236:	f109 0108 	add.w	r1, r9, #8
    f23a:	4648      	mov	r0, r9
    f23c:	eeb0 0a49 	vmov.f32	s0, s18
    f240:	eef0 0a69 	vmov.f32	s1, s19
    f244:	f002 fa64 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(effective_scale_2, &(data->effective_scale_2_a),
    f248:	eeb0 0a48 	vmov.f32	s0, s16
    f24c:	eef0 0a68 	vmov.f32	s1, s17
    f250:	f109 010c 	add.w	r1, r9, #12
    f254:	f109 0004 	add.w	r0, r9, #4
    f258:	f002 fa5a 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
    f25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f25e:	2b00      	cmp	r3, #0
    f260:	f43f addb 	beq.w	ee1a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(int32_t),
    f264:	fb06 f108 	mul.w	r1, r6, r8
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f268:	f109 0210 	add.w	r2, r9, #16
    f26c:	0089      	lsls	r1, r1, #2
    f26e:	4620      	mov	r0, r4
    f270:	4798      	blx	r3
    TF_LITE_ENSURE_OK(context, scratch_status);
    f272:	4605      	mov	r5, r0
    f274:	2800      	cmp	r0, #0
    f276:	f47f ae00 	bne.w	ee7a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
        context->RequestScratchBufferInArena(
    f27a:	6c23      	ldr	r3, [r4, #64]	; 0x40
            context, batch_size * num_units * sizeof(int32_t),
    f27c:	fb07 f108 	mul.w	r1, r7, r8
        context->RequestScratchBufferInArena(
    f280:	f109 0214 	add.w	r2, r9, #20
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f284:	0089      	lsls	r1, r1, #2
    f286:	4620      	mov	r0, r4
}
    f288:	b00d      	add	sp, #52	; 0x34
    f28a:	ecbd 8b04 	vpop	{d8-d9}
    f28e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f292:	4718      	bx	r3
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
    f294:	f1ba 0f01 	cmp.w	sl, #1
    f298:	d00a      	beq.n	f2b0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
    f29a:	2301      	movs	r3, #1
    f29c:	e9cd a302 	strd	sl, r3, [sp, #8]
    f2a0:	4b2f      	ldr	r3, [pc, #188]	; (f360 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2a2:	9301      	str	r3, [sp, #4]
    f2a4:	4b2f      	ldr	r3, [pc, #188]	; (f364 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x55c>)
    f2a6:	9300      	str	r3, [sp, #0]
    f2a8:	6966      	ldr	r6, [r4, #20]
    f2aa:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    f2ae:	e613      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
    f2b0:	f813 700e 	ldrb.w	r7, [r3, lr]
    f2b4:	2f01      	cmp	r7, #1
    f2b6:	d009      	beq.n	f2cc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4c4>
    f2b8:	4b29      	ldr	r3, [pc, #164]	; (f360 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2ba:	9301      	str	r3, [sp, #4]
    f2bc:	4b2a      	ldr	r3, [pc, #168]	; (f368 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x560>)
    f2be:	9300      	str	r3, [sp, #0]
    f2c0:	e9cd 7a02 	strd	r7, sl, [sp, #8]
    f2c4:	6965      	ldr	r5, [r4, #20]
    f2c6:	f240 13d1 	movw	r3, #465	; 0x1d1
    f2ca:	e5d1      	b.n	ee70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
    f2cc:	f813 500c 	ldrb.w	r5, [r3, ip]
    f2d0:	2d01      	cmp	r5, #1
    f2d2:	d009      	beq.n	f2e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    f2d4:	4b22      	ldr	r3, [pc, #136]	; (f360 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2d6:	9301      	str	r3, [sp, #4]
    f2d8:	4b24      	ldr	r3, [pc, #144]	; (f36c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
    f2da:	9300      	str	r3, [sp, #0]
    f2dc:	e9cd 5702 	strd	r5, r7, [sp, #8]
    f2e0:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    f2e4:	6965      	ldr	r5, [r4, #20]
    f2e6:	e5c3      	b.n	ee70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    if (bias != nullptr) {
    f2e8:	b169      	cbz	r1, f306 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4fe>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
    f2ea:	780a      	ldrb	r2, [r1, #0]
    f2ec:	2a01      	cmp	r2, #1
    f2ee:	d00a      	beq.n	f306 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4fe>
    f2f0:	2301      	movs	r3, #1
    f2f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f2f6:	4b1a      	ldr	r3, [pc, #104]	; (f360 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2f8:	9301      	str	r3, [sp, #4]
    f2fa:	4b14      	ldr	r3, [pc, #80]	; (f34c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
    f2fc:	9300      	str	r3, [sp, #0]
    f2fe:	6966      	ldr	r6, [r4, #20]
    f300:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
    f304:	e5e8      	b.n	eed8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    f306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f308:	5c98      	ldrb	r0, [r3, r2]
    f30a:	2801      	cmp	r0, #1
    f30c:	d00f      	beq.n	f32e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x526>
    f30e:	6967      	ldr	r7, [r4, #20]
    f310:	f7f1 facf 	bl	8b2 <TfLiteTypeGetName>
    f314:	4606      	mov	r6, r0
    f316:	2001      	movs	r0, #1
    f318:	f7f1 facb 	bl	8b2 <TfLiteTypeGetName>
    f31c:	4b10      	ldr	r3, [pc, #64]	; (f360 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f31e:	9301      	str	r3, [sp, #4]
    f320:	4b0c      	ldr	r3, [pc, #48]	; (f354 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x54c>)
    f322:	9300      	str	r3, [sp, #0]
    f324:	e9cd 6002 	strd	r6, r0, [sp, #8]
    f328:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
    f32c:	e74c      	b.n	f1c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3c0>
    TFLITE_DCHECK(node->user_data != nullptr);
    f32e:	f8d9 2010 	ldr.w	r2, [r9, #16]
    f332:	2a00      	cmp	r2, #0
    f334:	f43f ad71 	beq.w	ee1a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
    f338:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f33a:	2b00      	cmp	r3, #0
    f33c:	f43f ad6d 	beq.w	ee1a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(float),
    f340:	fb06 f108 	mul.w	r1, r6, r8
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f344:	3210      	adds	r2, #16
    f346:	e79d      	b.n	f284 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x47c>
    f348:	0002b4ce 	.word	0x0002b4ce
    f34c:	0002c420 	.word	0x0002c420
    f350:	0002c26e 	.word	0x0002c26e
    f354:	0002b75c 	.word	0x0002b75c
    f358:	0002c205 	.word	0x0002c205
    f35c:	0002af8a 	.word	0x0002af8a
    f360:	0002afa4 	.word	0x0002afa4
    f364:	0002c3e0 	.word	0x0002c3e0
    f368:	0002c3f6 	.word	0x0002c3f6
    f36c:	0002c409 	.word	0x0002c409

0000f370 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    f374:	680c      	ldr	r4, [r1, #0]
    f376:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    f378:	6862      	ldr	r2, [r4, #4]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
    f37a:	694e      	ldr	r6, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    f37c:	ed2d 8b04 	vpush	{d8-d9}
    f380:	eb03 1882 	add.w	r8, r3, r2, lsl #6
    f384:	68a2      	ldr	r2, [r4, #8]
    f386:	4607      	mov	r7, r0
    f388:	eb03 1982 	add.w	r9, r3, r2, lsl #6
    f38c:	0190      	lsls	r0, r2, #6
    f38e:	68e2      	ldr	r2, [r4, #12]
    f390:	b097      	sub	sp, #92	; 0x5c
    f392:	eb03 1282 	add.w	r2, r3, r2, lsl #6
    f396:	9208      	str	r2, [sp, #32]
  const bool use_tensor = index < node->inputs->size &&
    f398:	6822      	ldr	r2, [r4, #0]
    f39a:	2a03      	cmp	r2, #3
    f39c:	dd15      	ble.n	f3ca <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    f39e:	6922      	ldr	r2, [r4, #16]
  const bool use_tensor = index < node->inputs->size &&
    f3a0:	1c55      	adds	r5, r2, #1
    f3a2:	d012      	beq.n	f3ca <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    return &context->tensors[node->inputs->data[index]];
    f3a4:	eb03 1b82 	add.w	fp, r3, r2, lsl #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
    f3a8:	6964      	ldr	r4, [r4, #20]
    f3aa:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return (tensor->is_variable) ? tensor : nullptr;
    f3ae:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    f3b2:	2a00      	cmp	r2, #0
  return &context->tensors[node->outputs->data[index]];
    f3b4:	684a      	ldr	r2, [r1, #4]
    f3b6:	6852      	ldr	r2, [r2, #4]
    f3b8:	eb03 1a82 	add.w	sl, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* activation_state =
      GetVariableInput(context, node, kInputActivationStateTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    f3bc:	690a      	ldr	r2, [r1, #16]
    f3be:	9204      	str	r2, [sp, #16]
  return (tensor->is_variable) ? tensor : nullptr;
    f3c0:	bf08      	it	eq
    f3c2:	2400      	moveq	r4, #0
    f3c4:	b922      	cbnz	r2, f3d0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    f3c6:	f00f f904 	bl	1e5d2 <abort>
  return nullptr;
    f3ca:	f04f 0b00 	mov.w	fp, #0
    f3ce:	e7eb      	b.n	f3a8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (weights_feature->type) {
    f3d0:	5c18      	ldrb	r0, [r3, r0]
    f3d2:	2801      	cmp	r0, #1
    f3d4:	d00a      	beq.n	f3ec <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    f3d6:	2809      	cmp	r0, #9
    f3d8:	f000 8185 	beq.w	f6e6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x376>
      return kTfLiteOk;
      break;
    }

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    f3dc:	697c      	ldr	r4, [r7, #20]
    f3de:	f7f1 fa68 	bl	8b2 <TfLiteTypeGetName>
    f3e2:	49b7      	ldr	r1, [pc, #732]	; (f6c0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x350>)
    f3e4:	4602      	mov	r2, r0
    f3e6:	4638      	mov	r0, r7
    f3e8:	47a0      	blx	r4
    f3ea:	e18d      	b.n	f708 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x398>
                    params, data.scratch_tensor_index, activation_state,
    f3ec:	9b04      	ldr	r3, [sp, #16]
    f3ee:	6919      	ldr	r1, [r3, #16]
  const int rank = params->rank;
    f3f0:	6833      	ldr	r3, [r6, #0]
    f3f2:	9309      	str	r3, [sp, #36]	; 0x24
  const int batch_size = input->dims->data[0];
    f3f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f3f8:	685a      	ldr	r2, [r3, #4]
  const int input_size = input->dims->data[1];
    f3fa:	689b      	ldr	r3, [r3, #8]
    f3fc:	930a      	str	r3, [sp, #40]	; 0x28
  const int num_filters = weights_feature->dims->data[0];
    f3fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
  const int batch_size = input->dims->data[0];
    f402:	9204      	str	r2, [sp, #16]
  const int num_filters = weights_feature->dims->data[0];
    f404:	685b      	ldr	r3, [r3, #4]
    f406:	9305      	str	r3, [sp, #20]
  const int num_units = num_filters / rank;
    f408:	9a05      	ldr	r2, [sp, #20]
    f40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f40c:	fb92 f3f3 	sdiv	r3, r2, r3
    f410:	9306      	str	r3, [sp, #24]
  const int memory_size = weights_time->dims->data[1];
    f412:	9b08      	ldr	r3, [sp, #32]
    f414:	689b      	ldr	r3, [r3, #8]
    f416:	689b      	ldr	r3, [r3, #8]
    f418:	9307      	str	r3, [sp, #28]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    f41a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f41e:	930b      	str	r3, [sp, #44]	; 0x2c
    f420:	9b08      	ldr	r3, [sp, #32]
    f422:	685b      	ldr	r3, [r3, #4]
    f424:	930c      	str	r3, [sp, #48]	; 0x30
    f426:	f1bb 0f00 	cmp.w	fp, #0
    f42a:	d001      	beq.n	f430 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
    f42c:	f8db b004 	ldr.w	fp, [fp, #4]
    f430:	f8d8 8004 	ldr.w	r8, [r8, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f434:	b104      	cbz	r4, f438 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
    f436:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
    f438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f43a:	2b00      	cmp	r3, #0
    f43c:	d0c3      	beq.n	f3c6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, scratch_tensor_index));
    f43e:	4638      	mov	r0, r7
    f440:	4798      	blx	r3
    f442:	900d      	str	r0, [sp, #52]	; 0x34
    f444:	f1ba 0f00 	cmp.w	sl, #0
    f448:	d001      	beq.n	f44e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xde>
    f44a:	f8da a004 	ldr.w	sl, [sl, #4]
        state_ptr + batch_size * num_filters * memory_size;
    f44e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
    f452:	434b      	muls	r3, r1
    f454:	9907      	ldr	r1, [sp, #28]
    f456:	434b      	muls	r3, r1
    const float* old_state_start = state_ptr + 1;
    f458:	1d22      	adds	r2, r4, #4
    const float* old_state_end =
    f45a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    while (old_state_start != old_state_end) {
    f45e:	4293      	cmp	r3, r2
    f460:	d004      	beq.n	f46c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
      *new_state_start++ = *old_state_start++;
    f462:	f852 1b04 	ldr.w	r1, [r2], #4
    f466:	f842 1c08 	str.w	r1, [r2, #-8]
    while (old_state_start != old_state_end) {
    f46a:	e7f8      	b.n	f45e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    float* result = &state_ptr[memory_size - 1];
    f46c:	980a      	ldr	r0, [sp, #40]	; 0x28
    f46e:	9b07      	ldr	r3, [sp, #28]
    f470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f472:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    f476:	0080      	lsls	r0, r0, #2
    f478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f47c:	3b01      	subs	r3, #1
    f47e:	900e      	str	r0, [sp, #56]	; 0x38
    f480:	9805      	ldr	r0, [sp, #20]
    f482:	0099      	lsls	r1, r3, #2
        result_in_batch += memory_size;
    f484:	3104      	adds	r1, #4
    f486:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    f48a:	0092      	lsls	r2, r2, #2
    f48c:	fb01 f007 	mul.w	r0, r1, r7
    f490:	9210      	str	r2, [sp, #64]	; 0x40
    f492:	900f      	str	r0, [sp, #60]	; 0x3c
    float* result = &state_ptr[memory_size - 1];
    f494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < batch_size; ++i) {
    f498:	4642      	mov	r2, r8
    f49a:	2000      	movs	r0, #0
    f49c:	9f04      	ldr	r7, [sp, #16]
    f49e:	4287      	cmp	r7, r0
    f4a0:	dd2a      	ble.n	f4f8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x188>
      const float* matrix_ptr = matrix;
    f4a2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
        const float* vector_in_batch = vector + i * input_size;
    f4a6:	469e      	mov	lr, r3
      for (int j = 0; j < num_filters; ++j) {
    f4a8:	f04f 0c00 	mov.w	ip, #0
    f4ac:	9d05      	ldr	r5, [sp, #20]
    f4ae:	4565      	cmp	r5, ip
    f4b0:	dd1c      	ble.n	f4ec <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
        float dot_prod = 0.0f;
    f4b2:	eddf 7a84 	vldr	s15, [pc, #528]	; f6c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f4b6:	f8cd 8020 	str.w	r8, [sp, #32]
        const float* vector_in_batch = vector + i * input_size;
    f4ba:	4617      	mov	r7, r2
        for (int k = 0; k < input_size; ++k) {
    f4bc:	f04f 0900 	mov.w	r9, #0
    f4c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f4c2:	454d      	cmp	r5, r9
    f4c4:	dd0a      	ble.n	f4dc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
    f4c6:	9d08      	ldr	r5, [sp, #32]
    f4c8:	ecb7 7a01 	vldmia	r7!, {s14}
    f4cc:	ecf5 6a01 	vldmia	r5!, {s13}
        for (int k = 0; k < input_size; ++k) {
    f4d0:	f109 0901 	add.w	r9, r9, #1
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
    f4d4:	eee6 7a87 	vfma.f32	s15, s13, s14
    f4d8:	9508      	str	r5, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
    f4da:	e7f1      	b.n	f4c0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
    f4dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
    f4de:	edce 7a00 	vstr	s15, [lr]
    f4e2:	44a8      	add	r8, r5
        result_in_batch += memory_size;
    f4e4:	448e      	add	lr, r1
      for (int j = 0; j < num_filters; ++j) {
    f4e6:	f10c 0c01 	add.w	ip, ip, #1
    f4ea:	e7df      	b.n	f4ac <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    f4ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f4ee:	442b      	add	r3, r5
    for (int i = 0; i < batch_size; ++i) {
    f4f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f4f2:	3001      	adds	r0, #1
    f4f4:	442a      	add	r2, r5
    f4f6:	e7d1      	b.n	f49c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
    f4f8:	7933      	ldrb	r3, [r6, #4]
    f4fa:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batch_size; ++b) {
    f4fc:	9b05      	ldr	r3, [sp, #20]
    f4fe:	9a05      	ldr	r2, [sp, #20]
    f500:	980d      	ldr	r0, [sp, #52]	; 0x34
      *scratch_ptr_batch = 0.f;
    f502:	ed9f 7a70 	vldr	s14, [pc, #448]	; f6c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f506:	009b      	lsls	r3, r3, #2
    f508:	930a      	str	r3, [sp, #40]	; 0x28
    f50a:	9b07      	ldr	r3, [sp, #28]
    f50c:	4353      	muls	r3, r2
    f50e:	009b      	lsls	r3, r3, #2
    f510:	930d      	str	r3, [sp, #52]	; 0x34
    f512:	9b07      	ldr	r3, [sp, #28]
    f514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f518:	009b      	lsls	r3, r3, #2
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
    f51a:	4601      	mov	r1, r0
  for (int b = 0; b < batch_size; ++b) {
    f51c:	2600      	movs	r6, #0
    f51e:	9a04      	ldr	r2, [sp, #16]
    f520:	42b2      	cmp	r2, r6
    f522:	dd2a      	ble.n	f57a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    const float* vector1_ptr = weights_time_ptr;
    f524:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    const float* vector2_ptr = state_ptr + b * memory_size * num_filters;
    f528:	46a4      	mov	ip, r4
    f52a:	460a      	mov	r2, r1
    for (int i = 0; i < num_filters; ++i) {
    f52c:	2700      	movs	r7, #0
    f52e:	9d05      	ldr	r5, [sp, #20]
    f530:	42bd      	cmp	r5, r7
    f532:	dd1c      	ble.n	f56e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
      *scratch_ptr_batch = 0.f;
    f534:	eca2 7a01 	vstmia	r2!, {s14}
    f538:	46e1      	mov	r9, ip
    f53a:	f8cd e020 	str.w	lr, [sp, #32]
      for (int j = 0; j < memory_size; ++j) {
    f53e:	f04f 0800 	mov.w	r8, #0
    f542:	9d07      	ldr	r5, [sp, #28]
    f544:	4545      	cmp	r5, r8
    f546:	dd0e      	ble.n	f566 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f548:	9d08      	ldr	r5, [sp, #32]
    f54a:	ecf9 6a01 	vldmia	r9!, {s13}
    f54e:	ecb5 6a01 	vldmia	r5!, {s12}
    f552:	ed52 7a01 	vldr	s15, [r2, #-4]
    f556:	9508      	str	r5, [sp, #32]
    f558:	eee6 7a26 	vfma.f32	s15, s12, s13
      for (int j = 0; j < memory_size; ++j) {
    f55c:	f108 0801 	add.w	r8, r8, #1
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f560:	ed42 7a01 	vstr	s15, [r2, #-4]
      for (int j = 0; j < memory_size; ++j) {
    f564:	e7ed      	b.n	f542 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    f566:	449e      	add	lr, r3
    f568:	449c      	add	ip, r3
    for (int i = 0; i < num_filters; ++i) {
    f56a:	3701      	adds	r7, #1
    f56c:	e7df      	b.n	f52e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1be>
  for (int b = 0; b < batch_size; ++b) {
    f56e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f570:	4411      	add	r1, r2
    f572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f574:	3601      	adds	r6, #1
    f576:	4414      	add	r4, r2
    f578:	e7d1      	b.n	f51e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
  if (bias_ptr) {
    f57a:	9b06      	ldr	r3, [sp, #24]
    f57c:	f1bb 0f00 	cmp.w	fp, #0
    f580:	d011      	beq.n	f5a6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x236>
    f582:	009e      	lsls	r6, r3, #2
    for (int i = 0; i < batch_size; ++i) {
    f584:	2200      	movs	r2, #0
    f586:	4653      	mov	r3, sl
    f588:	9904      	ldr	r1, [sp, #16]
    f58a:	4291      	cmp	r1, r2
    f58c:	dd1a      	ble.n	f5c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
    f58e:	461c      	mov	r4, r3
    f590:	465d      	mov	r5, fp
      for (int j = 0; j < num_units; ++j) {
    f592:	2100      	movs	r1, #0
    f594:	9f06      	ldr	r7, [sp, #24]
    f596:	428f      	cmp	r7, r1
    f598:	dd11      	ble.n	f5be <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
        *output_data++ = *bias_data++;
    f59a:	f855 7b04 	ldr.w	r7, [r5], #4
    f59e:	f844 7b04 	str.w	r7, [r4], #4
      for (int j = 0; j < num_units; ++j) {
    f5a2:	3101      	adds	r1, #1
    f5a4:	e7f6      	b.n	f594 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x224>
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5a6:	9a04      	ldr	r2, [sp, #16]
      *output_data++ = 0.0f;
    f5a8:	2100      	movs	r1, #0
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5aa:	fb03 f402 	mul.w	r4, r3, r2
    float* output_data = output_ptr;
    f5ae:	4652      	mov	r2, sl
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5b0:	465b      	mov	r3, fp
    f5b2:	429c      	cmp	r4, r3
    f5b4:	dd06      	ble.n	f5c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
      *output_data++ = 0.0f;
    f5b6:	f842 1b04 	str.w	r1, [r2], #4
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5ba:	3301      	adds	r3, #1
    f5bc:	e7f9      	b.n	f5b2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x242>
    for (int i = 0; i < batch_size; ++i) {
    f5be:	3201      	adds	r2, #1
    f5c0:	4433      	add	r3, r6
    f5c2:	e7e1      	b.n	f588 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x218>
    f5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5ca:	2300      	movs	r3, #0
    f5cc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
    f5d0:	4619      	mov	r1, r3
  for (int b = 0; b < batch_size; ++b) {
    f5d2:	9a04      	ldr	r2, [sp, #16]
    f5d4:	428a      	cmp	r2, r1
    f5d6:	dc13      	bgt.n	f600 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x290>
    f5d8:	9b06      	ldr	r3, [sp, #24]
    f5da:	ed9f 9a3a 	vldr	s18, [pc, #232]	; f6c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f5de:	009e      	lsls	r6, r3, #2
  for (int b = 0; b < batch_size; ++b) {
    f5e0:	2500      	movs	r5, #0
    case kTfLiteActTanh:
      return std::tanh(a);
    case kTfLiteActSignBit:
      return std::signbit(a);
    case kTfLiteActSigmoid:
      return 1.0f / (1.0f + std::exp(-a));
    f5e2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f5e6:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
    f5ea:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
    f5ee:	9b04      	ldr	r3, [sp, #16]
    f5f0:	42ab      	cmp	r3, r5
    f5f2:	dc25      	bgt.n	f640 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
      return kTfLiteOk;
    f5f4:	2000      	movs	r0, #0
                         TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    f5f6:	b017      	add	sp, #92	; 0x5c
    f5f8:	ecbd 8b04 	vpop	{d8-d9}
    f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float* scratch_ptr_batch = scratch_ptr + b * num_filters;
    f600:	4606      	mov	r6, r0
    for (int i = 0; i < num_units; ++i) {
    f602:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    f606:	2500      	movs	r5, #0
    f608:	9f06      	ldr	r7, [sp, #24]
    f60a:	42af      	cmp	r7, r5
    f60c:	dd12      	ble.n	f634 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>
    f60e:	46b4      	mov	ip, r6
      for (int j = 0; j < rank; j++) {
    f610:	2700      	movs	r7, #0
    f612:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f614:	42bc      	cmp	r4, r7
    f616:	dd09      	ble.n	f62c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
        output_ptr_batch[i] += *scratch_ptr_batch++;
    f618:	edd2 7a00 	vldr	s15, [r2]
    f61c:	ecbc 7a01 	vldmia	ip!, {s14}
    f620:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
    f624:	3701      	adds	r7, #1
        output_ptr_batch[i] += *scratch_ptr_batch++;
    f626:	edc2 7a00 	vstr	s15, [r2]
      for (int j = 0; j < rank; j++) {
    f62a:	e7f2      	b.n	f612 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2a2>
    f62c:	4476      	add	r6, lr
    for (int i = 0; i < num_units; ++i) {
    f62e:	3501      	adds	r5, #1
    f630:	3204      	adds	r2, #4
    f632:	e7e9      	b.n	f608 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x298>
  for (int b = 0; b < batch_size; ++b) {
    f634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f636:	4410      	add	r0, r2
    f638:	9a06      	ldr	r2, [sp, #24]
    f63a:	3101      	adds	r1, #1
    f63c:	4413      	add	r3, r2
    f63e:	e7c8      	b.n	f5d2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    float* output_ptr_batch = output_ptr + b * num_units;
    f640:	46d0      	mov	r8, sl
    for (int i = 0; i < num_units; ++i) {
    f642:	2700      	movs	r7, #0
    f644:	9b06      	ldr	r3, [sp, #24]
    f646:	42bb      	cmp	r3, r7
    f648:	dd4a      	ble.n	f6e0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x370>
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
    f64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f64c:	ed98 0a00 	vldr	s0, [r8]
  switch (act) {
    f650:	2b06      	cmp	r3, #6
    f652:	d842      	bhi.n	f6da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x36a>
    f654:	e8df f003 	tbb	[pc, r3]
    f658:	16041d12 	.word	0x16041d12
    f65c:	2825      	.short	0x2825
    f65e:	38          	.byte	0x38
    f65f:	00          	.byte	0x00

namespace tflite {

#if defined(TF_LITE_USE_GLOBAL_MAX) || defined(__ZEPHYR__)
inline float TfLiteMax(const float& x, const float& y) {
  return std::max(x, y);
    f660:	eeb4 0ac8 	vcmpe.f32	s0, s16
    f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f668:	bf88      	it	hi
    f66a:	eeb0 0a48 	vmovhi.f32	s0, s16
    f66e:	eeb4 0ae9 	vcmpe.f32	s0, s19
    f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f676:	bfb8      	it	lt
    f678:	eeb0 0a69 	vmovlt.f32	s0, s19
    f67c:	eca8 0a01 	vstmia	r8!, {s0}
    for (int i = 0; i < num_units; ++i) {
    f680:	3701      	adds	r7, #1
    f682:	e7df      	b.n	f644 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
    f684:	eeb4 0ae8 	vcmpe.f32	s0, s17
    f688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f68c:	bf88      	it	hi
    f68e:	eeb0 0a68 	vmovhi.f32	s0, s17
    f692:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    f696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f69a:	bfb8      	it	lt
    f69c:	eeb0 0a49 	vmovlt.f32	s0, s18
    f6a0:	e7ec      	b.n	f67c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
    f6a2:	f002 fdf1 	bl	12288 <tanhf>
      return std::tanh(a);
    f6a6:	e7e9      	b.n	f67c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }
    f6a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    f6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return std::signbit(a);
    f6b0:	bf4c      	ite	mi
    f6b2:	2301      	movmi	r3, #1
    f6b4:	2300      	movpl	r3, #0
    f6b6:	ee00 3a10 	vmov	s0, r3
    f6ba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    f6be:	e7dd      	b.n	f67c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
    f6c0:	0002bb28 	.word	0x0002bb28
    f6c4:	00000000 	.word	0x00000000
  { return __builtin_expf(__x); }
    f6c8:	eeb1 0a40 	vneg.f32	s0, s0
    f6cc:	f002 fe38 	bl	12340 <expf>
      return 1.0f / (1.0f + std::exp(-a));
    f6d0:	ee70 7a08 	vadd.f32	s15, s0, s16
    f6d4:	ee88 0a27 	vdiv.f32	s0, s16, s15
    f6d8:	e7d0      	b.n	f67c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  }
  return 0.0f;  // To indicate an unsupported activation (i.e. when a new fused
    f6da:	ed1f 0a06 	vldr	s0, [pc, #-24]	; f6c4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f6de:	e7cd      	b.n	f67c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  for (int b = 0; b < batch_size; ++b) {
    f6e0:	3501      	adds	r5, #1
    f6e2:	44b2      	add	sl, r6
    f6e4:	e783      	b.n	f5ee <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
      TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);
    f6e6:	7933      	ldrb	r3, [r6, #4]
    f6e8:	2b01      	cmp	r3, #1
    f6ea:	d00f      	beq.n	f70c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
    f6ec:	2401      	movs	r4, #1
    f6ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
    f6f2:	4b9f      	ldr	r3, [pc, #636]	; (f970 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    f6f4:	9301      	str	r3, [sp, #4]
    f6f6:	4b9f      	ldr	r3, [pc, #636]	; (f974 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x604>)
    f6f8:	9300      	str	r3, [sp, #0]
    f6fa:	697d      	ldr	r5, [r7, #20]
    f6fc:	4a9e      	ldr	r2, [pc, #632]	; (f978 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x608>)
    f6fe:	499f      	ldr	r1, [pc, #636]	; (f97c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    f700:	f240 13ff 	movw	r3, #511	; 0x1ff
    f704:	4638      	mov	r0, r7
    f706:	47a8      	blx	r5
      return kTfLiteError;
    f708:	2001      	movs	r0, #1
    f70a:	e774      	b.n	f5f6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x286>
                      input->params.zero_point, output->params.zero_point);
    f70c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    f710:	930f      	str	r3, [sp, #60]	; 0x3c
      EvalIntegerSVDF(context, node, input, weights_feature, weights_time, bias,
    f712:	f8da 3010 	ldr.w	r3, [sl, #16]
    f716:	9310      	str	r3, [sp, #64]	; 0x40
    f718:	6833      	ldr	r3, [r6, #0]
    f71a:	930a      	str	r3, [sp, #40]	; 0x28
  const int n_batch = input_tensor->dims->data[0];
    f71c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f720:	685a      	ldr	r2, [r3, #4]
  const int n_input = input_tensor->dims->data[1];
    f722:	689b      	ldr	r3, [r3, #8]
    f724:	930b      	str	r3, [sp, #44]	; 0x2c
  const int n_filter = weights_feature_tensor->dims->data[0];
    f726:	f8d9 3008 	ldr.w	r3, [r9, #8]
  const int n_batch = input_tensor->dims->data[0];
    f72a:	9205      	str	r2, [sp, #20]
  const int n_filter = weights_feature_tensor->dims->data[0];
    f72c:	685e      	ldr	r6, [r3, #4]
  const int n_unit = n_filter / n_rank;
    f72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f730:	fb96 f3f3 	sdiv	r3, r6, r3
    f734:	9306      	str	r3, [sp, #24]
  const int n_memory = weights_time_tensor->dims->data[1];
    f736:	9b08      	ldr	r3, [sp, #32]
    f738:	689b      	ldr	r3, [r3, #8]
    f73a:	689b      	ldr	r3, [r3, #8]
    f73c:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
    f73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f740:	2b00      	cmp	r3, #0
    f742:	f43f ae40 	beq.w	f3c6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, data.scratch_tensor_index));
    f746:	9a04      	ldr	r2, [sp, #16]
    f748:	4638      	mov	r0, r7
    f74a:	6911      	ldr	r1, [r2, #16]
    f74c:	4798      	blx	r3
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
    f74e:	9a04      	ldr	r2, [sp, #16]
      context->GetScratchBuffer(context, data.scratch_tensor_index));
    f750:	9011      	str	r0, [sp, #68]	; 0x44
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
    f752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f754:	6951      	ldr	r1, [r2, #20]
    f756:	4638      	mov	r0, r7
    f758:	4798      	blx	r3
    f75a:	9009      	str	r0, [sp, #36]	; 0x24
    f75c:	b104      	cbz	r4, f760 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    f75e:	6864      	ldr	r4, [r4, #4]
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
    f760:	9b05      	ldr	r3, [sp, #20]
    f762:	9907      	ldr	r1, [sp, #28]
    f764:	4373      	muls	r3, r6
    f766:	434b      	muls	r3, r1
    const int16_t* old_state_start = state_ptr + 1;
    f768:	1ca2      	adds	r2, r4, #2
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
    f76a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    while (old_state_start != old_state_end) {
    f76e:	4293      	cmp	r3, r2
    f770:	d004      	beq.n	f77c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x40c>
      *new_state_start++ = *old_state_start++;
    f772:	f832 1b02 	ldrh.w	r1, [r2], #2
    f776:	f822 1c04 	strh.w	r1, [r2, #-4]
    while (old_state_start != old_state_end) {
    f77a:	e7f8      	b.n	f76e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3fe>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    f77c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f780:	9312      	str	r3, [sp, #72]	; 0x48
    int16_t* result_in_batch = state + (n_memory - 1);
    f782:	9b07      	ldr	r3, [sp, #28]
    f784:	f8d8 7004 	ldr.w	r7, [r8, #4]
    f788:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    f78c:	3d01      	subs	r5, #1
    f78e:	006b      	lsls	r3, r5, #1
        result_in_batch += n_memory;
    f790:	3302      	adds	r3, #2
    int16_t* result_in_batch = state + (n_memory - 1);
    f792:	eb04 0245 	add.w	r2, r4, r5, lsl #1
        result_in_batch += n_memory;
    f796:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t* result_in_batch = state + (n_memory - 1);
    f798:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
    f79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f79c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    f7a0:	4353      	muls	r3, r2
    f7a2:	9313      	str	r3, [sp, #76]	; 0x4c
    f7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f7aa:	f04f 0800 	mov.w	r8, #0
    f7ae:	9314      	str	r3, [sp, #80]	; 0x50
    f7b0:	9b05      	ldr	r3, [sp, #20]
    f7b2:	4543      	cmp	r3, r8
    f7b4:	dd15      	ble.n	f7e2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x472>
      const int8_t* matrix_ptr = weight_feature;
    f7b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f7b8:	930d      	str	r3, [sp, #52]	; 0x34
        const int8_t* vector_in_batch = input + b * n_input;
    f7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int r = 0; r < n_filter; r++) {
    f7bc:	f04f 0900 	mov.w	r9, #0
    f7c0:	454e      	cmp	r6, r9
    f7c2:	dd55      	ble.n	f870 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x500>
        int32_t dot_prod = 0;
    f7c4:	2000      	movs	r0, #0
        for (int c = 0; c < n_input; c++) {
    f7c6:	4602      	mov	r2, r0
    f7c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f7ca:	4291      	cmp	r1, r2
    f7cc:	dd36      	ble.n	f83c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4cc>
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
    f7ce:	56b9      	ldrsb	r1, [r7, r2]
    f7d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f7d2:	1b49      	subs	r1, r1, r5
    f7d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f7d6:	f915 c002 	ldrsb.w	ip, [r5, r2]
        for (int c = 0; c < n_input; c++) {
    f7da:	3201      	adds	r2, #1
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
    f7dc:	fb0c 0001 	mla	r0, ip, r1, r0
        for (int c = 0; c < n_input; c++) {
    f7e0:	e7f2      	b.n	f7c8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x458>
    f7e2:	00b3      	lsls	r3, r6, #2
    f7e4:	930d      	str	r3, [sp, #52]	; 0x34
    f7e6:	9b07      	ldr	r3, [sp, #28]
    f7e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    f7ea:	4373      	muls	r3, r6
    f7ec:	005b      	lsls	r3, r3, #1
    f7ee:	930e      	str	r3, [sp, #56]	; 0x38
    f7f0:	9b07      	ldr	r3, [sp, #28]
    f7f2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    f7f6:	004b      	lsls	r3, r1, #1
    f7f8:	930c      	str	r3, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; ++b) {
    f7fa:	2300      	movs	r3, #0
    for (int b = 0; b < n_batch; b++) {
    f7fc:	4684      	mov	ip, r0
    for (int b = 0; b < n_batch; ++b) {
    f7fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f800:	9b05      	ldr	r3, [sp, #20]
    f802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f804:	4293      	cmp	r3, r2
    f806:	dd4a      	ble.n	f89e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x52e>
    f808:	9b08      	ldr	r3, [sp, #32]
    f80a:	f8d3 9004 	ldr.w	r9, [r3, #4]
          b * n_memory * n_filter;
    f80e:	46a0      	mov	r8, r4
      for (int i = 0; i < n_filter; i++) {
    f810:	f1ac 0504 	sub.w	r5, ip, #4
    f814:	f04f 0e00 	mov.w	lr, #0
    f818:	4576      	cmp	r6, lr
    f81a:	dd38      	ble.n	f88e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x51e>
        *scratch_ptr_batch = 0;
    f81c:	2300      	movs	r3, #0
    f81e:	f845 3f04 	str.w	r3, [r5, #4]!
        for (int j = 0; j < n_memory; j++) {
    f822:	9f07      	ldr	r7, [sp, #28]
    f824:	429f      	cmp	r7, r3
    f826:	dd2c      	ble.n	f882 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x512>
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f828:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
    f82c:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
    f830:	682f      	ldr	r7, [r5, #0]
    f832:	fb12 7701 	smlabb	r7, r2, r1, r7
    f836:	602f      	str	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
    f838:	3301      	adds	r3, #1
    f83a:	e7f2      	b.n	f822 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4b2>
    f83c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f83e:	9315      	str	r3, [sp, #84]	; 0x54
    f840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f842:	4413      	add	r3, r2
    f844:	930d      	str	r3, [sp, #52]	; 0x34
        dot_prod = MultiplyByQuantizedMultiplier(
    f846:	9b04      	ldr	r3, [sp, #16]
    f848:	689a      	ldr	r2, [r3, #8]
    f84a:	6819      	ldr	r1, [r3, #0]
    f84c:	f7fa f816 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        *result_in_batch = dot_prod;
    f850:	f647 73ff 	movw	r3, #32767	; 0x7fff
    f854:	4298      	cmp	r0, r3
    f856:	bfa8      	it	ge
    f858:	4618      	movge	r0, r3
    f85a:	4b49      	ldr	r3, [pc, #292]	; (f980 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x610>)
        result_in_batch += n_memory;
    f85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
    f85e:	4298      	cmp	r0, r3
    f860:	bfb8      	it	lt
    f862:	4618      	movlt	r0, r3
    f864:	9b15      	ldr	r3, [sp, #84]	; 0x54
      for (int r = 0; r < n_filter; r++) {
    f866:	f109 0901 	add.w	r9, r9, #1
        *result_in_batch = dot_prod;
    f86a:	8018      	strh	r0, [r3, #0]
        result_in_batch += n_memory;
    f86c:	4413      	add	r3, r2
      for (int r = 0; r < n_filter; r++) {
    f86e:	e7a7      	b.n	f7c0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x450>
    f870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f874:	441a      	add	r2, r3
    f876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f878:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
    f87a:	f108 0801 	add.w	r8, r8, #1
    f87e:	441f      	add	r7, r3
    f880:	e796      	b.n	f7b0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x440>
    f882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int i = 0; i < n_filter; i++) {
    f884:	f10e 0e01 	add.w	lr, lr, #1
    f888:	4499      	add	r9, r3
    f88a:	4498      	add	r8, r3
    f88c:	e7c4      	b.n	f818 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4a8>
    for (int b = 0; b < n_batch; ++b) {
    f88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f890:	3301      	adds	r3, #1
    f892:	930b      	str	r3, [sp, #44]	; 0x2c
    f894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f896:	449c      	add	ip, r3
    f898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f89a:	441c      	add	r4, r3
    f89c:	e7b0      	b.n	f800 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x490>
    if (bias_tensor) {
    f89e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    f8a2:	fb03 f402 	mul.w	r4, r3, r2
    f8a6:	f1bb 0f00 	cmp.w	fp, #0
    f8aa:	d014      	beq.n	f8d6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x566>
    f8ac:	f8db 6004 	ldr.w	r6, [fp, #4]
      for (int i = 0; i < n_batch; ++i) {
    f8b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8b2:	009d      	lsls	r5, r3, #2
    f8b4:	2100      	movs	r1, #0
    f8b6:	9b05      	ldr	r3, [sp, #20]
    f8b8:	428b      	cmp	r3, r1
    f8ba:	dd15      	ble.n	f8e8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x578>
        for (int j = 0; j < n_unit; ++j) {
    f8bc:	2300      	movs	r3, #0
    f8be:	9f06      	ldr	r7, [sp, #24]
    f8c0:	429f      	cmp	r7, r3
    f8c2:	dd05      	ble.n	f8d0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x560>
          *output_ptr++ = *bias_ptr++;
    f8c4:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
    f8c8:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
        for (int j = 0; j < n_unit; ++j) {
    f8cc:	3301      	adds	r3, #1
    f8ce:	e7f6      	b.n	f8be <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x54e>
      for (int i = 0; i < n_batch; ++i) {
    f8d0:	3101      	adds	r1, #1
    f8d2:	442a      	add	r2, r5
    f8d4:	e7ef      	b.n	f8b6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x546>
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f8d6:	465b      	mov	r3, fp
        *output_ptr++ = 0;
    f8d8:	465a      	mov	r2, fp
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f8da:	429c      	cmp	r4, r3
    f8dc:	dd04      	ble.n	f8e8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x578>
        *output_ptr++ = 0;
    f8de:	9909      	ldr	r1, [sp, #36]	; 0x24
    f8e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f8e4:	3301      	adds	r3, #1
    f8e6:	e7f8      	b.n	f8da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56a>
    f8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8ea:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    f8ee:	2300      	movs	r3, #0
    f8f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    f8f4:	461f      	mov	r7, r3
    for (int b = 0; b < n_batch; ++b) {
    f8f6:	9a05      	ldr	r2, [sp, #20]
    f8f8:	42ba      	cmp	r2, r7
    f8fa:	dd1e      	ble.n	f93a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;
    f8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8fe:	4680      	mov	r8, r0
      for (int i = 0; i < n_unit; ++i) {
    f900:	eb02 0583 	add.w	r5, r2, r3, lsl #2
    f904:	f04f 0e00 	mov.w	lr, #0
    f908:	9a06      	ldr	r2, [sp, #24]
    f90a:	4572      	cmp	r2, lr
    f90c:	dd0f      	ble.n	f92e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5be>
        for (int j = 0; j < n_rank; ++j) {
    f90e:	2600      	movs	r6, #0
    f910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f912:	42b2      	cmp	r2, r6
    f914:	dd06      	ble.n	f924 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
          output_temp_ptr[i] += *scratch_ptr_batch++;
    f916:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
    f91a:	682a      	ldr	r2, [r5, #0]
    f91c:	440a      	add	r2, r1
    f91e:	602a      	str	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
    f920:	3601      	adds	r6, #1
    f922:	e7f5      	b.n	f910 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
    f924:	44e0      	add	r8, ip
      for (int i = 0; i < n_unit; ++i) {
    f926:	f10e 0e01 	add.w	lr, lr, #1
    f92a:	3504      	adds	r5, #4
    f92c:	e7ec      	b.n	f908 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x598>
    for (int b = 0; b < n_batch; ++b) {
    f92e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f930:	4410      	add	r0, r2
    f932:	9a06      	ldr	r2, [sp, #24]
    f934:	3701      	adds	r7, #1
    f936:	4413      	add	r3, r2
    f938:	e7dd      	b.n	f8f6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x586>
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f93a:	2500      	movs	r5, #0
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f93c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f940:	42ac      	cmp	r4, r5
    f942:	f77f ae57 	ble.w	f5f4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x284>
      int32_t x2 = MultiplyByQuantizedMultiplier(x1, data.effective_scale_2_a,
    f946:	9b04      	ldr	r3, [sp, #16]
    f948:	68da      	ldr	r2, [r3, #12]
    f94a:	6859      	ldr	r1, [r3, #4]
    f94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f94e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    f952:	f7f9 ff93 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      int32_t x3 = x2 + output_zp;
    f956:	9a10      	ldr	r2, [sp, #64]	; 0x40
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f958:	f8da 3004 	ldr.w	r3, [sl, #4]
      int32_t x3 = x2 + output_zp;
    f95c:	4410      	add	r0, r2
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f95e:	287f      	cmp	r0, #127	; 0x7f
    f960:	bfa8      	it	ge
    f962:	207f      	movge	r0, #127	; 0x7f
    f964:	42b0      	cmp	r0, r6
    f966:	bfb8      	it	lt
    f968:	4630      	movlt	r0, r6
    f96a:	5558      	strb	r0, [r3, r5]
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f96c:	3501      	adds	r5, #1
    f96e:	e7e7      	b.n	f940 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    f970:	0002c42b 	.word	0x0002c42b
    f974:	0002b05c 	.word	0x0002b05c
    f978:	0002c205 	.word	0x0002c205
    f97c:	0002af4f 	.word	0x0002af4f
    f980:	ffff8000 	.word	0xffff8000

0000f984 <_ZN6tflite3ops5micro13Register_SVDFEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    f984:	4800      	ldr	r0, [pc, #0]	; (f988 <_ZN6tflite3ops5micro13Register_SVDFEv+0x4>)
    f986:	4770      	bx	lr
    f988:	20000688 	.word	0x20000688

0000f98c <_ZN6tflite3ops5micro13Register_TANHEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    f98c:	4800      	ldr	r0, [pc, #0]	; (f990 <_ZN6tflite3ops5micro13Register_TANHEv+0x4>)
    f98e:	4770      	bx	lr
    f990:	200006a8 	.word	0x200006a8

0000f994 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    f994:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f998:	1812      	adds	r2, r2, r0
    f99a:	f04f 0300 	mov.w	r3, #0
    f99e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    f9a2:	1c59      	adds	r1, r3, #1
    f9a4:	bf06      	itte	eq
    f9a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f9aa:	4611      	moveq	r1, r2
    f9ac:	2101      	movne	r1, #1
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
    f9ae:	b570      	push	{r4, r5, r6, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
    f9b0:	bf0c      	ite	eq
    f9b2:	4618      	moveq	r0, r3
    f9b4:	2000      	movne	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    f9b6:	1854      	adds	r4, r2, r1
    f9b8:	eb43 0500 	adc.w	r5, r3, r0
    f9bc:	0feb      	lsrs	r3, r5, #31
    f9be:	18e4      	adds	r4, r4, r3
    f9c0:	ea4f 0354 	mov.w	r3, r4, lsr #1
    f9c4:	f145 0500 	adc.w	r5, r5, #0
    f9c8:	ea43 75c5 	orr.w	r5, r3, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    f9cc:	490c      	ldr	r1, [pc, #48]	; (fa00 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>)
    f9ce:	4628      	mov	r0, r5
    f9d0:	f7fb fce0 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    f9d4:	2603      	movs	r6, #3
    f9d6:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    f9da:	4621      	mov	r1, r4
    f9dc:	4628      	mov	r0, r5
    f9de:	f7fb fcd9 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    f9e2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    f9e6:	4620      	mov	r0, r4
    f9e8:	f7fb fcd4 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
    f9ec:	f00e fa92 	bl	1df14 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
  for (int i = 0; i < 3; i++) {
    f9f0:	3e01      	subs	r6, #1
  return a + b;
    f9f2:	4404      	add	r4, r0
  for (int i = 0; i < 3; i++) {
    f9f4:	d1f1      	bne.n	f9da <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
    f9f6:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
    f9fa:	f00e fa8b 	bl	1df14 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
}
    f9fe:	bd70      	pop	{r4, r5, r6, pc}
    fa00:	c3c3c3c4 	.word	0xc3c3c3c4

0000fa04 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    fa04:	680b      	ldr	r3, [r1, #0]
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
    fa06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa0a:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    fa0c:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fa0e:	6885      	ldr	r5, [r0, #8]
    fa10:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    fa12:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
    fa16:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fa1a:	f815 200a 	ldrb.w	r2, [r5, sl]
    fa1e:	eb05 1983 	add.w	r9, r5, r3, lsl #6
    fa22:	f815 3008 	ldrb.w	r3, [r5, r8]
    fa26:	4293      	cmp	r3, r2
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
    fa28:	b097      	sub	sp, #92	; 0x5c
    fa2a:	4604      	mov	r4, r0
  return &context->tensors[node->inputs->data[index]];
    fa2c:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fa30:	d02e      	beq.n	fa90 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    fa32:	f8d0 b014 	ldr.w	fp, [r0, #20]
    fa36:	4610      	mov	r0, r2
    fa38:	f7f0 ff3b 	bl	8b2 <TfLiteTypeGetName>
    fa3c:	4606      	mov	r6, r0
    fa3e:	f815 0008 	ldrb.w	r0, [r5, r8]
    fa42:	f7f0 ff36 	bl	8b2 <TfLiteTypeGetName>
    fa46:	4b71      	ldr	r3, [pc, #452]	; (fc0c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    fa48:	9301      	str	r3, [sp, #4]
    fa4a:	4b71      	ldr	r3, [pc, #452]	; (fc10 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
    fa4c:	9300      	str	r3, [sp, #0]
    fa4e:	e9cd 6002 	strd	r6, r0, [sp, #8]
    fa52:	4a70      	ldr	r2, [pc, #448]	; (fc14 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    fa54:	4970      	ldr	r1, [pc, #448]	; (fc18 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    fa56:	232f      	movs	r3, #47	; 0x2f
    fa58:	4620      	mov	r0, r4
    fa5a:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
    fa5c:	f815 600a 	ldrb.w	r6, [r5, sl]
    fa60:	2e01      	cmp	r6, #1
    fa62:	f040 808e 	bne.w	fb82 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    switch (output->type) {
    fa66:	f815 3008 	ldrb.w	r3, [r5, r8]
    fa6a:	2b01      	cmp	r3, #1
    fa6c:	d177      	bne.n	fb5e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
    fa6e:	4639      	mov	r1, r7
    fa70:	a80a      	add	r0, sp, #40	; 0x28
    fa72:	f005 ff5f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
    fa76:	4649      	mov	r1, r9
    fa78:	a810      	add	r0, sp, #64	; 0x40
    fa7a:	687e      	ldr	r6, [r7, #4]
    fa7c:	f005 ff5a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    fa80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fa82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fa84:	f8d9 5004 	ldr.w	r5, [r9, #4]
    fa88:	429f      	cmp	r7, r3
    fa8a:	d035      	beq.n	faf8 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xf4>
    fa8c:	f00e fda1 	bl	1e5d2 <abort>
  if (input->type == kTfLiteInt8) {
    fa90:	2b09      	cmp	r3, #9
    fa92:	d1e3      	bne.n	fa5c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    fa94:	f8d9 3010 	ldr.w	r3, [r9, #16]
    fa98:	b163      	cbz	r3, fab4 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    fa9a:	2200      	movs	r2, #0
    fa9c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    faa0:	4b5e      	ldr	r3, [pc, #376]	; (fc1c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    faa2:	9301      	str	r3, [sp, #4]
    faa4:	4b5e      	ldr	r3, [pc, #376]	; (fc20 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
    faa6:	9300      	str	r3, [sp, #0]
    faa8:	6946      	ldr	r6, [r0, #20]
    faaa:	4a5a      	ldr	r2, [pc, #360]	; (fc14 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    faac:	495d      	ldr	r1, [pc, #372]	; (fc24 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x220>)
    faae:	2331      	movs	r3, #49	; 0x31
    fab0:	47b0      	blx	r6
    fab2:	e7d3      	b.n	fa5c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
    fab4:	68f8      	ldr	r0, [r7, #12]
    fab6:	f7f1 f8d7 	bl	c68 <__aeabi_f2d>
    const double input_real_multiplier =
    faba:	4b5b      	ldr	r3, [pc, #364]	; (fc28 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x224>)
    fabc:	2200      	movs	r2, #0
    fabe:	f7f1 f92b 	bl	d18 <__aeabi_dmul>
    fac2:	ec41 0b10 	vmov	d0, r0, r1
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    fac6:	a809      	add	r0, sp, #36	; 0x24
    fac8:	f002 fa16 	bl	11ef8 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    facc:	4b57      	ldr	r3, [pc, #348]	; (fc2c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x228>)
    face:	2200      	movs	r2, #0
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    fad0:	ec51 0b10 	vmov	r0, r1, d0
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    fad4:	f7f1 f920 	bl	d18 <__aeabi_dmul>
    fad8:	ec41 0b10 	vmov	d0, r0, r1
    fadc:	f002 fa42 	bl	11f64 <round>
    fae0:	ec51 0b10 	vmov	r0, r1, d0
    fae4:	f7f1 fbb2 	bl	124c <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    fae8:	9909      	ldr	r1, [sp, #36]	; 0x24
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    faea:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    faec:	221f      	movs	r2, #31
    faee:	2004      	movs	r0, #4
    faf0:	f00e fc5a 	bl	1e3a8 <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
    faf4:	9007      	str	r0, [sp, #28]
    faf6:	e7b1      	b.n	fa5c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
  for (int i = 0; i < dims_count; ++i) {
    faf8:	2400      	movs	r4, #0
    fafa:	42a7      	cmp	r7, r4
    fafc:	dd0c      	ble.n	fb18 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x114>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fafe:	4621      	mov	r1, r4
    fb00:	a80a      	add	r0, sp, #40	; 0x28
    fb02:	f005 fedd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    fb06:	4621      	mov	r1, r4
    fb08:	4680      	mov	r8, r0
    fb0a:	a810      	add	r0, sp, #64	; 0x40
    fb0c:	f005 fed8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    fb10:	4580      	cmp	r8, r0
    fb12:	d1bb      	bne.n	fa8c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x88>
  for (int i = 0; i < dims_count; ++i) {
    fb14:	3401      	adds	r4, #1
    fb16:	e7f0      	b.n	fafa <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xf6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fb18:	2f05      	cmp	r7, #5
    fb1a:	bfcc      	ite	gt
    fb1c:	9a0b      	ldrgt	r2, [sp, #44]	; 0x2c
    fb1e:	aa0b      	addle	r2, sp, #44	; 0x2c
    for (int i = 0; i < size_; i++) {
    fb20:	2300      	movs	r3, #0
    int buffer_size = 1;
    fb22:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
    fb26:	429f      	cmp	r7, r3
    fb28:	dc0b      	bgt.n	fb42 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x13e>
    fb2a:	462c      	mov	r4, r5

inline void Tanh(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    fb2c:	2500      	movs	r5, #0
    fb2e:	4545      	cmp	r5, r8
    fb30:	da0d      	bge.n	fb4e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x14a>
  { return __builtin_tanhf(__x); }
    fb32:	ecb6 0a01 	vldmia	r6!, {s0}
    fb36:	f002 fba7 	bl	12288 <tanhf>
    fb3a:	3501      	adds	r5, #1
    float val = input_data[i];
    float result = std::tanh(val);
    output_data[i] = result;
    fb3c:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    fb40:	e7f5      	b.n	fb2e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x12a>
      buffer_size *= dims_data[i];
    fb42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    fb46:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    fb48:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
    fb4c:	e7eb      	b.n	fb26 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x122>
                            GetTensorShape(output),
    fb4e:	a810      	add	r0, sp, #64	; 0x40
    fb50:	f005 feab 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
    fb54:	a80a      	add	r0, sp, #40	; 0x28
    fb56:	f005 fea8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
    fb5a:	2600      	movs	r6, #0
    fb5c:	e00d      	b.n	fb7a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x176>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    fb5e:	4630      	mov	r0, r6
    fb60:	6967      	ldr	r7, [r4, #20]
    fb62:	f7f0 fea6 	bl	8b2 <TfLiteTypeGetName>
    fb66:	9004      	str	r0, [sp, #16]
    fb68:	f815 0008 	ldrb.w	r0, [r5, r8]
    fb6c:	f7f0 fea1 	bl	8b2 <TfLiteTypeGetName>
    fb70:	9a04      	ldr	r2, [sp, #16]
    fb72:	492f      	ldr	r1, [pc, #188]	; (fc30 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    fb74:	4603      	mov	r3, r0
    fb76:	4620      	mov	r0, r4
    fb78:	47b8      	blx	r7
}
    fb7a:	4630      	mov	r0, r6
    fb7c:	b017      	add	sp, #92	; 0x5c
    fb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
    fb82:	2e09      	cmp	r6, #9
    fb84:	d131      	bne.n	fbea <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    switch (output->type) {
    fb86:	f815 3008 	ldrb.w	r3, [r5, r8]
    fb8a:	2b09      	cmp	r3, #9
    fb8c:	d12d      	bne.n	fbea <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1e6>
  for (int i = 0; i < dims->size; ++i) {
    fb8e:	68be      	ldr	r6, [r7, #8]
            input->params.zero_point, data.input_range_radius,
    fb90:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Tanh(
    fb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb94:	f856 8b04 	ldr.w	r8, [r6], #4
  int64_t count = 1;
    fb98:	2401      	movs	r4, #1
    fb9a:	2500      	movs	r5, #0
    fb9c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    fba0:	e9cd 4504 	strd	r4, r5, [sp, #16]
  for (int i = 0; i < dims->size; ++i) {
    fba4:	f04f 0c00 	mov.w	ip, #0
    fba8:	45e0      	cmp	r8, ip
    fbaa:	dd14      	ble.n	fbd6 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    count *= dims->data[i];
    fbac:	f856 eb04 	ldr.w	lr, [r6], #4
    fbb0:	9c04      	ldr	r4, [sp, #16]
    fbb2:	ea4f 7bee 	mov.w	fp, lr, asr #31
    fbb6:	fb04 fa0b 	mul.w	sl, r4, fp
    fbba:	9c05      	ldr	r4, [sp, #20]
    fbbc:	fb0e aa04 	mla	sl, lr, r4, sl
    fbc0:	9c04      	ldr	r4, [sp, #16]
    fbc2:	fba4 450e 	umull	r4, r5, r4, lr
    fbc6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fbca:	9c05      	ldr	r4, [sp, #20]
    fbcc:	4454      	add	r4, sl
    fbce:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
    fbd0:	f10c 0c01 	add.w	ip, ip, #1
    fbd4:	e7e8      	b.n	fba8 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    fbd6:	f8d9 5004 	ldr.w	r5, [r9, #4]
    fbda:	9502      	str	r5, [sp, #8]
    fbdc:	687d      	ldr	r5, [r7, #4]
    fbde:	9c04      	ldr	r4, [sp, #16]
    fbe0:	9501      	str	r5, [sp, #4]
    fbe2:	9400      	str	r4, [sp, #0]
    fbe4:	f00e f9c8 	bl	1df78 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa>
    fbe8:	e7b7      	b.n	fb5a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x156>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    fbea:	4630      	mov	r0, r6
    fbec:	6967      	ldr	r7, [r4, #20]
    fbee:	f7f0 fe60 	bl	8b2 <TfLiteTypeGetName>
    fbf2:	9004      	str	r0, [sp, #16]
    fbf4:	f815 0008 	ldrb.w	r0, [r5, r8]
    fbf8:	f7f0 fe5b 	bl	8b2 <TfLiteTypeGetName>
    fbfc:	9a04      	ldr	r2, [sp, #16]
    fbfe:	490c      	ldr	r1, [pc, #48]	; (fc30 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    fc00:	4603      	mov	r3, r0
    fc02:	4620      	mov	r0, r4
    fc04:	47b8      	blx	r7
    return kTfLiteError;
    fc06:	2601      	movs	r6, #1
    fc08:	e7b7      	b.n	fb7a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x176>
    fc0a:	bf00      	nop
    fc0c:	0002b75c 	.word	0x0002b75c
    fc10:	0002b774 	.word	0x0002b774
    fc14:	0002c43a 	.word	0x0002c43a
    fc18:	0002af8a 	.word	0x0002af8a
    fc1c:	0002c745 	.word	0x0002c745
    fc20:	0002b968 	.word	0x0002b968
    fc24:	0002af4f 	.word	0x0002af4f
    fc28:	41a00000 	.word	0x41a00000
    fc2c:	41e00000 	.word	0x41e00000
    fc30:	0002b4db 	.word	0x0002b4db

0000fc34 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    fc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc38:	b085      	sub	sp, #20
  TfLiteUnpackParams* data =
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fc3a:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    fc3c:	9002      	str	r0, [sp, #8]
  return &context->tensors[node->inputs->data[index]];
    fc3e:	6808      	ldr	r0, [r1, #0]
  TfLiteUnpackParams* data =
    fc40:	694a      	ldr	r2, [r1, #20]
    fc42:	6847      	ldr	r7, [r0, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fc44:	9301      	str	r3, [sp, #4]
    fc46:	01b8      	lsls	r0, r7, #6
    fc48:	eb03 1787 	add.w	r7, r3, r7, lsl #6

  switch (input->type) {
    fc4c:	5c18      	ldrb	r0, [r3, r0]
    fc4e:	1e45      	subs	r5, r0, #1
    fc50:	2d08      	cmp	r5, #8
    fc52:	f200 81b8 	bhi.w	ffc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    fc56:	e8df f015 	tbh	[pc, r5, lsl #1]
    fc5a:	0009      	.short	0x0009
    fc5c:	00de0076 	.word	0x00de0076
    fc60:	01b601b6 	.word	0x01b601b6
    fc64:	01b601b6 	.word	0x01b601b6
    fc68:	014a01b6 	.word	0x014a01b6
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
    fc6c:	e9d2 9200 	ldrd	r9, r2, [r2]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
    fc70:	6848      	ldr	r0, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
    fc72:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->outputs->data[index]];
    fc74:	6841      	ldr	r1, [r0, #4]
  const int dimensions = input_dims->size;
    fc76:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* output_dims = output0->dims;
    fc7a:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fc7c:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fc7e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    axis += NumDimensions(input);
    fc82:	bfb8      	it	lt
    fc84:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fc86:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fc88:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fc8a:	dd0c      	ble.n	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fc8c:	f105 0c04 	add.w	ip, r5, #4
    fc90:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    fc92:	2100      	movs	r1, #0
  int outer_size = 1;
    fc94:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    fc96:	428a      	cmp	r2, r1
    fc98:	dd07      	ble.n	fcaa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
    outer_size *= input_dims->data[i];
    fc9a:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    fc9e:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
    fca0:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    fca4:	e7f7      	b.n	fc96 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
  TFLITE_DCHECK_LT(axis, dimensions);
    fca6:	f00e fc94 	bl	1e5d2 <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
    fcaa:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    fcac:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fcae:	458e      	cmp	lr, r1
    fcb0:	d10c      	bne.n	fccc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
  for (int i = 0; i < output_dims->size; ++i) {
    fcb2:	4621      	mov	r1, r4
    fcb4:	2600      	movs	r6, #0
    fcb6:	f851 eb04 	ldr.w	lr, [r1], #4
  int output_size = 1;
    fcba:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fcbc:	45b6      	cmp	lr, r6
    fcbe:	dd0a      	ble.n	fcd6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    output_size *= output_dims->data[i];
    fcc0:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fcc4:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
    fcc6:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
    fcca:	e7f7      	b.n	fcbc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    copy_size *= input_dims->data[i];
    fccc:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fcd0:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
    fcd2:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    fcd4:	e7eb      	b.n	fcae <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fcd6:	fb02 f105 	mul.w	r1, r2, r5
    fcda:	428c      	cmp	r4, r1
    fcdc:	d1e3      	bne.n	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fcde:	6879      	ldr	r1, [r7, #4]
    fce0:	9102      	str	r1, [sp, #8]
    fce2:	2400      	movs	r4, #0
    fce4:	fb02 f109 	mul.w	r1, r2, r9
    fce8:	3004      	adds	r0, #4
    fcea:	9103      	str	r1, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    fcec:	4627      	mov	r7, r4
    fcee:	45b9      	cmp	r9, r7
    fcf0:	dc03      	bgt.n	fcfa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
    fcf2:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    fcf4:	b005      	add	sp, #20
    fcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcfa:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fcfe:	9b01      	ldr	r3, [sp, #4]
    fd00:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int i = 0; i < output_count; ++i) {
    fd04:	f04f 0600 	mov.w	r6, #0
    fd08:	bf18      	it	ne
    fd0a:	6849      	ldrne	r1, [r1, #4]
    fd0c:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    fd0e:	46b6      	mov	lr, r6
    fd10:	4575      	cmp	r5, lr
    fd12:	dd15      	ble.n	fd40 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>
    fd14:	9b02      	ldr	r3, [sp, #8]
    fd16:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
    fd1a:	eb03 0b8c 	add.w	fp, r3, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fd1e:	f04f 0800 	mov.w	r8, #0
    fd22:	4542      	cmp	r2, r8
    fd24:	dd06      	ble.n	fd34 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
    fd26:	ecfb 7a01 	vldmia	fp!, {s15}
    fd2a:	f108 0801 	add.w	r8, r8, #1
    fd2e:	ecea 7a01 	vstmia	sl!, {s15}
    fd32:	e7f6      	b.n	fd22 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
    for (int k = 0; k < outer_size; ++k) {
    fd34:	9b03      	ldr	r3, [sp, #12]
    fd36:	f10e 0e01 	add.w	lr, lr, #1
    fd3a:	449c      	add	ip, r3
    fd3c:	4416      	add	r6, r2
    fd3e:	e7e7      	b.n	fd10 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdc>
  for (int i = 0; i < output_count; ++i) {
    fd40:	3701      	adds	r7, #1
    fd42:	4414      	add	r4, r2
    fd44:	e7d3      	b.n	fcee <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
    fd46:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
    fd4a:	6848      	ldr	r0, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
    fd4c:	68bd      	ldr	r5, [r7, #8]
    fd4e:	6841      	ldr	r1, [r0, #4]
  const int dimensions = input_dims->size;
    fd50:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* output_dims = output0->dims;
    fd54:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fd56:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fd58:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    axis += NumDimensions(input);
    fd5c:	bfb8      	it	lt
    fd5e:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fd60:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fd62:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fd64:	dd9f      	ble.n	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fd66:	f105 0c04 	add.w	ip, r5, #4
    fd6a:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    fd6c:	2100      	movs	r1, #0
  int outer_size = 1;
    fd6e:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    fd70:	428a      	cmp	r2, r1
    fd72:	dd05      	ble.n	fd80 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    outer_size *= input_dims->data[i];
    fd74:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    fd78:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
    fd7a:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    fd7e:	e7f7      	b.n	fd70 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13c>
  for (int i = axis + 1; i < dimensions; ++i) {
    fd80:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    fd82:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fd84:	458e      	cmp	lr, r1
    fd86:	d10c      	bne.n	fda2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
  for (int i = 0; i < output_dims->size; ++i) {
    fd88:	4621      	mov	r1, r4
    fd8a:	2600      	movs	r6, #0
    fd8c:	f851 eb04 	ldr.w	lr, [r1], #4
  int output_size = 1;
    fd90:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fd92:	45b6      	cmp	lr, r6
    fd94:	dd0a      	ble.n	fdac <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    output_size *= output_dims->data[i];
    fd96:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fd9a:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
    fd9c:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
    fda0:	e7f7      	b.n	fd92 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    copy_size *= input_dims->data[i];
    fda2:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fda6:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
    fda8:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    fdaa:	e7eb      	b.n	fd84 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x150>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fdac:	fb02 f105 	mul.w	r1, r2, r5
    fdb0:	428c      	cmp	r4, r1
    fdb2:	f47f af78 	bne.w	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fdb6:	687b      	ldr	r3, [r7, #4]
    fdb8:	9302      	str	r3, [sp, #8]
    fdba:	2400      	movs	r4, #0
    fdbc:	fb02 f30b 	mul.w	r3, r2, fp
    fdc0:	3004      	adds	r0, #4
    fdc2:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    fdc4:	4627      	mov	r7, r4
    fdc6:	45bb      	cmp	fp, r7
    fdc8:	dd93      	ble.n	fcf2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    fdca:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fdce:	9b01      	ldr	r3, [sp, #4]
    fdd0:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    fdd4:	f04f 0600 	mov.w	r6, #0
    fdd8:	bf18      	it	ne
    fdda:	6849      	ldrne	r1, [r1, #4]
    fddc:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    fdde:	46b6      	mov	lr, r6
    fde0:	4575      	cmp	r5, lr
    fde2:	dd15      	ble.n	fe10 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    fde4:	9b02      	ldr	r3, [sp, #8]
    fde6:	eb01 0986 	add.w	r9, r1, r6, lsl #2
    fdea:	eb03 0a8c 	add.w	sl, r3, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fdee:	f04f 0800 	mov.w	r8, #0
    fdf2:	4542      	cmp	r2, r8
    fdf4:	dd06      	ble.n	fe04 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    fdf6:	f85a 3b04 	ldr.w	r3, [sl], #4
    fdfa:	f849 3b04 	str.w	r3, [r9], #4
    fdfe:	f108 0801 	add.w	r8, r8, #1
    fe02:	e7f6      	b.n	fdf2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
    for (int k = 0; k < outer_size; ++k) {
    fe04:	9b03      	ldr	r3, [sp, #12]
    fe06:	f10e 0e01 	add.w	lr, lr, #1
    fe0a:	449c      	add	ip, r3
    fe0c:	4416      	add	r6, r2
    fe0e:	e7e7      	b.n	fde0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  for (int i = 0; i < output_count; ++i) {
    fe10:	3701      	adds	r7, #1
    fe12:	4414      	add	r4, r2
    fe14:	e7d7      	b.n	fdc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
    fe16:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input->dims;
    fe1a:	68be      	ldr	r6, [r7, #8]
    fe1c:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
    fe1e:	f8d6 e000 	ldr.w	lr, [r6]
    fe22:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
    fe24:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fe26:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fe28:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    axis += NumDimensions(input);
    fe2c:	bfb8      	it	lt
    fe2e:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fe30:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fe32:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fe34:	f77f af37 	ble.w	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fe38:	f106 0c04 	add.w	ip, r6, #4
    fe3c:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    fe3e:	2300      	movs	r3, #0
  int outer_size = 1;
    fe40:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    fe42:	429a      	cmp	r2, r3
    fe44:	dd05      	ble.n	fe52 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    outer_size *= input_dims->data[i];
    fe46:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    fe4a:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
    fe4c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    fe50:	e7f7      	b.n	fe42 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = axis + 1; i < dimensions; ++i) {
    fe52:	3201      	adds	r2, #1
  int copy_size = 1;
    fe54:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fe56:	4596      	cmp	lr, r2
    fe58:	d10c      	bne.n	fe74 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
  for (int i = 0; i < output_dims->size; ++i) {
    fe5a:	462a      	mov	r2, r5
  int output_size = 1;
    fe5c:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fe5e:	f852 eb04 	ldr.w	lr, [r2], #4
    fe62:	2500      	movs	r5, #0
    fe64:	45ae      	cmp	lr, r5
    fe66:	dd0a      	ble.n	fe7e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
    output_size *= output_dims->data[i];
    fe68:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fe6c:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
    fe6e:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
    fe72:	e7f7      	b.n	fe64 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
    copy_size *= input_dims->data[i];
    fe74:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fe78:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
    fe7a:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    fe7c:	e7eb      	b.n	fe56 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fe7e:	fb03 f206 	mul.w	r2, r3, r6
    fe82:	4290      	cmp	r0, r2
    fe84:	f47f af0f 	bne.w	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fe88:	687a      	ldr	r2, [r7, #4]
    fe8a:	9201      	str	r2, [sp, #4]
    fe8c:	2000      	movs	r0, #0
    fe8e:	fb03 f20b 	mul.w	r2, r3, fp
    fe92:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    fe94:	4605      	mov	r5, r0
    fe96:	45ab      	cmp	fp, r5
    fe98:	f77f af2b 	ble.w	fcf2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    fe9c:	684a      	ldr	r2, [r1, #4]
    fe9e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    fea2:	4684      	mov	ip, r0
    fea4:	6857      	ldr	r7, [r2, #4]
    fea6:	9a02      	ldr	r2, [sp, #8]
    fea8:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    feaa:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    feae:	f04f 0700 	mov.w	r7, #0
    feb2:	bf18      	it	ne
    feb4:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    feb6:	46be      	mov	lr, r7
    feb8:	4576      	cmp	r6, lr
    feba:	dd15      	ble.n	fee8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    febc:	9c01      	ldr	r4, [sp, #4]
    febe:	eb02 0907 	add.w	r9, r2, r7
    fec2:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fec6:	f04f 0800 	mov.w	r8, #0
    feca:	4543      	cmp	r3, r8
    fecc:	dd06      	ble.n	fedc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    fece:	f81a 4b01 	ldrb.w	r4, [sl], #1
    fed2:	f809 4b01 	strb.w	r4, [r9], #1
    fed6:	f108 0801 	add.w	r8, r8, #1
    feda:	e7f6      	b.n	feca <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
    for (int k = 0; k < outer_size; ++k) {
    fedc:	9c03      	ldr	r4, [sp, #12]
    fede:	f10e 0e01 	add.w	lr, lr, #1
    fee2:	44a4      	add	ip, r4
    fee4:	441f      	add	r7, r3
    fee6:	e7e7      	b.n	feb8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
  for (int i = 0; i < output_count; ++i) {
    fee8:	3501      	adds	r5, #1
    feea:	4418      	add	r0, r3
    feec:	e7d3      	b.n	fe96 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x262>
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
    feee:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input->dims;
    fef2:	68b8      	ldr	r0, [r7, #8]
    fef4:	684d      	ldr	r5, [r1, #4]
  const int dimensions = input_dims->size;
    fef6:	f8d0 e000 	ldr.w	lr, [r0]
    fefa:	686d      	ldr	r5, [r5, #4]
  const TfLiteIntArray* output_dims = output0->dims;
    fefc:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fefe:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    ff00:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    axis += NumDimensions(input);
    ff04:	bfb8      	it	lt
    ff06:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    ff08:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    ff0a:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    ff0c:	f77f aecb 	ble.w	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    ff10:	f100 0c04 	add.w	ip, r0, #4
    ff14:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    ff16:	2300      	movs	r3, #0
  int outer_size = 1;
    ff18:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    ff1a:	429a      	cmp	r2, r3
    ff1c:	dd05      	ble.n	ff2a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    outer_size *= input_dims->data[i];
    ff1e:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    ff22:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
    ff24:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    ff28:	e7f7      	b.n	ff1a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
  for (int i = axis + 1; i < dimensions; ++i) {
    ff2a:	3201      	adds	r2, #1
  int copy_size = 1;
    ff2c:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    ff2e:	4596      	cmp	lr, r2
    ff30:	d10c      	bne.n	ff4c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>
  for (int i = 0; i < output_dims->size; ++i) {
    ff32:	462a      	mov	r2, r5
  int output_size = 1;
    ff34:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
    ff36:	f852 eb04 	ldr.w	lr, [r2], #4
    ff3a:	2500      	movs	r5, #0
    ff3c:	45ae      	cmp	lr, r5
    ff3e:	dd0a      	ble.n	ff56 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x322>
    output_size *= output_dims->data[i];
    ff40:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
    ff44:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
    ff46:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
    ff4a:	e7f7      	b.n	ff3c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
    copy_size *= input_dims->data[i];
    ff4c:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    ff50:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
    ff52:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    ff54:	e7eb      	b.n	ff2e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    ff56:	fb03 f206 	mul.w	r2, r3, r6
    ff5a:	4290      	cmp	r0, r2
    ff5c:	f47f aea3 	bne.w	fca6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ff60:	687a      	ldr	r2, [r7, #4]
    ff62:	9201      	str	r2, [sp, #4]
    ff64:	2000      	movs	r0, #0
    ff66:	fb03 f20b 	mul.w	r2, r3, fp
    ff6a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    ff6c:	4605      	mov	r5, r0
    ff6e:	45ab      	cmp	fp, r5
    ff70:	f77f aebf 	ble.w	fcf2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    ff74:	684a      	ldr	r2, [r1, #4]
    ff76:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    ff7a:	4684      	mov	ip, r0
    ff7c:	6857      	ldr	r7, [r2, #4]
    ff7e:	9a02      	ldr	r2, [sp, #8]
    ff80:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ff82:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    ff86:	f04f 0700 	mov.w	r7, #0
    ff8a:	bf18      	it	ne
    ff8c:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    ff8e:	46be      	mov	lr, r7
    ff90:	4576      	cmp	r6, lr
    ff92:	dd15      	ble.n	ffc0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38c>
    ff94:	9c01      	ldr	r4, [sp, #4]
    ff96:	eb02 0907 	add.w	r9, r2, r7
    ff9a:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    ff9e:	f04f 0800 	mov.w	r8, #0
    ffa2:	4543      	cmp	r3, r8
    ffa4:	dd06      	ble.n	ffb4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x380>
    ffa6:	f91a 4b01 	ldrsb.w	r4, [sl], #1
    ffaa:	f809 4b01 	strb.w	r4, [r9], #1
    ffae:	f108 0801 	add.w	r8, r8, #1
    ffb2:	e7f6      	b.n	ffa2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    for (int k = 0; k < outer_size; ++k) {
    ffb4:	9c03      	ldr	r4, [sp, #12]
    ffb6:	f10e 0e01 	add.w	lr, lr, #1
    ffba:	44a4      	add	ip, r4
    ffbc:	441f      	add	r7, r3
    ffbe:	e7e7      	b.n	ff90 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>
  for (int i = 0; i < output_count; ++i) {
    ffc0:	3501      	adds	r5, #1
    ffc2:	4418      	add	r0, r3
    ffc4:	e7d3      	b.n	ff6e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by unpack.",
    ffc6:	9b02      	ldr	r3, [sp, #8]
    ffc8:	695d      	ldr	r5, [r3, #20]
    ffca:	f7f0 fc72 	bl	8b2 <TfLiteTypeGetName>
    ffce:	4903      	ldr	r1, [pc, #12]	; (ffdc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a8>)
    ffd0:	4602      	mov	r2, r0
    ffd2:	9802      	ldr	r0, [sp, #8]
    ffd4:	47a8      	blx	r5
      return kTfLiteError;
    ffd6:	2001      	movs	r0, #1
    ffd8:	e68c      	b.n	fcf4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
    ffda:	bf00      	nop
    ffdc:	0002c460 	.word	0x0002c460

0000ffe0 <_ZN6tflite3ops5micro15Register_UNPACKEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ffe0:	4800      	ldr	r0, [pc, #0]	; (ffe4 <_ZN6tflite3ops5micro15Register_UNPACKEv+0x4>)
    ffe2:	4770      	bx	lr
    ffe4:	200006c8 	.word	0x200006c8

0000ffe8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    ffe8:	b570      	push	{r4, r5, r6, lr}
    ffea:	4604      	mov	r4, r0
    ffec:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    ffee:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
    fff2:	428d      	cmp	r5, r1
    fff4:	db05      	blt.n	10002 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    fff6:	460a      	mov	r2, r1
    fff8:	490b      	ldr	r1, [pc, #44]	; (10028 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    fffa:	f00e f950 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
    fffe:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
   10000:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   10002:	68e0      	ldr	r0, [r4, #12]
   10004:	012e      	lsls	r6, r5, #4
   10006:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
   1000a:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
   1000c:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
   1000e:	9b04      	ldr	r3, [sp, #16]
   10010:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
   10012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10016:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
   10018:	3501      	adds	r5, #1
  need_to_calculate_offsets_ = true;
   1001a:	2301      	movs	r3, #1
  ++buffer_count_;
   1001c:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
   1001e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
   10022:	2000      	movs	r0, #0
   10024:	e7ec      	b.n	10000 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   10026:	bf00      	nop
   10028:	0002c486 	.word	0x0002c486

0001002c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   1002c:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   1002e:	4c0d      	ldr	r4, [pc, #52]	; (10064 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
   10030:	6004      	str	r4, [r0, #0]
   10032:	2400      	movs	r4, #0
   10034:	6084      	str	r4, [r0, #8]
   10036:	2401      	movs	r4, #1
   10038:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   1003c:	60c1      	str	r1, [r0, #12]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   1003e:	2428      	movs	r4, #40	; 0x28
   10040:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   10044:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
   10048:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   1004a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
   1004e:	6141      	str	r1, [r0, #20]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   10050:	240c      	movs	r4, #12
  next_free += sizeof(int) * max_buffer_count_;
   10052:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   10056:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   10058:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   1005c:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   1005e:	6242      	str	r2, [r0, #36]	; 0x24
}
   10060:	bd10      	pop	{r4, pc}
   10062:	bf00      	nop
   10064:	00028d44 	.word	0x00028d44

00010068 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   10068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1006a:	4614      	mov	r4, r2
   1006c:	4605      	mov	r5, r0
   1006e:	460f      	mov	r7, r1
   10070:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   10072:	f00e f83d 	bl	1e0f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   10076:	2c00      	cmp	r4, #0
   10078:	db02      	blt.n	10080 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   1007a:	68ab      	ldr	r3, [r5, #8]
   1007c:	42a3      	cmp	r3, r4
   1007e:	dc07      	bgt.n	10090 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
   10080:	68ab      	ldr	r3, [r5, #8]
   10082:	4906      	ldr	r1, [pc, #24]	; (1009c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   10084:	4622      	mov	r2, r4
   10086:	4638      	mov	r0, r7
   10088:	f00e f909 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1008c:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   1008e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   10090:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10092:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   10096:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   10098:	2000      	movs	r0, #0
   1009a:	e7f8      	b.n	1008e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   1009c:	0002c4a3 	.word	0x0002c4a3

000100a0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   100a0:	b538      	push	{r3, r4, r5, lr}
   100a2:	4604      	mov	r4, r0
   100a4:	4610      	mov	r0, r2
   100a6:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   100a8:	b924      	cbnz	r4, 100b4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
   100aa:	4910      	ldr	r1, [pc, #64]	; (100ec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
   100ac:	f00e f8f7 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   100b0:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   100b2:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
   100b4:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   100b6:	2d08      	cmp	r5, #8
   100b8:	d80d      	bhi.n	100d6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
   100ba:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
   100bc:	2300      	movs	r3, #0
   100be:	429d      	cmp	r5, r3
   100c0:	d011      	beq.n	100e6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    FLATBUFFERS_ASSERT(i < size());
   100c2:	6820      	ldr	r0, [r4, #0]
   100c4:	4283      	cmp	r3, r0
   100c6:	d308      	bcc.n	100da <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
   100c8:	4b09      	ldr	r3, [pc, #36]	; (100f0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   100ca:	4a0a      	ldr	r2, [pc, #40]	; (100f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   100cc:	480a      	ldr	r0, [pc, #40]	; (100f8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   100ce:	f240 1101 	movw	r1, #257	; 0x101
   100d2:	f004 f9a1 	bl	14418 <__assert_func>
      TF_LITE_REPORT_ERROR(
   100d6:	4909      	ldr	r1, [pc, #36]	; (100fc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
   100d8:	e7e8      	b.n	100ac <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   100da:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   100de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
   100e2:	3301      	adds	r3, #1
   100e4:	e7eb      	b.n	100be <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   100e6:	2000      	movs	r0, #0
   100e8:	e7e3      	b.n	100b2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   100ea:	bf00      	nop
   100ec:	0002c4cc 	.word	0x0002c4cc
   100f0:	00029ecd 	.word	0x00029ecd
   100f4:	0002a004 	.word	0x0002a004
   100f8:	00029fab 	.word	0x00029fab
   100fc:	0002c4fa 	.word	0x0002c4fa

00010100 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   10100:	b508      	push	{r3, lr}
   10102:	4603      	mov	r3, r0
   10104:	4610      	mov	r0, r2
   10106:	2b0a      	cmp	r3, #10
   10108:	d821      	bhi.n	1014e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4e>
   1010a:	e8df f003 	tbb	[pc, r3]
   1010e:	060a      	.short	0x060a
   10110:	1a181412 	.word	0x1a181412
   10114:	161e101c 	.word	0x161e101c
   10118:	0e          	.byte	0x0e
   10119:	00          	.byte	0x00
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
   1011a:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
   1011c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
   1011e:	2300      	movs	r3, #0
   10120:	e001      	b.n	10126 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
      *type = kTfLiteFloat32;
   10122:	2201      	movs	r2, #1
   10124:	700a      	strb	r2, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
   10126:	4618      	mov	r0, r3
   10128:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
   1012a:	230b      	movs	r3, #11
   1012c:	e7f6      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
   1012e:	2307      	movs	r3, #7
   10130:	e7f4      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
   10132:	2302      	movs	r3, #2
   10134:	e7f2      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
   10136:	2303      	movs	r3, #3
   10138:	e7f0      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
   1013a:	2309      	movs	r3, #9
   1013c:	e7ee      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
   1013e:	2304      	movs	r3, #4
   10140:	e7ec      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
   10142:	2305      	movs	r3, #5
   10144:	e7ea      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
   10146:	2306      	movs	r3, #6
   10148:	e7e8      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
   1014a:	2308      	movs	r3, #8
   1014c:	e7e6      	b.n	1011c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
   1014e:	2200      	movs	r2, #0
   10150:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
   10152:	461a      	mov	r2, r3
   10154:	4902      	ldr	r1, [pc, #8]	; (10160 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>)
   10156:	f00e f8a2 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   1015a:	2301      	movs	r3, #1
   1015c:	e7e3      	b.n	10126 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
   1015e:	bf00      	nop
   10160:	0002c53b 	.word	0x0002c53b

00010164 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseReshape(const Operator* op, BuiltinOperator,
                          ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   10164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10168:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1016a:	461e      	mov	r6, r3
   1016c:	4615      	mov	r5, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1016e:	463b      	mov	r3, r7
   10170:	4632      	mov	r2, r6
   10172:	4629      	mov	r1, r5
                          void** builtin_data) {
   10174:	4680      	mov	r8, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10176:	f00e f8b6 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
   1017a:	6833      	ldr	r3, [r6, #0]
   1017c:	2204      	movs	r2, #4
   1017e:	681b      	ldr	r3, [r3, #0]
   10180:	2124      	movs	r1, #36	; 0x24
   10182:	4630      	mov	r0, r6
   10184:	4798      	blx	r3
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10186:	4604      	mov	r4, r0
   10188:	b978      	cbnz	r0, 101aa <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
   1018a:	4b1b      	ldr	r3, [pc, #108]	; (101f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   1018c:	9301      	str	r3, [sp, #4]
   1018e:	f240 1339 	movw	r3, #313	; 0x139
   10192:	9300      	str	r3, [sp, #0]
   10194:	4629      	mov	r1, r5
   10196:	4628      	mov	r0, r5
   10198:	4b18      	ldr	r3, [pc, #96]	; (101fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   1019a:	4a19      	ldr	r2, [pc, #100]	; (10200 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
   1019c:	f00e f88d 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   101a0:	2501      	movs	r5, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   101a2:	4628      	mov	r0, r5
   101a4:	b003      	add	sp, #12
   101a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
   101aa:	4640      	mov	r0, r8
   101ac:	f00e f8c0 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   101b0:	2811      	cmp	r0, #17
   101b2:	d119      	bne.n	101e8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
   101b4:	4640      	mov	r0, r8
   101b6:	f00e f8a4 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   101ba:	4681      	mov	r9, r0
   101bc:	b1a0      	cbz	r0, 101e8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    auto field_offset = GetOptionalFieldOffset(field);
   101be:	2104      	movs	r1, #4
   101c0:	f005 fa51 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   101c4:	b180      	cbz	r0, 101e8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    auto p = data_ + field_offset;
   101c6:	eb09 0800 	add.w	r8, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   101ca:	f859 9000 	ldr.w	r9, [r9, r0]
    if (new_shape != nullptr) {
   101ce:	eb18 0009 	adds.w	r0, r8, r9
   101d2:	d009      	beq.n	101e8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
      TF_LITE_ENSURE_STATUS(
   101d4:	462a      	mov	r2, r5
   101d6:	4b0b      	ldr	r3, [pc, #44]	; (10204 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>)
   101d8:	4621      	mov	r1, r4
   101da:	f7ff ff61 	bl	100a0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   101de:	4605      	mov	r5, r0
   101e0:	b928      	cbnz	r0, 101ee <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
      params->num_dimensions = new_shape->size();
   101e2:	f858 3009 	ldr.w	r3, [r8, r9]
   101e6:	6223      	str	r3, [r4, #32]
  *builtin_data = params.release();
   101e8:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   101ea:	2500      	movs	r5, #0
   101ec:	e7d9      	b.n	101a2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
   101ee:	4621      	mov	r1, r4
   101f0:	4630      	mov	r0, r6
   101f2:	f00e f883 	bl	1e2fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   101f6:	e7d4      	b.n	101a2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   101f8:	0002c592 	.word	0x0002c592
   101fc:	0002c55f 	.word	0x0002c55f
   10200:	0002a6ae 	.word	0x0002a6ae
   10204:	0002c5a4 	.word	0x0002c5a4

00010208 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1020a:	9f08      	ldr	r7, [sp, #32]
   1020c:	461c      	mov	r4, r3
   1020e:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10210:	463b      	mov	r3, r7
   10212:	4622      	mov	r2, r4
   10214:	4631      	mov	r1, r6
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10216:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10218:	f00e f865 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1021c:	6823      	ldr	r3, [r4, #0]
   1021e:	4620      	mov	r0, r4
   10220:	681b      	ldr	r3, [r3, #0]
   10222:	2204      	movs	r2, #4
   10224:	2118      	movs	r1, #24
   10226:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10228:	4604      	mov	r4, r0
   1022a:	b960      	cbnz	r0, 10246 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   1022c:	4b22      	ldr	r3, [pc, #136]	; (102b8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   1022e:	9301      	str	r3, [sp, #4]
   10230:	23bd      	movs	r3, #189	; 0xbd
   10232:	9300      	str	r3, [sp, #0]
   10234:	4a21      	ldr	r2, [pc, #132]	; (102bc <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   10236:	4b22      	ldr	r3, [pc, #136]	; (102c0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   10238:	4631      	mov	r1, r6
   1023a:	4630      	mov	r0, r6
   1023c:	f00e f83d 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10240:	2001      	movs	r0, #1
}
   10242:	b003      	add	sp, #12
   10244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
   10246:	4628      	mov	r0, r5
   10248:	f00e f872 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1024c:	2801      	cmp	r0, #1
   1024e:	4606      	mov	r6, r0
   10250:	d12f      	bne.n	102b2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
   10252:	4628      	mov	r0, r5
   10254:	f00e f855 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10258:	4605      	mov	r5, r0
   1025a:	b350      	cbz	r0, 102b2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   1025c:	2200      	movs	r2, #0
   1025e:	2104      	movs	r1, #4
   10260:	f00e f875 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   10264:	b2c0      	uxtb	r0, r0
   10266:	f00e f836 	bl	1e2d6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   1026a:	2200      	movs	r2, #0
   1026c:	7020      	strb	r0, [r4, #0]
   1026e:	2106      	movs	r1, #6
   10270:	4628      	mov	r0, r5
   10272:	f00e f863 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10276:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
   10278:	6060      	str	r0, [r4, #4]
   1027a:	2108      	movs	r1, #8
   1027c:	4628      	mov	r0, r5
   1027e:	f00e f85d 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10282:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
   10284:	60a0      	str	r0, [r4, #8]
   10286:	210a      	movs	r1, #10
   10288:	4628      	mov	r0, r5
   1028a:	f00e f860 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   1028e:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10290:	1e5a      	subs	r2, r3, #1
   10292:	2a04      	cmp	r2, #4
   10294:	bf88      	it	hi
   10296:	2300      	movhi	r3, #0
    params->activation =
   10298:	7323      	strb	r3, [r4, #12]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   1029a:	4632      	mov	r2, r6
   1029c:	210c      	movs	r1, #12
   1029e:	4628      	mov	r0, r5
   102a0:	f00e f84c 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   102a4:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
   102a6:	6120      	str	r0, [r4, #16]
   102a8:	210e      	movs	r1, #14
   102aa:	4628      	mov	r0, r5
   102ac:	f00e f846 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   102b0:	6160      	str	r0, [r4, #20]
  *builtin_data = params.release();
   102b2:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   102b4:	2000      	movs	r0, #0
   102b6:	e7c4      	b.n	10242 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   102b8:	0002c592 	.word	0x0002c592
   102bc:	0002a6ae 	.word	0x0002a6ae
   102c0:	0002c55f 	.word	0x0002c55f

000102c4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   102c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   102c6:	9f08      	ldr	r7, [sp, #32]
   102c8:	461c      	mov	r4, r3
   102ca:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   102cc:	463b      	mov	r3, r7
   102ce:	4622      	mov	r2, r4
   102d0:	4631      	mov	r1, r6
                                  void** builtin_data) {
   102d2:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   102d4:	f00e f807 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   102d8:	6823      	ldr	r3, [r4, #0]
   102da:	4620      	mov	r0, r4
   102dc:	681b      	ldr	r3, [r3, #0]
   102de:	2204      	movs	r2, #4
   102e0:	211c      	movs	r1, #28
   102e2:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   102e4:	4604      	mov	r4, r0
   102e6:	b960      	cbnz	r0, 10302 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   102e8:	4b25      	ldr	r3, [pc, #148]	; (10380 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   102ea:	9301      	str	r3, [sp, #4]
   102ec:	23df      	movs	r3, #223	; 0xdf
   102ee:	9300      	str	r3, [sp, #0]
   102f0:	4a24      	ldr	r2, [pc, #144]	; (10384 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   102f2:	4b25      	ldr	r3, [pc, #148]	; (10388 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   102f4:	4631      	mov	r1, r6
   102f6:	4630      	mov	r0, r6
   102f8:	f00d ffdf 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   102fc:	2001      	movs	r0, #1
}
   102fe:	b003      	add	sp, #12
   10300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   10302:	4628      	mov	r0, r5
   10304:	f00e f814 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10308:	2802      	cmp	r0, #2
   1030a:	d135      	bne.n	10378 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
   1030c:	4628      	mov	r0, r5
   1030e:	f00d fff8 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10312:	4605      	mov	r5, r0
   10314:	b380      	cbz	r0, 10378 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   10316:	2200      	movs	r2, #0
   10318:	2104      	movs	r1, #4
   1031a:	f00e f818 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   1031e:	b2c0      	uxtb	r0, r0
   10320:	f00d ffd9 	bl	1e2d6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   10324:	2200      	movs	r2, #0
   10326:	7020      	strb	r0, [r4, #0]
   10328:	2106      	movs	r1, #6
   1032a:	4628      	mov	r0, r5
   1032c:	f00e f806 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10330:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
   10332:	6060      	str	r0, [r4, #4]
   10334:	2108      	movs	r1, #8
   10336:	4628      	mov	r0, r5
   10338:	f00e f800 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   1033c:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
   1033e:	60a0      	str	r0, [r4, #8]
   10340:	210a      	movs	r1, #10
   10342:	4628      	mov	r0, r5
   10344:	f00d fffa 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10348:	2200      	movs	r2, #0
    params->depth_multiplier = schema_params->depth_multiplier();
   1034a:	60e0      	str	r0, [r4, #12]
   1034c:	210c      	movs	r1, #12
   1034e:	4628      	mov	r0, r5
   10350:	f00d fffd 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10354:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10356:	1e43      	subs	r3, r0, #1
   10358:	2b04      	cmp	r3, #4
   1035a:	bf88      	it	hi
   1035c:	2000      	movhi	r0, #0
    params->activation =
   1035e:	7420      	strb	r0, [r4, #16]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   10360:	2201      	movs	r2, #1
   10362:	210e      	movs	r1, #14
   10364:	4628      	mov	r0, r5
   10366:	f00d ffe9 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   1036a:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
   1036c:	6160      	str	r0, [r4, #20]
   1036e:	2110      	movs	r1, #16
   10370:	4628      	mov	r0, r5
   10372:	f00d ffe3 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   10376:	61a0      	str	r0, [r4, #24]
  *builtin_data = params.release();
   10378:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   1037a:	2000      	movs	r0, #0
   1037c:	e7bf      	b.n	102fe <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   1037e:	bf00      	nop
   10380:	0002c592 	.word	0x0002c592
   10384:	0002a6ae 	.word	0x0002a6ae
   10388:	0002c55f 	.word	0x0002c55f

0001038c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
   1038c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10390:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10394:	461d      	mov	r5, r3
   10396:	4617      	mov	r7, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10398:	4643      	mov	r3, r8
   1039a:	462a      	mov	r2, r5
   1039c:	4639      	mov	r1, r7
                                 void** builtin_data) {
   1039e:	4606      	mov	r6, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   103a0:	f00d ffa1 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   103a4:	682b      	ldr	r3, [r5, #0]
   103a6:	2201      	movs	r2, #1
   103a8:	681b      	ldr	r3, [r3, #0]
   103aa:	2104      	movs	r1, #4
   103ac:	4628      	mov	r0, r5
   103ae:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   103b0:	4604      	mov	r4, r0
   103b2:	b970      	cbnz	r0, 103d2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
   103b4:	4b25      	ldr	r3, [pc, #148]	; (1044c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   103b6:	9301      	str	r3, [sp, #4]
   103b8:	f240 130b 	movw	r3, #267	; 0x10b
   103bc:	9300      	str	r3, [sp, #0]
   103be:	4a24      	ldr	r2, [pc, #144]	; (10450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   103c0:	4b24      	ldr	r3, [pc, #144]	; (10454 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
   103c2:	4639      	mov	r1, r7
   103c4:	4638      	mov	r0, r7
   103c6:	f00d ff78 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
        return kTfLiteError;
   103ca:	2001      	movs	r0, #1
}
   103cc:	b003      	add	sp, #12
   103ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
   103d2:	4630      	mov	r0, r6
   103d4:	f00d ffac 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   103d8:	2808      	cmp	r0, #8
   103da:	4681      	mov	r9, r0
   103dc:	d132      	bne.n	10444 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
   103de:	4630      	mov	r0, r6
   103e0:	f00d ff8f 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   103e4:	4606      	mov	r6, r0
   103e6:	b368      	cbz	r0, 10444 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   103e8:	2200      	movs	r2, #0
   103ea:	2104      	movs	r1, #4
   103ec:	f00d ffaf 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   103f0:	b2c3      	uxtb	r3, r0
  switch (activation) {
   103f2:	1e5a      	subs	r2, r3, #1
   103f4:	2a04      	cmp	r2, #4
   103f6:	bf88      	it	hi
   103f8:	2300      	movhi	r3, #0
    params->activation =
   103fa:	7023      	strb	r3, [r4, #0]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   103fc:	2200      	movs	r2, #0
   103fe:	4649      	mov	r1, r9
   10400:	4630      	mov	r0, r6
   10402:	f00d ff8c 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10406:	3800      	subs	r0, #0
   10408:	bf18      	it	ne
   1040a:	2001      	movne	r0, #1
   1040c:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   1040e:	2200      	movs	r2, #0
   10410:	210a      	movs	r1, #10
   10412:	4630      	mov	r0, r6
   10414:	f00d ff83 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10418:	3800      	subs	r0, #0
   1041a:	bf18      	it	ne
   1041c:	2001      	movne	r0, #1
   1041e:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   10420:	2200      	movs	r2, #0
   10422:	2106      	movs	r1, #6
   10424:	4630      	mov	r0, r6
   10426:	f00d ff92 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
   1042a:	b150      	cbz	r0, 10442 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6>
   1042c:	2801      	cmp	r0, #1
   1042e:	d008      	beq.n	10442 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6>
        TF_LITE_REPORT_ERROR(error_reporter,
   10430:	4909      	ldr	r1, [pc, #36]	; (10458 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
   10432:	4638      	mov	r0, r7
   10434:	f00d ff33 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
   10438:	4621      	mov	r1, r4
   1043a:	4628      	mov	r0, r5
   1043c:	f00d ff5e 	bl	1e2fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   10440:	e7c3      	b.n	103ca <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
        params->weights_format =
   10442:	7060      	strb	r0, [r4, #1]
  *builtin_data = params.release();
   10444:	f8c8 4000 	str.w	r4, [r8]
  return kTfLiteOk;
   10448:	2000      	movs	r0, #0
   1044a:	e7bf      	b.n	103cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   1044c:	0002c592 	.word	0x0002c592
   10450:	0002a6ae 	.word	0x0002a6ae
   10454:	0002c55f 	.word	0x0002c55f
   10458:	0002c5ac 	.word	0x0002c5ac

0001045c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSvdf(const Operator* op, BuiltinOperator,
                       ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   1045c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1045e:	9f08      	ldr	r7, [sp, #32]
   10460:	461c      	mov	r4, r3
   10462:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10464:	463b      	mov	r3, r7
   10466:	4622      	mov	r2, r4
   10468:	4631      	mov	r1, r6
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   1046a:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1046c:	f00d ff3b 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   10470:	6823      	ldr	r3, [r4, #0]
   10472:	4620      	mov	r0, r4
   10474:	681b      	ldr	r3, [r3, #0]
   10476:	2204      	movs	r2, #4
   10478:	2108      	movs	r1, #8
   1047a:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSVDFParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSVDFParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1047c:	4604      	mov	r4, r0
   1047e:	b968      	cbnz	r0, 1049c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   10480:	4b1a      	ldr	r3, [pc, #104]	; (104ec <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   10482:	9301      	str	r3, [sp, #4]
   10484:	f44f 73c1 	mov.w	r3, #386	; 0x182
   10488:	9300      	str	r3, [sp, #0]
   1048a:	4a19      	ldr	r2, [pc, #100]	; (104f0 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   1048c:	4b19      	ldr	r3, [pc, #100]	; (104f4 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   1048e:	4631      	mov	r1, r6
   10490:	4630      	mov	r0, r6
   10492:	f00d ff12 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10496:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   10498:	b003      	add	sp, #12
   1049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
   1049c:	4628      	mov	r0, r5
   1049e:	f00d ff47 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   104a2:	2806      	cmp	r0, #6
   104a4:	4606      	mov	r6, r0
   104a6:	d11d      	bne.n	104e4 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
   104a8:	4628      	mov	r0, r5
   104aa:	f00d ff2a 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   104ae:	4605      	mov	r5, r0
   104b0:	b1c0      	cbz	r0, 104e4 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    return GetField<int32_t>(VT_RANK, 0);
   104b2:	2200      	movs	r2, #0
   104b4:	2104      	movs	r1, #4
   104b6:	f00d ff41 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   104ba:	2200      	movs	r2, #0
    params->rank = schema_params->rank();
   104bc:	6020      	str	r0, [r4, #0]
   104be:	4631      	mov	r1, r6
   104c0:	4628      	mov	r0, r5
   104c2:	f00d ff44 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   104c6:	b2c3      	uxtb	r3, r0
  switch (activation) {
   104c8:	1e5a      	subs	r2, r3, #1
   104ca:	2a04      	cmp	r2, #4
   104cc:	bf88      	it	hi
   104ce:	2300      	movhi	r3, #0
    params->activation =
   104d0:	7123      	strb	r3, [r4, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   104d2:	2200      	movs	r2, #0
   104d4:	2108      	movs	r1, #8
   104d6:	4628      	mov	r0, r5
   104d8:	f00d ff21 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   104dc:	3800      	subs	r0, #0
   104de:	bf18      	it	ne
   104e0:	2001      	movne	r0, #1
   104e2:	7160      	strb	r0, [r4, #5]
  *builtin_data = params.release();
   104e4:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   104e6:	2000      	movs	r0, #0
   104e8:	e7d6      	b.n	10498 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
   104ea:	bf00      	nop
   104ec:	0002c592 	.word	0x0002c592
   104f0:	0002a6ae 	.word	0x0002a6ae
   104f4:	0002c55f 	.word	0x0002c55f

000104f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   104f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104fa:	9f08      	ldr	r7, [sp, #32]
   104fc:	461c      	mov	r4, r3
   104fe:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10500:	463b      	mov	r3, r7
   10502:	4622      	mov	r2, r4
   10504:	4631      	mov	r1, r6
                          void** builtin_data) {
   10506:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10508:	f00d feed 	bl	1e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1050c:	6823      	ldr	r3, [r4, #0]
   1050e:	2204      	movs	r2, #4
   10510:	4620      	mov	r0, r4
   10512:	681b      	ldr	r3, [r3, #0]
   10514:	4611      	mov	r1, r2
   10516:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10518:	4604      	mov	r4, r0
   1051a:	b968      	cbnz	r0, 10538 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   1051c:	4b10      	ldr	r3, [pc, #64]	; (10560 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   1051e:	9301      	str	r3, [sp, #4]
   10520:	f240 1369 	movw	r3, #361	; 0x169
   10524:	9300      	str	r3, [sp, #0]
   10526:	4a0f      	ldr	r2, [pc, #60]	; (10564 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   10528:	4b0f      	ldr	r3, [pc, #60]	; (10568 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   1052a:	4631      	mov	r1, r6
   1052c:	4630      	mov	r0, r6
   1052e:	f00d fec4 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10532:	2001      	movs	r0, #1
}
   10534:	b003      	add	sp, #12
   10536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
   10538:	4628      	mov	r0, r5
   1053a:	f00d fef9 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1053e:	2809      	cmp	r0, #9
   10540:	d10a      	bne.n	10558 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   10542:	4628      	mov	r0, r5
   10544:	f00d fedd 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10548:	b130      	cbz	r0, 10558 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return GetField<float>(VT_BETA, 0.0f);
   1054a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 1056c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
   1054e:	2104      	movs	r1, #4
   10550:	f00d ff06 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
   10554:	ed84 0a00 	vstr	s0, [r4]
  *builtin_data = params.release();
   10558:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   1055a:	2000      	movs	r0, #0
   1055c:	e7ea      	b.n	10534 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
   1055e:	bf00      	nop
   10560:	0002c592 	.word	0x0002c592
   10564:	0002a6ae 	.word	0x0002a6ae
   10568:	0002c55f 	.word	0x0002c55f
   1056c:	00000000 	.word	0x00000000

00010570 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseOpData(const Operator* op, BuiltinOperator op_type,
                         ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10574:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   10576:	461d      	mov	r5, r3
        return kTfLiteCombinerTypeSum;
    }
  };

  SafeBuiltinDataAllocator safe_allocator(allocator);
  *builtin_data = nullptr;
   10578:	2300      	movs	r3, #0
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   1057a:	4607      	mov	r7, r0
   1057c:	460c      	mov	r4, r1
   1057e:	4690      	mov	r8, r2
  *builtin_data = nullptr;
   10580:	6033      	str	r3, [r6, #0]
  switch (op_type) {
   10582:	297e      	cmp	r1, #126	; 0x7e
   10584:	f200 8386 	bhi.w	10c94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
   10588:	e8df f011 	tbh	[pc, r1, lsl #1]
   1058c:	01160279 	.word	0x01160279
   10590:	007f022a 	.word	0x007f022a
   10594:	04df0087 	.word	0x04df0087
   10598:	00ca00ca 	.word	0x00ca00ca
   1059c:	008f00ca 	.word	0x008f00ca
   105a0:	02e600ca 	.word	0x02e600ca
   105a4:	030a0116 	.word	0x030a0116
   105a8:	00f000ca 	.word	0x00f000ca
   105ac:	01160342 	.word	0x01160342
   105b0:	00ca0255 	.word	0x00ca0255
   105b4:	00ca00ca 	.word	0x00ca00ca
   105b8:	04360097 	.word	0x04360097
   105bc:	009f01cf 	.word	0x009f01cf
   105c0:	00a704bf 	.word	0x00a704bf
   105c4:	00ca00ca 	.word	0x00ca00ca
   105c8:	00ca0490 	.word	0x00ca0490
   105cc:	01fd00ca 	.word	0x01fd00ca
   105d0:	015a00ca 	.word	0x015a00ca
   105d4:	00ca04ff 	.word	0x00ca04ff
   105d8:	00ca00ca 	.word	0x00ca00ca
   105dc:	02c20522 	.word	0x02c20522
   105e0:	058d029e 	.word	0x058d029e
   105e4:	05c00396 	.word	0x05c00396
   105e8:	00ca018f 	.word	0x00ca018f
   105ec:	054600ca 	.word	0x054600ca
   105f0:	06bf00ca 	.word	0x06bf00ca
   105f4:	00af03e6 	.word	0x00af03e6
   105f8:	00ca00ca 	.word	0x00ca00ca
   105fc:	00ca05fa 	.word	0x00ca05fa
   10600:	00ca00ca 	.word	0x00ca00ca
   10604:	00ca00ca 	.word	0x00ca00ca
   10608:	00ca00ca 	.word	0x00ca00ca
   1060c:	00ca00ca 	.word	0x00ca00ca
   10610:	062f00ca 	.word	0x062f00ca
   10614:	00ca0660 	.word	0x00ca0660
   10618:	00ca00ca 	.word	0x00ca00ca
   1061c:	00ca00ca 	.word	0x00ca00ca
   10620:	00ca0522 	.word	0x00ca0522
   10624:	068400ca 	.word	0x068400ca
   10628:	061c00ca 	.word	0x061c00ca
   1062c:	052206c4 	.word	0x052206c4
   10630:	06970522 	.word	0x06970522
   10634:	070800ca 	.word	0x070800ca
   10638:	00ca00ca 	.word	0x00ca00ca
   1063c:	05220729 	.word	0x05220729
   10640:	052200ca 	.word	0x052200ca
   10644:	00ca00ca 	.word	0x00ca00ca
   10648:	00ca00ca 	.word	0x00ca00ca
   1064c:	046300ca 	.word	0x046300ca
   10650:	00ca0751 	.word	0x00ca0751
   10654:	00ca0774 	.word	0x00ca0774
   10658:	0799056c 	.word	0x0799056c
   1065c:	00ca00ca 	.word	0x00ca00ca
   10660:	00ca00ca 	.word	0x00ca00ca
   10664:	00ca00ca 	.word	0x00ca00ca
   10668:	00ca00ca 	.word	0x00ca00ca
   1066c:	00ca07be 	.word	0x00ca07be
   10670:	00ca00ca 	.word	0x00ca00ca
   10674:	00ca00ca 	.word	0x00ca00ca
   10678:	080e07e6 	.word	0x080e07e6
   1067c:	00ca00ca 	.word	0x00ca00ca
   10680:	00ca00ca 	.word	0x00ca00ca
   10684:	00ca00ca 	.word	0x00ca00ca
   10688:	0836      	.short	0x0836
    case BuiltinOperator_CONV_2D: {
      return ParseConv2D(op, op_type, error_reporter, allocator, builtin_data);
   1068a:	462b      	mov	r3, r5
   1068c:	2103      	movs	r1, #3
   1068e:	960a      	str	r6, [sp, #40]	; 0x28
    case BuiltinOperator_DENSIFY:
    case BuiltinOperator_SEGMENT_SUM:
      return kTfLiteOk;
  }
  return kTfLiteError;
}  // NOLINT[readability/fn_size]
   10690:	b003      	add	sp, #12
   10692:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseConv2D(op, op_type, error_reporter, allocator, builtin_data);
   10696:	f7ff bdb7 	b.w	10208 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseDepthwiseConv2D(op, op_type, error_reporter, allocator,
   1069a:	462b      	mov	r3, r5
   1069c:	2104      	movs	r1, #4
   1069e:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106a0:	b003      	add	sp, #12
   106a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseDepthwiseConv2D(op, op_type, error_reporter, allocator,
   106a6:	f7ff be0d 	b.w	102c4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseFullyConnected(op, op_type, error_reporter, allocator,
   106aa:	462b      	mov	r3, r5
   106ac:	2109      	movs	r1, #9
   106ae:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106b0:	b003      	add	sp, #12
   106b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseFullyConnected(op, op_type, error_reporter, allocator,
   106b6:	f7ff be69 	b.w	1038c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseReshape(op, op_type, error_reporter, allocator, builtin_data);
   106ba:	462b      	mov	r3, r5
   106bc:	2116      	movs	r1, #22
   106be:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106c0:	b003      	add	sp, #12
   106c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseReshape(op, op_type, error_reporter, allocator, builtin_data);
   106c6:	f7ff bd4d 	b.w	10164 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseSoftmax(op, op_type, error_reporter, allocator, builtin_data);
   106ca:	462b      	mov	r3, r5
   106cc:	2119      	movs	r1, #25
   106ce:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106d0:	b003      	add	sp, #12
   106d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseSoftmax(op, op_type, error_reporter, allocator, builtin_data);
   106d6:	f7ff bf0f 	b.w	104f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseSvdf(op, op_type, error_reporter, allocator, builtin_data);
   106da:	462b      	mov	r3, r5
   106dc:	211b      	movs	r1, #27
   106de:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106e0:	b003      	add	sp, #12
   106e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseSvdf(op, op_type, error_reporter, allocator, builtin_data);
   106e6:	f7ff beb9 	b.w	1045c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   106ea:	682b      	ldr	r3, [r5, #0]
   106ec:	2201      	movs	r2, #1
   106ee:	681b      	ldr	r3, [r3, #0]
   106f0:	2102      	movs	r1, #2
   106f2:	4628      	mov	r0, r5
   106f4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   106f6:	4681      	mov	r9, r0
   106f8:	b958      	cbnz	r0, 10712 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
   106fa:	4bb6      	ldr	r3, [pc, #728]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   106fc:	9301      	str	r3, [sp, #4]
   106fe:	f240 13d7 	movw	r3, #471	; 0x1d7
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10702:	9300      	str	r3, [sp, #0]
   10704:	4ab4      	ldr	r2, [pc, #720]	; (109d8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x468>)
   10706:	4bb5      	ldr	r3, [pc, #724]	; (109dc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46c>)
   10708:	4641      	mov	r1, r8
   1070a:	4640      	mov	r0, r8
   1070c:	f00d fdd5 	bl	1e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10710:	e2c0      	b.n	10c94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
    return builtin_options_type() == tflite::BuiltinOptions_CastOptions ? static_cast<const tflite::CastOptions *>(builtin_options()) : nullptr;
   10712:	4638      	mov	r0, r7
   10714:	f00d fe0c 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10718:	2825      	cmp	r0, #37	; 0x25
   1071a:	d003      	beq.n	10724 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b4>
      *builtin_data = params.release();
   1071c:	f8c6 9000 	str.w	r9, [r6]
      return ParseDequantize(op, op_type, error_reporter, allocator,
   10720:	2400      	movs	r4, #0
   10722:	e1cd      	b.n	10ac0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
   10724:	4638      	mov	r0, r7
   10726:	f00d fdec 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_CastOptions()) {
   1072a:	4607      	mov	r7, r0
   1072c:	2800      	cmp	r0, #0
   1072e:	d0f5      	beq.n	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
   10730:	2200      	movs	r2, #0
   10732:	2104      	movs	r1, #4
   10734:	f00d fe0b 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->in_data_type(),
   10738:	4642      	mov	r2, r8
   1073a:	4649      	mov	r1, r9
   1073c:	b2c0      	uxtb	r0, r0
   1073e:	f7ff fcdf 	bl	10100 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   10742:	4604      	mov	r4, r0
   10744:	b968      	cbnz	r0, 10762 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
   10746:	4602      	mov	r2, r0
   10748:	2106      	movs	r1, #6
   1074a:	4638      	mov	r0, r7
   1074c:	f00d fdff 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->out_data_type(),
   10750:	4642      	mov	r2, r8
   10752:	f109 0101 	add.w	r1, r9, #1
        TF_LITE_ENSURE_STATUS(ConvertTensorType(
   10756:	b2c0      	uxtb	r0, r0
   10758:	f7ff fcd2 	bl	10100 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   1075c:	4604      	mov	r4, r0
   1075e:	2800      	cmp	r0, #0
   10760:	d0dc      	beq.n	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   10762:	4649      	mov	r1, r9
   10764:	4628      	mov	r0, r5
   10766:	f00d fdc9 	bl	1e2fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   1076a:	e1a9      	b.n	10ac0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
   1076c:	682b      	ldr	r3, [r5, #0]
   1076e:	2201      	movs	r2, #1
   10770:	681b      	ldr	r3, [r3, #0]
   10772:	4611      	mov	r1, r2
   10774:	4628      	mov	r0, r5
   10776:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10778:	4604      	mov	r4, r0
   1077a:	b920      	cbnz	r0, 10786 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
   1077c:	4b95      	ldr	r3, [pc, #596]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   1077e:	9301      	str	r3, [sp, #4]
   10780:	f240 13e5 	movw	r3, #485	; 0x1e5
   10784:	e7bd      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
   10786:	4638      	mov	r0, r7
   10788:	f00d fdd2 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1078c:	2804      	cmp	r0, #4
   1078e:	4605      	mov	r5, r0
   10790:	d10e      	bne.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10792:	4638      	mov	r0, r7
   10794:	f00d fdb5 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lshParams =
   10798:	b150      	cbz	r0, 107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
   1079a:	2200      	movs	r2, #0
   1079c:	4629      	mov	r1, r5
   1079e:	f00d fdd6 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   107a2:	2801      	cmp	r0, #1
   107a4:	d006      	beq.n	107b4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x244>
   107a6:	2802      	cmp	r0, #2
   107a8:	bf14      	ite	ne
   107aa:	2300      	movne	r3, #0
   107ac:	2302      	moveq	r3, #2
        params->type = parseLSHProjectionType(lshParams->type());
   107ae:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   107b0:	6034      	str	r4, [r6, #0]
      return kTfLiteOk;
   107b2:	e7b5      	b.n	10720 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b0>
        return kTfLiteLshProjectionSparse;
   107b4:	4603      	mov	r3, r0
   107b6:	e7fa      	b.n	107ae <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x23e>
   107b8:	682b      	ldr	r3, [r5, #0]
   107ba:	2204      	movs	r2, #4
   107bc:	681b      	ldr	r3, [r3, #0]
   107be:	2128      	movs	r1, #40	; 0x28
   107c0:	4628      	mov	r0, r5
   107c2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   107c4:	4604      	mov	r4, r0
   107c6:	b920      	cbnz	r0, 107d2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x262>
   107c8:	4b82      	ldr	r3, [pc, #520]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   107ca:	9301      	str	r3, [sp, #4]
   107cc:	f240 13f1 	movw	r3, #497	; 0x1f1
   107d0:	e797      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
   107d2:	4638      	mov	r0, r7
   107d4:	f00d fdac 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   107d8:	2805      	cmp	r0, #5
   107da:	d1e9      	bne.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   107dc:	4638      	mov	r0, r7
   107de:	f00d fd90 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pool_params = op->builtin_options_as_Pool2DOptions()) {
   107e2:	4605      	mov	r5, r0
   107e4:	2800      	cmp	r0, #0
   107e6:	d0e3      	beq.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   107e8:	2200      	movs	r2, #0
   107ea:	2104      	movs	r1, #4
   107ec:	f00d fdaf 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        params->padding = ConvertPadding(pool_params->padding());
   107f0:	b2c0      	uxtb	r0, r0
   107f2:	f00d fd70 	bl	1e2d6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   107f6:	2200      	movs	r2, #0
   107f8:	7020      	strb	r0, [r4, #0]
   107fa:	2106      	movs	r1, #6
   107fc:	4628      	mov	r0, r5
   107fe:	f00d fd9d 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10802:	2200      	movs	r2, #0
        params->stride_width = pool_params->stride_w();
   10804:	6060      	str	r0, [r4, #4]
   10806:	2108      	movs	r1, #8
   10808:	4628      	mov	r0, r5
   1080a:	f00d fd97 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   1080e:	2200      	movs	r2, #0
        params->stride_height = pool_params->stride_h();
   10810:	60a0      	str	r0, [r4, #8]
   10812:	210a      	movs	r1, #10
   10814:	4628      	mov	r0, r5
   10816:	f00d fd91 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   1081a:	2200      	movs	r2, #0
        params->filter_width = pool_params->filter_width();
   1081c:	60e0      	str	r0, [r4, #12]
   1081e:	210c      	movs	r1, #12
   10820:	4628      	mov	r0, r5
   10822:	f00d fd8b 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10826:	2200      	movs	r2, #0
        params->filter_height = pool_params->filter_height();
   10828:	6120      	str	r0, [r4, #16]
   1082a:	210e      	movs	r1, #14
   1082c:	4628      	mov	r0, r5
   1082e:	f00d fd8e 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10832:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10834:	1e43      	subs	r3, r0, #1
   10836:	2b04      	cmp	r3, #4
   10838:	bf88      	it	hi
   1083a:	2000      	movhi	r0, #0
        params->activation =
   1083c:	7520      	strb	r0, [r4, #20]
      *builtin_data = params.release();
   1083e:	e7b7      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10840:	682b      	ldr	r3, [r5, #0]
   10842:	2201      	movs	r2, #1
   10844:	681b      	ldr	r3, [r3, #0]
   10846:	2103      	movs	r1, #3
   10848:	4628      	mov	r0, r5
   1084a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1084c:	4604      	mov	r4, r0
   1084e:	b920      	cbnz	r0, 1085a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2ea>
   10850:	4b60      	ldr	r3, [pc, #384]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   10852:	9301      	str	r3, [sp, #4]
   10854:	f44f 7300 	mov.w	r3, #512	; 0x200
   10858:	e753      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SequenceRNNOptions ? static_cast<const tflite::SequenceRNNOptions *>(builtin_options()) : nullptr;
   1085a:	4638      	mov	r0, r7
   1085c:	f00d fd68 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10860:	281f      	cmp	r0, #31
   10862:	d1a5      	bne.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10864:	4638      	mov	r0, r7
   10866:	f00d fd4c 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sequence_rnn_params =
   1086a:	4605      	mov	r5, r0
   1086c:	2800      	cmp	r0, #0
   1086e:	d09f      	beq.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10870:	2200      	movs	r2, #0
   10872:	2106      	movs	r1, #6
   10874:	f00d fd6b 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10878:	b2c3      	uxtb	r3, r0
  switch (activation) {
   1087a:	1e5a      	subs	r2, r3, #1
   1087c:	2a04      	cmp	r2, #4
   1087e:	bf88      	it	hi
   10880:	2300      	movhi	r3, #0
        params->activation =
   10882:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   10884:	2200      	movs	r2, #0
   10886:	2104      	movs	r1, #4
   10888:	4628      	mov	r0, r5
   1088a:	f00d fd48 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1088e:	3800      	subs	r0, #0
   10890:	bf18      	it	ne
   10892:	2001      	movne	r0, #1
   10894:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10896:	2200      	movs	r2, #0
   10898:	2108      	movs	r1, #8
   1089a:	4628      	mov	r0, r5
   1089c:	f00d fd3f 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   108a0:	3800      	subs	r0, #0
   108a2:	bf18      	it	ne
   108a4:	2001      	movne	r0, #1
   108a6:	70a0      	strb	r0, [r4, #2]
      *builtin_data = params.release();
   108a8:	e782      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   108aa:	682b      	ldr	r3, [r5, #0]
   108ac:	2201      	movs	r2, #1
   108ae:	681b      	ldr	r3, [r3, #0]
   108b0:	2104      	movs	r1, #4
   108b2:	4628      	mov	r0, r5
   108b4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   108b6:	4604      	mov	r4, r0
   108b8:	b920      	cbnz	r0, 108c4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x354>
   108ba:	4b46      	ldr	r3, [pc, #280]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   108bc:	9301      	str	r3, [sp, #4]
   108be:	f240 230f 	movw	r3, #527	; 0x20f
   108c2:	e71e      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceRNNOptions ? static_cast<const tflite::BidirectionalSequenceRNNOptions *>(builtin_options()) : nullptr;
   108c4:	4638      	mov	r0, r7
   108c6:	f00d fd33 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   108ca:	2846      	cmp	r0, #70	; 0x46
   108cc:	f47f af70 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   108d0:	4638      	mov	r0, r7
   108d2:	f00d fd16 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_sequence_rnn_params =
   108d6:	4605      	mov	r5, r0
   108d8:	2800      	cmp	r0, #0
   108da:	f43f af69 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   108de:	2200      	movs	r2, #0
   108e0:	2106      	movs	r1, #6
   108e2:	f00d fd34 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   108e6:	b2c0      	uxtb	r0, r0
  switch (activation) {
   108e8:	1e43      	subs	r3, r0, #1
   108ea:	2b04      	cmp	r3, #4
   108ec:	bf88      	it	hi
   108ee:	2000      	movhi	r0, #0
        params->activation = ConvertActivation(
   108f0:	7060      	strb	r0, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   108f2:	2200      	movs	r2, #0
   108f4:	2104      	movs	r1, #4
   108f6:	4628      	mov	r0, r5
   108f8:	f00d fd11 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   108fc:	3800      	subs	r0, #0
   108fe:	bf18      	it	ne
   10900:	2001      	movne	r0, #1
   10902:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   10904:	2200      	movs	r2, #0
   10906:	2108      	movs	r1, #8
   10908:	4628      	mov	r0, r5
   1090a:	f00d fd08 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1090e:	3800      	subs	r0, #0
   10910:	bf18      	it	ne
   10912:	2001      	movne	r0, #1
   10914:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10916:	2200      	movs	r2, #0
   10918:	210a      	movs	r1, #10
   1091a:	4628      	mov	r0, r5
   1091c:	f00d fcff 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10920:	3800      	subs	r0, #0
   10922:	bf18      	it	ne
   10924:	2001      	movne	r0, #1
   10926:	70e0      	strb	r0, [r4, #3]
      *builtin_data = params.release();
   10928:	e742      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1092a:	682b      	ldr	r3, [r5, #0]
   1092c:	2201      	movs	r2, #1
   1092e:	681b      	ldr	r3, [r3, #0]
   10930:	2102      	movs	r1, #2
   10932:	4628      	mov	r0, r5
   10934:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10936:	4604      	mov	r4, r0
   10938:	b920      	cbnz	r0, 10944 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3d4>
   1093a:	4b26      	ldr	r3, [pc, #152]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   1093c:	9301      	str	r3, [sp, #4]
   1093e:	f240 231e 	movw	r3, #542	; 0x21e
   10942:	e6de      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
   10944:	4638      	mov	r0, r7
   10946:	f00d fcf3 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1094a:	2807      	cmp	r0, #7
   1094c:	f47f af30 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10950:	4638      	mov	r0, r7
   10952:	f00d fcd6 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* rnn_params = op->builtin_options_as_RNNOptions()) {
   10956:	4605      	mov	r5, r0
   10958:	2800      	cmp	r0, #0
   1095a:	f43f af29 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   1095e:	2200      	movs	r2, #0
   10960:	2104      	movs	r1, #4
   10962:	f00d fcf4 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10966:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10968:	1e5a      	subs	r2, r3, #1
   1096a:	2a04      	cmp	r2, #4
   1096c:	bf88      	it	hi
   1096e:	2300      	movhi	r3, #0
        params->activation =
   10970:	7023      	strb	r3, [r4, #0]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10972:	2200      	movs	r2, #0
   10974:	2106      	movs	r1, #6
   10976:	4628      	mov	r0, r5
   10978:	f00d fcd1 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1097c:	3800      	subs	r0, #0
   1097e:	bf18      	it	ne
   10980:	2001      	movne	r0, #1
   10982:	7060      	strb	r0, [r4, #1]
      *builtin_data = params.release();
   10984:	e714      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10986:	682b      	ldr	r3, [r5, #0]
   10988:	2201      	movs	r2, #1
   1098a:	681b      	ldr	r3, [r3, #0]
   1098c:	4611      	mov	r1, r2
   1098e:	4628      	mov	r0, r5
   10990:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10992:	4604      	mov	r4, r0
   10994:	b920      	cbnz	r0, 109a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x430>
   10996:	4b0f      	ldr	r3, [pc, #60]	; (109d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   10998:	9301      	str	r3, [sp, #4]
   1099a:	f240 232b 	movw	r3, #555	; 0x22b
   1099e:	e6b0      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const tflite::EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
   109a0:	4638      	mov	r0, r7
   109a2:	f00d fcc5 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   109a6:	2814      	cmp	r0, #20
   109a8:	f47f af02 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   109ac:	4638      	mov	r0, r7
   109ae:	f00d fca8 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* embedding_params =
   109b2:	2800      	cmp	r0, #0
   109b4:	f43f aefc 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
   109b8:	2200      	movs	r2, #0
   109ba:	2104      	movs	r1, #4
   109bc:	f00d fcc7 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   109c0:	2801      	cmp	r0, #1
   109c2:	d005      	beq.n	109d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x460>
   109c4:	2802      	cmp	r0, #2
   109c6:	bf14      	ite	ne
   109c8:	2300      	movne	r3, #0
   109ca:	2302      	moveq	r3, #2
        params->combiner = parseCombinerType(embedding_params->combiner());
   109cc:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   109ce:	e6ef      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        return kTfLiteCombinerTypeMean;
   109d0:	4603      	mov	r3, r0
   109d2:	e7fb      	b.n	109cc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x45c>
   109d4:	0002c592 	.word	0x0002c592
   109d8:	0002a6ae 	.word	0x0002a6ae
   109dc:	0002c55f 	.word	0x0002c55f
   109e0:	682b      	ldr	r3, [r5, #0]
   109e2:	2204      	movs	r2, #4
   109e4:	681b      	ldr	r3, [r3, #0]
   109e6:	2108      	movs	r1, #8
   109e8:	4628      	mov	r0, r5
   109ea:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   109ec:	4604      	mov	r4, r0
   109ee:	b920      	cbnz	r0, 109fa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48a>
   109f0:	4bb8      	ldr	r3, [pc, #736]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   109f2:	9301      	str	r3, [sp, #4]
   109f4:	f240 2339 	movw	r3, #569	; 0x239
   109f8:	e683      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
   109fa:	4638      	mov	r0, r7
   109fc:	f00d fc98 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10a00:	280a      	cmp	r0, #10
   10a02:	f47f aed5 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a06:	4638      	mov	r0, r7
   10a08:	f00d fc7b 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* concatenation_params =
   10a0c:	4605      	mov	r5, r0
   10a0e:	2800      	cmp	r0, #0
   10a10:	f43f aece 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10a14:	2200      	movs	r2, #0
   10a16:	2106      	movs	r1, #6
   10a18:	f00d fc99 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10a1c:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10a1e:	1e5a      	subs	r2, r3, #1
   10a20:	2a04      	cmp	r2, #4
   10a22:	bf88      	it	hi
   10a24:	2300      	movhi	r3, #0
        params->activation = ConvertActivation(
   10a26:	7123      	strb	r3, [r4, #4]
    return GetField<int32_t>(VT_AXIS, 0);
   10a28:	2200      	movs	r2, #0
   10a2a:	2104      	movs	r1, #4
   10a2c:	4628      	mov	r0, r5
   10a2e:	f00d fc85 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = concatenation_params->axis();
   10a32:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10a34:	e6bc      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a36:	682b      	ldr	r3, [r5, #0]
   10a38:	2201      	movs	r2, #1
   10a3a:	681b      	ldr	r3, [r3, #0]
   10a3c:	4611      	mov	r1, r2
   10a3e:	4628      	mov	r0, r5
   10a40:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10a42:	4604      	mov	r4, r0
   10a44:	b920      	cbnz	r0, 10a50 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e0>
   10a46:	4ba3      	ldr	r3, [pc, #652]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10a48:	9301      	str	r3, [sp, #4]
   10a4a:	f240 2345 	movw	r3, #581	; 0x245
   10a4e:	e658      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
   10a50:	4638      	mov	r0, r7
   10a52:	f00d fc6d 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10a56:	2815      	cmp	r0, #21
   10a58:	f47f aeaa 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a5c:	4638      	mov	r0, r7
   10a5e:	f00d fc50 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_MulOptions()) {
   10a62:	2800      	cmp	r0, #0
   10a64:	f43f aea4 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10a68:	2200      	movs	r2, #0
   10a6a:	2104      	movs	r1, #4
   10a6c:	f00d fc6f 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10a70:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10a72:	1e5a      	subs	r2, r3, #1
   10a74:	2a04      	cmp	r2, #4
   10a76:	bf88      	it	hi
   10a78:	2300      	movhi	r3, #0
        params->activation =
   10a7a:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10a7c:	e698      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a7e:	682b      	ldr	r3, [r5, #0]
   10a80:	2201      	movs	r2, #1
   10a82:	4628      	mov	r0, r5
   10a84:	681b      	ldr	r3, [r3, #0]
   10a86:	4611      	mov	r1, r2
   10a88:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10a8a:	4605      	mov	r5, r0
   10a8c:	b920      	cbnz	r0, 10a98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x528>
   10a8e:	4b91      	ldr	r3, [pc, #580]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10a90:	9301      	str	r3, [sp, #4]
   10a92:	f240 234f 	movw	r3, #591	; 0x24f
   10a96:	e634      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
   10a98:	4638      	mov	r0, r7
   10a9a:	f00d fc49 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10a9e:	280b      	cmp	r0, #11
   10aa0:	d10d      	bne.n	10abe <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54e>
   10aa2:	4638      	mov	r0, r7
   10aa4:	f00d fc2d 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_AddOptions()) {
   10aa8:	b148      	cbz	r0, 10abe <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10aaa:	2200      	movs	r2, #0
   10aac:	2104      	movs	r1, #4
   10aae:	f00d fc4e 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10ab2:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10ab4:	1e5a      	subs	r2, r3, #1
   10ab6:	2a04      	cmp	r2, #4
   10ab8:	bf88      	it	hi
   10aba:	4623      	movhi	r3, r4
        params->activation =
   10abc:	702b      	strb	r3, [r5, #0]
      *builtin_data = params.release();
   10abe:	6035      	str	r5, [r6, #0]
}  // NOLINT[readability/fn_size]
   10ac0:	4620      	mov	r0, r4
   10ac2:	b003      	add	sp, #12
   10ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10ac8:	682b      	ldr	r3, [r5, #0]
   10aca:	2201      	movs	r2, #1
   10acc:	681b      	ldr	r3, [r3, #0]
   10ace:	4611      	mov	r1, r2
   10ad0:	4628      	mov	r0, r5
   10ad2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10ad4:	4604      	mov	r4, r0
   10ad6:	b920      	cbnz	r0, 10ae2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x572>
   10ad8:	4b7e      	ldr	r3, [pc, #504]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10ada:	9301      	str	r3, [sp, #4]
   10adc:	f240 2359 	movw	r3, #601	; 0x259
   10ae0:	e60f      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_DivOptions ? static_cast<const tflite::DivOptions *>(builtin_options()) : nullptr;
   10ae2:	4638      	mov	r0, r7
   10ae4:	f00d fc24 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10ae8:	281d      	cmp	r0, #29
   10aea:	f47f ae61 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10aee:	4638      	mov	r0, r7
   10af0:	f00d fc07 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_DivOptions()) {
   10af4:	2800      	cmp	r0, #0
   10af6:	f43f ae5b 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10afa:	2200      	movs	r2, #0
   10afc:	2104      	movs	r1, #4
   10afe:	f00d fc26 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10b02:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10b04:	1e5a      	subs	r2, r3, #1
   10b06:	2a04      	cmp	r2, #4
   10b08:	bf88      	it	hi
   10b0a:	2300      	movhi	r3, #0
        params->activation =
   10b0c:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10b0e:	e64f      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b10:	682b      	ldr	r3, [r5, #0]
   10b12:	2201      	movs	r2, #1
   10b14:	681b      	ldr	r3, [r3, #0]
   10b16:	4611      	mov	r1, r2
   10b18:	4628      	mov	r0, r5
   10b1a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10b1c:	4604      	mov	r4, r0
   10b1e:	b920      	cbnz	r0, 10b2a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5ba>
   10b20:	4b6c      	ldr	r3, [pc, #432]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10b22:	9301      	str	r3, [sp, #4]
   10b24:	f240 2363 	movw	r3, #611	; 0x263
   10b28:	e5eb      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SubOptions ? static_cast<const tflite::SubOptions *>(builtin_options()) : nullptr;
   10b2a:	4638      	mov	r0, r7
   10b2c:	f00d fc00 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10b30:	281c      	cmp	r0, #28
   10b32:	f47f ae3d 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b36:	4638      	mov	r0, r7
   10b38:	f00d fbe3 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SubOptions()) {
   10b3c:	2800      	cmp	r0, #0
   10b3e:	f43f ae37 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10b42:	2200      	movs	r2, #0
   10b44:	2104      	movs	r1, #4
   10b46:	f00d fc02 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10b4a:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10b4c:	1e5a      	subs	r2, r3, #1
   10b4e:	2a04      	cmp	r2, #4
   10b50:	bf88      	it	hi
   10b52:	2300      	movhi	r3, #0
        params->activation =
   10b54:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10b56:	e62b      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b58:	682b      	ldr	r3, [r5, #0]
   10b5a:	2201      	movs	r2, #1
   10b5c:	681b      	ldr	r3, [r3, #0]
   10b5e:	4611      	mov	r1, r2
   10b60:	4628      	mov	r0, r5
   10b62:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10b64:	4604      	mov	r4, r0
   10b66:	b920      	cbnz	r0, 10b72 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x602>
   10b68:	4b5a      	ldr	r3, [pc, #360]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10b6a:	9301      	str	r3, [sp, #4]
   10b6c:	f240 236d 	movw	r3, #621	; 0x26d
   10b70:	e5c7      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
   10b72:	4638      	mov	r0, r7
   10b74:	f00d fbdc 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10b78:	280c      	cmp	r0, #12
   10b7a:	f47f ae19 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b7e:	4638      	mov	r0, r7
   10b80:	f00d fbbf 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_L2NormOptions()) {
   10b84:	2800      	cmp	r0, #0
   10b86:	f43f ae13 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10b8a:	2200      	movs	r2, #0
   10b8c:	2104      	movs	r1, #4
   10b8e:	f00d fbde 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10b92:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10b94:	1e5a      	subs	r2, r3, #1
   10b96:	2a04      	cmp	r2, #4
   10b98:	bf88      	it	hi
   10b9a:	2300      	movhi	r3, #0
        params->activation =
   10b9c:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10b9e:	e607      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ba0:	682b      	ldr	r3, [r5, #0]
   10ba2:	2204      	movs	r2, #4
   10ba4:	681b      	ldr	r3, [r3, #0]
   10ba6:	2110      	movs	r1, #16
   10ba8:	4628      	mov	r0, r5
   10baa:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10bac:	4604      	mov	r4, r0
   10bae:	b920      	cbnz	r0, 10bba <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64a>
   10bb0:	4b48      	ldr	r3, [pc, #288]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10bb2:	9301      	str	r3, [sp, #4]
   10bb4:	f240 2377 	movw	r3, #631	; 0x277
   10bb8:	e5a3      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LocalResponseNormalizationOptions ? static_cast<const tflite::LocalResponseNormalizationOptions *>(builtin_options()) : nullptr;
   10bba:	4638      	mov	r0, r7
   10bbc:	f00d fbb8 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10bc0:	280d      	cmp	r0, #13
   10bc2:	f47f adf5 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10bc6:	4638      	mov	r0, r7
   10bc8:	f00d fb9b 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10bcc:	4605      	mov	r5, r0
   10bce:	2800      	cmp	r0, #0
   10bd0:	f43f adee 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_RADIUS, 0);
   10bd4:	2200      	movs	r2, #0
   10bd6:	2104      	movs	r1, #4
   10bd8:	f00d fbb0 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<float>(VT_BIAS, 0.0f);
   10bdc:	2106      	movs	r1, #6
        params->radius = schema_params->radius();
   10bde:	6020      	str	r0, [r4, #0]
   10be0:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10be4:	4628      	mov	r0, r5
   10be6:	f00d fbbb 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_ALPHA, 0.0f);
   10bea:	2108      	movs	r1, #8
        params->bias = schema_params->bias();
   10bec:	ed84 0a01 	vstr	s0, [r4, #4]
   10bf0:	4628      	mov	r0, r5
   10bf2:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10bf6:	f00d fbb3 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_BETA, 0.0f);
   10bfa:	210a      	movs	r1, #10
        params->alpha = schema_params->alpha();
   10bfc:	ed84 0a02 	vstr	s0, [r4, #8]
   10c00:	4628      	mov	r0, r5
   10c02:	ed9f 0a37 	vldr	s0, [pc, #220]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c06:	f00d fbab 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = schema_params->beta();
   10c0a:	ed84 0a03 	vstr	s0, [r4, #12]
      *builtin_data = params.release();
   10c0e:	e5cf      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10c10:	682b      	ldr	r3, [r5, #0]
   10c12:	2204      	movs	r2, #4
   10c14:	681b      	ldr	r3, [r3, #0]
   10c16:	2110      	movs	r1, #16
   10c18:	4628      	mov	r0, r5
   10c1a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10c1c:	4604      	mov	r4, r0
   10c1e:	b920      	cbnz	r0, 10c2a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6ba>
   10c20:	4b2c      	ldr	r3, [pc, #176]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10c22:	9301      	str	r3, [sp, #4]
   10c24:	f44f 7321 	mov.w	r3, #644	; 0x284
   10c28:	e56b      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LSTMOptions ? static_cast<const tflite::LSTMOptions *>(builtin_options()) : nullptr;
   10c2a:	4638      	mov	r0, r7
   10c2c:	f00d fb80 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10c30:	280e      	cmp	r0, #14
   10c32:	d13c      	bne.n	10cae <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x73e>
   10c34:	4638      	mov	r0, r7
   10c36:	f00d fb64 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lstm_params = op->builtin_options_as_LSTMOptions()) {
   10c3a:	4607      	mov	r7, r0
   10c3c:	b3b8      	cbz	r0, 10cae <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x73e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10c3e:	2200      	movs	r2, #0
   10c40:	2104      	movs	r1, #4
   10c42:	f00d fb84 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10c46:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10c48:	1e43      	subs	r3, r0, #1
   10c4a:	2b04      	cmp	r3, #4
   10c4c:	bf88      	it	hi
   10c4e:	2000      	movhi	r0, #0
        params->activation =
   10c50:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10c52:	2106      	movs	r1, #6
   10c54:	4638      	mov	r0, r7
   10c56:	ed9f 0a22 	vldr	s0, [pc, #136]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c5a:	f00d fb81 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10c5e:	2108      	movs	r1, #8
        params->cell_clip = lstm_params->cell_clip();
   10c60:	ed84 0a01 	vstr	s0, [r4, #4]
   10c64:	4638      	mov	r0, r7
   10c66:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c6a:	f00d fb79 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return static_cast<tflite::LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
   10c6e:	2200      	movs	r2, #0
        params->proj_clip = lstm_params->proj_clip();
   10c70:	ed84 0a02 	vstr	s0, [r4, #8]
   10c74:	210a      	movs	r1, #10
   10c76:	4638      	mov	r0, r7
   10c78:	f00d fb69 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10c7c:	b160      	cbz	r0, 10c98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x728>
   10c7e:	2801      	cmp	r0, #1
   10c80:	d00a      	beq.n	10c98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x728>
            TF_LITE_REPORT_ERROR(error_reporter,
   10c82:	b2c2      	uxtb	r2, r0
   10c84:	4914      	ldr	r1, [pc, #80]	; (10cd8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x768>)
   10c86:	4640      	mov	r0, r8
   10c88:	f00d fb09 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
   10c8c:	4621      	mov	r1, r4
   10c8e:	4628      	mov	r0, r5
   10c90:	f00d fb34 	bl	1e2fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10c94:	2401      	movs	r4, #1
   10c96:	e713      	b.n	10ac0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
            params->kernel_type = kTfLiteLSTMBasicKernel;
   10c98:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10c9a:	2200      	movs	r2, #0
   10c9c:	210c      	movs	r1, #12
   10c9e:	4638      	mov	r0, r7
   10ca0:	f00d fb3d 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10ca4:	3800      	subs	r0, #0
   10ca6:	bf18      	it	ne
   10ca8:	2001      	movne	r0, #1
   10caa:	7360      	strb	r0, [r4, #13]
      *builtin_data = params.release();
   10cac:	e580      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        TF_LITE_REPORT_ERROR(error_reporter,
   10cae:	490b      	ldr	r1, [pc, #44]	; (10cdc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76c>)
   10cb0:	4640      	mov	r0, r8
   10cb2:	f00d faf4 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   10cb6:	e7e9      	b.n	10c8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x71c>
   10cb8:	682b      	ldr	r3, [r5, #0]
   10cba:	2204      	movs	r2, #4
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	2110      	movs	r1, #16
   10cc0:	4628      	mov	r0, r5
   10cc2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10cc4:	4604      	mov	r4, r0
   10cc6:	b968      	cbnz	r0, 10ce4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x774>
   10cc8:	4b02      	ldr	r3, [pc, #8]	; (10cd4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10cca:	9301      	str	r3, [sp, #4]
   10ccc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
   10cd0:	e517      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
   10cd2:	bf00      	nop
   10cd4:	0002c592 	.word	0x0002c592
   10cd8:	0002c5d6 	.word	0x0002c5d6
   10cdc:	0002c5f5 	.word	0x0002c5f5
   10ce0:	00000000 	.word	0x00000000
    return builtin_options_type() == tflite::BuiltinOptions_UnidirectionalSequenceLSTMOptions ? static_cast<const tflite::UnidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   10ce4:	4638      	mov	r0, r7
   10ce6:	f00d fb23 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10cea:	2847      	cmp	r0, #71	; 0x47
   10cec:	f47f ad60 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10cf0:	4638      	mov	r0, r7
   10cf2:	f00d fb06 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* seq_lstm_params =
   10cf6:	4605      	mov	r5, r0
   10cf8:	2800      	cmp	r0, #0
   10cfa:	f43f ad59 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10cfe:	2200      	movs	r2, #0
   10d00:	2104      	movs	r1, #4
   10d02:	f00d fb24 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10d06:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10d08:	1e43      	subs	r3, r0, #1
   10d0a:	2b04      	cmp	r3, #4
   10d0c:	bf88      	it	hi
   10d0e:	2000      	movhi	r0, #0
        params->activation =
   10d10:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10d12:	2106      	movs	r1, #6
   10d14:	4628      	mov	r0, r5
   10d16:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10d1a:	f00d fb21 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10d1e:	2108      	movs	r1, #8
        params->cell_clip = seq_lstm_params->cell_clip();
   10d20:	ed84 0a01 	vstr	s0, [r4, #4]
   10d24:	4628      	mov	r0, r5
   10d26:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 10ce0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10d2a:	f00d fb19 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   10d2e:	2200      	movs	r2, #0
        params->proj_clip = seq_lstm_params->proj_clip();
   10d30:	ed84 0a02 	vstr	s0, [r4, #8]
   10d34:	210a      	movs	r1, #10
   10d36:	4628      	mov	r0, r5
   10d38:	f00d faf1 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10d3c:	3800      	subs	r0, #0
   10d3e:	bf18      	it	ne
   10d40:	2001      	movne	r0, #1
   10d42:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10d44:	2200      	movs	r2, #0
   10d46:	210c      	movs	r1, #12
   10d48:	4628      	mov	r0, r5
   10d4a:	f00d fae8 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10d4e:	3800      	subs	r0, #0
   10d50:	bf18      	it	ne
   10d52:	2001      	movne	r0, #1
   10d54:	7360      	strb	r0, [r4, #13]
      *builtin_data = params.release();
   10d56:	e52b      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10d58:	682b      	ldr	r3, [r5, #0]
   10d5a:	2204      	movs	r2, #4
   10d5c:	681b      	ldr	r3, [r3, #0]
   10d5e:	2110      	movs	r1, #16
   10d60:	4628      	mov	r0, r5
   10d62:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10d64:	4604      	mov	r4, r0
   10d66:	b920      	cbnz	r0, 10d72 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x802>
   10d68:	4bbc      	ldr	r3, [pc, #752]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10d6a:	9301      	str	r3, [sp, #4]
   10d6c:	f240 23b5 	movw	r3, #693	; 0x2b5
   10d70:	e4c7      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceLSTMOptions ? static_cast<const tflite::BidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   10d72:	4638      	mov	r0, r7
   10d74:	f00d fadc 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10d78:	2845      	cmp	r0, #69	; 0x45
   10d7a:	f47f ad19 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10d7e:	4638      	mov	r0, r7
   10d80:	f00d fabf 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_lstm_params =
   10d84:	4605      	mov	r5, r0
   10d86:	2800      	cmp	r0, #0
   10d88:	f43f ad12 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10d8c:	2200      	movs	r2, #0
   10d8e:	2104      	movs	r1, #4
   10d90:	f00d fadd 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10d94:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10d96:	1e43      	subs	r3, r0, #1
   10d98:	2b04      	cmp	r3, #4
   10d9a:	bf88      	it	hi
   10d9c:	2000      	movhi	r0, #0
        params->activation =
   10d9e:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10da0:	2106      	movs	r1, #6
   10da2:	4628      	mov	r0, r5
   10da4:	ed9f 0aae 	vldr	s0, [pc, #696]	; 11060 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaf0>
   10da8:	f00d fada 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10dac:	2108      	movs	r1, #8
        params->cell_clip = bidi_lstm_params->cell_clip();
   10dae:	ed84 0a01 	vstr	s0, [r4, #4]
   10db2:	4628      	mov	r0, r5
   10db4:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 11060 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaf0>
   10db8:	f00d fad2 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   10dbc:	2200      	movs	r2, #0
        params->proj_clip = bidi_lstm_params->proj_clip();
   10dbe:	ed84 0a02 	vstr	s0, [r4, #8]
   10dc2:	210a      	movs	r1, #10
   10dc4:	4628      	mov	r0, r5
   10dc6:	f00d faaa 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10dca:	3800      	subs	r0, #0
   10dcc:	bf18      	it	ne
   10dce:	2001      	movne	r0, #1
   10dd0:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
   10dd2:	2201      	movs	r2, #1
   10dd4:	210c      	movs	r1, #12
   10dd6:	4628      	mov	r0, r5
   10dd8:	f00d faa1 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10ddc:	3800      	subs	r0, #0
   10dde:	bf18      	it	ne
   10de0:	2001      	movne	r0, #1
   10de2:	7360      	strb	r0, [r4, #13]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10de4:	2200      	movs	r2, #0
   10de6:	210e      	movs	r1, #14
   10de8:	4628      	mov	r0, r5
   10dea:	f00d fa98 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10dee:	3800      	subs	r0, #0
   10df0:	bf18      	it	ne
   10df2:	2001      	movne	r0, #1
   10df4:	73a0      	strb	r0, [r4, #14]
      *builtin_data = params.release();
   10df6:	e4db      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10df8:	682b      	ldr	r3, [r5, #0]
   10dfa:	2201      	movs	r2, #1
   10dfc:	681b      	ldr	r3, [r3, #0]
   10dfe:	2102      	movs	r1, #2
   10e00:	4628      	mov	r0, r5
   10e02:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10e04:	4604      	mov	r4, r0
   10e06:	b920      	cbnz	r0, 10e12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a2>
   10e08:	4b94      	ldr	r3, [pc, #592]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10e0a:	9301      	str	r3, [sp, #4]
   10e0c:	f240 23c6 	movw	r3, #710	; 0x2c6
   10e10:	e477      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
   10e12:	4638      	mov	r0, r7
   10e14:	f00d fa8c 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10e18:	280f      	cmp	r0, #15
   10e1a:	d116      	bne.n	10e4a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8da>
   10e1c:	4638      	mov	r0, r7
   10e1e:	f00d fa70 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10e22:	4605      	mov	r5, r0
   10e24:	b188      	cbz	r0, 10e4a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8da>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   10e26:	2200      	movs	r2, #0
   10e28:	2108      	movs	r1, #8
   10e2a:	f00d fa78 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e2e:	3800      	subs	r0, #0
   10e30:	bf18      	it	ne
   10e32:	2001      	movne	r0, #1
   10e34:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   10e36:	2200      	movs	r2, #0
   10e38:	210a      	movs	r1, #10
   10e3a:	4628      	mov	r0, r5
   10e3c:	f00d fa6f 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e40:	3800      	subs	r0, #0
   10e42:	bf18      	it	ne
   10e44:	2001      	movne	r0, #1
   10e46:	7060      	strb	r0, [r4, #1]
   10e48:	e4b2      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        params->align_corners = false;
   10e4a:	2300      	movs	r3, #0
   10e4c:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = false;
   10e4e:	7063      	strb	r3, [r4, #1]
      *builtin_data = params.release();
   10e50:	e4ae      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10e52:	682b      	ldr	r3, [r5, #0]
   10e54:	2201      	movs	r2, #1
   10e56:	681b      	ldr	r3, [r3, #0]
   10e58:	2102      	movs	r1, #2
   10e5a:	4628      	mov	r0, r5
   10e5c:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10e5e:	4604      	mov	r4, r0
   10e60:	b920      	cbnz	r0, 10e6c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8fc>
   10e62:	4b7e      	ldr	r3, [pc, #504]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10e64:	9301      	str	r3, [sp, #4]
   10e66:	f240 23d7 	movw	r3, #727	; 0x2d7
   10e6a:	e44a      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   10e6c:	4638      	mov	r0, r7
   10e6e:	f00d fa5f 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10e72:	284a      	cmp	r0, #74	; 0x4a
   10e74:	d116      	bne.n	10ea4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x934>
   10e76:	4638      	mov	r0, r7
   10e78:	f00d fa43 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10e7c:	4605      	mov	r5, r0
   10e7e:	b188      	cbz	r0, 10ea4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x934>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   10e80:	2200      	movs	r2, #0
   10e82:	2104      	movs	r1, #4
   10e84:	f00d fa4b 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e88:	3800      	subs	r0, #0
   10e8a:	bf18      	it	ne
   10e8c:	2001      	movne	r0, #1
   10e8e:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   10e90:	2200      	movs	r2, #0
   10e92:	2106      	movs	r1, #6
   10e94:	4628      	mov	r0, r5
   10e96:	f00d fa42 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e9a:	3800      	subs	r0, #0
   10e9c:	bf18      	it	ne
   10e9e:	2001      	movne	r0, #1
   10ea0:	7060      	strb	r0, [r4, #1]
   10ea2:	e485      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        params->align_corners = false;
   10ea4:	2300      	movs	r3, #0
   10ea6:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = false;
   10ea8:	7063      	strb	r3, [r4, #1]
      *builtin_data = params.release();
   10eaa:	e481      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10eac:	682b      	ldr	r3, [r5, #0]
   10eae:	2204      	movs	r2, #4
   10eb0:	681b      	ldr	r3, [r3, #0]
   10eb2:	210c      	movs	r1, #12
   10eb4:	4628      	mov	r0, r5
   10eb6:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10eb8:	4604      	mov	r4, r0
   10eba:	b920      	cbnz	r0, 10ec6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x956>
   10ebc:	4b67      	ldr	r3, [pc, #412]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10ebe:	9301      	str	r3, [sp, #4]
   10ec0:	f240 23e5 	movw	r3, #741	; 0x2e5
   10ec4:	e41d      	b.n	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SkipGramOptions ? static_cast<const tflite::SkipGramOptions *>(builtin_options()) : nullptr;
   10ec6:	4638      	mov	r0, r7
   10ec8:	f00d fa32 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10ecc:	2812      	cmp	r0, #18
   10ece:	f47f ac6f 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ed2:	4638      	mov	r0, r7
   10ed4:	f00d fa15 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* skip_gram_params =
   10ed8:	4605      	mov	r5, r0
   10eda:	2800      	cmp	r0, #0
   10edc:	f43f ac68 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
   10ee0:	2200      	movs	r2, #0
   10ee2:	2104      	movs	r1, #4
   10ee4:	f00d fa2a 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
   10ee8:	2200      	movs	r2, #0
        params->ngram_size = skip_gram_params->ngram_size();
   10eea:	6020      	str	r0, [r4, #0]
   10eec:	2106      	movs	r1, #6
   10eee:	4628      	mov	r0, r5
   10ef0:	f00d fa24 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
   10ef4:	2200      	movs	r2, #0
        params->max_skip_size = skip_gram_params->max_skip_size();
   10ef6:	6060      	str	r0, [r4, #4]
   10ef8:	2108      	movs	r1, #8
   10efa:	4628      	mov	r0, r5
   10efc:	f00d fa0f 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10f00:	3800      	subs	r0, #0
   10f02:	bf18      	it	ne
   10f04:	2001      	movne	r0, #1
   10f06:	7220      	strb	r0, [r4, #8]
      *builtin_data = params.release();
   10f08:	e452      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f0a:	682b      	ldr	r3, [r5, #0]
   10f0c:	2204      	movs	r2, #4
   10f0e:	681b      	ldr	r3, [r3, #0]
   10f10:	4611      	mov	r1, r2
   10f12:	4628      	mov	r0, r5
   10f14:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10f16:	4604      	mov	r4, r0
   10f18:	b928      	cbnz	r0, 10f26 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9b6>
   10f1a:	4b50      	ldr	r3, [pc, #320]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10f1c:	9301      	str	r3, [sp, #4]
   10f1e:	f240 23f1 	movw	r3, #753	; 0x2f1
   10f22:	f7ff bbee 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SpaceToDepthOptions ? static_cast<const tflite::SpaceToDepthOptions *>(builtin_options()) : nullptr;
   10f26:	4638      	mov	r0, r7
   10f28:	f00d fa02 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10f2c:	2813      	cmp	r0, #19
   10f2e:	f47f ac3f 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f32:	4638      	mov	r0, r7
   10f34:	f00d f9e5 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10f38:	2800      	cmp	r0, #0
   10f3a:	f43f ac39 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   10f3e:	2200      	movs	r2, #0
   10f40:	2104      	movs	r1, #4
   10f42:	f00d f9fb 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->block_size = schema_params->block_size();
   10f46:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10f48:	e432      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f4a:	682b      	ldr	r3, [r5, #0]
   10f4c:	2204      	movs	r2, #4
   10f4e:	681b      	ldr	r3, [r3, #0]
   10f50:	4611      	mov	r1, r2
   10f52:	4628      	mov	r0, r5
   10f54:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10f56:	4604      	mov	r4, r0
   10f58:	b928      	cbnz	r0, 10f66 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9f6>
   10f5a:	4b40      	ldr	r3, [pc, #256]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10f5c:	9301      	str	r3, [sp, #4]
   10f5e:	f240 23fb 	movw	r3, #763	; 0x2fb
   10f62:	f7ff bbce 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_DepthToSpaceOptions ? static_cast<const tflite::DepthToSpaceOptions *>(builtin_options()) : nullptr;
   10f66:	4638      	mov	r0, r7
   10f68:	f00d f9e2 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10f6c:	285e      	cmp	r0, #94	; 0x5e
   10f6e:	f47f ac1f 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f72:	4638      	mov	r0, r7
   10f74:	f00d f9c5 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10f78:	2800      	cmp	r0, #0
   10f7a:	f43f ac19 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   10f7e:	2200      	movs	r2, #0
   10f80:	2104      	movs	r1, #4
   10f82:	f00d f9db 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->block_size = schema_params->block_size();
   10f86:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10f88:	e412      	b.n	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f8a:	682b      	ldr	r3, [r5, #0]
   10f8c:	2204      	movs	r2, #4
   10f8e:	681b      	ldr	r3, [r3, #0]
   10f90:	4611      	mov	r1, r2
   10f92:	4628      	mov	r0, r5
   10f94:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10f96:	4604      	mov	r4, r0
   10f98:	b928      	cbnz	r0, 10fa6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa36>
   10f9a:	4b30      	ldr	r3, [pc, #192]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10f9c:	9301      	str	r3, [sp, #4]
   10f9e:	f240 3305 	movw	r3, #773	; 0x305
   10fa2:	f7ff bbae 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
      params->axis = 0;
   10fa6:	2500      	movs	r5, #0
   10fa8:	6005      	str	r5, [r0, #0]
    return builtin_options_type() == tflite::BuiltinOptions_GatherOptions ? static_cast<const tflite::GatherOptions *>(builtin_options()) : nullptr;
   10faa:	4638      	mov	r0, r7
   10fac:	f00d f9c0 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10fb0:	2817      	cmp	r0, #23
   10fb2:	f47f abfd 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10fb6:	4638      	mov	r0, r7
   10fb8:	f00d f9a3 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* gather_params = op->builtin_options_as_GatherOptions()) {
   10fbc:	2800      	cmp	r0, #0
   10fbe:	f43f abf7 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_AXIS, 0);
   10fc2:	462a      	mov	r2, r5
   10fc4:	2104      	movs	r1, #4
   10fc6:	f00d f9b9 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = gather_params->axis();
   10fca:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10fcc:	f7ff bbf0 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10fd0:	682b      	ldr	r3, [r5, #0]
   10fd2:	2201      	movs	r2, #1
   10fd4:	681b      	ldr	r3, [r3, #0]
   10fd6:	4611      	mov	r1, r2
   10fd8:	4628      	mov	r0, r5
   10fda:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10fdc:	4604      	mov	r4, r0
   10fde:	b928      	cbnz	r0, 10fec <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa7c>
   10fe0:	4b1e      	ldr	r3, [pc, #120]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10fe2:	9301      	str	r3, [sp, #4]
   10fe4:	f240 3315 	movw	r3, #789	; 0x315
   10fe8:	f7ff bb8b 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
   10fec:	4638      	mov	r0, r7
   10fee:	f00d f99f 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10ff2:	281b      	cmp	r0, #27
   10ff4:	f47f abdc 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ff8:	4638      	mov	r0, r7
   10ffa:	f00d f982 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReducerOptions()) {
   10ffe:	2800      	cmp	r0, #0
   11000:	f43f abd6 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   11004:	2200      	movs	r2, #0
   11006:	2104      	movs	r1, #4
   11008:	f00d f989 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1100c:	3800      	subs	r0, #0
   1100e:	bf18      	it	ne
   11010:	2001      	movne	r0, #1
   11012:	7020      	strb	r0, [r4, #0]
      *builtin_data = params.release();
   11014:	f7ff bbcc 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11018:	682b      	ldr	r3, [r5, #0]
   1101a:	2204      	movs	r2, #4
   1101c:	681b      	ldr	r3, [r3, #0]
   1101e:	4611      	mov	r1, r2
   11020:	4628      	mov	r0, r5
   11022:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11024:	4604      	mov	r4, r0
   11026:	b928      	cbnz	r0, 11034 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac4>
   11028:	4b0c      	ldr	r3, [pc, #48]	; (1105c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   1102a:	9301      	str	r3, [sp, #4]
   1102c:	f240 331e 	movw	r3, #798	; 0x31e
   11030:	f7ff bb67 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SplitOptions ? static_cast<const tflite::SplitOptions *>(builtin_options()) : nullptr;
   11034:	4638      	mov	r0, r7
   11036:	f00d f97b 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1103a:	2823      	cmp	r0, #35	; 0x23
   1103c:	f47f abb8 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11040:	4638      	mov	r0, r7
   11042:	f00d f95e 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitOptions()) {
   11046:	2800      	cmp	r0, #0
   11048:	f43f abb2 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   1104c:	2200      	movs	r2, #0
   1104e:	2104      	movs	r1, #4
   11050:	f00d f974 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->num_splits = schema_params->num_splits();
   11054:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   11056:	f7ff bbab 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1105a:	bf00      	nop
   1105c:	0002c592 	.word	0x0002c592
   11060:	00000000 	.word	0x00000000
   11064:	682b      	ldr	r3, [r5, #0]
   11066:	2204      	movs	r2, #4
   11068:	681b      	ldr	r3, [r3, #0]
   1106a:	4611      	mov	r1, r2
   1106c:	4628      	mov	r0, r5
   1106e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11070:	4604      	mov	r4, r0
   11072:	b928      	cbnz	r0, 11080 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb10>
   11074:	4bc5      	ldr	r3, [pc, #788]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   11076:	9301      	str	r3, [sp, #4]
   11078:	f240 3327 	movw	r3, #807	; 0x327
   1107c:	f7ff bb41 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
   11080:	4638      	mov	r0, r7
   11082:	f00d f955 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11086:	284f      	cmp	r0, #79	; 0x4f
   11088:	f47f ab92 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1108c:	4638      	mov	r0, r7
   1108e:	f00d f938 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitVOptions()) {
   11092:	2800      	cmp	r0, #0
   11094:	f43f ab8c 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   11098:	2200      	movs	r2, #0
   1109a:	2104      	movs	r1, #4
   1109c:	f00d f94e 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->num_splits = schema_params->num_splits();
   110a0:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   110a2:	f7ff bb85 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   110a6:	682b      	ldr	r3, [r5, #0]
   110a8:	2204      	movs	r2, #4
   110aa:	681b      	ldr	r3, [r3, #0]
   110ac:	2124      	movs	r1, #36	; 0x24
   110ae:	4628      	mov	r0, r5
   110b0:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   110b2:	4681      	mov	r9, r0
   110b4:	b928      	cbnz	r0, 110c2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb52>
   110b6:	4bb5      	ldr	r3, [pc, #724]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   110b8:	9301      	str	r3, [sp, #4]
   110ba:	f44f 734c 	mov.w	r3, #816	; 0x330
   110be:	f7ff bb20 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SqueezeOptions ? static_cast<const tflite::SqueezeOptions *>(builtin_options()) : nullptr;
   110c2:	4638      	mov	r0, r7
   110c4:	f00d f934 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   110c8:	281e      	cmp	r0, #30
   110ca:	f47f ab27 	bne.w	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   110ce:	4638      	mov	r0, r7
   110d0:	f00d f917 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SqueezeOptions()) {
   110d4:	4604      	mov	r4, r0
   110d6:	2800      	cmp	r0, #0
   110d8:	f43f ab20 	beq.w	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    auto field_offset = GetOptionalFieldOffset(field);
   110dc:	2104      	movs	r1, #4
   110de:	f004 fac2 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   110e2:	b188      	cbz	r0, 11108 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb98>
   110e4:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
   110e6:	1827      	adds	r7, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   110e8:	441f      	add	r7, r3
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   110ea:	4ba9      	ldr	r3, [pc, #676]	; (11390 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe20>)
   110ec:	4642      	mov	r2, r8
   110ee:	4649      	mov	r1, r9
   110f0:	4638      	mov	r0, r7
   110f2:	f7fe ffd5 	bl	100a0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   110f6:	4604      	mov	r4, r0
   110f8:	2800      	cmp	r0, #0
   110fa:	f47f ab32 	bne.w	10762 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
        params->num_squeeze_dims = squeeze_dims->size();
   110fe:	683b      	ldr	r3, [r7, #0]
   11100:	f8c9 3020 	str.w	r3, [r9, #32]
      *builtin_data = params.release();
   11104:	f7ff bb0a 	b.w	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   11108:	4607      	mov	r7, r0
   1110a:	e7ee      	b.n	110ea <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb7a>
   1110c:	682b      	ldr	r3, [r5, #0]
   1110e:	2204      	movs	r2, #4
   11110:	681b      	ldr	r3, [r3, #0]
   11112:	2114      	movs	r1, #20
   11114:	4628      	mov	r0, r5
   11116:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11118:	4604      	mov	r4, r0
   1111a:	b928      	cbnz	r0, 11128 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbb8>
   1111c:	4b9b      	ldr	r3, [pc, #620]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   1111e:	9301      	str	r3, [sp, #4]
   11120:	f240 333d 	movw	r3, #829	; 0x33d
   11124:	f7ff baed 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
   11128:	4638      	mov	r0, r7
   1112a:	f00d f901 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1112e:	2820      	cmp	r0, #32
   11130:	f47f ab3e 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11134:	4638      	mov	r0, r7
   11136:	f00d f8e4 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   1113a:	4605      	mov	r5, r0
   1113c:	2800      	cmp	r0, #0
   1113e:	f43f ab37 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   11142:	2200      	movs	r2, #0
   11144:	2104      	movs	r1, #4
   11146:	f00d f8f9 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   1114a:	2200      	movs	r2, #0
        params->begin_mask = schema_params->begin_mask();
   1114c:	6020      	str	r0, [r4, #0]
   1114e:	2106      	movs	r1, #6
   11150:	4628      	mov	r0, r5
   11152:	f00d f8f3 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   11156:	2200      	movs	r2, #0
        params->end_mask = schema_params->end_mask();
   11158:	6060      	str	r0, [r4, #4]
   1115a:	2108      	movs	r1, #8
   1115c:	4628      	mov	r0, r5
   1115e:	f00d f8ed 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   11162:	2200      	movs	r2, #0
        params->ellipsis_mask = schema_params->ellipsis_mask();
   11164:	60a0      	str	r0, [r4, #8]
   11166:	210a      	movs	r1, #10
   11168:	4628      	mov	r0, r5
   1116a:	f00d f8e7 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   1116e:	2200      	movs	r2, #0
        params->new_axis_mask = schema_params->new_axis_mask();
   11170:	60e0      	str	r0, [r4, #12]
   11172:	210c      	movs	r1, #12
   11174:	4628      	mov	r0, r5
   11176:	f00d f8e1 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->shrink_axis_mask = schema_params->shrink_axis_mask();
   1117a:	6120      	str	r0, [r4, #16]
      *builtin_data = params.release();
   1117c:	f7ff bb18 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11180:	682b      	ldr	r3, [r5, #0]
   11182:	2201      	movs	r2, #1
   11184:	681b      	ldr	r3, [r3, #0]
   11186:	4611      	mov	r1, r2
   11188:	4628      	mov	r0, r5
   1118a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1118c:	4681      	mov	r9, r0
   1118e:	b928      	cbnz	r0, 1119c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2c>
   11190:	4b7e      	ldr	r3, [pc, #504]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   11192:	9301      	str	r3, [sp, #4]
   11194:	f240 334b 	movw	r3, #843	; 0x34b
   11198:	f7ff bab3 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ArgMaxOptions ? static_cast<const tflite::ArgMaxOptions *>(builtin_options()) : nullptr;
   1119c:	4638      	mov	r0, r7
   1119e:	f00d f8c7 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   111a2:	2828      	cmp	r0, #40	; 0x28
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
   111a4:	f47f aaba 	bne.w	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   111a8:	4638      	mov	r0, r7
   111aa:	f00d f8aa 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ShapeOptions()) {
   111ae:	2800      	cmp	r0, #0
   111b0:	f43f aab4 	beq.w	1071c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
   111b4:	2200      	movs	r2, #0
   111b6:	2104      	movs	r1, #4
   111b8:	f00d f8c9 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(
   111bc:	4642      	mov	r2, r8
   111be:	4649      	mov	r1, r9
   111c0:	f7ff bac9 	b.w	10756 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
   111c4:	682b      	ldr	r3, [r5, #0]
   111c6:	2201      	movs	r2, #1
   111c8:	681b      	ldr	r3, [r3, #0]
   111ca:	4611      	mov	r1, r2
   111cc:	4628      	mov	r0, r5
   111ce:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   111d0:	4681      	mov	r9, r0
   111d2:	b928      	cbnz	r0, 111e0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc70>
   111d4:	4b6d      	ldr	r3, [pc, #436]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   111d6:	9301      	str	r3, [sp, #4]
   111d8:	f240 3356 	movw	r3, #854	; 0x356
   111dc:	f7ff ba91 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
   111e0:	4638      	mov	r0, r7
   111e2:	f00d f8a5 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   111e6:	2839      	cmp	r0, #57	; 0x39
   111e8:	e7dc      	b.n	111a4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc34>
   111ea:	682b      	ldr	r3, [r5, #0]
   111ec:	2204      	movs	r2, #4
   111ee:	681b      	ldr	r3, [r3, #0]
   111f0:	210c      	movs	r1, #12
   111f2:	4628      	mov	r0, r5
   111f4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   111f6:	4604      	mov	r4, r0
   111f8:	b928      	cbnz	r0, 11206 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc96>
   111fa:	4b64      	ldr	r3, [pc, #400]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   111fc:	9301      	str	r3, [sp, #4]
   111fe:	f240 3361 	movw	r3, #865	; 0x361
   11202:	f7ff ba7e 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_TransposeConvOptions ? static_cast<const tflite::TransposeConvOptions *>(builtin_options()) : nullptr;
   11206:	4638      	mov	r0, r7
   11208:	f00d f892 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1120c:	2831      	cmp	r0, #49	; 0x31
   1120e:	f47f aacf 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11212:	4638      	mov	r0, r7
   11214:	f00d f875 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* transpose_conv_params =
   11218:	4605      	mov	r5, r0
   1121a:	2800      	cmp	r0, #0
   1121c:	f43f aac8 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   11220:	2200      	movs	r2, #0
   11222:	2104      	movs	r1, #4
   11224:	f00d f893 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        params->padding = ConvertPadding(transpose_conv_params->padding());
   11228:	b2c0      	uxtb	r0, r0
   1122a:	f00d f854 	bl	1e2d6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   1122e:	2200      	movs	r2, #0
   11230:	7020      	strb	r0, [r4, #0]
   11232:	2106      	movs	r1, #6
   11234:	4628      	mov	r0, r5
   11236:	f00d f881 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   1123a:	2200      	movs	r2, #0
        params->stride_width = transpose_conv_params->stride_w();
   1123c:	6060      	str	r0, [r4, #4]
   1123e:	2108      	movs	r1, #8
   11240:	4628      	mov	r0, r5
   11242:	f00d f87b 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->stride_height = transpose_conv_params->stride_h();
   11246:	60a0      	str	r0, [r4, #8]
      *builtin_data = params.release();
   11248:	f7ff bab2 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1124c:	682b      	ldr	r3, [r5, #0]
   1124e:	2201      	movs	r2, #1
   11250:	681b      	ldr	r3, [r3, #0]
   11252:	4611      	mov	r1, r2
   11254:	4628      	mov	r0, r5
   11256:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11258:	4604      	mov	r4, r0
   1125a:	b928      	cbnz	r0, 11268 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcf8>
   1125c:	4b4b      	ldr	r3, [pc, #300]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   1125e:	9301      	str	r3, [sp, #4]
   11260:	f240 336d 	movw	r3, #877	; 0x36d
   11264:	f7ff ba4d 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SparseToDenseOptions ? static_cast<const tflite::SparseToDenseOptions *>(builtin_options()) : nullptr;
   11268:	4638      	mov	r0, r7
   1126a:	f00d f861 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1126e:	2832      	cmp	r0, #50	; 0x32
   11270:	f47f aa9e 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11274:	4638      	mov	r0, r7
   11276:	f00d f844 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sparse_to_dense_params =
   1127a:	2800      	cmp	r0, #0
   1127c:	f43f aa98 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
   11280:	2200      	movs	r2, #0
   11282:	2104      	movs	r1, #4
   11284:	f00d f84b 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   11288:	3800      	subs	r0, #0
   1128a:	bf18      	it	ne
   1128c:	2001      	movne	r0, #1
   1128e:	7020      	strb	r0, [r4, #0]
      *builtin_data = params.release();
   11290:	f7ff ba8e 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11294:	682b      	ldr	r3, [r5, #0]
   11296:	2201      	movs	r2, #1
   11298:	681b      	ldr	r3, [r3, #0]
   1129a:	4611      	mov	r1, r2
   1129c:	4628      	mov	r0, r5
   1129e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   112a0:	4681      	mov	r9, r0
   112a2:	b928      	cbnz	r0, 112b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd40>
   112a4:	4b39      	ldr	r3, [pc, #228]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   112a6:	9301      	str	r3, [sp, #4]
   112a8:	f240 3377 	movw	r3, #887	; 0x377
   112ac:	f7ff ba29 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
   112b0:	4638      	mov	r0, r7
   112b2:	f00d f83d 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   112b6:	2837      	cmp	r0, #55	; 0x37
   112b8:	e774      	b.n	111a4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc34>
   112ba:	682b      	ldr	r3, [r5, #0]
   112bc:	2204      	movs	r2, #4
   112be:	681b      	ldr	r3, [r3, #0]
   112c0:	2108      	movs	r1, #8
   112c2:	4628      	mov	r0, r5
   112c4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   112c6:	4604      	mov	r4, r0
   112c8:	b928      	cbnz	r0, 112d6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd66>
   112ca:	4b30      	ldr	r3, [pc, #192]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   112cc:	9301      	str	r3, [sp, #4]
   112ce:	f240 3381 	movw	r3, #897	; 0x381
   112d2:	f7ff ba16 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
   112d6:	4638      	mov	r0, r7
   112d8:	f00d f82a 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   112dc:	283b      	cmp	r0, #59	; 0x3b
   112de:	f47f aa67 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   112e2:	4638      	mov	r0, r7
   112e4:	f00d f80d 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pack_params = op->builtin_options_as_PackOptions()) {
   112e8:	4605      	mov	r5, r0
   112ea:	2800      	cmp	r0, #0
   112ec:	f43f aa60 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   112f0:	2200      	movs	r2, #0
   112f2:	2104      	movs	r1, #4
   112f4:	f00d f822 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   112f8:	2200      	movs	r2, #0
        params->values_count = pack_params->values_count();
   112fa:	6020      	str	r0, [r4, #0]
   112fc:	2106      	movs	r1, #6
   112fe:	4628      	mov	r0, r5
   11300:	f00d f81c 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = pack_params->axis();
   11304:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   11306:	f7ff ba53 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
      TF_LITE_REPORT_ERROR(error_reporter,
   1130a:	4922      	ldr	r1, [pc, #136]	; (11394 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe24>)
   1130c:	4610      	mov	r0, r2
   1130e:	f00c ffc6 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   11312:	e4bf      	b.n	10c94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
   11314:	682b      	ldr	r3, [r5, #0]
   11316:	2204      	movs	r2, #4
   11318:	681b      	ldr	r3, [r3, #0]
   1131a:	2110      	movs	r1, #16
   1131c:	4628      	mov	r0, r5
   1131e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11320:	4604      	mov	r4, r0
   11322:	b928      	cbnz	r0, 11330 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc0>
   11324:	4b19      	ldr	r3, [pc, #100]	; (1138c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   11326:	9301      	str	r3, [sp, #4]
   11328:	f240 3391 	movw	r3, #913	; 0x391
   1132c:	f7ff b9e9 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_FakeQuantOptions ? static_cast<const tflite::FakeQuantOptions *>(builtin_options()) : nullptr;
   11330:	4638      	mov	r0, r7
   11332:	f00c fffd 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11336:	283a      	cmp	r0, #58	; 0x3a
   11338:	f47f aa3a 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1133c:	4638      	mov	r0, r7
   1133e:	f00c ffe0 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   11342:	4605      	mov	r5, r0
   11344:	2800      	cmp	r0, #0
   11346:	f43f aa33 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<float>(VT_MIN, 0.0f);
   1134a:	2104      	movs	r1, #4
   1134c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 11398 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe28>
   11350:	f00d f806 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_MAX, 0.0f);
   11354:	2106      	movs	r1, #6
        params->min = schema_params->min();
   11356:	ed84 0a00 	vstr	s0, [r4]
   1135a:	4628      	mov	r0, r5
   1135c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 11398 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe28>
   11360:	f00c fffe 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<int32_t>(VT_NUM_BITS, 0);
   11364:	2200      	movs	r2, #0
        params->max = schema_params->max();
   11366:	ed84 0a01 	vstr	s0, [r4, #4]
   1136a:	2108      	movs	r1, #8
   1136c:	4628      	mov	r0, r5
   1136e:	f00c ffe5 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
   11372:	2200      	movs	r2, #0
        params->num_bits = schema_params->num_bits();
   11374:	60a0      	str	r0, [r4, #8]
   11376:	210a      	movs	r1, #10
   11378:	4628      	mov	r0, r5
   1137a:	f00c ffd0 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1137e:	3800      	subs	r0, #0
   11380:	bf18      	it	ne
   11382:	2001      	movne	r0, #1
   11384:	7320      	strb	r0, [r4, #12]
      *builtin_data = params.release();
   11386:	f7ff ba13 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1138a:	bf00      	nop
   1138c:	0002c592 	.word	0x0002c592
   11390:	0002c619 	.word	0x0002c619
   11394:	0002c621 	.word	0x0002c621
   11398:	00000000 	.word	0x00000000
   1139c:	682b      	ldr	r3, [r5, #0]
   1139e:	2204      	movs	r2, #4
   113a0:	681b      	ldr	r3, [r3, #0]
   113a2:	4611      	mov	r1, r2
   113a4:	4628      	mov	r0, r5
   113a6:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   113a8:	4604      	mov	r4, r0
   113aa:	b928      	cbnz	r0, 113b8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe48>
   113ac:	4ba9      	ldr	r3, [pc, #676]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   113ae:	9301      	str	r3, [sp, #4]
   113b0:	f240 339e 	movw	r3, #926	; 0x39e
   113b4:	f7ff b9a5 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_OneHotOptions ? static_cast<const tflite::OneHotOptions *>(builtin_options()) : nullptr;
   113b8:	4638      	mov	r0, r7
   113ba:	f00c ffb9 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   113be:	283d      	cmp	r0, #61	; 0x3d
   113c0:	f47f a9f6 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   113c4:	4638      	mov	r0, r7
   113c6:	f00c ff9c 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
   113ca:	2800      	cmp	r0, #0
   113cc:	f43f a9f0 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_AXIS, 0);
   113d0:	2200      	movs	r2, #0
   113d2:	2104      	movs	r1, #4
   113d4:	f00c ffb2 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = schema_params->axis();
   113d8:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   113da:	f7ff b9e9 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   113de:	682b      	ldr	r3, [r5, #0]
   113e0:	2204      	movs	r2, #4
   113e2:	681b      	ldr	r3, [r3, #0]
   113e4:	2108      	movs	r1, #8
   113e6:	4628      	mov	r0, r5
   113e8:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   113ea:	4604      	mov	r4, r0
   113ec:	b928      	cbnz	r0, 113fa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8a>
   113ee:	4b99      	ldr	r3, [pc, #612]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   113f0:	9301      	str	r3, [sp, #4]
   113f2:	f240 33a7 	movw	r3, #935	; 0x3a7
   113f6:	f7ff b984 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_UnpackOptions ? static_cast<const tflite::UnpackOptions *>(builtin_options()) : nullptr;
   113fa:	4638      	mov	r0, r7
   113fc:	f00c ff98 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11400:	2840      	cmp	r0, #64	; 0x40
   11402:	f47f a9d5 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11406:	4638      	mov	r0, r7
   11408:	f00c ff7b 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* unpack_params = op->builtin_options_as_UnpackOptions()) {
   1140c:	4605      	mov	r5, r0
   1140e:	2800      	cmp	r0, #0
   11410:	f43f a9ce 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM, 0);
   11414:	2200      	movs	r2, #0
   11416:	2104      	movs	r1, #4
   11418:	f00c ff90 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   1141c:	2200      	movs	r2, #0
        params->num = unpack_params->num();
   1141e:	6020      	str	r0, [r4, #0]
   11420:	2106      	movs	r1, #6
   11422:	4628      	mov	r0, r5
   11424:	f00c ff8a 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = unpack_params->axis();
   11428:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   1142a:	f7ff b9c1 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1142e:	682b      	ldr	r3, [r5, #0]
   11430:	2204      	movs	r2, #4
   11432:	681b      	ldr	r3, [r3, #0]
   11434:	4611      	mov	r1, r2
   11436:	4628      	mov	r0, r5
   11438:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1143a:	4604      	mov	r4, r0
   1143c:	b928      	cbnz	r0, 1144a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xeda>
   1143e:	4b85      	ldr	r3, [pc, #532]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   11440:	9301      	str	r3, [sp, #4]
   11442:	f240 33b1 	movw	r3, #945	; 0x3b1
   11446:	f7ff b95c 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
   1144a:	4638      	mov	r0, r7
   1144c:	f00c ff70 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11450:	284b      	cmp	r0, #75	; 0x4b
   11452:	f47f a9ad 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11456:	4638      	mov	r0, r7
   11458:	f00c ff53 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* leaky_relu_params =
   1145c:	2800      	cmp	r0, #0
   1145e:	f43f a9a7 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<float>(VT_ALPHA, 0.0f);
   11462:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 11658 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e8>
   11466:	2104      	movs	r1, #4
   11468:	f00c ff7a 	bl	1e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->alpha = leaky_relu_params->alpha();
   1146c:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = params.release();
   11470:	f7ff b99e 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11474:	682b      	ldr	r3, [r5, #0]
   11476:	2201      	movs	r2, #1
   11478:	681b      	ldr	r3, [r3, #0]
   1147a:	4611      	mov	r1, r2
   1147c:	4628      	mov	r0, r5
   1147e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11480:	4604      	mov	r4, r0
   11482:	b928      	cbnz	r0, 11490 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf20>
   11484:	4b73      	ldr	r3, [pc, #460]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   11486:	9301      	str	r3, [sp, #4]
   11488:	f240 33bb 	movw	r3, #955	; 0x3bb
   1148c:	f7ff b939 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
   11490:	4638      	mov	r0, r7
   11492:	f00c ff4d 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11496:	284d      	cmp	r0, #77	; 0x4d
   11498:	f47f a98a 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1149c:	4638      	mov	r0, r7
   1149e:	f00c ff30 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (mirror_pad_params != nullptr) {
   114a2:	2800      	cmp	r0, #0
   114a4:	f43f a984 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
   114a8:	2200      	movs	r2, #0
   114aa:	2104      	movs	r1, #4
   114ac:	f00c ff4f 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
   114b0:	2800      	cmp	r0, #0
   114b2:	bf0c      	ite	eq
   114b4:	2301      	moveq	r3, #1
   114b6:	2302      	movne	r3, #2
        params->mode =
   114b8:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   114ba:	f7ff b979 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   114be:	682b      	ldr	r3, [r5, #0]
   114c0:	2201      	movs	r2, #1
   114c2:	681b      	ldr	r3, [r3, #0]
   114c4:	4611      	mov	r1, r2
   114c6:	4628      	mov	r0, r5
   114c8:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   114ca:	4604      	mov	r4, r0
   114cc:	b928      	cbnz	r0, 114da <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6a>
   114ce:	4b61      	ldr	r3, [pc, #388]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   114d0:	9301      	str	r3, [sp, #4]
   114d2:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   114d6:	f7ff b914 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
   114da:	4638      	mov	r0, r7
   114dc:	f00c ff28 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   114e0:	2850      	cmp	r0, #80	; 0x50
   114e2:	f47f a965 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   114e6:	4638      	mov	r0, r7
   114e8:	f00c ff0b 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (unique_params != nullptr) {
   114ec:	2800      	cmp	r0, #0
   114ee:	f43f a95f 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
   114f2:	2202      	movs	r2, #2
   114f4:	2104      	movs	r1, #4
   114f6:	f00c ff2a 	bl	1e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteType::kTfLiteInt64
   114fa:	2804      	cmp	r0, #4
   114fc:	bf0c      	ite	eq
   114fe:	2304      	moveq	r3, #4
   11500:	2302      	movne	r3, #2
        params->index_out_type =
   11502:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   11504:	f7ff b954 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11508:	682b      	ldr	r3, [r5, #0]
   1150a:	2204      	movs	r2, #4
   1150c:	681b      	ldr	r3, [r3, #0]
   1150e:	2108      	movs	r1, #8
   11510:	4628      	mov	r0, r5
   11512:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11514:	4604      	mov	r4, r0
   11516:	b928      	cbnz	r0, 11524 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfb4>
   11518:	4b4e      	ldr	r3, [pc, #312]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1151a:	9301      	str	r3, [sp, #4]
   1151c:	f240 33d5 	movw	r3, #981	; 0x3d5
   11520:	f7ff b8ef 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
   11524:	4638      	mov	r0, r7
   11526:	f00c ff03 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1152a:	2857      	cmp	r0, #87	; 0x57
   1152c:	f47f a940 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11530:	4638      	mov	r0, r7
   11532:	f00c fee6 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* reverse_seq_params =
   11536:	4605      	mov	r5, r0
   11538:	2800      	cmp	r0, #0
   1153a:	f43f a939 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_SEQ_DIM, 0);
   1153e:	2200      	movs	r2, #0
   11540:	2104      	movs	r1, #4
   11542:	f00c fefb 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_BATCH_DIM, 0);
   11546:	2200      	movs	r2, #0
        params->seq_dim = reverse_seq_params->seq_dim();
   11548:	6020      	str	r0, [r4, #0]
   1154a:	2106      	movs	r1, #6
   1154c:	4628      	mov	r0, r5
   1154e:	f00c fef5 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->batch_dim = reverse_seq_params->batch_dim();
   11552:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   11554:	f7ff b92c 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11558:	682b      	ldr	r3, [r5, #0]
   1155a:	2204      	movs	r2, #4
   1155c:	681b      	ldr	r3, [r3, #0]
   1155e:	2108      	movs	r1, #8
   11560:	4628      	mov	r0, r5
   11562:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11564:	4604      	mov	r4, r0
   11566:	b928      	cbnz	r0, 11574 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1004>
   11568:	4b3a      	ldr	r3, [pc, #232]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1156a:	9301      	str	r3, [sp, #4]
   1156c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   11570:	f7ff b8c7 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
   11574:	4638      	mov	r0, r7
   11576:	f00c fedb 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1157a:	285c      	cmp	r0, #92	; 0x5c
   1157c:	f47f a918 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11580:	4638      	mov	r0, r7
   11582:	f00c febe 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
   11586:	4605      	mov	r5, r0
   11588:	2800      	cmp	r0, #0
   1158a:	f43f a911 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
   1158e:	2200      	movs	r2, #0
   11590:	2104      	movs	r1, #4
   11592:	f00c fed3 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
   11596:	2200      	movs	r2, #0
        params->then_subgraph_index = if_params->then_subgraph_index();
   11598:	6020      	str	r0, [r4, #0]
   1159a:	2106      	movs	r1, #6
   1159c:	4628      	mov	r0, r5
   1159e:	f00c fecd 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->else_subgraph_index = if_params->else_subgraph_index();
   115a2:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   115a4:	f7ff b904 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115a8:	682b      	ldr	r3, [r5, #0]
   115aa:	2204      	movs	r2, #4
   115ac:	681b      	ldr	r3, [r3, #0]
   115ae:	2108      	movs	r1, #8
   115b0:	4628      	mov	r0, r5
   115b2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   115b4:	4604      	mov	r4, r0
   115b6:	b928      	cbnz	r0, 115c4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1054>
   115b8:	4b26      	ldr	r3, [pc, #152]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   115ba:	9301      	str	r3, [sp, #4]
   115bc:	f240 33ea 	movw	r3, #1002	; 0x3ea
   115c0:	f7ff b89f 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
   115c4:	4638      	mov	r0, r7
   115c6:	f00c feb3 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   115ca:	285d      	cmp	r0, #93	; 0x5d
   115cc:	f47f a8f0 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115d0:	4638      	mov	r0, r7
   115d2:	f00c fe96 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
   115d6:	4605      	mov	r5, r0
   115d8:	2800      	cmp	r0, #0
   115da:	f43f a8e9 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
   115de:	2200      	movs	r2, #0
   115e0:	2104      	movs	r1, #4
   115e2:	f00c feab 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
   115e6:	2200      	movs	r2, #0
        params->cond_subgraph_index = while_params->cond_subgraph_index();
   115e8:	6020      	str	r0, [r4, #0]
   115ea:	2106      	movs	r1, #6
   115ec:	4628      	mov	r0, r5
   115ee:	f00c fea5 	bl	1e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->body_subgraph_index = while_params->body_subgraph_index();
   115f2:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   115f4:	f7ff b8dc 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115f8:	682b      	ldr	r3, [r5, #0]
   115fa:	2201      	movs	r2, #1
   115fc:	681b      	ldr	r3, [r3, #0]
   115fe:	2102      	movs	r1, #2
   11600:	4628      	mov	r0, r5
   11602:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11604:	4604      	mov	r4, r0
   11606:	b928      	cbnz	r0, 11614 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a4>
   11608:	4b12      	ldr	r3, [pc, #72]	; (11654 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1160a:	9301      	str	r3, [sp, #4]
   1160c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
   11610:	f7ff b877 	b.w	10702 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
   11614:	4638      	mov	r0, r7
   11616:	f00c fe8b 	bl	1e330 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1161a:	2865      	cmp	r0, #101	; 0x65
   1161c:	f47f a8c8 	bne.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11620:	4638      	mov	r0, r7
   11622:	f00c fe6e 	bl	1e302 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bmm_params =
   11626:	4605      	mov	r5, r0
   11628:	2800      	cmp	r0, #0
   1162a:	f43f a8c1 	beq.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
   1162e:	2200      	movs	r2, #0
   11630:	2104      	movs	r1, #4
   11632:	f00c fe74 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   11636:	3800      	subs	r0, #0
   11638:	bf18      	it	ne
   1163a:	2001      	movne	r0, #1
   1163c:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
   1163e:	2200      	movs	r2, #0
   11640:	2106      	movs	r1, #6
   11642:	4628      	mov	r0, r5
   11644:	f00c fe6b 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   11648:	3800      	subs	r0, #0
   1164a:	bf18      	it	ne
   1164c:	2001      	movne	r0, #1
   1164e:	7060      	strb	r0, [r4, #1]
   11650:	f7ff b8ae 	b.w	107b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11654:	0002c592 	.word	0x0002c592
   11658:	00000000 	.word	0x00000000

0001165c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1165c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11660:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   11662:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   11664:	460f      	mov	r7, r1
  *registration = nullptr;
   11666:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   11668:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1166a:	4605      	mov	r5, r0
   1166c:	4690      	mov	r8, r2
   1166e:	f003 fffa 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   11672:	b100      	cbz	r0, 11676 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   11674:	5628      	ldrsb	r0, [r5, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   11676:	b2c4      	uxtb	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   11678:	2108      	movs	r1, #8
   1167a:	4628      	mov	r0, r5
   1167c:	f003 fff3 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   11680:	b158      	cbz	r0, 1169a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   11682:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   11684:	2c7e      	cmp	r4, #126	; 0x7e
   11686:	d90a      	bls.n	1169e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
   11688:	491d      	ldr	r1, [pc, #116]	; (11700 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   1168a:	4622      	mov	r2, r4
   1168c:	4640      	mov	r0, r8
   1168e:	f00c fe06 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
   11692:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   11694:	b002      	add	sp, #8
   11696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1169a:	2201      	movs	r2, #1
   1169c:	e7f2      	b.n	11684 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   1169e:	2c20      	cmp	r4, #32
   116a0:	d011      	beq.n	116c6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
    *registration = op_resolver.FindOp(builtin_code, version);
   116a2:	683b      	ldr	r3, [r7, #0]
   116a4:	9201      	str	r2, [sp, #4]
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	4621      	mov	r1, r4
   116aa:	4638      	mov	r0, r7
   116ac:	4798      	blx	r3
    if (*registration == nullptr) {
   116ae:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   116b0:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   116b2:	bb10      	cbnz	r0, 116fa <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
      TF_LITE_REPORT_ERROR(
   116b4:	4613      	mov	r3, r2
   116b6:	4a13      	ldr	r2, [pc, #76]	; (11704 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   116b8:	4913      	ldr	r1, [pc, #76]	; (11708 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   116ba:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   116be:	4640      	mov	r0, r8
   116c0:	f00c fded 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
   116c4:	e7e5      	b.n	11692 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   116c6:	2106      	movs	r1, #6
   116c8:	4628      	mov	r0, r5
   116ca:	9201      	str	r2, [sp, #4]
   116cc:	f003 ffcb 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   116d0:	b120      	cbz	r0, 116dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
   116d2:	582b      	ldr	r3, [r5, r0]
  } else if (!opcode->custom_code()) {
   116d4:	9a01      	ldr	r2, [sp, #4]
    auto p = data_ + field_offset;
   116d6:	1829      	adds	r1, r5, r0
   116d8:	18c9      	adds	r1, r1, r3
   116da:	d104      	bne.n	116e6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8a>
    TF_LITE_REPORT_ERROR(
   116dc:	490b      	ldr	r1, [pc, #44]	; (1170c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   116de:	4640      	mov	r0, r8
   116e0:	f00c fddd 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
   116e4:	e7d5      	b.n	11692 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
   116e6:	683b      	ldr	r3, [r7, #0]
   116e8:	3104      	adds	r1, #4
   116ea:	685b      	ldr	r3, [r3, #4]
   116ec:	4638      	mov	r0, r7
   116ee:	4798      	blx	r3
   116f0:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   116f2:	fab0 f080 	clz	r0, r0
   116f6:	0940      	lsrs	r0, r0, #5
   116f8:	e7cc      	b.n	11694 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
   116fa:	2000      	movs	r0, #0
   116fc:	e7ca      	b.n	11694 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   116fe:	bf00      	nop
   11700:	0002c647 	.word	0x0002c647
   11704:	00028acc 	.word	0x00028acc
   11708:	0002c69b 	.word	0x0002c69b
   1170c:	0002c6d0 	.word	0x0002c6d0

00011710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   11710:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (double_multiplier == 0.) {
   11712:	2300      	movs	r3, #0
                        int* shift) {
   11714:	4605      	mov	r5, r0
   11716:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   11718:	2200      	movs	r2, #0
   1171a:	ec51 0b10 	vmov	r0, r1, d0
   1171e:	ed8d 0b00 	vstr	d0, [sp]
   11722:	f7ef fd61 	bl	11e8 <__aeabi_dcmpeq>
   11726:	ed9d 0b00 	vldr	d0, [sp]
   1172a:	b120      	cbz	r0, 11736 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x26>
    *quantized_multiplier = 0;
   1172c:	2300      	movs	r3, #0
   1172e:	602b      	str	r3, [r5, #0]
    *shift = 0;
   11730:	6023      	str	r3, [r4, #0]
}
   11732:	b003      	add	sp, #12
   11734:	bd30      	pop	{r4, r5, pc}
  const double q = std::frexp(double_multiplier, shift);
   11736:	4620      	mov	r0, r4
   11738:	f000 fbde 	bl	11ef8 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1173c:	4b15      	ldr	r3, [pc, #84]	; (11794 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x84>)
   1173e:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   11740:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   11744:	f7ef fae8 	bl	d18 <__aeabi_dmul>
   11748:	ec41 0b10 	vmov	d0, r0, r1
   1174c:	f000 fc0a 	bl	11f64 <round>
   11750:	ec51 0b10 	vmov	r0, r1, d0
   11754:	f7ef fdf2 	bl	133c <__aeabi_d2lz>
   11758:	4602      	mov	r2, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   1175a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1175e:	460b      	mov	r3, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   11760:	4290      	cmp	r0, r2
   11762:	f04f 0100 	mov.w	r1, #0
   11766:	eb71 0c03 	sbcs.w	ip, r1, r3
   1176a:	da01      	bge.n	11770 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x60>
   1176c:	f00c ff31 	bl	1e5d2 <abort>
  if (q_fixed == (1ll << 31)) {
   11770:	428b      	cmp	r3, r1
   11772:	bf01      	itttt	eq
   11774:	4282      	cmpeq	r2, r0
    ++*shift;
   11776:	6823      	ldreq	r3, [r4, #0]
   11778:	3301      	addeq	r3, #1
   1177a:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   1177c:	6821      	ldr	r1, [r4, #0]
    q_fixed /= 2;
   1177e:	bf08      	it	eq
   11780:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
  if (*shift < -31) {
   11784:	311f      	adds	r1, #31
    *shift = 0;
   11786:	bfbe      	ittt	lt
   11788:	2300      	movlt	r3, #0
    q_fixed = 0;
   1178a:	2200      	movlt	r2, #0
    *shift = 0;
   1178c:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   1178e:	602a      	str	r2, [r5, #0]
   11790:	e7cf      	b.n	11732 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x22>
   11792:	bf00      	nop
   11794:	41e00000 	.word	0x41e00000

00011798 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   11798:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   1179a:	4b0c      	ldr	r3, [pc, #48]	; (117cc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
   1179c:	4605      	mov	r5, r0
   1179e:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   117a0:	2200      	movs	r2, #0
   117a2:	ec51 0b10 	vmov	r0, r1, d0
   117a6:	ed8d 0b00 	vstr	d0, [sp]
   117aa:	f7ef fd45 	bl	1238 <__aeabi_dcmpgt>
   117ae:	ed9d 0b00 	vldr	d0, [sp]
   117b2:	b908      	cbnz	r0, 117b8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
   117b4:	f00c ff0d 	bl	1e5d2 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   117b8:	4621      	mov	r1, r4
   117ba:	4628      	mov	r0, r5
   117bc:	f7ff ffa8 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   117c0:	6823      	ldr	r3, [r4, #0]
   117c2:	2b00      	cmp	r3, #0
   117c4:	dbf6      	blt.n	117b4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
   117c6:	b003      	add	sp, #12
   117c8:	bd30      	pop	{r4, r5, pc}
   117ca:	bf00      	nop
   117cc:	3ff00000 	.word	0x3ff00000

000117d0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
   117d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117d2:	ec55 4b10 	vmov	r4, r5, d0
   117d6:	4607      	mov	r7, r0
   117d8:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   117da:	4b0f      	ldr	r3, [pc, #60]	; (11818 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x48>)
   117dc:	ee10 0a10 	vmov	r0, s0
   117e0:	2200      	movs	r2, #0
   117e2:	4629      	mov	r1, r5
   117e4:	f7ef fd0a 	bl	11fc <__aeabi_dcmplt>
   117e8:	b908      	cbnz	r0, 117ee <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1e>
   117ea:	f00c fef2 	bl	1e5d2 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   117ee:	2200      	movs	r2, #0
   117f0:	2300      	movs	r3, #0
   117f2:	4620      	mov	r0, r4
   117f4:	4629      	mov	r1, r5
   117f6:	f7ef fd1f 	bl	1238 <__aeabi_dcmpgt>
   117fa:	2800      	cmp	r0, #0
   117fc:	d0f5      	beq.n	117ea <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1a>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   117fe:	ec45 4b10 	vmov	d0, r4, r5
   11802:	a901      	add	r1, sp, #4
   11804:	4638      	mov	r0, r7
   11806:	f7ff ff83 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
   1180a:	9b01      	ldr	r3, [sp, #4]
   1180c:	2b00      	cmp	r3, #0
   1180e:	dcec      	bgt.n	117ea <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1a>
  *left_shift = shift;
   11810:	6033      	str	r3, [r6, #0]
}
   11812:	b003      	add	sp, #12
   11814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11816:	bf00      	nop
   11818:	3ff00000 	.word	0x3ff00000

0001181c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   1181c:	edd1 7a03 	vldr	s15, [r1, #12]
   11820:	ed92 7a03 	vldr	s14, [r2, #12]
   11824:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   11828:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   1182a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   11832:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   11834:	d509      	bpl.n	1184a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   11836:	4b0f      	ldr	r3, [pc, #60]	; (11874 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   11838:	9300      	str	r3, [sp, #0]
   1183a:	6944      	ldr	r4, [r0, #20]
   1183c:	4a0e      	ldr	r2, [pc, #56]	; (11878 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   1183e:	490f      	ldr	r1, [pc, #60]	; (1187c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   11840:	23a7      	movs	r3, #167	; 0xa7
   11842:	47a0      	blx	r4
   11844:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   11846:	b002      	add	sp, #8
   11848:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   1184a:	ee17 0a90 	vmov	r0, s15
   1184e:	f7ef fa0b 	bl	c68 <__aeabi_f2d>
   11852:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   11854:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   11856:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   11858:	f7ef fa06 	bl	c68 <__aeabi_f2d>
   1185c:	460b      	mov	r3, r1
   1185e:	4602      	mov	r2, r0
   11860:	4629      	mov	r1, r5
   11862:	4620      	mov	r0, r4
   11864:	f7ef fb82 	bl	f6c <__aeabi_ddiv>
   11868:	9b06      	ldr	r3, [sp, #24]
   1186a:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   1186e:	2000      	movs	r0, #0
   11870:	e7e9      	b.n	11846 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   11872:	bf00      	nop
   11874:	0002c72e 	.word	0x0002c72e
   11878:	0002c707 	.word	0x0002c707
   1187c:	0002a6ae 	.word	0x0002a6ae

00011880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   11880:	b5f0      	push	{r4, r5, r6, r7, lr}
   11882:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   11884:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   11886:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   11888:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   1188a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   1188c:	d00d      	beq.n	118aa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   1188e:	2b09      	cmp	r3, #9
   11890:	d01e      	beq.n	118d0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   11892:	2b07      	cmp	r3, #7
   11894:	d020      	beq.n	118d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   11896:	4b25      	ldr	r3, [pc, #148]	; (1192c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xac>)
   11898:	9300      	str	r3, [sp, #0]
   1189a:	6944      	ldr	r4, [r0, #20]
   1189c:	4a24      	ldr	r2, [pc, #144]	; (11930 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   1189e:	4925      	ldr	r1, [pc, #148]	; (11934 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   118a0:	23da      	movs	r3, #218	; 0xda
   118a2:	47a0      	blx	r4
   118a4:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   118a6:	b005      	add	sp, #20
   118a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   118aa:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   118ac:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   118ae:	6913      	ldr	r3, [r2, #16]
  };
   118b0:	68d2      	ldr	r2, [r2, #12]
   118b2:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
   118b4:	2901      	cmp	r1, #1
  };
   118b6:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   118b8:	d112      	bne.n	118e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x60>
    *act_min = std::max(qmin, quantize(0.0));
   118ba:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 11938 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   118be:	a802      	add	r0, sp, #8
   118c0:	f00c fdb3 	bl	1e42a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   118c4:	4286      	cmp	r6, r0
   118c6:	bfac      	ite	ge
   118c8:	602e      	strge	r6, [r5, #0]
   118ca:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   118cc:	603c      	str	r4, [r7, #0]
   118ce:	e01b      	b.n	11908 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x88>
    qmax = std::numeric_limits<int8_t>::max();
   118d0:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   118d2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   118d6:	e7ea      	b.n	118ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmin = std::numeric_limits<int16_t>::min();
   118d8:	4e18      	ldr	r6, [pc, #96]	; (1193c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>)
    qmax = std::numeric_limits<int16_t>::max();
   118da:	f647 74ff 	movw	r4, #32767	; 0x7fff
   118de:	e7e6      	b.n	118ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActRelu6) {
   118e0:	2903      	cmp	r1, #3
   118e2:	d113      	bne.n	1190c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8c>
    *act_min = std::max(qmin, quantize(0.0));
   118e4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 11938 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   118e8:	a802      	add	r0, sp, #8
   118ea:	f00c fd9e 	bl	1e42a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   118ee:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   118f2:	4286      	cmp	r6, r0
   118f4:	bfac      	ite	ge
   118f6:	602e      	strge	r6, [r5, #0]
   118f8:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   118fa:	a802      	add	r0, sp, #8
   118fc:	f00c fd95 	bl	1e42a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   11900:	4284      	cmp	r4, r0
   11902:	bfd4      	ite	le
   11904:	603c      	strle	r4, [r7, #0]
   11906:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   11908:	2000      	movs	r0, #0
   1190a:	e7cc      	b.n	118a6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x26>
  } else if (activation == kTfLiteActReluN1To1) {
   1190c:	2902      	cmp	r1, #2
   1190e:	d10b      	bne.n	11928 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa8>
    *act_min = std::max(qmin, quantize(-1.0));
   11910:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   11914:	a802      	add	r0, sp, #8
   11916:	f00c fd88 	bl	1e42a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   1191a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   1191e:	4286      	cmp	r6, r0
   11920:	bfac      	ite	ge
   11922:	602e      	strge	r6, [r5, #0]
   11924:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   11926:	e7e8      	b.n	118fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7a>
    *act_min = qmin;
   11928:	602e      	str	r6, [r5, #0]
   1192a:	e7cf      	b.n	118cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
   1192c:	0002c769 	.word	0x0002c769
   11930:	0002c707 	.word	0x0002c707
   11934:	0002a6ae 	.word	0x0002a6ae
   11938:	00000000 	.word	0x00000000
   1193c:	ffff8000 	.word	0xffff8000

00011940 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   11944:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11948:	ed2d 8b06 	vpush	{d8-d10}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1194c:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11950:	ee08 3a90 	vmov	s17, r3
   11954:	b089      	sub	sp, #36	; 0x24
   11956:	4604      	mov	r4, r0
   11958:	460d      	mov	r5, r1
   1195a:	4616      	mov	r6, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1195c:	d011      	beq.n	11982 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x42>
   1195e:	2701      	movs	r7, #1
   11960:	4b74      	ldr	r3, [pc, #464]	; (11b34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   11962:	9301      	str	r3, [sp, #4]
   11964:	e9cd 8702 	strd	r8, r7, [sp, #8]
   11968:	4b73      	ldr	r3, [pc, #460]	; (11b38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
   1196a:	9300      	str	r3, [sp, #0]
   1196c:	6944      	ldr	r4, [r0, #20]
   1196e:	4a73      	ldr	r2, [pc, #460]	; (11b3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   11970:	4973      	ldr	r1, [pc, #460]	; (11b40 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   11972:	2335      	movs	r3, #53	; 0x35
   11974:	47a0      	blx	r4
}
   11976:	4638      	mov	r0, r7
   11978:	b009      	add	sp, #36	; 0x24
   1197a:	ecbd 8b06 	vpop	{d8-d10}
   1197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   11982:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
   11986:	2f01      	cmp	r7, #1
   11988:	d00c      	beq.n	119a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x64>
   1198a:	e9cd 7802 	strd	r7, r8, [sp, #8]
   1198e:	4b69      	ldr	r3, [pc, #420]	; (11b34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   11990:	9301      	str	r3, [sp, #4]
   11992:	4b6c      	ldr	r3, [pc, #432]	; (11b44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
   11994:	9300      	str	r3, [sp, #0]
   11996:	6944      	ldr	r4, [r0, #20]
   11998:	4a68      	ldr	r2, [pc, #416]	; (11b3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   1199a:	4969      	ldr	r1, [pc, #420]	; (11b40 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   1199c:	2337      	movs	r3, #55	; 0x37
   1199e:	47a0      	blx	r4
   119a0:	4647      	mov	r7, r8
   119a2:	e7e8      	b.n	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  const auto* affine_quantization =
   119a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   119a6:	b93a      	cbnz	r2, 119b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x78>
   119a8:	4b67      	ldr	r3, [pc, #412]	; (11b48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
   119aa:	9300      	str	r3, [sp, #0]
   119ac:	6944      	ldr	r4, [r0, #20]
   119ae:	2342      	movs	r3, #66	; 0x42
    TF_LITE_ENSURE(context,
   119b0:	4a62      	ldr	r2, [pc, #392]	; (11b3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   119b2:	4966      	ldr	r1, [pc, #408]	; (11b4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
   119b4:	47a0      	blx	r4
   119b6:	e7de      	b.n	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   119b8:	f8d2 8000 	ldr.w	r8, [r2]
   119bc:	f1b8 0f00 	cmp.w	r8, #0
   119c0:	d104      	bne.n	119cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8c>
   119c2:	4b63      	ldr	r3, [pc, #396]	; (11b50 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
   119c4:	9300      	str	r3, [sp, #0]
   119c6:	6944      	ldr	r4, [r0, #20]
   119c8:	2343      	movs	r3, #67	; 0x43
   119ca:	e7f1      	b.n	119b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   119cc:	f8d8 9000 	ldr.w	r9, [r8]
  if (is_per_channel) {
   119d0:	f1b9 0f01 	cmp.w	r9, #1
   119d4:	dd37      	ble.n	11a46 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
    TF_LITE_ENSURE(context,
   119d6:	780b      	ldrb	r3, [r1, #0]
   119d8:	2b09      	cmp	r3, #9
   119da:	d006      	beq.n	119ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   119dc:	2b07      	cmp	r3, #7
   119de:	d004      	beq.n	119ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   119e0:	4b5c      	ldr	r3, [pc, #368]	; (11b54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
   119e2:	9300      	str	r3, [sp, #0]
   119e4:	6944      	ldr	r4, [r0, #20]
   119e6:	2347      	movs	r3, #71	; 0x47
   119e8:	e7e2      	b.n	119b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   119ea:	7833      	ldrb	r3, [r6, #0]
   119ec:	2b09      	cmp	r3, #9
   119ee:	d00d      	beq.n	11a0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xcc>
   119f0:	2209      	movs	r2, #9
   119f2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   119f6:	4b58      	ldr	r3, [pc, #352]	; (11b58 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
   119f8:	9301      	str	r3, [sp, #4]
   119fa:	4b58      	ldr	r3, [pc, #352]	; (11b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
   119fc:	9300      	str	r3, [sp, #0]
   119fe:	6965      	ldr	r5, [r4, #20]
   11a00:	2349      	movs	r3, #73	; 0x49
    TF_LITE_ENSURE_EQ(
   11a02:	4a4e      	ldr	r2, [pc, #312]	; (11b3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   11a04:	494e      	ldr	r1, [pc, #312]	; (11b40 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   11a06:	4620      	mov	r0, r4
   11a08:	47a8      	blx	r5
   11a0a:	e7b4      	b.n	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   11a0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11a0e:	454b      	cmp	r3, r9
   11a10:	d008      	beq.n	11a24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe4>
   11a12:	e9cd 9302 	strd	r9, r3, [sp, #8]
   11a16:	4b52      	ldr	r3, [pc, #328]	; (11b60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   11a18:	9301      	str	r3, [sp, #4]
   11a1a:	4b52      	ldr	r3, [pc, #328]	; (11b64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   11a1c:	9300      	str	r3, [sp, #0]
   11a1e:	6965      	ldr	r5, [r4, #20]
   11a20:	234a      	movs	r3, #74	; 0x4a
   11a22:	e7ee      	b.n	11a02 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    TF_LITE_ENSURE_EQ(
   11a24:	6892      	ldr	r2, [r2, #8]
   11a26:	68b3      	ldr	r3, [r6, #8]
   11a28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11a2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11a2e:	685b      	ldr	r3, [r3, #4]
   11a30:	429a      	cmp	r2, r3
   11a32:	d008      	beq.n	11a46 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
   11a34:	9303      	str	r3, [sp, #12]
   11a36:	4b4c      	ldr	r3, [pc, #304]	; (11b68 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   11a38:	9301      	str	r3, [sp, #4]
   11a3a:	4b49      	ldr	r3, [pc, #292]	; (11b60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   11a3c:	9300      	str	r3, [sp, #0]
   11a3e:	9202      	str	r2, [sp, #8]
   11a40:	6965      	ldr	r5, [r4, #20]
   11a42:	234b      	movs	r3, #75	; 0x4b
   11a44:	e7dd      	b.n	11a02 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
                                          static_cast<double>(output_scale);
   11a46:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   11a48:	edd5 7a03 	vldr	s15, [r5, #12]
                                          static_cast<double>(output_scale);
   11a4c:	68d8      	ldr	r0, [r3, #12]
  const float input_scale = input->params.scale;
   11a4e:	eeb0 8a67 	vmov.f32	s16, s15
                                          static_cast<double>(output_scale);
   11a52:	f7ef f909 	bl	c68 <__aeabi_f2d>
   11a56:	4602      	mov	r2, r0
   11a58:	460b      	mov	r3, r1
   11a5a:	2000      	movs	r0, #0
   11a5c:	4943      	ldr	r1, [pc, #268]	; (11b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   11a5e:	f7ef fa85 	bl	f6c <__aeabi_ddiv>
   11a62:	ec41 0b19 	vmov	d9, r0, r1
   11a66:	f108 0a04 	add.w	sl, r8, #4
  for (int i = 0; i < num_channels; ++i) {
   11a6a:	2700      	movs	r7, #0
   11a6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11a6e:	42bb      	cmp	r3, r7
   11a70:	dd2b      	ble.n	11aca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x18a>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   11a72:	f1b9 0f01 	cmp.w	r9, #1
    const double effective_output_scale = static_cast<double>(input_scale) *
   11a76:	ee18 0a10 	vmov	r0, s16
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   11a7a:	bfcc      	ite	gt
   11a7c:	f8da b000 	ldrgt.w	fp, [sl]
   11a80:	f8d8 b004 	ldrle.w	fp, [r8, #4]
    const double effective_output_scale = static_cast<double>(input_scale) *
   11a84:	f7ef f8f0 	bl	c68 <__aeabi_f2d>
   11a88:	ec53 2b19 	vmov	r2, r3, d9
   11a8c:	f7ef f944 	bl	d18 <__aeabi_dmul>
   11a90:	ec41 0b1a 	vmov	d10, r0, r1
    const double filter_scale = static_cast<double>(scale);
   11a94:	4658      	mov	r0, fp
   11a96:	f7ef f8e7 	bl	c68 <__aeabi_f2d>
   11a9a:	4602      	mov	r2, r0
   11a9c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   11a9e:	ec51 0b1a 	vmov	r0, r1, d10
   11aa2:	f7ef f939 	bl	d18 <__aeabi_dmul>
   11aa6:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   11aaa:	a906      	add	r1, sp, #24
   11aac:	a805      	add	r0, sp, #20
   11aae:	f7ff fe2f 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   11ab2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11ab4:	9b05      	ldr	r3, [sp, #20]
   11ab6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
   11aba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11abc:	9b06      	ldr	r3, [sp, #24]
   11abe:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   11ac2:	f10a 0a04 	add.w	sl, sl, #4
   11ac6:	3701      	adds	r7, #1
   11ac8:	e7d0      	b.n	11a6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12c>
  if (input->type == kTfLiteUInt8) {
   11aca:	782b      	ldrb	r3, [r5, #0]
   11acc:	2b03      	cmp	r3, #3
   11ace:	d11c      	bne.n	11b0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
   11ad0:	2200      	movs	r2, #0
   11ad2:	2300      	movs	r3, #0
   11ad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   11ad8:	ab06      	add	r3, sp, #24
   11ada:	9301      	str	r3, [sp, #4]
   11adc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11ade:	9300      	str	r3, [sp, #0]
   11ae0:	4632      	mov	r2, r6
   11ae2:	ee18 3a90 	vmov	r3, s17
   11ae6:	4629      	mov	r1, r5
   11ae8:	4620      	mov	r0, r4
   11aea:	f7ef fccd 	bl	1488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   11aee:	4607      	mov	r7, r0
   11af0:	2800      	cmp	r0, #0
   11af2:	f47f af40 	bne.w	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   11af6:	ed9d 0b06 	vldr	d0, [sp, #24]
   11afa:	981a      	ldr	r0, [sp, #104]	; 0x68
   11afc:	a905      	add	r1, sp, #20
   11afe:	f7ff fe07 	bl	11710 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   11b02:	9b05      	ldr	r3, [sp, #20]
   11b04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11b06:	425b      	negs	r3, r3
   11b08:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   11b0a:	782b      	ldrb	r3, [r5, #0]
   11b0c:	2b09      	cmp	r3, #9
   11b0e:	d003      	beq.n	11b18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>
   11b10:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11b14:	2b03      	cmp	r3, #3
   11b16:	d10a      	bne.n	11b2e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ee>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   11b18:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   11b1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11b1e:	9300      	str	r3, [sp, #0]
   11b20:	7809      	ldrb	r1, [r1, #0]
   11b22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   11b24:	4620      	mov	r0, r4
   11b26:	f7ff feab 	bl	11880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   11b2a:	4607      	mov	r7, r0
   11b2c:	e723      	b.n	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  return kTfLiteOk;
   11b2e:	2700      	movs	r7, #0
   11b30:	e721      	b.n	11976 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
   11b32:	bf00      	nop
   11b34:	0002b222 	.word	0x0002b222
   11b38:	0002c76f 	.word	0x0002c76f
   11b3c:	0002c707 	.word	0x0002c707
   11b40:	0002af4f 	.word	0x0002af4f
   11b44:	0002b23c 	.word	0x0002b23c
   11b48:	0002b256 	.word	0x0002b256
   11b4c:	0002a6ae 	.word	0x0002a6ae
   11b50:	0002b26a 	.word	0x0002b26a
   11b54:	0002b462 	.word	0x0002b462
   11b58:	0002c26e 	.word	0x0002c26e
   11b5c:	0002c788 	.word	0x0002c788
   11b60:	0002c795 	.word	0x0002c795
   11b64:	0002b344 	.word	0x0002b344
   11b68:	0002c7a2 	.word	0x0002c7a2
   11b6c:	3ff00000 	.word	0x3ff00000

00011b70 <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
   11b70:	4b03      	ldr	r3, [pc, #12]	; (11b80 <DebugLog+0x10>)
   11b72:	4904      	ldr	r1, [pc, #16]	; (11b84 <DebugLog+0x14>)
   11b74:	681b      	ldr	r3, [r3, #0]
   11b76:	4602      	mov	r2, r0
   11b78:	68d8      	ldr	r0, [r3, #12]
   11b7a:	f001 bdef 	b.w	1375c <fiprintf>
   11b7e:	bf00      	nop
   11b80:	20000728 	.word	0x20000728
   11b84:	0002997a 	.word	0x0002997a

00011b88 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
   11b88:	b513      	push	{r0, r1, r4, lr}
   11b8a:	4614      	mov	r4, r2
   11b8c:	1e42      	subs	r2, r0, #1
   11b8e:	4603      	mov	r3, r0
   11b90:	2a08      	cmp	r2, #8
   11b92:	d811      	bhi.n	11bb8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x30>
   11b94:	e8df f002 	tbb	[pc, r2]
   11b98:	0e0c0505 	.word	0x0e0c0505
   11b9c:	0e0a0c10 	.word	0x0e0a0c10
   11ba0:	0c          	.byte	0x0c
   11ba1:	00          	.byte	0x00
  switch (type) {
    case kTfLiteFloat32:
      *size = sizeof(float);
   11ba2:	2304      	movs	r3, #4
      break;
    case kTfLiteInt16:
      *size = sizeof(int16_t);
   11ba4:	600b      	str	r3, [r1, #0]
    default:
      reporter->Report("Type %s (%d) not is not supported",
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   11ba6:	2000      	movs	r0, #0
}
   11ba8:	b002      	add	sp, #8
   11baa:	bd10      	pop	{r4, pc}
      *size = sizeof(int16_t);
   11bac:	2302      	movs	r3, #2
   11bae:	e7f9      	b.n	11ba4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(uint8_t);
   11bb0:	2301      	movs	r3, #1
   11bb2:	e7f7      	b.n	11ba4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(int64_t);
   11bb4:	2308      	movs	r3, #8
   11bb6:	e7f5      	b.n	11ba4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      reporter->Report("Type %s (%d) not is not supported",
   11bb8:	4618      	mov	r0, r3
   11bba:	9301      	str	r3, [sp, #4]
   11bbc:	f7ee fe79 	bl	8b2 <TfLiteTypeGetName>
   11bc0:	9b01      	ldr	r3, [sp, #4]
   11bc2:	4903      	ldr	r1, [pc, #12]	; (11bd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x48>)
   11bc4:	4602      	mov	r2, r0
   11bc6:	4620      	mov	r0, r4
   11bc8:	f00c fb69 	bl	1e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   11bcc:	2001      	movs	r0, #1
   11bce:	e7eb      	b.n	11ba8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x20>
   11bd0:	0002c7df 	.word	0x0002c7df

00011bd4 <nrf_cc310_platform_init_no_rng>:
   11bd4:	b510      	push	{r4, lr}
   11bd6:	4c09      	ldr	r4, [pc, #36]	; (11bfc <nrf_cc310_platform_init_no_rng+0x28>)
   11bd8:	6823      	ldr	r3, [r4, #0]
   11bda:	b11b      	cbz	r3, 11be4 <nrf_cc310_platform_init_no_rng+0x10>
   11bdc:	2301      	movs	r3, #1
   11bde:	6023      	str	r3, [r4, #0]
   11be0:	2000      	movs	r0, #0
   11be2:	bd10      	pop	{r4, pc}
   11be4:	f000 f880 	bl	11ce8 <CC_LibInitNoRng>
   11be8:	2800      	cmp	r0, #0
   11bea:	d0f7      	beq.n	11bdc <nrf_cc310_platform_init_no_rng+0x8>
   11bec:	3801      	subs	r0, #1
   11bee:	2806      	cmp	r0, #6
   11bf0:	bf96      	itet	ls
   11bf2:	4b03      	ldrls	r3, [pc, #12]	; (11c00 <nrf_cc310_platform_init_no_rng+0x2c>)
   11bf4:	4803      	ldrhi	r0, [pc, #12]	; (11c04 <nrf_cc310_platform_init_no_rng+0x30>)
   11bf6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   11bfa:	bd10      	pop	{r4, pc}
   11bfc:	20010c9c 	.word	0x20010c9c
   11c00:	00028d5c 	.word	0x00028d5c
   11c04:	ffff8ffe 	.word	0xffff8ffe

00011c08 <nrf_cc310_platform_abort>:
   11c08:	f3bf 8f4f 	dsb	sy
   11c0c:	4905      	ldr	r1, [pc, #20]	; (11c24 <nrf_cc310_platform_abort+0x1c>)
   11c0e:	4b06      	ldr	r3, [pc, #24]	; (11c28 <nrf_cc310_platform_abort+0x20>)
   11c10:	68ca      	ldr	r2, [r1, #12]
   11c12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11c16:	4313      	orrs	r3, r2
   11c18:	60cb      	str	r3, [r1, #12]
   11c1a:	f3bf 8f4f 	dsb	sy
   11c1e:	bf00      	nop
   11c20:	e7fd      	b.n	11c1e <nrf_cc310_platform_abort+0x16>
   11c22:	bf00      	nop
   11c24:	e000ed00 	.word	0xe000ed00
   11c28:	05fa0004 	.word	0x05fa0004

00011c2c <CC_PalAbort>:
   11c2c:	4b01      	ldr	r3, [pc, #4]	; (11c34 <CC_PalAbort+0x8>)
   11c2e:	685b      	ldr	r3, [r3, #4]
   11c30:	4718      	bx	r3
   11c32:	bf00      	nop
   11c34:	200006e8 	.word	0x200006e8

00011c38 <nrf_cc310_platform_set_abort>:
   11c38:	e9d0 1200 	ldrd	r1, r2, [r0]
   11c3c:	4b01      	ldr	r3, [pc, #4]	; (11c44 <nrf_cc310_platform_set_abort+0xc>)
   11c3e:	e9c3 1200 	strd	r1, r2, [r3]
   11c42:	4770      	bx	lr
   11c44:	200006e8 	.word	0x200006e8

00011c48 <mutex_free>:
   11c48:	4770      	bx	lr
   11c4a:	bf00      	nop

00011c4c <mutex_unlock>:
   11c4c:	b510      	push	{r4, lr}
   11c4e:	4604      	mov	r4, r0
   11c50:	b120      	cbz	r0, 11c5c <mutex_unlock+0x10>
   11c52:	f3bf 8f5f 	dmb	sy
   11c56:	2000      	movs	r0, #0
   11c58:	6020      	str	r0, [r4, #0]
   11c5a:	bd10      	pop	{r4, pc}
   11c5c:	4803      	ldr	r0, [pc, #12]	; (11c6c <mutex_unlock+0x20>)
   11c5e:	f7ff ffe5 	bl	11c2c <CC_PalAbort>
   11c62:	f3bf 8f5f 	dmb	sy
   11c66:	2000      	movs	r0, #0
   11c68:	6020      	str	r0, [r4, #0]
   11c6a:	bd10      	pop	{r4, pc}
   11c6c:	00028d9c 	.word	0x00028d9c

00011c70 <mutex_init>:
   11c70:	b510      	push	{r4, lr}
   11c72:	4604      	mov	r4, r0
   11c74:	b110      	cbz	r0, 11c7c <mutex_init+0xc>
   11c76:	2300      	movs	r3, #0
   11c78:	6023      	str	r3, [r4, #0]
   11c7a:	bd10      	pop	{r4, pc}
   11c7c:	4802      	ldr	r0, [pc, #8]	; (11c88 <mutex_init+0x18>)
   11c7e:	f7ff ffd5 	bl	11c2c <CC_PalAbort>
   11c82:	2300      	movs	r3, #0
   11c84:	6023      	str	r3, [r4, #0]
   11c86:	bd10      	pop	{r4, pc}
   11c88:	00028d78 	.word	0x00028d78

00011c8c <mutex_lock>:
   11c8c:	b170      	cbz	r0, 11cac <mutex_lock+0x20>
   11c8e:	2201      	movs	r2, #1
   11c90:	f3bf 8f5b 	dmb	ish
   11c94:	e850 3f00 	ldrex	r3, [r0]
   11c98:	e840 2100 	strex	r1, r2, [r0]
   11c9c:	2900      	cmp	r1, #0
   11c9e:	d1f9      	bne.n	11c94 <mutex_lock+0x8>
   11ca0:	f3bf 8f5b 	dmb	ish
   11ca4:	2b01      	cmp	r3, #1
   11ca6:	d0f3      	beq.n	11c90 <mutex_lock+0x4>
   11ca8:	f3bf 8f5f 	dmb	sy
   11cac:	2000      	movs	r0, #0
   11cae:	4770      	bx	lr

00011cb0 <nrf_cc310_platform_set_mutexes>:
   11cb0:	b470      	push	{r4, r5, r6}
   11cb2:	e9d0 6500 	ldrd	r6, r5, [r0]
   11cb6:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   11cba:	4b09      	ldr	r3, [pc, #36]	; (11ce0 <nrf_cc310_platform_set_mutexes+0x30>)
   11cbc:	e9c3 4202 	strd	r4, r2, [r3, #8]
   11cc0:	e9c3 6500 	strd	r6, r5, [r3]
   11cc4:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   11cc8:	e9d1 6500 	ldrd	r6, r5, [r1]
   11ccc:	4b05      	ldr	r3, [pc, #20]	; (11ce4 <nrf_cc310_platform_set_mutexes+0x34>)
   11cce:	690a      	ldr	r2, [r1, #16]
   11cd0:	611a      	str	r2, [r3, #16]
   11cd2:	e9c3 6500 	strd	r6, r5, [r3]
   11cd6:	e9c3 4002 	strd	r4, r0, [r3, #8]
   11cda:	bc70      	pop	{r4, r5, r6}
   11cdc:	4770      	bx	lr
   11cde:	bf00      	nop
   11ce0:	200006f0 	.word	0x200006f0
   11ce4:	20000700 	.word	0x20000700

00011ce8 <CC_LibInitNoRng>:
   11ce8:	b510      	push	{r4, lr}
   11cea:	f000 f833 	bl	11d54 <CC_HalInit>
   11cee:	b970      	cbnz	r0, 11d0e <CC_LibInitNoRng+0x26>
   11cf0:	f000 f83a 	bl	11d68 <CC_PalInit>
   11cf4:	b980      	cbnz	r0, 11d18 <CC_LibInitNoRng+0x30>
   11cf6:	f000 f8b5 	bl	11e64 <CC_PalPowerSaveModeSelect>
   11cfa:	b980      	cbnz	r0, 11d1e <CC_LibInitNoRng+0x36>
   11cfc:	4b11      	ldr	r3, [pc, #68]	; (11d44 <CC_LibInitNoRng+0x5c>)
   11cfe:	681b      	ldr	r3, [r3, #0]
   11d00:	0e1b      	lsrs	r3, r3, #24
   11d02:	2bf0      	cmp	r3, #240	; 0xf0
   11d04:	d00d      	beq.n	11d22 <CC_LibInitNoRng+0x3a>
   11d06:	2406      	movs	r4, #6
   11d08:	f000 f826 	bl	11d58 <CC_HalTerminate>
   11d0c:	e000      	b.n	11d10 <CC_LibInitNoRng+0x28>
   11d0e:	2403      	movs	r4, #3
   11d10:	f000 f858 	bl	11dc4 <CC_PalTerminate>
   11d14:	4620      	mov	r0, r4
   11d16:	bd10      	pop	{r4, pc}
   11d18:	2404      	movs	r4, #4
   11d1a:	4620      	mov	r0, r4
   11d1c:	bd10      	pop	{r4, pc}
   11d1e:	2400      	movs	r4, #0
   11d20:	e7f2      	b.n	11d08 <CC_LibInitNoRng+0x20>
   11d22:	4a09      	ldr	r2, [pc, #36]	; (11d48 <CC_LibInitNoRng+0x60>)
   11d24:	4b09      	ldr	r3, [pc, #36]	; (11d4c <CC_LibInitNoRng+0x64>)
   11d26:	6812      	ldr	r2, [r2, #0]
   11d28:	429a      	cmp	r2, r3
   11d2a:	d001      	beq.n	11d30 <CC_LibInitNoRng+0x48>
   11d2c:	2407      	movs	r4, #7
   11d2e:	e7eb      	b.n	11d08 <CC_LibInitNoRng+0x20>
   11d30:	2001      	movs	r0, #1
   11d32:	f000 f897 	bl	11e64 <CC_PalPowerSaveModeSelect>
   11d36:	2800      	cmp	r0, #0
   11d38:	d1f1      	bne.n	11d1e <CC_LibInitNoRng+0x36>
   11d3a:	4b05      	ldr	r3, [pc, #20]	; (11d50 <CC_LibInitNoRng+0x68>)
   11d3c:	4604      	mov	r4, r0
   11d3e:	6018      	str	r0, [r3, #0]
   11d40:	e7e8      	b.n	11d14 <CC_LibInitNoRng+0x2c>
   11d42:	bf00      	nop
   11d44:	5002b928 	.word	0x5002b928
   11d48:	5002ba24 	.word	0x5002ba24
   11d4c:	20e00000 	.word	0x20e00000
   11d50:	5002ba0c 	.word	0x5002ba0c

00011d54 <CC_HalInit>:
   11d54:	2000      	movs	r0, #0
   11d56:	4770      	bx	lr

00011d58 <CC_HalTerminate>:
   11d58:	2000      	movs	r0, #0
   11d5a:	4770      	bx	lr

00011d5c <CC_HalMaskInterrupt>:
   11d5c:	4b01      	ldr	r3, [pc, #4]	; (11d64 <CC_HalMaskInterrupt+0x8>)
   11d5e:	6018      	str	r0, [r3, #0]
   11d60:	4770      	bx	lr
   11d62:	bf00      	nop
   11d64:	5002ba04 	.word	0x5002ba04

00011d68 <CC_PalInit>:
   11d68:	b510      	push	{r4, lr}
   11d6a:	4811      	ldr	r0, [pc, #68]	; (11db0 <CC_PalInit+0x48>)
   11d6c:	f000 f848 	bl	11e00 <CC_PalMutexCreate>
   11d70:	b100      	cbz	r0, 11d74 <CC_PalInit+0xc>
   11d72:	bd10      	pop	{r4, pc}
   11d74:	480f      	ldr	r0, [pc, #60]	; (11db4 <CC_PalInit+0x4c>)
   11d76:	f000 f843 	bl	11e00 <CC_PalMutexCreate>
   11d7a:	2800      	cmp	r0, #0
   11d7c:	d1f9      	bne.n	11d72 <CC_PalInit+0xa>
   11d7e:	4c0e      	ldr	r4, [pc, #56]	; (11db8 <CC_PalInit+0x50>)
   11d80:	4620      	mov	r0, r4
   11d82:	f000 f83d 	bl	11e00 <CC_PalMutexCreate>
   11d86:	2800      	cmp	r0, #0
   11d88:	d1f3      	bne.n	11d72 <CC_PalInit+0xa>
   11d8a:	4b0c      	ldr	r3, [pc, #48]	; (11dbc <CC_PalInit+0x54>)
   11d8c:	480c      	ldr	r0, [pc, #48]	; (11dc0 <CC_PalInit+0x58>)
   11d8e:	601c      	str	r4, [r3, #0]
   11d90:	f000 f836 	bl	11e00 <CC_PalMutexCreate>
   11d94:	4601      	mov	r1, r0
   11d96:	2800      	cmp	r0, #0
   11d98:	d1eb      	bne.n	11d72 <CC_PalInit+0xa>
   11d9a:	f000 f82d 	bl	11df8 <CC_PalDmaInit>
   11d9e:	4604      	mov	r4, r0
   11da0:	b108      	cbz	r0, 11da6 <CC_PalInit+0x3e>
   11da2:	4620      	mov	r0, r4
   11da4:	bd10      	pop	{r4, pc}
   11da6:	f000 f83f 	bl	11e28 <CC_PalPowerSaveModeInit>
   11daa:	4620      	mov	r0, r4
   11dac:	e7fa      	b.n	11da4 <CC_PalInit+0x3c>
   11dae:	bf00      	nop
   11db0:	20000720 	.word	0x20000720
   11db4:	20000714 	.word	0x20000714
   11db8:	2000071c 	.word	0x2000071c
   11dbc:	20000724 	.word	0x20000724
   11dc0:	20000718 	.word	0x20000718

00011dc4 <CC_PalTerminate>:
   11dc4:	b508      	push	{r3, lr}
   11dc6:	4808      	ldr	r0, [pc, #32]	; (11de8 <CC_PalTerminate+0x24>)
   11dc8:	f000 f824 	bl	11e14 <CC_PalMutexDestroy>
   11dcc:	4807      	ldr	r0, [pc, #28]	; (11dec <CC_PalTerminate+0x28>)
   11dce:	f000 f821 	bl	11e14 <CC_PalMutexDestroy>
   11dd2:	4807      	ldr	r0, [pc, #28]	; (11df0 <CC_PalTerminate+0x2c>)
   11dd4:	f000 f81e 	bl	11e14 <CC_PalMutexDestroy>
   11dd8:	4806      	ldr	r0, [pc, #24]	; (11df4 <CC_PalTerminate+0x30>)
   11dda:	f000 f81b 	bl	11e14 <CC_PalMutexDestroy>
   11dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11de2:	f000 b80b 	b.w	11dfc <CC_PalDmaTerminate>
   11de6:	bf00      	nop
   11de8:	20000720 	.word	0x20000720
   11dec:	20000714 	.word	0x20000714
   11df0:	2000071c 	.word	0x2000071c
   11df4:	20000718 	.word	0x20000718

00011df8 <CC_PalDmaInit>:
   11df8:	2000      	movs	r0, #0
   11dfa:	4770      	bx	lr

00011dfc <CC_PalDmaTerminate>:
   11dfc:	4770      	bx	lr
   11dfe:	bf00      	nop

00011e00 <CC_PalMutexCreate>:
   11e00:	b508      	push	{r3, lr}
   11e02:	4b03      	ldr	r3, [pc, #12]	; (11e10 <CC_PalMutexCreate+0x10>)
   11e04:	6802      	ldr	r2, [r0, #0]
   11e06:	681b      	ldr	r3, [r3, #0]
   11e08:	6810      	ldr	r0, [r2, #0]
   11e0a:	4798      	blx	r3
   11e0c:	2000      	movs	r0, #0
   11e0e:	bd08      	pop	{r3, pc}
   11e10:	200006f0 	.word	0x200006f0

00011e14 <CC_PalMutexDestroy>:
   11e14:	b508      	push	{r3, lr}
   11e16:	4b03      	ldr	r3, [pc, #12]	; (11e24 <CC_PalMutexDestroy+0x10>)
   11e18:	6802      	ldr	r2, [r0, #0]
   11e1a:	685b      	ldr	r3, [r3, #4]
   11e1c:	6810      	ldr	r0, [r2, #0]
   11e1e:	4798      	blx	r3
   11e20:	2000      	movs	r0, #0
   11e22:	bd08      	pop	{r3, pc}
   11e24:	200006f0 	.word	0x200006f0

00011e28 <CC_PalPowerSaveModeInit>:
   11e28:	b570      	push	{r4, r5, r6, lr}
   11e2a:	4c09      	ldr	r4, [pc, #36]	; (11e50 <CC_PalPowerSaveModeInit+0x28>)
   11e2c:	4d09      	ldr	r5, [pc, #36]	; (11e54 <CC_PalPowerSaveModeInit+0x2c>)
   11e2e:	6920      	ldr	r0, [r4, #16]
   11e30:	68ab      	ldr	r3, [r5, #8]
   11e32:	4798      	blx	r3
   11e34:	b118      	cbz	r0, 11e3e <CC_PalPowerSaveModeInit+0x16>
   11e36:	4b08      	ldr	r3, [pc, #32]	; (11e58 <CC_PalPowerSaveModeInit+0x30>)
   11e38:	4808      	ldr	r0, [pc, #32]	; (11e5c <CC_PalPowerSaveModeInit+0x34>)
   11e3a:	685b      	ldr	r3, [r3, #4]
   11e3c:	4798      	blx	r3
   11e3e:	4a08      	ldr	r2, [pc, #32]	; (11e60 <CC_PalPowerSaveModeInit+0x38>)
   11e40:	68eb      	ldr	r3, [r5, #12]
   11e42:	6920      	ldr	r0, [r4, #16]
   11e44:	2100      	movs	r1, #0
   11e46:	6011      	str	r1, [r2, #0]
   11e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11e4c:	4718      	bx	r3
   11e4e:	bf00      	nop
   11e50:	20000700 	.word	0x20000700
   11e54:	200006f0 	.word	0x200006f0
   11e58:	200006e8 	.word	0x200006e8
   11e5c:	00028dbc 	.word	0x00028dbc
   11e60:	20010cb0 	.word	0x20010cb0

00011e64 <CC_PalPowerSaveModeSelect>:
   11e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e66:	4c1a      	ldr	r4, [pc, #104]	; (11ed0 <CC_PalPowerSaveModeSelect+0x6c>)
   11e68:	4d1a      	ldr	r5, [pc, #104]	; (11ed4 <CC_PalPowerSaveModeSelect+0x70>)
   11e6a:	4607      	mov	r7, r0
   11e6c:	68ab      	ldr	r3, [r5, #8]
   11e6e:	6920      	ldr	r0, [r4, #16]
   11e70:	4798      	blx	r3
   11e72:	b9e8      	cbnz	r0, 11eb0 <CC_PalPowerSaveModeSelect+0x4c>
   11e74:	4e18      	ldr	r6, [pc, #96]	; (11ed8 <CC_PalPowerSaveModeSelect+0x74>)
   11e76:	6833      	ldr	r3, [r6, #0]
   11e78:	b97f      	cbnz	r7, 11e9a <CC_PalPowerSaveModeSelect+0x36>
   11e7a:	b93b      	cbnz	r3, 11e8c <CC_PalPowerSaveModeSelect+0x28>
   11e7c:	4a17      	ldr	r2, [pc, #92]	; (11edc <CC_PalPowerSaveModeSelect+0x78>)
   11e7e:	4918      	ldr	r1, [pc, #96]	; (11ee0 <CC_PalPowerSaveModeSelect+0x7c>)
   11e80:	2001      	movs	r0, #1
   11e82:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   11e86:	680a      	ldr	r2, [r1, #0]
   11e88:	2a00      	cmp	r2, #0
   11e8a:	d1fc      	bne.n	11e86 <CC_PalPowerSaveModeSelect+0x22>
   11e8c:	3301      	adds	r3, #1
   11e8e:	6033      	str	r3, [r6, #0]
   11e90:	68eb      	ldr	r3, [r5, #12]
   11e92:	6920      	ldr	r0, [r4, #16]
   11e94:	4798      	blx	r3
   11e96:	2000      	movs	r0, #0
   11e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d0f8      	beq.n	11e90 <CC_PalPowerSaveModeSelect+0x2c>
   11e9e:	2b01      	cmp	r3, #1
   11ea0:	d008      	beq.n	11eb4 <CC_PalPowerSaveModeSelect+0x50>
   11ea2:	3b01      	subs	r3, #1
   11ea4:	6033      	str	r3, [r6, #0]
   11ea6:	6920      	ldr	r0, [r4, #16]
   11ea8:	68eb      	ldr	r3, [r5, #12]
   11eaa:	4798      	blx	r3
   11eac:	2000      	movs	r0, #0
   11eae:	e7f3      	b.n	11e98 <CC_PalPowerSaveModeSelect+0x34>
   11eb0:	480c      	ldr	r0, [pc, #48]	; (11ee4 <CC_PalPowerSaveModeSelect+0x80>)
   11eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11eb4:	4a0a      	ldr	r2, [pc, #40]	; (11ee0 <CC_PalPowerSaveModeSelect+0x7c>)
   11eb6:	6813      	ldr	r3, [r2, #0]
   11eb8:	2b00      	cmp	r3, #0
   11eba:	d1fc      	bne.n	11eb6 <CC_PalPowerSaveModeSelect+0x52>
   11ebc:	4a07      	ldr	r2, [pc, #28]	; (11edc <CC_PalPowerSaveModeSelect+0x78>)
   11ebe:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   11ec2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   11ec6:	f7ff ff49 	bl	11d5c <CC_HalMaskInterrupt>
   11eca:	6833      	ldr	r3, [r6, #0]
   11ecc:	e7e9      	b.n	11ea2 <CC_PalPowerSaveModeSelect+0x3e>
   11ece:	bf00      	nop
   11ed0:	20000700 	.word	0x20000700
   11ed4:	200006f0 	.word	0x200006f0
   11ed8:	20010cb0 	.word	0x20010cb0
   11edc:	5002a000 	.word	0x5002a000
   11ee0:	5002b910 	.word	0x5002b910
   11ee4:	ffff8fe9 	.word	0xffff8fe9

00011ee8 <_ZSt15get_new_handlerv>:
   11ee8:	4b02      	ldr	r3, [pc, #8]	; (11ef4 <_ZSt15get_new_handlerv+0xc>)
   11eea:	6818      	ldr	r0, [r3, #0]
   11eec:	f3bf 8f5b 	dmb	ish
   11ef0:	4770      	bx	lr
   11ef2:	bf00      	nop
   11ef4:	20010cb4 	.word	0x20010cb4

00011ef8 <frexp>:
   11ef8:	ec53 2b10 	vmov	r2, r3, d0
   11efc:	b570      	push	{r4, r5, r6, lr}
   11efe:	4e16      	ldr	r6, [pc, #88]	; (11f58 <frexp+0x60>)
   11f00:	4605      	mov	r5, r0
   11f02:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   11f06:	2000      	movs	r0, #0
   11f08:	42b1      	cmp	r1, r6
   11f0a:	6028      	str	r0, [r5, #0]
   11f0c:	dc21      	bgt.n	11f52 <frexp+0x5a>
   11f0e:	ee10 6a10 	vmov	r6, s0
   11f12:	430e      	orrs	r6, r1
   11f14:	d01d      	beq.n	11f52 <frexp+0x5a>
   11f16:	4e11      	ldr	r6, [pc, #68]	; (11f5c <frexp+0x64>)
   11f18:	401e      	ands	r6, r3
   11f1a:	461c      	mov	r4, r3
   11f1c:	b966      	cbnz	r6, 11f38 <frexp+0x40>
   11f1e:	4619      	mov	r1, r3
   11f20:	2200      	movs	r2, #0
   11f22:	ee10 0a10 	vmov	r0, s0
   11f26:	4b0e      	ldr	r3, [pc, #56]	; (11f60 <frexp+0x68>)
   11f28:	f7ee fef6 	bl	d18 <__aeabi_dmul>
   11f2c:	4602      	mov	r2, r0
   11f2e:	460c      	mov	r4, r1
   11f30:	f06f 0035 	mvn.w	r0, #53	; 0x35
   11f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11f38:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   11f3c:	1509      	asrs	r1, r1, #20
   11f3e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   11f42:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   11f46:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   11f4a:	4401      	add	r1, r0
   11f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   11f50:	6029      	str	r1, [r5, #0]
   11f52:	ec43 2b10 	vmov	d0, r2, r3
   11f56:	bd70      	pop	{r4, r5, r6, pc}
   11f58:	7fefffff 	.word	0x7fefffff
   11f5c:	7ff00000 	.word	0x7ff00000
   11f60:	43500000 	.word	0x43500000

00011f64 <round>:
   11f64:	ec53 2b10 	vmov	r2, r3, d0
   11f68:	b570      	push	{r4, r5, r6, lr}
   11f6a:	f3c3 540a 	ubfx	r4, r3, #20, #11
   11f6e:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
   11f72:	2913      	cmp	r1, #19
   11f74:	ee10 0a10 	vmov	r0, s0
   11f78:	461d      	mov	r5, r3
   11f7a:	dc0a      	bgt.n	11f92 <round+0x2e>
   11f7c:	2900      	cmp	r1, #0
   11f7e:	db26      	blt.n	11fce <round+0x6a>
   11f80:	4c1e      	ldr	r4, [pc, #120]	; (11ffc <round+0x98>)
   11f82:	410c      	asrs	r4, r1
   11f84:	ea03 0604 	and.w	r6, r3, r4
   11f88:	4330      	orrs	r0, r6
   11f8a:	d12e      	bne.n	11fea <round+0x86>
   11f8c:	ec43 2b10 	vmov	d0, r2, r3
   11f90:	bd70      	pop	{r4, r5, r6, pc}
   11f92:	2933      	cmp	r1, #51	; 0x33
   11f94:	dd08      	ble.n	11fa8 <round+0x44>
   11f96:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11f9a:	d1f7      	bne.n	11f8c <round+0x28>
   11f9c:	4619      	mov	r1, r3
   11f9e:	f7ee fd05 	bl	9ac <__adddf3>
   11fa2:	ec41 0b10 	vmov	d0, r0, r1
   11fa6:	bd70      	pop	{r4, r5, r6, pc}
   11fa8:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   11fac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11fb0:	fa26 f404 	lsr.w	r4, r6, r4
   11fb4:	4222      	tst	r2, r4
   11fb6:	d0e9      	beq.n	11f8c <round+0x28>
   11fb8:	2301      	movs	r3, #1
   11fba:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   11fbe:	fa03 f101 	lsl.w	r1, r3, r1
   11fc2:	1840      	adds	r0, r0, r1
   11fc4:	bf28      	it	cs
   11fc6:	18ed      	addcs	r5, r5, r3
   11fc8:	ea20 0004 	bic.w	r0, r0, r4
   11fcc:	e008      	b.n	11fe0 <round+0x7c>
   11fce:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
   11fd2:	3101      	adds	r1, #1
   11fd4:	bf04      	itt	eq
   11fd6:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
   11fda:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
   11fde:	2000      	movs	r0, #0
   11fe0:	462b      	mov	r3, r5
   11fe2:	4602      	mov	r2, r0
   11fe4:	ec43 2b10 	vmov	d0, r2, r3
   11fe8:	bd70      	pop	{r4, r5, r6, pc}
   11fea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   11fee:	fa43 f101 	asr.w	r1, r3, r1
   11ff2:	440d      	add	r5, r1
   11ff4:	ea25 0504 	bic.w	r5, r5, r4
   11ff8:	2000      	movs	r0, #0
   11ffa:	e7f1      	b.n	11fe0 <round+0x7c>
   11ffc:	000fffff 	.word	0x000fffff

00012000 <ceilf>:
   12000:	ee10 2a10 	vmov	r2, s0
   12004:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   12008:	3b7f      	subs	r3, #127	; 0x7f
   1200a:	2b16      	cmp	r3, #22
   1200c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   12010:	dc1a      	bgt.n	12048 <ceilf+0x48>
   12012:	2b00      	cmp	r3, #0
   12014:	db21      	blt.n	1205a <ceilf+0x5a>
   12016:	491a      	ldr	r1, [pc, #104]	; (12080 <ceilf+0x80>)
   12018:	4119      	asrs	r1, r3
   1201a:	420a      	tst	r2, r1
   1201c:	d01c      	beq.n	12058 <ceilf+0x58>
   1201e:	eddf 7a19 	vldr	s15, [pc, #100]	; 12084 <ceilf+0x84>
   12022:	ee70 7a27 	vadd.f32	s15, s0, s15
   12026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1202e:	dd13      	ble.n	12058 <ceilf+0x58>
   12030:	2a00      	cmp	r2, #0
   12032:	dd04      	ble.n	1203e <ceilf+0x3e>
   12034:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   12038:	fa40 f303 	asr.w	r3, r0, r3
   1203c:	441a      	add	r2, r3
   1203e:	ea22 0301 	bic.w	r3, r2, r1
   12042:	ee00 3a10 	vmov	s0, r3
   12046:	4770      	bx	lr
   12048:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1204c:	d304      	bcc.n	12058 <ceilf+0x58>
   1204e:	ee30 0a00 	vadd.f32	s0, s0, s0
   12052:	4770      	bx	lr
   12054:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 12088 <ceilf+0x88>
   12058:	4770      	bx	lr
   1205a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 12084 <ceilf+0x84>
   1205e:	ee70 7a27 	vadd.f32	s15, s0, s15
   12062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1206a:	ddf5      	ble.n	12058 <ceilf+0x58>
   1206c:	2a00      	cmp	r2, #0
   1206e:	dbf1      	blt.n	12054 <ceilf+0x54>
   12070:	2900      	cmp	r1, #0
   12072:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12076:	bf18      	it	ne
   12078:	eeb0 0a67 	vmovne.f32	s0, s15
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	007fffff 	.word	0x007fffff
   12084:	7149f2ca 	.word	0x7149f2ca
   12088:	80000000 	.word	0x80000000

0001208c <cosf>:
   1208c:	b500      	push	{lr}
   1208e:	ee10 3a10 	vmov	r3, s0
   12092:	4a20      	ldr	r2, [pc, #128]	; (12114 <cosf+0x88>)
   12094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12098:	4293      	cmp	r3, r2
   1209a:	b083      	sub	sp, #12
   1209c:	dd19      	ble.n	120d2 <cosf+0x46>
   1209e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   120a2:	db04      	blt.n	120ae <cosf+0x22>
   120a4:	ee30 0a40 	vsub.f32	s0, s0, s0
   120a8:	b003      	add	sp, #12
   120aa:	f85d fb04 	ldr.w	pc, [sp], #4
   120ae:	4668      	mov	r0, sp
   120b0:	f000 fc46 	bl	12940 <__ieee754_rem_pio2f>
   120b4:	f000 0003 	and.w	r0, r0, #3
   120b8:	2801      	cmp	r0, #1
   120ba:	d011      	beq.n	120e0 <cosf+0x54>
   120bc:	2802      	cmp	r0, #2
   120be:	d01f      	beq.n	12100 <cosf+0x74>
   120c0:	b1b8      	cbz	r0, 120f2 <cosf+0x66>
   120c2:	eddd 0a01 	vldr	s1, [sp, #4]
   120c6:	ed9d 0a00 	vldr	s0, [sp]
   120ca:	2001      	movs	r0, #1
   120cc:	f001 f93a 	bl	13344 <__kernel_sinf>
   120d0:	e7ea      	b.n	120a8 <cosf+0x1c>
   120d2:	eddf 0a11 	vldr	s1, [pc, #68]	; 12118 <cosf+0x8c>
   120d6:	f000 fd7d 	bl	12bd4 <__kernel_cosf>
   120da:	b003      	add	sp, #12
   120dc:	f85d fb04 	ldr.w	pc, [sp], #4
   120e0:	eddd 0a01 	vldr	s1, [sp, #4]
   120e4:	ed9d 0a00 	vldr	s0, [sp]
   120e8:	f001 f92c 	bl	13344 <__kernel_sinf>
   120ec:	eeb1 0a40 	vneg.f32	s0, s0
   120f0:	e7da      	b.n	120a8 <cosf+0x1c>
   120f2:	eddd 0a01 	vldr	s1, [sp, #4]
   120f6:	ed9d 0a00 	vldr	s0, [sp]
   120fa:	f000 fd6b 	bl	12bd4 <__kernel_cosf>
   120fe:	e7d3      	b.n	120a8 <cosf+0x1c>
   12100:	eddd 0a01 	vldr	s1, [sp, #4]
   12104:	ed9d 0a00 	vldr	s0, [sp]
   12108:	f000 fd64 	bl	12bd4 <__kernel_cosf>
   1210c:	eeb1 0a40 	vneg.f32	s0, s0
   12110:	e7ca      	b.n	120a8 <cosf+0x1c>
   12112:	bf00      	nop
   12114:	3f490fd8 	.word	0x3f490fd8
   12118:	00000000 	.word	0x00000000

0001211c <floorf>:
   1211c:	ee10 2a10 	vmov	r2, s0
   12120:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   12124:	3b7f      	subs	r3, #127	; 0x7f
   12126:	2b16      	cmp	r3, #22
   12128:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   1212c:	dc1a      	bgt.n	12164 <floorf+0x48>
   1212e:	2b00      	cmp	r3, #0
   12130:	db1e      	blt.n	12170 <floorf+0x54>
   12132:	491a      	ldr	r1, [pc, #104]	; (1219c <floorf+0x80>)
   12134:	4119      	asrs	r1, r3
   12136:	420a      	tst	r2, r1
   12138:	d027      	beq.n	1218a <floorf+0x6e>
   1213a:	eddf 7a19 	vldr	s15, [pc, #100]	; 121a0 <floorf+0x84>
   1213e:	ee70 7a27 	vadd.f32	s15, s0, s15
   12142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1214a:	dd1e      	ble.n	1218a <floorf+0x6e>
   1214c:	2a00      	cmp	r2, #0
   1214e:	da04      	bge.n	1215a <floorf+0x3e>
   12150:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   12154:	fa40 f303 	asr.w	r3, r0, r3
   12158:	441a      	add	r2, r3
   1215a:	ea22 0301 	bic.w	r3, r2, r1
   1215e:	ee00 3a10 	vmov	s0, r3
   12162:	4770      	bx	lr
   12164:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   12168:	d30f      	bcc.n	1218a <floorf+0x6e>
   1216a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1216e:	4770      	bx	lr
   12170:	eddf 7a0b 	vldr	s15, [pc, #44]	; 121a0 <floorf+0x84>
   12174:	ee70 7a27 	vadd.f32	s15, s0, s15
   12178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12180:	dd03      	ble.n	1218a <floorf+0x6e>
   12182:	2a00      	cmp	r2, #0
   12184:	db02      	blt.n	1218c <floorf+0x70>
   12186:	ed9f 0a07 	vldr	s0, [pc, #28]	; 121a4 <floorf+0x88>
   1218a:	4770      	bx	lr
   1218c:	2900      	cmp	r1, #0
   1218e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   12192:	bf18      	it	ne
   12194:	eeb0 0a67 	vmovne.f32	s0, s15
   12198:	4770      	bx	lr
   1219a:	bf00      	nop
   1219c:	007fffff 	.word	0x007fffff
   121a0:	7149f2ca 	.word	0x7149f2ca
   121a4:	00000000 	.word	0x00000000

000121a8 <roundf>:
   121a8:	ee10 3a10 	vmov	r3, s0
   121ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   121b0:	3a7f      	subs	r2, #127	; 0x7f
   121b2:	2a16      	cmp	r2, #22
   121b4:	ee10 1a10 	vmov	r1, s0
   121b8:	dc0e      	bgt.n	121d8 <roundf+0x30>
   121ba:	2a00      	cmp	r2, #0
   121bc:	db11      	blt.n	121e2 <roundf+0x3a>
   121be:	480c      	ldr	r0, [pc, #48]	; (121f0 <roundf+0x48>)
   121c0:	4110      	asrs	r0, r2
   121c2:	4203      	tst	r3, r0
   121c4:	d005      	beq.n	121d2 <roundf+0x2a>
   121c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   121ca:	4113      	asrs	r3, r2
   121cc:	440b      	add	r3, r1
   121ce:	ea23 0300 	bic.w	r3, r3, r0
   121d2:	ee00 3a10 	vmov	s0, r3
   121d6:	4770      	bx	lr
   121d8:	2a80      	cmp	r2, #128	; 0x80
   121da:	d1fa      	bne.n	121d2 <roundf+0x2a>
   121dc:	ee30 0a00 	vadd.f32	s0, s0, s0
   121e0:	4770      	bx	lr
   121e2:	3201      	adds	r2, #1
   121e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   121e8:	d1f3      	bne.n	121d2 <roundf+0x2a>
   121ea:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   121ee:	e7f0      	b.n	121d2 <roundf+0x2a>
   121f0:	007fffff 	.word	0x007fffff

000121f4 <sinf>:
   121f4:	b500      	push	{lr}
   121f6:	ee10 3a10 	vmov	r3, s0
   121fa:	4a21      	ldr	r2, [pc, #132]	; (12280 <sinf+0x8c>)
   121fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12200:	4293      	cmp	r3, r2
   12202:	b083      	sub	sp, #12
   12204:	dd1a      	ble.n	1223c <sinf+0x48>
   12206:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1220a:	db04      	blt.n	12216 <sinf+0x22>
   1220c:	ee30 0a40 	vsub.f32	s0, s0, s0
   12210:	b003      	add	sp, #12
   12212:	f85d fb04 	ldr.w	pc, [sp], #4
   12216:	4668      	mov	r0, sp
   12218:	f000 fb92 	bl	12940 <__ieee754_rem_pio2f>
   1221c:	f000 0003 	and.w	r0, r0, #3
   12220:	2801      	cmp	r0, #1
   12222:	d013      	beq.n	1224c <sinf+0x58>
   12224:	2802      	cmp	r0, #2
   12226:	d020      	beq.n	1226a <sinf+0x76>
   12228:	b1b8      	cbz	r0, 1225a <sinf+0x66>
   1222a:	eddd 0a01 	vldr	s1, [sp, #4]
   1222e:	ed9d 0a00 	vldr	s0, [sp]
   12232:	f000 fccf 	bl	12bd4 <__kernel_cosf>
   12236:	eeb1 0a40 	vneg.f32	s0, s0
   1223a:	e7e9      	b.n	12210 <sinf+0x1c>
   1223c:	eddf 0a11 	vldr	s1, [pc, #68]	; 12284 <sinf+0x90>
   12240:	2000      	movs	r0, #0
   12242:	f001 f87f 	bl	13344 <__kernel_sinf>
   12246:	b003      	add	sp, #12
   12248:	f85d fb04 	ldr.w	pc, [sp], #4
   1224c:	eddd 0a01 	vldr	s1, [sp, #4]
   12250:	ed9d 0a00 	vldr	s0, [sp]
   12254:	f000 fcbe 	bl	12bd4 <__kernel_cosf>
   12258:	e7da      	b.n	12210 <sinf+0x1c>
   1225a:	eddd 0a01 	vldr	s1, [sp, #4]
   1225e:	ed9d 0a00 	vldr	s0, [sp]
   12262:	2001      	movs	r0, #1
   12264:	f001 f86e 	bl	13344 <__kernel_sinf>
   12268:	e7d2      	b.n	12210 <sinf+0x1c>
   1226a:	eddd 0a01 	vldr	s1, [sp, #4]
   1226e:	ed9d 0a00 	vldr	s0, [sp]
   12272:	2001      	movs	r0, #1
   12274:	f001 f866 	bl	13344 <__kernel_sinf>
   12278:	eeb1 0a40 	vneg.f32	s0, s0
   1227c:	e7c8      	b.n	12210 <sinf+0x1c>
   1227e:	bf00      	nop
   12280:	3f490fd8 	.word	0x3f490fd8
   12284:	00000000 	.word	0x00000000

00012288 <tanhf>:
   12288:	b510      	push	{r4, lr}
   1228a:	b082      	sub	sp, #8
   1228c:	ed8d 0a01 	vstr	s0, [sp, #4]
   12290:	9c01      	ldr	r4, [sp, #4]
   12292:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   12296:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1229a:	db0b      	blt.n	122b4 <tanhf+0x2c>
   1229c:	2c00      	cmp	r4, #0
   1229e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   122a2:	db29      	blt.n	122f8 <tanhf+0x70>
   122a4:	eeb0 7a40 	vmov.f32	s14, s0
   122a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   122ac:	ee30 0a27 	vadd.f32	s0, s0, s15
   122b0:	b002      	add	sp, #8
   122b2:	bd10      	pop	{r4, pc}
   122b4:	4a21      	ldr	r2, [pc, #132]	; (1233c <tanhf+0xb4>)
   122b6:	4293      	cmp	r3, r2
   122b8:	dd07      	ble.n	122ca <tanhf+0x42>
   122ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   122be:	2c00      	cmp	r4, #0
   122c0:	bfb8      	it	lt
   122c2:	eeb1 0a40 	vneglt.f32	s0, s0
   122c6:	b002      	add	sp, #8
   122c8:	bd10      	pop	{r4, pc}
   122ca:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
   122ce:	db1b      	blt.n	12308 <tanhf+0x80>
   122d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   122d4:	db21      	blt.n	1231a <tanhf+0x92>
   122d6:	f001 f9b9 	bl	1364c <fabsf>
   122da:	ee30 0a00 	vadd.f32	s0, s0, s0
   122de:	f001 f87b 	bl	133d8 <expm1f>
   122e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   122e6:	ee30 0a07 	vadd.f32	s0, s0, s14
   122ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   122ee:	eec7 6a00 	vdiv.f32	s13, s14, s0
   122f2:	ee37 0ae6 	vsub.f32	s0, s15, s13
   122f6:	e7e2      	b.n	122be <tanhf+0x36>
   122f8:	ed9d 7a01 	vldr	s14, [sp, #4]
   122fc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   12300:	ee30 0a67 	vsub.f32	s0, s0, s15
   12304:	b002      	add	sp, #8
   12306:	bd10      	pop	{r4, pc}
   12308:	eddd 7a01 	vldr	s15, [sp, #4]
   1230c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12310:	ee37 0a80 	vadd.f32	s0, s15, s0
   12314:	ee20 0a27 	vmul.f32	s0, s0, s15
   12318:	e7ca      	b.n	122b0 <tanhf+0x28>
   1231a:	f001 f997 	bl	1364c <fabsf>
   1231e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   12322:	ee20 0a27 	vmul.f32	s0, s0, s15
   12326:	f001 f857 	bl	133d8 <expm1f>
   1232a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1232e:	ee30 7a07 	vadd.f32	s14, s0, s14
   12332:	eef1 7a40 	vneg.f32	s15, s0
   12336:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1233a:	e7c0      	b.n	122be <tanhf+0x36>
   1233c:	41afffff 	.word	0x41afffff

00012340 <expf>:
   12340:	b5d0      	push	{r4, r6, r7, lr}
   12342:	ed2d 8b02 	vpush	{d8}
   12346:	4c3b      	ldr	r4, [pc, #236]	; (12434 <expf+0xf4>)
   12348:	b08a      	sub	sp, #40	; 0x28
   1234a:	eef0 8a40 	vmov.f32	s17, s0
   1234e:	f000 f8ff 	bl	12550 <__ieee754_expf>
   12352:	f994 3000 	ldrsb.w	r3, [r4]
   12356:	3301      	adds	r3, #1
   12358:	eeb0 8a40 	vmov.f32	s16, s0
   1235c:	d012      	beq.n	12384 <expf+0x44>
   1235e:	eeb0 0a68 	vmov.f32	s0, s17
   12362:	f001 f97b 	bl	1365c <finitef>
   12366:	b168      	cbz	r0, 12384 <expf+0x44>
   12368:	eddf 7a33 	vldr	s15, [pc, #204]	; 12438 <expf+0xf8>
   1236c:	eef4 8ae7 	vcmpe.f32	s17, s15
   12370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12374:	dc40      	bgt.n	123f8 <expf+0xb8>
   12376:	eddf 7a31 	vldr	s15, [pc, #196]	; 1243c <expf+0xfc>
   1237a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12382:	d405      	bmi.n	12390 <expf+0x50>
   12384:	eeb0 0a48 	vmov.f32	s0, s16
   12388:	b00a      	add	sp, #40	; 0x28
   1238a:	ecbd 8b02 	vpop	{d8}
   1238e:	bdd0      	pop	{r4, r6, r7, pc}
   12390:	2304      	movs	r3, #4
   12392:	4a2b      	ldr	r2, [pc, #172]	; (12440 <expf+0x100>)
   12394:	9300      	str	r3, [sp, #0]
   12396:	ee18 0a90 	vmov	r0, s17
   1239a:	2300      	movs	r3, #0
   1239c:	9308      	str	r3, [sp, #32]
   1239e:	9201      	str	r2, [sp, #4]
   123a0:	f7ee fc62 	bl	c68 <__aeabi_f2d>
   123a4:	f994 3000 	ldrsb.w	r3, [r4]
   123a8:	2600      	movs	r6, #0
   123aa:	2700      	movs	r7, #0
   123ac:	2b02      	cmp	r3, #2
   123ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
   123b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   123b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   123ba:	d018      	beq.n	123ee <expf+0xae>
   123bc:	4668      	mov	r0, sp
   123be:	f001 f809 	bl	133d4 <matherr>
   123c2:	b1a0      	cbz	r0, 123ee <expf+0xae>
   123c4:	9b08      	ldr	r3, [sp, #32]
   123c6:	2b00      	cmp	r3, #0
   123c8:	d12e      	bne.n	12428 <expf+0xe8>
   123ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   123ce:	f7ee ff65 	bl	129c <__aeabi_d2f>
   123d2:	ee08 0a10 	vmov	s16, r0
   123d6:	eeb0 0a48 	vmov.f32	s0, s16
   123da:	b00a      	add	sp, #40	; 0x28
   123dc:	ecbd 8b02 	vpop	{d8}
   123e0:	bdd0      	pop	{r4, r6, r7, pc}
   123e2:	4918      	ldr	r1, [pc, #96]	; (12444 <expf+0x104>)
   123e4:	2000      	movs	r0, #0
   123e6:	2b02      	cmp	r3, #2
   123e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   123ec:	d1e6      	bne.n	123bc <expf+0x7c>
   123ee:	f002 fd7f 	bl	14ef0 <__errno>
   123f2:	2322      	movs	r3, #34	; 0x22
   123f4:	6003      	str	r3, [r0, #0]
   123f6:	e7e5      	b.n	123c4 <expf+0x84>
   123f8:	2303      	movs	r3, #3
   123fa:	4a11      	ldr	r2, [pc, #68]	; (12440 <expf+0x100>)
   123fc:	9300      	str	r3, [sp, #0]
   123fe:	ee18 0a90 	vmov	r0, s17
   12402:	2300      	movs	r3, #0
   12404:	9308      	str	r3, [sp, #32]
   12406:	9201      	str	r2, [sp, #4]
   12408:	f7ee fc2e 	bl	c68 <__aeabi_f2d>
   1240c:	f994 3000 	ldrsb.w	r3, [r4]
   12410:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12414:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12418:	2b00      	cmp	r3, #0
   1241a:	d1e2      	bne.n	123e2 <expf+0xa2>
   1241c:	4b0a      	ldr	r3, [pc, #40]	; (12448 <expf+0x108>)
   1241e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12422:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12426:	e7c9      	b.n	123bc <expf+0x7c>
   12428:	f002 fd62 	bl	14ef0 <__errno>
   1242c:	9b08      	ldr	r3, [sp, #32]
   1242e:	6003      	str	r3, [r0, #0]
   12430:	e7cb      	b.n	123ca <expf+0x8a>
   12432:	bf00      	nop
   12434:	2000078c 	.word	0x2000078c
   12438:	42b17180 	.word	0x42b17180
   1243c:	c2cff1b5 	.word	0xc2cff1b5
   12440:	00028ddc 	.word	0x00028ddc
   12444:	7ff00000 	.word	0x7ff00000
   12448:	47efffff 	.word	0x47efffff

0001244c <logf>:
   1244c:	b510      	push	{r4, lr}
   1244e:	ed2d 8b02 	vpush	{d8}
   12452:	b08a      	sub	sp, #40	; 0x28
   12454:	eeb0 8a40 	vmov.f32	s16, s0
   12458:	f000 f972 	bl	12740 <__ieee754_logf>
   1245c:	4b37      	ldr	r3, [pc, #220]	; (1253c <logf+0xf0>)
   1245e:	f993 4000 	ldrsb.w	r4, [r3]
   12462:	1c63      	adds	r3, r4, #1
   12464:	d033      	beq.n	124ce <logf+0x82>
   12466:	eeb4 8a48 	vcmp.f32	s16, s16
   1246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1246e:	d62e      	bvs.n	124ce <logf+0x82>
   12470:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   12474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12478:	dc29      	bgt.n	124ce <logf+0x82>
   1247a:	4b31      	ldr	r3, [pc, #196]	; (12540 <logf+0xf4>)
   1247c:	9301      	str	r3, [sp, #4]
   1247e:	ee18 0a10 	vmov	r0, s16
   12482:	2300      	movs	r3, #0
   12484:	9308      	str	r3, [sp, #32]
   12486:	f7ee fbef 	bl	c68 <__aeabi_f2d>
   1248a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1248e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12492:	b304      	cbz	r4, 124d6 <logf+0x8a>
   12494:	4b2b      	ldr	r3, [pc, #172]	; (12544 <logf+0xf8>)
   12496:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1249a:	2200      	movs	r2, #0
   1249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124a4:	d141      	bne.n	1252a <logf+0xde>
   124a6:	2302      	movs	r3, #2
   124a8:	429c      	cmp	r4, r3
   124aa:	9300      	str	r3, [sp, #0]
   124ac:	d137      	bne.n	1251e <logf+0xd2>
   124ae:	f002 fd1f 	bl	14ef0 <__errno>
   124b2:	2322      	movs	r3, #34	; 0x22
   124b4:	6003      	str	r3, [r0, #0]
   124b6:	9b08      	ldr	r3, [sp, #32]
   124b8:	b32b      	cbz	r3, 12506 <logf+0xba>
   124ba:	f002 fd19 	bl	14ef0 <__errno>
   124be:	9b08      	ldr	r3, [sp, #32]
   124c0:	6003      	str	r3, [r0, #0]
   124c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   124c6:	f7ee fee9 	bl	129c <__aeabi_d2f>
   124ca:	ee00 0a10 	vmov	s0, r0
   124ce:	b00a      	add	sp, #40	; 0x28
   124d0:	ecbd 8b02 	vpop	{d8}
   124d4:	bd10      	pop	{r4, pc}
   124d6:	4b1c      	ldr	r3, [pc, #112]	; (12548 <logf+0xfc>)
   124d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   124dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   124e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124e8:	d017      	beq.n	1251a <logf+0xce>
   124ea:	2301      	movs	r3, #1
   124ec:	9300      	str	r3, [sp, #0]
   124ee:	4668      	mov	r0, sp
   124f0:	f000 ff70 	bl	133d4 <matherr>
   124f4:	b1e8      	cbz	r0, 12532 <logf+0xe6>
   124f6:	4815      	ldr	r0, [pc, #84]	; (1254c <logf+0x100>)
   124f8:	f7ef f8a2 	bl	1640 <nan>
   124fc:	ed8d 0b06 	vstr	d0, [sp, #24]
   12500:	9b08      	ldr	r3, [sp, #32]
   12502:	2b00      	cmp	r3, #0
   12504:	d1d9      	bne.n	124ba <logf+0x6e>
   12506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1250a:	f7ee fec7 	bl	129c <__aeabi_d2f>
   1250e:	ee00 0a10 	vmov	s0, r0
   12512:	b00a      	add	sp, #40	; 0x28
   12514:	ecbd 8b02 	vpop	{d8}
   12518:	bd10      	pop	{r4, pc}
   1251a:	2302      	movs	r3, #2
   1251c:	9300      	str	r3, [sp, #0]
   1251e:	4668      	mov	r0, sp
   12520:	f000 ff58 	bl	133d4 <matherr>
   12524:	2800      	cmp	r0, #0
   12526:	d1eb      	bne.n	12500 <logf+0xb4>
   12528:	e7c1      	b.n	124ae <logf+0x62>
   1252a:	2301      	movs	r3, #1
   1252c:	2c02      	cmp	r4, #2
   1252e:	9300      	str	r3, [sp, #0]
   12530:	d1dd      	bne.n	124ee <logf+0xa2>
   12532:	f002 fcdd 	bl	14ef0 <__errno>
   12536:	2321      	movs	r3, #33	; 0x21
   12538:	6003      	str	r3, [r0, #0]
   1253a:	e7dc      	b.n	124f6 <logf+0xaa>
   1253c:	2000078c 	.word	0x2000078c
   12540:	00028de4 	.word	0x00028de4
   12544:	fff00000 	.word	0xfff00000
   12548:	c7efffff 	.word	0xc7efffff
   1254c:	00028de8 	.word	0x00028de8

00012550 <__ieee754_expf>:
   12550:	ee10 3a10 	vmov	r3, s0
   12554:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   12558:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1255c:	d857      	bhi.n	1260e <__ieee754_expf+0xbe>
   1255e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   12562:	f000 8098 	beq.w	12696 <__ieee754_expf+0x146>
   12566:	4864      	ldr	r0, [pc, #400]	; (126f8 <__ieee754_expf+0x1a8>)
   12568:	4283      	cmp	r3, r0
   1256a:	dc53      	bgt.n	12614 <__ieee754_expf+0xc4>
   1256c:	2b00      	cmp	r3, #0
   1256e:	f2c0 808b 	blt.w	12688 <__ieee754_expf+0x138>
   12572:	4b62      	ldr	r3, [pc, #392]	; (126fc <__ieee754_expf+0x1ac>)
   12574:	429a      	cmp	r2, r3
   12576:	d952      	bls.n	1261e <__ieee754_expf+0xce>
   12578:	4b61      	ldr	r3, [pc, #388]	; (12700 <__ieee754_expf+0x1b0>)
   1257a:	429a      	cmp	r2, r3
   1257c:	f200 809e 	bhi.w	126bc <__ieee754_expf+0x16c>
   12580:	4b60      	ldr	r3, [pc, #384]	; (12704 <__ieee754_expf+0x1b4>)
   12582:	4a61      	ldr	r2, [pc, #388]	; (12708 <__ieee754_expf+0x1b8>)
   12584:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12588:	ed93 4a00 	vldr	s8, [r3]
   1258c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   12590:	f1c1 0301 	rsb	r3, r1, #1
   12594:	ee30 4a44 	vsub.f32	s8, s0, s8
   12598:	ed92 7a00 	vldr	s14, [r2]
   1259c:	1a5b      	subs	r3, r3, r1
   1259e:	ee34 0a47 	vsub.f32	s0, s8, s14
   125a2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 1270c <__ieee754_expf+0x1bc>
   125a6:	eddf 4a5a 	vldr	s9, [pc, #360]	; 12710 <__ieee754_expf+0x1c0>
   125aa:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 12714 <__ieee754_expf+0x1c4>
   125ae:	eddf 5a5a 	vldr	s11, [pc, #360]	; 12718 <__ieee754_expf+0x1c8>
   125b2:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 1271c <__ieee754_expf+0x1cc>
   125b6:	ee60 6a00 	vmul.f32	s13, s0, s0
   125ba:	eee6 4aa7 	vfma.f32	s9, s13, s15
   125be:	eef0 7a40 	vmov.f32	s15, s0
   125c2:	eea4 5aa6 	vfma.f32	s10, s9, s13
   125c6:	eee5 5a26 	vfma.f32	s11, s10, s13
   125ca:	eea5 6aa6 	vfma.f32	s12, s11, s13
   125ce:	eee6 7a66 	vfms.f32	s15, s12, s13
   125d2:	eef0 6a67 	vmov.f32	s13, s15
   125d6:	2b00      	cmp	r3, #0
   125d8:	d047      	beq.n	1266a <__ieee754_expf+0x11a>
   125da:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   125de:	ee60 5a27 	vmul.f32	s11, s0, s15
   125e2:	ee76 6a67 	vsub.f32	s13, s12, s15
   125e6:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   125ea:	ee85 0aa6 	vdiv.f32	s0, s11, s13
   125ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   125f2:	ee37 0a40 	vsub.f32	s0, s14, s0
   125f6:	ee30 0a44 	vsub.f32	s0, s0, s8
   125fa:	ee37 0ac0 	vsub.f32	s0, s15, s0
   125fe:	db51      	blt.n	126a4 <__ieee754_expf+0x154>
   12600:	ee10 2a10 	vmov	r2, s0
   12604:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   12608:	ee00 3a10 	vmov	s0, r3
   1260c:	4770      	bx	lr
   1260e:	ee30 0a00 	vadd.f32	s0, s0, s0
   12612:	4770      	bx	lr
   12614:	ed9f 0a42 	vldr	s0, [pc, #264]	; 12720 <__ieee754_expf+0x1d0>
   12618:	ee20 0a00 	vmul.f32	s0, s0, s0
   1261c:	4770      	bx	lr
   1261e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   12622:	d20a      	bcs.n	1263a <__ieee754_expf+0xea>
   12624:	eddf 7a3e 	vldr	s15, [pc, #248]	; 12720 <__ieee754_expf+0x1d0>
   12628:	ee70 7a27 	vadd.f32	s15, s0, s15
   1262c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12630:	eef4 7ac7 	vcmpe.f32	s15, s14
   12634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12638:	dc5a      	bgt.n	126f0 <__ieee754_expf+0x1a0>
   1263a:	ee60 7a00 	vmul.f32	s15, s0, s0
   1263e:	ed9f 5a33 	vldr	s10, [pc, #204]	; 1270c <__ieee754_expf+0x1bc>
   12642:	eddf 5a33 	vldr	s11, [pc, #204]	; 12710 <__ieee754_expf+0x1c0>
   12646:	ed9f 6a33 	vldr	s12, [pc, #204]	; 12714 <__ieee754_expf+0x1c4>
   1264a:	eddf 6a33 	vldr	s13, [pc, #204]	; 12718 <__ieee754_expf+0x1c8>
   1264e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 1271c <__ieee754_expf+0x1cc>
   12652:	eee7 5a85 	vfma.f32	s11, s15, s10
   12656:	eea7 6aa5 	vfma.f32	s12, s15, s11
   1265a:	eee7 6a86 	vfma.f32	s13, s15, s12
   1265e:	eea7 7aa6 	vfma.f32	s14, s15, s13
   12662:	eef0 6a40 	vmov.f32	s13, s0
   12666:	eee7 6ac7 	vfms.f32	s13, s15, s14
   1266a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1266e:	ee36 7ac7 	vsub.f32	s14, s13, s14
   12672:	ee60 6a26 	vmul.f32	s13, s0, s13
   12676:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1267a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1267e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   12682:	ee36 0a40 	vsub.f32	s0, s12, s0
   12686:	4770      	bx	lr
   12688:	4b26      	ldr	r3, [pc, #152]	; (12724 <__ieee754_expf+0x1d4>)
   1268a:	429a      	cmp	r2, r3
   1268c:	f67f af71 	bls.w	12572 <__ieee754_expf+0x22>
   12690:	ed9f 0a25 	vldr	s0, [pc, #148]	; 12728 <__ieee754_expf+0x1d8>
   12694:	4770      	bx	lr
   12696:	eddf 7a24 	vldr	s15, [pc, #144]	; 12728 <__ieee754_expf+0x1d8>
   1269a:	2900      	cmp	r1, #0
   1269c:	bf18      	it	ne
   1269e:	eeb0 0a67 	vmovne.f32	s0, s15
   126a2:	4770      	bx	lr
   126a4:	ee10 2a10 	vmov	r2, s0
   126a8:	3364      	adds	r3, #100	; 0x64
   126aa:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   126ae:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1272c <__ieee754_expf+0x1dc>
   126b2:	ee00 3a10 	vmov	s0, r3
   126b6:	ee20 0a27 	vmul.f32	s0, s0, s15
   126ba:	4770      	bx	lr
   126bc:	4b1c      	ldr	r3, [pc, #112]	; (12730 <__ieee754_expf+0x1e0>)
   126be:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 12734 <__ieee754_expf+0x1e4>
   126c2:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 12738 <__ieee754_expf+0x1e8>
   126c6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 1273c <__ieee754_expf+0x1ec>
   126ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   126ce:	edd3 7a00 	vldr	s15, [r3]
   126d2:	eee0 7a07 	vfma.f32	s15, s0, s14
   126d6:	eeb0 4a40 	vmov.f32	s8, s0
   126da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   126de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   126e2:	ee17 3a90 	vmov	r3, s15
   126e6:	eea7 4a46 	vfms.f32	s8, s14, s12
   126ea:	ee27 7a26 	vmul.f32	s14, s14, s13
   126ee:	e756      	b.n	1259e <__ieee754_expf+0x4e>
   126f0:	ee30 0a07 	vadd.f32	s0, s0, s14
   126f4:	4770      	bx	lr
   126f6:	bf00      	nop
   126f8:	42b17217 	.word	0x42b17217
   126fc:	3eb17218 	.word	0x3eb17218
   12700:	3f851591 	.word	0x3f851591
   12704:	00028df4 	.word	0x00028df4
   12708:	00028dfc 	.word	0x00028dfc
   1270c:	3331bb4c 	.word	0x3331bb4c
   12710:	b5ddea0e 	.word	0xb5ddea0e
   12714:	388ab355 	.word	0x388ab355
   12718:	bb360b61 	.word	0xbb360b61
   1271c:	3e2aaaab 	.word	0x3e2aaaab
   12720:	7149f2ca 	.word	0x7149f2ca
   12724:	42cff1b5 	.word	0x42cff1b5
   12728:	00000000 	.word	0x00000000
   1272c:	0d800000 	.word	0x0d800000
   12730:	00028dec 	.word	0x00028dec
   12734:	3fb8aa3b 	.word	0x3fb8aa3b
   12738:	3f317180 	.word	0x3f317180
   1273c:	3717f7d1 	.word	0x3717f7d1

00012740 <__ieee754_logf>:
   12740:	ee10 3a10 	vmov	r3, s0
   12744:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   12748:	d02d      	beq.n	127a6 <__ieee754_logf+0x66>
   1274a:	2b00      	cmp	r3, #0
   1274c:	db32      	blt.n	127b4 <__ieee754_logf+0x74>
   1274e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   12752:	da3f      	bge.n	127d4 <__ieee754_logf+0x94>
   12754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12758:	b430      	push	{r4, r5}
   1275a:	db32      	blt.n	127c2 <__ieee754_logf+0x82>
   1275c:	2500      	movs	r5, #0
   1275e:	4868      	ldr	r0, [pc, #416]	; (12900 <__ieee754_logf+0x1c0>)
   12760:	4c68      	ldr	r4, [pc, #416]	; (12904 <__ieee754_logf+0x1c4>)
   12762:	f3c3 0116 	ubfx	r1, r3, #0, #23
   12766:	4408      	add	r0, r1
   12768:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   1276c:	15db      	asrs	r3, r3, #23
   1276e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   12772:	3b7f      	subs	r3, #127	; 0x7f
   12774:	430a      	orrs	r2, r1
   12776:	442b      	add	r3, r5
   12778:	ee00 2a10 	vmov	s0, r2
   1277c:	f101 050f 	add.w	r5, r1, #15
   12780:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12784:	402c      	ands	r4, r5
   12786:	ee30 0a67 	vsub.f32	s0, s0, s15
   1278a:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   1278e:	bb24      	cbnz	r4, 127da <__ieee754_logf+0x9a>
   12790:	eeb5 0a40 	vcmp.f32	s0, #0.0
   12794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12798:	d161      	bne.n	1285e <__ieee754_logf+0x11e>
   1279a:	2b00      	cmp	r3, #0
   1279c:	f040 8093 	bne.w	128c6 <__ieee754_logf+0x186>
   127a0:	ed9f 0a59 	vldr	s0, [pc, #356]	; 12908 <__ieee754_logf+0x1c8>
   127a4:	e059      	b.n	1285a <__ieee754_logf+0x11a>
   127a6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 1290c <__ieee754_logf+0x1cc>
   127aa:	eddf 7a57 	vldr	s15, [pc, #348]	; 12908 <__ieee754_logf+0x1c8>
   127ae:	ee87 0a27 	vdiv.f32	s0, s14, s15
   127b2:	4770      	bx	lr
   127b4:	ee70 7a40 	vsub.f32	s15, s0, s0
   127b8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 12908 <__ieee754_logf+0x1c8>
   127bc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   127c0:	4770      	bx	lr
   127c2:	eddf 7a53 	vldr	s15, [pc, #332]	; 12910 <__ieee754_logf+0x1d0>
   127c6:	ee60 7a27 	vmul.f32	s15, s0, s15
   127ca:	f06f 0518 	mvn.w	r5, #24
   127ce:	ee17 3a90 	vmov	r3, s15
   127d2:	e7c4      	b.n	1275e <__ieee754_logf+0x1e>
   127d4:	ee30 0a00 	vadd.f32	s0, s0, s0
   127d8:	4770      	bx	lr
   127da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   127de:	ee30 7a07 	vadd.f32	s14, s0, s14
   127e2:	ed9f 3a4c 	vldr	s6, [pc, #304]	; 12914 <__ieee754_logf+0x1d4>
   127e6:	eddf 4a4c 	vldr	s9, [pc, #304]	; 12918 <__ieee754_logf+0x1d8>
   127ea:	eddf 5a4c 	vldr	s11, [pc, #304]	; 1291c <__ieee754_logf+0x1dc>
   127ee:	eddf 3a4c 	vldr	s7, [pc, #304]	; 12920 <__ieee754_logf+0x1e0>
   127f2:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 12924 <__ieee754_logf+0x1e4>
   127f6:	eddf 7a4c 	vldr	s15, [pc, #304]	; 12928 <__ieee754_logf+0x1e8>
   127fa:	eddf 6a4c 	vldr	s13, [pc, #304]	; 1292c <__ieee754_logf+0x1ec>
   127fe:	484c      	ldr	r0, [pc, #304]	; (12930 <__ieee754_logf+0x1f0>)
   12800:	ee80 4a07 	vdiv.f32	s8, s0, s14
   12804:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   12808:	4408      	add	r0, r1
   1280a:	f502 7222 	add.w	r2, r2, #648	; 0x288
   1280e:	4302      	orrs	r2, r0
   12810:	2a00      	cmp	r2, #0
   12812:	ee07 3a10 	vmov	s14, r3
   12816:	ee24 6a04 	vmul.f32	s12, s8, s8
   1281a:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   1281e:	ee26 7a06 	vmul.f32	s14, s12, s12
   12822:	eee7 4a03 	vfma.f32	s9, s14, s6
   12826:	eea7 5a23 	vfma.f32	s10, s14, s7
   1282a:	eee4 5a87 	vfma.f32	s11, s9, s14
   1282e:	eee5 6a07 	vfma.f32	s13, s10, s14
   12832:	eee5 7a87 	vfma.f32	s15, s11, s14
   12836:	ee67 7a86 	vmul.f32	s15, s15, s12
   1283a:	eee6 7a87 	vfma.f32	s15, s13, s14
   1283e:	dd2b      	ble.n	12898 <__ieee754_logf+0x158>
   12840:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   12844:	ee20 7a07 	vmul.f32	s14, s0, s14
   12848:	ee27 7a00 	vmul.f32	s14, s14, s0
   1284c:	bb53      	cbnz	r3, 128a4 <__ieee754_logf+0x164>
   1284e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12852:	eea7 7ac4 	vfms.f32	s14, s15, s8
   12856:	ee30 0a47 	vsub.f32	s0, s0, s14
   1285a:	bc30      	pop	{r4, r5}
   1285c:	4770      	bx	lr
   1285e:	eddf 7a35 	vldr	s15, [pc, #212]	; 12934 <__ieee754_logf+0x1f4>
   12862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   12866:	eea0 7a67 	vfms.f32	s14, s0, s15
   1286a:	eef0 7a47 	vmov.f32	s15, s14
   1286e:	ee20 7a00 	vmul.f32	s14, s0, s0
   12872:	ee27 7a27 	vmul.f32	s14, s14, s15
   12876:	2b00      	cmp	r3, #0
   12878:	d0ed      	beq.n	12856 <__ieee754_logf+0x116>
   1287a:	ee07 3a90 	vmov	s15, r3
   1287e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 12938 <__ieee754_logf+0x1f8>
   12882:	eddf 6a2e 	vldr	s13, [pc, #184]	; 1293c <__ieee754_logf+0x1fc>
   12886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1288a:	eea7 7ac6 	vfms.f32	s14, s15, s12
   1288e:	ee37 0a40 	vsub.f32	s0, s14, s0
   12892:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   12896:	e7e0      	b.n	1285a <__ieee754_logf+0x11a>
   12898:	bb13      	cbnz	r3, 128e0 <__ieee754_logf+0x1a0>
   1289a:	ee70 7a67 	vsub.f32	s15, s0, s15
   1289e:	eea7 0ac4 	vfms.f32	s0, s15, s8
   128a2:	e7da      	b.n	1285a <__ieee754_logf+0x11a>
   128a4:	eddf 6a24 	vldr	s13, [pc, #144]	; 12938 <__ieee754_logf+0x1f8>
   128a8:	ed9f 6a24 	vldr	s12, [pc, #144]	; 1293c <__ieee754_logf+0x1fc>
   128ac:	ee77 7a87 	vadd.f32	s15, s15, s14
   128b0:	ee62 6aa6 	vmul.f32	s13, s5, s13
   128b4:	eee7 6a84 	vfma.f32	s13, s15, s8
   128b8:	ee37 7a66 	vsub.f32	s14, s14, s13
   128bc:	ee37 0a40 	vsub.f32	s0, s14, s0
   128c0:	ee92 0a86 	vfnms.f32	s0, s5, s12
   128c4:	e7c9      	b.n	1285a <__ieee754_logf+0x11a>
   128c6:	ee07 3a90 	vmov	s15, r3
   128ca:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 12938 <__ieee754_logf+0x1f8>
   128ce:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1293c <__ieee754_logf+0x1fc>
   128d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   128d6:	ee27 0a80 	vmul.f32	s0, s15, s0
   128da:	eea7 0a87 	vfma.f32	s0, s15, s14
   128de:	e7bc      	b.n	1285a <__ieee754_logf+0x11a>
   128e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 12938 <__ieee754_logf+0x1f8>
   128e4:	eddf 6a15 	vldr	s13, [pc, #84]	; 1293c <__ieee754_logf+0x1fc>
   128e8:	ee70 7a67 	vsub.f32	s15, s0, s15
   128ec:	ee27 7a62 	vnmul.f32	s14, s14, s5
   128f0:	eea7 7a84 	vfma.f32	s14, s15, s8
   128f4:	ee37 0a40 	vsub.f32	s0, s14, s0
   128f8:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   128fc:	e7ad      	b.n	1285a <__ieee754_logf+0x11a>
   128fe:	bf00      	nop
   12900:	004afb20 	.word	0x004afb20
   12904:	007ffff0 	.word	0x007ffff0
   12908:	00000000 	.word	0x00000000
   1290c:	cc000000 	.word	0xcc000000
   12910:	4c000000 	.word	0x4c000000
   12914:	3e178897 	.word	0x3e178897
   12918:	3e3a3325 	.word	0x3e3a3325
   1291c:	3e924925 	.word	0x3e924925
   12920:	3e1cd04f 	.word	0x3e1cd04f
   12924:	3e638e29 	.word	0x3e638e29
   12928:	3f2aaaab 	.word	0x3f2aaaab
   1292c:	3ecccccd 	.word	0x3ecccccd
   12930:	ffcf5c30 	.word	0xffcf5c30
   12934:	3eaaaaab 	.word	0x3eaaaaab
   12938:	3717f7d1 	.word	0x3717f7d1
   1293c:	3f317180 	.word	0x3f317180

00012940 <__ieee754_rem_pio2f>:
   12940:	b570      	push	{r4, r5, r6, lr}
   12942:	ee10 3a10 	vmov	r3, s0
   12946:	4a95      	ldr	r2, [pc, #596]	; (12b9c <__ieee754_rem_pio2f+0x25c>)
   12948:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1294c:	4294      	cmp	r4, r2
   1294e:	b086      	sub	sp, #24
   12950:	4605      	mov	r5, r0
   12952:	dd68      	ble.n	12a26 <__ieee754_rem_pio2f+0xe6>
   12954:	4a92      	ldr	r2, [pc, #584]	; (12ba0 <__ieee754_rem_pio2f+0x260>)
   12956:	4294      	cmp	r4, r2
   12958:	ee10 6a10 	vmov	r6, s0
   1295c:	dc1a      	bgt.n	12994 <__ieee754_rem_pio2f+0x54>
   1295e:	2b00      	cmp	r3, #0
   12960:	eddf 7a90 	vldr	s15, [pc, #576]	; 12ba4 <__ieee754_rem_pio2f+0x264>
   12964:	4a90      	ldr	r2, [pc, #576]	; (12ba8 <__ieee754_rem_pio2f+0x268>)
   12966:	f024 040f 	bic.w	r4, r4, #15
   1296a:	f340 80f1 	ble.w	12b50 <__ieee754_rem_pio2f+0x210>
   1296e:	4294      	cmp	r4, r2
   12970:	ee70 7a67 	vsub.f32	s15, s0, s15
   12974:	d066      	beq.n	12a44 <__ieee754_rem_pio2f+0x104>
   12976:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 12bac <__ieee754_rem_pio2f+0x26c>
   1297a:	ee77 6ac7 	vsub.f32	s13, s15, s14
   1297e:	2001      	movs	r0, #1
   12980:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12984:	edc5 6a00 	vstr	s13, [r5]
   12988:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1298c:	edc5 7a01 	vstr	s15, [r5, #4]
   12990:	b006      	add	sp, #24
   12992:	bd70      	pop	{r4, r5, r6, pc}
   12994:	4a86      	ldr	r2, [pc, #536]	; (12bb0 <__ieee754_rem_pio2f+0x270>)
   12996:	4294      	cmp	r4, r2
   12998:	dd67      	ble.n	12a6a <__ieee754_rem_pio2f+0x12a>
   1299a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   1299e:	da49      	bge.n	12a34 <__ieee754_rem_pio2f+0xf4>
   129a0:	15e2      	asrs	r2, r4, #23
   129a2:	3a86      	subs	r2, #134	; 0x86
   129a4:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   129a8:	ee07 3a90 	vmov	s15, r3
   129ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   129b0:	eddf 6a80 	vldr	s13, [pc, #512]	; 12bb4 <__ieee754_rem_pio2f+0x274>
   129b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   129b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   129bc:	ed8d 7a03 	vstr	s14, [sp, #12]
   129c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   129c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   129c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   129cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   129d0:	ed8d 7a04 	vstr	s14, [sp, #16]
   129d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   129d8:	eef5 7a40 	vcmp.f32	s15, #0.0
   129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129e0:	edcd 7a05 	vstr	s15, [sp, #20]
   129e4:	f040 80a3 	bne.w	12b2e <__ieee754_rem_pio2f+0x1ee>
   129e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
   129ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129f0:	bf14      	ite	ne
   129f2:	2302      	movne	r3, #2
   129f4:	2301      	moveq	r3, #1
   129f6:	4970      	ldr	r1, [pc, #448]	; (12bb8 <__ieee754_rem_pio2f+0x278>)
   129f8:	9101      	str	r1, [sp, #4]
   129fa:	2102      	movs	r1, #2
   129fc:	9100      	str	r1, [sp, #0]
   129fe:	a803      	add	r0, sp, #12
   12a00:	4629      	mov	r1, r5
   12a02:	f000 f969 	bl	12cd8 <__kernel_rem_pio2f>
   12a06:	2e00      	cmp	r6, #0
   12a08:	dac2      	bge.n	12990 <__ieee754_rem_pio2f+0x50>
   12a0a:	ed95 7a00 	vldr	s14, [r5]
   12a0e:	edd5 7a01 	vldr	s15, [r5, #4]
   12a12:	eeb1 7a47 	vneg.f32	s14, s14
   12a16:	eef1 7a67 	vneg.f32	s15, s15
   12a1a:	4240      	negs	r0, r0
   12a1c:	ed85 7a00 	vstr	s14, [r5]
   12a20:	edc5 7a01 	vstr	s15, [r5, #4]
   12a24:	e7b4      	b.n	12990 <__ieee754_rem_pio2f+0x50>
   12a26:	2200      	movs	r2, #0
   12a28:	ed85 0a00 	vstr	s0, [r5]
   12a2c:	6042      	str	r2, [r0, #4]
   12a2e:	2000      	movs	r0, #0
   12a30:	b006      	add	sp, #24
   12a32:	bd70      	pop	{r4, r5, r6, pc}
   12a34:	ee70 7a40 	vsub.f32	s15, s0, s0
   12a38:	2000      	movs	r0, #0
   12a3a:	edc5 7a01 	vstr	s15, [r5, #4]
   12a3e:	edc5 7a00 	vstr	s15, [r5]
   12a42:	e7a5      	b.n	12990 <__ieee754_rem_pio2f+0x50>
   12a44:	eddf 6a5d 	vldr	s13, [pc, #372]	; 12bbc <__ieee754_rem_pio2f+0x27c>
   12a48:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 12bc0 <__ieee754_rem_pio2f+0x280>
   12a4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12a50:	2001      	movs	r0, #1
   12a52:	ee77 6ac7 	vsub.f32	s13, s15, s14
   12a56:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12a5a:	edc5 6a00 	vstr	s13, [r5]
   12a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   12a62:	edc5 7a01 	vstr	s15, [r5, #4]
   12a66:	b006      	add	sp, #24
   12a68:	bd70      	pop	{r4, r5, r6, pc}
   12a6a:	f000 fdef 	bl	1364c <fabsf>
   12a6e:	eddf 6a55 	vldr	s13, [pc, #340]	; 12bc4 <__ieee754_rem_pio2f+0x284>
   12a72:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 12ba4 <__ieee754_rem_pio2f+0x264>
   12a76:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 12bac <__ieee754_rem_pio2f+0x26c>
   12a7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   12a7e:	eee0 7a26 	vfma.f32	s15, s0, s13
   12a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   12a86:	ee17 0a90 	vmov	r0, s15
   12a8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   12a8e:	281f      	cmp	r0, #31
   12a90:	eea6 0ac6 	vfms.f32	s0, s13, s12
   12a94:	ee66 7a87 	vmul.f32	s15, s13, s14
   12a98:	eeb1 6a66 	vneg.f32	s12, s13
   12a9c:	dc1e      	bgt.n	12adc <__ieee754_rem_pio2f+0x19c>
   12a9e:	4a4a      	ldr	r2, [pc, #296]	; (12bc8 <__ieee754_rem_pio2f+0x288>)
   12aa0:	1e41      	subs	r1, r0, #1
   12aa2:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   12aa6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   12aaa:	4293      	cmp	r3, r2
   12aac:	d016      	beq.n	12adc <__ieee754_rem_pio2f+0x19c>
   12aae:	ee30 7a67 	vsub.f32	s14, s0, s15
   12ab2:	ed85 7a00 	vstr	s14, [r5]
   12ab6:	ee30 0a47 	vsub.f32	s0, s0, s14
   12aba:	2e00      	cmp	r6, #0
   12abc:	ee30 0a67 	vsub.f32	s0, s0, s15
   12ac0:	ed85 0a01 	vstr	s0, [r5, #4]
   12ac4:	f6bf af64 	bge.w	12990 <__ieee754_rem_pio2f+0x50>
   12ac8:	eeb1 7a47 	vneg.f32	s14, s14
   12acc:	eeb1 0a40 	vneg.f32	s0, s0
   12ad0:	ed85 7a00 	vstr	s14, [r5]
   12ad4:	ed85 0a01 	vstr	s0, [r5, #4]
   12ad8:	4240      	negs	r0, r0
   12ada:	e759      	b.n	12990 <__ieee754_rem_pio2f+0x50>
   12adc:	ee30 7a67 	vsub.f32	s14, s0, s15
   12ae0:	15e2      	asrs	r2, r4, #23
   12ae2:	ee17 3a10 	vmov	r3, s14
   12ae6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   12aea:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   12aee:	2c08      	cmp	r4, #8
   12af0:	dddf      	ble.n	12ab2 <__ieee754_rem_pio2f+0x172>
   12af2:	eddf 7a32 	vldr	s15, [pc, #200]	; 12bbc <__ieee754_rem_pio2f+0x27c>
   12af6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 12bc0 <__ieee754_rem_pio2f+0x280>
   12afa:	eef0 5a40 	vmov.f32	s11, s0
   12afe:	eee6 5a27 	vfma.f32	s11, s12, s15
   12b02:	ee30 0a65 	vsub.f32	s0, s0, s11
   12b06:	eea6 0a27 	vfma.f32	s0, s12, s15
   12b0a:	eef0 7a40 	vmov.f32	s15, s0
   12b0e:	eed6 7a87 	vfnms.f32	s15, s13, s14
   12b12:	ee35 7ae7 	vsub.f32	s14, s11, s15
   12b16:	ee17 3a10 	vmov	r3, s14
   12b1a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   12b1e:	1ad2      	subs	r2, r2, r3
   12b20:	2a19      	cmp	r2, #25
   12b22:	dc06      	bgt.n	12b32 <__ieee754_rem_pio2f+0x1f2>
   12b24:	ed85 7a00 	vstr	s14, [r5]
   12b28:	eeb0 0a65 	vmov.f32	s0, s11
   12b2c:	e7c3      	b.n	12ab6 <__ieee754_rem_pio2f+0x176>
   12b2e:	2303      	movs	r3, #3
   12b30:	e761      	b.n	129f6 <__ieee754_rem_pio2f+0xb6>
   12b32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 12bcc <__ieee754_rem_pio2f+0x28c>
   12b36:	ed9f 5a26 	vldr	s10, [pc, #152]	; 12bd0 <__ieee754_rem_pio2f+0x290>
   12b3a:	eeb0 0a65 	vmov.f32	s0, s11
   12b3e:	eea6 0a07 	vfma.f32	s0, s12, s14
   12b42:	ee75 7ac0 	vsub.f32	s15, s11, s0
   12b46:	eee6 7a07 	vfma.f32	s15, s12, s14
   12b4a:	eed6 7a85 	vfnms.f32	s15, s13, s10
   12b4e:	e7ae      	b.n	12aae <__ieee754_rem_pio2f+0x16e>
   12b50:	4294      	cmp	r4, r2
   12b52:	ee70 7a27 	vadd.f32	s15, s0, s15
   12b56:	d00e      	beq.n	12b76 <__ieee754_rem_pio2f+0x236>
   12b58:	ed9f 7a14 	vldr	s14, [pc, #80]	; 12bac <__ieee754_rem_pio2f+0x26c>
   12b5c:	ee77 6a87 	vadd.f32	s13, s15, s14
   12b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b64:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12b68:	edc5 6a00 	vstr	s13, [r5]
   12b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
   12b70:	edc5 7a01 	vstr	s15, [r5, #4]
   12b74:	e70c      	b.n	12990 <__ieee754_rem_pio2f+0x50>
   12b76:	eddf 6a11 	vldr	s13, [pc, #68]	; 12bbc <__ieee754_rem_pio2f+0x27c>
   12b7a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12bc0 <__ieee754_rem_pio2f+0x280>
   12b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b86:	ee77 6a87 	vadd.f32	s13, s15, s14
   12b8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12b8e:	edc5 6a00 	vstr	s13, [r5]
   12b92:	ee77 7a87 	vadd.f32	s15, s15, s14
   12b96:	edc5 7a01 	vstr	s15, [r5, #4]
   12b9a:	e6f9      	b.n	12990 <__ieee754_rem_pio2f+0x50>
   12b9c:	3f490fd8 	.word	0x3f490fd8
   12ba0:	4016cbe3 	.word	0x4016cbe3
   12ba4:	3fc90f80 	.word	0x3fc90f80
   12ba8:	3fc90fd0 	.word	0x3fc90fd0
   12bac:	37354443 	.word	0x37354443
   12bb0:	43490f80 	.word	0x43490f80
   12bb4:	43800000 	.word	0x43800000
   12bb8:	00028e84 	.word	0x00028e84
   12bbc:	37354400 	.word	0x37354400
   12bc0:	2e85a308 	.word	0x2e85a308
   12bc4:	3f22f984 	.word	0x3f22f984
   12bc8:	00028e04 	.word	0x00028e04
   12bcc:	2e85a300 	.word	0x2e85a300
   12bd0:	248d3132 	.word	0x248d3132

00012bd4 <__kernel_cosf>:
   12bd4:	ee10 3a10 	vmov	r3, s0
   12bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12bdc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   12be0:	da2c      	bge.n	12c3c <__kernel_cosf+0x68>
   12be2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   12be6:	ee17 3a90 	vmov	r3, s15
   12bea:	2b00      	cmp	r3, #0
   12bec:	d060      	beq.n	12cb0 <__kernel_cosf+0xdc>
   12bee:	ee20 7a00 	vmul.f32	s14, s0, s0
   12bf2:	eddf 4a31 	vldr	s9, [pc, #196]	; 12cb8 <__kernel_cosf+0xe4>
   12bf6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 12cbc <__kernel_cosf+0xe8>
   12bfa:	eddf 5a31 	vldr	s11, [pc, #196]	; 12cc0 <__kernel_cosf+0xec>
   12bfe:	ed9f 6a31 	vldr	s12, [pc, #196]	; 12cc4 <__kernel_cosf+0xf0>
   12c02:	eddf 7a31 	vldr	s15, [pc, #196]	; 12cc8 <__kernel_cosf+0xf4>
   12c06:	eddf 6a31 	vldr	s13, [pc, #196]	; 12ccc <__kernel_cosf+0xf8>
   12c0a:	eea7 5a24 	vfma.f32	s10, s14, s9
   12c0e:	eee7 5a05 	vfma.f32	s11, s14, s10
   12c12:	eea7 6a25 	vfma.f32	s12, s14, s11
   12c16:	eee7 7a06 	vfma.f32	s15, s14, s12
   12c1a:	eee7 6a27 	vfma.f32	s13, s14, s15
   12c1e:	ee67 6a26 	vmul.f32	s13, s14, s13
   12c22:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   12c26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   12c2a:	eee7 0a26 	vfma.f32	s1, s14, s13
   12c2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12c32:	eed7 0a27 	vfnms.f32	s1, s14, s15
   12c36:	ee30 0a60 	vsub.f32	s0, s0, s1
   12c3a:	4770      	bx	lr
   12c3c:	ee20 7a00 	vmul.f32	s14, s0, s0
   12c40:	eddf 4a1d 	vldr	s9, [pc, #116]	; 12cb8 <__kernel_cosf+0xe4>
   12c44:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 12cbc <__kernel_cosf+0xe8>
   12c48:	eddf 5a1d 	vldr	s11, [pc, #116]	; 12cc0 <__kernel_cosf+0xec>
   12c4c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 12cc4 <__kernel_cosf+0xf0>
   12c50:	eddf 7a1d 	vldr	s15, [pc, #116]	; 12cc8 <__kernel_cosf+0xf4>
   12c54:	eddf 6a1d 	vldr	s13, [pc, #116]	; 12ccc <__kernel_cosf+0xf8>
   12c58:	4a1d      	ldr	r2, [pc, #116]	; (12cd0 <__kernel_cosf+0xfc>)
   12c5a:	eea7 5a24 	vfma.f32	s10, s14, s9
   12c5e:	4293      	cmp	r3, r2
   12c60:	eee5 5a07 	vfma.f32	s11, s10, s14
   12c64:	eea5 6a87 	vfma.f32	s12, s11, s14
   12c68:	eee6 7a07 	vfma.f32	s15, s12, s14
   12c6c:	eee7 6a87 	vfma.f32	s13, s15, s14
   12c70:	ee66 6a87 	vmul.f32	s13, s13, s14
   12c74:	ddd5      	ble.n	12c22 <__kernel_cosf+0x4e>
   12c76:	4a17      	ldr	r2, [pc, #92]	; (12cd4 <__kernel_cosf+0x100>)
   12c78:	4293      	cmp	r3, r2
   12c7a:	dc14      	bgt.n	12ca6 <__kernel_cosf+0xd2>
   12c7c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   12c80:	ee07 3a90 	vmov	s15, r3
   12c84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   12c88:	ee36 6a67 	vsub.f32	s12, s12, s15
   12c8c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   12c90:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   12c94:	eee7 0a26 	vfma.f32	s1, s14, s13
   12c98:	eed7 7a25 	vfnms.f32	s15, s14, s11
   12c9c:	ee77 0ae0 	vsub.f32	s1, s15, s1
   12ca0:	ee36 0a60 	vsub.f32	s0, s12, s1
   12ca4:	4770      	bx	lr
   12ca6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   12caa:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   12cae:	e7ed      	b.n	12c8c <__kernel_cosf+0xb8>
   12cb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12cb4:	4770      	bx	lr
   12cb6:	bf00      	nop
   12cb8:	ad47d74e 	.word	0xad47d74e
   12cbc:	310f74f6 	.word	0x310f74f6
   12cc0:	b493f27c 	.word	0xb493f27c
   12cc4:	37d00d01 	.word	0x37d00d01
   12cc8:	bab60b61 	.word	0xbab60b61
   12ccc:	3d2aaaab 	.word	0x3d2aaaab
   12cd0:	3e999999 	.word	0x3e999999
   12cd4:	3f480000 	.word	0x3f480000

00012cd8 <__kernel_rem_pio2f>:
   12cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	ed2d 8b04 	vpush	{d8-d9}
   12ce0:	b0db      	sub	sp, #364	; 0x16c
   12ce2:	4cd7      	ldr	r4, [pc, #860]	; (13040 <__kernel_rem_pio2f+0x368>)
   12ce4:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   12ce6:	9107      	str	r1, [sp, #28]
   12ce8:	1d11      	adds	r1, r2, #4
   12cea:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   12cee:	9304      	str	r3, [sp, #16]
   12cf0:	9209      	str	r2, [sp, #36]	; 0x24
   12cf2:	4683      	mov	fp, r0
   12cf4:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   12cf8:	f2c0 829d 	blt.w	13236 <__kernel_rem_pio2f+0x55e>
   12cfc:	1ed3      	subs	r3, r2, #3
   12cfe:	bf44      	itt	mi
   12d00:	4613      	movmi	r3, r2
   12d02:	3304      	addmi	r3, #4
   12d04:	10db      	asrs	r3, r3, #3
   12d06:	9303      	str	r3, [sp, #12]
   12d08:	3301      	adds	r3, #1
   12d0a:	00db      	lsls	r3, r3, #3
   12d0c:	9308      	str	r3, [sp, #32]
   12d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12d12:	1a9b      	subs	r3, r3, r2
   12d14:	9306      	str	r3, [sp, #24]
   12d16:	9b03      	ldr	r3, [sp, #12]
   12d18:	eb16 0109 	adds.w	r1, r6, r9
   12d1c:	eba3 0309 	sub.w	r3, r3, r9
   12d20:	d416      	bmi.n	12d50 <__kernel_rem_pio2f+0x78>
   12d22:	3101      	adds	r1, #1
   12d24:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 13044 <__kernel_rem_pio2f+0x36c>
   12d28:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   12d2a:	4419      	add	r1, r3
   12d2c:	aa1e      	add	r2, sp, #120	; 0x78
   12d2e:	2b00      	cmp	r3, #0
   12d30:	bfa4      	itt	ge
   12d32:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   12d36:	ee07 4a90 	vmovge	s15, r4
   12d3a:	f103 0301 	add.w	r3, r3, #1
   12d3e:	bfac      	ite	ge
   12d40:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   12d44:	eef0 7a47 	vmovlt.f32	s15, s14
   12d48:	428b      	cmp	r3, r1
   12d4a:	ece2 7a01 	vstmia	r2!, {s15}
   12d4e:	d1ee      	bne.n	12d2e <__kernel_rem_pio2f+0x56>
   12d50:	2e00      	cmp	r6, #0
   12d52:	f2c0 82e0 	blt.w	13316 <__kernel_rem_pio2f+0x63e>
   12d56:	9b04      	ldr	r3, [sp, #16]
   12d58:	a91e      	add	r1, sp, #120	; 0x78
   12d5a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   12d5e:	ad46      	add	r5, sp, #280	; 0x118
   12d60:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   12d64:	4648      	mov	r0, r9
   12d66:	18f7      	adds	r7, r6, r3
   12d68:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   12d6c:	f1b9 0f00 	cmp.w	r9, #0
   12d70:	eddf 7ab4 	vldr	s15, [pc, #720]	; 13044 <__kernel_rem_pio2f+0x36c>
   12d74:	db09      	blt.n	12d8a <__kernel_rem_pio2f+0xb2>
   12d76:	4622      	mov	r2, r4
   12d78:	465b      	mov	r3, fp
   12d7a:	ecf3 6a01 	vldmia	r3!, {s13}
   12d7e:	ed32 7a01 	vldmdb	r2!, {s14}
   12d82:	428b      	cmp	r3, r1
   12d84:	eee6 7a87 	vfma.f32	s15, s13, s14
   12d88:	d1f7      	bne.n	12d7a <__kernel_rem_pio2f+0xa2>
   12d8a:	3001      	adds	r0, #1
   12d8c:	42b8      	cmp	r0, r7
   12d8e:	ece5 7a01 	vstmia	r5!, {s15}
   12d92:	f104 0404 	add.w	r4, r4, #4
   12d96:	d1e9      	bne.n	12d6c <__kernel_rem_pio2f+0x94>
   12d98:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   12d9c:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   12da0:	3b08      	subs	r3, #8
   12da2:	9305      	str	r3, [sp, #20]
   12da4:	ed9f 9aa9 	vldr	s18, [pc, #676]	; 1304c <__kernel_rem_pio2f+0x374>
   12da8:	eddf 8aa7 	vldr	s17, [pc, #668]	; 13048 <__kernel_rem_pio2f+0x370>
   12dac:	9806      	ldr	r0, [sp, #24]
   12dae:	9600      	str	r6, [sp, #0]
   12db0:	ab09      	add	r3, sp, #36	; 0x24
   12db2:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   12db6:	eb0b 040c 	add.w	r4, fp, ip
   12dba:	af46      	add	r7, sp, #280	; 0x118
   12dbc:	465b      	mov	r3, fp
   12dbe:	aa5a      	add	r2, sp, #360	; 0x168
   12dc0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   12dc4:	2e00      	cmp	r6, #0
   12dc6:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   12dca:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   12dce:	dd16      	ble.n	12dfe <__kernel_rem_pio2f+0x126>
   12dd0:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   12dd4:	4641      	mov	r1, r8
   12dd6:	ee60 7a09 	vmul.f32	s15, s0, s18
   12dda:	eeb0 7a40 	vmov.f32	s14, s0
   12dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   12de2:	ed72 6a01 	vldmdb	r2!, {s13}
   12de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12dea:	42ba      	cmp	r2, r7
   12dec:	eea7 7ae8 	vfms.f32	s14, s15, s17
   12df0:	ee37 0aa6 	vadd.f32	s0, s15, s13
   12df4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   12df8:	eca1 7a01 	vstmia	r1!, {s14}
   12dfc:	d1eb      	bne.n	12dd6 <__kernel_rem_pio2f+0xfe>
   12dfe:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12e02:	f000 fc39 	bl	13678 <scalbnf>
   12e06:	eeb0 8a40 	vmov.f32	s16, s0
   12e0a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   12e0e:	ee28 0a00 	vmul.f32	s0, s16, s0
   12e12:	f7ff f983 	bl	1211c <floorf>
   12e16:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   12e1a:	eea0 8a67 	vfms.f32	s16, s0, s15
   12e1e:	9801      	ldr	r0, [sp, #4]
   12e20:	9b02      	ldr	r3, [sp, #8]
   12e22:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   12e26:	2800      	cmp	r0, #0
   12e28:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   12e2c:	ee38 8a67 	vsub.f32	s16, s16, s15
   12e30:	dd78      	ble.n	12f24 <__kernel_rem_pio2f+0x24c>
   12e32:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   12e36:	f1c0 0208 	rsb	r2, r0, #8
   12e3a:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   12e3e:	fa45 f102 	asr.w	r1, r5, r2
   12e42:	fa01 f202 	lsl.w	r2, r1, r2
   12e46:	1aaa      	subs	r2, r5, r2
   12e48:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   12e4c:	f1c0 0507 	rsb	r5, r0, #7
   12e50:	ee19 ca90 	vmov	ip, s19
   12e54:	fa42 f505 	asr.w	r5, r2, r5
   12e58:	448c      	add	ip, r1
   12e5a:	2d00      	cmp	r5, #0
   12e5c:	ee09 ca90 	vmov	s19, ip
   12e60:	dc68      	bgt.n	12f34 <__kernel_rem_pio2f+0x25c>
   12e62:	eeb5 8a40 	vcmp.f32	s16, #0.0
   12e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e6a:	f040 80b6 	bne.w	12fda <__kernel_rem_pio2f+0x302>
   12e6e:	9a00      	ldr	r2, [sp, #0]
   12e70:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
   12e74:	4572      	cmp	r2, lr
   12e76:	dc10      	bgt.n	12e9a <__kernel_rem_pio2f+0x1c2>
   12e78:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   12e7c:	3a01      	subs	r2, #1
   12e7e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   12e82:	2100      	movs	r1, #0
   12e84:	469c      	mov	ip, r3
   12e86:	f852 3904 	ldr.w	r3, [r2], #-4
   12e8a:	4552      	cmp	r2, sl
   12e8c:	ea41 0103 	orr.w	r1, r1, r3
   12e90:	d1f9      	bne.n	12e86 <__kernel_rem_pio2f+0x1ae>
   12e92:	4663      	mov	r3, ip
   12e94:	2900      	cmp	r1, #0
   12e96:	f040 80f2 	bne.w	1307e <__kernel_rem_pio2f+0x3a6>
   12e9a:	9a00      	ldr	r2, [sp, #0]
   12e9c:	3a01      	subs	r2, #1
   12e9e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   12ea2:	2a00      	cmp	r2, #0
   12ea4:	f040 80e6 	bne.w	13074 <__kernel_rem_pio2f+0x39c>
   12ea8:	9a05      	ldr	r2, [sp, #20]
   12eaa:	f04f 0c01 	mov.w	ip, #1
   12eae:	f852 1904 	ldr.w	r1, [r2], #-4
   12eb2:	f10c 0c01 	add.w	ip, ip, #1
   12eb6:	2900      	cmp	r1, #0
   12eb8:	d0f9      	beq.n	12eae <__kernel_rem_pio2f+0x1d6>
   12eba:	f106 0b01 	add.w	fp, r6, #1
   12ebe:	44b4      	add	ip, r6
   12ec0:	46de      	mov	lr, fp
   12ec2:	9904      	ldr	r1, [sp, #16]
   12ec4:	9a03      	ldr	r2, [sp, #12]
   12ec6:	198d      	adds	r5, r1, r6
   12ec8:	445a      	add	r2, fp
   12eca:	a91e      	add	r1, sp, #120	; 0x78
   12ecc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12ed0:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   12ed4:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   12ed6:	3a01      	subs	r2, #1
   12ed8:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   12edc:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   12ee0:	edd6 7a01 	vldr	s15, [r6, #4]
   12ee4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 13044 <__kernel_rem_pio2f+0x36c>
   12ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12eec:	f1b9 0f00 	cmp.w	r9, #0
   12ef0:	f106 0604 	add.w	r6, r6, #4
   12ef4:	4629      	mov	r1, r5
   12ef6:	edc5 7a00 	vstr	s15, [r5]
   12efa:	f105 0504 	add.w	r5, r5, #4
   12efe:	db09      	blt.n	12f14 <__kernel_rem_pio2f+0x23c>
   12f00:	461a      	mov	r2, r3
   12f02:	e001      	b.n	12f08 <__kernel_rem_pio2f+0x230>
   12f04:	ed71 7a01 	vldmdb	r1!, {s15}
   12f08:	ecf2 6a01 	vldmia	r2!, {s13}
   12f0c:	42a2      	cmp	r2, r4
   12f0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   12f12:	d1f7      	bne.n	12f04 <__kernel_rem_pio2f+0x22c>
   12f14:	f10e 0e01 	add.w	lr, lr, #1
   12f18:	45e6      	cmp	lr, ip
   12f1a:	ecab 7a01 	vstmia	fp!, {s14}
   12f1e:	dddf      	ble.n	12ee0 <__kernel_rem_pio2f+0x208>
   12f20:	4666      	mov	r6, ip
   12f22:	e74c      	b.n	12dbe <__kernel_rem_pio2f+0xe6>
   12f24:	f040 809c 	bne.w	13060 <__kernel_rem_pio2f+0x388>
   12f28:	1e72      	subs	r2, r6, #1
   12f2a:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   12f2e:	122d      	asrs	r5, r5, #8
   12f30:	2d00      	cmp	r5, #0
   12f32:	dd96      	ble.n	12e62 <__kernel_rem_pio2f+0x18a>
   12f34:	ee19 2a90 	vmov	r2, s19
   12f38:	2e00      	cmp	r6, #0
   12f3a:	f102 0201 	add.w	r2, r2, #1
   12f3e:	ee09 2a90 	vmov	s19, r2
   12f42:	f340 818e 	ble.w	13262 <__kernel_rem_pio2f+0x58a>
   12f46:	f8d8 1000 	ldr.w	r1, [r8]
   12f4a:	2900      	cmp	r1, #0
   12f4c:	d174      	bne.n	13038 <__kernel_rem_pio2f+0x360>
   12f4e:	2e01      	cmp	r6, #1
   12f50:	d01c      	beq.n	12f8c <__kernel_rem_pio2f+0x2b4>
   12f52:	4642      	mov	r2, r8
   12f54:	f04f 0c01 	mov.w	ip, #1
   12f58:	f852 1f04 	ldr.w	r1, [r2, #4]!
   12f5c:	2900      	cmp	r1, #0
   12f5e:	d079      	beq.n	13054 <__kernel_rem_pio2f+0x37c>
   12f60:	f10c 0201 	add.w	r2, ip, #1
   12f64:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   12f68:	4296      	cmp	r6, r2
   12f6a:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   12f6e:	dd0c      	ble.n	12f8a <__kernel_rem_pio2f+0x2b2>
   12f70:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   12f74:	44c3      	add	fp, r8
   12f76:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   12f7a:	e000      	b.n	12f7e <__kernel_rem_pio2f+0x2a6>
   12f7c:	6811      	ldr	r1, [r2, #0]
   12f7e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   12f82:	f842 1b04 	str.w	r1, [r2], #4
   12f86:	455a      	cmp	r2, fp
   12f88:	d1f8      	bne.n	12f7c <__kernel_rem_pio2f+0x2a4>
   12f8a:	2101      	movs	r1, #1
   12f8c:	2800      	cmp	r0, #0
   12f8e:	dd0c      	ble.n	12faa <__kernel_rem_pio2f+0x2d2>
   12f90:	2801      	cmp	r0, #1
   12f92:	f000 8147 	beq.w	13224 <__kernel_rem_pio2f+0x54c>
   12f96:	2802      	cmp	r0, #2
   12f98:	d107      	bne.n	12faa <__kernel_rem_pio2f+0x2d2>
   12f9a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   12f9e:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   12fa2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   12fa6:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   12faa:	2d02      	cmp	r5, #2
   12fac:	f47f af59 	bne.w	12e62 <__kernel_rem_pio2f+0x18a>
   12fb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12fb4:	ee30 8a48 	vsub.f32	s16, s0, s16
   12fb8:	2900      	cmp	r1, #0
   12fba:	f43f af52 	beq.w	12e62 <__kernel_rem_pio2f+0x18a>
   12fbe:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12fc2:	f000 fb59 	bl	13678 <scalbnf>
   12fc6:	ee38 8a40 	vsub.f32	s16, s16, s0
   12fca:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   12fce:	eeb5 8a40 	vcmp.f32	s16, #0.0
   12fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fd6:	f43f af4a 	beq.w	12e6e <__kernel_rem_pio2f+0x196>
   12fda:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   12fde:	eeb0 0a48 	vmov.f32	s0, s16
   12fe2:	1a98      	subs	r0, r3, r2
   12fe4:	9602      	str	r6, [sp, #8]
   12fe6:	9501      	str	r5, [sp, #4]
   12fe8:	9e00      	ldr	r6, [sp, #0]
   12fea:	f000 fb45 	bl	13678 <scalbnf>
   12fee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 13048 <__kernel_rem_pio2f+0x370>
   12ff2:	eeb4 0ac7 	vcmpe.f32	s0, s14
   12ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ffa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   12ffe:	f2c0 8157 	blt.w	132b0 <__kernel_rem_pio2f+0x5d8>
   13002:	eddf 7a12 	vldr	s15, [pc, #72]	; 1304c <__kernel_rem_pio2f+0x374>
   13006:	9906      	ldr	r1, [sp, #24]
   13008:	ee60 7a27 	vmul.f32	s15, s0, s15
   1300c:	3108      	adds	r1, #8
   1300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13012:	9106      	str	r1, [sp, #24]
   13014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13018:	1c5d      	adds	r5, r3, #1
   1301a:	eea7 0ac7 	vfms.f32	s0, s15, s14
   1301e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13022:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   13026:	ee10 1a10 	vmov	r1, s0
   1302a:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   1302e:	ee17 3a90 	vmov	r3, s15
   13032:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   13036:	e039      	b.n	130ac <__kernel_rem_pio2f+0x3d4>
   13038:	2201      	movs	r2, #1
   1303a:	f04f 0c00 	mov.w	ip, #0
   1303e:	e791      	b.n	12f64 <__kernel_rem_pio2f+0x28c>
   13040:	000291c8 	.word	0x000291c8
   13044:	00000000 	.word	0x00000000
   13048:	43800000 	.word	0x43800000
   1304c:	3b800000 	.word	0x3b800000
   13050:	3fc90000 	.word	0x3fc90000
   13054:	f10c 0c01 	add.w	ip, ip, #1
   13058:	45b4      	cmp	ip, r6
   1305a:	f47f af7d 	bne.w	12f58 <__kernel_rem_pio2f+0x280>
   1305e:	e795      	b.n	12f8c <__kernel_rem_pio2f+0x2b4>
   13060:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   13064:	eeb4 8ae7 	vcmpe.f32	s16, s15
   13068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1306c:	f280 80e8 	bge.w	13240 <__kernel_rem_pio2f+0x568>
   13070:	2500      	movs	r5, #0
   13072:	e6f6      	b.n	12e62 <__kernel_rem_pio2f+0x18a>
   13074:	f106 0b01 	add.w	fp, r6, #1
   13078:	46de      	mov	lr, fp
   1307a:	46dc      	mov	ip, fp
   1307c:	e721      	b.n	12ec2 <__kernel_rem_pio2f+0x1ea>
   1307e:	9806      	ldr	r0, [sp, #24]
   13080:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   13084:	3808      	subs	r0, #8
   13086:	4633      	mov	r3, r6
   13088:	462a      	mov	r2, r5
   1308a:	9e00      	ldr	r6, [sp, #0]
   1308c:	9006      	str	r0, [sp, #24]
   1308e:	4675      	mov	r5, lr
   13090:	b961      	cbnz	r1, 130ac <__kernel_rem_pio2f+0x3d4>
   13092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13096:	3b02      	subs	r3, #2
   13098:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1309c:	4601      	mov	r1, r0
   1309e:	f853 0904 	ldr.w	r0, [r3], #-4
   130a2:	3d01      	subs	r5, #1
   130a4:	3908      	subs	r1, #8
   130a6:	2800      	cmp	r0, #0
   130a8:	d0f9      	beq.n	1309e <__kernel_rem_pio2f+0x3c6>
   130aa:	9106      	str	r1, [sp, #24]
   130ac:	9806      	ldr	r0, [sp, #24]
   130ae:	9200      	str	r2, [sp, #0]
   130b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   130b4:	f000 fae0 	bl	13678 <scalbnf>
   130b8:	2d00      	cmp	r5, #0
   130ba:	9a00      	ldr	r2, [sp, #0]
   130bc:	f2c0 811e 	blt.w	132fc <__kernel_rem_pio2f+0x624>
   130c0:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   130c4:	ab46      	add	r3, sp, #280	; 0x118
   130c6:	eb03 070e 	add.w	r7, r3, lr
   130ca:	f10e 0c04 	add.w	ip, lr, #4
   130ce:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 1304c <__kernel_rem_pio2f+0x374>
   130d2:	eb08 030c 	add.w	r3, r8, ip
   130d6:	1d39      	adds	r1, r7, #4
   130d8:	ed73 7a01 	vldmdb	r3!, {s15}
   130dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   130e0:	4543      	cmp	r3, r8
   130e2:	ee67 7a80 	vmul.f32	s15, s15, s0
   130e6:	ee20 0a07 	vmul.f32	s0, s0, s14
   130ea:	ed61 7a01 	vstmdb	r1!, {s15}
   130ee:	d1f3      	bne.n	130d8 <__kernel_rem_pio2f+0x400>
   130f0:	2e00      	cmp	r6, #0
   130f2:	ed1f 6a29 	vldr	s12, [pc, #-164]	; 13050 <__kernel_rem_pio2f+0x378>
   130f6:	f04f 0400 	mov.w	r4, #0
   130fa:	db20      	blt.n	1313e <__kernel_rem_pio2f+0x466>
   130fc:	488f      	ldr	r0, [pc, #572]	; (1333c <__kernel_rem_pio2f+0x664>)
   130fe:	eddf 7a90 	vldr	s15, [pc, #576]	; 13340 <__kernel_rem_pio2f+0x668>
   13102:	4639      	mov	r1, r7
   13104:	eeb0 7a46 	vmov.f32	s14, s12
   13108:	2300      	movs	r3, #0
   1310a:	e003      	b.n	13114 <__kernel_rem_pio2f+0x43c>
   1310c:	429c      	cmp	r4, r3
   1310e:	db08      	blt.n	13122 <__kernel_rem_pio2f+0x44a>
   13110:	ecb0 7a01 	vldmia	r0!, {s14}
   13114:	ecf1 6a01 	vldmia	r1!, {s13}
   13118:	3301      	adds	r3, #1
   1311a:	429e      	cmp	r6, r3
   1311c:	eee6 7a87 	vfma.f32	s15, s13, s14
   13120:	daf4      	bge.n	1310c <__kernel_rem_pio2f+0x434>
   13122:	ab5a      	add	r3, sp, #360	; 0x168
   13124:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13128:	42a5      	cmp	r5, r4
   1312a:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   1312e:	f1a7 0704 	sub.w	r7, r7, #4
   13132:	f104 0301 	add.w	r3, r4, #1
   13136:	d005      	beq.n	13144 <__kernel_rem_pio2f+0x46c>
   13138:	2e00      	cmp	r6, #0
   1313a:	461c      	mov	r4, r3
   1313c:	dade      	bge.n	130fc <__kernel_rem_pio2f+0x424>
   1313e:	eddf 7a80 	vldr	s15, [pc, #512]	; 13340 <__kernel_rem_pio2f+0x668>
   13142:	e7ee      	b.n	13122 <__kernel_rem_pio2f+0x44a>
   13144:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   13146:	2902      	cmp	r1, #2
   13148:	dc1c      	bgt.n	13184 <__kernel_rem_pio2f+0x4ac>
   1314a:	2900      	cmp	r1, #0
   1314c:	f300 808b 	bgt.w	13266 <__kernel_rem_pio2f+0x58e>
   13150:	d10f      	bne.n	13172 <__kernel_rem_pio2f+0x49a>
   13152:	ab32      	add	r3, sp, #200	; 0xc8
   13154:	eddf 7a7a 	vldr	s15, [pc, #488]	; 13340 <__kernel_rem_pio2f+0x668>
   13158:	449c      	add	ip, r3
   1315a:	ed3c 7a01 	vldmdb	ip!, {s14}
   1315e:	4563      	cmp	r3, ip
   13160:	ee77 7a87 	vadd.f32	s15, s15, s14
   13164:	d1f9      	bne.n	1315a <__kernel_rem_pio2f+0x482>
   13166:	b10a      	cbz	r2, 1316c <__kernel_rem_pio2f+0x494>
   13168:	eef1 7a67 	vneg.f32	s15, s15
   1316c:	9b07      	ldr	r3, [sp, #28]
   1316e:	edc3 7a00 	vstr	s15, [r3]
   13172:	ee19 3a90 	vmov	r3, s19
   13176:	f003 0007 	and.w	r0, r3, #7
   1317a:	b05b      	add	sp, #364	; 0x16c
   1317c:	ecbd 8b04 	vpop	{d8-d9}
   13180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13184:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   13186:	2b03      	cmp	r3, #3
   13188:	d1f3      	bne.n	13172 <__kernel_rem_pio2f+0x49a>
   1318a:	2d00      	cmp	r5, #0
   1318c:	f000 80cb 	beq.w	13326 <__kernel_rem_pio2f+0x64e>
   13190:	ab5a      	add	r3, sp, #360	; 0x168
   13192:	4473      	add	r3, lr
   13194:	a932      	add	r1, sp, #200	; 0xc8
   13196:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   1319a:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   1319e:	ed73 7a01 	vldmdb	r3!, {s15}
   131a2:	eef0 6a47 	vmov.f32	s13, s14
   131a6:	ee37 7a27 	vadd.f32	s14, s14, s15
   131aa:	4299      	cmp	r1, r3
   131ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
   131b0:	ed83 7a00 	vstr	s14, [r3]
   131b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   131b8:	edc3 7a01 	vstr	s15, [r3, #4]
   131bc:	d1ef      	bne.n	1319e <__kernel_rem_pio2f+0x4c6>
   131be:	2d01      	cmp	r5, #1
   131c0:	f340 80b1 	ble.w	13326 <__kernel_rem_pio2f+0x64e>
   131c4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   131c8:	ab5a      	add	r3, sp, #360	; 0x168
   131ca:	3d01      	subs	r5, #1
   131cc:	449e      	add	lr, r3
   131ce:	00ad      	lsls	r5, r5, #2
   131d0:	1d2b      	adds	r3, r5, #4
   131d2:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   131d6:	440b      	add	r3, r1
   131d8:	a833      	add	r0, sp, #204	; 0xcc
   131da:	ed73 7a01 	vldmdb	r3!, {s15}
   131de:	eef0 6a47 	vmov.f32	s13, s14
   131e2:	ee37 7a27 	vadd.f32	s14, s14, s15
   131e6:	4298      	cmp	r0, r3
   131e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   131ec:	ed83 7a00 	vstr	s14, [r3]
   131f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
   131f4:	edc3 7a01 	vstr	s15, [r3, #4]
   131f8:	d1ef      	bne.n	131da <__kernel_rem_pio2f+0x502>
   131fa:	3508      	adds	r5, #8
   131fc:	eddf 7a50 	vldr	s15, [pc, #320]	; 13340 <__kernel_rem_pio2f+0x668>
   13200:	194b      	adds	r3, r1, r5
   13202:	3108      	adds	r1, #8
   13204:	ed33 7a01 	vldmdb	r3!, {s14}
   13208:	4299      	cmp	r1, r3
   1320a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1320e:	d1f9      	bne.n	13204 <__kernel_rem_pio2f+0x52c>
   13210:	2a00      	cmp	r2, #0
   13212:	d155      	bne.n	132c0 <__kernel_rem_pio2f+0x5e8>
   13214:	9907      	ldr	r1, [sp, #28]
   13216:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   13218:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   1321a:	edc1 7a02 	vstr	s15, [r1, #8]
   1321e:	600a      	str	r2, [r1, #0]
   13220:	604b      	str	r3, [r1, #4]
   13222:	e7a6      	b.n	13172 <__kernel_rem_pio2f+0x49a>
   13224:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   13228:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   1322c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13230:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   13234:	e6b9      	b.n	12faa <__kernel_rem_pio2f+0x2d2>
   13236:	2308      	movs	r3, #8
   13238:	9308      	str	r3, [sp, #32]
   1323a:	2300      	movs	r3, #0
   1323c:	9303      	str	r3, [sp, #12]
   1323e:	e566      	b.n	12d0e <__kernel_rem_pio2f+0x36>
   13240:	ee19 2a90 	vmov	r2, s19
   13244:	2e00      	cmp	r6, #0
   13246:	f102 0201 	add.w	r2, r2, #1
   1324a:	ee09 2a90 	vmov	s19, r2
   1324e:	bfc8      	it	gt
   13250:	2502      	movgt	r5, #2
   13252:	f73f ae78 	bgt.w	12f46 <__kernel_rem_pio2f+0x26e>
   13256:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1325a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   1325e:	2502      	movs	r5, #2
   13260:	e5ff      	b.n	12e62 <__kernel_rem_pio2f+0x18a>
   13262:	2100      	movs	r1, #0
   13264:	e692      	b.n	12f8c <__kernel_rem_pio2f+0x2b4>
   13266:	a932      	add	r1, sp, #200	; 0xc8
   13268:	eddf 7a35 	vldr	s15, [pc, #212]	; 13340 <__kernel_rem_pio2f+0x668>
   1326c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   13270:	ed33 7a01 	vldmdb	r3!, {s14}
   13274:	4299      	cmp	r1, r3
   13276:	ee77 7a87 	vadd.f32	s15, s15, s14
   1327a:	d1f9      	bne.n	13270 <__kernel_rem_pio2f+0x598>
   1327c:	bb92      	cbnz	r2, 132e4 <__kernel_rem_pio2f+0x60c>
   1327e:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   13282:	9b07      	ldr	r3, [sp, #28]
   13284:	2d00      	cmp	r5, #0
   13286:	edc3 7a00 	vstr	s15, [r3]
   1328a:	ee77 7a67 	vsub.f32	s15, s14, s15
   1328e:	dd0b      	ble.n	132a8 <__kernel_rem_pio2f+0x5d0>
   13290:	a933      	add	r1, sp, #204	; 0xcc
   13292:	2301      	movs	r3, #1
   13294:	ecb1 7a01 	vldmia	r1!, {s14}
   13298:	3301      	adds	r3, #1
   1329a:	429d      	cmp	r5, r3
   1329c:	ee77 7a87 	vadd.f32	s15, s15, s14
   132a0:	daf8      	bge.n	13294 <__kernel_rem_pio2f+0x5bc>
   132a2:	b10a      	cbz	r2, 132a8 <__kernel_rem_pio2f+0x5d0>
   132a4:	eef1 7a67 	vneg.f32	s15, s15
   132a8:	9b07      	ldr	r3, [sp, #28]
   132aa:	edc3 7a01 	vstr	s15, [r3, #4]
   132ae:	e760      	b.n	13172 <__kernel_rem_pio2f+0x49a>
   132b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   132b4:	461d      	mov	r5, r3
   132b6:	ee10 1a10 	vmov	r1, s0
   132ba:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   132be:	e6f5      	b.n	130ac <__kernel_rem_pio2f+0x3d4>
   132c0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   132c4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   132c8:	9b07      	ldr	r3, [sp, #28]
   132ca:	eef1 7a67 	vneg.f32	s15, s15
   132ce:	eef1 6a66 	vneg.f32	s13, s13
   132d2:	eeb1 7a47 	vneg.f32	s14, s14
   132d6:	edc3 7a02 	vstr	s15, [r3, #8]
   132da:	edc3 6a00 	vstr	s13, [r3]
   132de:	ed83 7a01 	vstr	s14, [r3, #4]
   132e2:	e746      	b.n	13172 <__kernel_rem_pio2f+0x49a>
   132e4:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   132e8:	9b07      	ldr	r3, [sp, #28]
   132ea:	eeb1 7a67 	vneg.f32	s14, s15
   132ee:	2d00      	cmp	r5, #0
   132f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
   132f4:	ed83 7a00 	vstr	s14, [r3]
   132f8:	dcca      	bgt.n	13290 <__kernel_rem_pio2f+0x5b8>
   132fa:	e7d3      	b.n	132a4 <__kernel_rem_pio2f+0x5cc>
   132fc:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   132fe:	2b02      	cmp	r3, #2
   13300:	dc0d      	bgt.n	1331e <__kernel_rem_pio2f+0x646>
   13302:	2b00      	cmp	r3, #0
   13304:	dc14      	bgt.n	13330 <__kernel_rem_pio2f+0x658>
   13306:	f47f af34 	bne.w	13172 <__kernel_rem_pio2f+0x49a>
   1330a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 13340 <__kernel_rem_pio2f+0x668>
   1330e:	2a00      	cmp	r2, #0
   13310:	f43f af2c 	beq.w	1316c <__kernel_rem_pio2f+0x494>
   13314:	e728      	b.n	13168 <__kernel_rem_pio2f+0x490>
   13316:	9b04      	ldr	r3, [sp, #16]
   13318:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1331c:	e53c      	b.n	12d98 <__kernel_rem_pio2f+0xc0>
   1331e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   13320:	2b03      	cmp	r3, #3
   13322:	f47f af26 	bne.w	13172 <__kernel_rem_pio2f+0x49a>
   13326:	eddf 7a06 	vldr	s15, [pc, #24]	; 13340 <__kernel_rem_pio2f+0x668>
   1332a:	2a00      	cmp	r2, #0
   1332c:	d1c8      	bne.n	132c0 <__kernel_rem_pio2f+0x5e8>
   1332e:	e771      	b.n	13214 <__kernel_rem_pio2f+0x53c>
   13330:	eddf 7a03 	vldr	s15, [pc, #12]	; 13340 <__kernel_rem_pio2f+0x668>
   13334:	2a00      	cmp	r2, #0
   13336:	d0a2      	beq.n	1327e <__kernel_rem_pio2f+0x5a6>
   13338:	e7d4      	b.n	132e4 <__kernel_rem_pio2f+0x60c>
   1333a:	bf00      	nop
   1333c:	000291a0 	.word	0x000291a0
   13340:	00000000 	.word	0x00000000

00013344 <__kernel_sinf>:
   13344:	ee10 3a10 	vmov	r3, s0
   13348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1334c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   13350:	da04      	bge.n	1335c <__kernel_sinf+0x18>
   13352:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   13356:	ee17 3a90 	vmov	r3, s15
   1335a:	b35b      	cbz	r3, 133b4 <__kernel_sinf+0x70>
   1335c:	ee60 7a00 	vmul.f32	s15, s0, s0
   13360:	ed9f 5a15 	vldr	s10, [pc, #84]	; 133b8 <__kernel_sinf+0x74>
   13364:	eddf 5a15 	vldr	s11, [pc, #84]	; 133bc <__kernel_sinf+0x78>
   13368:	ed9f 6a15 	vldr	s12, [pc, #84]	; 133c0 <__kernel_sinf+0x7c>
   1336c:	eddf 6a15 	vldr	s13, [pc, #84]	; 133c4 <__kernel_sinf+0x80>
   13370:	ed9f 7a15 	vldr	s14, [pc, #84]	; 133c8 <__kernel_sinf+0x84>
   13374:	eee7 5a85 	vfma.f32	s11, s15, s10
   13378:	ee20 5a27 	vmul.f32	s10, s0, s15
   1337c:	eea5 6aa7 	vfma.f32	s12, s11, s15
   13380:	eee6 6a27 	vfma.f32	s13, s12, s15
   13384:	eea6 7aa7 	vfma.f32	s14, s13, s15
   13388:	b930      	cbnz	r0, 13398 <__kernel_sinf+0x54>
   1338a:	eddf 6a10 	vldr	s13, [pc, #64]	; 133cc <__kernel_sinf+0x88>
   1338e:	eee7 6a87 	vfma.f32	s13, s15, s14
   13392:	eea6 0a85 	vfma.f32	s0, s13, s10
   13396:	4770      	bx	lr
   13398:	ee27 7a45 	vnmul.f32	s14, s14, s10
   1339c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   133a0:	eea0 7aa6 	vfma.f32	s14, s1, s13
   133a4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 133d0 <__kernel_sinf+0x8c>
   133a8:	eed7 0a27 	vfnms.f32	s1, s14, s15
   133ac:	eee5 0a26 	vfma.f32	s1, s10, s13
   133b0:	ee30 0a60 	vsub.f32	s0, s0, s1
   133b4:	4770      	bx	lr
   133b6:	bf00      	nop
   133b8:	2f2ec9d3 	.word	0x2f2ec9d3
   133bc:	b2d72f34 	.word	0xb2d72f34
   133c0:	3638ef1b 	.word	0x3638ef1b
   133c4:	b9500d01 	.word	0xb9500d01
   133c8:	3c088889 	.word	0x3c088889
   133cc:	be2aaaab 	.word	0xbe2aaaab
   133d0:	3e2aaaab 	.word	0x3e2aaaab

000133d4 <matherr>:
   133d4:	2000      	movs	r0, #0
   133d6:	4770      	bx	lr

000133d8 <expm1f>:
   133d8:	ee10 2a10 	vmov	r2, s0
   133dc:	498c      	ldr	r1, [pc, #560]	; (13610 <expm1f+0x238>)
   133de:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   133e2:	428b      	cmp	r3, r1
   133e4:	d924      	bls.n	13430 <expm1f+0x58>
   133e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   133ea:	d878      	bhi.n	134de <expm1f+0x106>
   133ec:	f000 80ca 	beq.w	13584 <expm1f+0x1ac>
   133f0:	2a00      	cmp	r2, #0
   133f2:	f2c0 808b 	blt.w	1350c <expm1f+0x134>
   133f6:	4a87      	ldr	r2, [pc, #540]	; (13614 <expm1f+0x23c>)
   133f8:	4293      	cmp	r3, r2
   133fa:	f200 80e9 	bhi.w	135d0 <expm1f+0x1f8>
   133fe:	eddf 6a86 	vldr	s13, [pc, #536]	; 13618 <expm1f+0x240>
   13402:	ee60 6a26 	vmul.f32	s13, s0, s13
   13406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1340a:	ee37 7a26 	vadd.f32	s14, s14, s13
   1340e:	ed9f 6a83 	vldr	s12, [pc, #524]	; 1361c <expm1f+0x244>
   13412:	eddf 6a83 	vldr	s13, [pc, #524]	; 13620 <expm1f+0x248>
   13416:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   1341a:	eeb0 7a40 	vmov.f32	s14, s0
   1341e:	ee17 3a90 	vmov	r3, s15
   13422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13426:	eea7 7ac6 	vfms.f32	s14, s15, s12
   1342a:	ee67 6aa6 	vmul.f32	s13, s15, s13
   1342e:	e066      	b.n	134fe <expm1f+0x126>
   13430:	497c      	ldr	r1, [pc, #496]	; (13624 <expm1f+0x24c>)
   13432:	428b      	cmp	r3, r1
   13434:	d856      	bhi.n	134e4 <expm1f+0x10c>
   13436:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
   1343a:	f0c0 808c 	bcc.w	13556 <expm1f+0x17e>
   1343e:	2300      	movs	r3, #0
   13440:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
   13444:	ee20 4a03 	vmul.f32	s8, s0, s6
   13448:	ed9f 6a77 	vldr	s12, [pc, #476]	; 13628 <expm1f+0x250>
   1344c:	eddf 5a77 	vldr	s11, [pc, #476]	; 1362c <expm1f+0x254>
   13450:	eddf 4a77 	vldr	s9, [pc, #476]	; 13630 <expm1f+0x258>
   13454:	ed9f 5a77 	vldr	s10, [pc, #476]	; 13634 <expm1f+0x25c>
   13458:	eddf 6a77 	vldr	s13, [pc, #476]	; 13638 <expm1f+0x260>
   1345c:	ee20 7a04 	vmul.f32	s14, s0, s8
   13460:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   13464:	eee7 5a06 	vfma.f32	s11, s14, s12
   13468:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
   1346c:	eee5 4a87 	vfma.f32	s9, s11, s14
   13470:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
   13474:	eea4 5a87 	vfma.f32	s10, s9, s14
   13478:	eee5 6a07 	vfma.f32	s13, s10, s14
   1347c:	eeb0 5a63 	vmov.f32	s10, s7
   13480:	eea6 5a87 	vfma.f32	s10, s13, s14
   13484:	eea4 6a45 	vfms.f32	s12, s8, s10
   13488:	eee0 5a46 	vfms.f32	s11, s0, s12
   1348c:	ee35 6a46 	vsub.f32	s12, s10, s12
   13490:	eec6 6a25 	vdiv.f32	s13, s12, s11
   13494:	ee66 6a87 	vmul.f32	s13, s13, s14
   13498:	2b00      	cmp	r3, #0
   1349a:	d057      	beq.n	1354c <expm1f+0x174>
   1349c:	ee76 6ae7 	vsub.f32	s13, s13, s15
   134a0:	1c5a      	adds	r2, r3, #1
   134a2:	eed6 7a80 	vfnms.f32	s15, s13, s0
   134a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   134aa:	d05d      	beq.n	13568 <expm1f+0x190>
   134ac:	2b01      	cmp	r3, #1
   134ae:	d03d      	beq.n	1352c <expm1f+0x154>
   134b0:	1c5a      	adds	r2, r3, #1
   134b2:	2a39      	cmp	r2, #57	; 0x39
   134b4:	d86d      	bhi.n	13592 <expm1f+0x1ba>
   134b6:	2b16      	cmp	r3, #22
   134b8:	dc78      	bgt.n	135ac <expm1f+0x1d4>
   134ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   134be:	411a      	asrs	r2, r3
   134c0:	f1c2 527e 	rsb	r2, r2, #1065353216	; 0x3f800000
   134c4:	ee77 7a40 	vsub.f32	s15, s14, s0
   134c8:	ee00 2a10 	vmov	s0, r2
   134cc:	ee30 0a67 	vsub.f32	s0, s0, s15
   134d0:	ee10 2a10 	vmov	r2, s0
   134d4:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   134d8:	ee00 3a10 	vmov	s0, r3
   134dc:	4770      	bx	lr
   134de:	ee30 0a00 	vadd.f32	s0, s0, s0
   134e2:	4770      	bx	lr
   134e4:	4955      	ldr	r1, [pc, #340]	; (1363c <expm1f+0x264>)
   134e6:	428b      	cmp	r3, r1
   134e8:	f200 8083 	bhi.w	135f2 <expm1f+0x21a>
   134ec:	2a00      	cmp	r2, #0
   134ee:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 1361c <expm1f+0x244>
   134f2:	db40      	blt.n	13576 <expm1f+0x19e>
   134f4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 13620 <expm1f+0x248>
   134f8:	ee30 7a47 	vsub.f32	s14, s0, s14
   134fc:	2301      	movs	r3, #1
   134fe:	ee37 0a66 	vsub.f32	s0, s14, s13
   13502:	ee77 7a40 	vsub.f32	s15, s14, s0
   13506:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1350a:	e799      	b.n	13440 <expm1f+0x68>
   1350c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 13640 <expm1f+0x268>
   13510:	ee70 7a27 	vadd.f32	s15, s0, s15
   13514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1351c:	d466      	bmi.n	135ec <expm1f+0x214>
   1351e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 13618 <expm1f+0x240>
   13522:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
   13526:	ee60 6a26 	vmul.f32	s13, s0, s13
   1352a:	e76e      	b.n	1340a <expm1f+0x32>
   1352c:	eefd 7a00 	vmov.f32	s15, #208	; 0xbe800000 -0.250
   13530:	eeb4 0ae7 	vcmpe.f32	s0, s15
   13534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13538:	d54f      	bpl.n	135da <expm1f+0x202>
   1353a:	ee30 0a03 	vadd.f32	s0, s0, s6
   1353e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   13542:	ee37 0a40 	vsub.f32	s0, s14, s0
   13546:	ee20 0a27 	vmul.f32	s0, s0, s15
   1354a:	4770      	bx	lr
   1354c:	ee90 7a26 	vfnms.f32	s14, s0, s13
   13550:	ee30 0a47 	vsub.f32	s0, s0, s14
   13554:	4770      	bx	lr
   13556:	eddf 7a3b 	vldr	s15, [pc, #236]	; 13644 <expm1f+0x26c>
   1355a:	ee70 7a27 	vadd.f32	s15, s0, s15
   1355e:	ee77 7ae7 	vsub.f32	s15, s15, s15
   13562:	ee30 0a67 	vsub.f32	s0, s0, s15
   13566:	4770      	bx	lr
   13568:	ee70 7a47 	vsub.f32	s15, s0, s14
   1356c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
   13570:	eea7 0a83 	vfma.f32	s0, s15, s6
   13574:	4770      	bx	lr
   13576:	eddf 6a34 	vldr	s13, [pc, #208]	; 13648 <expm1f+0x270>
   1357a:	ee30 7a07 	vadd.f32	s14, s0, s14
   1357e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13582:	e7bc      	b.n	134fe <expm1f+0x126>
   13584:	2a00      	cmp	r2, #0
   13586:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1358a:	bfb8      	it	lt
   1358c:	eeb0 0a67 	vmovlt.f32	s0, s15
   13590:	4770      	bx	lr
   13592:	ee77 7a40 	vsub.f32	s15, s14, s0
   13596:	ee33 0ae7 	vsub.f32	s0, s7, s15
   1359a:	ee10 2a10 	vmov	r2, s0
   1359e:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   135a2:	ee00 3a10 	vmov	s0, r3
   135a6:	ee30 0a63 	vsub.f32	s0, s0, s7
   135aa:	4770      	bx	lr
   135ac:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
   135b0:	05d2      	lsls	r2, r2, #23
   135b2:	ee07 2a90 	vmov	s15, r2
   135b6:	ee77 7a27 	vadd.f32	s15, s14, s15
   135ba:	ee70 7a67 	vsub.f32	s15, s0, s15
   135be:	ee37 0aa3 	vadd.f32	s0, s15, s7
   135c2:	ee10 2a10 	vmov	r2, s0
   135c6:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   135ca:	ee00 3a10 	vmov	s0, r3
   135ce:	4770      	bx	lr
   135d0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 13644 <expm1f+0x26c>
   135d4:	ee20 0a00 	vmul.f32	s0, s0, s0
   135d8:	4770      	bx	lr
   135da:	ee70 7a47 	vsub.f32	s15, s0, s14
   135de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   135e2:	eee7 3a87 	vfma.f32	s7, s15, s14
   135e6:	eeb0 0a63 	vmov.f32	s0, s7
   135ea:	4770      	bx	lr
   135ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   135f0:	4770      	bx	lr
   135f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 13618 <expm1f+0x240>
   135f6:	2a00      	cmp	r2, #0
   135f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   135fc:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
   13600:	ee60 6a07 	vmul.f32	s13, s0, s14
   13604:	bfb4      	ite	lt
   13606:	eeb0 7a46 	vmovlt.f32	s14, s12
   1360a:	eeb0 7a67 	vmovge.f32	s14, s15
   1360e:	e6fc      	b.n	1340a <expm1f+0x32>
   13610:	4195b843 	.word	0x4195b843
   13614:	42b17217 	.word	0x42b17217
   13618:	3fb8aa3b 	.word	0x3fb8aa3b
   1361c:	3f317180 	.word	0x3f317180
   13620:	3717f7d1 	.word	0x3717f7d1
   13624:	3eb17218 	.word	0x3eb17218
   13628:	b457edbb 	.word	0xb457edbb
   1362c:	36867e54 	.word	0x36867e54
   13630:	b8a670cd 	.word	0xb8a670cd
   13634:	3ad00d01 	.word	0x3ad00d01
   13638:	bd088889 	.word	0xbd088889
   1363c:	3f851591 	.word	0x3f851591
   13640:	0da24260 	.word	0x0da24260
   13644:	7149f2ca 	.word	0x7149f2ca
   13648:	b717f7d1 	.word	0xb717f7d1

0001364c <fabsf>:
   1364c:	ee10 3a10 	vmov	r3, s0
   13650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   13654:	ee00 3a10 	vmov	s0, r3
   13658:	4770      	bx	lr
   1365a:	bf00      	nop

0001365c <finitef>:
   1365c:	b082      	sub	sp, #8
   1365e:	ed8d 0a01 	vstr	s0, [sp, #4]
   13662:	9801      	ldr	r0, [sp, #4]
   13664:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   13668:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1366c:	bfac      	ite	ge
   1366e:	2000      	movge	r0, #0
   13670:	2001      	movlt	r0, #1
   13672:	b002      	add	sp, #8
   13674:	4770      	bx	lr
   13676:	bf00      	nop

00013678 <scalbnf>:
   13678:	b082      	sub	sp, #8
   1367a:	ed8d 0a01 	vstr	s0, [sp, #4]
   1367e:	9b01      	ldr	r3, [sp, #4]
   13680:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   13684:	d02a      	beq.n	136dc <scalbnf+0x64>
   13686:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1368a:	d223      	bcs.n	136d4 <scalbnf+0x5c>
   1368c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   13690:	d128      	bne.n	136e4 <scalbnf+0x6c>
   13692:	ed9d 7a01 	vldr	s14, [sp, #4]
   13696:	eddf 7a2a 	vldr	s15, [pc, #168]	; 13740 <scalbnf+0xc8>
   1369a:	4b2a      	ldr	r3, [pc, #168]	; (13744 <scalbnf+0xcc>)
   1369c:	ee67 7a27 	vmul.f32	s15, s14, s15
   136a0:	4298      	cmp	r0, r3
   136a2:	edcd 7a01 	vstr	s15, [sp, #4]
   136a6:	db37      	blt.n	13718 <scalbnf+0xa0>
   136a8:	9b01      	ldr	r3, [sp, #4]
   136aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   136ae:	3a19      	subs	r2, #25
   136b0:	4402      	add	r2, r0
   136b2:	2afe      	cmp	r2, #254	; 0xfe
   136b4:	dd1a      	ble.n	136ec <scalbnf+0x74>
   136b6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 13748 <scalbnf+0xd0>
   136ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 1374c <scalbnf+0xd4>
   136be:	9b01      	ldr	r3, [sp, #4]
   136c0:	2b00      	cmp	r3, #0
   136c2:	eef0 7a40 	vmov.f32	s15, s0
   136c6:	bfb8      	it	lt
   136c8:	eeb0 0a47 	vmovlt.f32	s0, s14
   136cc:	ee20 0a27 	vmul.f32	s0, s0, s15
   136d0:	b002      	add	sp, #8
   136d2:	4770      	bx	lr
   136d4:	ee30 0a00 	vadd.f32	s0, s0, s0
   136d8:	b002      	add	sp, #8
   136da:	4770      	bx	lr
   136dc:	ed9d 0a01 	vldr	s0, [sp, #4]
   136e0:	b002      	add	sp, #8
   136e2:	4770      	bx	lr
   136e4:	0dd2      	lsrs	r2, r2, #23
   136e6:	4402      	add	r2, r0
   136e8:	2afe      	cmp	r2, #254	; 0xfe
   136ea:	dce4      	bgt.n	136b6 <scalbnf+0x3e>
   136ec:	2a00      	cmp	r2, #0
   136ee:	dc0b      	bgt.n	13708 <scalbnf+0x90>
   136f0:	f112 0f16 	cmn.w	r2, #22
   136f4:	da17      	bge.n	13726 <scalbnf+0xae>
   136f6:	f24c 3350 	movw	r3, #50000	; 0xc350
   136fa:	4298      	cmp	r0, r3
   136fc:	dcdb      	bgt.n	136b6 <scalbnf+0x3e>
   136fe:	ed9f 0a14 	vldr	s0, [pc, #80]	; 13750 <scalbnf+0xd8>
   13702:	ed9f 7a14 	vldr	s14, [pc, #80]	; 13754 <scalbnf+0xdc>
   13706:	e7da      	b.n	136be <scalbnf+0x46>
   13708:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1370c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   13710:	ee00 3a10 	vmov	s0, r3
   13714:	b002      	add	sp, #8
   13716:	4770      	bx	lr
   13718:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 13750 <scalbnf+0xd8>
   1371c:	eddd 7a01 	vldr	s15, [sp, #4]
   13720:	ee27 0a80 	vmul.f32	s0, s15, s0
   13724:	e7d8      	b.n	136d8 <scalbnf+0x60>
   13726:	3219      	adds	r2, #25
   13728:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1372c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   13730:	eddf 7a09 	vldr	s15, [pc, #36]	; 13758 <scalbnf+0xe0>
   13734:	ee07 3a10 	vmov	s14, r3
   13738:	ee27 0a27 	vmul.f32	s0, s14, s15
   1373c:	e7cc      	b.n	136d8 <scalbnf+0x60>
   1373e:	bf00      	nop
   13740:	4c000000 	.word	0x4c000000
   13744:	ffff3cb0 	.word	0xffff3cb0
   13748:	7149f2ca 	.word	0x7149f2ca
   1374c:	f149f2ca 	.word	0xf149f2ca
   13750:	0da24260 	.word	0x0da24260
   13754:	8da24260 	.word	0x8da24260
   13758:	33000000 	.word	0x33000000

0001375c <fiprintf>:
   1375c:	b40e      	push	{r1, r2, r3}
   1375e:	b503      	push	{r0, r1, lr}
   13760:	4601      	mov	r1, r0
   13762:	ab03      	add	r3, sp, #12
   13764:	4805      	ldr	r0, [pc, #20]	; (1377c <fiprintf+0x20>)
   13766:	f853 2b04 	ldr.w	r2, [r3], #4
   1376a:	6800      	ldr	r0, [r0, #0]
   1376c:	9301      	str	r3, [sp, #4]
   1376e:	f000 f8c1 	bl	138f4 <_vfiprintf_r>
   13772:	b002      	add	sp, #8
   13774:	f85d eb04 	ldr.w	lr, [sp], #4
   13778:	b003      	add	sp, #12
   1377a:	4770      	bx	lr
   1377c:	20000728 	.word	0x20000728

00013780 <malloc>:
   13780:	4b02      	ldr	r3, [pc, #8]	; (1378c <malloc+0xc>)
   13782:	4601      	mov	r1, r0
   13784:	6818      	ldr	r0, [r3, #0]
   13786:	f000 b85b 	b.w	13840 <_malloc_r>
   1378a:	bf00      	nop
   1378c:	20000728 	.word	0x20000728

00013790 <free>:
   13790:	4b02      	ldr	r3, [pc, #8]	; (1379c <free+0xc>)
   13792:	4601      	mov	r1, r0
   13794:	6818      	ldr	r0, [r3, #0]
   13796:	f000 b803 	b.w	137a0 <_free_r>
   1379a:	bf00      	nop
   1379c:	20000728 	.word	0x20000728

000137a0 <_free_r>:
   137a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137a2:	2900      	cmp	r1, #0
   137a4:	d048      	beq.n	13838 <_free_r+0x98>
   137a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   137aa:	9001      	str	r0, [sp, #4]
   137ac:	2b00      	cmp	r3, #0
   137ae:	f1a1 0404 	sub.w	r4, r1, #4
   137b2:	bfb8      	it	lt
   137b4:	18e4      	addlt	r4, r4, r3
   137b6:	f000 fda7 	bl	14308 <__malloc_lock>
   137ba:	4a20      	ldr	r2, [pc, #128]	; (1383c <_free_r+0x9c>)
   137bc:	9801      	ldr	r0, [sp, #4]
   137be:	6813      	ldr	r3, [r2, #0]
   137c0:	4615      	mov	r5, r2
   137c2:	b933      	cbnz	r3, 137d2 <_free_r+0x32>
   137c4:	6063      	str	r3, [r4, #4]
   137c6:	6014      	str	r4, [r2, #0]
   137c8:	b003      	add	sp, #12
   137ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   137ce:	f000 bda1 	b.w	14314 <__malloc_unlock>
   137d2:	42a3      	cmp	r3, r4
   137d4:	d90b      	bls.n	137ee <_free_r+0x4e>
   137d6:	6821      	ldr	r1, [r4, #0]
   137d8:	1862      	adds	r2, r4, r1
   137da:	4293      	cmp	r3, r2
   137dc:	bf04      	itt	eq
   137de:	681a      	ldreq	r2, [r3, #0]
   137e0:	685b      	ldreq	r3, [r3, #4]
   137e2:	6063      	str	r3, [r4, #4]
   137e4:	bf04      	itt	eq
   137e6:	1852      	addeq	r2, r2, r1
   137e8:	6022      	streq	r2, [r4, #0]
   137ea:	602c      	str	r4, [r5, #0]
   137ec:	e7ec      	b.n	137c8 <_free_r+0x28>
   137ee:	461a      	mov	r2, r3
   137f0:	685b      	ldr	r3, [r3, #4]
   137f2:	b10b      	cbz	r3, 137f8 <_free_r+0x58>
   137f4:	42a3      	cmp	r3, r4
   137f6:	d9fa      	bls.n	137ee <_free_r+0x4e>
   137f8:	6811      	ldr	r1, [r2, #0]
   137fa:	1855      	adds	r5, r2, r1
   137fc:	42a5      	cmp	r5, r4
   137fe:	d10b      	bne.n	13818 <_free_r+0x78>
   13800:	6824      	ldr	r4, [r4, #0]
   13802:	4421      	add	r1, r4
   13804:	1854      	adds	r4, r2, r1
   13806:	42a3      	cmp	r3, r4
   13808:	6011      	str	r1, [r2, #0]
   1380a:	d1dd      	bne.n	137c8 <_free_r+0x28>
   1380c:	681c      	ldr	r4, [r3, #0]
   1380e:	685b      	ldr	r3, [r3, #4]
   13810:	6053      	str	r3, [r2, #4]
   13812:	4421      	add	r1, r4
   13814:	6011      	str	r1, [r2, #0]
   13816:	e7d7      	b.n	137c8 <_free_r+0x28>
   13818:	d902      	bls.n	13820 <_free_r+0x80>
   1381a:	230c      	movs	r3, #12
   1381c:	6003      	str	r3, [r0, #0]
   1381e:	e7d3      	b.n	137c8 <_free_r+0x28>
   13820:	6825      	ldr	r5, [r4, #0]
   13822:	1961      	adds	r1, r4, r5
   13824:	428b      	cmp	r3, r1
   13826:	bf04      	itt	eq
   13828:	6819      	ldreq	r1, [r3, #0]
   1382a:	685b      	ldreq	r3, [r3, #4]
   1382c:	6063      	str	r3, [r4, #4]
   1382e:	bf04      	itt	eq
   13830:	1949      	addeq	r1, r1, r5
   13832:	6021      	streq	r1, [r4, #0]
   13834:	6054      	str	r4, [r2, #4]
   13836:	e7c7      	b.n	137c8 <_free_r+0x28>
   13838:	b003      	add	sp, #12
   1383a:	bd30      	pop	{r4, r5, pc}
   1383c:	20010cb8 	.word	0x20010cb8

00013840 <_malloc_r>:
   13840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13842:	1ccd      	adds	r5, r1, #3
   13844:	f025 0503 	bic.w	r5, r5, #3
   13848:	3508      	adds	r5, #8
   1384a:	2d0c      	cmp	r5, #12
   1384c:	bf38      	it	cc
   1384e:	250c      	movcc	r5, #12
   13850:	2d00      	cmp	r5, #0
   13852:	4606      	mov	r6, r0
   13854:	db01      	blt.n	1385a <_malloc_r+0x1a>
   13856:	42a9      	cmp	r1, r5
   13858:	d903      	bls.n	13862 <_malloc_r+0x22>
   1385a:	230c      	movs	r3, #12
   1385c:	6033      	str	r3, [r6, #0]
   1385e:	2000      	movs	r0, #0
   13860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13862:	f000 fd51 	bl	14308 <__malloc_lock>
   13866:	4921      	ldr	r1, [pc, #132]	; (138ec <_malloc_r+0xac>)
   13868:	680a      	ldr	r2, [r1, #0]
   1386a:	4614      	mov	r4, r2
   1386c:	b99c      	cbnz	r4, 13896 <_malloc_r+0x56>
   1386e:	4f20      	ldr	r7, [pc, #128]	; (138f0 <_malloc_r+0xb0>)
   13870:	683b      	ldr	r3, [r7, #0]
   13872:	b923      	cbnz	r3, 1387e <_malloc_r+0x3e>
   13874:	4621      	mov	r1, r4
   13876:	4630      	mov	r0, r6
   13878:	f000 fa9a 	bl	13db0 <_sbrk_r>
   1387c:	6038      	str	r0, [r7, #0]
   1387e:	4629      	mov	r1, r5
   13880:	4630      	mov	r0, r6
   13882:	f000 fa95 	bl	13db0 <_sbrk_r>
   13886:	1c43      	adds	r3, r0, #1
   13888:	d123      	bne.n	138d2 <_malloc_r+0x92>
   1388a:	230c      	movs	r3, #12
   1388c:	6033      	str	r3, [r6, #0]
   1388e:	4630      	mov	r0, r6
   13890:	f000 fd40 	bl	14314 <__malloc_unlock>
   13894:	e7e3      	b.n	1385e <_malloc_r+0x1e>
   13896:	6823      	ldr	r3, [r4, #0]
   13898:	1b5b      	subs	r3, r3, r5
   1389a:	d417      	bmi.n	138cc <_malloc_r+0x8c>
   1389c:	2b0b      	cmp	r3, #11
   1389e:	d903      	bls.n	138a8 <_malloc_r+0x68>
   138a0:	6023      	str	r3, [r4, #0]
   138a2:	441c      	add	r4, r3
   138a4:	6025      	str	r5, [r4, #0]
   138a6:	e004      	b.n	138b2 <_malloc_r+0x72>
   138a8:	6863      	ldr	r3, [r4, #4]
   138aa:	42a2      	cmp	r2, r4
   138ac:	bf0c      	ite	eq
   138ae:	600b      	streq	r3, [r1, #0]
   138b0:	6053      	strne	r3, [r2, #4]
   138b2:	4630      	mov	r0, r6
   138b4:	f000 fd2e 	bl	14314 <__malloc_unlock>
   138b8:	f104 000b 	add.w	r0, r4, #11
   138bc:	1d23      	adds	r3, r4, #4
   138be:	f020 0007 	bic.w	r0, r0, #7
   138c2:	1ac2      	subs	r2, r0, r3
   138c4:	d0cc      	beq.n	13860 <_malloc_r+0x20>
   138c6:	1a1b      	subs	r3, r3, r0
   138c8:	50a3      	str	r3, [r4, r2]
   138ca:	e7c9      	b.n	13860 <_malloc_r+0x20>
   138cc:	4622      	mov	r2, r4
   138ce:	6864      	ldr	r4, [r4, #4]
   138d0:	e7cc      	b.n	1386c <_malloc_r+0x2c>
   138d2:	1cc4      	adds	r4, r0, #3
   138d4:	f024 0403 	bic.w	r4, r4, #3
   138d8:	42a0      	cmp	r0, r4
   138da:	d0e3      	beq.n	138a4 <_malloc_r+0x64>
   138dc:	1a21      	subs	r1, r4, r0
   138de:	4630      	mov	r0, r6
   138e0:	f000 fa66 	bl	13db0 <_sbrk_r>
   138e4:	3001      	adds	r0, #1
   138e6:	d1dd      	bne.n	138a4 <_malloc_r+0x64>
   138e8:	e7cf      	b.n	1388a <_malloc_r+0x4a>
   138ea:	bf00      	nop
   138ec:	20010cb8 	.word	0x20010cb8
   138f0:	20010cbc 	.word	0x20010cbc

000138f4 <_vfiprintf_r>:
   138f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f8:	460d      	mov	r5, r1
   138fa:	b09d      	sub	sp, #116	; 0x74
   138fc:	4614      	mov	r4, r2
   138fe:	4698      	mov	r8, r3
   13900:	4606      	mov	r6, r0
   13902:	b118      	cbz	r0, 1390c <_vfiprintf_r+0x18>
   13904:	6983      	ldr	r3, [r0, #24]
   13906:	b90b      	cbnz	r3, 1390c <_vfiprintf_r+0x18>
   13908:	f000 fc40 	bl	1418c <__sinit>
   1390c:	4b89      	ldr	r3, [pc, #548]	; (13b34 <_vfiprintf_r+0x240>)
   1390e:	429d      	cmp	r5, r3
   13910:	d11b      	bne.n	1394a <_vfiprintf_r+0x56>
   13912:	6875      	ldr	r5, [r6, #4]
   13914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13916:	07d9      	lsls	r1, r3, #31
   13918:	d405      	bmi.n	13926 <_vfiprintf_r+0x32>
   1391a:	89ab      	ldrh	r3, [r5, #12]
   1391c:	059a      	lsls	r2, r3, #22
   1391e:	d402      	bmi.n	13926 <_vfiprintf_r+0x32>
   13920:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13922:	f00a ffa4 	bl	1e86e <__retarget_lock_acquire_recursive>
   13926:	89ab      	ldrh	r3, [r5, #12]
   13928:	071b      	lsls	r3, r3, #28
   1392a:	d501      	bpl.n	13930 <_vfiprintf_r+0x3c>
   1392c:	692b      	ldr	r3, [r5, #16]
   1392e:	b9eb      	cbnz	r3, 1396c <_vfiprintf_r+0x78>
   13930:	4629      	mov	r1, r5
   13932:	4630      	mov	r0, r6
   13934:	f000 fab8 	bl	13ea8 <__swsetup_r>
   13938:	b1c0      	cbz	r0, 1396c <_vfiprintf_r+0x78>
   1393a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1393c:	07dc      	lsls	r4, r3, #31
   1393e:	d50e      	bpl.n	1395e <_vfiprintf_r+0x6a>
   13940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13944:	b01d      	add	sp, #116	; 0x74
   13946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394a:	4b7b      	ldr	r3, [pc, #492]	; (13b38 <_vfiprintf_r+0x244>)
   1394c:	429d      	cmp	r5, r3
   1394e:	d101      	bne.n	13954 <_vfiprintf_r+0x60>
   13950:	68b5      	ldr	r5, [r6, #8]
   13952:	e7df      	b.n	13914 <_vfiprintf_r+0x20>
   13954:	4b79      	ldr	r3, [pc, #484]	; (13b3c <_vfiprintf_r+0x248>)
   13956:	429d      	cmp	r5, r3
   13958:	bf08      	it	eq
   1395a:	68f5      	ldreq	r5, [r6, #12]
   1395c:	e7da      	b.n	13914 <_vfiprintf_r+0x20>
   1395e:	89ab      	ldrh	r3, [r5, #12]
   13960:	0598      	lsls	r0, r3, #22
   13962:	d4ed      	bmi.n	13940 <_vfiprintf_r+0x4c>
   13964:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13966:	f00a ff83 	bl	1e870 <__retarget_lock_release_recursive>
   1396a:	e7e9      	b.n	13940 <_vfiprintf_r+0x4c>
   1396c:	2300      	movs	r3, #0
   1396e:	9309      	str	r3, [sp, #36]	; 0x24
   13970:	2320      	movs	r3, #32
   13972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   13976:	f8cd 800c 	str.w	r8, [sp, #12]
   1397a:	2330      	movs	r3, #48	; 0x30
   1397c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 13b40 <_vfiprintf_r+0x24c>
   13980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   13984:	f04f 0901 	mov.w	r9, #1
   13988:	4623      	mov	r3, r4
   1398a:	469a      	mov	sl, r3
   1398c:	f813 2b01 	ldrb.w	r2, [r3], #1
   13990:	b10a      	cbz	r2, 13996 <_vfiprintf_r+0xa2>
   13992:	2a25      	cmp	r2, #37	; 0x25
   13994:	d1f9      	bne.n	1398a <_vfiprintf_r+0x96>
   13996:	ebba 0b04 	subs.w	fp, sl, r4
   1399a:	d00b      	beq.n	139b4 <_vfiprintf_r+0xc0>
   1399c:	465b      	mov	r3, fp
   1399e:	4622      	mov	r2, r4
   139a0:	4629      	mov	r1, r5
   139a2:	4630      	mov	r0, r6
   139a4:	f00a fe57 	bl	1e656 <__sfputs_r>
   139a8:	3001      	adds	r0, #1
   139aa:	f000 80aa 	beq.w	13b02 <_vfiprintf_r+0x20e>
   139ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   139b0:	445a      	add	r2, fp
   139b2:	9209      	str	r2, [sp, #36]	; 0x24
   139b4:	f89a 3000 	ldrb.w	r3, [sl]
   139b8:	2b00      	cmp	r3, #0
   139ba:	f000 80a2 	beq.w	13b02 <_vfiprintf_r+0x20e>
   139be:	2300      	movs	r3, #0
   139c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   139c8:	f10a 0a01 	add.w	sl, sl, #1
   139cc:	9304      	str	r3, [sp, #16]
   139ce:	9307      	str	r3, [sp, #28]
   139d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   139d4:	931a      	str	r3, [sp, #104]	; 0x68
   139d6:	4654      	mov	r4, sl
   139d8:	2205      	movs	r2, #5
   139da:	f814 1b01 	ldrb.w	r1, [r4], #1
   139de:	4858      	ldr	r0, [pc, #352]	; (13b40 <_vfiprintf_r+0x24c>)
   139e0:	f7ec fb8e 	bl	100 <memchr>
   139e4:	9a04      	ldr	r2, [sp, #16]
   139e6:	b9d8      	cbnz	r0, 13a20 <_vfiprintf_r+0x12c>
   139e8:	06d1      	lsls	r1, r2, #27
   139ea:	bf44      	itt	mi
   139ec:	2320      	movmi	r3, #32
   139ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   139f2:	0713      	lsls	r3, r2, #28
   139f4:	bf44      	itt	mi
   139f6:	232b      	movmi	r3, #43	; 0x2b
   139f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   139fc:	f89a 3000 	ldrb.w	r3, [sl]
   13a00:	2b2a      	cmp	r3, #42	; 0x2a
   13a02:	d015      	beq.n	13a30 <_vfiprintf_r+0x13c>
   13a04:	9a07      	ldr	r2, [sp, #28]
   13a06:	4654      	mov	r4, sl
   13a08:	2000      	movs	r0, #0
   13a0a:	f04f 0c0a 	mov.w	ip, #10
   13a0e:	4621      	mov	r1, r4
   13a10:	f811 3b01 	ldrb.w	r3, [r1], #1
   13a14:	3b30      	subs	r3, #48	; 0x30
   13a16:	2b09      	cmp	r3, #9
   13a18:	d94e      	bls.n	13ab8 <_vfiprintf_r+0x1c4>
   13a1a:	b1b0      	cbz	r0, 13a4a <_vfiprintf_r+0x156>
   13a1c:	9207      	str	r2, [sp, #28]
   13a1e:	e014      	b.n	13a4a <_vfiprintf_r+0x156>
   13a20:	eba0 0308 	sub.w	r3, r0, r8
   13a24:	fa09 f303 	lsl.w	r3, r9, r3
   13a28:	4313      	orrs	r3, r2
   13a2a:	9304      	str	r3, [sp, #16]
   13a2c:	46a2      	mov	sl, r4
   13a2e:	e7d2      	b.n	139d6 <_vfiprintf_r+0xe2>
   13a30:	9b03      	ldr	r3, [sp, #12]
   13a32:	1d19      	adds	r1, r3, #4
   13a34:	681b      	ldr	r3, [r3, #0]
   13a36:	9103      	str	r1, [sp, #12]
   13a38:	2b00      	cmp	r3, #0
   13a3a:	bfbb      	ittet	lt
   13a3c:	425b      	neglt	r3, r3
   13a3e:	f042 0202 	orrlt.w	r2, r2, #2
   13a42:	9307      	strge	r3, [sp, #28]
   13a44:	9307      	strlt	r3, [sp, #28]
   13a46:	bfb8      	it	lt
   13a48:	9204      	strlt	r2, [sp, #16]
   13a4a:	7823      	ldrb	r3, [r4, #0]
   13a4c:	2b2e      	cmp	r3, #46	; 0x2e
   13a4e:	d10c      	bne.n	13a6a <_vfiprintf_r+0x176>
   13a50:	7863      	ldrb	r3, [r4, #1]
   13a52:	2b2a      	cmp	r3, #42	; 0x2a
   13a54:	d135      	bne.n	13ac2 <_vfiprintf_r+0x1ce>
   13a56:	9b03      	ldr	r3, [sp, #12]
   13a58:	1d1a      	adds	r2, r3, #4
   13a5a:	681b      	ldr	r3, [r3, #0]
   13a5c:	9203      	str	r2, [sp, #12]
   13a5e:	2b00      	cmp	r3, #0
   13a60:	bfb8      	it	lt
   13a62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   13a66:	3402      	adds	r4, #2
   13a68:	9305      	str	r3, [sp, #20]
   13a6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 13b50 <_vfiprintf_r+0x25c>
   13a6e:	7821      	ldrb	r1, [r4, #0]
   13a70:	2203      	movs	r2, #3
   13a72:	4650      	mov	r0, sl
   13a74:	f7ec fb44 	bl	100 <memchr>
   13a78:	b140      	cbz	r0, 13a8c <_vfiprintf_r+0x198>
   13a7a:	2340      	movs	r3, #64	; 0x40
   13a7c:	eba0 000a 	sub.w	r0, r0, sl
   13a80:	fa03 f000 	lsl.w	r0, r3, r0
   13a84:	9b04      	ldr	r3, [sp, #16]
   13a86:	4303      	orrs	r3, r0
   13a88:	3401      	adds	r4, #1
   13a8a:	9304      	str	r3, [sp, #16]
   13a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
   13a90:	482c      	ldr	r0, [pc, #176]	; (13b44 <_vfiprintf_r+0x250>)
   13a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   13a96:	2206      	movs	r2, #6
   13a98:	f7ec fb32 	bl	100 <memchr>
   13a9c:	2800      	cmp	r0, #0
   13a9e:	d03f      	beq.n	13b20 <_vfiprintf_r+0x22c>
   13aa0:	4b29      	ldr	r3, [pc, #164]	; (13b48 <_vfiprintf_r+0x254>)
   13aa2:	bb1b      	cbnz	r3, 13aec <_vfiprintf_r+0x1f8>
   13aa4:	9b03      	ldr	r3, [sp, #12]
   13aa6:	3307      	adds	r3, #7
   13aa8:	f023 0307 	bic.w	r3, r3, #7
   13aac:	3308      	adds	r3, #8
   13aae:	9303      	str	r3, [sp, #12]
   13ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ab2:	443b      	add	r3, r7
   13ab4:	9309      	str	r3, [sp, #36]	; 0x24
   13ab6:	e767      	b.n	13988 <_vfiprintf_r+0x94>
   13ab8:	fb0c 3202 	mla	r2, ip, r2, r3
   13abc:	460c      	mov	r4, r1
   13abe:	2001      	movs	r0, #1
   13ac0:	e7a5      	b.n	13a0e <_vfiprintf_r+0x11a>
   13ac2:	2300      	movs	r3, #0
   13ac4:	3401      	adds	r4, #1
   13ac6:	9305      	str	r3, [sp, #20]
   13ac8:	4619      	mov	r1, r3
   13aca:	f04f 0c0a 	mov.w	ip, #10
   13ace:	4620      	mov	r0, r4
   13ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
   13ad4:	3a30      	subs	r2, #48	; 0x30
   13ad6:	2a09      	cmp	r2, #9
   13ad8:	d903      	bls.n	13ae2 <_vfiprintf_r+0x1ee>
   13ada:	2b00      	cmp	r3, #0
   13adc:	d0c5      	beq.n	13a6a <_vfiprintf_r+0x176>
   13ade:	9105      	str	r1, [sp, #20]
   13ae0:	e7c3      	b.n	13a6a <_vfiprintf_r+0x176>
   13ae2:	fb0c 2101 	mla	r1, ip, r1, r2
   13ae6:	4604      	mov	r4, r0
   13ae8:	2301      	movs	r3, #1
   13aea:	e7f0      	b.n	13ace <_vfiprintf_r+0x1da>
   13aec:	ab03      	add	r3, sp, #12
   13aee:	9300      	str	r3, [sp, #0]
   13af0:	462a      	mov	r2, r5
   13af2:	4b16      	ldr	r3, [pc, #88]	; (13b4c <_vfiprintf_r+0x258>)
   13af4:	a904      	add	r1, sp, #16
   13af6:	4630      	mov	r0, r6
   13af8:	f3af 8000 	nop.w
   13afc:	4607      	mov	r7, r0
   13afe:	1c78      	adds	r0, r7, #1
   13b00:	d1d6      	bne.n	13ab0 <_vfiprintf_r+0x1bc>
   13b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13b04:	07d9      	lsls	r1, r3, #31
   13b06:	d405      	bmi.n	13b14 <_vfiprintf_r+0x220>
   13b08:	89ab      	ldrh	r3, [r5, #12]
   13b0a:	059a      	lsls	r2, r3, #22
   13b0c:	d402      	bmi.n	13b14 <_vfiprintf_r+0x220>
   13b0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13b10:	f00a feae 	bl	1e870 <__retarget_lock_release_recursive>
   13b14:	89ab      	ldrh	r3, [r5, #12]
   13b16:	065b      	lsls	r3, r3, #25
   13b18:	f53f af12 	bmi.w	13940 <_vfiprintf_r+0x4c>
   13b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b1e:	e711      	b.n	13944 <_vfiprintf_r+0x50>
   13b20:	ab03      	add	r3, sp, #12
   13b22:	9300      	str	r3, [sp, #0]
   13b24:	462a      	mov	r2, r5
   13b26:	4b09      	ldr	r3, [pc, #36]	; (13b4c <_vfiprintf_r+0x258>)
   13b28:	a904      	add	r1, sp, #16
   13b2a:	4630      	mov	r0, r6
   13b2c:	f000 f812 	bl	13b54 <_printf_i>
   13b30:	e7e4      	b.n	13afc <_vfiprintf_r+0x208>
   13b32:	bf00      	nop
   13b34:	000291f8 	.word	0x000291f8
   13b38:	00029218 	.word	0x00029218
   13b3c:	000291d8 	.word	0x000291d8
   13b40:	0002c902 	.word	0x0002c902
   13b44:	0002c90c 	.word	0x0002c90c
   13b48:	00000000 	.word	0x00000000
   13b4c:	0001e657 	.word	0x0001e657
   13b50:	0002c908 	.word	0x0002c908

00013b54 <_printf_i>:
   13b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13b58:	460c      	mov	r4, r1
   13b5a:	4691      	mov	r9, r2
   13b5c:	7e27      	ldrb	r7, [r4, #24]
   13b5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   13b60:	2f78      	cmp	r7, #120	; 0x78
   13b62:	4680      	mov	r8, r0
   13b64:	469a      	mov	sl, r3
   13b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13b6a:	d807      	bhi.n	13b7c <_printf_i+0x28>
   13b6c:	2f62      	cmp	r7, #98	; 0x62
   13b6e:	d80a      	bhi.n	13b86 <_printf_i+0x32>
   13b70:	2f00      	cmp	r7, #0
   13b72:	f000 80d8 	beq.w	13d26 <_printf_i+0x1d2>
   13b76:	2f58      	cmp	r7, #88	; 0x58
   13b78:	f000 80a3 	beq.w	13cc2 <_printf_i+0x16e>
   13b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   13b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   13b84:	e03a      	b.n	13bfc <_printf_i+0xa8>
   13b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   13b8a:	2b15      	cmp	r3, #21
   13b8c:	d8f6      	bhi.n	13b7c <_printf_i+0x28>
   13b8e:	a001      	add	r0, pc, #4	; (adr r0, 13b94 <_printf_i+0x40>)
   13b90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13b94:	00013bed 	.word	0x00013bed
   13b98:	00013c01 	.word	0x00013c01
   13b9c:	00013b7d 	.word	0x00013b7d
   13ba0:	00013b7d 	.word	0x00013b7d
   13ba4:	00013b7d 	.word	0x00013b7d
   13ba8:	00013b7d 	.word	0x00013b7d
   13bac:	00013c01 	.word	0x00013c01
   13bb0:	00013b7d 	.word	0x00013b7d
   13bb4:	00013b7d 	.word	0x00013b7d
   13bb8:	00013b7d 	.word	0x00013b7d
   13bbc:	00013b7d 	.word	0x00013b7d
   13bc0:	00013d0d 	.word	0x00013d0d
   13bc4:	00013c31 	.word	0x00013c31
   13bc8:	00013cef 	.word	0x00013cef
   13bcc:	00013b7d 	.word	0x00013b7d
   13bd0:	00013b7d 	.word	0x00013b7d
   13bd4:	00013d2f 	.word	0x00013d2f
   13bd8:	00013b7d 	.word	0x00013b7d
   13bdc:	00013c31 	.word	0x00013c31
   13be0:	00013b7d 	.word	0x00013b7d
   13be4:	00013b7d 	.word	0x00013b7d
   13be8:	00013cf7 	.word	0x00013cf7
   13bec:	680b      	ldr	r3, [r1, #0]
   13bee:	1d1a      	adds	r2, r3, #4
   13bf0:	681b      	ldr	r3, [r3, #0]
   13bf2:	600a      	str	r2, [r1, #0]
   13bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   13bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   13bfc:	2301      	movs	r3, #1
   13bfe:	e0a3      	b.n	13d48 <_printf_i+0x1f4>
   13c00:	6825      	ldr	r5, [r4, #0]
   13c02:	6808      	ldr	r0, [r1, #0]
   13c04:	062e      	lsls	r6, r5, #24
   13c06:	f100 0304 	add.w	r3, r0, #4
   13c0a:	d50a      	bpl.n	13c22 <_printf_i+0xce>
   13c0c:	6805      	ldr	r5, [r0, #0]
   13c0e:	600b      	str	r3, [r1, #0]
   13c10:	2d00      	cmp	r5, #0
   13c12:	da03      	bge.n	13c1c <_printf_i+0xc8>
   13c14:	232d      	movs	r3, #45	; 0x2d
   13c16:	426d      	negs	r5, r5
   13c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   13c1c:	485e      	ldr	r0, [pc, #376]	; (13d98 <_printf_i+0x244>)
   13c1e:	230a      	movs	r3, #10
   13c20:	e019      	b.n	13c56 <_printf_i+0x102>
   13c22:	f015 0f40 	tst.w	r5, #64	; 0x40
   13c26:	6805      	ldr	r5, [r0, #0]
   13c28:	600b      	str	r3, [r1, #0]
   13c2a:	bf18      	it	ne
   13c2c:	b22d      	sxthne	r5, r5
   13c2e:	e7ef      	b.n	13c10 <_printf_i+0xbc>
   13c30:	680b      	ldr	r3, [r1, #0]
   13c32:	6825      	ldr	r5, [r4, #0]
   13c34:	1d18      	adds	r0, r3, #4
   13c36:	6008      	str	r0, [r1, #0]
   13c38:	0628      	lsls	r0, r5, #24
   13c3a:	d501      	bpl.n	13c40 <_printf_i+0xec>
   13c3c:	681d      	ldr	r5, [r3, #0]
   13c3e:	e002      	b.n	13c46 <_printf_i+0xf2>
   13c40:	0669      	lsls	r1, r5, #25
   13c42:	d5fb      	bpl.n	13c3c <_printf_i+0xe8>
   13c44:	881d      	ldrh	r5, [r3, #0]
   13c46:	4854      	ldr	r0, [pc, #336]	; (13d98 <_printf_i+0x244>)
   13c48:	2f6f      	cmp	r7, #111	; 0x6f
   13c4a:	bf0c      	ite	eq
   13c4c:	2308      	moveq	r3, #8
   13c4e:	230a      	movne	r3, #10
   13c50:	2100      	movs	r1, #0
   13c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13c56:	6866      	ldr	r6, [r4, #4]
   13c58:	60a6      	str	r6, [r4, #8]
   13c5a:	2e00      	cmp	r6, #0
   13c5c:	bfa2      	ittt	ge
   13c5e:	6821      	ldrge	r1, [r4, #0]
   13c60:	f021 0104 	bicge.w	r1, r1, #4
   13c64:	6021      	strge	r1, [r4, #0]
   13c66:	b90d      	cbnz	r5, 13c6c <_printf_i+0x118>
   13c68:	2e00      	cmp	r6, #0
   13c6a:	d04d      	beq.n	13d08 <_printf_i+0x1b4>
   13c6c:	4616      	mov	r6, r2
   13c6e:	fbb5 f1f3 	udiv	r1, r5, r3
   13c72:	fb03 5711 	mls	r7, r3, r1, r5
   13c76:	5dc7      	ldrb	r7, [r0, r7]
   13c78:	f806 7d01 	strb.w	r7, [r6, #-1]!
   13c7c:	462f      	mov	r7, r5
   13c7e:	42bb      	cmp	r3, r7
   13c80:	460d      	mov	r5, r1
   13c82:	d9f4      	bls.n	13c6e <_printf_i+0x11a>
   13c84:	2b08      	cmp	r3, #8
   13c86:	d10b      	bne.n	13ca0 <_printf_i+0x14c>
   13c88:	6823      	ldr	r3, [r4, #0]
   13c8a:	07df      	lsls	r7, r3, #31
   13c8c:	d508      	bpl.n	13ca0 <_printf_i+0x14c>
   13c8e:	6923      	ldr	r3, [r4, #16]
   13c90:	6861      	ldr	r1, [r4, #4]
   13c92:	4299      	cmp	r1, r3
   13c94:	bfde      	ittt	le
   13c96:	2330      	movle	r3, #48	; 0x30
   13c98:	f806 3c01 	strble.w	r3, [r6, #-1]
   13c9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   13ca0:	1b92      	subs	r2, r2, r6
   13ca2:	6122      	str	r2, [r4, #16]
   13ca4:	f8cd a000 	str.w	sl, [sp]
   13ca8:	464b      	mov	r3, r9
   13caa:	aa03      	add	r2, sp, #12
   13cac:	4621      	mov	r1, r4
   13cae:	4640      	mov	r0, r8
   13cb0:	f00a fce3 	bl	1e67a <_printf_common>
   13cb4:	3001      	adds	r0, #1
   13cb6:	d14c      	bne.n	13d52 <_printf_i+0x1fe>
   13cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13cbc:	b004      	add	sp, #16
   13cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13cc2:	4835      	ldr	r0, [pc, #212]	; (13d98 <_printf_i+0x244>)
   13cc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   13cc8:	6823      	ldr	r3, [r4, #0]
   13cca:	680e      	ldr	r6, [r1, #0]
   13ccc:	061f      	lsls	r7, r3, #24
   13cce:	f856 5b04 	ldr.w	r5, [r6], #4
   13cd2:	600e      	str	r6, [r1, #0]
   13cd4:	d514      	bpl.n	13d00 <_printf_i+0x1ac>
   13cd6:	07d9      	lsls	r1, r3, #31
   13cd8:	bf44      	itt	mi
   13cda:	f043 0320 	orrmi.w	r3, r3, #32
   13cde:	6023      	strmi	r3, [r4, #0]
   13ce0:	b91d      	cbnz	r5, 13cea <_printf_i+0x196>
   13ce2:	6823      	ldr	r3, [r4, #0]
   13ce4:	f023 0320 	bic.w	r3, r3, #32
   13ce8:	6023      	str	r3, [r4, #0]
   13cea:	2310      	movs	r3, #16
   13cec:	e7b0      	b.n	13c50 <_printf_i+0xfc>
   13cee:	6823      	ldr	r3, [r4, #0]
   13cf0:	f043 0320 	orr.w	r3, r3, #32
   13cf4:	6023      	str	r3, [r4, #0]
   13cf6:	2378      	movs	r3, #120	; 0x78
   13cf8:	4828      	ldr	r0, [pc, #160]	; (13d9c <_printf_i+0x248>)
   13cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   13cfe:	e7e3      	b.n	13cc8 <_printf_i+0x174>
   13d00:	065e      	lsls	r6, r3, #25
   13d02:	bf48      	it	mi
   13d04:	b2ad      	uxthmi	r5, r5
   13d06:	e7e6      	b.n	13cd6 <_printf_i+0x182>
   13d08:	4616      	mov	r6, r2
   13d0a:	e7bb      	b.n	13c84 <_printf_i+0x130>
   13d0c:	680b      	ldr	r3, [r1, #0]
   13d0e:	6826      	ldr	r6, [r4, #0]
   13d10:	6960      	ldr	r0, [r4, #20]
   13d12:	1d1d      	adds	r5, r3, #4
   13d14:	600d      	str	r5, [r1, #0]
   13d16:	0635      	lsls	r5, r6, #24
   13d18:	681b      	ldr	r3, [r3, #0]
   13d1a:	d501      	bpl.n	13d20 <_printf_i+0x1cc>
   13d1c:	6018      	str	r0, [r3, #0]
   13d1e:	e002      	b.n	13d26 <_printf_i+0x1d2>
   13d20:	0671      	lsls	r1, r6, #25
   13d22:	d5fb      	bpl.n	13d1c <_printf_i+0x1c8>
   13d24:	8018      	strh	r0, [r3, #0]
   13d26:	2300      	movs	r3, #0
   13d28:	6123      	str	r3, [r4, #16]
   13d2a:	4616      	mov	r6, r2
   13d2c:	e7ba      	b.n	13ca4 <_printf_i+0x150>
   13d2e:	680b      	ldr	r3, [r1, #0]
   13d30:	1d1a      	adds	r2, r3, #4
   13d32:	600a      	str	r2, [r1, #0]
   13d34:	681e      	ldr	r6, [r3, #0]
   13d36:	6862      	ldr	r2, [r4, #4]
   13d38:	2100      	movs	r1, #0
   13d3a:	4630      	mov	r0, r6
   13d3c:	f7ec f9e0 	bl	100 <memchr>
   13d40:	b108      	cbz	r0, 13d46 <_printf_i+0x1f2>
   13d42:	1b80      	subs	r0, r0, r6
   13d44:	6060      	str	r0, [r4, #4]
   13d46:	6863      	ldr	r3, [r4, #4]
   13d48:	6123      	str	r3, [r4, #16]
   13d4a:	2300      	movs	r3, #0
   13d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   13d50:	e7a8      	b.n	13ca4 <_printf_i+0x150>
   13d52:	6923      	ldr	r3, [r4, #16]
   13d54:	4632      	mov	r2, r6
   13d56:	4649      	mov	r1, r9
   13d58:	4640      	mov	r0, r8
   13d5a:	47d0      	blx	sl
   13d5c:	3001      	adds	r0, #1
   13d5e:	d0ab      	beq.n	13cb8 <_printf_i+0x164>
   13d60:	6823      	ldr	r3, [r4, #0]
   13d62:	079b      	lsls	r3, r3, #30
   13d64:	d413      	bmi.n	13d8e <_printf_i+0x23a>
   13d66:	68e0      	ldr	r0, [r4, #12]
   13d68:	9b03      	ldr	r3, [sp, #12]
   13d6a:	4298      	cmp	r0, r3
   13d6c:	bfb8      	it	lt
   13d6e:	4618      	movlt	r0, r3
   13d70:	e7a4      	b.n	13cbc <_printf_i+0x168>
   13d72:	2301      	movs	r3, #1
   13d74:	4632      	mov	r2, r6
   13d76:	4649      	mov	r1, r9
   13d78:	4640      	mov	r0, r8
   13d7a:	47d0      	blx	sl
   13d7c:	3001      	adds	r0, #1
   13d7e:	d09b      	beq.n	13cb8 <_printf_i+0x164>
   13d80:	3501      	adds	r5, #1
   13d82:	68e3      	ldr	r3, [r4, #12]
   13d84:	9903      	ldr	r1, [sp, #12]
   13d86:	1a5b      	subs	r3, r3, r1
   13d88:	42ab      	cmp	r3, r5
   13d8a:	dcf2      	bgt.n	13d72 <_printf_i+0x21e>
   13d8c:	e7eb      	b.n	13d66 <_printf_i+0x212>
   13d8e:	2500      	movs	r5, #0
   13d90:	f104 0619 	add.w	r6, r4, #25
   13d94:	e7f5      	b.n	13d82 <_printf_i+0x22e>
   13d96:	bf00      	nop
   13d98:	0002c913 	.word	0x0002c913
   13d9c:	0002c924 	.word	0x0002c924

00013da0 <realloc>:
   13da0:	4b02      	ldr	r3, [pc, #8]	; (13dac <realloc+0xc>)
   13da2:	460a      	mov	r2, r1
   13da4:	4601      	mov	r1, r0
   13da6:	6818      	ldr	r0, [r3, #0]
   13da8:	f00a bd87 	b.w	1e8ba <_realloc_r>
   13dac:	20000728 	.word	0x20000728

00013db0 <_sbrk_r>:
   13db0:	b538      	push	{r3, r4, r5, lr}
   13db2:	4d06      	ldr	r5, [pc, #24]	; (13dcc <_sbrk_r+0x1c>)
   13db4:	2300      	movs	r3, #0
   13db6:	4604      	mov	r4, r0
   13db8:	4608      	mov	r0, r1
   13dba:	602b      	str	r3, [r5, #0]
   13dbc:	f7ef fd0e 	bl	37dc <_sbrk>
   13dc0:	1c43      	adds	r3, r0, #1
   13dc2:	d102      	bne.n	13dca <_sbrk_r+0x1a>
   13dc4:	682b      	ldr	r3, [r5, #0]
   13dc6:	b103      	cbz	r3, 13dca <_sbrk_r+0x1a>
   13dc8:	6023      	str	r3, [r4, #0]
   13dca:	bd38      	pop	{r3, r4, r5, pc}
   13dcc:	200110ec 	.word	0x200110ec

00013dd0 <raise>:
   13dd0:	4b02      	ldr	r3, [pc, #8]	; (13ddc <raise+0xc>)
   13dd2:	4601      	mov	r1, r0
   13dd4:	6818      	ldr	r0, [r3, #0]
   13dd6:	f00a bcbd 	b.w	1e754 <_raise_r>
   13dda:	bf00      	nop
   13ddc:	20000728 	.word	0x20000728

00013de0 <_kill_r>:
   13de0:	b538      	push	{r3, r4, r5, lr}
   13de2:	4d07      	ldr	r5, [pc, #28]	; (13e00 <_kill_r+0x20>)
   13de4:	2300      	movs	r3, #0
   13de6:	4604      	mov	r4, r0
   13de8:	4608      	mov	r0, r1
   13dea:	4611      	mov	r1, r2
   13dec:	602b      	str	r3, [r5, #0]
   13dee:	f001 f876 	bl	14ede <_kill>
   13df2:	1c43      	adds	r3, r0, #1
   13df4:	d102      	bne.n	13dfc <_kill_r+0x1c>
   13df6:	682b      	ldr	r3, [r5, #0]
   13df8:	b103      	cbz	r3, 13dfc <_kill_r+0x1c>
   13dfa:	6023      	str	r3, [r4, #0]
   13dfc:	bd38      	pop	{r3, r4, r5, pc}
   13dfe:	bf00      	nop
   13e00:	200110ec 	.word	0x200110ec

00013e04 <__swbuf_r>:
   13e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e06:	460e      	mov	r6, r1
   13e08:	4614      	mov	r4, r2
   13e0a:	4605      	mov	r5, r0
   13e0c:	b118      	cbz	r0, 13e16 <__swbuf_r+0x12>
   13e0e:	6983      	ldr	r3, [r0, #24]
   13e10:	b90b      	cbnz	r3, 13e16 <__swbuf_r+0x12>
   13e12:	f000 f9bb 	bl	1418c <__sinit>
   13e16:	4b21      	ldr	r3, [pc, #132]	; (13e9c <__swbuf_r+0x98>)
   13e18:	429c      	cmp	r4, r3
   13e1a:	d12b      	bne.n	13e74 <__swbuf_r+0x70>
   13e1c:	686c      	ldr	r4, [r5, #4]
   13e1e:	69a3      	ldr	r3, [r4, #24]
   13e20:	60a3      	str	r3, [r4, #8]
   13e22:	89a3      	ldrh	r3, [r4, #12]
   13e24:	071a      	lsls	r2, r3, #28
   13e26:	d52f      	bpl.n	13e88 <__swbuf_r+0x84>
   13e28:	6923      	ldr	r3, [r4, #16]
   13e2a:	b36b      	cbz	r3, 13e88 <__swbuf_r+0x84>
   13e2c:	6923      	ldr	r3, [r4, #16]
   13e2e:	6820      	ldr	r0, [r4, #0]
   13e30:	1ac0      	subs	r0, r0, r3
   13e32:	6963      	ldr	r3, [r4, #20]
   13e34:	b2f6      	uxtb	r6, r6
   13e36:	4283      	cmp	r3, r0
   13e38:	4637      	mov	r7, r6
   13e3a:	dc04      	bgt.n	13e46 <__swbuf_r+0x42>
   13e3c:	4621      	mov	r1, r4
   13e3e:	4628      	mov	r0, r5
   13e40:	f000 f926 	bl	14090 <_fflush_r>
   13e44:	bb30      	cbnz	r0, 13e94 <__swbuf_r+0x90>
   13e46:	68a3      	ldr	r3, [r4, #8]
   13e48:	3b01      	subs	r3, #1
   13e4a:	60a3      	str	r3, [r4, #8]
   13e4c:	6823      	ldr	r3, [r4, #0]
   13e4e:	1c5a      	adds	r2, r3, #1
   13e50:	6022      	str	r2, [r4, #0]
   13e52:	701e      	strb	r6, [r3, #0]
   13e54:	6963      	ldr	r3, [r4, #20]
   13e56:	3001      	adds	r0, #1
   13e58:	4283      	cmp	r3, r0
   13e5a:	d004      	beq.n	13e66 <__swbuf_r+0x62>
   13e5c:	89a3      	ldrh	r3, [r4, #12]
   13e5e:	07db      	lsls	r3, r3, #31
   13e60:	d506      	bpl.n	13e70 <__swbuf_r+0x6c>
   13e62:	2e0a      	cmp	r6, #10
   13e64:	d104      	bne.n	13e70 <__swbuf_r+0x6c>
   13e66:	4621      	mov	r1, r4
   13e68:	4628      	mov	r0, r5
   13e6a:	f000 f911 	bl	14090 <_fflush_r>
   13e6e:	b988      	cbnz	r0, 13e94 <__swbuf_r+0x90>
   13e70:	4638      	mov	r0, r7
   13e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e74:	4b0a      	ldr	r3, [pc, #40]	; (13ea0 <__swbuf_r+0x9c>)
   13e76:	429c      	cmp	r4, r3
   13e78:	d101      	bne.n	13e7e <__swbuf_r+0x7a>
   13e7a:	68ac      	ldr	r4, [r5, #8]
   13e7c:	e7cf      	b.n	13e1e <__swbuf_r+0x1a>
   13e7e:	4b09      	ldr	r3, [pc, #36]	; (13ea4 <__swbuf_r+0xa0>)
   13e80:	429c      	cmp	r4, r3
   13e82:	bf08      	it	eq
   13e84:	68ec      	ldreq	r4, [r5, #12]
   13e86:	e7ca      	b.n	13e1e <__swbuf_r+0x1a>
   13e88:	4621      	mov	r1, r4
   13e8a:	4628      	mov	r0, r5
   13e8c:	f000 f80c 	bl	13ea8 <__swsetup_r>
   13e90:	2800      	cmp	r0, #0
   13e92:	d0cb      	beq.n	13e2c <__swbuf_r+0x28>
   13e94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13e98:	e7ea      	b.n	13e70 <__swbuf_r+0x6c>
   13e9a:	bf00      	nop
   13e9c:	000291f8 	.word	0x000291f8
   13ea0:	00029218 	.word	0x00029218
   13ea4:	000291d8 	.word	0x000291d8

00013ea8 <__swsetup_r>:
   13ea8:	4b32      	ldr	r3, [pc, #200]	; (13f74 <__swsetup_r+0xcc>)
   13eaa:	b570      	push	{r4, r5, r6, lr}
   13eac:	681d      	ldr	r5, [r3, #0]
   13eae:	4606      	mov	r6, r0
   13eb0:	460c      	mov	r4, r1
   13eb2:	b125      	cbz	r5, 13ebe <__swsetup_r+0x16>
   13eb4:	69ab      	ldr	r3, [r5, #24]
   13eb6:	b913      	cbnz	r3, 13ebe <__swsetup_r+0x16>
   13eb8:	4628      	mov	r0, r5
   13eba:	f000 f967 	bl	1418c <__sinit>
   13ebe:	4b2e      	ldr	r3, [pc, #184]	; (13f78 <__swsetup_r+0xd0>)
   13ec0:	429c      	cmp	r4, r3
   13ec2:	d10f      	bne.n	13ee4 <__swsetup_r+0x3c>
   13ec4:	686c      	ldr	r4, [r5, #4]
   13ec6:	89a3      	ldrh	r3, [r4, #12]
   13ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13ecc:	0719      	lsls	r1, r3, #28
   13ece:	d42c      	bmi.n	13f2a <__swsetup_r+0x82>
   13ed0:	06dd      	lsls	r5, r3, #27
   13ed2:	d411      	bmi.n	13ef8 <__swsetup_r+0x50>
   13ed4:	2309      	movs	r3, #9
   13ed6:	6033      	str	r3, [r6, #0]
   13ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   13edc:	81a3      	strh	r3, [r4, #12]
   13ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ee2:	e03e      	b.n	13f62 <__swsetup_r+0xba>
   13ee4:	4b25      	ldr	r3, [pc, #148]	; (13f7c <__swsetup_r+0xd4>)
   13ee6:	429c      	cmp	r4, r3
   13ee8:	d101      	bne.n	13eee <__swsetup_r+0x46>
   13eea:	68ac      	ldr	r4, [r5, #8]
   13eec:	e7eb      	b.n	13ec6 <__swsetup_r+0x1e>
   13eee:	4b24      	ldr	r3, [pc, #144]	; (13f80 <__swsetup_r+0xd8>)
   13ef0:	429c      	cmp	r4, r3
   13ef2:	bf08      	it	eq
   13ef4:	68ec      	ldreq	r4, [r5, #12]
   13ef6:	e7e6      	b.n	13ec6 <__swsetup_r+0x1e>
   13ef8:	0758      	lsls	r0, r3, #29
   13efa:	d512      	bpl.n	13f22 <__swsetup_r+0x7a>
   13efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13efe:	b141      	cbz	r1, 13f12 <__swsetup_r+0x6a>
   13f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13f04:	4299      	cmp	r1, r3
   13f06:	d002      	beq.n	13f0e <__swsetup_r+0x66>
   13f08:	4630      	mov	r0, r6
   13f0a:	f7ff fc49 	bl	137a0 <_free_r>
   13f0e:	2300      	movs	r3, #0
   13f10:	6363      	str	r3, [r4, #52]	; 0x34
   13f12:	89a3      	ldrh	r3, [r4, #12]
   13f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13f18:	81a3      	strh	r3, [r4, #12]
   13f1a:	2300      	movs	r3, #0
   13f1c:	6063      	str	r3, [r4, #4]
   13f1e:	6923      	ldr	r3, [r4, #16]
   13f20:	6023      	str	r3, [r4, #0]
   13f22:	89a3      	ldrh	r3, [r4, #12]
   13f24:	f043 0308 	orr.w	r3, r3, #8
   13f28:	81a3      	strh	r3, [r4, #12]
   13f2a:	6923      	ldr	r3, [r4, #16]
   13f2c:	b94b      	cbnz	r3, 13f42 <__swsetup_r+0x9a>
   13f2e:	89a3      	ldrh	r3, [r4, #12]
   13f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
   13f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13f38:	d003      	beq.n	13f42 <__swsetup_r+0x9a>
   13f3a:	4621      	mov	r1, r4
   13f3c:	4630      	mov	r0, r6
   13f3e:	f000 f9a3 	bl	14288 <__smakebuf_r>
   13f42:	89a0      	ldrh	r0, [r4, #12]
   13f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13f48:	f010 0301 	ands.w	r3, r0, #1
   13f4c:	d00a      	beq.n	13f64 <__swsetup_r+0xbc>
   13f4e:	2300      	movs	r3, #0
   13f50:	60a3      	str	r3, [r4, #8]
   13f52:	6963      	ldr	r3, [r4, #20]
   13f54:	425b      	negs	r3, r3
   13f56:	61a3      	str	r3, [r4, #24]
   13f58:	6923      	ldr	r3, [r4, #16]
   13f5a:	b943      	cbnz	r3, 13f6e <__swsetup_r+0xc6>
   13f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   13f60:	d1ba      	bne.n	13ed8 <__swsetup_r+0x30>
   13f62:	bd70      	pop	{r4, r5, r6, pc}
   13f64:	0781      	lsls	r1, r0, #30
   13f66:	bf58      	it	pl
   13f68:	6963      	ldrpl	r3, [r4, #20]
   13f6a:	60a3      	str	r3, [r4, #8]
   13f6c:	e7f4      	b.n	13f58 <__swsetup_r+0xb0>
   13f6e:	2000      	movs	r0, #0
   13f70:	e7f7      	b.n	13f62 <__swsetup_r+0xba>
   13f72:	bf00      	nop
   13f74:	20000728 	.word	0x20000728
   13f78:	000291f8 	.word	0x000291f8
   13f7c:	00029218 	.word	0x00029218
   13f80:	000291d8 	.word	0x000291d8

00013f84 <__sflush_r>:
   13f84:	898a      	ldrh	r2, [r1, #12]
   13f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f8a:	4605      	mov	r5, r0
   13f8c:	0710      	lsls	r0, r2, #28
   13f8e:	460c      	mov	r4, r1
   13f90:	d458      	bmi.n	14044 <__sflush_r+0xc0>
   13f92:	684b      	ldr	r3, [r1, #4]
   13f94:	2b00      	cmp	r3, #0
   13f96:	dc05      	bgt.n	13fa4 <__sflush_r+0x20>
   13f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	dc02      	bgt.n	13fa4 <__sflush_r+0x20>
   13f9e:	2000      	movs	r0, #0
   13fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13fa6:	2e00      	cmp	r6, #0
   13fa8:	d0f9      	beq.n	13f9e <__sflush_r+0x1a>
   13faa:	2300      	movs	r3, #0
   13fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   13fb0:	682f      	ldr	r7, [r5, #0]
   13fb2:	602b      	str	r3, [r5, #0]
   13fb4:	d032      	beq.n	1401c <__sflush_r+0x98>
   13fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13fb8:	89a3      	ldrh	r3, [r4, #12]
   13fba:	075a      	lsls	r2, r3, #29
   13fbc:	d505      	bpl.n	13fca <__sflush_r+0x46>
   13fbe:	6863      	ldr	r3, [r4, #4]
   13fc0:	1ac0      	subs	r0, r0, r3
   13fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13fc4:	b10b      	cbz	r3, 13fca <__sflush_r+0x46>
   13fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13fc8:	1ac0      	subs	r0, r0, r3
   13fca:	2300      	movs	r3, #0
   13fcc:	4602      	mov	r2, r0
   13fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13fd0:	6a21      	ldr	r1, [r4, #32]
   13fd2:	4628      	mov	r0, r5
   13fd4:	47b0      	blx	r6
   13fd6:	1c43      	adds	r3, r0, #1
   13fd8:	89a3      	ldrh	r3, [r4, #12]
   13fda:	d106      	bne.n	13fea <__sflush_r+0x66>
   13fdc:	6829      	ldr	r1, [r5, #0]
   13fde:	291d      	cmp	r1, #29
   13fe0:	d82c      	bhi.n	1403c <__sflush_r+0xb8>
   13fe2:	4a2a      	ldr	r2, [pc, #168]	; (1408c <__sflush_r+0x108>)
   13fe4:	40ca      	lsrs	r2, r1
   13fe6:	07d6      	lsls	r6, r2, #31
   13fe8:	d528      	bpl.n	1403c <__sflush_r+0xb8>
   13fea:	2200      	movs	r2, #0
   13fec:	6062      	str	r2, [r4, #4]
   13fee:	04d9      	lsls	r1, r3, #19
   13ff0:	6922      	ldr	r2, [r4, #16]
   13ff2:	6022      	str	r2, [r4, #0]
   13ff4:	d504      	bpl.n	14000 <__sflush_r+0x7c>
   13ff6:	1c42      	adds	r2, r0, #1
   13ff8:	d101      	bne.n	13ffe <__sflush_r+0x7a>
   13ffa:	682b      	ldr	r3, [r5, #0]
   13ffc:	b903      	cbnz	r3, 14000 <__sflush_r+0x7c>
   13ffe:	6560      	str	r0, [r4, #84]	; 0x54
   14000:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14002:	602f      	str	r7, [r5, #0]
   14004:	2900      	cmp	r1, #0
   14006:	d0ca      	beq.n	13f9e <__sflush_r+0x1a>
   14008:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1400c:	4299      	cmp	r1, r3
   1400e:	d002      	beq.n	14016 <__sflush_r+0x92>
   14010:	4628      	mov	r0, r5
   14012:	f7ff fbc5 	bl	137a0 <_free_r>
   14016:	2000      	movs	r0, #0
   14018:	6360      	str	r0, [r4, #52]	; 0x34
   1401a:	e7c1      	b.n	13fa0 <__sflush_r+0x1c>
   1401c:	6a21      	ldr	r1, [r4, #32]
   1401e:	2301      	movs	r3, #1
   14020:	4628      	mov	r0, r5
   14022:	47b0      	blx	r6
   14024:	1c41      	adds	r1, r0, #1
   14026:	d1c7      	bne.n	13fb8 <__sflush_r+0x34>
   14028:	682b      	ldr	r3, [r5, #0]
   1402a:	2b00      	cmp	r3, #0
   1402c:	d0c4      	beq.n	13fb8 <__sflush_r+0x34>
   1402e:	2b1d      	cmp	r3, #29
   14030:	d001      	beq.n	14036 <__sflush_r+0xb2>
   14032:	2b16      	cmp	r3, #22
   14034:	d101      	bne.n	1403a <__sflush_r+0xb6>
   14036:	602f      	str	r7, [r5, #0]
   14038:	e7b1      	b.n	13f9e <__sflush_r+0x1a>
   1403a:	89a3      	ldrh	r3, [r4, #12]
   1403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14040:	81a3      	strh	r3, [r4, #12]
   14042:	e7ad      	b.n	13fa0 <__sflush_r+0x1c>
   14044:	690f      	ldr	r7, [r1, #16]
   14046:	2f00      	cmp	r7, #0
   14048:	d0a9      	beq.n	13f9e <__sflush_r+0x1a>
   1404a:	0793      	lsls	r3, r2, #30
   1404c:	680e      	ldr	r6, [r1, #0]
   1404e:	bf08      	it	eq
   14050:	694b      	ldreq	r3, [r1, #20]
   14052:	600f      	str	r7, [r1, #0]
   14054:	bf18      	it	ne
   14056:	2300      	movne	r3, #0
   14058:	eba6 0807 	sub.w	r8, r6, r7
   1405c:	608b      	str	r3, [r1, #8]
   1405e:	f1b8 0f00 	cmp.w	r8, #0
   14062:	dd9c      	ble.n	13f9e <__sflush_r+0x1a>
   14064:	6a21      	ldr	r1, [r4, #32]
   14066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14068:	4643      	mov	r3, r8
   1406a:	463a      	mov	r2, r7
   1406c:	4628      	mov	r0, r5
   1406e:	47b0      	blx	r6
   14070:	2800      	cmp	r0, #0
   14072:	dc06      	bgt.n	14082 <__sflush_r+0xfe>
   14074:	89a3      	ldrh	r3, [r4, #12]
   14076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1407a:	81a3      	strh	r3, [r4, #12]
   1407c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14080:	e78e      	b.n	13fa0 <__sflush_r+0x1c>
   14082:	4407      	add	r7, r0
   14084:	eba8 0800 	sub.w	r8, r8, r0
   14088:	e7e9      	b.n	1405e <__sflush_r+0xda>
   1408a:	bf00      	nop
   1408c:	20400001 	.word	0x20400001

00014090 <_fflush_r>:
   14090:	b538      	push	{r3, r4, r5, lr}
   14092:	690b      	ldr	r3, [r1, #16]
   14094:	4605      	mov	r5, r0
   14096:	460c      	mov	r4, r1
   14098:	b913      	cbnz	r3, 140a0 <_fflush_r+0x10>
   1409a:	2500      	movs	r5, #0
   1409c:	4628      	mov	r0, r5
   1409e:	bd38      	pop	{r3, r4, r5, pc}
   140a0:	b118      	cbz	r0, 140aa <_fflush_r+0x1a>
   140a2:	6983      	ldr	r3, [r0, #24]
   140a4:	b90b      	cbnz	r3, 140aa <_fflush_r+0x1a>
   140a6:	f000 f871 	bl	1418c <__sinit>
   140aa:	4b14      	ldr	r3, [pc, #80]	; (140fc <_fflush_r+0x6c>)
   140ac:	429c      	cmp	r4, r3
   140ae:	d11b      	bne.n	140e8 <_fflush_r+0x58>
   140b0:	686c      	ldr	r4, [r5, #4]
   140b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   140b6:	2b00      	cmp	r3, #0
   140b8:	d0ef      	beq.n	1409a <_fflush_r+0xa>
   140ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
   140bc:	07d0      	lsls	r0, r2, #31
   140be:	d404      	bmi.n	140ca <_fflush_r+0x3a>
   140c0:	0599      	lsls	r1, r3, #22
   140c2:	d402      	bmi.n	140ca <_fflush_r+0x3a>
   140c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140c6:	f00a fbd2 	bl	1e86e <__retarget_lock_acquire_recursive>
   140ca:	4628      	mov	r0, r5
   140cc:	4621      	mov	r1, r4
   140ce:	f7ff ff59 	bl	13f84 <__sflush_r>
   140d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   140d4:	07da      	lsls	r2, r3, #31
   140d6:	4605      	mov	r5, r0
   140d8:	d4e0      	bmi.n	1409c <_fflush_r+0xc>
   140da:	89a3      	ldrh	r3, [r4, #12]
   140dc:	059b      	lsls	r3, r3, #22
   140de:	d4dd      	bmi.n	1409c <_fflush_r+0xc>
   140e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140e2:	f00a fbc5 	bl	1e870 <__retarget_lock_release_recursive>
   140e6:	e7d9      	b.n	1409c <_fflush_r+0xc>
   140e8:	4b05      	ldr	r3, [pc, #20]	; (14100 <_fflush_r+0x70>)
   140ea:	429c      	cmp	r4, r3
   140ec:	d101      	bne.n	140f2 <_fflush_r+0x62>
   140ee:	68ac      	ldr	r4, [r5, #8]
   140f0:	e7df      	b.n	140b2 <_fflush_r+0x22>
   140f2:	4b04      	ldr	r3, [pc, #16]	; (14104 <_fflush_r+0x74>)
   140f4:	429c      	cmp	r4, r3
   140f6:	bf08      	it	eq
   140f8:	68ec      	ldreq	r4, [r5, #12]
   140fa:	e7da      	b.n	140b2 <_fflush_r+0x22>
   140fc:	000291f8 	.word	0x000291f8
   14100:	00029218 	.word	0x00029218
   14104:	000291d8 	.word	0x000291d8

00014108 <std>:
   14108:	2300      	movs	r3, #0
   1410a:	b510      	push	{r4, lr}
   1410c:	4604      	mov	r4, r0
   1410e:	e9c0 3300 	strd	r3, r3, [r0]
   14112:	e9c0 3304 	strd	r3, r3, [r0, #16]
   14116:	6083      	str	r3, [r0, #8]
   14118:	8181      	strh	r1, [r0, #12]
   1411a:	6643      	str	r3, [r0, #100]	; 0x64
   1411c:	81c2      	strh	r2, [r0, #14]
   1411e:	6183      	str	r3, [r0, #24]
   14120:	4619      	mov	r1, r3
   14122:	2208      	movs	r2, #8
   14124:	305c      	adds	r0, #92	; 0x5c
   14126:	f00a fa77 	bl	1e618 <memset>
   1412a:	4b05      	ldr	r3, [pc, #20]	; (14140 <std+0x38>)
   1412c:	6263      	str	r3, [r4, #36]	; 0x24
   1412e:	4b05      	ldr	r3, [pc, #20]	; (14144 <std+0x3c>)
   14130:	62a3      	str	r3, [r4, #40]	; 0x28
   14132:	4b05      	ldr	r3, [pc, #20]	; (14148 <std+0x40>)
   14134:	62e3      	str	r3, [r4, #44]	; 0x2c
   14136:	4b05      	ldr	r3, [pc, #20]	; (1414c <std+0x44>)
   14138:	6224      	str	r4, [r4, #32]
   1413a:	6323      	str	r3, [r4, #48]	; 0x30
   1413c:	bd10      	pop	{r4, pc}
   1413e:	bf00      	nop
   14140:	0001e907 	.word	0x0001e907
   14144:	0001e929 	.word	0x0001e929
   14148:	0001e961 	.word	0x0001e961
   1414c:	0001e985 	.word	0x0001e985

00014150 <_cleanup_r>:
   14150:	4901      	ldr	r1, [pc, #4]	; (14158 <_cleanup_r+0x8>)
   14152:	f00a bb6c 	b.w	1e82e <_fwalk_reent>
   14156:	bf00      	nop
   14158:	00014091 	.word	0x00014091

0001415c <__sfp_lock_acquire>:
   1415c:	4801      	ldr	r0, [pc, #4]	; (14164 <__sfp_lock_acquire+0x8>)
   1415e:	f00a bb86 	b.w	1e86e <__retarget_lock_acquire_recursive>
   14162:	bf00      	nop
   14164:	200110f8 	.word	0x200110f8

00014168 <__sfp_lock_release>:
   14168:	4801      	ldr	r0, [pc, #4]	; (14170 <__sfp_lock_release+0x8>)
   1416a:	f00a bb81 	b.w	1e870 <__retarget_lock_release_recursive>
   1416e:	bf00      	nop
   14170:	200110f8 	.word	0x200110f8

00014174 <__sinit_lock_acquire>:
   14174:	4801      	ldr	r0, [pc, #4]	; (1417c <__sinit_lock_acquire+0x8>)
   14176:	f00a bb7a 	b.w	1e86e <__retarget_lock_acquire_recursive>
   1417a:	bf00      	nop
   1417c:	200110f3 	.word	0x200110f3

00014180 <__sinit_lock_release>:
   14180:	4801      	ldr	r0, [pc, #4]	; (14188 <__sinit_lock_release+0x8>)
   14182:	f00a bb75 	b.w	1e870 <__retarget_lock_release_recursive>
   14186:	bf00      	nop
   14188:	200110f3 	.word	0x200110f3

0001418c <__sinit>:
   1418c:	b510      	push	{r4, lr}
   1418e:	4604      	mov	r4, r0
   14190:	f7ff fff0 	bl	14174 <__sinit_lock_acquire>
   14194:	69a3      	ldr	r3, [r4, #24]
   14196:	b11b      	cbz	r3, 141a0 <__sinit+0x14>
   14198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1419c:	f7ff bff0 	b.w	14180 <__sinit_lock_release>
   141a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   141a4:	6523      	str	r3, [r4, #80]	; 0x50
   141a6:	4b13      	ldr	r3, [pc, #76]	; (141f4 <__sinit+0x68>)
   141a8:	4a13      	ldr	r2, [pc, #76]	; (141f8 <__sinit+0x6c>)
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	62a2      	str	r2, [r4, #40]	; 0x28
   141ae:	42a3      	cmp	r3, r4
   141b0:	bf04      	itt	eq
   141b2:	2301      	moveq	r3, #1
   141b4:	61a3      	streq	r3, [r4, #24]
   141b6:	4620      	mov	r0, r4
   141b8:	f000 f820 	bl	141fc <__sfp>
   141bc:	6060      	str	r0, [r4, #4]
   141be:	4620      	mov	r0, r4
   141c0:	f000 f81c 	bl	141fc <__sfp>
   141c4:	60a0      	str	r0, [r4, #8]
   141c6:	4620      	mov	r0, r4
   141c8:	f000 f818 	bl	141fc <__sfp>
   141cc:	2200      	movs	r2, #0
   141ce:	60e0      	str	r0, [r4, #12]
   141d0:	2104      	movs	r1, #4
   141d2:	6860      	ldr	r0, [r4, #4]
   141d4:	f7ff ff98 	bl	14108 <std>
   141d8:	68a0      	ldr	r0, [r4, #8]
   141da:	2201      	movs	r2, #1
   141dc:	2109      	movs	r1, #9
   141de:	f7ff ff93 	bl	14108 <std>
   141e2:	68e0      	ldr	r0, [r4, #12]
   141e4:	2202      	movs	r2, #2
   141e6:	2112      	movs	r1, #18
   141e8:	f7ff ff8e 	bl	14108 <std>
   141ec:	2301      	movs	r3, #1
   141ee:	61a3      	str	r3, [r4, #24]
   141f0:	e7d2      	b.n	14198 <__sinit+0xc>
   141f2:	bf00      	nop
   141f4:	000291d4 	.word	0x000291d4
   141f8:	00014151 	.word	0x00014151

000141fc <__sfp>:
   141fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141fe:	4607      	mov	r7, r0
   14200:	f7ff ffac 	bl	1415c <__sfp_lock_acquire>
   14204:	4b1e      	ldr	r3, [pc, #120]	; (14280 <__sfp+0x84>)
   14206:	681e      	ldr	r6, [r3, #0]
   14208:	69b3      	ldr	r3, [r6, #24]
   1420a:	b913      	cbnz	r3, 14212 <__sfp+0x16>
   1420c:	4630      	mov	r0, r6
   1420e:	f7ff ffbd 	bl	1418c <__sinit>
   14212:	3648      	adds	r6, #72	; 0x48
   14214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   14218:	3b01      	subs	r3, #1
   1421a:	d503      	bpl.n	14224 <__sfp+0x28>
   1421c:	6833      	ldr	r3, [r6, #0]
   1421e:	b30b      	cbz	r3, 14264 <__sfp+0x68>
   14220:	6836      	ldr	r6, [r6, #0]
   14222:	e7f7      	b.n	14214 <__sfp+0x18>
   14224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   14228:	b9d5      	cbnz	r5, 14260 <__sfp+0x64>
   1422a:	4b16      	ldr	r3, [pc, #88]	; (14284 <__sfp+0x88>)
   1422c:	60e3      	str	r3, [r4, #12]
   1422e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14232:	6665      	str	r5, [r4, #100]	; 0x64
   14234:	f00a fb1a 	bl	1e86c <__retarget_lock_init_recursive>
   14238:	f7ff ff96 	bl	14168 <__sfp_lock_release>
   1423c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   14240:	e9c4 5504 	strd	r5, r5, [r4, #16]
   14244:	6025      	str	r5, [r4, #0]
   14246:	61a5      	str	r5, [r4, #24]
   14248:	2208      	movs	r2, #8
   1424a:	4629      	mov	r1, r5
   1424c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   14250:	f00a f9e2 	bl	1e618 <memset>
   14254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   14258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1425c:	4620      	mov	r0, r4
   1425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14260:	3468      	adds	r4, #104	; 0x68
   14262:	e7d9      	b.n	14218 <__sfp+0x1c>
   14264:	2104      	movs	r1, #4
   14266:	4638      	mov	r0, r7
   14268:	f00a facb 	bl	1e802 <__sfmoreglue>
   1426c:	4604      	mov	r4, r0
   1426e:	6030      	str	r0, [r6, #0]
   14270:	2800      	cmp	r0, #0
   14272:	d1d5      	bne.n	14220 <__sfp+0x24>
   14274:	f7ff ff78 	bl	14168 <__sfp_lock_release>
   14278:	230c      	movs	r3, #12
   1427a:	603b      	str	r3, [r7, #0]
   1427c:	e7ee      	b.n	1425c <__sfp+0x60>
   1427e:	bf00      	nop
   14280:	000291d4 	.word	0x000291d4
   14284:	ffff0001 	.word	0xffff0001

00014288 <__smakebuf_r>:
   14288:	898b      	ldrh	r3, [r1, #12]
   1428a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1428c:	079d      	lsls	r5, r3, #30
   1428e:	4606      	mov	r6, r0
   14290:	460c      	mov	r4, r1
   14292:	d507      	bpl.n	142a4 <__smakebuf_r+0x1c>
   14294:	f104 0347 	add.w	r3, r4, #71	; 0x47
   14298:	6023      	str	r3, [r4, #0]
   1429a:	6123      	str	r3, [r4, #16]
   1429c:	2301      	movs	r3, #1
   1429e:	6163      	str	r3, [r4, #20]
   142a0:	b002      	add	sp, #8
   142a2:	bd70      	pop	{r4, r5, r6, pc}
   142a4:	ab01      	add	r3, sp, #4
   142a6:	466a      	mov	r2, sp
   142a8:	f00a fae3 	bl	1e872 <__swhatbuf_r>
   142ac:	9900      	ldr	r1, [sp, #0]
   142ae:	4605      	mov	r5, r0
   142b0:	4630      	mov	r0, r6
   142b2:	f7ff fac5 	bl	13840 <_malloc_r>
   142b6:	b948      	cbnz	r0, 142cc <__smakebuf_r+0x44>
   142b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   142bc:	059a      	lsls	r2, r3, #22
   142be:	d4ef      	bmi.n	142a0 <__smakebuf_r+0x18>
   142c0:	f023 0303 	bic.w	r3, r3, #3
   142c4:	f043 0302 	orr.w	r3, r3, #2
   142c8:	81a3      	strh	r3, [r4, #12]
   142ca:	e7e3      	b.n	14294 <__smakebuf_r+0xc>
   142cc:	4b0d      	ldr	r3, [pc, #52]	; (14304 <__smakebuf_r+0x7c>)
   142ce:	62b3      	str	r3, [r6, #40]	; 0x28
   142d0:	89a3      	ldrh	r3, [r4, #12]
   142d2:	6020      	str	r0, [r4, #0]
   142d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   142d8:	81a3      	strh	r3, [r4, #12]
   142da:	9b00      	ldr	r3, [sp, #0]
   142dc:	6163      	str	r3, [r4, #20]
   142de:	9b01      	ldr	r3, [sp, #4]
   142e0:	6120      	str	r0, [r4, #16]
   142e2:	b15b      	cbz	r3, 142fc <__smakebuf_r+0x74>
   142e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   142e8:	4630      	mov	r0, r6
   142ea:	f000 f84d 	bl	14388 <_isatty_r>
   142ee:	b128      	cbz	r0, 142fc <__smakebuf_r+0x74>
   142f0:	89a3      	ldrh	r3, [r4, #12]
   142f2:	f023 0303 	bic.w	r3, r3, #3
   142f6:	f043 0301 	orr.w	r3, r3, #1
   142fa:	81a3      	strh	r3, [r4, #12]
   142fc:	89a0      	ldrh	r0, [r4, #12]
   142fe:	4305      	orrs	r5, r0
   14300:	81a5      	strh	r5, [r4, #12]
   14302:	e7cd      	b.n	142a0 <__smakebuf_r+0x18>
   14304:	00014151 	.word	0x00014151

00014308 <__malloc_lock>:
   14308:	4801      	ldr	r0, [pc, #4]	; (14310 <__malloc_lock+0x8>)
   1430a:	f00a bab0 	b.w	1e86e <__retarget_lock_acquire_recursive>
   1430e:	bf00      	nop
   14310:	200110f4 	.word	0x200110f4

00014314 <__malloc_unlock>:
   14314:	4801      	ldr	r0, [pc, #4]	; (1431c <__malloc_unlock+0x8>)
   14316:	f00a baab 	b.w	1e870 <__retarget_lock_release_recursive>
   1431a:	bf00      	nop
   1431c:	200110f4 	.word	0x200110f4

00014320 <_write_r>:
   14320:	b538      	push	{r3, r4, r5, lr}
   14322:	4d07      	ldr	r5, [pc, #28]	; (14340 <_write_r+0x20>)
   14324:	4604      	mov	r4, r0
   14326:	4608      	mov	r0, r1
   14328:	4611      	mov	r1, r2
   1432a:	2200      	movs	r2, #0
   1432c:	602a      	str	r2, [r5, #0]
   1432e:	461a      	mov	r2, r3
   14330:	f000 fdca 	bl	14ec8 <_write>
   14334:	1c43      	adds	r3, r0, #1
   14336:	d102      	bne.n	1433e <_write_r+0x1e>
   14338:	682b      	ldr	r3, [r5, #0]
   1433a:	b103      	cbz	r3, 1433e <_write_r+0x1e>
   1433c:	6023      	str	r3, [r4, #0]
   1433e:	bd38      	pop	{r3, r4, r5, pc}
   14340:	200110ec 	.word	0x200110ec

00014344 <_close_r>:
   14344:	b538      	push	{r3, r4, r5, lr}
   14346:	4d06      	ldr	r5, [pc, #24]	; (14360 <_close_r+0x1c>)
   14348:	2300      	movs	r3, #0
   1434a:	4604      	mov	r4, r0
   1434c:	4608      	mov	r0, r1
   1434e:	602b      	str	r3, [r5, #0]
   14350:	f000 fdbe 	bl	14ed0 <_close>
   14354:	1c43      	adds	r3, r0, #1
   14356:	d102      	bne.n	1435e <_close_r+0x1a>
   14358:	682b      	ldr	r3, [r5, #0]
   1435a:	b103      	cbz	r3, 1435e <_close_r+0x1a>
   1435c:	6023      	str	r3, [r4, #0]
   1435e:	bd38      	pop	{r3, r4, r5, pc}
   14360:	200110ec 	.word	0x200110ec

00014364 <_fstat_r>:
   14364:	b538      	push	{r3, r4, r5, lr}
   14366:	4d07      	ldr	r5, [pc, #28]	; (14384 <_fstat_r+0x20>)
   14368:	2300      	movs	r3, #0
   1436a:	4604      	mov	r4, r0
   1436c:	4608      	mov	r0, r1
   1436e:	4611      	mov	r1, r2
   14370:	602b      	str	r3, [r5, #0]
   14372:	f000 fdb8 	bl	14ee6 <_fstat>
   14376:	1c43      	adds	r3, r0, #1
   14378:	d102      	bne.n	14380 <_fstat_r+0x1c>
   1437a:	682b      	ldr	r3, [r5, #0]
   1437c:	b103      	cbz	r3, 14380 <_fstat_r+0x1c>
   1437e:	6023      	str	r3, [r4, #0]
   14380:	bd38      	pop	{r3, r4, r5, pc}
   14382:	bf00      	nop
   14384:	200110ec 	.word	0x200110ec

00014388 <_isatty_r>:
   14388:	b538      	push	{r3, r4, r5, lr}
   1438a:	4d06      	ldr	r5, [pc, #24]	; (143a4 <_isatty_r+0x1c>)
   1438c:	2300      	movs	r3, #0
   1438e:	4604      	mov	r4, r0
   14390:	4608      	mov	r0, r1
   14392:	602b      	str	r3, [r5, #0]
   14394:	f000 fda1 	bl	14eda <_isatty>
   14398:	1c43      	adds	r3, r0, #1
   1439a:	d102      	bne.n	143a2 <_isatty_r+0x1a>
   1439c:	682b      	ldr	r3, [r5, #0]
   1439e:	b103      	cbz	r3, 143a2 <_isatty_r+0x1a>
   143a0:	6023      	str	r3, [r4, #0]
   143a2:	bd38      	pop	{r3, r4, r5, pc}
   143a4:	200110ec 	.word	0x200110ec

000143a8 <_lseek_r>:
   143a8:	b538      	push	{r3, r4, r5, lr}
   143aa:	4d07      	ldr	r5, [pc, #28]	; (143c8 <_lseek_r+0x20>)
   143ac:	4604      	mov	r4, r0
   143ae:	4608      	mov	r0, r1
   143b0:	4611      	mov	r1, r2
   143b2:	2200      	movs	r2, #0
   143b4:	602a      	str	r2, [r5, #0]
   143b6:	461a      	mov	r2, r3
   143b8:	f000 fd8d 	bl	14ed6 <_lseek>
   143bc:	1c43      	adds	r3, r0, #1
   143be:	d102      	bne.n	143c6 <_lseek_r+0x1e>
   143c0:	682b      	ldr	r3, [r5, #0]
   143c2:	b103      	cbz	r3, 143c6 <_lseek_r+0x1e>
   143c4:	6023      	str	r3, [r4, #0]
   143c6:	bd38      	pop	{r3, r4, r5, pc}
   143c8:	200110ec 	.word	0x200110ec

000143cc <_read_r>:
   143cc:	b538      	push	{r3, r4, r5, lr}
   143ce:	4d07      	ldr	r5, [pc, #28]	; (143ec <_read_r+0x20>)
   143d0:	4604      	mov	r4, r0
   143d2:	4608      	mov	r0, r1
   143d4:	4611      	mov	r1, r2
   143d6:	2200      	movs	r2, #0
   143d8:	602a      	str	r2, [r5, #0]
   143da:	461a      	mov	r2, r3
   143dc:	f000 fd70 	bl	14ec0 <_read>
   143e0:	1c43      	adds	r3, r0, #1
   143e2:	d102      	bne.n	143ea <_read_r+0x1e>
   143e4:	682b      	ldr	r3, [r5, #0]
   143e6:	b103      	cbz	r3, 143ea <_read_r+0x1e>
   143e8:	6023      	str	r3, [r4, #0]
   143ea:	bd38      	pop	{r3, r4, r5, pc}
   143ec:	200110ec 	.word	0x200110ec

000143f0 <main>:

// This is the default main used on systems that have the standard C entry
// point. Other devices (for example FreeRTOS or ESP32) that have different
// requirements for entry code (like an app_main function) should specialize
// this main.cc file in a target-specific subfolder.
int main(int argc, char* argv[]) {
   143f0:	b508      	push	{r3, lr}
  
  setup();
   143f2:	f7ed f92d 	bl	1650 <setup>
  while (true) {
    loop();
   143f6:	f7ed f9d9 	bl	17ac <loop>
  while (true) {
   143fa:	e7fc      	b.n	143f6 <main+0x6>

000143fc <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
   143fc:	4770      	bx	lr

000143fe <_ZN6tflite14AllOpsResolverD1Ev>:
// The magic number in the template parameter is the maximum number of ops that
// can be added to AllOpsResolver. It can be increased if needed. And most
// applications that care about the memory footprint will want to directly use
// MicroMutableOpResolver and have an application specific template parameter.
// The examples directory has sample code for this.
class AllOpsResolver : public MicroMutableOpResolver<128> {
   143fe:	4770      	bx	lr

00014400 <_ZN6tflite18MicroErrorReporterD0Ev>:
   14400:	b510      	push	{r4, lr}
   14402:	4604      	mov	r4, r0
   14404:	f00a f8bf 	bl	1e586 <_ZdlPv>
   14408:	4620      	mov	r0, r4
   1440a:	bd10      	pop	{r4, pc}

0001440c <_ZN6tflite14AllOpsResolverD0Ev>:
   1440c:	b510      	push	{r4, lr}
   1440e:	4604      	mov	r4, r0
   14410:	f00a f8b9 	bl	1e586 <_ZdlPv>
   14414:	4620      	mov	r0, r4
   14416:	bd10      	pop	{r4, pc}

00014418 <__assert_func>:
limitations under the License.
==============================================================================*/

extern "C" {

void __assert_func(const char *, int, const char *, const char *) {}
   14418:	4770      	bx	lr

0001441a <arch_printk_char_out>:
}
   1441a:	2000      	movs	r0, #0
   1441c:	4770      	bx	lr

0001441e <print_err>:
{
   1441e:	b570      	push	{r4, r5, r6, lr}
   14420:	4604      	mov	r4, r0
   14422:	460d      	mov	r5, r1
	out('E', ctx);
   14424:	2045      	movs	r0, #69	; 0x45
   14426:	47a0      	blx	r4
	out('R', ctx);
   14428:	4629      	mov	r1, r5
   1442a:	2052      	movs	r0, #82	; 0x52
   1442c:	47a0      	blx	r4
	out('R', ctx);
   1442e:	4629      	mov	r1, r5
   14430:	4623      	mov	r3, r4
   14432:	2052      	movs	r0, #82	; 0x52
}
   14434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   14438:	4718      	bx	r3

0001443a <str_out>:
{
   1443a:	b530      	push	{r4, r5, lr}
   1443c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1443e:	680c      	ldr	r4, [r1, #0]
   14440:	1c55      	adds	r5, r2, #1
   14442:	b114      	cbz	r4, 1444a <str_out+0x10>
   14444:	684b      	ldr	r3, [r1, #4]
   14446:	4293      	cmp	r3, r2
   14448:	dc01      	bgt.n	1444e <str_out+0x14>
		ctx->count++;
   1444a:	608d      	str	r5, [r1, #8]
}
   1444c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1444e:	3b01      	subs	r3, #1
   14450:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   14452:	bf08      	it	eq
   14454:	2200      	moveq	r2, #0
   14456:	608d      	str	r5, [r1, #8]
   14458:	bf0c      	ite	eq
   1445a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1445c:	54a0      	strbne	r0, [r4, r2]
   1445e:	e7f5      	b.n	1444c <str_out+0x12>

00014460 <printk>:
{
   14460:	b40f      	push	{r0, r1, r2, r3}
   14462:	b507      	push	{r0, r1, r2, lr}
   14464:	a904      	add	r1, sp, #16
   14466:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1446a:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   1446c:	f000 f95c 	bl	14728 <log_printk>
}
   14470:	b003      	add	sp, #12
   14472:	f85d eb04 	ldr.w	lr, [sp], #4
   14476:	b004      	add	sp, #16
   14478:	4770      	bx	lr

0001447a <snprintk>:
{
   1447a:	b40c      	push	{r2, r3}
   1447c:	b507      	push	{r0, r1, r2, lr}
   1447e:	ab04      	add	r3, sp, #16
   14480:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   14484:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   14486:	f7ed fc13 	bl	1cb0 <vsnprintk>
}
   1448a:	b003      	add	sp, #12
   1448c:	f85d eb04 	ldr.w	lr, [sp], #4
   14490:	b002      	add	sp, #8
   14492:	4770      	bx	lr

00014494 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   14494:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   14496:	f7f0 ff5b 	bl	5350 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1449a:	2000      	movs	r0, #0
   1449c:	bd08      	pop	{r3, pc}

0001449e <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   1449e:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   144a0:	f7f0 ff76 	bl	5390 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   144a4:	f110 0f0b 	cmn.w	r0, #11
   144a8:	d005      	beq.n	144b6 <sys_sem_take+0x18>
   144aa:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   144ae:	bf08      	it	eq
   144b0:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   144b4:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   144b6:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   144ba:	e7fb      	b.n	144b4 <sys_sem_take+0x16>

000144bc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   144bc:	4604      	mov	r4, r0
   144be:	b508      	push	{r3, lr}
   144c0:	4608      	mov	r0, r1
   144c2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   144c4:	461a      	mov	r2, r3
   144c6:	47a0      	blx	r4
	return z_impl_k_current_get();
   144c8:	f7f0 ff3c 	bl	5344 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   144cc:	f7ef f860 	bl	3590 <z_impl_k_thread_abort>

000144d0 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   144d0:	6803      	ldr	r3, [r0, #0]
   144d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   144d6:	6883      	ldr	r3, [r0, #8]
   144d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   144dc:	bf2c      	ite	cs
   144de:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   144e2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   144e6:	4770      	bx	lr

000144e8 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   144e8:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   144ea:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   144ec:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   144ee:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   144f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   144f6:	bf2c      	ite	cs
   144f8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   144fc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   14500:	bd10      	pop	{r4, pc}

00014502 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   14502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14506:	2200      	movs	r2, #0
   14508:	4604      	mov	r4, r0
   1450a:	460d      	mov	r5, r1
   1450c:	f7ff ffe0 	bl	144d0 <chunk_field>
   14510:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   14512:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14514:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   14516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1451a:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1451e:	bf34      	ite	cc
   14520:	2000      	movcc	r0, #0
   14522:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   14524:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   14526:	f1c0 001f 	rsb	r0, r0, #31
   1452a:	1a80      	subs	r0, r0, r2
   1452c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   14530:	684a      	ldr	r2, [r1, #4]
   14532:	1c56      	adds	r6, r2, #1
   14534:	604e      	str	r6, [r1, #4]
   14536:	b9a2      	cbnz	r2, 14562 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   14538:	2201      	movs	r2, #1
   1453a:	fa02 f100 	lsl.w	r1, r2, r0
   1453e:	6962      	ldr	r2, [r4, #20]
   14540:	430a      	orrs	r2, r1
   14542:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   14544:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   14546:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   1454a:	2202      	movs	r2, #2
   1454c:	462b      	mov	r3, r5
   1454e:	4620      	mov	r0, r4
   14550:	f7ff ffca 	bl	144e8 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   14554:	2203      	movs	r2, #3
   14556:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   14558:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   1455a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   1455e:	f7ff bfc3 	b.w	144e8 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   14562:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   14566:	2202      	movs	r2, #2
   14568:	4639      	mov	r1, r7
   1456a:	4620      	mov	r0, r4
   1456c:	f7ff ffb0 	bl	144d0 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
   14570:	2202      	movs	r2, #2
   14572:	4603      	mov	r3, r0
   14574:	4606      	mov	r6, r0
   14576:	4629      	mov	r1, r5
   14578:	4620      	mov	r0, r4
   1457a:	f7ff ffb5 	bl	144e8 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   1457e:	463b      	mov	r3, r7
   14580:	2203      	movs	r2, #3
   14582:	4629      	mov	r1, r5
   14584:	4620      	mov	r0, r4
   14586:	f7ff ffaf 	bl	144e8 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   1458a:	2203      	movs	r2, #3
   1458c:	4631      	mov	r1, r6
   1458e:	462b      	mov	r3, r5
   14590:	4620      	mov	r0, r4
   14592:	f7ff ffa9 	bl	144e8 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   14596:	2202      	movs	r2, #2
   14598:	4639      	mov	r1, r7
   1459a:	e7dd      	b.n	14558 <free_list_add+0x56>

0001459c <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   1459e:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   145a0:	1dcc      	adds	r4, r1, #7
   145a2:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   145a6:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   145aa:	1b1b      	subs	r3, r3, r4
   145ac:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   145ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
   145b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   145b6:	bf2c      	ite	cs
   145b8:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   145bc:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   145be:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
   145c0:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   145c2:	60e1      	str	r1, [r4, #12]
   145c4:	bf94      	ite	ls
   145c6:	2100      	movls	r1, #0
   145c8:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   145ca:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   145ce:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   145d2:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   145d6:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   145d8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   145dc:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
   145e0:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   145e2:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   145e4:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   145e6:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   145e8:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   145ea:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   145ec:	4684      	mov	ip, r0
   145ee:	68a2      	ldr	r2, [r4, #8]
   145f0:	42ba      	cmp	r2, r7
   145f2:	bf94      	ite	ls
   145f4:	2200      	movls	r2, #0
   145f6:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   145f8:	f1c2 021f 	rsb	r2, r2, #31
   145fc:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   145fe:	4290      	cmp	r0, r2
   14600:	dd0a      	ble.n	14618 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   14602:	1a5b      	subs	r3, r3, r1
   14604:	4620      	mov	r0, r4
   14606:	2200      	movs	r2, #0
   14608:	f7ff ff6e 	bl	144e8 <chunk_set>
	free_list_add(h, h->chunk0);
   1460c:	6921      	ldr	r1, [r4, #16]
   1460e:	4620      	mov	r0, r4
}
   14610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   14614:	f7ff bf75 	b.w	14502 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   14618:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1461c:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   1461e:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   14622:	e7e4      	b.n	145ee <sys_heap_init+0x52>

00014624 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14624:	4770      	bx	lr

00014626 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   14626:	2300      	movs	r3, #0
	list->head = NULL;
   14628:	e9c0 3300 	strd	r3, r3, [r0]
}
   1462c:	4770      	bx	lr

0001462e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1462e:	6803      	ldr	r3, [r0, #0]
   14630:	b923      	cbnz	r3, 1463c <log_list_add_tail+0xe>
		list->head = msg;
   14632:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   14634:	2300      	movs	r3, #0
	list->tail = msg;
   14636:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   14638:	600b      	str	r3, [r1, #0]
}
   1463a:	4770      	bx	lr
		list->tail->next = msg;
   1463c:	6843      	ldr	r3, [r0, #4]
   1463e:	6019      	str	r1, [r3, #0]
   14640:	e7f8      	b.n	14634 <log_list_add_tail+0x6>

00014642 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   14642:	6800      	ldr	r0, [r0, #0]
   14644:	4770      	bx	lr

00014646 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   14646:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   14648:	b10b      	cbz	r3, 1464e <log_list_head_get+0x8>
		list->head = list->head->next;
   1464a:	681a      	ldr	r2, [r3, #0]
   1464c:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1464e:	4618      	mov	r0, r3
   14650:	4770      	bx	lr

00014652 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   14652:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   14654:	f7ed fe32 	bl	22bc <log_msg_chunk_alloc>

	if (msg != NULL) {
   14658:	b118      	cbz	r0, 14662 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1465a:	2301      	movs	r3, #1
   1465c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1465e:	2300      	movs	r3, #0
   14660:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   14662:	bd08      	pop	{r3, pc}

00014664 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   14664:	f7ee ba8a 	b.w	2b7c <z_timer_cycle_get_32>

00014668 <dummy_timestamp>:
   14668:	2000      	movs	r0, #0
   1466a:	4770      	bx	lr

0001466c <log_0>:
{
   1466c:	b513      	push	{r0, r1, r4, lr}
   1466e:	4604      	mov	r4, r0
   14670:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   14672:	f7ff ffee 	bl	14652 <z_log_msg_std_alloc>

	if (msg != NULL) {
   14676:	b130      	cbz	r0, 14686 <log_0+0x1a>
		msg_finalize(msg, src_level);
   14678:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1467a:	6104      	str	r4, [r0, #16]
}
   1467c:	b002      	add	sp, #8
   1467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   14682:	f7ed bd35 	b.w	20f0 <msg_finalize>
}
   14686:	b002      	add	sp, #8
   14688:	bd10      	pop	{r4, pc}

0001468a <log_1>:
{
   1468a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1468c:	460c      	mov	r4, r1
   1468e:	4611      	mov	r1, r2
   14690:	4605      	mov	r5, r0
   14692:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   14694:	f7ff ffdd 	bl	14652 <z_log_msg_std_alloc>

	if (msg != NULL) {
   14698:	b160      	cbz	r0, 146b4 <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1469a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1469c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1469e:	2501      	movs	r5, #1
   146a0:	f365 1207 	bfi	r2, r5, #4, #4
   146a4:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   146a6:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
   146a8:	6144      	str	r4, [r0, #20]
}
   146aa:	b003      	add	sp, #12
   146ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   146b0:	f7ed bd1e 	b.w	20f0 <msg_finalize>
}
   146b4:	b003      	add	sp, #12
   146b6:	bd30      	pop	{r4, r5, pc}

000146b8 <log_2>:
{
   146b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146ba:	460e      	mov	r6, r1
   146bc:	4619      	mov	r1, r3
   146be:	4607      	mov	r7, r0
   146c0:	4615      	mov	r5, r2
   146c2:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   146c4:	f7ff ffc5 	bl	14652 <z_log_msg_std_alloc>

	if (msg != NULL) {
   146c8:	b168      	cbz	r0, 146e6 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   146ca:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   146cc:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   146ce:	2202      	movs	r2, #2
   146d0:	f362 1307 	bfi	r3, r2, #4, #4
   146d4:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   146d6:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   146d8:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
   146dc:	b003      	add	sp, #12
   146de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   146e2:	f7ed bd05 	b.w	20f0 <msg_finalize>
}
   146e6:	b003      	add	sp, #12
   146e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000146ea <log_3>:
{
   146ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   146ee:	460f      	mov	r7, r1
   146f0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   146f4:	9101      	str	r1, [sp, #4]
   146f6:	4680      	mov	r8, r0
   146f8:	4616      	mov	r6, r2
   146fa:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   146fc:	f7ff ffa9 	bl	14652 <z_log_msg_std_alloc>

	if (msg != NULL) {
   14700:	b178      	cbz	r0, 14722 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   14702:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   14704:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   14708:	2203      	movs	r2, #3
   1470a:	f362 1307 	bfi	r3, r2, #4, #4
   1470e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   14710:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   14712:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
   14714:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
   14718:	b002      	add	sp, #8
   1471a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1471e:	f7ed bce7 	b.w	20f0 <msg_finalize>
}
   14722:	b002      	add	sp, #8
   14724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014728 <log_printk>:
{
   14728:	b500      	push	{lr}
   1472a:	b0c3      	sub	sp, #268	; 0x10c
   1472c:	4602      	mov	r2, r0
   1472e:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   14730:	a801      	add	r0, sp, #4
   14732:	f240 1101 	movw	r1, #257	; 0x101
   14736:	f7ed fabb 	bl	1cb0 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1473a:	f240 1201 	movw	r2, #257	; 0x101
   1473e:	4282      	cmp	r2, r0
   14740:	bf28      	it	cs
   14742:	4602      	movcs	r2, r0
   14744:	a901      	add	r1, sp, #4
   14746:	2000      	movs	r0, #0
   14748:	f000 f89f 	bl	1488a <log_msg_hexdump_create>
			if (msg == NULL) {
   1474c:	b118      	cbz	r0, 14756 <log_printk+0x2e>
			msg_finalize(msg, src_level_union.structure);
   1474e:	f04f 0100 	mov.w	r1, #0
   14752:	f7ed fccd 	bl	20f0 <msg_finalize>
}
   14756:	b043      	add	sp, #268	; 0x10c
   14758:	f85d fb04 	ldr.w	pc, [sp], #4

0001475c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1475c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14760:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   14762:	8903      	ldrh	r3, [r0, #8]
{
   14764:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   14768:	f3c3 038d 	ubfx	r3, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1476c:	42a3      	cmp	r3, r4
{
   1476e:	460e      	mov	r6, r1
	if (offset >= available_len) {
   14770:	d803      	bhi.n	1477a <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   14772:	2300      	movs	r3, #0
   14774:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   14776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1477a:	6811      	ldr	r1, [r2, #0]
   1477c:	4421      	add	r1, r4
   1477e:	4299      	cmp	r1, r3
		*length = available_len - offset;
   14780:	bf84      	itt	hi
   14782:	1b19      	subhi	r1, r3, r4
   14784:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   14786:	2b0c      	cmp	r3, #12
	req_len = *length;
   14788:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1478c:	d928      	bls.n	147e0 <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
   1478e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   14790:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   14794:	d82b      	bhi.n	147ee <log_msg_hexdump_data_op+0x92>
		head_data = msg->payload.ext.data.bytes;
   14796:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   14798:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1479a:	454b      	cmp	r3, r9
   1479c:	bf28      	it	cs
   1479e:	464b      	movcs	r3, r9
   147a0:	461d      	mov	r5, r3
		if (put_op) {
   147a2:	4420      	add	r0, r4
   147a4:	461a      	mov	r2, r3
   147a6:	b1ff      	cbz	r7, 147e8 <log_msg_hexdump_data_op+0x8c>
   147a8:	4631      	mov	r1, r6
   147aa:	f009 ff27 	bl	1e5fc <memcpy>
		req_len -= cpy_len;
   147ae:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   147b2:	442e      	add	r6, r5
	while (req_len > 0) {
   147b4:	f1b9 0f00 	cmp.w	r9, #0
   147b8:	d0dd      	beq.n	14776 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   147ba:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   147be:	454d      	cmp	r5, r9
   147c0:	bf28      	it	cs
   147c2:	464d      	movcs	r5, r9
		if (put_op) {
   147c4:	1d20      	adds	r0, r4, #4
   147c6:	4440      	add	r0, r8
   147c8:	462a      	mov	r2, r5
   147ca:	b1bf      	cbz	r7, 147fc <log_msg_hexdump_data_op+0xa0>
   147cc:	4631      	mov	r1, r6
   147ce:	f009 ff15 	bl	1e5fc <memcpy>
		req_len -= cpy_len;
   147d2:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   147d6:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   147da:	442e      	add	r6, r5
		offset = 0;
   147dc:	2400      	movs	r4, #0
   147de:	e7e9      	b.n	147b4 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   147e0:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   147e2:	f04f 0800 	mov.w	r8, #0
   147e6:	e7d8      	b.n	1479a <log_msg_hexdump_data_op+0x3e>
   147e8:	4601      	mov	r1, r0
   147ea:	4630      	mov	r0, r6
   147ec:	e7dd      	b.n	147aa <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   147ee:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   147f0:	2c1b      	cmp	r4, #27
   147f2:	d9df      	bls.n	147b4 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   147f4:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   147f8:	3c1c      	subs	r4, #28
   147fa:	e7f9      	b.n	147f0 <log_msg_hexdump_data_op+0x94>
   147fc:	4601      	mov	r1, r0
   147fe:	4630      	mov	r0, r6
   14800:	e7e5      	b.n	147ce <log_msg_hexdump_data_op+0x72>

00014802 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14802:	3004      	adds	r0, #4
   14804:	f3bf 8f5b 	dmb	ish
   14808:	e850 3f00 	ldrex	r3, [r0]
   1480c:	3301      	adds	r3, #1
   1480e:	e840 3200 	strex	r2, r3, [r0]
   14812:	2a00      	cmp	r2, #0
   14814:	d1f8      	bne.n	14808 <log_msg_get+0x6>
   14816:	f3bf 8f5b 	dmb	ish
}
   1481a:	4770      	bx	lr

0001481c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1481c:	7a40      	ldrb	r0, [r0, #9]
}
   1481e:	0900      	lsrs	r0, r0, #4
   14820:	4770      	bx	lr

00014822 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   14822:	7a43      	ldrb	r3, [r0, #9]
   14824:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   14828:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1482c:	d216      	bcs.n	1485c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1482e:	2a03      	cmp	r2, #3
   14830:	d803      	bhi.n	1483a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   14832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14836:	6948      	ldr	r0, [r1, #20]
   14838:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1483a:	2901      	cmp	r1, #1
   1483c:	d803      	bhi.n	14846 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1483e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14842:	6988      	ldr	r0, [r1, #24]
   14844:	4770      	bx	lr
	cont = msg->payload.ext.next;
   14846:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   14848:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1484a:	2906      	cmp	r1, #6
   1484c:	d803      	bhi.n	14856 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1484e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14852:	6848      	ldr	r0, [r1, #4]
   14854:	4770      	bx	lr
		cont = cont->next;
   14856:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   14858:	3907      	subs	r1, #7
		cont = cont->next;
   1485a:	e7f6      	b.n	1484a <log_msg_arg_get+0x28>
		return 0;
   1485c:	2000      	movs	r0, #0
}
   1485e:	4770      	bx	lr

00014860 <log_msg_put>:
{
   14860:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14862:	1d02      	adds	r2, r0, #4
   14864:	f3bf 8f5b 	dmb	ish
   14868:	e852 1f00 	ldrex	r1, [r2]
   1486c:	3901      	subs	r1, #1
   1486e:	e842 1c00 	strex	ip, r1, [r2]
   14872:	f1bc 0f00 	cmp.w	ip, #0
   14876:	d1f7      	bne.n	14868 <log_msg_put+0x8>
   14878:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1487c:	685b      	ldr	r3, [r3, #4]
   1487e:	b90b      	cbnz	r3, 14884 <log_msg_put+0x24>
		msg_free(msg);
   14880:	f7ed bd30 	b.w	22e4 <msg_free>
}
   14884:	4770      	bx	lr

00014886 <log_msg_str_get>:
}
   14886:	6900      	ldr	r0, [r0, #16]
   14888:	4770      	bx	lr

0001488a <log_msg_hexdump_create>:
{
   1488a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1488e:	f643 75ff 	movw	r5, #16383	; 0x3fff
   14892:	4295      	cmp	r5, r2
{
   14894:	4680      	mov	r8, r0
   14896:	460e      	mov	r6, r1
   14898:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1489a:	bf28      	it	cs
   1489c:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1489e:	f7ed fd0d 	bl	22bc <log_msg_chunk_alloc>
	if (msg == NULL) {
   148a2:	4604      	mov	r4, r0
   148a4:	b378      	cbz	r0, 14906 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148a6:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   148a8:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   148ac:	2301      	movs	r3, #1
   148ae:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148b0:	00ab      	lsls	r3, r5, #2
   148b2:	f043 0301 	orr.w	r3, r3, #1
   148b6:	f002 0202 	and.w	r2, r2, #2
   148ba:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   148bc:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148be:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   148c0:	f100 0814 	add.w	r8, r0, #20
   148c4:	d916      	bls.n	148f4 <log_msg_hexdump_create+0x6a>
   148c6:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   148c8:	7a02      	ldrb	r2, [r0, #8]
   148ca:	6183      	str	r3, [r0, #24]
   148cc:	6873      	ldr	r3, [r6, #4]
   148ce:	61c3      	str	r3, [r0, #28]
   148d0:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   148d4:	2300      	movs	r3, #0
   148d6:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   148d8:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   148da:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   148dc:	3d08      	subs	r5, #8
	while (length > 0) {
   148de:	4699      	mov	r9, r3
   148e0:	b18d      	cbz	r5, 14906 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   148e2:	f7ed fceb 	bl	22bc <log_msg_chunk_alloc>
		if (cont == NULL) {
   148e6:	4607      	mov	r7, r0
   148e8:	b980      	cbnz	r0, 1490c <log_msg_hexdump_create+0x82>
			msg_free(msg);
   148ea:	4620      	mov	r0, r4
   148ec:	f7ed fcfa 	bl	22e4 <msg_free>
			return NULL;
   148f0:	463c      	mov	r4, r7
   148f2:	e008      	b.n	14906 <log_msg_hexdump_create+0x7c>
   148f4:	462a      	mov	r2, r5
   148f6:	4631      	mov	r1, r6
   148f8:	4640      	mov	r0, r8
   148fa:	f009 fe7f 	bl	1e5fc <memcpy>
		msg->hdr.params.generic.ext = 0;
   148fe:	7a23      	ldrb	r3, [r4, #8]
   14900:	f36f 0341 	bfc	r3, #1, #1
   14904:	7223      	strb	r3, [r4, #8]
}
   14906:	4620      	mov	r0, r4
   14908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1490c:	2d1c      	cmp	r5, #28
   1490e:	462f      	mov	r7, r5
   14910:	bf28      	it	cs
   14912:	271c      	movcs	r7, #28
		*prev_cont = cont;
   14914:	f8c8 0000 	str.w	r0, [r8]
   14918:	4631      	mov	r1, r6
		cont->next = NULL;
   1491a:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1491e:	4680      	mov	r8, r0
   14920:	463a      	mov	r2, r7
   14922:	3004      	adds	r0, #4
   14924:	f009 fe6a 	bl	1e5fc <memcpy>
		data += chunk_length;
   14928:	443e      	add	r6, r7
		length -= chunk_length;
   1492a:	1bed      	subs	r5, r5, r7
   1492c:	e7d8      	b.n	148e0 <log_msg_hexdump_create+0x56>

0001492e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1492e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   14930:	2400      	movs	r4, #0
   14932:	9400      	str	r4, [sp, #0]
   14934:	f7ff ff12 	bl	1475c <log_msg_hexdump_data_op>
}
   14938:	b002      	add	sp, #8
   1493a:	bd10      	pop	{r4, pc}

0001493c <buffer_write>:
{
   1493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1493e:	4606      	mov	r6, r0
   14940:	460d      	mov	r5, r1
   14942:	4614      	mov	r4, r2
   14944:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   14946:	4621      	mov	r1, r4
   14948:	4628      	mov	r0, r5
   1494a:	463a      	mov	r2, r7
   1494c:	47b0      	blx	r6
	} while (len != 0);
   1494e:	1a24      	subs	r4, r4, r0
		buf += processed;
   14950:	4405      	add	r5, r0
	} while (len != 0);
   14952:	d1f8      	bne.n	14946 <buffer_write+0xa>
}
   14954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014956 <std_print>:
{
   14956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1495a:	b08e      	sub	sp, #56	; 0x38
   1495c:	af0e      	add	r7, sp, #56	; 0x38
   1495e:	4680      	mov	r8, r0
   14960:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   14962:	f7ff ff90 	bl	14886 <log_msg_str_get>
   14966:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   14968:	4640      	mov	r0, r8
   1496a:	f7ff ff57 	bl	1481c <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1496e:	0083      	lsls	r3, r0, #2
   14970:	3307      	adds	r3, #7
   14972:	f023 0307 	bic.w	r3, r3, #7
   14976:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   1497a:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1497c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1497e:	f04f 0900 	mov.w	r9, #0
   14982:	45d1      	cmp	r9, sl
   14984:	d116      	bne.n	149b4 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   14986:	4640      	mov	r0, r8
   14988:	f7ff ff48 	bl	1481c <log_msg_nargs_get>
   1498c:	280f      	cmp	r0, #15
   1498e:	d81e      	bhi.n	149ce <std_print+0x78>
   14990:	e8df f010 	tbh	[pc, r0, lsl #1]
   14994:	00200019 	.word	0x00200019
   14998:	002d0026 	.word	0x002d0026
   1499c:	00410036 	.word	0x00410036
   149a0:	005d004e 	.word	0x005d004e
   149a4:	0081006e 	.word	0x0081006e
   149a8:	00ad0096 	.word	0x00ad0096
   149ac:	00e100c6 	.word	0x00e100c6
   149b0:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   149b4:	4649      	mov	r1, r9
   149b6:	4640      	mov	r0, r8
   149b8:	f7ff ff33 	bl	14822 <log_msg_arg_get>
   149bc:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   149c0:	f109 0901 	add.w	r9, r9, #1
   149c4:	e7dd      	b.n	14982 <std_print+0x2c>
		print_formatted(log_output, str);
   149c6:	4631      	mov	r1, r6
   149c8:	4628      	mov	r0, r5
   149ca:	f7ed fcc9 	bl	2360 <print_formatted>
}
   149ce:	46bd      	mov	sp, r7
   149d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   149d4:	6822      	ldr	r2, [r4, #0]
   149d6:	4631      	mov	r1, r6
   149d8:	4628      	mov	r0, r5
   149da:	f7ed fcc1 	bl	2360 <print_formatted>
		break;
   149de:	e7f6      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   149e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   149e4:	4631      	mov	r1, r6
   149e6:	4628      	mov	r0, r5
   149e8:	f7ed fcba 	bl	2360 <print_formatted>
		break;
   149ec:	e7ef      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   149ee:	68a3      	ldr	r3, [r4, #8]
   149f0:	9300      	str	r3, [sp, #0]
   149f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   149f6:	4631      	mov	r1, r6
   149f8:	4628      	mov	r0, r5
   149fa:	f7ed fcb1 	bl	2360 <print_formatted>
		break;
   149fe:	e7e6      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a00:	68e3      	ldr	r3, [r4, #12]
   14a02:	9301      	str	r3, [sp, #4]
   14a04:	68a3      	ldr	r3, [r4, #8]
   14a06:	9300      	str	r3, [sp, #0]
   14a08:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a0c:	4631      	mov	r1, r6
   14a0e:	4628      	mov	r0, r5
   14a10:	f7ed fca6 	bl	2360 <print_formatted>
		break;
   14a14:	e7db      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a16:	6923      	ldr	r3, [r4, #16]
   14a18:	9302      	str	r3, [sp, #8]
   14a1a:	68e3      	ldr	r3, [r4, #12]
   14a1c:	9301      	str	r3, [sp, #4]
   14a1e:	68a3      	ldr	r3, [r4, #8]
   14a20:	9300      	str	r3, [sp, #0]
   14a22:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a26:	4631      	mov	r1, r6
   14a28:	4628      	mov	r0, r5
   14a2a:	f7ed fc99 	bl	2360 <print_formatted>
		break;
   14a2e:	e7ce      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a30:	6963      	ldr	r3, [r4, #20]
   14a32:	9303      	str	r3, [sp, #12]
   14a34:	6923      	ldr	r3, [r4, #16]
   14a36:	9302      	str	r3, [sp, #8]
   14a38:	68e3      	ldr	r3, [r4, #12]
   14a3a:	9301      	str	r3, [sp, #4]
   14a3c:	68a3      	ldr	r3, [r4, #8]
   14a3e:	9300      	str	r3, [sp, #0]
   14a40:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a44:	4631      	mov	r1, r6
   14a46:	4628      	mov	r0, r5
   14a48:	f7ed fc8a 	bl	2360 <print_formatted>
		break;
   14a4c:	e7bf      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a4e:	69a3      	ldr	r3, [r4, #24]
   14a50:	9304      	str	r3, [sp, #16]
   14a52:	6963      	ldr	r3, [r4, #20]
   14a54:	9303      	str	r3, [sp, #12]
   14a56:	6923      	ldr	r3, [r4, #16]
   14a58:	9302      	str	r3, [sp, #8]
   14a5a:	68e3      	ldr	r3, [r4, #12]
   14a5c:	9301      	str	r3, [sp, #4]
   14a5e:	68a3      	ldr	r3, [r4, #8]
   14a60:	9300      	str	r3, [sp, #0]
   14a62:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a66:	4631      	mov	r1, r6
   14a68:	4628      	mov	r0, r5
   14a6a:	f7ed fc79 	bl	2360 <print_formatted>
		break;
   14a6e:	e7ae      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a70:	69e3      	ldr	r3, [r4, #28]
   14a72:	9305      	str	r3, [sp, #20]
   14a74:	69a3      	ldr	r3, [r4, #24]
   14a76:	9304      	str	r3, [sp, #16]
   14a78:	6963      	ldr	r3, [r4, #20]
   14a7a:	9303      	str	r3, [sp, #12]
   14a7c:	6923      	ldr	r3, [r4, #16]
   14a7e:	9302      	str	r3, [sp, #8]
   14a80:	68e3      	ldr	r3, [r4, #12]
   14a82:	9301      	str	r3, [sp, #4]
   14a84:	68a3      	ldr	r3, [r4, #8]
   14a86:	9300      	str	r3, [sp, #0]
   14a88:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a8c:	4631      	mov	r1, r6
   14a8e:	4628      	mov	r0, r5
   14a90:	f7ed fc66 	bl	2360 <print_formatted>
		break;
   14a94:	e79b      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a96:	6a23      	ldr	r3, [r4, #32]
   14a98:	9306      	str	r3, [sp, #24]
   14a9a:	69e3      	ldr	r3, [r4, #28]
   14a9c:	9305      	str	r3, [sp, #20]
   14a9e:	69a3      	ldr	r3, [r4, #24]
   14aa0:	9304      	str	r3, [sp, #16]
   14aa2:	6963      	ldr	r3, [r4, #20]
   14aa4:	9303      	str	r3, [sp, #12]
   14aa6:	6923      	ldr	r3, [r4, #16]
   14aa8:	9302      	str	r3, [sp, #8]
   14aaa:	68e3      	ldr	r3, [r4, #12]
   14aac:	9301      	str	r3, [sp, #4]
   14aae:	68a3      	ldr	r3, [r4, #8]
   14ab0:	9300      	str	r3, [sp, #0]
   14ab2:	e9d4 2300 	ldrd	r2, r3, [r4]
   14ab6:	4631      	mov	r1, r6
   14ab8:	4628      	mov	r0, r5
   14aba:	f7ed fc51 	bl	2360 <print_formatted>
		break;
   14abe:	e786      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ac2:	9307      	str	r3, [sp, #28]
   14ac4:	6a23      	ldr	r3, [r4, #32]
   14ac6:	9306      	str	r3, [sp, #24]
   14ac8:	69e3      	ldr	r3, [r4, #28]
   14aca:	9305      	str	r3, [sp, #20]
   14acc:	69a3      	ldr	r3, [r4, #24]
   14ace:	9304      	str	r3, [sp, #16]
   14ad0:	6963      	ldr	r3, [r4, #20]
   14ad2:	9303      	str	r3, [sp, #12]
   14ad4:	6923      	ldr	r3, [r4, #16]
   14ad6:	9302      	str	r3, [sp, #8]
   14ad8:	68e3      	ldr	r3, [r4, #12]
   14ada:	9301      	str	r3, [sp, #4]
   14adc:	68a3      	ldr	r3, [r4, #8]
   14ade:	9300      	str	r3, [sp, #0]
   14ae0:	e9d4 2300 	ldrd	r2, r3, [r4]
   14ae4:	4631      	mov	r1, r6
   14ae6:	4628      	mov	r0, r5
   14ae8:	f7ed fc3a 	bl	2360 <print_formatted>
		break;
   14aec:	e76f      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14af0:	9308      	str	r3, [sp, #32]
   14af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14af4:	9307      	str	r3, [sp, #28]
   14af6:	6a23      	ldr	r3, [r4, #32]
   14af8:	9306      	str	r3, [sp, #24]
   14afa:	69e3      	ldr	r3, [r4, #28]
   14afc:	9305      	str	r3, [sp, #20]
   14afe:	69a3      	ldr	r3, [r4, #24]
   14b00:	9304      	str	r3, [sp, #16]
   14b02:	6963      	ldr	r3, [r4, #20]
   14b04:	9303      	str	r3, [sp, #12]
   14b06:	6923      	ldr	r3, [r4, #16]
   14b08:	9302      	str	r3, [sp, #8]
   14b0a:	68e3      	ldr	r3, [r4, #12]
   14b0c:	9301      	str	r3, [sp, #4]
   14b0e:	68a3      	ldr	r3, [r4, #8]
   14b10:	9300      	str	r3, [sp, #0]
   14b12:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b16:	4631      	mov	r1, r6
   14b18:	4628      	mov	r0, r5
   14b1a:	f7ed fc21 	bl	2360 <print_formatted>
		break;
   14b1e:	e756      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14b22:	9309      	str	r3, [sp, #36]	; 0x24
   14b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b26:	9308      	str	r3, [sp, #32]
   14b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b2a:	9307      	str	r3, [sp, #28]
   14b2c:	6a23      	ldr	r3, [r4, #32]
   14b2e:	9306      	str	r3, [sp, #24]
   14b30:	69e3      	ldr	r3, [r4, #28]
   14b32:	9305      	str	r3, [sp, #20]
   14b34:	69a3      	ldr	r3, [r4, #24]
   14b36:	9304      	str	r3, [sp, #16]
   14b38:	6963      	ldr	r3, [r4, #20]
   14b3a:	9303      	str	r3, [sp, #12]
   14b3c:	6923      	ldr	r3, [r4, #16]
   14b3e:	9302      	str	r3, [sp, #8]
   14b40:	68e3      	ldr	r3, [r4, #12]
   14b42:	9301      	str	r3, [sp, #4]
   14b44:	68a3      	ldr	r3, [r4, #8]
   14b46:	9300      	str	r3, [sp, #0]
   14b48:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b4c:	4631      	mov	r1, r6
   14b4e:	4628      	mov	r0, r5
   14b50:	f7ed fc06 	bl	2360 <print_formatted>
		break;
   14b54:	e73b      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b58:	930a      	str	r3, [sp, #40]	; 0x28
   14b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14b5c:	9309      	str	r3, [sp, #36]	; 0x24
   14b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b60:	9308      	str	r3, [sp, #32]
   14b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b64:	9307      	str	r3, [sp, #28]
   14b66:	6a23      	ldr	r3, [r4, #32]
   14b68:	9306      	str	r3, [sp, #24]
   14b6a:	69e3      	ldr	r3, [r4, #28]
   14b6c:	9305      	str	r3, [sp, #20]
   14b6e:	69a3      	ldr	r3, [r4, #24]
   14b70:	9304      	str	r3, [sp, #16]
   14b72:	6963      	ldr	r3, [r4, #20]
   14b74:	9303      	str	r3, [sp, #12]
   14b76:	6923      	ldr	r3, [r4, #16]
   14b78:	9302      	str	r3, [sp, #8]
   14b7a:	68e3      	ldr	r3, [r4, #12]
   14b7c:	9301      	str	r3, [sp, #4]
   14b7e:	68a3      	ldr	r3, [r4, #8]
   14b80:	9300      	str	r3, [sp, #0]
   14b82:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b86:	4631      	mov	r1, r6
   14b88:	4628      	mov	r0, r5
   14b8a:	f7ed fbe9 	bl	2360 <print_formatted>
		break;
   14b8e:	e71e      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14b92:	930b      	str	r3, [sp, #44]	; 0x2c
   14b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b96:	930a      	str	r3, [sp, #40]	; 0x28
   14b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14b9a:	9309      	str	r3, [sp, #36]	; 0x24
   14b9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b9e:	9308      	str	r3, [sp, #32]
   14ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ba2:	9307      	str	r3, [sp, #28]
   14ba4:	6a23      	ldr	r3, [r4, #32]
   14ba6:	9306      	str	r3, [sp, #24]
   14ba8:	69e3      	ldr	r3, [r4, #28]
   14baa:	9305      	str	r3, [sp, #20]
   14bac:	69a3      	ldr	r3, [r4, #24]
   14bae:	9304      	str	r3, [sp, #16]
   14bb0:	6963      	ldr	r3, [r4, #20]
   14bb2:	9303      	str	r3, [sp, #12]
   14bb4:	6923      	ldr	r3, [r4, #16]
   14bb6:	9302      	str	r3, [sp, #8]
   14bb8:	68e3      	ldr	r3, [r4, #12]
   14bba:	9301      	str	r3, [sp, #4]
   14bbc:	68a3      	ldr	r3, [r4, #8]
   14bbe:	9300      	str	r3, [sp, #0]
   14bc0:	e9d4 2300 	ldrd	r2, r3, [r4]
   14bc4:	4631      	mov	r1, r6
   14bc6:	4628      	mov	r0, r5
   14bc8:	f7ed fbca 	bl	2360 <print_formatted>
		break;
   14bcc:	e6ff      	b.n	149ce <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14bd0:	930c      	str	r3, [sp, #48]	; 0x30
   14bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14bd4:	930b      	str	r3, [sp, #44]	; 0x2c
   14bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14bd8:	930a      	str	r3, [sp, #40]	; 0x28
   14bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14bdc:	9309      	str	r3, [sp, #36]	; 0x24
   14bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14be0:	9308      	str	r3, [sp, #32]
   14be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14be4:	9307      	str	r3, [sp, #28]
   14be6:	6a23      	ldr	r3, [r4, #32]
   14be8:	9306      	str	r3, [sp, #24]
   14bea:	69e3      	ldr	r3, [r4, #28]
   14bec:	9305      	str	r3, [sp, #20]
   14bee:	69a3      	ldr	r3, [r4, #24]
   14bf0:	9304      	str	r3, [sp, #16]
   14bf2:	6963      	ldr	r3, [r4, #20]
   14bf4:	9303      	str	r3, [sp, #12]
   14bf6:	6923      	ldr	r3, [r4, #16]
   14bf8:	9302      	str	r3, [sp, #8]
   14bfa:	68e3      	ldr	r3, [r4, #12]
   14bfc:	9301      	str	r3, [sp, #4]
   14bfe:	68a3      	ldr	r3, [r4, #8]
   14c00:	9300      	str	r3, [sp, #0]
   14c02:	e9d4 2300 	ldrd	r2, r3, [r4]
   14c06:	4631      	mov	r1, r6
   14c08:	4628      	mov	r0, r5
   14c0a:	f7ed fba9 	bl	2360 <print_formatted>
}
   14c0e:	e6de      	b.n	149ce <std_print+0x78>

00014c10 <log_output_flush>:
		     log_output->control_block->offset,
   14c10:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   14c12:	6881      	ldr	r1, [r0, #8]
{
   14c14:	b510      	push	{r4, lr}
   14c16:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   14c18:	e9d2 2300 	ldrd	r2, r3, [r2]
   14c1c:	6800      	ldr	r0, [r0, #0]
   14c1e:	f7ff fe8d 	bl	1493c <buffer_write>
	log_output->control_block->offset = 0;
   14c22:	6863      	ldr	r3, [r4, #4]
   14c24:	2200      	movs	r2, #0
   14c26:	601a      	str	r2, [r3, #0]
}
   14c28:	bd10      	pop	{r4, pc}

00014c2a <out_func>:
{
   14c2a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   14c2c:	684b      	ldr	r3, [r1, #4]
   14c2e:	681a      	ldr	r2, [r3, #0]
   14c30:	68cb      	ldr	r3, [r1, #12]
   14c32:	429a      	cmp	r2, r3
{
   14c34:	4605      	mov	r5, r0
   14c36:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   14c38:	d102      	bne.n	14c40 <out_func+0x16>
		log_output_flush(out_ctx);
   14c3a:	4608      	mov	r0, r1
   14c3c:	f7ff ffe8 	bl	14c10 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14c40:	6863      	ldr	r3, [r4, #4]
   14c42:	f3bf 8f5b 	dmb	ish
   14c46:	e853 2f00 	ldrex	r2, [r3]
   14c4a:	1c51      	adds	r1, r2, #1
   14c4c:	e843 1000 	strex	r0, r1, [r3]
   14c50:	2800      	cmp	r0, #0
   14c52:	d1f8      	bne.n	14c46 <out_func+0x1c>
   14c54:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
   14c58:	68a3      	ldr	r3, [r4, #8]
   14c5a:	549d      	strb	r5, [r3, r2]
}
   14c5c:	2000      	movs	r0, #0
   14c5e:	bd38      	pop	{r3, r4, r5, pc}

00014c60 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   14c60:	2000      	movs	r0, #0
   14c62:	4770      	bx	lr

00014c64 <get_status>:
	data = get_sub_data(dev, type);
   14c64:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   14c66:	b2c9      	uxtb	r1, r1
	if (data->started) {
   14c68:	220c      	movs	r2, #12
   14c6a:	fb02 3101 	mla	r1, r2, r1, r3
   14c6e:	7a4b      	ldrb	r3, [r1, #9]
   14c70:	b923      	cbnz	r3, 14c7c <get_status+0x18>
	if (data->ref > 0) {
   14c72:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   14c74:	fab0 f080 	clz	r0, r0
   14c78:	0940      	lsrs	r0, r0, #5
   14c7a:	4770      	bx	lr
   14c7c:	2002      	movs	r0, #2
}
   14c7e:	4770      	bx	lr

00014c80 <clock_stop>:
{
   14c80:	b570      	push	{r4, r5, r6, lr}
   14c82:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   14c84:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   14c86:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   14c88:	f04f 0320 	mov.w	r3, #32
   14c8c:	f3ef 8611 	mrs	r6, BASEPRI
   14c90:	f383 8811 	msr	BASEPRI, r3
   14c94:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   14c98:	220c      	movs	r2, #12
   14c9a:	434a      	muls	r2, r1
   14c9c:	18ab      	adds	r3, r5, r2
   14c9e:	7a18      	ldrb	r0, [r3, #8]
   14ca0:	b190      	cbz	r0, 14cc8 <clock_stop+0x48>
	data->ref--;
   14ca2:	3801      	subs	r0, #1
   14ca4:	b2c0      	uxtb	r0, r0
   14ca6:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   14ca8:	b988      	cbnz	r0, 14cce <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   14caa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   14cae:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cb0:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   14cb2:	6058      	str	r0, [r3, #4]
   14cb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14cb8:	2101      	movs	r1, #1
   14cba:	6011      	str	r1, [r2, #0]
		data->started = false;
   14cbc:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   14cbe:	f386 8811 	msr	BASEPRI, r6
   14cc2:	f3bf 8f6f 	isb	sy
}
   14cc6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   14cc8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14ccc:	e7f7      	b.n	14cbe <clock_stop+0x3e>
	int err = 0;
   14cce:	2000      	movs	r0, #0
   14cd0:	e7f5      	b.n	14cbe <clock_stop+0x3e>

00014cd2 <clock_async_start>:
{
   14cd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
   14cd6:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   14cd8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   14cdc:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   14cde:	b14a      	cbz	r2, 14cf4 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   14ce0:	230c      	movs	r3, #12
   14ce2:	437b      	muls	r3, r7
   14ce4:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   14ce8:	429a      	cmp	r2, r3
   14cea:	d052      	beq.n	14d92 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14cec:	b113      	cbz	r3, 14cf4 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14cee:	681b      	ldr	r3, [r3, #0]
	} while (item);
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d1f9      	bne.n	14ce8 <clock_async_start+0x16>
	__asm__ volatile(
   14cf4:	f04f 0320 	mov.w	r3, #32
   14cf8:	f3ef 8c11 	mrs	ip, BASEPRI
   14cfc:	f383 8811 	msr	BASEPRI, r3
   14d00:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   14d04:	250c      	movs	r5, #12
   14d06:	437d      	muls	r5, r7
   14d08:	eb0e 0305 	add.w	r3, lr, r5
   14d0c:	7a1c      	ldrb	r4, [r3, #8]
   14d0e:	3401      	adds	r4, #1
   14d10:	b2e4      	uxtb	r4, r4
   14d12:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   14d14:	f38c 8811 	msr	BASEPRI, ip
   14d18:	f3bf 8f6f 	isb	sy
	if (data) {
   14d1c:	b35a      	cbz	r2, 14d76 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
   14d1e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   14d22:	f04f 0803 	mov.w	r8, #3
   14d26:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   14d2a:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   14d2e:	f1bc 0f00 	cmp.w	ip, #0
   14d32:	d115      	bne.n	14d60 <clock_async_start+0x8e>
	__asm__ volatile(
   14d34:	f04f 0820 	mov.w	r8, #32
   14d38:	f3ef 8911 	mrs	r9, BASEPRI
   14d3c:	f388 8811 	msr	BASEPRI, r8
   14d40:	f3bf 8f6f 	isb	sy
	parent->next = child;
   14d44:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   14d48:	f8d3 8004 	ldr.w	r8, [r3, #4]
   14d4c:	f1b8 0f00 	cmp.w	r8, #0
   14d50:	d11b      	bne.n	14d8a <clock_async_start+0xb8>
	list->tail = node;
   14d52:	605a      	str	r2, [r3, #4]
	list->head = node;
   14d54:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   14d58:	f389 8811 	msr	BASEPRI, r9
   14d5c:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   14d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d64:	2503      	movs	r5, #3
   14d66:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
   14d6a:	f1bc 0f00 	cmp.w	ip, #0
   14d6e:	d002      	beq.n	14d76 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
   14d70:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   14d74:	4798      	blx	r3
	if (ref == 1) {
   14d76:	2c01      	cmp	r4, #1
   14d78:	d105      	bne.n	14d86 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   14d7a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d7e:	78b3      	ldrb	r3, [r6, #2]
   14d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14d84:	601c      	str	r4, [r3, #0]
	return 0;
   14d86:	2000      	movs	r0, #0
   14d88:	e005      	b.n	14d96 <clock_async_start+0xc4>
	parent->next = child;
   14d8a:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   14d8e:	605a      	str	r2, [r3, #4]
}
   14d90:	e7e2      	b.n	14d58 <clock_async_start+0x86>
		return -EBUSY;
   14d92:	f06f 000f 	mvn.w	r0, #15
}
   14d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014d9a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   14d9a:	2200      	movs	r2, #0
   14d9c:	f7ff bf99 	b.w	14cd2 <clock_async_start>

00014da0 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14da0:	2200      	movs	r2, #0
{
   14da2:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14da4:	2101      	movs	r1, #1
{
   14da6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14da8:	4610      	mov	r0, r2
   14daa:	f7ee f8b3 	bl	2f14 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   14dae:	2000      	movs	r0, #0
   14db0:	f7ee f8a0 	bl	2ef4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   14db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14db8:	2201      	movs	r2, #1
   14dba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   14dbe:	2203      	movs	r2, #3
   14dc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   14dc4:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   14dc6:	2000      	movs	r0, #0
	list->tail = NULL;
   14dc8:	e9c3 0000 	strd	r0, r0, [r3]
   14dcc:	68e3      	ldr	r3, [r4, #12]
   14dce:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   14dd2:	bd10      	pop	{r4, pc}

00014dd4 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   14dd4:	4770      	bx	lr

00014dd6 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   14dd6:	4770      	bx	lr

00014dd8 <abort_function>:
	while(1);
   14dd8:	e7fe      	b.n	14dd8 <abort_function>

00014dda <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   14dda:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   14ddc:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   14dde:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   14de0:	bf9d      	ittte	ls
   14de2:	6882      	ldrls	r2, [r0, #8]
   14de4:	18d2      	addls	r2, r2, r3
   14de6:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   14dea:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   14dee:	bf94      	ite	ls
   14df0:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   14df2:	1a58      	subhi	r0, r3, r1
}
   14df4:	4770      	bx	lr

00014df6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14df6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   14dfa:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14dfe:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   14e00:	eba9 0804 	sub.w	r8, r9, r4
   14e04:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   14e06:	4590      	cmp	r8, r2
   14e08:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14e0a:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   14e0c:	4414      	add	r4, r2
   14e0e:	d904      	bls.n	14e1a <_WriteNoCheck+0x24>
   14e10:	f009 fbf4 	bl	1e5fc <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   14e14:	60ec      	str	r4, [r5, #12]
}
   14e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14e1a:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   14e1c:	eba4 0409 	sub.w	r4, r4, r9
   14e20:	f009 fbec 	bl	1e5fc <memcpy>
   14e24:	6868      	ldr	r0, [r5, #4]
   14e26:	4622      	mov	r2, r4
   14e28:	eb07 0108 	add.w	r1, r7, r8
   14e2c:	e7f0      	b.n	14e10 <_WriteNoCheck+0x1a>

00014e2e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   14e2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   14e32:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   14e34:	4606      	mov	r6, r0
   14e36:	4689      	mov	r9, r1
   14e38:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   14e3a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   14e3e:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   14e40:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   14e42:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   14e44:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   14e46:	bf28      	it	cs
   14e48:	18e4      	addcs	r4, r4, r3
   14e4a:	3c01      	subs	r4, #1
   14e4c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   14e4e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   14e50:	42bc      	cmp	r4, r7
   14e52:	bf28      	it	cs
   14e54:	463c      	movcs	r4, r7
   14e56:	4294      	cmp	r4, r2
   14e58:	bf28      	it	cs
   14e5a:	4614      	movcs	r4, r2
   14e5c:	4649      	mov	r1, r9
   14e5e:	4428      	add	r0, r5
   14e60:	4622      	mov	r2, r4
   14e62:	f009 fbcb 	bl	1e5fc <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   14e66:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   14e68:	4425      	add	r5, r4
      WrOff = 0u;
   14e6a:	42ab      	cmp	r3, r5
   14e6c:	bf08      	it	eq
   14e6e:	2500      	moveq	r5, #0
  } while (NumBytes);
   14e70:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   14e72:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   14e74:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   14e76:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   14e78:	d1e1      	bne.n	14e3e <_WriteBlocking+0x10>
}
   14e7a:	4640      	mov	r0, r8
   14e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014e80 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   14e80:	f7ed bf30 	b.w	2ce4 <_DoInit>

00014e84 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   14e84:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   14e86:	f7ff fffb 	bl	14e80 <SEGGER_RTT_Init>

	return 0;
}
   14e8a:	2000      	movs	r0, #0
   14e8c:	bd08      	pop	{r3, pc}

00014e8e <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14e8e:	2100      	movs	r1, #0
   14e90:	2001      	movs	r0, #1
   14e92:	f7ee b8a3 	b.w	2fdc <z_arm_fatal_error>

00014e96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14e96:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   14e98:	6800      	ldr	r0, [r0, #0]
   14e9a:	f7ee b89f 	b.w	2fdc <z_arm_fatal_error>

00014e9e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14e9e:	b508      	push	{r3, lr}
	handler();
   14ea0:	f7ee f8d4 	bl	304c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14ea8:	f7ee bb58 	b.w	355c <z_arm_exc_exit>

00014eac <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   14eac:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   14eae:	4601      	mov	r1, r0
   14eb0:	4618      	mov	r0, r3
   14eb2:	f7ff bed5 	b.w	14c60 <__cxa_atexit>

00014eb6 <_stdout_hook_default>:
}
   14eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14eba:	4770      	bx	lr

00014ebc <_stdin_hook_default>:
}
   14ebc:	2000      	movs	r0, #0
   14ebe:	4770      	bx	lr

00014ec0 <_read>:
{
   14ec0:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   14ec2:	4611      	mov	r1, r2
   14ec4:	f7ee bc56 	b.w	3774 <z_impl_zephyr_read_stdin>

00014ec8 <_write>:
{
   14ec8:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14eca:	4611      	mov	r1, r2
   14ecc:	f7ee bc66 	b.w	379c <z_impl_zephyr_write_stdout>

00014ed0 <_close>:
   14ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ed4:	4770      	bx	lr

00014ed6 <_lseek>:
}
   14ed6:	2000      	movs	r0, #0
   14ed8:	4770      	bx	lr

00014eda <_isatty>:
}
   14eda:	2001      	movs	r0, #1
   14edc:	4770      	bx	lr

00014ede <_kill>:
}
   14ede:	2000      	movs	r0, #0
   14ee0:	4770      	bx	lr

00014ee2 <_getpid>:
}
   14ee2:	2000      	movs	r0, #0
   14ee4:	4770      	bx	lr

00014ee6 <_fstat>:
	st->st_mode = S_IFCHR;
   14ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   14eea:	604b      	str	r3, [r1, #4]
}
   14eec:	2000      	movs	r0, #0
   14eee:	4770      	bx	lr

00014ef0 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   14ef0:	f7ef bc4e 	b.w	4790 <z_impl_z_errno>

00014ef4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   14ef4:	f7ef ba32 	b.w	435c <SystemInit>

00014ef8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14ef8:	6843      	ldr	r3, [r0, #4]
   14efa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14efc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   14f00:	600b      	str	r3, [r1, #0]
}
   14f02:	2000      	movs	r0, #0
   14f04:	4770      	bx	lr

00014f06 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f06:	6843      	ldr	r3, [r0, #4]
   14f08:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14f0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14f0e:	4042      	eors	r2, r0
   14f10:	400a      	ands	r2, r1
   14f12:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14f14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   14f18:	2000      	movs	r0, #0
   14f1a:	4770      	bx	lr

00014f1c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f1c:	6843      	ldr	r3, [r0, #4]
   14f1e:	685b      	ldr	r3, [r3, #4]
}
   14f20:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   14f22:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   14f26:	4770      	bx	lr

00014f28 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f28:	6843      	ldr	r3, [r0, #4]
   14f2a:	685b      	ldr	r3, [r3, #4]
}
   14f2c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   14f2e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   14f32:	4770      	bx	lr

00014f34 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f34:	6843      	ldr	r3, [r0, #4]
   14f36:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14f38:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   14f3c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   14f3e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   14f42:	2000      	movs	r0, #0
   14f44:	4770      	bx	lr

00014f46 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14f46:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   14f48:	6858      	ldr	r0, [r3, #4]
{
   14f4a:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   14f4c:	b158      	cbz	r0, 14f66 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14f4e:	2400      	movs	r4, #0
   14f50:	4281      	cmp	r1, r0
   14f52:	d113      	bne.n	14f7c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   14f54:	6808      	ldr	r0, [r1, #0]
   14f56:	b95c      	cbnz	r4, 14f70 <gpio_nrfx_manage_callback+0x2a>
   14f58:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   14f5a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   14f5c:	42a1      	cmp	r1, r4
   14f5e:	d100      	bne.n	14f62 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   14f60:	6098      	str	r0, [r3, #8]
	parent->next = child;
   14f62:	2000      	movs	r0, #0
   14f64:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14f66:	b972      	cbnz	r2, 14f86 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14f68:	2000      	movs	r0, #0
}
   14f6a:	bd30      	pop	{r4, r5, pc}
   14f6c:	4628      	mov	r0, r5
   14f6e:	e7ef      	b.n	14f50 <gpio_nrfx_manage_callback+0xa>
   14f70:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   14f72:	6898      	ldr	r0, [r3, #8]
   14f74:	4281      	cmp	r1, r0
	list->tail = node;
   14f76:	bf08      	it	eq
   14f78:	609c      	streq	r4, [r3, #8]
}
   14f7a:	e7f2      	b.n	14f62 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f7c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14f7e:	4604      	mov	r4, r0
   14f80:	2d00      	cmp	r5, #0
   14f82:	d1f3      	bne.n	14f6c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   14f84:	b13a      	cbz	r2, 14f96 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   14f86:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   14f88:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   14f8a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   14f8c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   14f8e:	2800      	cmp	r0, #0
   14f90:	d1ea      	bne.n	14f68 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   14f92:	6099      	str	r1, [r3, #8]
}
   14f94:	e7e9      	b.n	14f6a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   14f96:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14f9a:	e7e6      	b.n	14f6a <gpio_nrfx_manage_callback+0x24>

00014f9c <fire_callbacks>:
{
   14f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   14f9e:	68c7      	ldr	r7, [r0, #12]
{
   14fa0:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fa2:	6879      	ldr	r1, [r7, #4]
{
   14fa4:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fa6:	b199      	cbz	r1, 14fd0 <fire_callbacks+0x34>
	return node->next;
   14fa8:	680c      	ldr	r4, [r1, #0]
   14faa:	2c00      	cmp	r4, #0
   14fac:	bf38      	it	cc
   14fae:	2400      	movcc	r4, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   14fb0:	688a      	ldr	r2, [r1, #8]
   14fb2:	693b      	ldr	r3, [r7, #16]
   14fb4:	4032      	ands	r2, r6
   14fb6:	421a      	tst	r2, r3
   14fb8:	d002      	beq.n	14fc0 <fire_callbacks+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   14fba:	684b      	ldr	r3, [r1, #4]
   14fbc:	4628      	mov	r0, r5
   14fbe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fc0:	b134      	cbz	r4, 14fd0 <fire_callbacks+0x34>
   14fc2:	6823      	ldr	r3, [r4, #0]
   14fc4:	2b00      	cmp	r3, #0
   14fc6:	bf38      	it	cc
   14fc8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14fca:	4621      	mov	r1, r4
   14fcc:	461c      	mov	r4, r3
   14fce:	e7ef      	b.n	14fb0 <fire_callbacks+0x14>
}
   14fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014fd2 <check_level_trigger_pins>:
{
   14fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   14fd4:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14fd6:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   14fd8:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
   14fdc:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   14fde:	e9d3 1006 	ldrd	r1, r0, [r3, #24]
   14fe2:	4301      	orrs	r1, r0
   14fe4:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   14fe8:	6879      	ldr	r1, [r7, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   14fea:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   14fec:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   14ff0:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   14ff2:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   14ff6:	2501      	movs	r5, #1
	u32_t pin = 0U;
   14ff8:	2600      	movs	r6, #0
	while (level_pins) {
   14ffa:	b90a      	cbnz	r2, 15000 <check_level_trigger_pins+0x2e>
}
   14ffc:	4620      	mov	r0, r4
   14ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   15000:	422a      	tst	r2, r5
   15002:	d009      	beq.n	15018 <check_level_trigger_pins+0x46>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15004:	7a3b      	ldrb	r3, [r7, #8]
   15006:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1500a:	2100      	movs	r1, #0
   1500c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15010:	f7ee fcba 	bl	3988 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15014:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   15018:	3601      	adds	r6, #1
		bit <<= 1;
   1501a:	006d      	lsls	r5, r5, #1
   1501c:	e7ed      	b.n	14ffa <check_level_trigger_pins+0x28>

0001501e <gpio_nrfx_pin_disable_callback>:
{
   1501e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   15020:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   15022:	2201      	movs	r2, #1
   15024:	6923      	ldr	r3, [r4, #16]
   15026:	408a      	lsls	r2, r1
   15028:	ea23 0302 	bic.w	r3, r3, r2
   1502c:	6123      	str	r3, [r4, #16]
}
   1502e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   15032:	f7ee bcbd 	b.w	39b0 <gpiote_pin_int_cfg>

00015036 <cfg_level_pins>:
{
   15036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   15038:	68c4      	ldr	r4, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1503a:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1503c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   15040:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   15042:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
   15046:	430b      	orrs	r3, r1
   15048:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
   1504c:	2601      	movs	r6, #1
	u32_t pin = 0U;
   1504e:	2500      	movs	r5, #0
	while (level_pins) {
   15050:	b902      	cbnz	r2, 15054 <cfg_level_pins+0x1e>
}
   15052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   15054:	4216      	tst	r6, r2
   15056:	d00f      	beq.n	15078 <cfg_level_pins+0x42>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15058:	6961      	ldr	r1, [r4, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1505a:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1505c:	40e9      	lsrs	r1, r5
   1505e:	f001 0101 	and.w	r1, r1, #1
   15062:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15066:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1506a:	b2c9      	uxtb	r1, r1
   1506c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15070:	f7ee fc8a 	bl	3988 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15074:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   15078:	3501      	adds	r5, #1
		bit <<= 1;
   1507a:	0076      	lsls	r6, r6, #1
   1507c:	e7e8      	b.n	15050 <cfg_level_pins+0x1a>

0001507e <gpio_nrfx_pin_enable_callback>:
{
   1507e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   15080:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   15082:	2201      	movs	r2, #1
   15084:	6923      	ldr	r3, [r4, #16]
   15086:	408a      	lsls	r2, r1
   15088:	4313      	orrs	r3, r2
   1508a:	6123      	str	r3, [r4, #16]
}
   1508c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   15090:	f7ee bc8e 	b.w	39b0 <gpiote_pin_int_cfg>

00015094 <any_other_channel_is_active>:
{
   15094:	b530      	push	{r4, r5, lr}
   15096:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   15098:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   1509a:	b2da      	uxtb	r2, r3
   1509c:	4282      	cmp	r2, r0
   1509e:	d007      	beq.n	150b0 <any_other_channel_is_active+0x1c>
	u16_t pulse_cycle =
   150a0:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   150a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   150a8:	b112      	cbz	r2, 150b0 <any_other_channel_is_active+0x1c>
   150aa:	898d      	ldrh	r5, [r1, #12]
   150ac:	4295      	cmp	r5, r2
   150ae:	d804      	bhi.n	150ba <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   150b0:	3301      	adds	r3, #1
   150b2:	2b04      	cmp	r3, #4
   150b4:	d1f1      	bne.n	1509a <any_other_channel_is_active+0x6>
	return false;
   150b6:	2000      	movs	r0, #0
}
   150b8:	bd30      	pop	{r4, r5, pc}
			return true;
   150ba:	2001      	movs	r0, #1
   150bc:	e7fc      	b.n	150b8 <any_other_channel_is_active+0x24>

000150be <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   150be:	68c2      	ldr	r2, [r0, #12]
{
   150c0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   150c2:	e892 0003 	ldmia.w	r2, {r0, r1}
   150c6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   150ca:	2000      	movs	r0, #0
   150cc:	4770      	bx	lr

000150ce <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   150ce:	68c2      	ldr	r2, [r0, #12]
{
   150d0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   150d2:	e892 0003 	ldmia.w	r2, {r0, r1}
   150d6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   150da:	2000      	movs	r0, #0
   150dc:	4770      	bx	lr

000150de <uarte_nrfx_err_check>:
	return config->uarte_regs;
   150de:	6843      	ldr	r3, [r0, #4]
   150e0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   150e2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   150e6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   150ea:	4770      	bx	lr

000150ec <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   150ec:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   150ee:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   150f0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150f2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
{
   150f6:	b082      	sub	sp, #8
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   150f8:	b160      	cbz	r0, 15114 <uarte_nrfx_poll_in+0x28>
	*c = data->rx_data;
   150fa:	7b12      	ldrb	r2, [r2, #12]
   150fc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150fe:	2000      	movs	r0, #0
   15100:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   15104:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15108:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1510a:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1510c:	2201      	movs	r2, #1
   1510e:	601a      	str	r2, [r3, #0]
}
   15110:	b002      	add	sp, #8
   15112:	4770      	bx	lr
		return -1;
   15114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15118:	e7fa      	b.n	15110 <uarte_nrfx_poll_in+0x24>

0001511a <uarte_nrfx_poll_out>:
{
   1511a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1511e:	6843      	ldr	r3, [r0, #4]
{
   15120:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   15124:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15126:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   15128:	f000 f9a8 	bl	1547c <k_is_in_isr>
   1512c:	b9e0      	cbnz	r0, 15168 <uarte_nrfx_poll_out+0x4e>
		lock = &data->poll_out_lock;
   1512e:	f106 0708 	add.w	r7, r6, #8
   15132:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15134:	f04f 0801 	mov.w	r8, #1
   15138:	f3bf 8f5b 	dmb	ish
   1513c:	e857 3f00 	ldrex	r3, [r7]
   15140:	2b00      	cmp	r3, #0
   15142:	d103      	bne.n	1514c <uarte_nrfx_poll_out+0x32>
   15144:	e847 8200 	strex	r2, r8, [r7]
   15148:	2a00      	cmp	r2, #0
   1514a:	d1f7      	bne.n	1513c <uarte_nrfx_poll_out+0x22>
   1514c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   15150:	d00c      	beq.n	1516c <uarte_nrfx_poll_out+0x52>
	return z_impl_k_sleep(timeout);
   15152:	2021      	movs	r0, #33	; 0x21
   15154:	2100      	movs	r1, #0
   15156:	3d01      	subs	r5, #1
   15158:	f7f0 f8d4 	bl	5304 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1515c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15160:	d1ea      	bne.n	15138 <uarte_nrfx_poll_out+0x1e>
}
   15162:	b004      	add	sp, #16
   15164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   15168:	2301      	movs	r3, #1
   1516a:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1516c:	2300      	movs	r3, #0
   1516e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   15172:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15176:	9303      	str	r3, [sp, #12]
    (void)dummy;
   15178:	9b03      	ldr	r3, [sp, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1517a:	f10d 0307 	add.w	r3, sp, #7
   1517e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15182:	2301      	movs	r3, #1
   15184:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15188:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1518c:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1518e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   15192:	b923      	cbnz	r3, 1519e <uarte_nrfx_poll_out+0x84>
   15194:	2001      	movs	r0, #1
   15196:	f000 f810 	bl	151ba <nrfx_busy_wait>
   1519a:	3d01      	subs	r5, #1
   1519c:	d1f7      	bne.n	1518e <uarte_nrfx_poll_out+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1519e:	2301      	movs	r3, #1
   151a0:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   151a2:	2300      	movs	r3, #0
   151a4:	60b3      	str	r3, [r6, #8]
   151a6:	e7dc      	b.n	15162 <uarte_nrfx_poll_out+0x48>

000151a8 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
   151a8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   151aa:	f7ed fd01 	bl	2bb0 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   151ae:	f7ed fd83 	bl	2cb8 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   151b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   151b6:	f7fc bd0d 	b.w	11bd4 <nrf_cc310_platform_init_no_rng>

000151ba <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   151ba:	f000 b965 	b.w	15488 <z_impl_k_busy_wait>

000151be <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151be:	2300      	movs	r3, #0
   151c0:	5043      	str	r3, [r0, r1]
{
   151c2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   151c4:	5843      	ldr	r3, [r0, r1]
   151c6:	9301      	str	r3, [sp, #4]
    (void)dummy;
   151c8:	9b01      	ldr	r3, [sp, #4]
}
   151ca:	b002      	add	sp, #8
   151cc:	4770      	bx	lr

000151ce <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   151ce:	b538      	push	{r3, r4, r5, lr}
   151d0:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   151d2:	2302      	movs	r3, #2
   151d4:	720b      	strb	r3, [r1, #8]
    if (p_cb->handler)
   151d6:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
   151d8:	724a      	strb	r2, [r1, #9]
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   151da:	4604      	mov	r4, r0
    if (p_cb->handler)
   151dc:	b17b      	cbz	r3, 151fe <start_playback.isra.0+0x30>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   151de:	f012 0f04 	tst.w	r2, #4
   151e2:	bf0c      	ite	eq
   151e4:	2182      	moveq	r1, #130	; 0x82
   151e6:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   151e8:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   151ea:	bf48      	it	mi
   151ec:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   151f0:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   151f2:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   151f4:	bf48      	it	mi
   151f6:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   151fa:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   151fe:	6820      	ldr	r0, [r4, #0]
   15200:	f44f 7182 	mov.w	r1, #260	; 0x104
   15204:	f7ff ffdb 	bl	151be <nrf_pwm_event_clear>
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   15208:	6820      	ldr	r0, [r4, #0]
   1520a:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1520e:	bf05      	ittet	eq
   15210:	2301      	moveq	r3, #1
   15212:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
   15214:	1940      	addne	r0, r0, r5
    return 0;
   15216:	2000      	moveq	r0, #0
}
   15218:	bd38      	pop	{r3, r4, r5, pc}

0001521a <nrfx_pwm_stop>:
{
   1521a:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1521c:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   1521e:	2200      	movs	r2, #0
   15220:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15224:	2201      	movs	r2, #1
   15226:	605a      	str	r2, [r3, #4]
{
   15228:	4605      	mov	r5, r0
   1522a:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1522c:	f7ef fa62 	bl	46f4 <nrfx_pwm_is_stopped>
   15230:	b938      	cbnz	r0, 15242 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   15232:	4628      	mov	r0, r5
   15234:	f7ef fa5e 	bl	46f4 <nrfx_pwm_is_stopped>
   15238:	b918      	cbnz	r0, 15242 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   1523a:	2c00      	cmp	r4, #0
   1523c:	d1f9      	bne.n	15232 <nrfx_pwm_stop+0x18>
}
   1523e:	4620      	mov	r0, r4
   15240:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   15242:	2401      	movs	r4, #1
   15244:	e7fb      	b.n	1523e <nrfx_pwm_stop+0x24>

00015246 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   15246:	f7ff bdc6 	b.w	14dd6 <z_clock_idle_exit>

0001524a <k_mem_slab_init>:
{
   1524a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1524c:	2400      	movs	r4, #0
   1524e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15250:	ea41 0402 	orr.w	r4, r1, r2
   15254:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15258:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1525c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1525e:	d10c      	bne.n	1527a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   15260:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15262:	42a3      	cmp	r3, r4
   15264:	d103      	bne.n	1526e <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   15266:	e9c0 0000 	strd	r0, r0, [r0]
}
   1526a:	2000      	movs	r0, #0
}
   1526c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1526e:	6945      	ldr	r5, [r0, #20]
   15270:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15272:	3401      	adds	r4, #1
		slab->free_list = p;
   15274:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   15276:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15278:	e7f3      	b.n	15262 <k_mem_slab_init+0x18>
		return -EINVAL;
   1527a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1527e:	e7f5      	b.n	1526c <k_mem_slab_init+0x22>

00015280 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   15280:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   15282:	e9c0 3302 	strd	r3, r3, [r0, #8]
   15286:	e9c0 0000 	strd	r0, r0, [r0]
}
   1528a:	4618      	mov	r0, r3
   1528c:	4770      	bx	lr

0001528e <z_find_first_thread_to_unpend>:
{
   1528e:	b510      	push	{r4, lr}
	__asm__ volatile(
   15290:	f04f 0320 	mov.w	r3, #32
   15294:	f3ef 8411 	mrs	r4, BASEPRI
   15298:	f383 8811 	msr	BASEPRI, r3
   1529c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   152a0:	f000 f83f 	bl	15322 <z_priq_dumb_best>
	__asm__ volatile(
   152a4:	f384 8811 	msr	BASEPRI, r4
   152a8:	f3bf 8f6f 	isb	sy
}
   152ac:	bd10      	pop	{r4, pc}

000152ae <z_unpend_thread_no_timeout>:
{
   152ae:	b538      	push	{r3, r4, r5, lr}
   152b0:	4604      	mov	r4, r0
	__asm__ volatile(
   152b2:	f04f 0320 	mov.w	r3, #32
   152b6:	f3ef 8511 	mrs	r5, BASEPRI
   152ba:	f383 8811 	msr	BASEPRI, r3
   152be:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   152c2:	4601      	mov	r1, r0
   152c4:	6880      	ldr	r0, [r0, #8]
   152c6:	f7ef fd49 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   152ca:	7b63      	ldrb	r3, [r4, #13]
   152cc:	f023 0302 	bic.w	r3, r3, #2
   152d0:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   152d2:	2300      	movs	r3, #0
   152d4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   152d6:	f385 8811 	msr	BASEPRI, r5
   152da:	f3bf 8f6f 	isb	sy
}
   152de:	bd38      	pop	{r3, r4, r5, pc}

000152e0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   152e0:	b921      	cbnz	r1, 152ec <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   152e2:	f3ef 8005 	mrs	r0, IPSR
   152e6:	b908      	cbnz	r0, 152ec <z_reschedule+0xc>
   152e8:	f7ed bdb6 	b.w	2e58 <arch_swap>
   152ec:	f381 8811 	msr	BASEPRI, r1
   152f0:	f3bf 8f6f 	isb	sy
}
   152f4:	4770      	bx	lr

000152f6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   152f6:	4603      	mov	r3, r0
   152f8:	b920      	cbnz	r0, 15304 <z_reschedule_irqlock+0xe>
   152fa:	f3ef 8205 	mrs	r2, IPSR
   152fe:	b90a      	cbnz	r2, 15304 <z_reschedule_irqlock+0xe>
   15300:	f7ed bdaa 	b.w	2e58 <arch_swap>
   15304:	f383 8811 	msr	BASEPRI, r3
   15308:	f3bf 8f6f 	isb	sy
}
   1530c:	4770      	bx	lr

0001530e <z_reschedule_unlocked>:
	__asm__ volatile(
   1530e:	f04f 0320 	mov.w	r3, #32
   15312:	f3ef 8011 	mrs	r0, BASEPRI
   15316:	f383 8811 	msr	BASEPRI, r3
   1531a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1531e:	f7ff bfea 	b.w	152f6 <z_reschedule_irqlock>

00015322 <z_priq_dumb_best>:
	return list->head == list;
   15322:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15324:	4298      	cmp	r0, r3
   15326:	d004      	beq.n	15332 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   15328:	2b00      	cmp	r3, #0
   1532a:	bf38      	it	cc
   1532c:	2300      	movcc	r3, #0
   1532e:	4618      	mov	r0, r3
   15330:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15332:	2000      	movs	r0, #0
}
   15334:	4770      	bx	lr

00015336 <z_ready_thread>:
{
   15336:	b510      	push	{r4, lr}
   15338:	f04f 0320 	mov.w	r3, #32
   1533c:	f3ef 8411 	mrs	r4, BASEPRI
   15340:	f383 8811 	msr	BASEPRI, r3
   15344:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   15348:	f7ef fd5e 	bl	4e08 <ready_thread>
	__asm__ volatile(
   1534c:	f384 8811 	msr	BASEPRI, r4
   15350:	f3bf 8f6f 	isb	sy
}
   15354:	bd10      	pop	{r4, pc}

00015356 <z_thread_timeout>:
{
   15356:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   15358:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1535c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1535e:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   15362:	b1c3      	cbz	r3, 15396 <z_thread_timeout+0x40>
	__asm__ volatile(
   15364:	f04f 0320 	mov.w	r3, #32
   15368:	f3ef 8511 	mrs	r5, BASEPRI
   1536c:	f383 8811 	msr	BASEPRI, r3
   15370:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   15374:	f850 0c10 	ldr.w	r0, [r0, #-16]
   15378:	f7ef fcf0 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1537c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   15380:	f023 0302 	bic.w	r3, r3, #2
   15384:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   15388:	2300      	movs	r3, #0
   1538a:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   1538e:	f385 8811 	msr	BASEPRI, r5
   15392:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15396:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1539a:	f023 0314 	bic.w	r3, r3, #20
   1539e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   153a2:	4608      	mov	r0, r1
}
   153a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   153a8:	f7ff bfc5 	b.w	15336 <z_ready_thread>

000153ac <z_remove_thread_from_ready_q>:
{
   153ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   153ae:	f04f 0320 	mov.w	r3, #32
   153b2:	f3ef 8411 	mrs	r4, BASEPRI
   153b6:	f383 8811 	msr	BASEPRI, r3
   153ba:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   153be:	f7ef fe81 	bl	50c4 <unready_thread>
	__asm__ volatile(
   153c2:	f384 8811 	msr	BASEPRI, r4
   153c6:	f3bf 8f6f 	isb	sy
}
   153ca:	bd10      	pop	{r4, pc}

000153cc <add_to_waitq_locked>:
{
   153cc:	b538      	push	{r3, r4, r5, lr}
   153ce:	4604      	mov	r4, r0
   153d0:	460d      	mov	r5, r1
	unready_thread(thread);
   153d2:	f7ef fe77 	bl	50c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   153d6:	7b63      	ldrb	r3, [r4, #13]
   153d8:	f043 0302 	orr.w	r3, r3, #2
   153dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   153de:	b1c5      	cbz	r5, 15412 <add_to_waitq_locked+0x46>
	return list->head == list;
   153e0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   153e2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   153e4:	429d      	cmp	r5, r3
   153e6:	bf08      	it	eq
   153e8:	2300      	moveq	r3, #0
   153ea:	2b00      	cmp	r3, #0
   153ec:	bf38      	it	cc
   153ee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   153f0:	b183      	cbz	r3, 15414 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   153f2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   153f6:	f993 200e 	ldrsb.w	r2, [r3, #14]
   153fa:	4291      	cmp	r1, r2
   153fc:	db04      	blt.n	15408 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   153fe:	686a      	ldr	r2, [r5, #4]
   15400:	429a      	cmp	r2, r3
   15402:	d007      	beq.n	15414 <add_to_waitq_locked+0x48>
   15404:	681b      	ldr	r3, [r3, #0]
   15406:	e7f3      	b.n	153f0 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   15408:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1540a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1540e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   15410:	605c      	str	r4, [r3, #4]
}
   15412:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   15414:	686b      	ldr	r3, [r5, #4]
   15416:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   15418:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1541a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1541c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1541e:	606c      	str	r4, [r5, #4]
   15420:	e7f7      	b.n	15412 <add_to_waitq_locked+0x46>

00015422 <z_unpend_first_thread>:
{
   15422:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15424:	f04f 0320 	mov.w	r3, #32
   15428:	f3ef 8211 	mrs	r2, BASEPRI
   1542c:	f383 8811 	msr	BASEPRI, r3
   15430:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   15434:	f7ff ff75 	bl	15322 <z_priq_dumb_best>
   15438:	4604      	mov	r4, r0
	__asm__ volatile(
   1543a:	f382 8811 	msr	BASEPRI, r2
   1543e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   15442:	b1c8      	cbz	r0, 15478 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   15444:	f04f 0320 	mov.w	r3, #32
   15448:	f3ef 8511 	mrs	r5, BASEPRI
   1544c:	f383 8811 	msr	BASEPRI, r3
   15450:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   15454:	4601      	mov	r1, r0
   15456:	6880      	ldr	r0, [r0, #8]
   15458:	f7ef fc80 	bl	4d5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1545c:	7b63      	ldrb	r3, [r4, #13]
   1545e:	f023 0302 	bic.w	r3, r3, #2
   15462:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   15464:	2300      	movs	r3, #0
   15466:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15468:	f385 8811 	msr	BASEPRI, r5
   1546c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   15470:	f104 0018 	add.w	r0, r4, #24
   15474:	f000 f80f 	bl	15496 <z_abort_timeout>
}
   15478:	4620      	mov	r0, r4
   1547a:	bd38      	pop	{r3, r4, r5, pc}

0001547c <k_is_in_isr>:
   1547c:	f3ef 8005 	mrs	r0, IPSR
}
   15480:	3800      	subs	r0, #0
   15482:	bf18      	it	ne
   15484:	2001      	movne	r0, #1
   15486:	4770      	bx	lr

00015488 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   15488:	f7ee b9f8 	b.w	387c <arch_busy_wait>

0001548c <z_impl_k_thread_name_set>:
}
   1548c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   15490:	4770      	bx	lr

00015492 <k_thread_name_get>:
}
   15492:	2000      	movs	r0, #0
   15494:	4770      	bx	lr

00015496 <z_abort_timeout>:
{
   15496:	b510      	push	{r4, lr}
	__asm__ volatile(
   15498:	f04f 0220 	mov.w	r2, #32
   1549c:	f3ef 8411 	mrs	r4, BASEPRI
   154a0:	f382 8811 	msr	BASEPRI, r2
   154a4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   154a8:	6803      	ldr	r3, [r0, #0]
   154aa:	b13b      	cbz	r3, 154bc <z_abort_timeout+0x26>
			remove_timeout(to);
   154ac:	f7f0 f858 	bl	5560 <remove_timeout>
			ret = 0;
   154b0:	2000      	movs	r0, #0
	__asm__ volatile(
   154b2:	f384 8811 	msr	BASEPRI, r4
   154b6:	f3bf 8f6f 	isb	sy
}
   154ba:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   154bc:	f06f 0015 	mvn.w	r0, #21
   154c0:	e7f7      	b.n	154b2 <z_abort_timeout+0x1c>

000154c2 <z_get_next_timeout_expiry>:
{
   154c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   154c4:	f04f 0320 	mov.w	r3, #32
   154c8:	f3ef 8411 	mrs	r4, BASEPRI
   154cc:	f383 8811 	msr	BASEPRI, r3
   154d0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   154d4:	f7f0 f858 	bl	5588 <next_timeout>
	__asm__ volatile(
   154d8:	f384 8811 	msr	BASEPRI, r4
   154dc:	f3bf 8f6f 	isb	sy
}
   154e0:	bd10      	pop	{r4, pc}

000154e2 <z_set_timeout_expiry>:
{
   154e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   154e4:	4604      	mov	r4, r0
   154e6:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   154e8:	f04f 0320 	mov.w	r3, #32
   154ec:	f3ef 8511 	mrs	r5, BASEPRI
   154f0:	f383 8811 	msr	BASEPRI, r3
   154f4:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   154f8:	f7f0 f846 	bl	5588 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   154fc:	2801      	cmp	r0, #1
   154fe:	dd05      	ble.n	1550c <z_set_timeout_expiry+0x2a>
   15500:	42a0      	cmp	r0, r4
   15502:	9901      	ldr	r1, [sp, #4]
   15504:	dd02      	ble.n	1550c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   15506:	4620      	mov	r0, r4
   15508:	f7ed fac0 	bl	2a8c <z_clock_set_timeout>
	__asm__ volatile(
   1550c:	f385 8811 	msr	BASEPRI, r5
   15510:	f3bf 8f6f 	isb	sy
}
   15514:	b003      	add	sp, #12
   15516:	bd30      	pop	{r4, r5, pc}

00015518 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   15518:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1551a:	f7f0 f91f 	bl	575c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1551e:	bd08      	pop	{r3, pc}

00015520 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   15520:	f7f0 b91c 	b.w	575c <z_tick_get>

00015524 <k_timer_init>:
	timer->status = 0U;
   15524:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   15526:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   1552a:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   1552e:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   15532:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   15536:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   15538:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1553a:	4770      	bx	lr

0001553c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1553c:	b510      	push	{r4, lr}
   1553e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   15540:	f7ff ffa9 	bl	15496 <z_abort_timeout>

	if (inactive) {
   15544:	b9d8      	cbnz	r0, 1557e <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   15546:	69e3      	ldr	r3, [r4, #28]
   15548:	b10b      	cbz	r3, 1554e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1554a:	4620      	mov	r0, r4
   1554c:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1554e:	f104 0010 	add.w	r0, r4, #16
   15552:	2100      	movs	r1, #0
   15554:	f7ff fe9b 	bl	1528e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   15558:	4604      	mov	r4, r0
   1555a:	b180      	cbz	r0, 1557e <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1555c:	f7ff fea7 	bl	152ae <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   15560:	4620      	mov	r0, r4
   15562:	f7ff fee8 	bl	15336 <z_ready_thread>
	__asm__ volatile(
   15566:	f04f 0320 	mov.w	r3, #32
   1556a:	f3ef 8011 	mrs	r0, BASEPRI
   1556e:	f383 8811 	msr	BASEPRI, r3
   15572:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   15576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1557a:	f7ff bebc 	b.w	152f6 <z_reschedule_irqlock>
   1557e:	bd10      	pop	{r4, pc}

00015580 <k_heap_init>:
{
   15580:	b410      	push	{r4}
   15582:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   15586:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1558a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1558e:	f7ff b805 	b.w	1459c <sys_heap_init>

00015592 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   15592:	4770      	bx	lr

00015594 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
   15594:	6803      	ldr	r3, [r0, #0]
   15596:	691b      	ldr	r3, [r3, #16]
   15598:	4718      	bx	r3

0001559a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
   1559a:	6803      	ldr	r3, [r0, #0]
   1559c:	695b      	ldr	r3, [r3, #20]
   1559e:	4718      	bx	r3

000155a0 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155a0:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   155a2:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155a4:	d010      	beq.n	155c8 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155a6:	f241 0304 	movw	r3, #4100	; 0x1004
      if (registration.builtin_code == op) {
   155aa:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155ae:	58c4      	ldr	r4, [r0, r3]
   155b0:	2300      	movs	r3, #0
   155b2:	429c      	cmp	r4, r3
   155b4:	d008      	beq.n	155c8 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
   155b6:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
   155b8:	58ae      	ldr	r6, [r5, r2]
   155ba:	428e      	cmp	r6, r1
   155bc:	d102      	bne.n	155c4 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
   155be:	3204      	adds	r2, #4
   155c0:	4410      	add	r0, r2
  }
   155c2:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155c4:	3301      	adds	r3, #1
   155c6:	e7f4      	b.n	155b2 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x12>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155c8:	2000      	movs	r0, #0
   155ca:	e7fa      	b.n	155c2 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x22>

000155cc <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   155cc:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   155ce:	f241 2388 	movw	r3, #4744	; 0x1288
   155d2:	58c4      	ldr	r4, [r0, r3]
   155d4:	2c80      	cmp	r4, #128	; 0x80
   155d6:	d80e      	bhi.n	155f6 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
   155d8:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
   155dc:	3208      	adds	r2, #8
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   155de:	2300      	movs	r3, #0
   155e0:	429c      	cmp	r4, r3
   155e2:	d00c      	beq.n	155fe <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x32>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   155e4:	f812 5b01 	ldrb.w	r5, [r2], #1
   155e8:	428d      	cmp	r5, r1
   155ea:	d106      	bne.n	155fa <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2e>
   155ec:	f203 4322 	addw	r3, r3, #1058	; 0x422
   155f0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
   155f4:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   155f6:	f008 ffec 	bl	1e5d2 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   155fa:	3301      	adds	r3, #1
   155fc:	e7f0      	b.n	155e0 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    return nullptr;
   155fe:	2000      	movs	r0, #0
   15600:	e7f8      	b.n	155f4 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>

00015602 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   15602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15606:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
  const TfLiteRegistration* FindOp(const char* op) const override {
   1560a:	4604      	mov	r4, r0
   1560c:	4688      	mov	r8, r1
   1560e:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15610:	2500      	movs	r5, #0
   15612:	3704      	adds	r7, #4
   15614:	683b      	ldr	r3, [r7, #0]
   15616:	42ab      	cmp	r3, r5
   15618:	d910      	bls.n	1563c <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x3a>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   1561a:	69b3      	ldr	r3, [r6, #24]
   1561c:	2b20      	cmp	r3, #32
   1561e:	d002      	beq.n	15626 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x24>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15620:	3501      	adds	r5, #1
   15622:	3620      	adds	r6, #32
   15624:	e7f6      	b.n	15614 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x12>
          (strcmp(registration.custom_name, op) == 0)) {
   15626:	69f0      	ldr	r0, [r6, #28]
   15628:	4641      	mov	r1, r8
   1562a:	f7eb fedd 	bl	13e8 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   1562e:	2800      	cmp	r0, #0
   15630:	d1f6      	bne.n	15620 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x1e>
      const TfLiteRegistration& registration = registrations_[i];
   15632:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   15636:	3004      	adds	r0, #4
  }
   15638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
   1563c:	2000      	movs	r0, #0
   1563e:	e7fb      	b.n	15638 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x36>

00015640 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   15640:	6840      	ldr	r0, [r0, #4]
   15642:	6803      	ldr	r3, [r0, #0]
   15644:	68db      	ldr	r3, [r3, #12]
   15646:	4718      	bx	r3

00015648 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   15648:	4770      	bx	lr

0001564a <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1564a:	4770      	bx	lr

0001564c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   1564c:	4770      	bx	lr

0001564e <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   1564e:	b510      	push	{r4, lr}
   15650:	4604      	mov	r4, r0
   15652:	f008 ff98 	bl	1e586 <_ZdlPv>
   15656:	4620      	mov	r0, r4
   15658:	bd10      	pop	{r4, pc}

0001565a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   1565a:	b510      	push	{r4, lr}
   1565c:	4604      	mov	r4, r0
   1565e:	f008 ff92 	bl	1e586 <_ZdlPv>
   15662:	4620      	mov	r0, r4
   15664:	bd10      	pop	{r4, pc}

00015666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   15666:	6803      	ldr	r3, [r0, #0]
   15668:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1566a:	8803      	ldrh	r3, [r0, #0]
   1566c:	428b      	cmp	r3, r1
   1566e:	bf8c      	ite	hi
   15670:	5a40      	ldrhhi	r0, [r0, r1]
   15672:	2000      	movls	r0, #0
  }
   15674:	4770      	bx	lr

00015676 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
   15676:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   15678:	2108      	movs	r1, #8
   1567a:	4604      	mov	r4, r0
   1567c:	f7ff fff3 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15680:	b110      	cbz	r0, 15688 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   15682:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15684:	5820      	ldr	r0, [r4, r0]
   15686:	4418      	add	r0, r3
  }
   15688:	bd10      	pop	{r4, pc}

0001568a <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   1568a:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   1568c:	210a      	movs	r1, #10
   1568e:	4604      	mov	r4, r0
   15690:	f7ff ffe9 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15694:	b110      	cbz	r0, 1569c <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   15696:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15698:	5820      	ldr	r0, [r4, r0]
   1569a:	4418      	add	r0, r3
  }
   1569c:	bd10      	pop	{r4, pc}

0001569e <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
   1569e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   156a0:	210e      	movs	r1, #14
   156a2:	4604      	mov	r4, r0
   156a4:	f7ff ffdf 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   156a8:	b100      	cbz	r0, 156ac <_ZNK6tflite6Tensor11is_variableEv+0xe>
   156aa:	5c20      	ldrb	r0, [r4, r0]
  }
   156ac:	3800      	subs	r0, #0
   156ae:	bf18      	it	ne
   156b0:	2001      	movne	r0, #1
   156b2:	bd10      	pop	{r4, pc}

000156b4 <_ZNK6tflite14MicroAllocator10used_bytesEv>:
  return memory_allocator_->GetUsedBytes();
   156b4:	6840      	ldr	r0, [r0, #4]
   156b6:	f000 b8ec 	b.w	15892 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>

000156ba <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156bc:	4615      	mov	r5, r2
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156be:	6802      	ldr	r2, [r0, #0]
   156c0:	9301      	str	r3, [sp, #4]
   156c2:	6897      	ldr	r7, [r2, #8]
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156c4:	460e      	mov	r6, r1
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156c6:	461a      	mov	r2, r3
   156c8:	4629      	mov	r1, r5
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156ca:	4604      	mov	r4, r0
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156cc:	47b8      	blx	r7
   156ce:	b950      	cbnz	r0, 156e6 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c>
  TF_LITE_ENSURE_STATUS(
   156d0:	6822      	ldr	r2, [r4, #0]
   156d2:	9b01      	ldr	r3, [sp, #4]
   156d4:	68d7      	ldr	r7, [r2, #12]
   156d6:	4631      	mov	r1, r6
   156d8:	462a      	mov	r2, r5
   156da:	4620      	mov	r0, r4
   156dc:	46bc      	mov	ip, r7
}
   156de:	b003      	add	sp, #12
   156e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  TF_LITE_ENSURE_STATUS(
   156e4:	4760      	bx	ip
}
   156e6:	b003      	add	sp, #12
   156e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000156ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   156ea:	b510      	push	{r4, lr}
   156ec:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   156ee:	f7ff ffba 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156f2:	b110      	cbz	r0, 156fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x10>
    auto p = data_ + field_offset;
   156f4:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156f6:	5820      	ldr	r0, [r4, r0]
   156f8:	4418      	add	r0, r3
  }
   156fa:	bd10      	pop	{r4, pc}

000156fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   156fc:	b510      	push	{r4, lr}
   156fe:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15700:	f7ff ffb1 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15704:	b110      	cbz	r0, 1570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
   15706:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15708:	5820      	ldr	r0, [r4, r0]
   1570a:	4418      	add	r0, r3
  }
   1570c:	bd10      	pop	{r4, pc}

0001570e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   1570e:	b510      	push	{r4, lr}
   15710:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15712:	f7ff ffa8 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15716:	b110      	cbz	r0, 1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   15718:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1571a:	5820      	ldr	r0, [r4, r0]
   1571c:	4418      	add	r0, r3
  }
   1571e:	bd10      	pop	{r4, pc}

00015720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   15720:	b510      	push	{r4, lr}
   15722:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15724:	f7ff ff9f 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15728:	b110      	cbz	r0, 15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   1572a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1572c:	5820      	ldr	r0, [r4, r0]
   1572e:	4418      	add	r0, r3
  }
   15730:	bd10      	pop	{r4, pc}

00015732 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
   15732:	68c3      	ldr	r3, [r0, #12]
   15734:	6818      	ldr	r0, [r3, #0]
   15736:	f7f0 bb3b 	b.w	5db0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>

0001573a <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
   1573a:	68c0      	ldr	r0, [r0, #12]
                                                        int* buffer_idx) {
   1573c:	4613      	mov	r3, r2
  return helper->allocator_->RequestScratchBufferInArena(
   1573e:	460a      	mov	r2, r1
   15740:	6881      	ldr	r1, [r0, #8]
   15742:	6800      	ldr	r0, [r0, #0]
   15744:	f7f0 bb4a 	b.w	5ddc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>

00015748 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
      ->allocator_->GetScratchBuffer(buffer_idx);
   15748:	68c3      	ldr	r3, [r0, #12]
   1574a:	6818      	ldr	r0, [r3, #0]
   1574c:	f7f0 bb78 	b.w	5e40 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>

00015750 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
   15750:	b40e      	push	{r1, r2, r3}
   15752:	b503      	push	{r0, r1, lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
   15754:	68c3      	ldr	r3, [r0, #12]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15756:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
   15758:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   1575a:	6803      	ldr	r3, [r0, #0]
                                  const char* format, ...) {
   1575c:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15760:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   15762:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15764:	4798      	blx	r3
}
   15766:	b002      	add	sp, #8
   15768:	f85d eb04 	ldr.w	lr, [sp], #4
   1576c:	b003      	add	sp, #12
   1576e:	4770      	bx	lr

00015770 <_ZN6tflite13ScopedProfileD1Ev>:
  ~ScopedProfile() {
   15770:	b510      	push	{r4, lr}
   15772:	4604      	mov	r4, r0
    if (profiler_) {
   15774:	6800      	ldr	r0, [r0, #0]
   15776:	b118      	cbz	r0, 15780 <_ZN6tflite13ScopedProfileD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
   15778:	6803      	ldr	r3, [r0, #0]
   1577a:	6861      	ldr	r1, [r4, #4]
   1577c:	691b      	ldr	r3, [r3, #16]
   1577e:	4798      	blx	r3
  }
   15780:	4620      	mov	r0, r4
   15782:	bd10      	pop	{r4, pc}

00015784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   15784:	b570      	push	{r4, r5, r6, lr}
   15786:	9e05      	ldr	r6, [sp, #20]
   15788:	461d      	mov	r5, r3
      context_helper_(error_reporter_, &allocator_) {
   1578a:	2300      	movs	r3, #0
MicroInterpreter::MicroInterpreter(const Model* model,
   1578c:	4604      	mov	r4, r0
      context_helper_(error_reporter_, &allocator_) {
   1578e:	e9c0 3100 	strd	r3, r1, [r0]
   15792:	e9c0 2602 	strd	r2, r6, [r0, #8]
   15796:	4619      	mov	r1, r3
   15798:	2250      	movs	r2, #80	; 0x50
   1579a:	3010      	adds	r0, #16
   1579c:	f008 ff3c 	bl	1e618 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   157a0:	9904      	ldr	r1, [sp, #16]
   157a2:	4632      	mov	r2, r6
   157a4:	4628      	mov	r0, r5
   157a6:	f7f0 fae7 	bl	5d78 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      context_helper_(error_reporter_, &allocator_) {
   157aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   157ae:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
   157b2:	68e3      	ldr	r3, [r4, #12]
   157b4:	6620      	str	r0, [r4, #96]	; 0x60
      : allocator_(allocator), error_reporter_(error_reporter) {}
   157b6:	e9c4 031b 	strd	r0, r3, [r4, #108]	; 0x6c
   157ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  Init(profiler);
   157be:	4620      	mov	r0, r4
   157c0:	9906      	ldr	r1, [sp, #24]
   157c2:	6763      	str	r3, [r4, #116]	; 0x74
   157c4:	f7f1 f8fe 	bl	69c4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
   157c8:	4620      	mov	r0, r4
   157ca:	bd70      	pop	{r4, r5, r6, pc}

000157cc <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   157cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (node_and_registrations_ != nullptr) {
   157ce:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
   157d0:	4604      	mov	r4, r0
  if (node_and_registrations_ != nullptr) {
   157d2:	b1b3      	cbz	r3, 15802 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   157d4:	2500      	movs	r5, #0
      TfLiteNode* node = &(node_and_registrations_[i].node);
   157d6:	2628      	movs	r6, #40	; 0x28
        registration->free(&context_, node->user_data);
   157d8:	f100 0710 	add.w	r7, r0, #16
    return const_cast<Table *>(this)->GetPointer<P>(field);
   157dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   157de:	210a      	movs	r1, #10
   157e0:	f7ff ff9e 	bl	15720 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   157e4:	6803      	ldr	r3, [r0, #0]
   157e6:	42ab      	cmp	r3, r5
   157e8:	d90b      	bls.n	15802 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
      TfLiteNode* node = &(node_and_registrations_[i].node);
   157ea:	6823      	ldr	r3, [r4, #0]
   157ec:	fb06 3305 	mla	r3, r6, r5, r3
      const TfLiteRegistration* registration =
   157f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
   157f2:	b122      	cbz	r2, 157fe <_ZN6tflite16MicroInterpreterD1Ev+0x32>
   157f4:	6852      	ldr	r2, [r2, #4]
   157f6:	b112      	cbz	r2, 157fe <_ZN6tflite16MicroInterpreterD1Ev+0x32>
        registration->free(&context_, node->user_data);
   157f8:	6919      	ldr	r1, [r3, #16]
   157fa:	4638      	mov	r0, r7
   157fc:	4790      	blx	r2
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   157fe:	3501      	adds	r5, #1
   15800:	e7ec      	b.n	157dc <_ZN6tflite16MicroInterpreterD1Ev+0x10>
}
   15802:	4620      	mov	r0, r4
   15804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015806 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   15806:	b530      	push	{r4, r5, lr}
   15808:	4603      	mov	r3, r0
  char* current = main;
   1580a:	4604      	mov	r4, r0
   1580c:	4620      	mov	r0, r4
  while (*current != 0) {
   1580e:	f814 5b01 	ldrb.w	r5, [r4], #1
   15812:	2d00      	cmp	r5, #0
   15814:	d1fa      	bne.n	1580c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
   15816:	3901      	subs	r1, #1
   15818:	440b      	add	r3, r1
   1581a:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   1581c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   15820:	b121      	cbz	r1, 1582c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   15822:	4298      	cmp	r0, r3
   15824:	d202      	bcs.n	1582c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   15826:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   1582a:	e7f7      	b.n	1581c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
   1582c:	2300      	movs	r3, #0
   1582e:	7003      	strb	r3, [r0, #0]
}
   15830:	bd30      	pop	{r4, r5, pc}

00015832 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   15832:	b570      	push	{r4, r5, r6, lr}
   15834:	460c      	mov	r4, r1
    int32_t digit = i % base;
   15836:	fbb0 f6f2 	udiv	r6, r0, r2
   1583a:	fb02 0516 	mls	r5, r2, r6, r0
    if (digit < 10) {
   1583e:	b26b      	sxtb	r3, r5
   15840:	2d09      	cmp	r5, #9
      character = '0' + digit;
   15842:	bf94      	ite	ls
   15844:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
   15846:	3357      	addhi	r3, #87	; 0x57
    *buffer++ = character;
   15848:	4625      	mov	r5, r4
      character = 'a' + (digit - 10);
   1584a:	b2db      	uxtb	r3, r3
  } while (i > 0);
   1584c:	4282      	cmp	r2, r0
    *buffer++ = character;
   1584e:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   15852:	d90a      	bls.n	1586a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x38>
  *buffer = 0;
   15854:	2300      	movs	r3, #0
   15856:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   15858:	42a1      	cmp	r1, r4
   1585a:	d209      	bcs.n	15870 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3e>
    char tmp = *p1;
   1585c:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   1585e:	7822      	ldrb	r2, [r4, #0]
   15860:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   15864:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   15868:	e7f6      	b.n	15858 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x26>
   1586a:	462c      	mov	r4, r5
    i /= base;
   1586c:	4630      	mov	r0, r6
   1586e:	e7e2      	b.n	15836 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4>
}
   15870:	4628      	mov	r0, r5
   15872:	bd70      	pop	{r4, r5, r6, pc}

00015874 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15874:	4770      	bx	lr

00015876 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
   15876:	b510      	push	{r4, lr}
   15878:	4604      	mov	r4, r0
   1587a:	f008 fe84 	bl	1e586 <_ZdlPv>
   1587e:	4620      	mov	r0, r4
   15880:	bd10      	pop	{r4, pc}

00015882 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
   15882:	6900      	ldr	r0, [r0, #16]
   15884:	4770      	bx	lr

00015886 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
   15886:	6940      	ldr	r0, [r0, #20]
   15888:	4770      	bx	lr

0001588a <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
   1588a:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
}
   1588e:	1a10      	subs	r0, r2, r0
   15890:	4770      	bx	lr

00015892 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>:
size_t SimpleMemoryAllocator::GetUsedBytes() const {
  return GetBufferSize() - GetAvailableMemory();
}

size_t SimpleMemoryAllocator::GetBufferSize() const {
  return buffer_tail_ - buffer_head_;
   15892:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   15896:	1a9a      	subs	r2, r3, r2
  return tail_ - head_;
   15898:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
   1589c:	1a18      	subs	r0, r3, r0
}
   1589e:	1a10      	subs	r0, r2, r0
   158a0:	4770      	bx	lr

000158a2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   158a2:	2000      	movs	r0, #0
   158a4:	4770      	bx	lr

000158a6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:
   158a6:	2000      	movs	r0, #0
   158a8:	4770      	bx	lr

000158aa <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   158aa:	6803      	ldr	r3, [r0, #0]
   158ac:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   158ae:	b510      	push	{r4, lr}
   158b0:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   158b2:	dd03      	ble.n	158bc <_ZN6tflite12RuntimeShapeD1Ev+0x12>
      delete[] dims_pointer_;
   158b4:	6840      	ldr	r0, [r0, #4]
   158b6:	b108      	cbz	r0, 158bc <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   158b8:	f008 fe67 	bl	1e58a <_ZdaPv>
  }
   158bc:	4620      	mov	r0, r4
   158be:	bd10      	pop	{r4, pc}

000158c0 <_ZNK6tflite12RuntimeShape4DimsEi>:
    TFLITE_DCHECK_GE(i, 0);
   158c0:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   158c2:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   158c4:	da01      	bge.n	158ca <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   158c6:	f008 fe84 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LT(i, size_);
   158ca:	6803      	ldr	r3, [r0, #0]
   158cc:	428b      	cmp	r3, r1
   158ce:	ddfa      	ble.n	158c6 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158d0:	2b05      	cmp	r3, #5
   158d2:	bfcb      	itete	gt
   158d4:	6843      	ldrgt	r3, [r0, #4]
   158d6:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   158da:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   158de:	6840      	ldrle	r0, [r0, #4]
  }
   158e0:	bd08      	pop	{r3, pc}

000158e2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   158e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   158e6:	680b      	ldr	r3, [r1, #0]
   158e8:	6806      	ldr	r6, [r0, #0]
   158ea:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   158ec:	4604      	mov	r4, r0
   158ee:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   158f0:	d001      	beq.n	158f6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   158f2:	f008 fe6e 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   158f6:	2500      	movs	r5, #0
   158f8:	42b5      	cmp	r5, r6
   158fa:	da0c      	bge.n	15916 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   158fc:	4629      	mov	r1, r5
   158fe:	4620      	mov	r0, r4
   15900:	f7ff ffde 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15904:	4629      	mov	r1, r5
   15906:	4680      	mov	r8, r0
   15908:	4638      	mov	r0, r7
   1590a:	f7ff ffd9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1590e:	4580      	cmp	r8, r0
   15910:	d1ef      	bne.n	158f2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   15912:	3501      	adds	r5, #1
   15914:	e7f0      	b.n	158f8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15916:	2e05      	cmp	r6, #5
   15918:	bfcc      	ite	gt
   1591a:	6864      	ldrgt	r4, [r4, #4]
   1591c:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1591e:	2300      	movs	r3, #0
    int buffer_size = 1;
   15920:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   15922:	429e      	cmp	r6, r3
   15924:	dd04      	ble.n	15930 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   15926:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1592a:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1592c:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   1592e:	e7f8      	b.n	15922 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   15930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   15934:	b570      	push	{r4, r5, r6, lr}
   15936:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   15938:	b911      	cbnz	r1, 15940 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   1593a:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   1593c:	4620      	mov	r0, r4
   1593e:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   15940:	688d      	ldr	r5, [r1, #8]
   15942:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   15946:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   15948:	2b05      	cmp	r3, #5
   1594a:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1594e:	dc05      	bgt.n	1595c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15950:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   15952:	4632      	mov	r2, r6
   15954:	4629      	mov	r1, r5
   15956:	f008 fe51 	bl	1e5fc <memcpy>
  }
   1595a:	e7ef      	b.n	1593c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32[dimensions_count];
   1595c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   15960:	4283      	cmp	r3, r0
   15962:	bfb4      	ite	lt
   15964:	4630      	movlt	r0, r6
   15966:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   1596a:	f008 fe1f 	bl	1e5ac <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1596e:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   15970:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15972:	2b05      	cmp	r3, #5
   15974:	dced      	bgt.n	15952 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   15976:	e7eb      	b.n	15950 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00015978 <_ZN6tflite12RuntimeShape6SetDimEii>:
    TFLITE_DCHECK_GE(i, 0);
   15978:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   1597a:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   1597c:	da01      	bge.n	15982 <_ZN6tflite12RuntimeShape6SetDimEii+0xa>
   1597e:	f008 fe28 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LT(i, size_);
   15982:	6803      	ldr	r3, [r0, #0]
   15984:	428b      	cmp	r3, r1
   15986:	ddfa      	ble.n	1597e <_ZN6tflite12RuntimeShape6SetDimEii+0x6>
    if (size_ > kMaxSmallSize) {
   15988:	2b05      	cmp	r3, #5
      dims_pointer_[i] = val;
   1598a:	bfcb      	itete	gt
   1598c:	6843      	ldrgt	r3, [r0, #4]
      dims_[i] = val;
   1598e:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   15992:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   15996:	6042      	strle	r2, [r0, #4]
  }
   15998:	bd08      	pop	{r3, pc}

0001599a <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
   1599a:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   1599c:	6803      	ldr	r3, [r0, #0]
   1599e:	2b05      	cmp	r3, #5
  inline void Resize(int dimensions_count) {
   159a0:	4605      	mov	r5, r0
   159a2:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   159a4:	dd03      	ble.n	159ae <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
      delete[] dims_pointer_;
   159a6:	6840      	ldr	r0, [r0, #4]
   159a8:	b108      	cbz	r0, 159ae <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   159aa:	f008 fdee 	bl	1e58a <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   159ae:	2c05      	cmp	r4, #5
    size_ = dimensions_count;
   159b0:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   159b2:	dd09      	ble.n	159c8 <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
      dims_pointer_ = new int32[dimensions_count];
   159b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   159b8:	429c      	cmp	r4, r3
   159ba:	bfb4      	ite	lt
   159bc:	00a0      	lsllt	r0, r4, #2
   159be:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   159c2:	f008 fdf3 	bl	1e5ac <_Znaj>
   159c6:	6068      	str	r0, [r5, #4]
  }
   159c8:	bd38      	pop	{r3, r4, r5, pc}

000159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
  inline int FlatSize() const {
   159ca:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   159cc:	6801      	ldr	r1, [r0, #0]
   159ce:	2905      	cmp	r1, #5
   159d0:	bfcc      	ite	gt
   159d2:	6843      	ldrgt	r3, [r0, #4]
   159d4:	1d03      	addle	r3, r0, #4
    for (int i = 0; i < size_; i++) {
   159d6:	2200      	movs	r2, #0
    int buffer_size = 1;
   159d8:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   159da:	428a      	cmp	r2, r1
   159dc:	da04      	bge.n	159e8 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   159de:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   159e2:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   159e4:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   159e6:	e7f8      	b.n	159da <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   159e8:	bd10      	pop	{r4, pc}

000159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   159ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159ee:	4698      	mov	r8, r3
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   159f0:	6813      	ldr	r3, [r2, #0]
      : size_(0) {
   159f2:	2700      	movs	r7, #0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   159f4:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   159f6:	4605      	mov	r5, r0
   159f8:	460e      	mov	r6, r1
   159fa:	4614      	mov	r4, r2
      : size_(0) {
   159fc:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   159fe:	da01      	bge.n	15a04 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   15a00:	f008 fde7 	bl	1e5d2 <abort>
    Resize(new_shape_size);
   15a04:	f7ff ffc9 	bl	1599a <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   15a08:	6820      	ldr	r0, [r4, #0]
   15a0a:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   15a0c:	42b7      	cmp	r7, r6
   15a0e:	da06      	bge.n	15a1e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   15a10:	4639      	mov	r1, r7
   15a12:	4642      	mov	r2, r8
   15a14:	4628      	mov	r0, r5
   15a16:	f7ff ffaf 	bl	15978 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < size_increase; ++i) {
   15a1a:	3701      	adds	r7, #1
   15a1c:	e7f6      	b.n	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a1e:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a20:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a22:	2b05      	cmp	r3, #5
   15a24:	bfcc      	ite	gt
   15a26:	6868      	ldrgt	r0, [r5, #4]
   15a28:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a2a:	2a05      	cmp	r2, #5
   15a2c:	bfc8      	it	gt
   15a2e:	6861      	ldrgt	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15a30:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a34:	bfd8      	it	le
   15a36:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15a38:	0092      	lsls	r2, r2, #2
   15a3a:	f008 fddf 	bl	1e5fc <memcpy>
  }
   15a3e:	4628      	mov	r0, r5
   15a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   15a44:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a46:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   15a48:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a4a:	2c04      	cmp	r4, #4
   15a4c:	d001      	beq.n	15a52 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   15a4e:	f008 fdc0 	bl	1e5d2 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15a52:	2900      	cmp	r1, #0
   15a54:	dbfb      	blt.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a56:	6844      	ldr	r4, [r0, #4]
   15a58:	428c      	cmp	r4, r1
   15a5a:	ddf8      	ble.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15a5c:	2a00      	cmp	r2, #0
   15a5e:	dbf6      	blt.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a60:	6884      	ldr	r4, [r0, #8]
   15a62:	4294      	cmp	r4, r2
   15a64:	ddf3      	ble.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15a66:	2b00      	cmp	r3, #0
   15a68:	dbf1      	blt.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a6a:	68c6      	ldr	r6, [r0, #12]
   15a6c:	429e      	cmp	r6, r3
   15a6e:	ddee      	ble.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15a70:	2d00      	cmp	r5, #0
   15a72:	dbec      	blt.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a74:	6900      	ldr	r0, [r0, #16]
   15a76:	42a8      	cmp	r0, r5
   15a78:	dde9      	ble.n	15a4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15a7a:	fb01 2204 	mla	r2, r1, r4, r2
   15a7e:	fb06 3302 	mla	r3, r6, r2, r3
}
   15a82:	fb00 5003 	mla	r0, r0, r3, r5
   15a86:	bd70      	pop	{r4, r5, r6, pc}

00015a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
   15a88:	b570      	push	{r4, r5, r6, lr}
   15a8a:	460d      	mov	r5, r1
   15a8c:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
   15a8e:	f7ff ff9c 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   15a92:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
   15a94:	4628      	mov	r0, r5
   15a96:	f7ff ff98 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   15a9a:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
   15a9c:	4630      	mov	r0, r6
   15a9e:	f7ff ff94 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   15aa2:	42ac      	cmp	r4, r5
   15aa4:	d001      	beq.n	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
   15aa6:	f008 fd94 	bl	1e5d2 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   15aaa:	4284      	cmp	r4, r0
   15aac:	d1fb      	bne.n	15aa6 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
}
   15aae:	bd70      	pop	{r4, r5, r6, pc}

00015ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
                            int i3) {
   15ab0:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   15ab2:	2900      	cmp	r1, #0
                            int i3) {
   15ab4:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   15ab6:	db02      	blt.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ab8:	6804      	ldr	r4, [r0, #0]
   15aba:	428c      	cmp	r4, r1
   15abc:	dc01      	bgt.n	15ac2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   15abe:	f008 fd88 	bl	1e5d2 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   15ac2:	2a00      	cmp	r2, #0
   15ac4:	dbfb      	blt.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ac6:	6844      	ldr	r4, [r0, #4]
   15ac8:	4294      	cmp	r4, r2
   15aca:	ddf8      	ble.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   15acc:	2b00      	cmp	r3, #0
   15ace:	dbf6      	blt.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ad0:	6884      	ldr	r4, [r0, #8]
   15ad2:	429c      	cmp	r4, r3
   15ad4:	ddf3      	ble.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   15ad6:	2d00      	cmp	r5, #0
   15ad8:	dbf1      	blt.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ada:	68c4      	ldr	r4, [r0, #12]
   15adc:	42ac      	cmp	r4, r5
   15ade:	ddee      	ble.n	15abe <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
         i3 * desc.strides[3];
   15ae0:	69c4      	ldr	r4, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   15ae2:	6946      	ldr	r6, [r0, #20]
         i3 * desc.strides[3];
   15ae4:	436c      	muls	r4, r5
   15ae6:	fb06 4202 	mla	r2, r6, r2, r4
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   15aea:	6984      	ldr	r4, [r0, #24]
   15aec:	6900      	ldr	r0, [r0, #16]
         i3 * desc.strides[3];
   15aee:	fb04 2303 	mla	r3, r4, r3, r2
}
   15af2:	fb00 3001 	mla	r0, r0, r1, r3
   15af6:	bd70      	pop	{r4, r5, r6, pc}

00015af8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   15af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15afc:	4604      	mov	r4, r0
   15afe:	4690      	mov	r8, r2
   15b00:	4608      	mov	r0, r1
   15b02:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15b04:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   15b08:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   15b0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   15b0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15b0e:	dd01      	ble.n	15b14 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   15b10:	f008 fd5f 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b16:	f7ff ffb7 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   15b1a:	6862      	ldr	r2, [r4, #4]
   15b1c:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15b20:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   15b22:	dbf5      	blt.n	15b10 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   15b24:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   15b26:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   15b28:	dcf2      	bgt.n	15b10 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   15b2a:	33ff      	adds	r3, #255	; 0xff
   15b2c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   15b30:	d8ee      	bhi.n	15b10 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   15b32:	2700      	movs	r7, #0
   15b34:	45b9      	cmp	r9, r7
   15b36:	dd28      	ble.n	15b8a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   15b38:	f816 a007 	ldrb.w	sl, [r6, r7]
   15b3c:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   15b3e:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   15b40:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   15b42:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   15b44:	f818 3007 	ldrb.w	r3, [r8, r7]
   15b48:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   15b4a:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b4e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   15b52:	fa03 f000 	lsl.w	r0, r3, r0
   15b56:	f7f1 fb17 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b5a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b5e:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b60:	4650      	mov	r0, sl
   15b62:	f7f1 fb11 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b66:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   15b6a:	4458      	add	r0, fp
   15b6c:	f7f1 fb0c 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   15b70:	68e3      	ldr	r3, [r4, #12]
   15b72:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   15b74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15b76:	4283      	cmp	r3, r0
   15b78:	bfb8      	it	lt
   15b7a:	4603      	movlt	r3, r0
   15b7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15b7e:	4283      	cmp	r3, r0
   15b80:	bfa8      	it	ge
   15b82:	4603      	movge	r3, r0
   15b84:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   15b86:	3701      	adds	r7, #1
   15b88:	e7d4      	b.n	15b34 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   15b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b8e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   15b8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b92:	4604      	mov	r4, r0
   15b94:	4690      	mov	r8, r2
   15b96:	4608      	mov	r0, r1
   15b98:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15b9a:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   15b9e:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   15ba0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   15ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15ba4:	dd01      	ble.n	15baa <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   15ba6:	f008 fd14 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15bac:	f7ff ff6c 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   15bb0:	6862      	ldr	r2, [r4, #4]
   15bb2:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15bb6:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   15bb8:	dbf5      	blt.n	15ba6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   15bba:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   15bbc:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   15bbe:	dcf2      	bgt.n	15ba6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   15bc0:	337f      	adds	r3, #127	; 0x7f
   15bc2:	2bfe      	cmp	r3, #254	; 0xfe
   15bc4:	d8ef      	bhi.n	15ba6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   15bc6:	2700      	movs	r7, #0
   15bc8:	45b9      	cmp	r9, r7
   15bca:	dd28      	ble.n	15c1e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   15bcc:	f916 a007 	ldrsb.w	sl, [r6, r7]
   15bd0:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   15bd2:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   15bd4:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   15bd6:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   15bd8:	f918 3007 	ldrsb.w	r3, [r8, r7]
   15bdc:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   15bde:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15be2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   15be6:	fa03 f000 	lsl.w	r0, r3, r0
   15bea:	f7f1 facd 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15bee:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15bf2:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15bf4:	4650      	mov	r0, sl
   15bf6:	f7f1 fac7 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15bfa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   15bfe:	4458      	add	r0, fp
   15c00:	f7f1 fac2 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   15c04:	68e3      	ldr	r3, [r4, #12]
   15c06:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   15c08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15c0a:	4283      	cmp	r3, r0
   15c0c:	bfb8      	it	lt
   15c0e:	4603      	movlt	r3, r0
   15c10:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15c12:	4283      	cmp	r3, r0
   15c14:	bfa8      	it	ge
   15c16:	4603      	movge	r3, r0
   15c18:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   15c1a:	3701      	adds	r7, #1
   15c1c:	e7d4      	b.n	15bc8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   15c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   15c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c26:	680b      	ldr	r3, [r1, #0]
   15c28:	6804      	ldr	r4, [r0, #0]
   15c2a:	429c      	cmp	r4, r3
   15c2c:	b092      	sub	sp, #72	; 0x48
   15c2e:	bfb8      	it	lt
   15c30:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15c32:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   15c34:	4680      	mov	r8, r0
   15c36:	460f      	mov	r7, r1
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   15c38:	2600      	movs	r6, #0
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15c3a:	7013      	strb	r3, [r2, #0]
    Resize(shape_size);
   15c3c:	4621      	mov	r1, r4
   15c3e:	4668      	mov	r0, sp
                                   tflite::ArithmeticParams* params) {
   15c40:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   15c42:	9600      	str	r6, [sp, #0]
    Resize(shape_size);
   15c44:	f7ff fea9 	bl	1599a <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   15c48:	42a6      	cmp	r6, r4
   15c4a:	da06      	bge.n	15c5a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x38>
      SetDim(i, value);
   15c4c:	4631      	mov	r1, r6
   15c4e:	2201      	movs	r2, #1
   15c50:	4668      	mov	r0, sp
   15c52:	f7ff fe91 	bl	15978 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < shape_size; ++i) {
   15c56:	3601      	adds	r6, #1
   15c58:	e7f6      	b.n	15c48 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26>
    return RuntimeShape(new_shape_size, shape, 1);
   15c5a:	2301      	movs	r3, #1
   15c5c:	4642      	mov	r2, r8
   15c5e:	4621      	mov	r1, r4
   15c60:	a806      	add	r0, sp, #24
   15c62:	f7ff fec2 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   15c66:	2301      	movs	r3, #1
   15c68:	463a      	mov	r2, r7
   15c6a:	4621      	mov	r1, r4
   15c6c:	a80c      	add	r0, sp, #48	; 0x30
   15c6e:	f7ff febc 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   15c72:	9a06      	ldr	r2, [sp, #24]
   15c74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15c76:	429a      	cmp	r2, r3
   15c78:	d11b      	bne.n	15cb2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15c7a:	2a05      	cmp	r2, #5
   15c7c:	bfcc      	ite	gt
   15c7e:	9807      	ldrgt	r0, [sp, #28]
   15c80:	a807      	addle	r0, sp, #28
   15c82:	2b05      	cmp	r3, #5
   15c84:	bfcc      	ite	gt
   15c86:	990d      	ldrgt	r1, [sp, #52]	; 0x34
   15c88:	a90d      	addle	r1, sp, #52	; 0x34
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   15c8a:	0092      	lsls	r2, r2, #2
   15c8c:	f008 fca8 	bl	1e5e0 <memcmp>
    return this->size_ == comp.size_ &&
   15c90:	b978      	cbnz	r0, 15cb2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   15c92:	2301      	movs	r3, #1
   15c94:	702b      	strb	r3, [r5, #0]
    return false;
   15c96:	4604      	mov	r4, r0
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   15c98:	a80c      	add	r0, sp, #48	; 0x30
   15c9a:	f7ff fe06 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   15c9e:	a806      	add	r0, sp, #24
   15ca0:	f7ff fe03 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   15ca4:	4668      	mov	r0, sp
   15ca6:	f7ff fe00 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
   15caa:	4620      	mov	r0, r4
   15cac:	b012      	add	sp, #72	; 0x48
   15cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   15cb2:	3c01      	subs	r4, #1
   15cb4:	4626      	mov	r6, r4
   15cb6:	2e00      	cmp	r6, #0
   15cb8:	db10      	blt.n	15cdc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xba>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   15cba:	4631      	mov	r1, r6
   15cbc:	a806      	add	r0, sp, #24
   15cbe:	f7ff fdff 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15cc2:	4631      	mov	r1, r6
   15cc4:	4607      	mov	r7, r0
   15cc6:	a80c      	add	r0, sp, #48	; 0x30
   15cc8:	f7ff fdfa 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ccc:	4287      	cmp	r7, r0
   15cce:	d101      	bne.n	15cd4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb2>
  for (int i = dims_count - 1; i >= 0; --i) {
   15cd0:	3e01      	subs	r6, #1
   15cd2:	e7f0      	b.n	15cb6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x94>
    } else if (extended_shape0.Dims(i) == 1) {
   15cd4:	2f01      	cmp	r7, #1
   15cd6:	d107      	bne.n	15ce8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
      params->broadcast_category =
   15cd8:	2302      	movs	r3, #2
      params->broadcast_category =
   15cda:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   15cdc:	782b      	ldrb	r3, [r5, #0]
   15cde:	1e9a      	subs	r2, r3, #2
   15ce0:	2a01      	cmp	r2, #1
   15ce2:	d909      	bls.n	15cf8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd6>
    TFLITE_DCHECK(false);
   15ce4:	f008 fc75 	bl	1e5d2 <abort>
    } else if (extended_shape1.Dims(i) == 1) {
   15ce8:	2801      	cmp	r0, #1
   15cea:	d101      	bne.n	15cf0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
      params->broadcast_category =
   15cec:	2303      	movs	r3, #3
   15cee:	e7f4      	b.n	15cda <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb8>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15cf0:	2304      	movs	r3, #4
   15cf2:	702b      	strb	r3, [r5, #0]
  return true;
   15cf4:	2401      	movs	r4, #1
   15cf6:	e7cf      	b.n	15c98 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>
  const RuntimeShape* shape_a =
   15cf8:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
   15cfa:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   15cfe:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  params->broadcast_shape[3] = 1;
   15d02:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  const RuntimeShape* shape_a =
   15d06:	bf19      	ittee	ne
   15d08:	f10d 0818 	addne.w	r8, sp, #24
  const RuntimeShape* shape_b =
   15d0c:	af0c      	addne	r7, sp, #48	; 0x30
  const RuntimeShape* shape_a =
   15d0e:	f10d 0830 	addeq.w	r8, sp, #48	; 0x30
  const RuntimeShape* shape_b =
   15d12:	af06      	addeq	r7, sp, #24
  params->broadcast_shape[4] = 1;
   15d14:	64eb      	str	r3, [r5, #76]	; 0x4c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d16:	2c00      	cmp	r4, #0
   15d18:	dbec      	blt.n	15cf4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
   15d1a:	4621      	mov	r1, r4
   15d1c:	4640      	mov	r0, r8
   15d1e:	f7ff fdcf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d22:	4621      	mov	r1, r4
   15d24:	4606      	mov	r6, r0
   15d26:	4638      	mov	r0, r7
   15d28:	f7ff fdca 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d2c:	4286      	cmp	r6, r0
   15d2e:	d104      	bne.n	15d3a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   15d30:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   15d32:	4346      	muls	r6, r0
   15d34:	64ee      	str	r6, [r5, #76]	; 0x4c
    --i;
   15d36:	3c01      	subs	r4, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d38:	e7ed      	b.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d3a:	4621      	mov	r1, r4
   15d3c:	4640      	mov	r0, r8
   15d3e:	f7ff fdbf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d42:	2801      	cmp	r0, #1
   15d44:	d10a      	bne.n	15d5c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   15d46:	4621      	mov	r1, r4
   15d48:	4638      	mov	r0, r7
   15d4a:	f7ff fdb9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d4e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d50:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   15d52:	fb00 f003 	mul.w	r0, r0, r3
   15d56:	64a8      	str	r0, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d58:	d2ef      	bcs.n	15d3a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
   15d5a:	e7cb      	b.n	15cf4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d5c:	4621      	mov	r1, r4
   15d5e:	4640      	mov	r0, r8
   15d60:	f7ff fdae 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d64:	4621      	mov	r1, r4
   15d66:	4606      	mov	r6, r0
   15d68:	4638      	mov	r0, r7
   15d6a:	f7ff fda9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d6e:	4286      	cmp	r6, r0
   15d70:	d106      	bne.n	15d80 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   15d72:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d74:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   15d76:	fb06 f600 	mul.w	r6, r6, r0
   15d7a:	646e      	str	r6, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d7c:	d2ee      	bcs.n	15d5c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
   15d7e:	e7b9      	b.n	15cf4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15d80:	4621      	mov	r1, r4
   15d82:	4638      	mov	r0, r7
   15d84:	f7ff fd9c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d88:	2801      	cmp	r0, #1
   15d8a:	d10a      	bne.n	15da2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   15d8c:	4621      	mov	r1, r4
   15d8e:	4640      	mov	r0, r8
   15d90:	f7ff fd96 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d94:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15d96:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   15d98:	fb00 f003 	mul.w	r0, r0, r3
   15d9c:	6428      	str	r0, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15d9e:	d2ef      	bcs.n	15d80 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
   15da0:	e7a8      	b.n	15cf4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15da2:	4621      	mov	r1, r4
   15da4:	4640      	mov	r0, r8
   15da6:	f7ff fd8b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15daa:	4621      	mov	r1, r4
   15dac:	4606      	mov	r6, r0
   15dae:	4638      	mov	r0, r7
   15db0:	f7ff fd86 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15db4:	4286      	cmp	r6, r0
   15db6:	d19b      	bne.n	15cf0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   15db8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15dba:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   15dbc:	fb06 f600 	mul.w	r6, r6, r0
   15dc0:	63ee      	str	r6, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15dc2:	d2ee      	bcs.n	15da2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
   15dc4:	e796      	b.n	15cf4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>

00015dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   15dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dc8:	4606      	mov	r6, r0
   15dca:	f101 050c 	add.w	r5, r1, #12
  for (int i = N - 1; i >= 0; --i) {
   15dce:	2403      	movs	r4, #3
  int desc_stride = 1;
   15dd0:	2701      	movs	r7, #1
    desc_out->extents[i] = input_shape.Dims(i);
   15dd2:	4621      	mov	r1, r4
   15dd4:	4630      	mov	r0, r6
   15dd6:	f7ff fd73 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15dda:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   15dde:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   15de0:	616f      	str	r7, [r5, #20]
    desc_stride *= input_shape.Dims(i);
   15de2:	4630      	mov	r0, r6
   15de4:	f7ff fd6c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   15de8:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   15dea:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   15dee:	d2f0      	bcs.n	15dd2 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   15df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   15df2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15df6:	460c      	mov	r4, r1
   15df8:	b08d      	sub	sp, #52	; 0x34
   15dfa:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   15dfc:	4615      	mov	r5, r2
   15dfe:	b90a      	cbnz	r2, 15e04 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   15e00:	f008 fbe7 	bl	1e5d2 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   15e04:	2b00      	cmp	r3, #0
   15e06:	d0fb      	beq.n	15e00 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   15e08:	4602      	mov	r2, r0
   15e0a:	2301      	movs	r3, #1
   15e0c:	2104      	movs	r1, #4
   15e0e:	4668      	mov	r0, sp
   15e10:	f7ff fdeb 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   15e14:	4622      	mov	r2, r4
   15e16:	2301      	movs	r3, #1
   15e18:	2104      	movs	r1, #4
   15e1a:	a806      	add	r0, sp, #24
   15e1c:	f7ff fde5 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   15e20:	4629      	mov	r1, r5
   15e22:	4668      	mov	r0, sp
   15e24:	f7ff ffcf 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   15e28:	4631      	mov	r1, r6
   15e2a:	a806      	add	r0, sp, #24
   15e2c:	f7ff ffcb 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   15e30:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   15e32:	f04f 0810 	mov.w	r8, #16
   15e36:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   15e38:	4621      	mov	r1, r4
   15e3a:	4668      	mov	r0, sp
   15e3c:	f7ff fd40 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   15e40:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   15e42:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   15e44:	a806      	add	r0, sp, #24
   15e46:	f7ff fd3b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   15e4a:	4287      	cmp	r7, r0
   15e4c:	d005      	beq.n	15e5a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   15e4e:	2f01      	cmp	r7, #1
   15e50:	d111      	bne.n	15e76 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   15e52:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   15e56:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   15e5a:	3401      	adds	r4, #1
   15e5c:	2c04      	cmp	r4, #4
   15e5e:	f108 0804 	add.w	r8, r8, #4
   15e62:	d1e9      	bne.n	15e38 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   15e64:	a806      	add	r0, sp, #24
   15e66:	f7ff fd20 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   15e6a:	4668      	mov	r0, sp
   15e6c:	f7ff fd1d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   15e70:	b00d      	add	sp, #52	; 0x34
   15e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   15e76:	2801      	cmp	r0, #1
   15e78:	d1c2      	bne.n	15e00 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   15e7a:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   15e7e:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   15e82:	e7ea      	b.n	15e5a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

00015e84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   15e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e88:	ed2d 8b02 	vpush	{d8}
   15e8c:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15e8e:	af0a      	add	r7, sp, #40	; 0x28
                               float* output_data) {
   15e90:	9203      	str	r2, [sp, #12]
   15e92:	4683      	mov	fp, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15e94:	463a      	mov	r2, r7
                               float* output_data) {
   15e96:	4608      	mov	r0, r1
   15e98:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15e9a:	ab12      	add	r3, sp, #72	; 0x48
   15e9c:	f7ff ffa9 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   15ea0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   15ea2:	2301      	movs	r3, #1
   15ea4:	2104      	movs	r1, #4
   15ea6:	a804      	add	r0, sp, #16
   15ea8:	f7ff fd9f 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15eac:	2400      	movs	r4, #0
   15eae:	2100      	movs	r1, #0
   15eb0:	a804      	add	r0, sp, #16
   15eb2:	f7ff fd05 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15eb6:	42a0      	cmp	r0, r4
   15eb8:	dd5c      	ble.n	15f74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xf0>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15eba:	2500      	movs	r5, #0
   15ebc:	f10d 0810 	add.w	r8, sp, #16
   15ec0:	2101      	movs	r1, #1
   15ec2:	4640      	mov	r0, r8
   15ec4:	f7ff fcfc 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ec8:	42a8      	cmp	r0, r5
   15eca:	dd51      	ble.n	15f70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15ecc:	2600      	movs	r6, #0
   15ece:	2102      	movs	r1, #2
   15ed0:	4640      	mov	r0, r8
   15ed2:	f7ff fcf5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ed6:	42b0      	cmp	r0, r6
   15ed8:	dd48      	ble.n	15f6c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15eda:	f04f 0900 	mov.w	r9, #0
   15ede:	2103      	movs	r1, #3
   15ee0:	4640      	mov	r0, r8
   15ee2:	f7ff fced 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ee6:	4548      	cmp	r0, r9
   15ee8:	dd3e      	ble.n	15f68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15eea:	f8cd 9000 	str.w	r9, [sp]
   15eee:	4633      	mov	r3, r6
   15ef0:	462a      	mov	r2, r5
   15ef2:	4621      	mov	r1, r4
   15ef4:	4638      	mov	r0, r7
   15ef6:	f7ff fddb 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15efa:	f8cd 9000 	str.w	r9, [sp]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15efe:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f00:	4633      	mov	r3, r6
   15f02:	462a      	mov	r2, r5
   15f04:	4621      	mov	r1, r4
   15f06:	a812      	add	r0, sp, #72	; 0x48
   15f08:	f7ff fdd2 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15f0c:	9b03      	ldr	r3, [sp, #12]
   15f0e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
              ActivationFunctionWithMinMax(
   15f14:	edda 7a00 	vldr	s15, [sl]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   15f1c:	ed90 8a00 	vldr	s16, [r0]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   15f20:	f8cd 9000 	str.w	r9, [sp]
   15f24:	4633      	mov	r3, r6
   15f26:	462a      	mov	r2, r5
   15f28:	4621      	mov	r1, r4
   15f2a:	4640      	mov	r0, r8
              ActivationFunctionWithMinMax(
   15f2c:	ee37 8a88 	vadd.f32	s16, s15, s16
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   15f30:	f7ff fd88 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   15f34:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
   15f38:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
   15f3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15f3e:	eef4 7ac8 	vcmpe.f32	s15, s16
   15f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f46:	bfb8      	it	lt
   15f48:	eef0 7a48 	vmovlt.f32	s15, s16
   15f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
   15f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15f58:	bf88      	it	hi
   15f5a:	eef0 7a47 	vmovhi.f32	s15, s14
   15f5e:	edc0 7a00 	vstr	s15, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15f62:	f109 0901 	add.w	r9, r9, #1
   15f66:	e7ba      	b.n	15ede <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15f68:	3601      	adds	r6, #1
   15f6a:	e7b0      	b.n	15ece <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15f6c:	3501      	adds	r5, #1
   15f6e:	e7a5      	b.n	15ebc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x38>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15f70:	3401      	adds	r4, #1
   15f72:	e79c      	b.n	15eae <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x2a>
      RuntimeShape::ExtendedShape(4, output_shape);
   15f74:	a804      	add	r0, sp, #16
   15f76:	f7ff fc98 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                  params.float_activation_min, params.float_activation_max);
        }
      }
    }
  }
}
   15f7a:	b01b      	add	sp, #108	; 0x6c
   15f7c:	ecbd 8b02 	vpop	{d8}
   15f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015f84 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   15f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f88:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15f8a:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               int8_t* output_data) {
   15f8e:	9202      	str	r2, [sp, #8]
   15f90:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15f92:	465a      	mov	r2, fp
                               int8_t* output_data) {
   15f94:	4608      	mov	r0, r1
   15f96:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15f98:	ab12      	add	r3, sp, #72	; 0x48
   15f9a:	f7ff ff2a 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   15f9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15fa0:	2301      	movs	r3, #1
   15fa2:	2104      	movs	r1, #4
   15fa4:	a804      	add	r0, sp, #16
   15fa6:	f7ff fd20 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15faa:	2600      	movs	r6, #0
   15fac:	2100      	movs	r1, #0
   15fae:	a804      	add	r0, sp, #16
   15fb0:	f7ff fc86 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fb4:	42b0      	cmp	r0, r6
   15fb6:	dd65      	ble.n	16084 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15fb8:	2700      	movs	r7, #0
   15fba:	f10d 0910 	add.w	r9, sp, #16
   15fbe:	2101      	movs	r1, #1
   15fc0:	4648      	mov	r0, r9
   15fc2:	f7ff fc7d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fc6:	42b8      	cmp	r0, r7
   15fc8:	dd5a      	ble.n	16080 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15fca:	f04f 0800 	mov.w	r8, #0
   15fce:	2102      	movs	r1, #2
   15fd0:	4648      	mov	r0, r9
   15fd2:	f7ff fc75 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fd6:	4540      	cmp	r0, r8
   15fd8:	dd50      	ble.n	1607c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15fda:	f04f 0a00 	mov.w	sl, #0
   15fde:	2103      	movs	r1, #3
   15fe0:	4648      	mov	r0, r9
   15fe2:	f7ff fc6d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fe6:	4550      	cmp	r0, sl
   15fe8:	dd45      	ble.n	16076 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf2>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   15fea:	f8cd a000 	str.w	sl, [sp]
   15fee:	4643      	mov	r3, r8
   15ff0:	463a      	mov	r2, r7
   15ff2:	4631      	mov	r1, r6
   15ff4:	4658      	mov	r0, fp
   15ff6:	f7ff fd5b 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   15ffa:	9b02      	ldr	r3, [sp, #8]
   15ffc:	561d      	ldrsb	r5, [r3, r0]
   15ffe:	6863      	ldr	r3, [r4, #4]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16000:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   16004:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16006:	463a      	mov	r2, r7
   16008:	4643      	mov	r3, r8
   1600a:	4631      	mov	r1, r6
   1600c:	a812      	add	r0, sp, #72	; 0x48
   1600e:	f7ff fd4f 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   16012:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16014:	68a2      	ldr	r2, [r4, #8]
   16016:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   16018:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1601c:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   1601e:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16022:	fa05 f00c 	lsl.w	r0, r5, ip
   16026:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   1602a:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1602c:	f7f1 f8ac 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16030:	9b03      	ldr	r3, [sp, #12]
   16032:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16036:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16038:	4618      	mov	r0, r3
   1603a:	f7f1 f8a5 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1603e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16042:	4428      	add	r0, r5
   16044:	f7f1 f8a0 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   16048:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1604a:	f8cd a000 	str.w	sl, [sp]
                  raw_sum, params.output_multiplier, params.output_shift) +
   1604e:	4405      	add	r5, r0
   16050:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   16052:	4285      	cmp	r5, r0
   16054:	bfb8      	it	lt
   16056:	4605      	movlt	r5, r0
   16058:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1605a:	4285      	cmp	r5, r0
   1605c:	bfa8      	it	ge
   1605e:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16060:	4643      	mov	r3, r8
   16062:	463a      	mov	r2, r7
   16064:	4631      	mov	r1, r6
   16066:	4648      	mov	r0, r9
   16068:	f7ff fcec 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1606c:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1606e:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16072:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16074:	e7b3      	b.n	15fde <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   16076:	f108 0801 	add.w	r8, r8, #1
   1607a:	e7a8      	b.n	15fce <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1607c:	3701      	adds	r7, #1
   1607e:	e79c      	b.n	15fba <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   16080:	3601      	adds	r6, #1
   16082:	e793      	b.n	15fac <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   16084:	a804      	add	r0, sp, #16
   16086:	f7ff fc10 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   1608a:	b01b      	add	sp, #108	; 0x6c
   1608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016090 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   16090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16094:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   16096:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               uint8* output_data) {
   1609a:	9202      	str	r2, [sp, #8]
   1609c:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1609e:	465a      	mov	r2, fp
                               uint8* output_data) {
   160a0:	4608      	mov	r0, r1
   160a2:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   160a4:	ab12      	add	r3, sp, #72	; 0x48
   160a6:	f7ff fea4 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   160aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   160ac:	2301      	movs	r3, #1
   160ae:	2104      	movs	r1, #4
   160b0:	a804      	add	r0, sp, #16
   160b2:	f7ff fc9a 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   160b6:	2600      	movs	r6, #0
   160b8:	2100      	movs	r1, #0
   160ba:	a804      	add	r0, sp, #16
   160bc:	f7ff fc00 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   160c0:	42b0      	cmp	r0, r6
   160c2:	dd65      	ble.n	16190 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   160c4:	2700      	movs	r7, #0
   160c6:	f10d 0910 	add.w	r9, sp, #16
   160ca:	2101      	movs	r1, #1
   160cc:	4648      	mov	r0, r9
   160ce:	f7ff fbf7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   160d2:	42b8      	cmp	r0, r7
   160d4:	dd5a      	ble.n	1618c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   160d6:	f04f 0800 	mov.w	r8, #0
   160da:	2102      	movs	r1, #2
   160dc:	4648      	mov	r0, r9
   160de:	f7ff fbef 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   160e2:	4540      	cmp	r0, r8
   160e4:	dd50      	ble.n	16188 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   160e6:	f04f 0a00 	mov.w	sl, #0
   160ea:	2103      	movs	r1, #3
   160ec:	4648      	mov	r0, r9
   160ee:	f7ff fbe7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   160f2:	4550      	cmp	r0, sl
   160f4:	dd45      	ble.n	16182 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf2>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   160f6:	f8cd a000 	str.w	sl, [sp]
   160fa:	4643      	mov	r3, r8
   160fc:	463a      	mov	r2, r7
   160fe:	4631      	mov	r1, r6
   16100:	4658      	mov	r0, fp
   16102:	f7ff fcd5 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   16106:	9b02      	ldr	r3, [sp, #8]
   16108:	5c1d      	ldrb	r5, [r3, r0]
   1610a:	6863      	ldr	r3, [r4, #4]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1610c:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   16110:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16112:	463a      	mov	r2, r7
   16114:	4643      	mov	r3, r8
   16116:	4631      	mov	r1, r6
   16118:	a812      	add	r0, sp, #72	; 0x48
   1611a:	f7ff fcc9 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1611e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16120:	68a2      	ldr	r2, [r4, #8]
   16122:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   16124:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16128:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   1612a:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1612e:	fa05 f00c 	lsl.w	r0, r5, ip
   16132:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   16136:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16138:	f7f1 f826 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1613c:	9b03      	ldr	r3, [sp, #12]
   1613e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16142:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16144:	4618      	mov	r0, r3
   16146:	f7f1 f81f 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1614a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1614e:	4428      	add	r0, r5
   16150:	f7f1 f81a 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   16154:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16156:	f8cd a000 	str.w	sl, [sp]
                  raw_sum, params.output_multiplier, params.output_shift) +
   1615a:	4405      	add	r5, r0
   1615c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1615e:	4285      	cmp	r5, r0
   16160:	bfb8      	it	lt
   16162:	4605      	movlt	r5, r0
   16164:	6b20      	ldr	r0, [r4, #48]	; 0x30
   16166:	4285      	cmp	r5, r0
   16168:	bfa8      	it	ge
   1616a:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1616c:	4643      	mov	r3, r8
   1616e:	463a      	mov	r2, r7
   16170:	4631      	mov	r1, r6
   16172:	4648      	mov	r0, r9
   16174:	f7ff fc66 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   16178:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1617a:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1617e:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16180:	e7b3      	b.n	160ea <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   16182:	f108 0801 	add.w	r8, r8, #1
   16186:	e7a8      	b.n	160da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16188:	3701      	adds	r7, #1
   1618a:	e79c      	b.n	160c6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1618c:	3601      	adds	r6, #1
   1618e:	e793      	b.n	160b8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   16190:	a804      	add	r0, sp, #16
   16192:	f7ff fb8a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   16196:	b01b      	add	sp, #108	; 0x6c
   16198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001619c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   1619c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1619e:	b0ab      	sub	sp, #172	; 0xac
   161a0:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   161a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   161a4:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   161a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   161a8:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   161aa:	6943      	ldr	r3, [r0, #20]
   161ac:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   161ae:	6843      	ldr	r3, [r0, #4]
   161b0:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   161b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   161b4:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   161b6:	6983      	ldr	r3, [r0, #24]
   161b8:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   161ba:	6883      	ldr	r3, [r0, #8]
   161bc:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   161be:	6b03      	ldr	r3, [r0, #48]	; 0x30
   161c0:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   161c2:	69c3      	ldr	r3, [r0, #28]
   161c4:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   161c6:	6a03      	ldr	r3, [r0, #32]
   161c8:	931b      	str	r3, [sp, #108]	; 0x6c
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   161ca:	4614      	mov	r4, r2
  params->quantized_activation_min = min;
   161cc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   161d0:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   161d2:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   161d6:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   161d8:	f7ff fbac 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   161dc:	4621      	mov	r1, r4
   161de:	a80a      	add	r0, sp, #40	; 0x28
   161e0:	f7ff fba8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   161e4:	a90a      	add	r1, sp, #40	; 0x28
   161e6:	aa16      	add	r2, sp, #88	; 0x58
   161e8:	a810      	add	r0, sp, #64	; 0x40
   161ea:	f7ff fd1a 	bl	15c22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   161ee:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   161f0:	a80a      	add	r0, sp, #40	; 0x28
   161f2:	f7ff fb5a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   161f6:	a810      	add	r0, sp, #64	; 0x40
   161f8:	f7ff fb57 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   161fc:	7833      	ldrb	r3, [r6, #0]
   161fe:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   16200:	4629      	mov	r1, r5
   16202:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   16204:	d13e      	bne.n	16284 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   16206:	b31f      	cbz	r7, 16250 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   16208:	f7ff fb94 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1620c:	b105      	cbz	r5, 16210 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   1620e:	686d      	ldr	r5, [r5, #4]
   16210:	4621      	mov	r1, r4
   16212:	a80a      	add	r0, sp, #40	; 0x28
   16214:	f7ff fb8e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16218:	b104      	cbz	r4, 1621c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   1621a:	6864      	ldr	r4, [r4, #4]
   1621c:	4631      	mov	r1, r6
   1621e:	a804      	add	r0, sp, #16
   16220:	f7ff fb88 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16224:	6873      	ldr	r3, [r6, #4]
   16226:	9302      	str	r3, [sp, #8]
   16228:	ab04      	add	r3, sp, #16
   1622a:	e9cd 4300 	strd	r4, r3, [sp]
   1622e:	462a      	mov	r2, r5
   16230:	ab0a      	add	r3, sp, #40	; 0x28
   16232:	a910      	add	r1, sp, #64	; 0x40
   16234:	a816      	add	r0, sp, #88	; 0x58
   16236:	f7ff fea5 	bl	15f84 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   1623a:	a804      	add	r0, sp, #16
   1623c:	f7ff fb35 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   16240:	a80a      	add	r0, sp, #40	; 0x28
   16242:	f7ff fb32 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   16246:	a810      	add	r0, sp, #64	; 0x40
   16248:	f7ff fb2f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1624c:	b02b      	add	sp, #172	; 0xac
   1624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   16250:	f7ff fb70 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16254:	b105      	cbz	r5, 16258 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   16256:	686d      	ldr	r5, [r5, #4]
   16258:	4621      	mov	r1, r4
   1625a:	a80a      	add	r0, sp, #40	; 0x28
   1625c:	f7ff fb6a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16260:	b104      	cbz	r4, 16264 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   16262:	6864      	ldr	r4, [r4, #4]
   16264:	4631      	mov	r1, r6
   16266:	a804      	add	r0, sp, #16
   16268:	f7ff fb64 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1626c:	6873      	ldr	r3, [r6, #4]
   1626e:	9302      	str	r3, [sp, #8]
   16270:	ab04      	add	r3, sp, #16
   16272:	e9cd 4300 	strd	r4, r3, [sp]
   16276:	462a      	mov	r2, r5
   16278:	ab0a      	add	r3, sp, #40	; 0x28
   1627a:	a910      	add	r1, sp, #64	; 0x40
   1627c:	a816      	add	r0, sp, #88	; 0x58
   1627e:	f7ff fc86 	bl	15b8e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   16282:	e7da      	b.n	1623a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   16284:	b1cf      	cbz	r7, 162ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   16286:	f7ff fb55 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1628a:	b105      	cbz	r5, 1628e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   1628c:	686d      	ldr	r5, [r5, #4]
   1628e:	4621      	mov	r1, r4
   16290:	a80a      	add	r0, sp, #40	; 0x28
   16292:	f7ff fb4f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16296:	b104      	cbz	r4, 1629a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   16298:	6864      	ldr	r4, [r4, #4]
   1629a:	4631      	mov	r1, r6
   1629c:	a804      	add	r0, sp, #16
   1629e:	f7ff fb49 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162a2:	6873      	ldr	r3, [r6, #4]
   162a4:	9302      	str	r3, [sp, #8]
   162a6:	ab04      	add	r3, sp, #16
   162a8:	e9cd 4300 	strd	r4, r3, [sp]
   162ac:	462a      	mov	r2, r5
   162ae:	ab0a      	add	r3, sp, #40	; 0x28
   162b0:	a910      	add	r1, sp, #64	; 0x40
   162b2:	a816      	add	r0, sp, #88	; 0x58
   162b4:	f7ff feec 	bl	16090 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   162b8:	e7bf      	b.n	1623a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   162ba:	f7ff fb3b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162be:	b105      	cbz	r5, 162c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   162c0:	686d      	ldr	r5, [r5, #4]
   162c2:	4621      	mov	r1, r4
   162c4:	a80a      	add	r0, sp, #40	; 0x28
   162c6:	f7ff fb35 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162ca:	b104      	cbz	r4, 162ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   162cc:	6864      	ldr	r4, [r4, #4]
   162ce:	4631      	mov	r1, r6
   162d0:	a804      	add	r0, sp, #16
   162d2:	f7ff fb2f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162d6:	6873      	ldr	r3, [r6, #4]
   162d8:	9302      	str	r3, [sp, #8]
   162da:	ab04      	add	r3, sp, #16
   162dc:	e9cd 4300 	strd	r4, r3, [sp]
   162e0:	462a      	mov	r2, r5
   162e2:	ab0a      	add	r3, sp, #40	; 0x28
   162e4:	a910      	add	r1, sp, #64	; 0x40
   162e6:	a816      	add	r0, sp, #88	; 0x58
   162e8:	f7ff fc06 	bl	15af8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   162ec:	e7a5      	b.n	1623a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

000162ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   162ee:	b508      	push	{r3, lr}
   162f0:	4618      	mov	r0, r3
   162f2:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   162f4:	781a      	ldrb	r2, [r3, #0]
   162f6:	2a03      	cmp	r2, #3
   162f8:	d001      	beq.n	162fe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   162fa:	2a09      	cmp	r2, #9
   162fc:	d103      	bne.n	16306 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   162fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   16302:	f7ff ff4b 	bl	1619c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   16306:	2000      	movs	r0, #0
   16308:	bd08      	pop	{r3, pc}

0001630a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
namespace tflite {

namespace reference_ops {

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1630a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1630e:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16310:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16312:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16314:	4605      	mov	r5, r0
   16316:	9102      	str	r1, [sp, #8]
   16318:	461e      	mov	r6, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1631a:	dc01      	bgt.n	16320 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   1631c:	f008 f959 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16320:	6831      	ldr	r1, [r6, #0]
   16322:	1e7b      	subs	r3, r7, #1
   16324:	428b      	cmp	r3, r1
   16326:	d1f9      	bne.n	1631c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   16328:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1632a:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1632c:	bfb8      	it	lt
   1632e:	19e4      	addlt	r4, r4, r7
  }
  const int axis_size = input1_shape.Dims(axis);
   16330:	4621      	mov	r1, r4
   16332:	f7ff fac5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   16336:	f04f 0800 	mov.w	r8, #0
  const int axis_size = input1_shape.Dims(axis);
   1633a:	9001      	str	r0, [sp, #4]
  int outer_size = 1;
   1633c:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < axis; ++i) {
   16340:	4544      	cmp	r4, r8
   16342:	dd0f      	ble.n	16364 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16344:	4641      	mov	r1, r8
   16346:	4628      	mov	r0, r5
   16348:	f7ff faba 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1634c:	4641      	mov	r1, r8
   1634e:	4681      	mov	r9, r0
   16350:	4630      	mov	r0, r6
   16352:	f7ff fab5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16356:	4581      	cmp	r9, r0
   16358:	d1e0      	bne.n	1631c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   1635a:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   1635e:	f108 0801 	add.w	r8, r8, #1
   16362:	e7ed      	b.n	16340 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   16364:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   16368:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1636a:	45b8      	cmp	r8, r7
   1636c:	db2d      	blt.n	163ca <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   1636e:	9b01      	ldr	r3, [sp, #4]
   16370:	9400      	str	r4, [sp, #0]
   16372:	fb03 fe04 	mul.w	lr, r3, r4
   16376:	00a3      	lsls	r3, r4, #2
   16378:	9303      	str	r3, [sp, #12]
   1637a:	2300      	movs	r3, #0
   1637c:	4618      	mov	r0, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   1637e:	461d      	mov	r5, r3
   16380:	45ab      	cmp	fp, r5
   16382:	dd3f      	ble.n	16404 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
   16384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16386:	9900      	ldr	r1, [sp, #0]
   16388:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   1638c:	9a02      	ldr	r2, [sp, #8]
    for (int inner = 0; inner < inner_size; ++inner) {
   1638e:	2700      	movs	r7, #0
   16390:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   16394:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   16398:	42bc      	cmp	r4, r7
   1639a:	dd2c      	ble.n	163f6 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1639c:	ecfa 7a01 	vldmia	sl!, {s15}
   163a0:	46b4      	mov	ip, r6
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   163a2:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   163a4:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   163a8:	9901      	ldr	r1, [sp, #4]
   163aa:	428a      	cmp	r2, r1
   163ac:	da1e      	bge.n	163ec <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   163ae:	ed9c 7a00 	vldr	s14, [ip]
   163b2:	9903      	ldr	r1, [sp, #12]
   163b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   163b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   163bc:	bfc4      	itt	gt
   163be:	4691      	movgt	r9, r2
          min_max_value = curr_value;
   163c0:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   163c4:	3201      	adds	r2, #1
   163c6:	448c      	add	ip, r1
   163c8:	e7ee      	b.n	163a8 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   163ca:	4641      	mov	r1, r8
   163cc:	4628      	mov	r0, r5
   163ce:	f7ff fa77 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   163d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   163d6:	4681      	mov	r9, r0
   163d8:	4630      	mov	r0, r6
   163da:	f7ff fa71 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   163de:	4581      	cmp	r9, r0
   163e0:	d19c      	bne.n	1631c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   163e2:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   163e6:	f108 0801 	add.w	r8, r8, #1
   163ea:	e7be      	b.n	1636a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   163ec:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   163f0:	3701      	adds	r7, #1
   163f2:	3604      	adds	r6, #4
   163f4:	e7d0      	b.n	16398 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   163f6:	9a00      	ldr	r2, [sp, #0]
   163f8:	4472      	add	r2, lr
   163fa:	3501      	adds	r5, #1
   163fc:	4420      	add	r0, r4
   163fe:	4473      	add	r3, lr
   16400:	9200      	str	r2, [sp, #0]
   16402:	e7bd      	b.n	16380 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
    }
  }
}
   16404:	b005      	add	sp, #20
   16406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001640a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1640a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1640e:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16410:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16412:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16414:	4605      	mov	r5, r0
   16416:	9102      	str	r1, [sp, #8]
   16418:	461e      	mov	r6, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1641a:	dc01      	bgt.n	16420 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   1641c:	f008 f8d9 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16420:	6831      	ldr	r1, [r6, #0]
   16422:	1e7b      	subs	r3, r7, #1
   16424:	428b      	cmp	r3, r1
   16426:	d1f9      	bne.n	1641c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
  int axis = input2_data[0];
   16428:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1642a:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1642c:	bfb8      	it	lt
   1642e:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   16430:	4621      	mov	r1, r4
   16432:	f7ff fa45 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   16436:	f04f 0800 	mov.w	r8, #0
  const int axis_size = input1_shape.Dims(axis);
   1643a:	9001      	str	r0, [sp, #4]
  int outer_size = 1;
   1643c:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < axis; ++i) {
   16440:	4544      	cmp	r4, r8
   16442:	dd0f      	ble.n	16464 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16444:	4641      	mov	r1, r8
   16446:	4628      	mov	r0, r5
   16448:	f7ff fa3a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1644c:	4641      	mov	r1, r8
   1644e:	4681      	mov	r9, r0
   16450:	4630      	mov	r0, r6
   16452:	f7ff fa35 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16456:	4581      	cmp	r9, r0
   16458:	d1e0      	bne.n	1641c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   1645a:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   1645e:	f108 0801 	add.w	r8, r8, #1
   16462:	e7ed      	b.n	16440 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  for (int i = axis + 1; i < dims_count; ++i) {
   16464:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   16468:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1646a:	45b8      	cmp	r8, r7
   1646c:	db2d      	blt.n	164ca <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   1646e:	9b01      	ldr	r3, [sp, #4]
   16470:	9400      	str	r4, [sp, #0]
   16472:	fb03 fe04 	mul.w	lr, r3, r4
   16476:	00a3      	lsls	r3, r4, #2
   16478:	9303      	str	r3, [sp, #12]
   1647a:	2300      	movs	r3, #0
   1647c:	4618      	mov	r0, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   1647e:	461d      	mov	r5, r3
   16480:	45ab      	cmp	fp, r5
   16482:	dd3f      	ble.n	16504 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
   16484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16486:	9900      	ldr	r1, [sp, #0]
   16488:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   1648c:	9a02      	ldr	r2, [sp, #8]
    for (int inner = 0; inner < inner_size; ++inner) {
   1648e:	2700      	movs	r7, #0
   16490:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   16494:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   16498:	42bc      	cmp	r4, r7
   1649a:	dd2c      	ble.n	164f6 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1649c:	ecfa 7a01 	vldmia	sl!, {s15}
   164a0:	46b4      	mov	ip, r6
      for (int i = 1; i < axis_size; ++i) {
   164a2:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   164a4:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   164a8:	9901      	ldr	r1, [sp, #4]
   164aa:	428a      	cmp	r2, r1
   164ac:	da1e      	bge.n	164ec <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        if (cmp(curr_value, min_max_value)) {
   164ae:	ed9c 7a00 	vldr	s14, [ip]
   164b2:	9903      	ldr	r1, [sp, #12]
   164b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   164b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   164bc:	bf44      	itt	mi
   164be:	4691      	movmi	r9, r2
          min_max_value = curr_value;
   164c0:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   164c4:	3201      	adds	r2, #1
   164c6:	448c      	add	ip, r1
   164c8:	e7ee      	b.n	164a8 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   164ca:	4641      	mov	r1, r8
   164cc:	4628      	mov	r0, r5
   164ce:	f7ff f9f7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   164d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   164d6:	4681      	mov	r9, r0
   164d8:	4630      	mov	r0, r6
   164da:	f7ff f9f1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   164de:	4581      	cmp	r9, r0
   164e0:	d19c      	bne.n	1641c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   164e2:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   164e6:	f108 0801 	add.w	r8, r8, #1
   164ea:	e7be      	b.n	1646a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
      output_data[outer * inner_size + inner] = min_max_index;
   164ec:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   164f0:	3701      	adds	r7, #1
   164f2:	3604      	adds	r6, #4
   164f4:	e7d0      	b.n	16498 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   164f6:	9a00      	ldr	r2, [sp, #0]
   164f8:	4472      	add	r2, lr
   164fa:	3501      	adds	r5, #1
   164fc:	4420      	add	r0, r4
   164fe:	4473      	add	r3, lr
   16500:	9200      	str	r2, [sp, #0]
   16502:	e7bd      	b.n	16480 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   16504:	b005      	add	sp, #20
   16506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001650a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1650a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1650e:	f8d0 a000 	ldr.w	sl, [r0]
   16512:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16516:	4606      	mov	r6, r0
   16518:	4689      	mov	r9, r1
   1651a:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1651c:	dc01      	bgt.n	16522 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   1651e:	f008 f858 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16522:	f8d8 1000 	ldr.w	r1, [r8]
   16526:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1652a:	428b      	cmp	r3, r1
   1652c:	d1f7      	bne.n	1651e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   1652e:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   16530:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   16532:	bfb8      	it	lt
   16534:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16536:	4621      	mov	r1, r4
   16538:	f7ff f9c2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   1653c:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   16540:	4605      	mov	r5, r0
  int outer_size = 1;
   16542:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   16544:	455c      	cmp	r4, fp
   16546:	dd0f      	ble.n	16568 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16548:	4659      	mov	r1, fp
   1654a:	4630      	mov	r0, r6
   1654c:	f7ff f9b8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16550:	4659      	mov	r1, fp
   16552:	9001      	str	r0, [sp, #4]
   16554:	4640      	mov	r0, r8
   16556:	f7ff f9b3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1655a:	9b01      	ldr	r3, [sp, #4]
   1655c:	4283      	cmp	r3, r0
   1655e:	d1de      	bne.n	1651e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16560:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   16562:	f10b 0b01 	add.w	fp, fp, #1
   16566:	e7ed      	b.n	16544 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16568:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   1656c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1656e:	45d3      	cmp	fp, sl
   16570:	db22      	blt.n	165b8 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   16572:	fb05 f304 	mul.w	r3, r5, r4
   16576:	9301      	str	r3, [sp, #4]
   16578:	2300      	movs	r3, #0
   1657a:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   1657e:	461e      	mov	r6, r3
   16580:	42b7      	cmp	r7, r6
   16582:	dd33      	ble.n	165ec <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   16584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16586:	eba1 0904 	sub.w	r9, r1, r4
   1658a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   1658e:	2200      	movs	r2, #0
   16590:	4294      	cmp	r4, r2
   16592:	dd26      	ble.n	165e2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   16594:	f819 ab01 	ldrb.w	sl, [r9], #1
   16598:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   1659c:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   1659e:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   165a2:	42a8      	cmp	r0, r5
   165a4:	da19      	bge.n	165da <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   165a6:	f89c b000 	ldrb.w	fp, [ip]
   165aa:	45d3      	cmp	fp, sl
   165ac:	bf84      	itt	hi
   165ae:	4680      	movhi	r8, r0
   165b0:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   165b2:	3001      	adds	r0, #1
   165b4:	44a4      	add	ip, r4
   165b6:	e7f4      	b.n	165a2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   165b8:	4659      	mov	r1, fp
   165ba:	4630      	mov	r0, r6
   165bc:	f7ff f980 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   165c0:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   165c4:	9001      	str	r0, [sp, #4]
   165c6:	4640      	mov	r0, r8
   165c8:	f7ff f97a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   165cc:	9b01      	ldr	r3, [sp, #4]
   165ce:	4283      	cmp	r3, r0
   165d0:	d1a5      	bne.n	1651e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   165d2:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   165d4:	f10b 0b01 	add.w	fp, fp, #1
   165d8:	e7c9      	b.n	1656e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   165da:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   165de:	3201      	adds	r2, #1
   165e0:	e7d6      	b.n	16590 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   165e2:	9a01      	ldr	r2, [sp, #4]
   165e4:	3601      	adds	r6, #1
   165e6:	4423      	add	r3, r4
   165e8:	4411      	add	r1, r2
   165ea:	e7c9      	b.n	16580 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   165ec:	b003      	add	sp, #12
   165ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000165f2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   165f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   165f6:	f8d0 a000 	ldr.w	sl, [r0]
   165fa:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   165fe:	4606      	mov	r6, r0
   16600:	4689      	mov	r9, r1
   16602:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16604:	dc01      	bgt.n	1660a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   16606:	f007 ffe4 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   1660a:	f8d8 1000 	ldr.w	r1, [r8]
   1660e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   16612:	428b      	cmp	r3, r1
   16614:	d1f7      	bne.n	16606 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   16616:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   16618:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1661a:	bfb8      	it	lt
   1661c:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   1661e:	4621      	mov	r1, r4
   16620:	f7ff f94e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   16624:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   16628:	4605      	mov	r5, r0
  int outer_size = 1;
   1662a:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   1662c:	455c      	cmp	r4, fp
   1662e:	dd0f      	ble.n	16650 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16630:	4659      	mov	r1, fp
   16632:	4630      	mov	r0, r6
   16634:	f7ff f944 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16638:	4659      	mov	r1, fp
   1663a:	9001      	str	r0, [sp, #4]
   1663c:	4640      	mov	r0, r8
   1663e:	f7ff f93f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16642:	9b01      	ldr	r3, [sp, #4]
   16644:	4283      	cmp	r3, r0
   16646:	d1de      	bne.n	16606 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16648:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   1664a:	f10b 0b01 	add.w	fp, fp, #1
   1664e:	e7ed      	b.n	1662c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16650:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   16654:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16656:	45d3      	cmp	fp, sl
   16658:	db22      	blt.n	166a0 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   1665a:	fb05 f304 	mul.w	r3, r5, r4
   1665e:	9301      	str	r3, [sp, #4]
   16660:	2300      	movs	r3, #0
   16662:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   16666:	461e      	mov	r6, r3
   16668:	42b7      	cmp	r7, r6
   1666a:	dd33      	ble.n	166d4 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   1666c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1666e:	eba1 0904 	sub.w	r9, r1, r4
   16672:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   16676:	2200      	movs	r2, #0
   16678:	4294      	cmp	r4, r2
   1667a:	dd26      	ble.n	166ca <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1667c:	f819 ab01 	ldrb.w	sl, [r9], #1
   16680:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   16684:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   16686:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   1668a:	42a8      	cmp	r0, r5
   1668c:	da19      	bge.n	166c2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   1668e:	f89c b000 	ldrb.w	fp, [ip]
   16692:	45d3      	cmp	fp, sl
   16694:	bf3c      	itt	cc
   16696:	4680      	movcc	r8, r0
   16698:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   1669a:	3001      	adds	r0, #1
   1669c:	44a4      	add	ip, r4
   1669e:	e7f4      	b.n	1668a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   166a0:	4659      	mov	r1, fp
   166a2:	4630      	mov	r0, r6
   166a4:	f7ff f90c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   166a8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   166ac:	9001      	str	r0, [sp, #4]
   166ae:	4640      	mov	r0, r8
   166b0:	f7ff f906 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   166b4:	9b01      	ldr	r3, [sp, #4]
   166b6:	4283      	cmp	r3, r0
   166b8:	d1a5      	bne.n	16606 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   166ba:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   166bc:	f10b 0b01 	add.w	fp, fp, #1
   166c0:	e7c9      	b.n	16656 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   166c2:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   166c6:	3201      	adds	r2, #1
   166c8:	e7d6      	b.n	16678 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   166ca:	9a01      	ldr	r2, [sp, #4]
   166cc:	3601      	adds	r6, #1
   166ce:	4423      	add	r3, r4
   166d0:	4411      	add	r1, r2
   166d2:	e7c9      	b.n	16668 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   166d4:	b003      	add	sp, #12
   166d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000166da <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   166da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   166de:	f8d0 a000 	ldr.w	sl, [r0]
   166e2:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   166e6:	4606      	mov	r6, r0
   166e8:	4689      	mov	r9, r1
   166ea:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   166ec:	dc01      	bgt.n	166f2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   166ee:	f007 ff70 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   166f2:	f8d8 1000 	ldr.w	r1, [r8]
   166f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   166fa:	428b      	cmp	r3, r1
   166fc:	d1f7      	bne.n	166ee <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   166fe:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   16700:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   16702:	bfb8      	it	lt
   16704:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16706:	4621      	mov	r1, r4
   16708:	f7ff f8da 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   1670c:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   16710:	4605      	mov	r5, r0
  int outer_size = 1;
   16712:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   16714:	455c      	cmp	r4, fp
   16716:	dd0f      	ble.n	16738 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16718:	4659      	mov	r1, fp
   1671a:	4630      	mov	r0, r6
   1671c:	f7ff f8d0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16720:	4659      	mov	r1, fp
   16722:	9001      	str	r0, [sp, #4]
   16724:	4640      	mov	r0, r8
   16726:	f7ff f8cb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1672a:	9b01      	ldr	r3, [sp, #4]
   1672c:	4283      	cmp	r3, r0
   1672e:	d1de      	bne.n	166ee <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16730:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   16732:	f10b 0b01 	add.w	fp, fp, #1
   16736:	e7ed      	b.n	16714 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16738:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   1673c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1673e:	45d3      	cmp	fp, sl
   16740:	db22      	blt.n	16788 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   16742:	fb05 f304 	mul.w	r3, r5, r4
   16746:	9301      	str	r3, [sp, #4]
   16748:	2300      	movs	r3, #0
   1674a:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   1674e:	461e      	mov	r6, r3
   16750:	42b7      	cmp	r7, r6
   16752:	dd33      	ble.n	167bc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   16754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16756:	eba1 0904 	sub.w	r9, r1, r4
   1675a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   1675e:	2200      	movs	r2, #0
   16760:	4294      	cmp	r4, r2
   16762:	dd26      	ble.n	167b2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   16764:	f919 ab01 	ldrsb.w	sl, [r9], #1
   16768:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   1676c:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   1676e:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   16772:	42a8      	cmp	r0, r5
   16774:	da19      	bge.n	167aa <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   16776:	f99c b000 	ldrsb.w	fp, [ip]
   1677a:	45d3      	cmp	fp, sl
   1677c:	bfc4      	itt	gt
   1677e:	4680      	movgt	r8, r0
   16780:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   16782:	3001      	adds	r0, #1
   16784:	44a4      	add	ip, r4
   16786:	e7f4      	b.n	16772 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   16788:	4659      	mov	r1, fp
   1678a:	4630      	mov	r0, r6
   1678c:	f7ff f898 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16790:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   16794:	9001      	str	r0, [sp, #4]
   16796:	4640      	mov	r0, r8
   16798:	f7ff f892 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1679c:	9b01      	ldr	r3, [sp, #4]
   1679e:	4283      	cmp	r3, r0
   167a0:	d1a5      	bne.n	166ee <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   167a2:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   167a4:	f10b 0b01 	add.w	fp, fp, #1
   167a8:	e7c9      	b.n	1673e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   167aa:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   167ae:	3201      	adds	r2, #1
   167b0:	e7d6      	b.n	16760 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   167b2:	9a01      	ldr	r2, [sp, #4]
   167b4:	3601      	adds	r6, #1
   167b6:	4423      	add	r3, r4
   167b8:	4411      	add	r1, r2
   167ba:	e7c9      	b.n	16750 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   167bc:	b003      	add	sp, #12
   167be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000167c2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   167c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   167c6:	f8d0 a000 	ldr.w	sl, [r0]
   167ca:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   167ce:	4606      	mov	r6, r0
   167d0:	4689      	mov	r9, r1
   167d2:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   167d4:	dc01      	bgt.n	167da <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   167d6:	f007 fefc 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   167da:	f8d8 1000 	ldr.w	r1, [r8]
   167de:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   167e2:	428b      	cmp	r3, r1
   167e4:	d1f7      	bne.n	167d6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   167e6:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   167e8:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   167ea:	bfb8      	it	lt
   167ec:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   167ee:	4621      	mov	r1, r4
   167f0:	f7ff f866 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   167f4:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   167f8:	4605      	mov	r5, r0
  int outer_size = 1;
   167fa:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   167fc:	455c      	cmp	r4, fp
   167fe:	dd0f      	ble.n	16820 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16800:	4659      	mov	r1, fp
   16802:	4630      	mov	r0, r6
   16804:	f7ff f85c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16808:	4659      	mov	r1, fp
   1680a:	9001      	str	r0, [sp, #4]
   1680c:	4640      	mov	r0, r8
   1680e:	f7ff f857 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16812:	9b01      	ldr	r3, [sp, #4]
   16814:	4283      	cmp	r3, r0
   16816:	d1de      	bne.n	167d6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16818:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   1681a:	f10b 0b01 	add.w	fp, fp, #1
   1681e:	e7ed      	b.n	167fc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16820:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   16824:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16826:	45d3      	cmp	fp, sl
   16828:	db22      	blt.n	16870 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   1682a:	fb05 f304 	mul.w	r3, r5, r4
   1682e:	9301      	str	r3, [sp, #4]
   16830:	2300      	movs	r3, #0
   16832:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   16836:	461e      	mov	r6, r3
   16838:	42b7      	cmp	r7, r6
   1683a:	dd33      	ble.n	168a4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   1683c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1683e:	eba1 0904 	sub.w	r9, r1, r4
   16842:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   16846:	2200      	movs	r2, #0
   16848:	4294      	cmp	r4, r2
   1684a:	dd26      	ble.n	1689a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1684c:	f919 ab01 	ldrsb.w	sl, [r9], #1
   16850:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   16854:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   16856:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   1685a:	42a8      	cmp	r0, r5
   1685c:	da19      	bge.n	16892 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   1685e:	f99c b000 	ldrsb.w	fp, [ip]
   16862:	45d3      	cmp	fp, sl
   16864:	bfbc      	itt	lt
   16866:	4680      	movlt	r8, r0
   16868:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   1686a:	3001      	adds	r0, #1
   1686c:	44a4      	add	ip, r4
   1686e:	e7f4      	b.n	1685a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   16870:	4659      	mov	r1, fp
   16872:	4630      	mov	r0, r6
   16874:	f7ff f824 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16878:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   1687c:	9001      	str	r0, [sp, #4]
   1687e:	4640      	mov	r0, r8
   16880:	f7ff f81e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16884:	9b01      	ldr	r3, [sp, #4]
   16886:	4283      	cmp	r3, r0
   16888:	d1a5      	bne.n	167d6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   1688a:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   1688c:	f10b 0b01 	add.w	fp, fp, #1
   16890:	e7c9      	b.n	16826 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   16892:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   16896:	3201      	adds	r2, #1
   16898:	e7d6      	b.n	16848 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   1689a:	9a01      	ldr	r2, [sp, #4]
   1689c:	3601      	adds	r6, #1
   1689e:	4423      	add	r3, r4
   168a0:	4411      	add	r1, r2
   168a2:	e7c9      	b.n	16838 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   168a4:	b003      	add	sp, #12
   168a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000168aa <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, false);
   168aa:	2200      	movs	r2, #0
   168ac:	f7f0 be34 	b.w	7518 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000168b0 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, true);
   168b0:	2201      	movs	r2, #1
   168b2:	f7f0 be31 	b.w	7518 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>:
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   168b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ > kMaxSmallSize) {
   168b8:	6803      	ldr	r3, [r0, #0]
   168ba:	2b05      	cmp	r3, #5
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   168bc:	4604      	mov	r4, r0
   168be:	460d      	mov	r5, r1
   168c0:	4616      	mov	r6, r2
    if (size_ > kMaxSmallSize) {
   168c2:	dd03      	ble.n	168cc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
      delete[] dims_pointer_;
   168c4:	6840      	ldr	r0, [r0, #4]
   168c6:	b108      	cbz	r0, 168cc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
   168c8:	f007 fe5f 	bl	1e58a <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   168cc:	2d05      	cmp	r5, #5
    size_ = dimensions_count;
   168ce:	6025      	str	r5, [r4, #0]
    if (dimensions_count > kMaxSmallSize) {
   168d0:	ea4f 0785 	mov.w	r7, r5, lsl #2
   168d4:	dc06      	bgt.n	168e4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168d6:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   168d8:	463a      	mov	r2, r7
   168da:	4631      	mov	r1, r6
  }
   168dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   168e0:	f007 be8c 	b.w	1e5fc <memcpy>
      dims_pointer_ = new int32[dimensions_count];
   168e4:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   168e8:	4285      	cmp	r5, r0
   168ea:	bfb4      	ite	lt
   168ec:	4638      	movlt	r0, r7
   168ee:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   168f2:	f007 fe5b 	bl	1e5ac <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168f6:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   168f8:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168fa:	2b05      	cmp	r3, #5
   168fc:	dcec      	bgt.n	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x22>
   168fe:	e7ea      	b.n	168d6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x20>

00016900 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
   16904:	680b      	ldr	r3, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
   16906:	684a      	ldr	r2, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   16908:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1690a:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1690c:	6855      	ldr	r5, [r2, #4]
   1690e:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   16912:	eb14 1483 	adds.w	r4, r4, r3, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16916:	b08c      	sub	sp, #48	; 0x30
   16918:	d108      	bne.n	1692c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
  RuntimeShape() : size_(0) {}
   1691a:	9400      	str	r4, [sp, #0]
   1691c:	b985      	cbnz	r5, 16940 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   1691e:	9506      	str	r5, [sp, #24]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   16920:	9f00      	ldr	r7, [sp, #0]
   16922:	9b06      	ldr	r3, [sp, #24]
   16924:	429f      	cmp	r7, r3
   16926:	d015      	beq.n	16954 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x54>
   16928:	f007 fe53 	bl	1e5d2 <abort>
  const int dims_size = dims->size;
   1692c:	68a2      	ldr	r2, [r4, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   1692e:	2300      	movs	r3, #0
   16930:	f852 1b04 	ldr.w	r1, [r2], #4
   16934:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   16936:	4668      	mov	r0, sp
   16938:	f7ff ffbd 	bl	168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1693c:	6864      	ldr	r4, [r4, #4]
   1693e:	e7ed      	b.n	1691c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  const int dims_size = dims->size;
   16940:	68aa      	ldr	r2, [r5, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   16942:	2300      	movs	r3, #0
   16944:	f852 1b04 	ldr.w	r1, [r2], #4
   16948:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   1694a:	a806      	add	r0, sp, #24
   1694c:	f7ff ffb3 	bl	168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16950:	686d      	ldr	r5, [r5, #4]
   16952:	e7e5      	b.n	16920 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  for (int i = 0; i < dims_count; ++i) {
   16954:	2600      	movs	r6, #0
   16956:	42b7      	cmp	r7, r6
   16958:	dd0c      	ble.n	16974 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1695a:	4631      	mov	r1, r6
   1695c:	4668      	mov	r0, sp
   1695e:	f7fe ffaf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16962:	4631      	mov	r1, r6
   16964:	4680      	mov	r8, r0
   16966:	a806      	add	r0, sp, #24
   16968:	f7fe ffaa 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1696c:	4580      	cmp	r8, r0
   1696e:	d1db      	bne.n	16928 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x28>
  for (int i = 0; i < dims_count; ++i) {
   16970:	3601      	adds	r6, #1
   16972:	e7f0      	b.n	16956 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x56>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16974:	2f05      	cmp	r7, #5
   16976:	bfcc      	ite	gt
   16978:	9a01      	ldrgt	r2, [sp, #4]
   1697a:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   1697c:	2300      	movs	r3, #0
    int buffer_size = 1;
   1697e:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
   16982:	429f      	cmp	r7, r3
   16984:	dc0a      	bgt.n	1699c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x9c>

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   16986:	2600      	movs	r6, #0
   16988:	4546      	cmp	r6, r8
   1698a:	da0d      	bge.n	169a8 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  { return __builtin_ceilf(__x); }
   1698c:	ecb4 0a01 	vldmia	r4!, {s0}
   16990:	f7fb fb36 	bl	12000 <ceilf>
   16994:	3601      	adds	r6, #1
    output_data[i] = std::ceil(input_data[i]);
   16996:	eca5 0a01 	vstmia	r5!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   1699a:	e7f5      	b.n	16988 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      buffer_size *= dims_data[i];
   1699c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   169a0:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   169a2:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
   169a6:	e7ec      	b.n	16982 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x82>
                      GetTensorShape(output), GetTensorData<float>(output));
   169a8:	a806      	add	r0, sp, #24
   169aa:	f7fe ff7e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   169ae:	4668      	mov	r0, sp
   169b0:	f7fe ff7b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   169b4:	2000      	movs	r0, #0
   169b6:	b00c      	add	sp, #48	; 0x30
   169b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
                            const RuntimeShape& check_shape_1) {
   169bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   169c0:	6805      	ldr	r5, [r0, #0]
   169c2:	680b      	ldr	r3, [r1, #0]
   169c4:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   169c6:	4604      	mov	r4, r0
   169c8:	4688      	mov	r8, r1
   169ca:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   169cc:	d001      	beq.n	169d2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   169ce:	f007 fe00 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   169d2:	2600      	movs	r6, #0
   169d4:	42ae      	cmp	r6, r5
   169d6:	da0c      	bge.n	169f2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   169d8:	4631      	mov	r1, r6
   169da:	4620      	mov	r0, r4
   169dc:	f7fe ff70 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   169e0:	4631      	mov	r1, r6
   169e2:	4681      	mov	r9, r0
   169e4:	4640      	mov	r0, r8
   169e6:	f7fe ff6b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   169ea:	4581      	cmp	r9, r0
   169ec:	d1ef      	bne.n	169ce <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   169ee:	3601      	adds	r6, #1
   169f0:	e7f0      	b.n	169d4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   169f2:	683b      	ldr	r3, [r7, #0]
   169f4:	429d      	cmp	r5, r3
   169f6:	d1ea      	bne.n	169ce <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   169f8:	2600      	movs	r6, #0
   169fa:	42b5      	cmp	r5, r6
   169fc:	dd0c      	ble.n	16a18 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   169fe:	4631      	mov	r1, r6
   16a00:	4620      	mov	r0, r4
   16a02:	f7fe ff5d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a06:	4631      	mov	r1, r6
   16a08:	4680      	mov	r8, r0
   16a0a:	4638      	mov	r0, r7
   16a0c:	f7fe ff58 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a10:	4580      	cmp	r8, r0
   16a12:	d1dc      	bne.n	169ce <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   16a14:	3601      	adds	r6, #1
   16a16:	e7f0      	b.n	169fa <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16a18:	2d05      	cmp	r5, #5
   16a1a:	bfcc      	ite	gt
   16a1c:	6864      	ldrgt	r4, [r4, #4]
   16a1e:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   16a20:	2300      	movs	r3, #0
    int buffer_size = 1;
   16a22:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   16a24:	429d      	cmp	r5, r3
   16a26:	dd04      	ble.n	16a32 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   16a28:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   16a2c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   16a2e:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   16a30:	e7f8      	b.n	16a24 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
}
   16a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>:
    const RuntimeShape& unextended_output_shape) {
   16a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a3a:	461f      	mov	r7, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   16a3c:	680b      	ldr	r3, [r1, #0]
   16a3e:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape) {
   16a40:	b09c      	sub	sp, #112	; 0x70
   16a42:	4606      	mov	r6, r0
   16a44:	4614      	mov	r4, r2
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   16a46:	dd01      	ble.n	16a4c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x16>
   16a48:	f007 fdc3 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   16a4c:	6813      	ldr	r3, [r2, #0]
   16a4e:	2b04      	cmp	r3, #4
   16a50:	dcfa      	bgt.n	16a48 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   16a52:	683b      	ldr	r3, [r7, #0]
   16a54:	2b04      	cmp	r3, #4
   16a56:	dcf7      	bgt.n	16a48 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
    return RuntimeShape(new_shape_size, shape, 1);
   16a58:	460a      	mov	r2, r1
   16a5a:	2301      	movs	r3, #1
   16a5c:	2104      	movs	r1, #4
   16a5e:	4668      	mov	r0, sp
   16a60:	f7fe ffc3 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   16a64:	4622      	mov	r2, r4
   16a66:	2301      	movs	r3, #1
   16a68:	2104      	movs	r1, #4
   16a6a:	a806      	add	r0, sp, #24
   16a6c:	f7fe ffbd 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   16a70:	a90c      	add	r1, sp, #48	; 0x30
   16a72:	4668      	mov	r0, sp
   16a74:	f7ff f9a7 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   16a78:	a914      	add	r1, sp, #80	; 0x50
   16a7a:	a806      	add	r0, sp, #24
   16a7c:	f7ff f9a3 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   16a80:	2400      	movs	r4, #0
   16a82:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   16a86:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   16a8a:	46a2      	mov	sl, r4
    const int extent0 = extended_input0_shape.Dims(i);
   16a8c:	4621      	mov	r1, r4
   16a8e:	4668      	mov	r0, sp
   16a90:	f7fe ff16 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   16a94:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   16a96:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   16a98:	a806      	add	r0, sp, #24
   16a9a:	f7fe ff11 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   16a9e:	4285      	cmp	r5, r0
   16aa0:	d005      	beq.n	16aae <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>
      if (extent0 == 1) {
   16aa2:	2d01      	cmp	r5, #1
   16aa4:	d12c      	bne.n	16b00 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0xca>
        desc0_out->strides[i] = 0;
   16aa6:	f8c8 a010 	str.w	sl, [r8, #16]
        desc0_out->extents[i] = extent1;
   16aaa:	f8c8 0000 	str.w	r0, [r8]
  for (int i = 0; i < N; ++i) {
   16aae:	3401      	adds	r4, #1
   16ab0:	2c04      	cmp	r4, #4
   16ab2:	f109 0904 	add.w	r9, r9, #4
   16ab6:	f108 0804 	add.w	r8, r8, #4
   16aba:	d1e7      	bne.n	16a8c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x56>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   16abc:	a806      	add	r0, sp, #24
   16abe:	f7fe fef4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   16ac2:	4668      	mov	r0, sp
   16ac4:	f7fe fef1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   16ac8:	463a      	mov	r2, r7
   16aca:	4621      	mov	r1, r4
   16acc:	2301      	movs	r3, #1
   16ace:	4630      	mov	r0, r6
          desc2};
   16ad0:	ac0c      	add	r4, sp, #48	; 0x30
   16ad2:	f7fe ff8a 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   16ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16ad8:	f106 0518 	add.w	r5, r6, #24
   16adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16ade:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   16ae2:	ac14      	add	r4, sp, #80	; 0x50
   16ae4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   16ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16aea:	f106 0538 	add.w	r5, r6, #56	; 0x38
   16aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16af0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   16af4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
   16af8:	4630      	mov	r0, r6
   16afa:	b01c      	add	sp, #112	; 0x70
   16afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   16b00:	2801      	cmp	r0, #1
   16b02:	d1a1      	bne.n	16a48 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
        desc1_out->strides[i] = 0;
   16b04:	f8c9 a010 	str.w	sl, [r9, #16]
        desc1_out->extents[i] = extent0;
   16b08:	f8c9 5000 	str.w	r5, [r9]
   16b0c:	e7cf      	b.n	16aae <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>

00016b0e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16b0e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16b12:	b098      	sub	sp, #96	; 0x60
   16b14:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16b16:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16b18:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16b1c:	f7ff ff8b 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16b20:	2400      	movs	r4, #0
   16b22:	2100      	movs	r1, #0
   16b24:	a802      	add	r0, sp, #8
   16b26:	f7fe fecb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b2a:	42a0      	cmp	r0, r4
   16b2c:	dd45      	ble.n	16bba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16b2e:	2500      	movs	r5, #0
   16b30:	2101      	movs	r1, #1
   16b32:	a802      	add	r0, sp, #8
   16b34:	f7fe fec4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b38:	42a8      	cmp	r0, r5
   16b3a:	dd3c      	ble.n	16bb6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16b3c:	2600      	movs	r6, #0
   16b3e:	2102      	movs	r1, #2
   16b40:	a802      	add	r0, sp, #8
   16b42:	f7fe febd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b46:	42b0      	cmp	r0, r6
   16b48:	dd33      	ble.n	16bb2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16b4a:	2700      	movs	r7, #0
   16b4c:	2103      	movs	r1, #3
   16b4e:	a802      	add	r0, sp, #8
   16b50:	f7fe feb6 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b54:	42b8      	cmp	r0, r7
   16b56:	dd2a      	ble.n	16bae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16b58:	9700      	str	r7, [sp, #0]
   16b5a:	4633      	mov	r3, r6
   16b5c:	462a      	mov	r2, r5
   16b5e:	4621      	mov	r1, r4
   16b60:	a808      	add	r0, sp, #32
   16b62:	f7fe ffa5 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b66:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16b68:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b6a:	4633      	mov	r3, r6
   16b6c:	462a      	mov	r2, r5
   16b6e:	4621      	mov	r1, r4
   16b70:	a810      	add	r0, sp, #64	; 0x40
   16b72:	f7fe ff9d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16b76:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b78:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16b7a:	9700      	str	r7, [sp, #0]
   16b7c:	4633      	mov	r3, r6
   16b7e:	4621      	mov	r1, r4
   16b80:	a802      	add	r0, sp, #8
   16b82:	f7fe ff5f 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16b88:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16b8c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs == rhs;
   16b90:	ed9a 7a00 	vldr	s14, [sl]
   16b94:	edd9 7a00 	vldr	s15, [r9]
   16b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16b9a:	eeb4 7a67 	vcmp.f32	s14, s15
   16b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ba2:	bf0c      	ite	eq
   16ba4:	2201      	moveq	r2, #1
   16ba6:	2200      	movne	r2, #0
   16ba8:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16baa:	3701      	adds	r7, #1
   16bac:	e7ce      	b.n	16b4c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16bae:	3601      	adds	r6, #1
   16bb0:	e7c5      	b.n	16b3e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16bb2:	3501      	adds	r5, #1
   16bb4:	e7bc      	b.n	16b30 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16bb6:	3401      	adds	r4, #1
   16bb8:	e7b3      	b.n	16b22 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16bba:	a802      	add	r0, sp, #8
   16bbc:	f7fe fe75 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16bc0:	b018      	add	sp, #96	; 0x60
   16bc2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016bc6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16bc6:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16bca:	b098      	sub	sp, #96	; 0x60
   16bcc:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16bce:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16bd0:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16bd4:	f7ff ff2f 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16bd8:	2400      	movs	r4, #0
   16bda:	2100      	movs	r1, #0
   16bdc:	a802      	add	r0, sp, #8
   16bde:	f7fe fe6f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16be2:	42a0      	cmp	r0, r4
   16be4:	dd45      	ble.n	16c72 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16be6:	2500      	movs	r5, #0
   16be8:	2101      	movs	r1, #1
   16bea:	a802      	add	r0, sp, #8
   16bec:	f7fe fe68 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16bf0:	42a8      	cmp	r0, r5
   16bf2:	dd3c      	ble.n	16c6e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16bf4:	2600      	movs	r6, #0
   16bf6:	2102      	movs	r1, #2
   16bf8:	a802      	add	r0, sp, #8
   16bfa:	f7fe fe61 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16bfe:	42b0      	cmp	r0, r6
   16c00:	dd33      	ble.n	16c6a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16c02:	2700      	movs	r7, #0
   16c04:	2103      	movs	r1, #3
   16c06:	a802      	add	r0, sp, #8
   16c08:	f7fe fe5a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c0c:	42b8      	cmp	r0, r7
   16c0e:	dd2a      	ble.n	16c66 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c10:	9700      	str	r7, [sp, #0]
   16c12:	4633      	mov	r3, r6
   16c14:	462a      	mov	r2, r5
   16c16:	4621      	mov	r1, r4
   16c18:	a808      	add	r0, sp, #32
   16c1a:	f7fe ff49 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c1e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c20:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c22:	4633      	mov	r3, r6
   16c24:	462a      	mov	r2, r5
   16c26:	4621      	mov	r1, r4
   16c28:	a810      	add	r0, sp, #64	; 0x40
   16c2a:	f7fe ff41 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16c2e:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c30:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16c32:	9700      	str	r7, [sp, #0]
   16c34:	4633      	mov	r3, r6
   16c36:	4621      	mov	r1, r4
   16c38:	a802      	add	r0, sp, #8
   16c3a:	f7fe ff03 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16c40:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16c44:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs != rhs;
   16c48:	ed9a 7a00 	vldr	s14, [sl]
   16c4c:	edd9 7a00 	vldr	s15, [r9]
   16c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16c52:	eeb4 7a67 	vcmp.f32	s14, s15
   16c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c5a:	bf14      	ite	ne
   16c5c:	2201      	movne	r2, #1
   16c5e:	2200      	moveq	r2, #0
   16c60:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16c62:	3701      	adds	r7, #1
   16c64:	e7ce      	b.n	16c04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16c66:	3601      	adds	r6, #1
   16c68:	e7c5      	b.n	16bf6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16c6a:	3501      	adds	r5, #1
   16c6c:	e7bc      	b.n	16be8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16c6e:	3401      	adds	r4, #1
   16c70:	e7b3      	b.n	16bda <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16c72:	a802      	add	r0, sp, #8
   16c74:	f7fe fe19 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16c78:	b018      	add	sp, #96	; 0x60
   16c7a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016c7e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16c7e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16c82:	b098      	sub	sp, #96	; 0x60
   16c84:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16c86:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16c88:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16c8c:	f7ff fed3 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16c90:	2400      	movs	r4, #0
   16c92:	2100      	movs	r1, #0
   16c94:	a802      	add	r0, sp, #8
   16c96:	f7fe fe13 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c9a:	42a0      	cmp	r0, r4
   16c9c:	dd45      	ble.n	16d2a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16c9e:	2500      	movs	r5, #0
   16ca0:	2101      	movs	r1, #1
   16ca2:	a802      	add	r0, sp, #8
   16ca4:	f7fe fe0c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ca8:	42a8      	cmp	r0, r5
   16caa:	dd3c      	ble.n	16d26 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16cac:	2600      	movs	r6, #0
   16cae:	2102      	movs	r1, #2
   16cb0:	a802      	add	r0, sp, #8
   16cb2:	f7fe fe05 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16cb6:	42b0      	cmp	r0, r6
   16cb8:	dd33      	ble.n	16d22 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16cba:	2700      	movs	r7, #0
   16cbc:	2103      	movs	r1, #3
   16cbe:	a802      	add	r0, sp, #8
   16cc0:	f7fe fdfe 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16cc4:	42b8      	cmp	r0, r7
   16cc6:	dd2a      	ble.n	16d1e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16cc8:	9700      	str	r7, [sp, #0]
   16cca:	4633      	mov	r3, r6
   16ccc:	462a      	mov	r2, r5
   16cce:	4621      	mov	r1, r4
   16cd0:	a808      	add	r0, sp, #32
   16cd2:	f7fe feed 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16cd6:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16cd8:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16cda:	4633      	mov	r3, r6
   16cdc:	462a      	mov	r2, r5
   16cde:	4621      	mov	r1, r4
   16ce0:	a810      	add	r0, sp, #64	; 0x40
   16ce2:	f7fe fee5 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16ce6:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16ce8:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16cea:	9700      	str	r7, [sp, #0]
   16cec:	4633      	mov	r3, r6
   16cee:	4621      	mov	r1, r4
   16cf0:	a802      	add	r0, sp, #8
   16cf2:	f7fe fea7 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16cf8:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16cfc:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs > rhs;
   16d00:	ed9a 7a00 	vldr	s14, [sl]
   16d04:	edd9 7a00 	vldr	s15, [r9]
   16d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d12:	bfcc      	ite	gt
   16d14:	2201      	movgt	r2, #1
   16d16:	2200      	movle	r2, #0
   16d18:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16d1a:	3701      	adds	r7, #1
   16d1c:	e7ce      	b.n	16cbc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16d1e:	3601      	adds	r6, #1
   16d20:	e7c5      	b.n	16cae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16d22:	3501      	adds	r5, #1
   16d24:	e7bc      	b.n	16ca0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16d26:	3401      	adds	r4, #1
   16d28:	e7b3      	b.n	16c92 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16d2a:	a802      	add	r0, sp, #8
   16d2c:	f7fe fdbd 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16d30:	b018      	add	sp, #96	; 0x60
   16d32:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016d36 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16d36:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16d3a:	b098      	sub	sp, #96	; 0x60
   16d3c:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16d3e:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16d40:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16d44:	f7ff fe77 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16d48:	2400      	movs	r4, #0
   16d4a:	2100      	movs	r1, #0
   16d4c:	a802      	add	r0, sp, #8
   16d4e:	f7fe fdb7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d52:	42a0      	cmp	r0, r4
   16d54:	dd45      	ble.n	16de2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16d56:	2500      	movs	r5, #0
   16d58:	2101      	movs	r1, #1
   16d5a:	a802      	add	r0, sp, #8
   16d5c:	f7fe fdb0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d60:	42a8      	cmp	r0, r5
   16d62:	dd3c      	ble.n	16dde <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16d64:	2600      	movs	r6, #0
   16d66:	2102      	movs	r1, #2
   16d68:	a802      	add	r0, sp, #8
   16d6a:	f7fe fda9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d6e:	42b0      	cmp	r0, r6
   16d70:	dd33      	ble.n	16dda <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16d72:	2700      	movs	r7, #0
   16d74:	2103      	movs	r1, #3
   16d76:	a802      	add	r0, sp, #8
   16d78:	f7fe fda2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d7c:	42b8      	cmp	r0, r7
   16d7e:	dd2a      	ble.n	16dd6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16d80:	9700      	str	r7, [sp, #0]
   16d82:	4633      	mov	r3, r6
   16d84:	462a      	mov	r2, r5
   16d86:	4621      	mov	r1, r4
   16d88:	a808      	add	r0, sp, #32
   16d8a:	f7fe fe91 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16d8e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16d90:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16d92:	4633      	mov	r3, r6
   16d94:	462a      	mov	r2, r5
   16d96:	4621      	mov	r1, r4
   16d98:	a810      	add	r0, sp, #64	; 0x40
   16d9a:	f7fe fe89 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16d9e:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16da0:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16da2:	9700      	str	r7, [sp, #0]
   16da4:	4633      	mov	r3, r6
   16da6:	4621      	mov	r1, r4
   16da8:	a802      	add	r0, sp, #8
   16daa:	f7fe fe4b 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16db0:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16db4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs >= rhs;
   16db8:	ed9a 7a00 	vldr	s14, [sl]
   16dbc:	edd9 7a00 	vldr	s15, [r9]
   16dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16dca:	bfac      	ite	ge
   16dcc:	2201      	movge	r2, #1
   16dce:	2200      	movlt	r2, #0
   16dd0:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16dd2:	3701      	adds	r7, #1
   16dd4:	e7ce      	b.n	16d74 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16dd6:	3601      	adds	r6, #1
   16dd8:	e7c5      	b.n	16d66 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16dda:	3501      	adds	r5, #1
   16ddc:	e7bc      	b.n	16d58 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16dde:	3401      	adds	r4, #1
   16de0:	e7b3      	b.n	16d4a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16de2:	a802      	add	r0, sp, #8
   16de4:	f7fe fd61 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16de8:	b018      	add	sp, #96	; 0x60
   16dea:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016dee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16dee:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16df2:	b098      	sub	sp, #96	; 0x60
   16df4:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16df6:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16df8:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16dfc:	f7ff fe1b 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16e00:	2400      	movs	r4, #0
   16e02:	2100      	movs	r1, #0
   16e04:	a802      	add	r0, sp, #8
   16e06:	f7fe fd5b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e0a:	42a0      	cmp	r0, r4
   16e0c:	dd45      	ble.n	16e9a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16e0e:	2500      	movs	r5, #0
   16e10:	2101      	movs	r1, #1
   16e12:	a802      	add	r0, sp, #8
   16e14:	f7fe fd54 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e18:	42a8      	cmp	r0, r5
   16e1a:	dd3c      	ble.n	16e96 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16e1c:	2600      	movs	r6, #0
   16e1e:	2102      	movs	r1, #2
   16e20:	a802      	add	r0, sp, #8
   16e22:	f7fe fd4d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e26:	42b0      	cmp	r0, r6
   16e28:	dd33      	ble.n	16e92 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16e2a:	2700      	movs	r7, #0
   16e2c:	2103      	movs	r1, #3
   16e2e:	a802      	add	r0, sp, #8
   16e30:	f7fe fd46 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e34:	42b8      	cmp	r0, r7
   16e36:	dd2a      	ble.n	16e8e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e38:	9700      	str	r7, [sp, #0]
   16e3a:	4633      	mov	r3, r6
   16e3c:	462a      	mov	r2, r5
   16e3e:	4621      	mov	r1, r4
   16e40:	a808      	add	r0, sp, #32
   16e42:	f7fe fe35 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e46:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e48:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e4a:	4633      	mov	r3, r6
   16e4c:	462a      	mov	r2, r5
   16e4e:	4621      	mov	r1, r4
   16e50:	a810      	add	r0, sp, #64	; 0x40
   16e52:	f7fe fe2d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16e56:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e58:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16e5a:	9700      	str	r7, [sp, #0]
   16e5c:	4633      	mov	r3, r6
   16e5e:	4621      	mov	r1, r4
   16e60:	a802      	add	r0, sp, #8
   16e62:	f7fe fdef 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e68:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16e6c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs < rhs;
   16e70:	ed9a 7a00 	vldr	s14, [sl]
   16e74:	edd9 7a00 	vldr	s15, [r9]
   16e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e82:	bf4c      	ite	mi
   16e84:	2201      	movmi	r2, #1
   16e86:	2200      	movpl	r2, #0
   16e88:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16e8a:	3701      	adds	r7, #1
   16e8c:	e7ce      	b.n	16e2c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16e8e:	3601      	adds	r6, #1
   16e90:	e7c5      	b.n	16e1e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16e92:	3501      	adds	r5, #1
   16e94:	e7bc      	b.n	16e10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16e96:	3401      	adds	r4, #1
   16e98:	e7b3      	b.n	16e02 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16e9a:	a802      	add	r0, sp, #8
   16e9c:	f7fe fd05 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16ea0:	b018      	add	sp, #96	; 0x60
   16ea2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016ea6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16ea6:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16eaa:	b098      	sub	sp, #96	; 0x60
   16eac:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16eae:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16eb0:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16eb4:	f7ff fdbf 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16eb8:	2400      	movs	r4, #0
   16eba:	2100      	movs	r1, #0
   16ebc:	a802      	add	r0, sp, #8
   16ebe:	f7fe fcff 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ec2:	42a0      	cmp	r0, r4
   16ec4:	dd45      	ble.n	16f52 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16ec6:	2500      	movs	r5, #0
   16ec8:	2101      	movs	r1, #1
   16eca:	a802      	add	r0, sp, #8
   16ecc:	f7fe fcf8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ed0:	42a8      	cmp	r0, r5
   16ed2:	dd3c      	ble.n	16f4e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16ed4:	2600      	movs	r6, #0
   16ed6:	2102      	movs	r1, #2
   16ed8:	a802      	add	r0, sp, #8
   16eda:	f7fe fcf1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ede:	42b0      	cmp	r0, r6
   16ee0:	dd33      	ble.n	16f4a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16ee2:	2700      	movs	r7, #0
   16ee4:	2103      	movs	r1, #3
   16ee6:	a802      	add	r0, sp, #8
   16ee8:	f7fe fcea 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16eec:	42b8      	cmp	r0, r7
   16eee:	dd2a      	ble.n	16f46 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16ef0:	9700      	str	r7, [sp, #0]
   16ef2:	4633      	mov	r3, r6
   16ef4:	462a      	mov	r2, r5
   16ef6:	4621      	mov	r1, r4
   16ef8:	a808      	add	r0, sp, #32
   16efa:	f7fe fdd9 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16efe:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16f00:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16f02:	4633      	mov	r3, r6
   16f04:	462a      	mov	r2, r5
   16f06:	4621      	mov	r1, r4
   16f08:	a810      	add	r0, sp, #64	; 0x40
   16f0a:	f7fe fdd1 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16f0e:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16f10:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16f12:	9700      	str	r7, [sp, #0]
   16f14:	4633      	mov	r3, r6
   16f16:	4621      	mov	r1, r4
   16f18:	a802      	add	r0, sp, #8
   16f1a:	f7fe fd93 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16f1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f20:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16f24:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs <= rhs;
   16f28:	ed9a 7a00 	vldr	s14, [sl]
   16f2c:	edd9 7a00 	vldr	s15, [r9]
   16f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f3a:	bf94      	ite	ls
   16f3c:	2201      	movls	r2, #1
   16f3e:	2200      	movhi	r2, #0
   16f40:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16f42:	3701      	adds	r7, #1
   16f44:	e7ce      	b.n	16ee4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16f46:	3601      	adds	r6, #1
   16f48:	e7c5      	b.n	16ed6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16f4a:	3501      	adds	r5, #1
   16f4c:	e7bc      	b.n	16ec8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16f4e:	3401      	adds	r4, #1
   16f50:	e7b3      	b.n	16eba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16f52:	a802      	add	r0, sp, #8
   16f54:	f7fe fca9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   16f58:	b018      	add	sp, #96	; 0x60
   16f5a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016f5e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16f5e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16f62:	b098      	sub	sp, #96	; 0x60
   16f64:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   16f66:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16f68:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16f6c:	f7ff fd63 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16f70:	2400      	movs	r4, #0
   16f72:	2100      	movs	r1, #0
   16f74:	a802      	add	r0, sp, #8
   16f76:	f7fe fca3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f7a:	42a0      	cmp	r0, r4
   16f7c:	dd3d      	ble.n	16ffa <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16f7e:	2500      	movs	r5, #0
   16f80:	2101      	movs	r1, #1
   16f82:	a802      	add	r0, sp, #8
   16f84:	f7fe fc9c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f88:	42a8      	cmp	r0, r5
   16f8a:	dd34      	ble.n	16ff6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16f8c:	2600      	movs	r6, #0
   16f8e:	2102      	movs	r1, #2
   16f90:	a802      	add	r0, sp, #8
   16f92:	f7fe fc95 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f96:	42b0      	cmp	r0, r6
   16f98:	dd2b      	ble.n	16ff2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16f9a:	2700      	movs	r7, #0
   16f9c:	2103      	movs	r1, #3
   16f9e:	a802      	add	r0, sp, #8
   16fa0:	f7fe fc8e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   16fa4:	42b8      	cmp	r0, r7
   16fa6:	dd22      	ble.n	16fee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16fa8:	9700      	str	r7, [sp, #0]
   16faa:	4633      	mov	r3, r6
   16fac:	462a      	mov	r2, r5
   16fae:	4621      	mov	r1, r4
   16fb0:	a808      	add	r0, sp, #32
   16fb2:	f7fe fd7d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fb6:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16fb8:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fba:	4633      	mov	r3, r6
   16fbc:	462a      	mov	r2, r5
   16fbe:	4621      	mov	r1, r4
   16fc0:	a810      	add	r0, sp, #64	; 0x40
   16fc2:	f7fe fd75 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16fc6:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fc8:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16fca:	4633      	mov	r3, r6
   16fcc:	462a      	mov	r2, r5
   16fce:	4621      	mov	r1, r4
   16fd0:	a802      	add	r0, sp, #8
   16fd2:	f7fe fd37 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   16fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16fd8:	f819 200b 	ldrb.w	r2, [r9, fp]
   16fdc:	f813 100a 	ldrb.w	r1, [r3, sl]
   16fe0:	1a53      	subs	r3, r2, r1
   16fe2:	425a      	negs	r2, r3
   16fe4:	415a      	adcs	r2, r3
   16fe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16fe8:	3701      	adds	r7, #1
  return lhs == rhs;
   16fea:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16fec:	e7d6      	b.n	16f9c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16fee:	3601      	adds	r6, #1
   16ff0:	e7cd      	b.n	16f8e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16ff2:	3501      	adds	r5, #1
   16ff4:	e7c4      	b.n	16f80 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16ff6:	3401      	adds	r4, #1
   16ff8:	e7bb      	b.n	16f72 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16ffa:	a802      	add	r0, sp, #8
   16ffc:	f7fe fc55 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17000:	b018      	add	sp, #96	; 0x60
   17002:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017006 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17006:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1700a:	b098      	sub	sp, #96	; 0x60
   1700c:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   1700e:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17010:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17012:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17014:	f7ff fd0f 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17018:	2400      	movs	r4, #0
   1701a:	2100      	movs	r1, #0
   1701c:	a802      	add	r0, sp, #8
   1701e:	f7fe fc4f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17022:	42a0      	cmp	r0, r4
   17024:	dd3d      	ble.n	170a2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17026:	2500      	movs	r5, #0
   17028:	2101      	movs	r1, #1
   1702a:	a802      	add	r0, sp, #8
   1702c:	f7fe fc48 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17030:	42a8      	cmp	r0, r5
   17032:	dd34      	ble.n	1709e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17034:	2600      	movs	r6, #0
   17036:	2102      	movs	r1, #2
   17038:	a802      	add	r0, sp, #8
   1703a:	f7fe fc41 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1703e:	42b0      	cmp	r0, r6
   17040:	dd2b      	ble.n	1709a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17042:	2700      	movs	r7, #0
   17044:	2103      	movs	r1, #3
   17046:	a802      	add	r0, sp, #8
   17048:	f7fe fc3a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1704c:	42b8      	cmp	r0, r7
   1704e:	dd22      	ble.n	17096 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17050:	9700      	str	r7, [sp, #0]
   17052:	4633      	mov	r3, r6
   17054:	462a      	mov	r2, r5
   17056:	4621      	mov	r1, r4
   17058:	a808      	add	r0, sp, #32
   1705a:	f7fe fd29 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1705e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17060:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17062:	4633      	mov	r3, r6
   17064:	462a      	mov	r2, r5
   17066:	4621      	mov	r1, r4
   17068:	a810      	add	r0, sp, #64	; 0x40
   1706a:	f7fe fd21 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1706e:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17070:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17072:	4633      	mov	r3, r6
   17074:	462a      	mov	r2, r5
   17076:	4621      	mov	r1, r4
   17078:	a802      	add	r0, sp, #8
   1707a:	f7fe fce3 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   1707e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17080:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   17084:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   17088:	1a53      	subs	r3, r2, r1
   1708a:	425a      	negs	r2, r3
   1708c:	415a      	adcs	r2, r3
   1708e:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17090:	3701      	adds	r7, #1
  return lhs == rhs;
   17092:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17094:	e7d6      	b.n	17044 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17096:	3601      	adds	r6, #1
   17098:	e7cd      	b.n	17036 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1709a:	3501      	adds	r5, #1
   1709c:	e7c4      	b.n	17028 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1709e:	3401      	adds	r4, #1
   170a0:	e7bb      	b.n	1701a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   170a2:	a802      	add	r0, sp, #8
   170a4:	f7fe fc01 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   170a8:	b018      	add	sp, #96	; 0x60
   170aa:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000170ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   170ae:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   170b2:	b098      	sub	sp, #96	; 0x60
   170b4:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   170b6:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   170b8:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   170ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
   170bc:	f7ff fcbb 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   170c0:	2400      	movs	r4, #0
   170c2:	2100      	movs	r1, #0
   170c4:	a802      	add	r0, sp, #8
   170c6:	f7fe fbfb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   170ca:	42a0      	cmp	r0, r4
   170cc:	dd46      	ble.n	1715c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   170ce:	2500      	movs	r5, #0
   170d0:	2101      	movs	r1, #1
   170d2:	a802      	add	r0, sp, #8
   170d4:	f7fe fbf4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   170d8:	42a8      	cmp	r0, r5
   170da:	dd3d      	ble.n	17158 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   170dc:	f04f 0800 	mov.w	r8, #0
   170e0:	2102      	movs	r1, #2
   170e2:	a802      	add	r0, sp, #8
   170e4:	f7fe fbec 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   170e8:	4540      	cmp	r0, r8
   170ea:	dd33      	ble.n	17154 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   170ec:	2700      	movs	r7, #0
   170ee:	2103      	movs	r1, #3
   170f0:	a802      	add	r0, sp, #8
   170f2:	f7fe fbe5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   170f6:	42b8      	cmp	r0, r7
   170f8:	dd29      	ble.n	1714e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   170fa:	9700      	str	r7, [sp, #0]
   170fc:	4643      	mov	r3, r8
   170fe:	462a      	mov	r2, r5
   17100:	4621      	mov	r1, r4
   17102:	a808      	add	r0, sp, #32
   17104:	f7fe fcd4 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17108:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1710a:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1710c:	4643      	mov	r3, r8
   1710e:	462a      	mov	r2, r5
   17110:	4621      	mov	r1, r4
   17112:	a810      	add	r0, sp, #64	; 0x40
   17114:	f7fe fccc 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17118:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1711a:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1711c:	4643      	mov	r3, r8
   1711e:	462a      	mov	r2, r5
   17120:	4621      	mov	r1, r4
   17122:	a802      	add	r0, sp, #8
   17124:	f7fe fc8e 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17128:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1712a:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   1712e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs == rhs;
   17132:	e9d3 2300 	ldrd	r2, r3, [r3]
   17136:	e9db ab00 	ldrd	sl, fp, [fp]
   1713a:	459b      	cmp	fp, r3
   1713c:	bf08      	it	eq
   1713e:	4592      	cmpeq	sl, r2
   17140:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17142:	bf0c      	ite	eq
   17144:	2301      	moveq	r3, #1
   17146:	2300      	movne	r3, #0
   17148:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1714a:	3701      	adds	r7, #1
   1714c:	e7cf      	b.n	170ee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1714e:	f108 0801 	add.w	r8, r8, #1
   17152:	e7c5      	b.n	170e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17154:	3501      	adds	r5, #1
   17156:	e7bb      	b.n	170d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17158:	3401      	adds	r4, #1
   1715a:	e7b2      	b.n	170c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1715c:	a802      	add	r0, sp, #8
   1715e:	f7fe fba4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17162:	b018      	add	sp, #96	; 0x60
   17164:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00017168 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17168:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1716c:	b098      	sub	sp, #96	; 0x60
   1716e:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17170:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17172:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17174:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17176:	f7ff fc5e 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1717a:	2400      	movs	r4, #0
   1717c:	2100      	movs	r1, #0
   1717e:	a802      	add	r0, sp, #8
   17180:	f7fe fb9e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17184:	42a0      	cmp	r0, r4
   17186:	dd3b      	ble.n	17200 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17188:	2500      	movs	r5, #0
   1718a:	2101      	movs	r1, #1
   1718c:	a802      	add	r0, sp, #8
   1718e:	f7fe fb97 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17192:	42a8      	cmp	r0, r5
   17194:	dd32      	ble.n	171fc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17196:	2600      	movs	r6, #0
   17198:	2102      	movs	r1, #2
   1719a:	a802      	add	r0, sp, #8
   1719c:	f7fe fb90 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   171a0:	42b0      	cmp	r0, r6
   171a2:	dd29      	ble.n	171f8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   171a4:	2700      	movs	r7, #0
   171a6:	2103      	movs	r1, #3
   171a8:	a802      	add	r0, sp, #8
   171aa:	f7fe fb89 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   171ae:	42b8      	cmp	r0, r7
   171b0:	dd20      	ble.n	171f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x8c>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   171b2:	9700      	str	r7, [sp, #0]
   171b4:	4633      	mov	r3, r6
   171b6:	462a      	mov	r2, r5
   171b8:	4621      	mov	r1, r4
   171ba:	a808      	add	r0, sp, #32
   171bc:	f7fe fc78 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171c0:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   171c2:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171c4:	4633      	mov	r3, r6
   171c6:	462a      	mov	r2, r5
   171c8:	4621      	mov	r1, r4
   171ca:	a810      	add	r0, sp, #64	; 0x40
   171cc:	f7fe fc70 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171d0:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171d2:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171d4:	4633      	mov	r3, r6
   171d6:	462a      	mov	r2, r5
   171d8:	4621      	mov	r1, r4
   171da:	a802      	add	r0, sp, #8
   171dc:	f7fe fc32 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   171e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   171e2:	f819 200b 	ldrb.w	r2, [r9, fp]
   171e6:	f813 100a 	ldrb.w	r1, [r3, sl]
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  return lhs != rhs;
   171ec:	404a      	eors	r2, r1
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171ee:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   171f0:	3701      	adds	r7, #1
   171f2:	e7d8      	b.n	171a6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   171f4:	3601      	adds	r6, #1
   171f6:	e7cf      	b.n	17198 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   171f8:	3501      	adds	r5, #1
   171fa:	e7c6      	b.n	1718a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   171fc:	3401      	adds	r4, #1
   171fe:	e7bd      	b.n	1717c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17200:	a802      	add	r0, sp, #8
   17202:	f7fe fb52 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17206:	b018      	add	sp, #96	; 0x60
   17208:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001720c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1720c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   17210:	b098      	sub	sp, #96	; 0x60
   17212:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17214:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17216:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17218:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1721a:	f7ff fc0c 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1721e:	2400      	movs	r4, #0
   17220:	2100      	movs	r1, #0
   17222:	a802      	add	r0, sp, #8
   17224:	f7fe fb4c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17228:	42a0      	cmp	r0, r4
   1722a:	dd3d      	ble.n	172a8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1722c:	2500      	movs	r5, #0
   1722e:	2101      	movs	r1, #1
   17230:	a802      	add	r0, sp, #8
   17232:	f7fe fb45 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17236:	42a8      	cmp	r0, r5
   17238:	dd34      	ble.n	172a4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1723a:	2600      	movs	r6, #0
   1723c:	2102      	movs	r1, #2
   1723e:	a802      	add	r0, sp, #8
   17240:	f7fe fb3e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17244:	42b0      	cmp	r0, r6
   17246:	dd2b      	ble.n	172a0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17248:	2700      	movs	r7, #0
   1724a:	2103      	movs	r1, #3
   1724c:	a802      	add	r0, sp, #8
   1724e:	f7fe fb37 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17252:	42b8      	cmp	r0, r7
   17254:	dd22      	ble.n	1729c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17256:	9700      	str	r7, [sp, #0]
   17258:	4633      	mov	r3, r6
   1725a:	462a      	mov	r2, r5
   1725c:	4621      	mov	r1, r4
   1725e:	a808      	add	r0, sp, #32
   17260:	f7fe fc26 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17264:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17266:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17268:	4633      	mov	r3, r6
   1726a:	462a      	mov	r2, r5
   1726c:	4621      	mov	r1, r4
   1726e:	a810      	add	r0, sp, #64	; 0x40
   17270:	f7fe fc1e 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17274:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17276:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17278:	4633      	mov	r3, r6
   1727a:	462a      	mov	r2, r5
   1727c:	4621      	mov	r1, r4
   1727e:	a802      	add	r0, sp, #8
   17280:	f7fe fbe0 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17284:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17286:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   1728a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   1728e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17290:	1a52      	subs	r2, r2, r1
   17292:	bf18      	it	ne
   17294:	2201      	movne	r2, #1
   17296:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17298:	3701      	adds	r7, #1
   1729a:	e7d6      	b.n	1724a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1729c:	3601      	adds	r6, #1
   1729e:	e7cd      	b.n	1723c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   172a0:	3501      	adds	r5, #1
   172a2:	e7c4      	b.n	1722e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   172a4:	3401      	adds	r4, #1
   172a6:	e7bb      	b.n	17220 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   172a8:	a802      	add	r0, sp, #8
   172aa:	f7fe fafe 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   172ae:	b018      	add	sp, #96	; 0x60
   172b0:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000172b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   172b4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   172b8:	b098      	sub	sp, #96	; 0x60
   172ba:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   172bc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   172be:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   172c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   172c2:	f7ff fbb8 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   172c6:	2400      	movs	r4, #0
   172c8:	2100      	movs	r1, #0
   172ca:	a802      	add	r0, sp, #8
   172cc:	f7fe faf8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   172d0:	42a0      	cmp	r0, r4
   172d2:	dd46      	ble.n	17362 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   172d4:	2500      	movs	r5, #0
   172d6:	2101      	movs	r1, #1
   172d8:	a802      	add	r0, sp, #8
   172da:	f7fe faf1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   172de:	42a8      	cmp	r0, r5
   172e0:	dd3d      	ble.n	1735e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   172e2:	f04f 0800 	mov.w	r8, #0
   172e6:	2102      	movs	r1, #2
   172e8:	a802      	add	r0, sp, #8
   172ea:	f7fe fae9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   172ee:	4540      	cmp	r0, r8
   172f0:	dd33      	ble.n	1735a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   172f2:	2700      	movs	r7, #0
   172f4:	2103      	movs	r1, #3
   172f6:	a802      	add	r0, sp, #8
   172f8:	f7fe fae2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   172fc:	42b8      	cmp	r0, r7
   172fe:	dd29      	ble.n	17354 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17300:	9700      	str	r7, [sp, #0]
   17302:	4643      	mov	r3, r8
   17304:	462a      	mov	r2, r5
   17306:	4621      	mov	r1, r4
   17308:	a808      	add	r0, sp, #32
   1730a:	f7fe fbd1 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1730e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17310:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17312:	4643      	mov	r3, r8
   17314:	462a      	mov	r2, r5
   17316:	4621      	mov	r1, r4
   17318:	a810      	add	r0, sp, #64	; 0x40
   1731a:	f7fe fbc9 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1731e:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17320:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17322:	4643      	mov	r3, r8
   17324:	462a      	mov	r2, r5
   17326:	4621      	mov	r1, r4
   17328:	a802      	add	r0, sp, #8
   1732a:	f7fe fb8b 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1732e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17330:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17334:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs != rhs;
   17338:	e9d3 2300 	ldrd	r2, r3, [r3]
   1733c:	e9db ab00 	ldrd	sl, fp, [fp]
   17340:	459b      	cmp	fp, r3
   17342:	bf08      	it	eq
   17344:	4592      	cmpeq	sl, r2
   17346:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17348:	bf14      	ite	ne
   1734a:	2301      	movne	r3, #1
   1734c:	2300      	moveq	r3, #0
   1734e:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17350:	3701      	adds	r7, #1
   17352:	e7cf      	b.n	172f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17354:	f108 0801 	add.w	r8, r8, #1
   17358:	e7c5      	b.n	172e6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1735a:	3501      	adds	r5, #1
   1735c:	e7bb      	b.n	172d6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1735e:	3401      	adds	r4, #1
   17360:	e7b2      	b.n	172c8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17362:	a802      	add	r0, sp, #8
   17364:	f7fe faa1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17368:	b018      	add	sp, #96	; 0x60
   1736a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0001736e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1736e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   17372:	b098      	sub	sp, #96	; 0x60
   17374:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17376:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17378:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   1737a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1737c:	f7ff fb5b 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17380:	2400      	movs	r4, #0
   17382:	2100      	movs	r1, #0
   17384:	a802      	add	r0, sp, #8
   17386:	f7fe fa9b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1738a:	42a0      	cmp	r0, r4
   1738c:	dd3e      	ble.n	1740c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1738e:	2500      	movs	r5, #0
   17390:	2101      	movs	r1, #1
   17392:	a802      	add	r0, sp, #8
   17394:	f7fe fa94 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17398:	42a8      	cmp	r0, r5
   1739a:	dd35      	ble.n	17408 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1739c:	2600      	movs	r6, #0
   1739e:	2102      	movs	r1, #2
   173a0:	a802      	add	r0, sp, #8
   173a2:	f7fe fa8d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   173a6:	42b0      	cmp	r0, r6
   173a8:	dd2c      	ble.n	17404 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   173aa:	2700      	movs	r7, #0
   173ac:	2103      	movs	r1, #3
   173ae:	a802      	add	r0, sp, #8
   173b0:	f7fe fa86 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   173b4:	42b8      	cmp	r0, r7
   173b6:	dd23      	ble.n	17400 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   173b8:	9700      	str	r7, [sp, #0]
   173ba:	4633      	mov	r3, r6
   173bc:	462a      	mov	r2, r5
   173be:	4621      	mov	r1, r4
   173c0:	a808      	add	r0, sp, #32
   173c2:	f7fe fb75 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173c6:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   173c8:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173ca:	4633      	mov	r3, r6
   173cc:	462a      	mov	r2, r5
   173ce:	4621      	mov	r1, r4
   173d0:	a810      	add	r0, sp, #64	; 0x40
   173d2:	f7fe fb6d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   173d6:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173d8:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   173da:	4633      	mov	r3, r6
   173dc:	462a      	mov	r2, r5
   173de:	4621      	mov	r1, r4
   173e0:	a802      	add	r0, sp, #8
   173e2:	f7fe fb2f 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   173e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   173e8:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   173ec:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   173f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   173f2:	428a      	cmp	r2, r1
   173f4:	bfd4      	ite	le
   173f6:	2200      	movle	r2, #0
   173f8:	2201      	movgt	r2, #1
   173fa:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   173fc:	3701      	adds	r7, #1
   173fe:	e7d5      	b.n	173ac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17400:	3601      	adds	r6, #1
   17402:	e7cc      	b.n	1739e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17404:	3501      	adds	r5, #1
   17406:	e7c3      	b.n	17390 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17408:	3401      	adds	r4, #1
   1740a:	e7ba      	b.n	17382 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1740c:	a802      	add	r0, sp, #8
   1740e:	f7fe fa4c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17412:	b018      	add	sp, #96	; 0x60
   17414:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017418 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17418:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   1741c:	b098      	sub	sp, #96	; 0x60
   1741e:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   17420:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17422:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17424:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17426:	f7ff fb06 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1742a:	2400      	movs	r4, #0
   1742c:	2100      	movs	r1, #0
   1742e:	a802      	add	r0, sp, #8
   17430:	f7fe fa46 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17434:	42a0      	cmp	r0, r4
   17436:	dd46      	ble.n	174c6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17438:	2500      	movs	r5, #0
   1743a:	2101      	movs	r1, #1
   1743c:	a802      	add	r0, sp, #8
   1743e:	f7fe fa3f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17442:	42a8      	cmp	r0, r5
   17444:	dd3d      	ble.n	174c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17446:	f04f 0800 	mov.w	r8, #0
   1744a:	2102      	movs	r1, #2
   1744c:	a802      	add	r0, sp, #8
   1744e:	f7fe fa37 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17452:	4540      	cmp	r0, r8
   17454:	dd33      	ble.n	174be <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17456:	2700      	movs	r7, #0
   17458:	2103      	movs	r1, #3
   1745a:	a802      	add	r0, sp, #8
   1745c:	f7fe fa30 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17460:	42b8      	cmp	r0, r7
   17462:	dd29      	ble.n	174b8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17464:	9700      	str	r7, [sp, #0]
   17466:	4643      	mov	r3, r8
   17468:	462a      	mov	r2, r5
   1746a:	4621      	mov	r1, r4
   1746c:	a808      	add	r0, sp, #32
   1746e:	f7fe fb1f 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17472:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17474:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17476:	4643      	mov	r3, r8
   17478:	462a      	mov	r2, r5
   1747a:	4621      	mov	r1, r4
   1747c:	a810      	add	r0, sp, #64	; 0x40
   1747e:	f7fe fb17 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17482:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17484:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17486:	4643      	mov	r3, r8
   17488:	462a      	mov	r2, r5
   1748a:	4621      	mov	r1, r4
   1748c:	a802      	add	r0, sp, #8
   1748e:	f7fe fad9 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17492:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17494:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17498:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs > rhs;
   1749c:	e9d3 2300 	ldrd	r2, r3, [r3]
   174a0:	e9db ab00 	ldrd	sl, fp, [fp]
   174a4:	4552      	cmp	r2, sl
   174a6:	eb73 030b 	sbcs.w	r3, r3, fp
   174aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   174ac:	bfb4      	ite	lt
   174ae:	2301      	movlt	r3, #1
   174b0:	2300      	movge	r3, #0
   174b2:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   174b4:	3701      	adds	r7, #1
   174b6:	e7cf      	b.n	17458 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   174b8:	f108 0801 	add.w	r8, r8, #1
   174bc:	e7c5      	b.n	1744a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   174be:	3501      	adds	r5, #1
   174c0:	e7bb      	b.n	1743a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   174c2:	3401      	adds	r4, #1
   174c4:	e7b2      	b.n	1742c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   174c6:	a802      	add	r0, sp, #8
   174c8:	f7fe f9ef 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   174cc:	b018      	add	sp, #96	; 0x60
   174ce:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000174d2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   174d2:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   174d6:	b098      	sub	sp, #96	; 0x60
   174d8:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   174da:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   174dc:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   174de:	9b21      	ldr	r3, [sp, #132]	; 0x84
   174e0:	f7ff faa9 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   174e4:	2400      	movs	r4, #0
   174e6:	2100      	movs	r1, #0
   174e8:	a802      	add	r0, sp, #8
   174ea:	f7fe f9e9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   174ee:	42a0      	cmp	r0, r4
   174f0:	dd3e      	ble.n	17570 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   174f2:	2500      	movs	r5, #0
   174f4:	2101      	movs	r1, #1
   174f6:	a802      	add	r0, sp, #8
   174f8:	f7fe f9e2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   174fc:	42a8      	cmp	r0, r5
   174fe:	dd35      	ble.n	1756c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17500:	2600      	movs	r6, #0
   17502:	2102      	movs	r1, #2
   17504:	a802      	add	r0, sp, #8
   17506:	f7fe f9db 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1750a:	42b0      	cmp	r0, r6
   1750c:	dd2c      	ble.n	17568 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1750e:	2700      	movs	r7, #0
   17510:	2103      	movs	r1, #3
   17512:	a802      	add	r0, sp, #8
   17514:	f7fe f9d4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17518:	42b8      	cmp	r0, r7
   1751a:	dd23      	ble.n	17564 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1751c:	9700      	str	r7, [sp, #0]
   1751e:	4633      	mov	r3, r6
   17520:	462a      	mov	r2, r5
   17522:	4621      	mov	r1, r4
   17524:	a808      	add	r0, sp, #32
   17526:	f7fe fac3 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1752a:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1752c:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1752e:	4633      	mov	r3, r6
   17530:	462a      	mov	r2, r5
   17532:	4621      	mov	r1, r4
   17534:	a810      	add	r0, sp, #64	; 0x40
   17536:	f7fe fabb 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1753a:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1753c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1753e:	4633      	mov	r3, r6
   17540:	462a      	mov	r2, r5
   17542:	4621      	mov	r1, r4
   17544:	a802      	add	r0, sp, #8
   17546:	f7fe fa7d 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   1754a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1754c:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   17550:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   17554:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17556:	428a      	cmp	r2, r1
   17558:	bfb4      	ite	lt
   1755a:	2200      	movlt	r2, #0
   1755c:	2201      	movge	r2, #1
   1755e:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17560:	3701      	adds	r7, #1
   17562:	e7d5      	b.n	17510 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17564:	3601      	adds	r6, #1
   17566:	e7cc      	b.n	17502 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17568:	3501      	adds	r5, #1
   1756a:	e7c3      	b.n	174f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1756c:	3401      	adds	r4, #1
   1756e:	e7ba      	b.n	174e6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17570:	a802      	add	r0, sp, #8
   17572:	f7fe f99a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17576:	b018      	add	sp, #96	; 0x60
   17578:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001757c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1757c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   17580:	b098      	sub	sp, #96	; 0x60
   17582:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   17584:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17586:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17588:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1758a:	f7ff fa54 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1758e:	2400      	movs	r4, #0
   17590:	2100      	movs	r1, #0
   17592:	a802      	add	r0, sp, #8
   17594:	f7fe f994 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17598:	42a0      	cmp	r0, r4
   1759a:	dd46      	ble.n	1762a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1759c:	2500      	movs	r5, #0
   1759e:	2101      	movs	r1, #1
   175a0:	a802      	add	r0, sp, #8
   175a2:	f7fe f98d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   175a6:	42a8      	cmp	r0, r5
   175a8:	dd3d      	ble.n	17626 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   175aa:	f04f 0800 	mov.w	r8, #0
   175ae:	2102      	movs	r1, #2
   175b0:	a802      	add	r0, sp, #8
   175b2:	f7fe f985 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   175b6:	4540      	cmp	r0, r8
   175b8:	dd33      	ble.n	17622 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   175ba:	2700      	movs	r7, #0
   175bc:	2103      	movs	r1, #3
   175be:	a802      	add	r0, sp, #8
   175c0:	f7fe f97e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   175c4:	42b8      	cmp	r0, r7
   175c6:	dd29      	ble.n	1761c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   175c8:	9700      	str	r7, [sp, #0]
   175ca:	4643      	mov	r3, r8
   175cc:	462a      	mov	r2, r5
   175ce:	4621      	mov	r1, r4
   175d0:	a808      	add	r0, sp, #32
   175d2:	f7fe fa6d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   175d6:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   175d8:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   175da:	4643      	mov	r3, r8
   175dc:	462a      	mov	r2, r5
   175de:	4621      	mov	r1, r4
   175e0:	a810      	add	r0, sp, #64	; 0x40
   175e2:	f7fe fa65 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   175e6:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   175e8:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   175ea:	4643      	mov	r3, r8
   175ec:	462a      	mov	r2, r5
   175ee:	4621      	mov	r1, r4
   175f0:	a802      	add	r0, sp, #8
   175f2:	f7fe fa27 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   175f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   175f8:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   175fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs >= rhs;
   17600:	e9d3 2300 	ldrd	r2, r3, [r3]
   17604:	e9db ab00 	ldrd	sl, fp, [fp]
   17608:	4592      	cmp	sl, r2
   1760a:	eb7b 0303 	sbcs.w	r3, fp, r3
   1760e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17610:	bfac      	ite	ge
   17612:	2301      	movge	r3, #1
   17614:	2300      	movlt	r3, #0
   17616:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17618:	3701      	adds	r7, #1
   1761a:	e7cf      	b.n	175bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1761c:	f108 0801 	add.w	r8, r8, #1
   17620:	e7c5      	b.n	175ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17622:	3501      	adds	r5, #1
   17624:	e7bb      	b.n	1759e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17626:	3401      	adds	r4, #1
   17628:	e7b2      	b.n	17590 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1762a:	a802      	add	r0, sp, #8
   1762c:	f7fe f93d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17630:	b018      	add	sp, #96	; 0x60
   17632:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00017636 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17636:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1763a:	b098      	sub	sp, #96	; 0x60
   1763c:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   1763e:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17640:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17642:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17644:	f7ff f9f7 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17648:	2400      	movs	r4, #0
   1764a:	2100      	movs	r1, #0
   1764c:	a802      	add	r0, sp, #8
   1764e:	f7fe f937 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17652:	42a0      	cmp	r0, r4
   17654:	dd3e      	ble.n	176d4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17656:	2500      	movs	r5, #0
   17658:	2101      	movs	r1, #1
   1765a:	a802      	add	r0, sp, #8
   1765c:	f7fe f930 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17660:	42a8      	cmp	r0, r5
   17662:	dd35      	ble.n	176d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17664:	2600      	movs	r6, #0
   17666:	2102      	movs	r1, #2
   17668:	a802      	add	r0, sp, #8
   1766a:	f7fe f929 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1766e:	42b0      	cmp	r0, r6
   17670:	dd2c      	ble.n	176cc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17672:	2700      	movs	r7, #0
   17674:	2103      	movs	r1, #3
   17676:	a802      	add	r0, sp, #8
   17678:	f7fe f922 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1767c:	42b8      	cmp	r0, r7
   1767e:	dd23      	ble.n	176c8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17680:	9700      	str	r7, [sp, #0]
   17682:	4633      	mov	r3, r6
   17684:	462a      	mov	r2, r5
   17686:	4621      	mov	r1, r4
   17688:	a808      	add	r0, sp, #32
   1768a:	f7fe fa11 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1768e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17690:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17692:	4633      	mov	r3, r6
   17694:	462a      	mov	r2, r5
   17696:	4621      	mov	r1, r4
   17698:	a810      	add	r0, sp, #64	; 0x40
   1769a:	f7fe fa09 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1769e:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   176a0:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   176a2:	4633      	mov	r3, r6
   176a4:	462a      	mov	r2, r5
   176a6:	4621      	mov	r1, r4
   176a8:	a802      	add	r0, sp, #8
   176aa:	f7fe f9cb 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   176ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   176b0:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   176b4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   176b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   176ba:	428a      	cmp	r2, r1
   176bc:	bfac      	ite	ge
   176be:	2200      	movge	r2, #0
   176c0:	2201      	movlt	r2, #1
   176c2:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   176c4:	3701      	adds	r7, #1
   176c6:	e7d5      	b.n	17674 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   176c8:	3601      	adds	r6, #1
   176ca:	e7cc      	b.n	17666 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   176cc:	3501      	adds	r5, #1
   176ce:	e7c3      	b.n	17658 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   176d0:	3401      	adds	r4, #1
   176d2:	e7ba      	b.n	1764a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   176d4:	a802      	add	r0, sp, #8
   176d6:	f7fe f8e8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   176da:	b018      	add	sp, #96	; 0x60
   176dc:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000176e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   176e0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   176e4:	b098      	sub	sp, #96	; 0x60
   176e6:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   176e8:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   176ea:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   176ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
   176ee:	f7ff f9a2 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   176f2:	2400      	movs	r4, #0
   176f4:	2100      	movs	r1, #0
   176f6:	a802      	add	r0, sp, #8
   176f8:	f7fe f8e2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   176fc:	42a0      	cmp	r0, r4
   176fe:	dd46      	ble.n	1778e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17700:	2500      	movs	r5, #0
   17702:	2101      	movs	r1, #1
   17704:	a802      	add	r0, sp, #8
   17706:	f7fe f8db 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1770a:	42a8      	cmp	r0, r5
   1770c:	dd3d      	ble.n	1778a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1770e:	f04f 0800 	mov.w	r8, #0
   17712:	2102      	movs	r1, #2
   17714:	a802      	add	r0, sp, #8
   17716:	f7fe f8d3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1771a:	4540      	cmp	r0, r8
   1771c:	dd33      	ble.n	17786 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1771e:	2700      	movs	r7, #0
   17720:	2103      	movs	r1, #3
   17722:	a802      	add	r0, sp, #8
   17724:	f7fe f8cc 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17728:	42b8      	cmp	r0, r7
   1772a:	dd29      	ble.n	17780 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1772c:	9700      	str	r7, [sp, #0]
   1772e:	4643      	mov	r3, r8
   17730:	462a      	mov	r2, r5
   17732:	4621      	mov	r1, r4
   17734:	a808      	add	r0, sp, #32
   17736:	f7fe f9bb 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1773a:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1773c:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1773e:	4643      	mov	r3, r8
   17740:	462a      	mov	r2, r5
   17742:	4621      	mov	r1, r4
   17744:	a810      	add	r0, sp, #64	; 0x40
   17746:	f7fe f9b3 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1774a:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1774c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1774e:	4643      	mov	r3, r8
   17750:	462a      	mov	r2, r5
   17752:	4621      	mov	r1, r4
   17754:	a802      	add	r0, sp, #8
   17756:	f7fe f975 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1775a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1775c:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17760:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs < rhs;
   17764:	e9d3 2300 	ldrd	r2, r3, [r3]
   17768:	e9db ab00 	ldrd	sl, fp, [fp]
   1776c:	4592      	cmp	sl, r2
   1776e:	eb7b 0303 	sbcs.w	r3, fp, r3
   17772:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17774:	bfb4      	ite	lt
   17776:	2301      	movlt	r3, #1
   17778:	2300      	movge	r3, #0
   1777a:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1777c:	3701      	adds	r7, #1
   1777e:	e7cf      	b.n	17720 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17780:	f108 0801 	add.w	r8, r8, #1
   17784:	e7c5      	b.n	17712 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17786:	3501      	adds	r5, #1
   17788:	e7bb      	b.n	17702 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1778a:	3401      	adds	r4, #1
   1778c:	e7b2      	b.n	176f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1778e:	a802      	add	r0, sp, #8
   17790:	f7fe f88b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17794:	b018      	add	sp, #96	; 0x60
   17796:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0001779a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1779a:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1779e:	b098      	sub	sp, #96	; 0x60
   177a0:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   177a2:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   177a4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   177a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   177a8:	f7ff f945 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   177ac:	2400      	movs	r4, #0
   177ae:	2100      	movs	r1, #0
   177b0:	a802      	add	r0, sp, #8
   177b2:	f7fe f885 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   177b6:	42a0      	cmp	r0, r4
   177b8:	dd3e      	ble.n	17838 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   177ba:	2500      	movs	r5, #0
   177bc:	2101      	movs	r1, #1
   177be:	a802      	add	r0, sp, #8
   177c0:	f7fe f87e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   177c4:	42a8      	cmp	r0, r5
   177c6:	dd35      	ble.n	17834 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   177c8:	2600      	movs	r6, #0
   177ca:	2102      	movs	r1, #2
   177cc:	a802      	add	r0, sp, #8
   177ce:	f7fe f877 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   177d2:	42b0      	cmp	r0, r6
   177d4:	dd2c      	ble.n	17830 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   177d6:	2700      	movs	r7, #0
   177d8:	2103      	movs	r1, #3
   177da:	a802      	add	r0, sp, #8
   177dc:	f7fe f870 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   177e0:	42b8      	cmp	r0, r7
   177e2:	dd23      	ble.n	1782c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   177e4:	9700      	str	r7, [sp, #0]
   177e6:	4633      	mov	r3, r6
   177e8:	462a      	mov	r2, r5
   177ea:	4621      	mov	r1, r4
   177ec:	a808      	add	r0, sp, #32
   177ee:	f7fe f95f 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   177f2:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   177f4:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   177f6:	4633      	mov	r3, r6
   177f8:	462a      	mov	r2, r5
   177fa:	4621      	mov	r1, r4
   177fc:	a810      	add	r0, sp, #64	; 0x40
   177fe:	f7fe f957 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17802:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17804:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17806:	4633      	mov	r3, r6
   17808:	462a      	mov	r2, r5
   1780a:	4621      	mov	r1, r4
   1780c:	a802      	add	r0, sp, #8
   1780e:	f7fe f919 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   17812:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17814:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   17818:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   1781c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1781e:	428a      	cmp	r2, r1
   17820:	bfcc      	ite	gt
   17822:	2200      	movgt	r2, #0
   17824:	2201      	movle	r2, #1
   17826:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17828:	3701      	adds	r7, #1
   1782a:	e7d5      	b.n	177d8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1782c:	3601      	adds	r6, #1
   1782e:	e7cc      	b.n	177ca <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17830:	3501      	adds	r5, #1
   17832:	e7c3      	b.n	177bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17834:	3401      	adds	r4, #1
   17836:	e7ba      	b.n	177ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17838:	a802      	add	r0, sp, #8
   1783a:	f7fe f836 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1783e:	b018      	add	sp, #96	; 0x60
   17840:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017844 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17844:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   17848:	b098      	sub	sp, #96	; 0x60
   1784a:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   1784c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   1784e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17850:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17852:	f7ff f8f0 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17856:	2400      	movs	r4, #0
   17858:	2100      	movs	r1, #0
   1785a:	a802      	add	r0, sp, #8
   1785c:	f7fe f830 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17860:	42a0      	cmp	r0, r4
   17862:	dd46      	ble.n	178f2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17864:	2500      	movs	r5, #0
   17866:	2101      	movs	r1, #1
   17868:	a802      	add	r0, sp, #8
   1786a:	f7fe f829 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1786e:	42a8      	cmp	r0, r5
   17870:	dd3d      	ble.n	178ee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17872:	f04f 0800 	mov.w	r8, #0
   17876:	2102      	movs	r1, #2
   17878:	a802      	add	r0, sp, #8
   1787a:	f7fe f821 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1787e:	4540      	cmp	r0, r8
   17880:	dd33      	ble.n	178ea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17882:	2700      	movs	r7, #0
   17884:	2103      	movs	r1, #3
   17886:	a802      	add	r0, sp, #8
   17888:	f7fe f81a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1788c:	42b8      	cmp	r0, r7
   1788e:	dd29      	ble.n	178e4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17890:	9700      	str	r7, [sp, #0]
   17892:	4643      	mov	r3, r8
   17894:	462a      	mov	r2, r5
   17896:	4621      	mov	r1, r4
   17898:	a808      	add	r0, sp, #32
   1789a:	f7fe f909 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1789e:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   178a0:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   178a2:	4643      	mov	r3, r8
   178a4:	462a      	mov	r2, r5
   178a6:	4621      	mov	r1, r4
   178a8:	a810      	add	r0, sp, #64	; 0x40
   178aa:	f7fe f901 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   178ae:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   178b0:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   178b2:	4643      	mov	r3, r8
   178b4:	462a      	mov	r2, r5
   178b6:	4621      	mov	r1, r4
   178b8:	a802      	add	r0, sp, #8
   178ba:	f7fe f8c3 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   178be:	9b20      	ldr	r3, [sp, #128]	; 0x80
   178c0:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   178c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs <= rhs;
   178c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   178cc:	e9db ab00 	ldrd	sl, fp, [fp]
   178d0:	4552      	cmp	r2, sl
   178d2:	eb73 030b 	sbcs.w	r3, r3, fp
   178d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   178d8:	bfac      	ite	ge
   178da:	2301      	movge	r3, #1
   178dc:	2300      	movlt	r3, #0
   178de:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   178e0:	3701      	adds	r7, #1
   178e2:	e7cf      	b.n	17884 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   178e4:	f108 0801 	add.w	r8, r8, #1
   178e8:	e7c5      	b.n	17876 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   178ea:	3501      	adds	r5, #1
   178ec:	e7bb      	b.n	17866 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   178ee:	3401      	adds	r4, #1
   178f0:	e7b2      	b.n	17858 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   178f2:	a802      	add	r0, sp, #8
   178f4:	f7fd ffd9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   178f8:	b018      	add	sp, #96	; 0x60
   178fa:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000178fe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   178fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17902:	ed2d 8b04 	vpush	{d8-d9}
   17906:	b09d      	sub	sp, #116	; 0x74
   17908:	4604      	mov	r4, r0
   1790a:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   1790c:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   1790e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17910:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17912:	f7ff f890 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17916:	e9d4 6300 	ldrd	r6, r3, [r4]
   1791a:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   1791c:	68a3      	ldr	r3, [r4, #8]
   1791e:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17922:	68e3      	ldr	r3, [r4, #12]
   17924:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17928:	6923      	ldr	r3, [r4, #16]
   1792a:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   1792c:	6963      	ldr	r3, [r4, #20]
   1792e:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17932:	69a3      	ldr	r3, [r4, #24]
   17934:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17938:	2400      	movs	r4, #0
   1793a:	2100      	movs	r1, #0
   1793c:	a806      	add	r0, sp, #24
   1793e:	f7fd ffbf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17942:	42a0      	cmp	r0, r4
   17944:	dd5f      	ble.n	17a06 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17946:	2500      	movs	r5, #0
   17948:	af06      	add	r7, sp, #24
   1794a:	2101      	movs	r1, #1
   1794c:	4638      	mov	r0, r7
   1794e:	f7fd ffb7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17952:	42a8      	cmp	r0, r5
   17954:	dd55      	ble.n	17a02 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17956:	f04f 0800 	mov.w	r8, #0
   1795a:	2102      	movs	r1, #2
   1795c:	4638      	mov	r0, r7
   1795e:	f7fd ffaf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17962:	4540      	cmp	r0, r8
   17964:	dd4b      	ble.n	179fe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17966:	f04f 0900 	mov.w	r9, #0
   1796a:	2103      	movs	r1, #3
   1796c:	4638      	mov	r0, r7
   1796e:	f7fd ffa7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17972:	4548      	cmp	r0, r9
   17974:	dd40      	ble.n	179f8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17976:	f8cd 9000 	str.w	r9, [sp]
   1797a:	4643      	mov	r3, r8
   1797c:	462a      	mov	r2, r5
   1797e:	4621      	mov	r1, r4
   17980:	a80c      	add	r0, sp, #48	; 0x30
   17982:	f7fe f895 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17986:	9b05      	ldr	r3, [sp, #20]
   17988:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   1798c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1798e:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17992:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17994:	462a      	mov	r2, r5
   17996:	4643      	mov	r3, r8
   17998:	4621      	mov	r1, r4
   1799a:	a814      	add	r0, sp, #80	; 0x50
   1799c:	f7fe f888 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   179a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   179a2:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   179a6:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179a8:	ee18 2a90 	vmov	r2, s17
   179ac:	ee18 1a10 	vmov	r1, s16
   179b0:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   179b4:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179b6:	f7ef fbe7 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   179ba:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179be:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179c0:	ee19 2a90 	vmov	r2, s19
   179c4:	ee19 1a10 	vmov	r1, s18
   179c8:	4658      	mov	r0, fp
   179ca:	f7ef fbdd 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   179ce:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179d2:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   179d4:	4643      	mov	r3, r8
   179d6:	462a      	mov	r2, r5
   179d8:	4621      	mov	r1, r4
   179da:	4638      	mov	r0, r7
   179dc:	f7fe f832 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   179e0:	ebaa 030b 	sub.w	r3, sl, fp
   179e4:	f1d3 0a00 	rsbs	sl, r3, #0
   179e8:	eb4a 0a03 	adc.w	sl, sl, r3
   179ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   179ee:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   179f2:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   179f6:	e7b8      	b.n	1796a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   179f8:	f108 0801 	add.w	r8, r8, #1
   179fc:	e7ad      	b.n	1795a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   179fe:	3501      	adds	r5, #1
   17a00:	e7a2      	b.n	17948 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17a02:	3401      	adds	r4, #1
   17a04:	e799      	b.n	1793a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17a06:	a806      	add	r0, sp, #24
   17a08:	f7fd ff4f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17a0c:	b01d      	add	sp, #116	; 0x74
   17a0e:	ecbd 8b04 	vpop	{d8-d9}
   17a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a16 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a1a:	ed2d 8b04 	vpush	{d8-d9}
   17a1e:	b09d      	sub	sp, #116	; 0x74
   17a20:	4604      	mov	r4, r0
   17a22:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17a24:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17a26:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17a28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17a2a:	f7ff f804 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17a2e:	e9d4 6300 	ldrd	r6, r3, [r4]
   17a32:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17a34:	68a3      	ldr	r3, [r4, #8]
   17a36:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17a3a:	68e3      	ldr	r3, [r4, #12]
   17a3c:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17a40:	6923      	ldr	r3, [r4, #16]
   17a42:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17a44:	6963      	ldr	r3, [r4, #20]
   17a46:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17a4a:	69a3      	ldr	r3, [r4, #24]
   17a4c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17a50:	2400      	movs	r4, #0
   17a52:	2100      	movs	r1, #0
   17a54:	a806      	add	r0, sp, #24
   17a56:	f7fd ff33 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a5a:	42a0      	cmp	r0, r4
   17a5c:	dd5f      	ble.n	17b1e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17a5e:	2500      	movs	r5, #0
   17a60:	af06      	add	r7, sp, #24
   17a62:	2101      	movs	r1, #1
   17a64:	4638      	mov	r0, r7
   17a66:	f7fd ff2b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a6a:	42a8      	cmp	r0, r5
   17a6c:	dd55      	ble.n	17b1a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17a6e:	f04f 0800 	mov.w	r8, #0
   17a72:	2102      	movs	r1, #2
   17a74:	4638      	mov	r0, r7
   17a76:	f7fd ff23 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a7a:	4540      	cmp	r0, r8
   17a7c:	dd4b      	ble.n	17b16 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17a7e:	f04f 0900 	mov.w	r9, #0
   17a82:	2103      	movs	r1, #3
   17a84:	4638      	mov	r0, r7
   17a86:	f7fd ff1b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a8a:	4548      	cmp	r0, r9
   17a8c:	dd40      	ble.n	17b10 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17a8e:	f8cd 9000 	str.w	r9, [sp]
   17a92:	4643      	mov	r3, r8
   17a94:	462a      	mov	r2, r5
   17a96:	4621      	mov	r1, r4
   17a98:	a80c      	add	r0, sp, #48	; 0x30
   17a9a:	f7fe f809 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17a9e:	9b05      	ldr	r3, [sp, #20]
   17aa0:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17aa4:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17aa6:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17aaa:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17aac:	462a      	mov	r2, r5
   17aae:	4643      	mov	r3, r8
   17ab0:	4621      	mov	r1, r4
   17ab2:	a814      	add	r0, sp, #80	; 0x50
   17ab4:	f7fd fffc 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17ab8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17aba:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17abe:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ac0:	ee18 2a90 	vmov	r2, s17
   17ac4:	ee18 1a10 	vmov	r1, s16
   17ac8:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17acc:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ace:	f7ef fb5b 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17ad2:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ad6:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ad8:	ee19 2a90 	vmov	r2, s19
   17adc:	ee19 1a10 	vmov	r1, s18
   17ae0:	4658      	mov	r0, fp
   17ae2:	f7ef fb51 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17ae6:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17aea:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17aec:	4643      	mov	r3, r8
   17aee:	462a      	mov	r2, r5
   17af0:	4621      	mov	r1, r4
   17af2:	4638      	mov	r0, r7
   17af4:	f7fd ffa6 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   17af8:	ebaa 030b 	sub.w	r3, sl, fp
   17afc:	f1d3 0a00 	rsbs	sl, r3, #0
   17b00:	eb4a 0a03 	adc.w	sl, sl, r3
   17b04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17b06:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   17b0a:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17b0e:	e7b8      	b.n	17a82 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17b10:	f108 0801 	add.w	r8, r8, #1
   17b14:	e7ad      	b.n	17a72 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17b16:	3501      	adds	r5, #1
   17b18:	e7a2      	b.n	17a60 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17b1a:	3401      	adds	r4, #1
   17b1c:	e799      	b.n	17a52 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17b1e:	a806      	add	r0, sp, #24
   17b20:	f7fd fec3 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17b24:	b01d      	add	sp, #116	; 0x74
   17b26:	ecbd 8b04 	vpop	{d8-d9}
   17b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017b2e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b32:	ed2d 8b04 	vpush	{d8-d9}
   17b36:	b09d      	sub	sp, #116	; 0x74
   17b38:	4604      	mov	r4, r0
   17b3a:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17b3c:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17b3e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17b40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17b42:	f7fe ff78 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17b46:	e9d4 6300 	ldrd	r6, r3, [r4]
   17b4a:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17b4c:	68a3      	ldr	r3, [r4, #8]
   17b4e:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17b52:	68e3      	ldr	r3, [r4, #12]
   17b54:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17b58:	6923      	ldr	r3, [r4, #16]
   17b5a:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17b5c:	6963      	ldr	r3, [r4, #20]
   17b5e:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17b62:	69a3      	ldr	r3, [r4, #24]
   17b64:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17b68:	2400      	movs	r4, #0
   17b6a:	2100      	movs	r1, #0
   17b6c:	a806      	add	r0, sp, #24
   17b6e:	f7fd fea7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17b72:	42a0      	cmp	r0, r4
   17b74:	dd5e      	ble.n	17c34 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17b76:	2500      	movs	r5, #0
   17b78:	af06      	add	r7, sp, #24
   17b7a:	2101      	movs	r1, #1
   17b7c:	4638      	mov	r0, r7
   17b7e:	f7fd fe9f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17b82:	42a8      	cmp	r0, r5
   17b84:	dd54      	ble.n	17c30 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17b86:	f04f 0800 	mov.w	r8, #0
   17b8a:	2102      	movs	r1, #2
   17b8c:	4638      	mov	r0, r7
   17b8e:	f7fd fe97 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17b92:	4540      	cmp	r0, r8
   17b94:	dd4a      	ble.n	17c2c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17b96:	f04f 0900 	mov.w	r9, #0
   17b9a:	2103      	movs	r1, #3
   17b9c:	4638      	mov	r0, r7
   17b9e:	f7fd fe8f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ba2:	4548      	cmp	r0, r9
   17ba4:	dd3f      	ble.n	17c26 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17ba6:	f8cd 9000 	str.w	r9, [sp]
   17baa:	4643      	mov	r3, r8
   17bac:	462a      	mov	r2, r5
   17bae:	4621      	mov	r1, r4
   17bb0:	a80c      	add	r0, sp, #48	; 0x30
   17bb2:	f7fd ff7d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17bb6:	9b05      	ldr	r3, [sp, #20]
   17bb8:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   17bbc:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17bbe:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17bc2:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17bc4:	462a      	mov	r2, r5
   17bc6:	4643      	mov	r3, r8
   17bc8:	4621      	mov	r1, r4
   17bca:	a814      	add	r0, sp, #80	; 0x50
   17bcc:	f7fd ff70 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17bd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17bd2:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   17bd6:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17bd8:	ee18 2a90 	vmov	r2, s17
   17bdc:	ee18 1a10 	vmov	r1, s16
   17be0:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17be4:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17be6:	f7ef facf 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17bea:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17bee:	ee19 2a90 	vmov	r2, s19
   17bf2:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17bf6:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17bf8:	4658      	mov	r0, fp
   17bfa:	f7ef fac5 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17bfe:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c02:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17c04:	4643      	mov	r3, r8
   17c06:	462a      	mov	r2, r5
   17c08:	4621      	mov	r1, r4
   17c0a:	4638      	mov	r0, r7
   17c0c:	f7fd ff1a 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17c10:	ebba 0a0b 	subs.w	sl, sl, fp
   17c14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17c16:	bf18      	it	ne
   17c18:	f04f 0a01 	movne.w	sl, #1
   17c1c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17c20:	f109 0901 	add.w	r9, r9, #1
   17c24:	e7b9      	b.n	17b9a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17c26:	f108 0801 	add.w	r8, r8, #1
   17c2a:	e7ae      	b.n	17b8a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17c2c:	3501      	adds	r5, #1
   17c2e:	e7a3      	b.n	17b78 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17c30:	3401      	adds	r4, #1
   17c32:	e79a      	b.n	17b6a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17c34:	a806      	add	r0, sp, #24
   17c36:	f7fd fe38 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17c3a:	b01d      	add	sp, #116	; 0x74
   17c3c:	ecbd 8b04 	vpop	{d8-d9}
   17c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017c44 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c48:	ed2d 8b04 	vpush	{d8-d9}
   17c4c:	b09d      	sub	sp, #116	; 0x74
   17c4e:	4604      	mov	r4, r0
   17c50:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17c52:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17c54:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17c56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17c58:	f7fe feed 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17c5c:	e9d4 6300 	ldrd	r6, r3, [r4]
   17c60:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17c62:	68a3      	ldr	r3, [r4, #8]
   17c64:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17c68:	68e3      	ldr	r3, [r4, #12]
   17c6a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17c6e:	6923      	ldr	r3, [r4, #16]
   17c70:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17c72:	6963      	ldr	r3, [r4, #20]
   17c74:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17c78:	69a3      	ldr	r3, [r4, #24]
   17c7a:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17c7e:	2400      	movs	r4, #0
   17c80:	2100      	movs	r1, #0
   17c82:	a806      	add	r0, sp, #24
   17c84:	f7fd fe1c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17c88:	42a0      	cmp	r0, r4
   17c8a:	dd5e      	ble.n	17d4a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17c8c:	2500      	movs	r5, #0
   17c8e:	af06      	add	r7, sp, #24
   17c90:	2101      	movs	r1, #1
   17c92:	4638      	mov	r0, r7
   17c94:	f7fd fe14 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17c98:	42a8      	cmp	r0, r5
   17c9a:	dd54      	ble.n	17d46 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17c9c:	f04f 0800 	mov.w	r8, #0
   17ca0:	2102      	movs	r1, #2
   17ca2:	4638      	mov	r0, r7
   17ca4:	f7fd fe0c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ca8:	4540      	cmp	r0, r8
   17caa:	dd4a      	ble.n	17d42 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17cac:	f04f 0900 	mov.w	r9, #0
   17cb0:	2103      	movs	r1, #3
   17cb2:	4638      	mov	r0, r7
   17cb4:	f7fd fe04 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17cb8:	4548      	cmp	r0, r9
   17cba:	dd3f      	ble.n	17d3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17cbc:	f8cd 9000 	str.w	r9, [sp]
   17cc0:	4643      	mov	r3, r8
   17cc2:	462a      	mov	r2, r5
   17cc4:	4621      	mov	r1, r4
   17cc6:	a80c      	add	r0, sp, #48	; 0x30
   17cc8:	f7fd fef2 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17ccc:	9b05      	ldr	r3, [sp, #20]
   17cce:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17cd2:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17cd4:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17cd8:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17cda:	462a      	mov	r2, r5
   17cdc:	4643      	mov	r3, r8
   17cde:	4621      	mov	r1, r4
   17ce0:	a814      	add	r0, sp, #80	; 0x50
   17ce2:	f7fd fee5 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17ce6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17ce8:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17cec:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17cee:	ee18 2a90 	vmov	r2, s17
   17cf2:	ee18 1a10 	vmov	r1, s16
   17cf6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17cfa:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17cfc:	f7ef fa44 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17d00:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d04:	ee19 2a90 	vmov	r2, s19
   17d08:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d0c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d0e:	4658      	mov	r0, fp
   17d10:	f7ef fa3a 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17d14:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d18:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17d1a:	4643      	mov	r3, r8
   17d1c:	462a      	mov	r2, r5
   17d1e:	4621      	mov	r1, r4
   17d20:	4638      	mov	r0, r7
   17d22:	f7fd fe8f 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17d26:	ebba 0a0b 	subs.w	sl, sl, fp
   17d2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17d2c:	bf18      	it	ne
   17d2e:	f04f 0a01 	movne.w	sl, #1
   17d32:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17d36:	f109 0901 	add.w	r9, r9, #1
   17d3a:	e7b9      	b.n	17cb0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17d3c:	f108 0801 	add.w	r8, r8, #1
   17d40:	e7ae      	b.n	17ca0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17d42:	3501      	adds	r5, #1
   17d44:	e7a3      	b.n	17c8e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17d46:	3401      	adds	r4, #1
   17d48:	e79a      	b.n	17c80 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17d4a:	a806      	add	r0, sp, #24
   17d4c:	f7fd fdad 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17d50:	b01d      	add	sp, #116	; 0x74
   17d52:	ecbd 8b04 	vpop	{d8-d9}
   17d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017d5a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d5e:	ed2d 8b04 	vpush	{d8-d9}
   17d62:	b09d      	sub	sp, #116	; 0x74
   17d64:	4604      	mov	r4, r0
   17d66:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17d68:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17d6a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17d6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17d6e:	f7fe fe62 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17d72:	e9d4 6300 	ldrd	r6, r3, [r4]
   17d76:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17d78:	68a3      	ldr	r3, [r4, #8]
   17d7a:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17d7e:	68e3      	ldr	r3, [r4, #12]
   17d80:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17d84:	6923      	ldr	r3, [r4, #16]
   17d86:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17d88:	6963      	ldr	r3, [r4, #20]
   17d8a:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17d8e:	69a3      	ldr	r3, [r4, #24]
   17d90:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17d94:	2400      	movs	r4, #0
   17d96:	2100      	movs	r1, #0
   17d98:	a806      	add	r0, sp, #24
   17d9a:	f7fd fd91 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17d9e:	42a0      	cmp	r0, r4
   17da0:	dd5f      	ble.n	17e62 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17da2:	2500      	movs	r5, #0
   17da4:	af06      	add	r7, sp, #24
   17da6:	2101      	movs	r1, #1
   17da8:	4638      	mov	r0, r7
   17daa:	f7fd fd89 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17dae:	42a8      	cmp	r0, r5
   17db0:	dd55      	ble.n	17e5e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17db2:	f04f 0800 	mov.w	r8, #0
   17db6:	2102      	movs	r1, #2
   17db8:	4638      	mov	r0, r7
   17dba:	f7fd fd81 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17dbe:	4540      	cmp	r0, r8
   17dc0:	dd4b      	ble.n	17e5a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17dc2:	f04f 0900 	mov.w	r9, #0
   17dc6:	2103      	movs	r1, #3
   17dc8:	4638      	mov	r0, r7
   17dca:	f7fd fd79 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17dce:	4548      	cmp	r0, r9
   17dd0:	dd40      	ble.n	17e54 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17dd2:	f8cd 9000 	str.w	r9, [sp]
   17dd6:	4643      	mov	r3, r8
   17dd8:	462a      	mov	r2, r5
   17dda:	4621      	mov	r1, r4
   17ddc:	a80c      	add	r0, sp, #48	; 0x30
   17dde:	f7fd fe67 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17de2:	9b05      	ldr	r3, [sp, #20]
   17de4:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   17de8:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17dea:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17dee:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17df0:	462a      	mov	r2, r5
   17df2:	4643      	mov	r3, r8
   17df4:	4621      	mov	r1, r4
   17df6:	a814      	add	r0, sp, #80	; 0x50
   17df8:	f7fd fe5a 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17dfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17dfe:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   17e02:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e04:	ee18 2a90 	vmov	r2, s17
   17e08:	ee18 1a10 	vmov	r1, s16
   17e0c:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17e10:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e12:	f7ef f9b9 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17e16:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e1a:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e1c:	ee19 2a90 	vmov	r2, s19
   17e20:	ee19 1a10 	vmov	r1, s18
   17e24:	4658      	mov	r0, fp
   17e26:	f7ef f9af 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17e2a:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e2e:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17e30:	4643      	mov	r3, r8
   17e32:	462a      	mov	r2, r5
   17e34:	4621      	mov	r1, r4
   17e36:	4638      	mov	r0, r7
   17e38:	f7fd fe04 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   17e3c:	45da      	cmp	sl, fp
   17e3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17e40:	bfd4      	ite	le
   17e42:	f04f 0a00 	movle.w	sl, #0
   17e46:	f04f 0a01 	movgt.w	sl, #1
   17e4a:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17e4e:	f109 0901 	add.w	r9, r9, #1
   17e52:	e7b8      	b.n	17dc6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17e54:	f108 0801 	add.w	r8, r8, #1
   17e58:	e7ad      	b.n	17db6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17e5a:	3501      	adds	r5, #1
   17e5c:	e7a2      	b.n	17da4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17e5e:	3401      	adds	r4, #1
   17e60:	e799      	b.n	17d96 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17e62:	a806      	add	r0, sp, #24
   17e64:	f7fd fd21 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17e68:	b01d      	add	sp, #116	; 0x74
   17e6a:	ecbd 8b04 	vpop	{d8-d9}
   17e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017e72 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e76:	ed2d 8b04 	vpush	{d8-d9}
   17e7a:	b09d      	sub	sp, #116	; 0x74
   17e7c:	4604      	mov	r4, r0
   17e7e:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17e80:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17e82:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17e84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17e86:	f7fe fdd6 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17e8a:	e9d4 6300 	ldrd	r6, r3, [r4]
   17e8e:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17e90:	68a3      	ldr	r3, [r4, #8]
   17e92:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17e96:	68e3      	ldr	r3, [r4, #12]
   17e98:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17e9c:	6923      	ldr	r3, [r4, #16]
   17e9e:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17ea0:	6963      	ldr	r3, [r4, #20]
   17ea2:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17ea6:	69a3      	ldr	r3, [r4, #24]
   17ea8:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17eac:	2400      	movs	r4, #0
   17eae:	2100      	movs	r1, #0
   17eb0:	a806      	add	r0, sp, #24
   17eb2:	f7fd fd05 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17eb6:	42a0      	cmp	r0, r4
   17eb8:	dd5f      	ble.n	17f7a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17eba:	2500      	movs	r5, #0
   17ebc:	af06      	add	r7, sp, #24
   17ebe:	2101      	movs	r1, #1
   17ec0:	4638      	mov	r0, r7
   17ec2:	f7fd fcfd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ec6:	42a8      	cmp	r0, r5
   17ec8:	dd55      	ble.n	17f76 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17eca:	f04f 0800 	mov.w	r8, #0
   17ece:	2102      	movs	r1, #2
   17ed0:	4638      	mov	r0, r7
   17ed2:	f7fd fcf5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ed6:	4540      	cmp	r0, r8
   17ed8:	dd4b      	ble.n	17f72 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17eda:	f04f 0900 	mov.w	r9, #0
   17ede:	2103      	movs	r1, #3
   17ee0:	4638      	mov	r0, r7
   17ee2:	f7fd fced 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ee6:	4548      	cmp	r0, r9
   17ee8:	dd40      	ble.n	17f6c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17eea:	f8cd 9000 	str.w	r9, [sp]
   17eee:	4643      	mov	r3, r8
   17ef0:	462a      	mov	r2, r5
   17ef2:	4621      	mov	r1, r4
   17ef4:	a80c      	add	r0, sp, #48	; 0x30
   17ef6:	f7fd fddb 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17efa:	9b05      	ldr	r3, [sp, #20]
   17efc:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17f00:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17f02:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17f06:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17f08:	462a      	mov	r2, r5
   17f0a:	4643      	mov	r3, r8
   17f0c:	4621      	mov	r1, r4
   17f0e:	a814      	add	r0, sp, #80	; 0x50
   17f10:	f7fd fdce 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17f14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17f16:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17f1a:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f1c:	ee18 2a90 	vmov	r2, s17
   17f20:	ee18 1a10 	vmov	r1, s16
   17f24:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17f28:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f2a:	f7ef f92d 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17f2e:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f32:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f34:	ee19 2a90 	vmov	r2, s19
   17f38:	ee19 1a10 	vmov	r1, s18
   17f3c:	4658      	mov	r0, fp
   17f3e:	f7ef f923 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17f42:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f46:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17f48:	4643      	mov	r3, r8
   17f4a:	462a      	mov	r2, r5
   17f4c:	4621      	mov	r1, r4
   17f4e:	4638      	mov	r0, r7
   17f50:	f7fd fd78 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   17f54:	45da      	cmp	sl, fp
   17f56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17f58:	bfd4      	ite	le
   17f5a:	f04f 0a00 	movle.w	sl, #0
   17f5e:	f04f 0a01 	movgt.w	sl, #1
   17f62:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17f66:	f109 0901 	add.w	r9, r9, #1
   17f6a:	e7b8      	b.n	17ede <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17f6c:	f108 0801 	add.w	r8, r8, #1
   17f70:	e7ad      	b.n	17ece <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17f72:	3501      	adds	r5, #1
   17f74:	e7a2      	b.n	17ebc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17f76:	3401      	adds	r4, #1
   17f78:	e799      	b.n	17eae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17f7a:	a806      	add	r0, sp, #24
   17f7c:	f7fd fc95 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   17f80:	b01d      	add	sp, #116	; 0x74
   17f82:	ecbd 8b04 	vpop	{d8-d9}
   17f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f8a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f8e:	ed2d 8b04 	vpush	{d8-d9}
   17f92:	b09d      	sub	sp, #116	; 0x74
   17f94:	4604      	mov	r4, r0
   17f96:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17f98:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17f9a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17f9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17f9e:	f7fe fd4a 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17fa2:	e9d4 6300 	ldrd	r6, r3, [r4]
   17fa6:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17fa8:	68a3      	ldr	r3, [r4, #8]
   17faa:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17fae:	68e3      	ldr	r3, [r4, #12]
   17fb0:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17fb4:	6923      	ldr	r3, [r4, #16]
   17fb6:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17fb8:	6963      	ldr	r3, [r4, #20]
   17fba:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17fbe:	69a3      	ldr	r3, [r4, #24]
   17fc0:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17fc4:	2400      	movs	r4, #0
   17fc6:	2100      	movs	r1, #0
   17fc8:	a806      	add	r0, sp, #24
   17fca:	f7fd fc79 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17fce:	42a0      	cmp	r0, r4
   17fd0:	dd5f      	ble.n	18092 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17fd2:	2500      	movs	r5, #0
   17fd4:	af06      	add	r7, sp, #24
   17fd6:	2101      	movs	r1, #1
   17fd8:	4638      	mov	r0, r7
   17fda:	f7fd fc71 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17fde:	42a8      	cmp	r0, r5
   17fe0:	dd55      	ble.n	1808e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17fe2:	f04f 0800 	mov.w	r8, #0
   17fe6:	2102      	movs	r1, #2
   17fe8:	4638      	mov	r0, r7
   17fea:	f7fd fc69 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17fee:	4540      	cmp	r0, r8
   17ff0:	dd4b      	ble.n	1808a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17ff2:	f04f 0900 	mov.w	r9, #0
   17ff6:	2103      	movs	r1, #3
   17ff8:	4638      	mov	r0, r7
   17ffa:	f7fd fc61 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ffe:	4548      	cmp	r0, r9
   18000:	dd40      	ble.n	18084 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18002:	f8cd 9000 	str.w	r9, [sp]
   18006:	4643      	mov	r3, r8
   18008:	462a      	mov	r2, r5
   1800a:	4621      	mov	r1, r4
   1800c:	a80c      	add	r0, sp, #48	; 0x30
   1800e:	f7fd fd4f 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18012:	9b05      	ldr	r3, [sp, #20]
   18014:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   18018:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1801a:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   1801e:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18020:	462a      	mov	r2, r5
   18022:	4643      	mov	r3, r8
   18024:	4621      	mov	r1, r4
   18026:	a814      	add	r0, sp, #80	; 0x50
   18028:	f7fd fd42 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1802c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1802e:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   18032:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18034:	ee18 2a90 	vmov	r2, s17
   18038:	ee18 1a10 	vmov	r1, s16
   1803c:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18040:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18042:	f7ef f8a1 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18046:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1804a:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1804c:	ee19 2a90 	vmov	r2, s19
   18050:	ee19 1a10 	vmov	r1, s18
   18054:	4658      	mov	r0, fp
   18056:	f7ef f897 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1805a:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1805e:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18060:	4643      	mov	r3, r8
   18062:	462a      	mov	r2, r5
   18064:	4621      	mov	r1, r4
   18066:	4638      	mov	r0, r7
   18068:	f7fd fcec 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   1806c:	45da      	cmp	sl, fp
   1806e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18070:	bfb4      	ite	lt
   18072:	f04f 0a00 	movlt.w	sl, #0
   18076:	f04f 0a01 	movge.w	sl, #1
   1807a:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1807e:	f109 0901 	add.w	r9, r9, #1
   18082:	e7b8      	b.n	17ff6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18084:	f108 0801 	add.w	r8, r8, #1
   18088:	e7ad      	b.n	17fe6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1808a:	3501      	adds	r5, #1
   1808c:	e7a2      	b.n	17fd4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1808e:	3401      	adds	r4, #1
   18090:	e799      	b.n	17fc6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   18092:	a806      	add	r0, sp, #24
   18094:	f7fd fc09 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   18098:	b01d      	add	sp, #116	; 0x74
   1809a:	ecbd 8b04 	vpop	{d8-d9}
   1809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000180a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   180a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180a6:	ed2d 8b04 	vpush	{d8-d9}
   180aa:	b09d      	sub	sp, #116	; 0x74
   180ac:	4604      	mov	r4, r0
   180ae:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   180b0:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   180b2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   180b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   180b6:	f7fe fcbe 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   180ba:	e9d4 6300 	ldrd	r6, r3, [r4]
   180be:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   180c0:	68a3      	ldr	r3, [r4, #8]
   180c2:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   180c6:	68e3      	ldr	r3, [r4, #12]
   180c8:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   180cc:	6923      	ldr	r3, [r4, #16]
   180ce:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   180d0:	6963      	ldr	r3, [r4, #20]
   180d2:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   180d6:	69a3      	ldr	r3, [r4, #24]
   180d8:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   180dc:	2400      	movs	r4, #0
   180de:	2100      	movs	r1, #0
   180e0:	a806      	add	r0, sp, #24
   180e2:	f7fd fbed 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   180e6:	42a0      	cmp	r0, r4
   180e8:	dd5f      	ble.n	181aa <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   180ea:	2500      	movs	r5, #0
   180ec:	af06      	add	r7, sp, #24
   180ee:	2101      	movs	r1, #1
   180f0:	4638      	mov	r0, r7
   180f2:	f7fd fbe5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   180f6:	42a8      	cmp	r0, r5
   180f8:	dd55      	ble.n	181a6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   180fa:	f04f 0800 	mov.w	r8, #0
   180fe:	2102      	movs	r1, #2
   18100:	4638      	mov	r0, r7
   18102:	f7fd fbdd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18106:	4540      	cmp	r0, r8
   18108:	dd4b      	ble.n	181a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1810a:	f04f 0900 	mov.w	r9, #0
   1810e:	2103      	movs	r1, #3
   18110:	4638      	mov	r0, r7
   18112:	f7fd fbd5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18116:	4548      	cmp	r0, r9
   18118:	dd40      	ble.n	1819c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1811a:	f8cd 9000 	str.w	r9, [sp]
   1811e:	4643      	mov	r3, r8
   18120:	462a      	mov	r2, r5
   18122:	4621      	mov	r1, r4
   18124:	a80c      	add	r0, sp, #48	; 0x30
   18126:	f7fd fcc3 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1812a:	9b05      	ldr	r3, [sp, #20]
   1812c:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   18130:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18132:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18136:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18138:	462a      	mov	r2, r5
   1813a:	4643      	mov	r3, r8
   1813c:	4621      	mov	r1, r4
   1813e:	a814      	add	r0, sp, #80	; 0x50
   18140:	f7fd fcb6 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18144:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18146:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   1814a:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1814c:	ee18 2a90 	vmov	r2, s17
   18150:	ee18 1a10 	vmov	r1, s16
   18154:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18158:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1815a:	f7ef f815 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1815e:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18162:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18164:	ee19 2a90 	vmov	r2, s19
   18168:	ee19 1a10 	vmov	r1, s18
   1816c:	4658      	mov	r0, fp
   1816e:	f7ef f80b 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18172:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18176:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18178:	4643      	mov	r3, r8
   1817a:	462a      	mov	r2, r5
   1817c:	4621      	mov	r1, r4
   1817e:	4638      	mov	r0, r7
   18180:	f7fd fc60 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   18184:	45da      	cmp	sl, fp
   18186:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18188:	bfb4      	ite	lt
   1818a:	f04f 0a00 	movlt.w	sl, #0
   1818e:	f04f 0a01 	movge.w	sl, #1
   18192:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18196:	f109 0901 	add.w	r9, r9, #1
   1819a:	e7b8      	b.n	1810e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1819c:	f108 0801 	add.w	r8, r8, #1
   181a0:	e7ad      	b.n	180fe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   181a2:	3501      	adds	r5, #1
   181a4:	e7a2      	b.n	180ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   181a6:	3401      	adds	r4, #1
   181a8:	e799      	b.n	180de <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   181aa:	a806      	add	r0, sp, #24
   181ac:	f7fd fb7d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   181b0:	b01d      	add	sp, #116	; 0x74
   181b2:	ecbd 8b04 	vpop	{d8-d9}
   181b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000181ba <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   181ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181be:	ed2d 8b04 	vpush	{d8-d9}
   181c2:	b09d      	sub	sp, #116	; 0x74
   181c4:	4604      	mov	r4, r0
   181c6:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   181c8:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   181ca:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   181cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   181ce:	f7fe fc32 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   181d2:	e9d4 6300 	ldrd	r6, r3, [r4]
   181d6:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   181d8:	68a3      	ldr	r3, [r4, #8]
   181da:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   181de:	68e3      	ldr	r3, [r4, #12]
   181e0:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   181e4:	6923      	ldr	r3, [r4, #16]
   181e6:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   181e8:	6963      	ldr	r3, [r4, #20]
   181ea:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   181ee:	69a3      	ldr	r3, [r4, #24]
   181f0:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   181f4:	2400      	movs	r4, #0
   181f6:	2100      	movs	r1, #0
   181f8:	a806      	add	r0, sp, #24
   181fa:	f7fd fb61 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   181fe:	42a0      	cmp	r0, r4
   18200:	dd5f      	ble.n	182c2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18202:	2500      	movs	r5, #0
   18204:	af06      	add	r7, sp, #24
   18206:	2101      	movs	r1, #1
   18208:	4638      	mov	r0, r7
   1820a:	f7fd fb59 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1820e:	42a8      	cmp	r0, r5
   18210:	dd55      	ble.n	182be <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18212:	f04f 0800 	mov.w	r8, #0
   18216:	2102      	movs	r1, #2
   18218:	4638      	mov	r0, r7
   1821a:	f7fd fb51 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1821e:	4540      	cmp	r0, r8
   18220:	dd4b      	ble.n	182ba <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18222:	f04f 0900 	mov.w	r9, #0
   18226:	2103      	movs	r1, #3
   18228:	4638      	mov	r0, r7
   1822a:	f7fd fb49 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1822e:	4548      	cmp	r0, r9
   18230:	dd40      	ble.n	182b4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18232:	f8cd 9000 	str.w	r9, [sp]
   18236:	4643      	mov	r3, r8
   18238:	462a      	mov	r2, r5
   1823a:	4621      	mov	r1, r4
   1823c:	a80c      	add	r0, sp, #48	; 0x30
   1823e:	f7fd fc37 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18242:	9b05      	ldr	r3, [sp, #20]
   18244:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   18248:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1824a:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   1824e:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18250:	462a      	mov	r2, r5
   18252:	4643      	mov	r3, r8
   18254:	4621      	mov	r1, r4
   18256:	a814      	add	r0, sp, #80	; 0x50
   18258:	f7fd fc2a 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1825c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1825e:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   18262:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18264:	ee18 2a90 	vmov	r2, s17
   18268:	ee18 1a10 	vmov	r1, s16
   1826c:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18270:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18272:	f7ee ff89 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18276:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1827a:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1827c:	ee19 2a90 	vmov	r2, s19
   18280:	ee19 1a10 	vmov	r1, s18
   18284:	4658      	mov	r0, fp
   18286:	f7ee ff7f 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1828a:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1828e:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18290:	4643      	mov	r3, r8
   18292:	462a      	mov	r2, r5
   18294:	4621      	mov	r1, r4
   18296:	4638      	mov	r0, r7
   18298:	f7fd fbd4 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   1829c:	45da      	cmp	sl, fp
   1829e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   182a0:	bfac      	ite	ge
   182a2:	f04f 0a00 	movge.w	sl, #0
   182a6:	f04f 0a01 	movlt.w	sl, #1
   182aa:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   182ae:	f109 0901 	add.w	r9, r9, #1
   182b2:	e7b8      	b.n	18226 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   182b4:	f108 0801 	add.w	r8, r8, #1
   182b8:	e7ad      	b.n	18216 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   182ba:	3501      	adds	r5, #1
   182bc:	e7a2      	b.n	18204 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   182be:	3401      	adds	r4, #1
   182c0:	e799      	b.n	181f6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   182c2:	a806      	add	r0, sp, #24
   182c4:	f7fd faf1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   182c8:	b01d      	add	sp, #116	; 0x74
   182ca:	ecbd 8b04 	vpop	{d8-d9}
   182ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000182d2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   182d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182d6:	ed2d 8b04 	vpush	{d8-d9}
   182da:	b09d      	sub	sp, #116	; 0x74
   182dc:	4604      	mov	r4, r0
   182de:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   182e0:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   182e2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   182e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   182e6:	f7fe fba6 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   182ea:	e9d4 6300 	ldrd	r6, r3, [r4]
   182ee:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   182f0:	68a3      	ldr	r3, [r4, #8]
   182f2:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   182f6:	68e3      	ldr	r3, [r4, #12]
   182f8:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   182fc:	6923      	ldr	r3, [r4, #16]
   182fe:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   18300:	6963      	ldr	r3, [r4, #20]
   18302:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18306:	69a3      	ldr	r3, [r4, #24]
   18308:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1830c:	2400      	movs	r4, #0
   1830e:	2100      	movs	r1, #0
   18310:	a806      	add	r0, sp, #24
   18312:	f7fd fad5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18316:	42a0      	cmp	r0, r4
   18318:	dd5f      	ble.n	183da <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1831a:	2500      	movs	r5, #0
   1831c:	af06      	add	r7, sp, #24
   1831e:	2101      	movs	r1, #1
   18320:	4638      	mov	r0, r7
   18322:	f7fd facd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18326:	42a8      	cmp	r0, r5
   18328:	dd55      	ble.n	183d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1832a:	f04f 0800 	mov.w	r8, #0
   1832e:	2102      	movs	r1, #2
   18330:	4638      	mov	r0, r7
   18332:	f7fd fac5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18336:	4540      	cmp	r0, r8
   18338:	dd4b      	ble.n	183d2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1833a:	f04f 0900 	mov.w	r9, #0
   1833e:	2103      	movs	r1, #3
   18340:	4638      	mov	r0, r7
   18342:	f7fd fabd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18346:	4548      	cmp	r0, r9
   18348:	dd40      	ble.n	183cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1834a:	f8cd 9000 	str.w	r9, [sp]
   1834e:	4643      	mov	r3, r8
   18350:	462a      	mov	r2, r5
   18352:	4621      	mov	r1, r4
   18354:	a80c      	add	r0, sp, #48	; 0x30
   18356:	f7fd fbab 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1835a:	9b05      	ldr	r3, [sp, #20]
   1835c:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   18360:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18362:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18366:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18368:	462a      	mov	r2, r5
   1836a:	4643      	mov	r3, r8
   1836c:	4621      	mov	r1, r4
   1836e:	a814      	add	r0, sp, #80	; 0x50
   18370:	f7fd fb9e 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18374:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18376:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   1837a:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1837c:	ee18 2a90 	vmov	r2, s17
   18380:	ee18 1a10 	vmov	r1, s16
   18384:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18388:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1838a:	f7ee fefd 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1838e:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18392:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18394:	ee19 2a90 	vmov	r2, s19
   18398:	ee19 1a10 	vmov	r1, s18
   1839c:	4658      	mov	r0, fp
   1839e:	f7ee fef3 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   183a2:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   183a6:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   183a8:	4643      	mov	r3, r8
   183aa:	462a      	mov	r2, r5
   183ac:	4621      	mov	r1, r4
   183ae:	4638      	mov	r0, r7
   183b0:	f7fd fb48 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   183b4:	45da      	cmp	sl, fp
   183b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   183b8:	bfac      	ite	ge
   183ba:	f04f 0a00 	movge.w	sl, #0
   183be:	f04f 0a01 	movlt.w	sl, #1
   183c2:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   183c6:	f109 0901 	add.w	r9, r9, #1
   183ca:	e7b8      	b.n	1833e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   183cc:	f108 0801 	add.w	r8, r8, #1
   183d0:	e7ad      	b.n	1832e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   183d2:	3501      	adds	r5, #1
   183d4:	e7a2      	b.n	1831c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   183d6:	3401      	adds	r4, #1
   183d8:	e799      	b.n	1830e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   183da:	a806      	add	r0, sp, #24
   183dc:	f7fd fa65 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   183e0:	b01d      	add	sp, #116	; 0x74
   183e2:	ecbd 8b04 	vpop	{d8-d9}
   183e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000183ea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   183ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ee:	ed2d 8b04 	vpush	{d8-d9}
   183f2:	b09d      	sub	sp, #116	; 0x74
   183f4:	4604      	mov	r4, r0
   183f6:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   183f8:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   183fa:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   183fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   183fe:	f7fe fb1a 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   18402:	e9d4 6300 	ldrd	r6, r3, [r4]
   18406:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   18408:	68a3      	ldr	r3, [r4, #8]
   1840a:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   1840e:	68e3      	ldr	r3, [r4, #12]
   18410:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   18414:	6923      	ldr	r3, [r4, #16]
   18416:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   18418:	6963      	ldr	r3, [r4, #20]
   1841a:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   1841e:	69a3      	ldr	r3, [r4, #24]
   18420:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18424:	2400      	movs	r4, #0
   18426:	2100      	movs	r1, #0
   18428:	a806      	add	r0, sp, #24
   1842a:	f7fd fa49 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1842e:	42a0      	cmp	r0, r4
   18430:	dd5f      	ble.n	184f2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18432:	2500      	movs	r5, #0
   18434:	af06      	add	r7, sp, #24
   18436:	2101      	movs	r1, #1
   18438:	4638      	mov	r0, r7
   1843a:	f7fd fa41 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1843e:	42a8      	cmp	r0, r5
   18440:	dd55      	ble.n	184ee <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18442:	f04f 0800 	mov.w	r8, #0
   18446:	2102      	movs	r1, #2
   18448:	4638      	mov	r0, r7
   1844a:	f7fd fa39 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1844e:	4540      	cmp	r0, r8
   18450:	dd4b      	ble.n	184ea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18452:	f04f 0900 	mov.w	r9, #0
   18456:	2103      	movs	r1, #3
   18458:	4638      	mov	r0, r7
   1845a:	f7fd fa31 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1845e:	4548      	cmp	r0, r9
   18460:	dd40      	ble.n	184e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18462:	f8cd 9000 	str.w	r9, [sp]
   18466:	4643      	mov	r3, r8
   18468:	462a      	mov	r2, r5
   1846a:	4621      	mov	r1, r4
   1846c:	a80c      	add	r0, sp, #48	; 0x30
   1846e:	f7fd fb1f 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18472:	9b05      	ldr	r3, [sp, #20]
   18474:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   18478:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1847a:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   1847e:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18480:	462a      	mov	r2, r5
   18482:	4643      	mov	r3, r8
   18484:	4621      	mov	r1, r4
   18486:	a814      	add	r0, sp, #80	; 0x50
   18488:	f7fd fb12 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1848c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1848e:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   18492:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18494:	ee18 2a90 	vmov	r2, s17
   18498:	ee18 1a10 	vmov	r1, s16
   1849c:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   184a0:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184a2:	f7ee fe71 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   184a6:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184aa:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184ac:	ee19 2a90 	vmov	r2, s19
   184b0:	ee19 1a10 	vmov	r1, s18
   184b4:	4658      	mov	r0, fp
   184b6:	f7ee fe67 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   184ba:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184be:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   184c0:	4643      	mov	r3, r8
   184c2:	462a      	mov	r2, r5
   184c4:	4621      	mov	r1, r4
   184c6:	4638      	mov	r0, r7
   184c8:	f7fd fabc 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   184cc:	45da      	cmp	sl, fp
   184ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   184d0:	bfcc      	ite	gt
   184d2:	f04f 0a00 	movgt.w	sl, #0
   184d6:	f04f 0a01 	movle.w	sl, #1
   184da:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   184de:	f109 0901 	add.w	r9, r9, #1
   184e2:	e7b8      	b.n	18456 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   184e4:	f108 0801 	add.w	r8, r8, #1
   184e8:	e7ad      	b.n	18446 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   184ea:	3501      	adds	r5, #1
   184ec:	e7a2      	b.n	18434 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   184ee:	3401      	adds	r4, #1
   184f0:	e799      	b.n	18426 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   184f2:	a806      	add	r0, sp, #24
   184f4:	f7fd f9d9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   184f8:	b01d      	add	sp, #116	; 0x74
   184fa:	ecbd 8b04 	vpop	{d8-d9}
   184fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018502 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   18502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18506:	ed2d 8b04 	vpush	{d8-d9}
   1850a:	b09d      	sub	sp, #116	; 0x74
   1850c:	4604      	mov	r4, r0
   1850e:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   18510:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   18512:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   18514:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   18516:	f7fe fa8e 	bl	16a36 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   1851a:	e9d4 6300 	ldrd	r6, r3, [r4]
   1851e:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   18520:	68a3      	ldr	r3, [r4, #8]
   18522:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   18526:	68e3      	ldr	r3, [r4, #12]
   18528:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   1852c:	6923      	ldr	r3, [r4, #16]
   1852e:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   18530:	6963      	ldr	r3, [r4, #20]
   18532:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18536:	69a3      	ldr	r3, [r4, #24]
   18538:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1853c:	2400      	movs	r4, #0
   1853e:	2100      	movs	r1, #0
   18540:	a806      	add	r0, sp, #24
   18542:	f7fd f9bd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18546:	42a0      	cmp	r0, r4
   18548:	dd5f      	ble.n	1860a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1854a:	2500      	movs	r5, #0
   1854c:	af06      	add	r7, sp, #24
   1854e:	2101      	movs	r1, #1
   18550:	4638      	mov	r0, r7
   18552:	f7fd f9b5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18556:	42a8      	cmp	r0, r5
   18558:	dd55      	ble.n	18606 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1855a:	f04f 0800 	mov.w	r8, #0
   1855e:	2102      	movs	r1, #2
   18560:	4638      	mov	r0, r7
   18562:	f7fd f9ad 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18566:	4540      	cmp	r0, r8
   18568:	dd4b      	ble.n	18602 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1856a:	f04f 0900 	mov.w	r9, #0
   1856e:	2103      	movs	r1, #3
   18570:	4638      	mov	r0, r7
   18572:	f7fd f9a5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18576:	4548      	cmp	r0, r9
   18578:	dd40      	ble.n	185fc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1857a:	f8cd 9000 	str.w	r9, [sp]
   1857e:	4643      	mov	r3, r8
   18580:	462a      	mov	r2, r5
   18582:	4621      	mov	r1, r4
   18584:	a80c      	add	r0, sp, #48	; 0x30
   18586:	f7fd fa93 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1858a:	9b05      	ldr	r3, [sp, #20]
   1858c:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   18590:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18592:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18596:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18598:	462a      	mov	r2, r5
   1859a:	4643      	mov	r3, r8
   1859c:	4621      	mov	r1, r4
   1859e:	a814      	add	r0, sp, #80	; 0x50
   185a0:	f7fd fa86 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   185a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   185a6:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   185aa:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185ac:	ee18 2a90 	vmov	r2, s17
   185b0:	ee18 1a10 	vmov	r1, s16
   185b4:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   185b8:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185ba:	f7ee fde5 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   185be:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185c2:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185c4:	ee19 2a90 	vmov	r2, s19
   185c8:	ee19 1a10 	vmov	r1, s18
   185cc:	4658      	mov	r0, fp
   185ce:	f7ee fddb 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   185d2:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185d6:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   185d8:	4643      	mov	r3, r8
   185da:	462a      	mov	r2, r5
   185dc:	4621      	mov	r1, r4
   185de:	4638      	mov	r0, r7
   185e0:	f7fd fa30 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   185e4:	45da      	cmp	sl, fp
   185e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   185e8:	bfcc      	ite	gt
   185ea:	f04f 0a00 	movgt.w	sl, #0
   185ee:	f04f 0a01 	movle.w	sl, #1
   185f2:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   185f6:	f109 0901 	add.w	r9, r9, #1
   185fa:	e7b8      	b.n	1856e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   185fc:	f108 0801 	add.w	r8, r8, #1
   18600:	e7ad      	b.n	1855e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18602:	3501      	adds	r5, #1
   18604:	e7a2      	b.n	1854c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18606:	3401      	adds	r4, #1
   18608:	e799      	b.n	1853e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   1860a:	a806      	add	r0, sp, #24
   1860c:	f7fd f94d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   18610:	b01d      	add	sp, #116	; 0x74
   18612:	ecbd 8b04 	vpop	{d8-d9}
   18616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   1861a:	b570      	push	{r4, r5, r6, lr}
   1861c:	4615      	mov	r5, r2
   1861e:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   18620:	f7fd f94e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18624:	4631      	mov	r1, r6
   18626:	4604      	mov	r4, r0
   18628:	4628      	mov	r0, r5
   1862a:	f7fd f949 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1862e:	4284      	cmp	r4, r0
   18630:	d001      	beq.n	18636 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   18632:	f005 ffce 	bl	1e5d2 <abort>
}
   18636:	bd70      	pop	{r4, r5, r6, pc}

00018638 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>:
// when optimizng this routine further.
inline void ConcatenationWithScaling(const ConcatenationParams& params,
                                     const RuntimeShape* const* input_shapes,
                                     const uint8* const* input_data,
                                     const RuntimeShape& output_shape,
                                     uint8* output_data) {
   18638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1863c:	ed2d 8b04 	vpush	{d8-d9}
   18640:	469b      	mov	fp, r3
   18642:	b08f      	sub	sp, #60	; 0x3c
  int axis = params.axis;
  const int32* input_zeropoint = params.input_zeropoint;
   18644:	6843      	ldr	r3, [r0, #4]
  int axis = params.axis;
   18646:	f990 4000 	ldrsb.w	r4, [r0]
  const float* input_scale = params.input_scale;
  int inputs_count = params.inputs_count;
  const int32 output_zeropoint = params.output_zeropoint;
  const float output_scale = params.output_scale;

  const int concat_dimensions = output_shape.DimensionsCount();
   1864a:	f8db 5000 	ldr.w	r5, [fp]
  const int32* input_zeropoint = params.input_zeropoint;
   1864e:	9306      	str	r3, [sp, #24]
  const float* input_scale = params.input_scale;
   18650:	6883      	ldr	r3, [r0, #8]
   18652:	9307      	str	r3, [sp, #28]
  int inputs_count = params.inputs_count;
   18654:	8983      	ldrh	r3, [r0, #12]
   18656:	9303      	str	r3, [sp, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18658:	42ac      	cmp	r4, r5
  const int32 output_zeropoint = params.output_zeropoint;
   1865a:	6903      	ldr	r3, [r0, #16]
  const float output_scale = params.output_scale;
   1865c:	ed90 9a05 	vldr	s18, [r0, #20]
                                     uint8* output_data) {
   18660:	9105      	str	r1, [sp, #20]
   18662:	9208      	str	r2, [sp, #32]
  const int32 output_zeropoint = params.output_zeropoint;
   18664:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18666:	db01      	blt.n	1866c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x34>
   18668:	f005 ffb3 	bl	1e5d2 <abort>

  int64_t concat_size = 0;
  for (int i = 0; i < inputs_count; i++) {
   1866c:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
   18670:	2600      	movs	r6, #0
   18672:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18674:	9b03      	ldr	r3, [sp, #12]
   18676:	4598      	cmp	r8, r3
   18678:	da1f      	bge.n	186ba <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x82>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   1867a:	9b05      	ldr	r3, [sp, #20]
   1867c:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   18680:	f8da 3000 	ldr.w	r3, [sl]
   18684:	429d      	cmp	r5, r3
   18686:	d1ef      	bne.n	18668 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
    for (int j = 0; j < concat_dimensions; j++) {
   18688:	f04f 0900 	mov.w	r9, #0
   1868c:	45a9      	cmp	r9, r5
   1868e:	da0a      	bge.n	186a6 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x6e>
      if (j != axis) {
   18690:	45a1      	cmp	r9, r4
   18692:	d005      	beq.n	186a0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x68>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18694:	464b      	mov	r3, r9
   18696:	465a      	mov	r2, fp
   18698:	4649      	mov	r1, r9
   1869a:	4650      	mov	r0, sl
   1869c:	f7ff ffbd 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   186a0:	f109 0901 	add.w	r9, r9, #1
   186a4:	e7f2      	b.n	1868c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x54>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
   186a6:	4621      	mov	r1, r4
   186a8:	4650      	mov	r0, sl
   186aa:	f7fd f909 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   186ae:	1836      	adds	r6, r6, r0
   186b0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   186b4:	f108 0801 	add.w	r8, r8, #1
   186b8:	e7dc      	b.n	18674 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x3c>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   186ba:	4621      	mov	r1, r4
   186bc:	4658      	mov	r0, fp
   186be:	f7fd f8ff 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   186c2:	17c1      	asrs	r1, r0, #31
   186c4:	42b9      	cmp	r1, r7
   186c6:	bf08      	it	eq
   186c8:	42b0      	cmpeq	r0, r6
   186ca:	d1cd      	bne.n	18668 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
  int64_t outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   186cc:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   186ce:	f04f 0901 	mov.w	r9, #1
   186d2:	f04f 0a00 	mov.w	sl, #0
  for (int i = 0; i < axis; ++i) {
   186d6:	42a6      	cmp	r6, r4
   186d8:	da0d      	bge.n	186f6 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xbe>
    outer_size *= output_shape.Dims(i);
   186da:	4631      	mov	r1, r6
   186dc:	4658      	mov	r0, fp
   186de:	f7fd f8ef 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   186e2:	17c3      	asrs	r3, r0, #31
   186e4:	fb09 f303 	mul.w	r3, r9, r3
   186e8:	fb00 330a 	mla	r3, r0, sl, r3
   186ec:	fba9 9a00 	umull	r9, sl, r9, r0
   186f0:	449a      	add	sl, r3
  for (int i = 0; i < axis; ++i) {
   186f2:	3601      	adds	r6, #1
   186f4:	e7ef      	b.n	186d6 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x9e>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
   186f6:	2201      	movs	r2, #1
   186f8:	2300      	movs	r3, #0
   186fa:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   186fe:	1c66      	adds	r6, r4, #1
   18700:	42ae      	cmp	r6, r5
   18702:	d012      	beq.n	1872a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xf2>
    base_inner_size *= output_shape.Dims(i);
   18704:	4631      	mov	r1, r6
   18706:	4658      	mov	r0, fp
   18708:	f7fd f8da 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1870c:	9900      	ldr	r1, [sp, #0]
   1870e:	9a01      	ldr	r2, [sp, #4]
   18710:	17c3      	asrs	r3, r0, #31
   18712:	434b      	muls	r3, r1
   18714:	fb00 3302 	mla	r3, r0, r2, r3
   18718:	fba1 1200 	umull	r1, r2, r1, r0
   1871c:	e9cd 1200 	strd	r1, r2, [sp]
   18720:	9a01      	ldr	r2, [sp, #4]
   18722:	4413      	add	r3, r2
   18724:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18726:	3601      	adds	r6, #1
   18728:	e7ea      	b.n	18700 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xc8>
  }

  const float inverse_output_scale = 1.f / output_scale;
   1872a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1872e:	eec7 9a89 	vdiv.f32	s19, s15, s18
  uint8* output_ptr = output_data;
  for (int k = 0; k < outer_size; k++) {
   18732:	f04f 0800 	mov.w	r8, #0
   18736:	4642      	mov	r2, r8
   18738:	17d3      	asrs	r3, r2, #31
   1873a:	45c8      	cmp	r8, r9
   1873c:	eb73 030a 	sbcs.w	r3, r3, sl
   18740:	da6a      	bge.n	18818 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1e0>
   18742:	f8dd b01c 	ldr.w	fp, [sp, #28]
    for (int i = 0; i < inputs_count; ++i) {
   18746:	2500      	movs	r5, #0
   18748:	9b03      	ldr	r3, [sp, #12]
   1874a:	429d      	cmp	r5, r3
   1874c:	da61      	bge.n	18812 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1da>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   1874e:	9b05      	ldr	r3, [sp, #20]
   18750:	4621      	mov	r1, r4
   18752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   18756:	f7fd f8b3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1875a:	9b00      	ldr	r3, [sp, #0]
      const uint8* input_ptr = input_data[i] + k * copy_size;
      if (input_zeropoint[i] == output_zeropoint &&
   1875c:	9a06      	ldr	r2, [sp, #24]
   1875e:	9904      	ldr	r1, [sp, #16]
   18760:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   18764:	ecfb 7a01 	vldmia	fp!, {s15}
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18768:	fb00 f603 	mul.w	r6, r0, r3
      const uint8* input_ptr = input_data[i] + k * copy_size;
   1876c:	9b08      	ldr	r3, [sp, #32]
   1876e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      if (input_zeropoint[i] == output_zeropoint &&
   18772:	428a      	cmp	r2, r1
      const uint8* input_ptr = input_data[i] + k * copy_size;
   18774:	fb06 3308 	mla	r3, r6, r8, r3
      if (input_zeropoint[i] == output_zeropoint &&
   18778:	d10e      	bne.n	18798 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x160>
   1877a:	eef4 7a49 	vcmp.f32	s15, s18
   1877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18782:	d109      	bne.n	18798 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x160>
          input_scale[i] == output_scale) {
        memcpy(output_ptr, input_ptr, copy_size);
   18784:	981c      	ldr	r0, [sp, #112]	; 0x70
   18786:	4632      	mov	r2, r6
   18788:	4619      	mov	r1, r3
   1878a:	f005 ff37 	bl	1e5fc <memcpy>
                                output_zeropoint;
          output_ptr[j] = static_cast<uint8_t>(
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
        }
      }
      output_ptr += copy_size;
   1878e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18790:	4433      	add	r3, r6
   18792:	931c      	str	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   18794:	3501      	adds	r5, #1
   18796:	e7d7      	b.n	18748 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x110>
        const float bias = -input_zeropoint[i] * scale;
   18798:	4252      	negs	r2, r2
        const float scale = input_scale[i] * inverse_output_scale;
   1879a:	ee67 8aa9 	vmul.f32	s17, s15, s19
        const float bias = -input_zeropoint[i] * scale;
   1879e:	ee07 2a90 	vmov	s15, r2
   187a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (int j = 0; j < copy_size; ++j) {
   187a6:	2700      	movs	r7, #0
   187a8:	42b7      	cmp	r7, r6
   187aa:	daf0      	bge.n	1878e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x156>
                                    input_ptr[j] * scale + bias)) +
   187ac:	5dda      	ldrb	r2, [r3, r7]
   187ae:	9309      	str	r3, [sp, #36]	; 0x24
   187b0:	ee07 2a90 	vmov	s15, r2
   187b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   187b8:	ee77 7a88 	vadd.f32	s15, s15, s16
   187bc:	ee67 7aa8 	vmul.f32	s15, s15, s17
   187c0:	ee17 0a90 	vmov	r0, s15
   187c4:	f7e8 fa50 	bl	c68 <__aeabi_f2d>
   187c8:	ec41 0b10 	vmov	d0, r0, r1
   187cc:	f7f9 fbca 	bl	11f64 <round>
   187d0:	ec51 0b10 	vmov	r0, r1, d0
   187d4:	f7e8 fd62 	bl	129c <__aeabi_d2f>
   187d8:	ee07 0a90 	vmov	s15, r0
   187dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                                    input_ptr[j] * scale + bias)) +
   187e0:	9b04      	ldr	r3, [sp, #16]
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   187e2:	ee17 0a90 	vmov	r0, s15
                                    input_ptr[j] * scale + bias)) +
   187e6:	4418      	add	r0, r3
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   187e8:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   187ea:	28fe      	cmp	r0, #254	; 0xfe
   187ec:	930c      	str	r3, [sp, #48]	; 0x30
	return __b;
   187ee:	aa0b      	add	r2, sp, #44	; 0x2c
   187f0:	ab0c      	add	r3, sp, #48	; 0x30
   187f2:	bfcc      	ite	gt
   187f4:	4619      	movgt	r1, r3
   187f6:	4611      	movle	r1, r2
                                output_zeropoint;
   187f8:	900b      	str	r0, [sp, #44]	; 0x2c
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   187fa:	2000      	movs	r0, #0
   187fc:	900d      	str	r0, [sp, #52]	; 0x34
      if (__a < __b)
   187fe:	6808      	ldr	r0, [r1, #0]
   18800:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18802:	2800      	cmp	r0, #0
	return __b;
   18804:	bfb8      	it	lt
   18806:	a90d      	addlt	r1, sp, #52	; 0x34
          output_ptr[j] = static_cast<uint8_t>(
   18808:	981c      	ldr	r0, [sp, #112]	; 0x70
   1880a:	6809      	ldr	r1, [r1, #0]
   1880c:	55c1      	strb	r1, [r0, r7]
        for (int j = 0; j < copy_size; ++j) {
   1880e:	3701      	adds	r7, #1
   18810:	e7ca      	b.n	187a8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x170>
  for (int k = 0; k < outer_size; k++) {
   18812:	f108 0801 	add.w	r8, r8, #1
   18816:	e78e      	b.n	18736 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xfe>
    }
  }
}
   18818:	b00f      	add	sp, #60	; 0x3c
   1881a:	ecbd 8b04 	vpop	{d8-d9}
   1881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>:
inline void GetAllTensorShapes(const TfLiteContext& context,
   18822:	b5f0      	push	{r4, r5, r6, r7, lr}
   18824:	4607      	mov	r7, r0
   18826:	b087      	sub	sp, #28
   18828:	460e      	mov	r6, r1
   1882a:	4614      	mov	r4, r2
   1882c:	2501      	movs	r5, #1
  for (int i = 0; i < tensor_list.size; ++i) {
   1882e:	6832      	ldr	r2, [r6, #0]
   18830:	1e6b      	subs	r3, r5, #1
   18832:	429a      	cmp	r2, r3
   18834:	dd15      	ble.n	18862 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0x40>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18836:	683b      	ldr	r3, [r7, #0]
   18838:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
    RuntimeShape shape = GetTensorShape(t);
   1883c:	4668      	mov	r0, sp
   1883e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   18842:	f7fd f877 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
   18846:	9900      	ldr	r1, [sp, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18848:	2905      	cmp	r1, #5
   1884a:	4620      	mov	r0, r4
   1884c:	bfcc      	ite	gt
   1884e:	9a01      	ldrgt	r2, [sp, #4]
   18850:	aa01      	addle	r2, sp, #4
   18852:	f7fe f830 	bl	168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
    RuntimeShape shape = GetTensorShape(t);
   18856:	4668      	mov	r0, sp
   18858:	f7fd f827 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < tensor_list.size; ++i) {
   1885c:	3501      	adds	r5, #1
   1885e:	3418      	adds	r4, #24
   18860:	e7e5      	b.n	1882e <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0xc>
}
   18862:	b007      	add	sp, #28
   18864:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>:
                              const RuntimeShape* pointers[]) {
   18866:	b530      	push	{r4, r5, lr}
  for (size_t i = 0; i < num; ++i) {
   18868:	2300      	movs	r3, #0
    pointers[i] = &shapes[i];
   1886a:	2518      	movs	r5, #24
  for (size_t i = 0; i < num; ++i) {
   1886c:	428b      	cmp	r3, r1
   1886e:	d005      	beq.n	1887c <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x16>
    pointers[i] = &shapes[i];
   18870:	fb05 0403 	mla	r4, r5, r3, r0
   18874:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  for (size_t i = 0; i < num; ++i) {
   18878:	3301      	adds	r3, #1
   1887a:	e7f7      	b.n	1886c <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x6>
}
   1887c:	bd30      	pop	{r4, r5, pc}

0001887e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>:
void EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {
   1887e:	b5f0      	push	{r4, r5, r6, r7, lr}
   18880:	b0f3      	sub	sp, #460	; 0x1cc
   18882:	4604      	mov	r4, r0
   18884:	460e      	mov	r6, r1
   18886:	ab36      	add	r3, sp, #216	; 0xd8
   18888:	250a      	movs	r5, #10
  RuntimeShape() : size_(0) {}
   1888a:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   1888c:	3d01      	subs	r5, #1
   1888e:	f843 2b18 	str.w	r2, [r3], #24
   18892:	d1fb      	bne.n	1888c <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18894:	f104 0008 	add.w	r0, r4, #8
   18898:	6831      	ldr	r1, [r6, #0]
   1889a:	aa36      	add	r2, sp, #216	; 0xd8
   1889c:	f7ff ffc1 	bl	18822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   188a0:	6833      	ldr	r3, [r6, #0]
   188a2:	aa0e      	add	r2, sp, #56	; 0x38
   188a4:	6819      	ldr	r1, [r3, #0]
   188a6:	a836      	add	r0, sp, #216	; 0xd8
   188a8:	f7ff ffdd 	bl	18866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
   188ac:	6837      	ldr	r7, [r6, #0]
inline void GetAllTensorData(const TfLiteContext& context,
   188ae:	68a4      	ldr	r4, [r4, #8]
  for (int i = 0; i < tensor_list.size; ++i) {
   188b0:	463a      	mov	r2, r7
    all_data[i] = GetTensorData<T>(t);
   188b2:	a818      	add	r0, sp, #96	; 0x60
  for (int i = 0; i < tensor_list.size; ++i) {
   188b4:	f852 cb04 	ldr.w	ip, [r2], #4
   188b8:	4611      	mov	r1, r2
   188ba:	45ac      	cmp	ip, r5
   188bc:	dc13      	bgt.n	188e6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x68>
   188be:	a822      	add	r0, sp, #136	; 0x88
  for (int i = 0; i < tensor_list.size; ++i) {
   188c0:	2300      	movs	r3, #0
   188c2:	4684      	mov	ip, r0
   188c4:	ad2c      	add	r5, sp, #176	; 0xb0
   188c6:	6839      	ldr	r1, [r7, #0]
   188c8:	4299      	cmp	r1, r3
   188ca:	dd16      	ble.n	188fa <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x7c>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   188cc:	f852 1b04 	ldr.w	r1, [r2], #4
   188d0:	eb04 1181 	add.w	r1, r4, r1, lsl #6
    scales[i] = t->params.scale;
   188d4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    zero_points[i] = t->params.zero_point;
   188d8:	6909      	ldr	r1, [r1, #16]
   188da:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    scales[i] = t->params.scale;
   188de:	f840 eb04 	str.w	lr, [r0], #4
  for (int i = 0; i < tensor_list.size; ++i) {
   188e2:	3301      	adds	r3, #1
   188e4:	e7ef      	b.n	188c6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x48>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   188e6:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   188ea:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   188ee:	bf18      	it	ne
   188f0:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   188f2:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   188f6:	3501      	adds	r5, #1
   188f8:	e7df      	b.n	188ba <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x3c>
   188fa:	6873      	ldr	r3, [r6, #4]
   188fc:	685b      	ldr	r3, [r3, #4]
   188fe:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18902:	6973      	ldr	r3, [r6, #20]
   18904:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   18906:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18908:	bfbc      	itt	lt
   1890a:	68a2      	ldrlt	r2, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   1890c:	6812      	ldrlt	r2, [r2, #0]
  op_params.inputs_count = NumInputs(node);
   1890e:	f8ad 1014 	strh.w	r1, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18912:	bfb8      	it	lt
   18914:	189b      	addlt	r3, r3, r2
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18916:	f88d 3008 	strb.w	r3, [sp, #8]
  op_params.output_zeropoint = output->params.zero_point;
   1891a:	6923      	ldr	r3, [r4, #16]
   1891c:	9306      	str	r3, [sp, #24]
                                          inputs_data, GetTensorShape(output),
   1891e:	4621      	mov	r1, r4
  op_params.output_scale = output->params.scale;
   18920:	68e3      	ldr	r3, [r4, #12]
   18922:	9307      	str	r3, [sp, #28]
                                          inputs_data, GetTensorShape(output),
   18924:	a808      	add	r0, sp, #32
  op_params.input_scale = inputs_scale;
   18926:	e9cd 5c03 	strd	r5, ip, [sp, #12]
                                          inputs_data, GetTensorShape(output),
   1892a:	f7fd f803 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
   1892e:	6863      	ldr	r3, [r4, #4]
   18930:	9300      	str	r3, [sp, #0]
   18932:	aa18      	add	r2, sp, #96	; 0x60
   18934:	ab08      	add	r3, sp, #32
   18936:	a90e      	add	r1, sp, #56	; 0x38
   18938:	a802      	add	r0, sp, #8
   1893a:	f7ff fe7d 	bl	18638 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>
                                          inputs_data, GetTensorShape(output),
   1893e:	a808      	add	r0, sp, #32
   18940:	f7fc ffb3 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   18944:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18946:	2518      	movs	r5, #24
   18948:	ab36      	add	r3, sp, #216	; 0xd8
   1894a:	fb05 3004 	mla	r0, r5, r4, r3
   1894e:	f7fc ffac 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   18952:	3c01      	subs	r4, #1
   18954:	d2f8      	bcs.n	18948 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xca>
}
   18956:	b073      	add	sp, #460	; 0x1cc
   18958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001895a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   1895a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1895e:	469b      	mov	fp, r3
  int axis = params.axis;
   18960:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18964:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18968:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   1896a:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   1896c:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   1896e:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18972:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18974:	db01      	blt.n	1897a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18976:	f005 fe2c 	bl	1e5d2 <abort>
  for (int i = 0; i < inputs_count; i++) {
   1897a:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   1897c:	2600      	movs	r6, #0
   1897e:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18980:	9b00      	ldr	r3, [sp, #0]
   18982:	429c      	cmp	r4, r3
   18984:	da1d      	bge.n	189c2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18986:	9b01      	ldr	r3, [sp, #4]
   18988:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1898c:	682b      	ldr	r3, [r5, #0]
   1898e:	4599      	cmp	r9, r3
   18990:	d1f1      	bne.n	18976 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18992:	f04f 0a00 	mov.w	sl, #0
   18996:	45ca      	cmp	sl, r9
   18998:	da0a      	bge.n	189b0 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   1899a:	45c2      	cmp	sl, r8
   1899c:	d005      	beq.n	189aa <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   1899e:	4653      	mov	r3, sl
   189a0:	465a      	mov	r2, fp
   189a2:	4651      	mov	r1, sl
   189a4:	4628      	mov	r0, r5
   189a6:	f7ff fe38 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   189aa:	f10a 0a01 	add.w	sl, sl, #1
   189ae:	e7f2      	b.n	18996 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   189b0:	4641      	mov	r1, r8
   189b2:	4628      	mov	r0, r5
   189b4:	f7fc ff84 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   189b8:	1836      	adds	r6, r6, r0
   189ba:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   189be:	3401      	adds	r4, #1
   189c0:	e7de      	b.n	18980 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   189c2:	4641      	mov	r1, r8
   189c4:	4658      	mov	r0, fp
   189c6:	f7fc ff7b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   189ca:	17c1      	asrs	r1, r0, #31
   189cc:	42b9      	cmp	r1, r7
   189ce:	bf08      	it	eq
   189d0:	42b0      	cmpeq	r0, r6
   189d2:	d1d0      	bne.n	18976 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   189d4:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   189d6:	2401      	movs	r4, #1
   189d8:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   189da:	4546      	cmp	r6, r8
   189dc:	da0c      	bge.n	189f8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   189de:	4631      	mov	r1, r6
   189e0:	4658      	mov	r0, fp
   189e2:	f7fc ff6d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   189e6:	17c1      	asrs	r1, r0, #31
   189e8:	4361      	muls	r1, r4
   189ea:	fb00 1105 	mla	r1, r0, r5, r1
   189ee:	fba4 4500 	umull	r4, r5, r4, r0
   189f2:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   189f4:	3601      	adds	r6, #1
   189f6:	e7f0      	b.n	189da <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   189f8:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   189fc:	2601      	movs	r6, #1
   189fe:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18a00:	45ca      	cmp	sl, r9
   18a02:	d00d      	beq.n	18a20 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18a04:	4651      	mov	r1, sl
   18a06:	4658      	mov	r0, fp
   18a08:	f7fc ff5a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18a0c:	17c3      	asrs	r3, r0, #31
   18a0e:	4373      	muls	r3, r6
   18a10:	fb00 3307 	mla	r3, r0, r7, r3
   18a14:	fba6 6700 	umull	r6, r7, r6, r0
   18a18:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18a1a:	f10a 0a01 	add.w	sl, sl, #1
   18a1e:	e7ef      	b.n	18a00 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18a20:	f04f 0a00 	mov.w	sl, #0
   18a24:	4650      	mov	r0, sl
   18a26:	17c1      	asrs	r1, r0, #31
   18a28:	45a2      	cmp	sl, r4
   18a2a:	eb71 0305 	sbcs.w	r3, r1, r5
   18a2e:	da21      	bge.n	18a74 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18a30:	f04f 0900 	mov.w	r9, #0
   18a34:	9b00      	ldr	r3, [sp, #0]
   18a36:	4599      	cmp	r9, r3
   18a38:	da19      	bge.n	18a6e <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18a3a:	9b01      	ldr	r3, [sp, #4]
   18a3c:	4641      	mov	r1, r8
   18a3e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18a42:	f7fc ff3d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a46:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18a48:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a4a:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18a4e:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a50:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18a54:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   18a58:	980e      	ldr	r0, [sp, #56]	; 0x38
   18a5a:	9203      	str	r2, [sp, #12]
   18a5c:	f005 fdce 	bl	1e5fc <memcpy>
      output_ptr += copy_size;
   18a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18a62:	9a03      	ldr	r2, [sp, #12]
   18a64:	4413      	add	r3, r2
   18a66:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18a68:	f109 0901 	add.w	r9, r9, #1
   18a6c:	e7e2      	b.n	18a34 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18a6e:	f10a 0a01 	add.w	sl, sl, #1
   18a72:	e7d7      	b.n	18a24 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18a74:	b005      	add	sp, #20
   18a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018a7a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a7c:	b0df      	sub	sp, #380	; 0x17c
   18a7e:	4604      	mov	r4, r0
   18a80:	460e      	mov	r6, r1
   18a82:	ab22      	add	r3, sp, #136	; 0x88
   18a84:	250a      	movs	r5, #10
   18a86:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18a88:	3d01      	subs	r5, #1
   18a8a:	f843 2b18 	str.w	r2, [r3], #24
   18a8e:	d1fb      	bne.n	18a88 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18a90:	f104 0008 	add.w	r0, r4, #8
   18a94:	6831      	ldr	r1, [r6, #0]
   18a96:	aa22      	add	r2, sp, #136	; 0x88
   18a98:	f7ff fec3 	bl	18822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18a9c:	6833      	ldr	r3, [r6, #0]
   18a9e:	aa0e      	add	r2, sp, #56	; 0x38
   18aa0:	6819      	ldr	r1, [r3, #0]
   18aa2:	a822      	add	r0, sp, #136	; 0x88
   18aa4:	f7ff fedf 	bl	18866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18aa8:	6831      	ldr	r1, [r6, #0]
   18aaa:	68a4      	ldr	r4, [r4, #8]
   18aac:	f851 2b04 	ldr.w	r2, [r1], #4
   18ab0:	af18      	add	r7, sp, #96	; 0x60
   18ab2:	42aa      	cmp	r2, r5
   18ab4:	dd09      	ble.n	18aca <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18ab6:	f851 3b04 	ldr.w	r3, [r1], #4
   18aba:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18abe:	bf18      	it	ne
   18ac0:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18ac2:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18ac6:	3501      	adds	r5, #1
   18ac8:	e7f3      	b.n	18ab2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18aca:	6873      	ldr	r3, [r6, #4]
   18acc:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18ace:	6973      	ldr	r3, [r6, #20]
   18ad0:	681b      	ldr	r3, [r3, #0]
   18ad2:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18ad6:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18ad8:	bfbc      	itt	lt
   18ada:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18adc:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18ade:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18ae2:	bfb8      	it	lt
   18ae4:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18ae6:	a808      	add	r0, sp, #32
   18ae8:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18aea:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18aee:	f7fc ff21 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18af2:	b104      	cbz	r4, 18af6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18af4:	6864      	ldr	r4, [r4, #4]
   18af6:	9400      	str	r4, [sp, #0]
   18af8:	ab08      	add	r3, sp, #32
   18afa:	463a      	mov	r2, r7
   18afc:	a90e      	add	r1, sp, #56	; 0x38
   18afe:	a802      	add	r0, sp, #8
   18b00:	f7ff ff2b 	bl	1895a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18b04:	a808      	add	r0, sp, #32
   18b06:	f7fc fed0 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18b0a:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18b0c:	2518      	movs	r5, #24
   18b0e:	ab22      	add	r3, sp, #136	; 0x88
   18b10:	fb05 3004 	mla	r0, r5, r4, r3
   18b14:	f7fc fec9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   18b18:	3c01      	subs	r4, #1
   18b1a:	d2f8      	bcs.n	18b0e <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18b1c:	b05f      	add	sp, #380	; 0x17c
   18b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018b20 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b24:	469b      	mov	fp, r3
  int axis = params.axis;
   18b26:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18b2a:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18b2e:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18b30:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18b32:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18b34:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18b38:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18b3a:	db01      	blt.n	18b40 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18b3c:	f005 fd49 	bl	1e5d2 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18b40:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18b42:	2600      	movs	r6, #0
   18b44:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18b46:	9b00      	ldr	r3, [sp, #0]
   18b48:	429c      	cmp	r4, r3
   18b4a:	da1d      	bge.n	18b88 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18b4c:	9b01      	ldr	r3, [sp, #4]
   18b4e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18b52:	682b      	ldr	r3, [r5, #0]
   18b54:	4599      	cmp	r9, r3
   18b56:	d1f1      	bne.n	18b3c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18b58:	f04f 0a00 	mov.w	sl, #0
   18b5c:	45ca      	cmp	sl, r9
   18b5e:	da0a      	bge.n	18b76 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18b60:	45c2      	cmp	sl, r8
   18b62:	d005      	beq.n	18b70 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18b64:	4653      	mov	r3, sl
   18b66:	465a      	mov	r2, fp
   18b68:	4651      	mov	r1, sl
   18b6a:	4628      	mov	r0, r5
   18b6c:	f7ff fd55 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18b70:	f10a 0a01 	add.w	sl, sl, #1
   18b74:	e7f2      	b.n	18b5c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18b76:	4641      	mov	r1, r8
   18b78:	4628      	mov	r0, r5
   18b7a:	f7fc fea1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18b7e:	1836      	adds	r6, r6, r0
   18b80:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18b84:	3401      	adds	r4, #1
   18b86:	e7de      	b.n	18b46 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18b88:	4641      	mov	r1, r8
   18b8a:	4658      	mov	r0, fp
   18b8c:	f7fc fe98 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18b90:	17c1      	asrs	r1, r0, #31
   18b92:	42b9      	cmp	r1, r7
   18b94:	bf08      	it	eq
   18b96:	42b0      	cmpeq	r0, r6
   18b98:	d1d0      	bne.n	18b3c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18b9a:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18b9c:	2401      	movs	r4, #1
   18b9e:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18ba0:	4546      	cmp	r6, r8
   18ba2:	da0c      	bge.n	18bbe <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18ba4:	4631      	mov	r1, r6
   18ba6:	4658      	mov	r0, fp
   18ba8:	f7fc fe8a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18bac:	17c1      	asrs	r1, r0, #31
   18bae:	4361      	muls	r1, r4
   18bb0:	fb00 1105 	mla	r1, r0, r5, r1
   18bb4:	fba4 4500 	umull	r4, r5, r4, r0
   18bb8:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18bba:	3601      	adds	r6, #1
   18bbc:	e7f0      	b.n	18ba0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18bbe:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18bc2:	2601      	movs	r6, #1
   18bc4:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18bc6:	45ca      	cmp	sl, r9
   18bc8:	d00d      	beq.n	18be6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18bca:	4651      	mov	r1, sl
   18bcc:	4658      	mov	r0, fp
   18bce:	f7fc fe77 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18bd2:	17c3      	asrs	r3, r0, #31
   18bd4:	4373      	muls	r3, r6
   18bd6:	fb00 3307 	mla	r3, r0, r7, r3
   18bda:	fba6 6700 	umull	r6, r7, r6, r0
   18bde:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18be0:	f10a 0a01 	add.w	sl, sl, #1
   18be4:	e7ef      	b.n	18bc6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18be6:	f04f 0a00 	mov.w	sl, #0
   18bea:	4650      	mov	r0, sl
   18bec:	17c1      	asrs	r1, r0, #31
   18bee:	45a2      	cmp	sl, r4
   18bf0:	eb71 0305 	sbcs.w	r3, r1, r5
   18bf4:	da21      	bge.n	18c3a <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18bf6:	f04f 0900 	mov.w	r9, #0
   18bfa:	9b00      	ldr	r3, [sp, #0]
   18bfc:	4599      	cmp	r9, r3
   18bfe:	da19      	bge.n	18c34 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18c00:	9b01      	ldr	r3, [sp, #4]
   18c02:	4641      	mov	r1, r8
   18c04:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18c08:	f7fc fe5a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c0c:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18c0e:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c10:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18c14:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c16:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18c1a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   18c1e:	980e      	ldr	r0, [sp, #56]	; 0x38
   18c20:	9203      	str	r2, [sp, #12]
   18c22:	f005 fceb 	bl	1e5fc <memcpy>
      output_ptr += copy_size;
   18c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c28:	9a03      	ldr	r2, [sp, #12]
   18c2a:	4413      	add	r3, r2
   18c2c:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18c2e:	f109 0901 	add.w	r9, r9, #1
   18c32:	e7e2      	b.n	18bfa <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18c34:	f10a 0a01 	add.w	sl, sl, #1
   18c38:	e7d7      	b.n	18bea <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18c3a:	b005      	add	sp, #20
   18c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018c40 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c42:	b0df      	sub	sp, #380	; 0x17c
   18c44:	4604      	mov	r4, r0
   18c46:	460e      	mov	r6, r1
   18c48:	ab22      	add	r3, sp, #136	; 0x88
   18c4a:	250a      	movs	r5, #10
   18c4c:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18c4e:	3d01      	subs	r5, #1
   18c50:	f843 2b18 	str.w	r2, [r3], #24
   18c54:	d1fb      	bne.n	18c4e <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18c56:	f104 0008 	add.w	r0, r4, #8
   18c5a:	6831      	ldr	r1, [r6, #0]
   18c5c:	aa22      	add	r2, sp, #136	; 0x88
   18c5e:	f7ff fde0 	bl	18822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18c62:	6833      	ldr	r3, [r6, #0]
   18c64:	aa0e      	add	r2, sp, #56	; 0x38
   18c66:	6819      	ldr	r1, [r3, #0]
   18c68:	a822      	add	r0, sp, #136	; 0x88
   18c6a:	f7ff fdfc 	bl	18866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18c6e:	6831      	ldr	r1, [r6, #0]
   18c70:	68a4      	ldr	r4, [r4, #8]
   18c72:	f851 2b04 	ldr.w	r2, [r1], #4
   18c76:	af18      	add	r7, sp, #96	; 0x60
   18c78:	42aa      	cmp	r2, r5
   18c7a:	dd09      	ble.n	18c90 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18c7c:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18c80:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18c84:	bf18      	it	ne
   18c86:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18c88:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18c8c:	3501      	adds	r5, #1
   18c8e:	e7f3      	b.n	18c78 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18c90:	6873      	ldr	r3, [r6, #4]
   18c92:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18c94:	6973      	ldr	r3, [r6, #20]
   18c96:	681b      	ldr	r3, [r3, #0]
   18c98:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18c9c:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18c9e:	bfbc      	itt	lt
   18ca0:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18ca2:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18ca4:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18ca8:	bfb8      	it	lt
   18caa:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cac:	a808      	add	r0, sp, #32
   18cae:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18cb0:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cb4:	f7fc fe3e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18cb8:	b104      	cbz	r4, 18cbc <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18cba:	6864      	ldr	r4, [r4, #4]
   18cbc:	9400      	str	r4, [sp, #0]
   18cbe:	ab08      	add	r3, sp, #32
   18cc0:	463a      	mov	r2, r7
   18cc2:	a90e      	add	r1, sp, #56	; 0x38
   18cc4:	a802      	add	r0, sp, #8
   18cc6:	f7ff ff2b 	bl	18b20 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18cca:	a808      	add	r0, sp, #32
   18ccc:	f7fc fded 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cd0:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18cd2:	2518      	movs	r5, #24
   18cd4:	ab22      	add	r3, sp, #136	; 0x88
   18cd6:	fb05 3004 	mla	r0, r5, r4, r3
   18cda:	f7fc fde6 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   18cde:	3c01      	subs	r4, #1
   18ce0:	d2f8      	bcs.n	18cd4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18ce2:	b05f      	add	sp, #380	; 0x17c
   18ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018ce6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cea:	469b      	mov	fp, r3
  int axis = params.axis;
   18cec:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18cf0:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18cf4:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18cf6:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18cf8:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18cfa:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18cfe:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18d00:	db01      	blt.n	18d06 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18d02:	f005 fc66 	bl	1e5d2 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18d06:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18d08:	2600      	movs	r6, #0
   18d0a:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18d0c:	9b00      	ldr	r3, [sp, #0]
   18d0e:	429c      	cmp	r4, r3
   18d10:	da1d      	bge.n	18d4e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18d12:	9b01      	ldr	r3, [sp, #4]
   18d14:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18d18:	682b      	ldr	r3, [r5, #0]
   18d1a:	4599      	cmp	r9, r3
   18d1c:	d1f1      	bne.n	18d02 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18d1e:	f04f 0a00 	mov.w	sl, #0
   18d22:	45ca      	cmp	sl, r9
   18d24:	da0a      	bge.n	18d3c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18d26:	45c2      	cmp	sl, r8
   18d28:	d005      	beq.n	18d36 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18d2a:	4653      	mov	r3, sl
   18d2c:	465a      	mov	r2, fp
   18d2e:	4651      	mov	r1, sl
   18d30:	4628      	mov	r0, r5
   18d32:	f7ff fc72 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18d36:	f10a 0a01 	add.w	sl, sl, #1
   18d3a:	e7f2      	b.n	18d22 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18d3c:	4641      	mov	r1, r8
   18d3e:	4628      	mov	r0, r5
   18d40:	f7fc fdbe 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d44:	1836      	adds	r6, r6, r0
   18d46:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18d4a:	3401      	adds	r4, #1
   18d4c:	e7de      	b.n	18d0c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18d4e:	4641      	mov	r1, r8
   18d50:	4658      	mov	r0, fp
   18d52:	f7fc fdb5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d56:	17c1      	asrs	r1, r0, #31
   18d58:	42b9      	cmp	r1, r7
   18d5a:	bf08      	it	eq
   18d5c:	42b0      	cmpeq	r0, r6
   18d5e:	d1d0      	bne.n	18d02 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18d60:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18d62:	2401      	movs	r4, #1
   18d64:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18d66:	4546      	cmp	r6, r8
   18d68:	da0c      	bge.n	18d84 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18d6a:	4631      	mov	r1, r6
   18d6c:	4658      	mov	r0, fp
   18d6e:	f7fc fda7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d72:	17c1      	asrs	r1, r0, #31
   18d74:	4361      	muls	r1, r4
   18d76:	fb00 1105 	mla	r1, r0, r5, r1
   18d7a:	fba4 4500 	umull	r4, r5, r4, r0
   18d7e:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18d80:	3601      	adds	r6, #1
   18d82:	e7f0      	b.n	18d66 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18d84:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18d88:	2601      	movs	r6, #1
   18d8a:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18d8c:	45ca      	cmp	sl, r9
   18d8e:	d00d      	beq.n	18dac <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18d90:	4651      	mov	r1, sl
   18d92:	4658      	mov	r0, fp
   18d94:	f7fc fd94 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d98:	17c3      	asrs	r3, r0, #31
   18d9a:	4373      	muls	r3, r6
   18d9c:	fb00 3307 	mla	r3, r0, r7, r3
   18da0:	fba6 6700 	umull	r6, r7, r6, r0
   18da4:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18da6:	f10a 0a01 	add.w	sl, sl, #1
   18daa:	e7ef      	b.n	18d8c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18dac:	f04f 0a00 	mov.w	sl, #0
   18db0:	4650      	mov	r0, sl
   18db2:	17c1      	asrs	r1, r0, #31
   18db4:	45a2      	cmp	sl, r4
   18db6:	eb71 0305 	sbcs.w	r3, r1, r5
   18dba:	da1f      	bge.n	18dfc <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
    for (int i = 0; i < inputs_count; ++i) {
   18dbc:	f04f 0900 	mov.w	r9, #0
   18dc0:	9b00      	ldr	r3, [sp, #0]
   18dc2:	4599      	cmp	r9, r3
   18dc4:	da17      	bge.n	18df6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x110>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18dc6:	9b01      	ldr	r3, [sp, #4]
   18dc8:	4641      	mov	r1, r8
   18dca:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18dce:	f7fc fd77 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18dd2:	9b02      	ldr	r3, [sp, #8]
   18dd4:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18dd8:	fb00 f206 	mul.w	r2, r0, r6
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18ddc:	fb02 110a 	mla	r1, r2, sl, r1
   18de0:	980e      	ldr	r0, [sp, #56]	; 0x38
   18de2:	9203      	str	r2, [sp, #12]
   18de4:	f005 fc0a 	bl	1e5fc <memcpy>
      output_ptr += copy_size;
   18de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18dea:	9a03      	ldr	r2, [sp, #12]
   18dec:	4413      	add	r3, r2
   18dee:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18df0:	f109 0901 	add.w	r9, r9, #1
   18df4:	e7e4      	b.n	18dc0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18df6:	f10a 0a01 	add.w	sl, sl, #1
   18dfa:	e7d9      	b.n	18db0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18dfc:	b005      	add	sp, #20
   18dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018e02 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18e02:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e04:	b0df      	sub	sp, #380	; 0x17c
   18e06:	4604      	mov	r4, r0
   18e08:	460e      	mov	r6, r1
   18e0a:	ab22      	add	r3, sp, #136	; 0x88
   18e0c:	250a      	movs	r5, #10
   18e0e:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18e10:	3d01      	subs	r5, #1
   18e12:	f843 2b18 	str.w	r2, [r3], #24
   18e16:	d1fb      	bne.n	18e10 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18e18:	f104 0008 	add.w	r0, r4, #8
   18e1c:	6831      	ldr	r1, [r6, #0]
   18e1e:	aa22      	add	r2, sp, #136	; 0x88
   18e20:	f7ff fcff 	bl	18822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18e24:	6833      	ldr	r3, [r6, #0]
   18e26:	aa0e      	add	r2, sp, #56	; 0x38
   18e28:	6819      	ldr	r1, [r3, #0]
   18e2a:	a822      	add	r0, sp, #136	; 0x88
   18e2c:	f7ff fd1b 	bl	18866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18e30:	6831      	ldr	r1, [r6, #0]
   18e32:	68a4      	ldr	r4, [r4, #8]
   18e34:	f851 2b04 	ldr.w	r2, [r1], #4
   18e38:	af18      	add	r7, sp, #96	; 0x60
   18e3a:	42aa      	cmp	r2, r5
   18e3c:	dd09      	ble.n	18e52 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18e3e:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e42:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18e46:	bf18      	it	ne
   18e48:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18e4a:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18e4e:	3501      	adds	r5, #1
   18e50:	e7f3      	b.n	18e3a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18e52:	6873      	ldr	r3, [r6, #4]
   18e54:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18e56:	6973      	ldr	r3, [r6, #20]
   18e58:	681b      	ldr	r3, [r3, #0]
   18e5a:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18e5e:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18e60:	bfbc      	itt	lt
   18e62:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18e64:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18e66:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18e6a:	bfb8      	it	lt
   18e6c:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18e6e:	a808      	add	r0, sp, #32
   18e70:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18e72:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18e76:	f7fc fd5d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e7a:	b104      	cbz	r4, 18e7e <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18e7c:	6864      	ldr	r4, [r4, #4]
   18e7e:	9400      	str	r4, [sp, #0]
   18e80:	ab08      	add	r3, sp, #32
   18e82:	463a      	mov	r2, r7
   18e84:	a90e      	add	r1, sp, #56	; 0x38
   18e86:	a802      	add	r0, sp, #8
   18e88:	f7ff ff2d 	bl	18ce6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18e8c:	a808      	add	r0, sp, #32
   18e8e:	f7fc fd0c 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18e92:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18e94:	2518      	movs	r5, #24
   18e96:	ab22      	add	r3, sp, #136	; 0x88
   18e98:	fb05 3004 	mla	r0, r5, r4, r3
   18e9c:	f7fc fd05 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   18ea0:	3c01      	subs	r4, #1
   18ea2:	d2f8      	bcs.n	18e96 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18ea4:	b05f      	add	sp, #380	; 0x17c
   18ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018ea8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eac:	469b      	mov	fp, r3
  int axis = params.axis;
   18eae:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18eb2:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18eb6:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18eb8:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18eba:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18ebc:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18ec0:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18ec2:	db01      	blt.n	18ec8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18ec4:	f005 fb85 	bl	1e5d2 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18ec8:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18eca:	2600      	movs	r6, #0
   18ecc:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18ece:	9b00      	ldr	r3, [sp, #0]
   18ed0:	429c      	cmp	r4, r3
   18ed2:	da1d      	bge.n	18f10 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18ed4:	9b01      	ldr	r3, [sp, #4]
   18ed6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18eda:	682b      	ldr	r3, [r5, #0]
   18edc:	4599      	cmp	r9, r3
   18ede:	d1f1      	bne.n	18ec4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18ee0:	f04f 0a00 	mov.w	sl, #0
   18ee4:	45ca      	cmp	sl, r9
   18ee6:	da0a      	bge.n	18efe <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18ee8:	45c2      	cmp	sl, r8
   18eea:	d005      	beq.n	18ef8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18eec:	4653      	mov	r3, sl
   18eee:	465a      	mov	r2, fp
   18ef0:	4651      	mov	r1, sl
   18ef2:	4628      	mov	r0, r5
   18ef4:	f7ff fb91 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18ef8:	f10a 0a01 	add.w	sl, sl, #1
   18efc:	e7f2      	b.n	18ee4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18efe:	4641      	mov	r1, r8
   18f00:	4628      	mov	r0, r5
   18f02:	f7fc fcdd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f06:	1836      	adds	r6, r6, r0
   18f08:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18f0c:	3401      	adds	r4, #1
   18f0e:	e7de      	b.n	18ece <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18f10:	4641      	mov	r1, r8
   18f12:	4658      	mov	r0, fp
   18f14:	f7fc fcd4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f18:	17c1      	asrs	r1, r0, #31
   18f1a:	42b9      	cmp	r1, r7
   18f1c:	bf08      	it	eq
   18f1e:	42b0      	cmpeq	r0, r6
   18f20:	d1d0      	bne.n	18ec4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18f22:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18f24:	2401      	movs	r4, #1
   18f26:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18f28:	4546      	cmp	r6, r8
   18f2a:	da0c      	bge.n	18f46 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18f2c:	4631      	mov	r1, r6
   18f2e:	4658      	mov	r0, fp
   18f30:	f7fc fcc6 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f34:	17c1      	asrs	r1, r0, #31
   18f36:	4361      	muls	r1, r4
   18f38:	fb00 1105 	mla	r1, r0, r5, r1
   18f3c:	fba4 4500 	umull	r4, r5, r4, r0
   18f40:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18f42:	3601      	adds	r6, #1
   18f44:	e7f0      	b.n	18f28 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f46:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18f4a:	2601      	movs	r6, #1
   18f4c:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f4e:	45ca      	cmp	sl, r9
   18f50:	d00d      	beq.n	18f6e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18f52:	4651      	mov	r1, sl
   18f54:	4658      	mov	r0, fp
   18f56:	f7fc fcb3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f5a:	17c3      	asrs	r3, r0, #31
   18f5c:	4373      	muls	r3, r6
   18f5e:	fb00 3307 	mla	r3, r0, r7, r3
   18f62:	fba6 6700 	umull	r6, r7, r6, r0
   18f66:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f68:	f10a 0a01 	add.w	sl, sl, #1
   18f6c:	e7ef      	b.n	18f4e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18f6e:	f04f 0a00 	mov.w	sl, #0
   18f72:	4650      	mov	r0, sl
   18f74:	17c1      	asrs	r1, r0, #31
   18f76:	45a2      	cmp	sl, r4
   18f78:	eb71 0305 	sbcs.w	r3, r1, r5
   18f7c:	da21      	bge.n	18fc2 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18f7e:	f04f 0900 	mov.w	r9, #0
   18f82:	9b00      	ldr	r3, [sp, #0]
   18f84:	4599      	cmp	r9, r3
   18f86:	da19      	bge.n	18fbc <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18f88:	9b01      	ldr	r3, [sp, #4]
   18f8a:	4641      	mov	r1, r8
   18f8c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18f90:	f7fc fc96 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18f94:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18f96:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18f98:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18f9c:	00c2      	lsls	r2, r0, #3
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18f9e:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18fa2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   18fa6:	980e      	ldr	r0, [sp, #56]	; 0x38
   18fa8:	9203      	str	r2, [sp, #12]
   18faa:	f005 fb27 	bl	1e5fc <memcpy>
      output_ptr += copy_size;
   18fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18fb0:	9a03      	ldr	r2, [sp, #12]
   18fb2:	4413      	add	r3, r2
   18fb4:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18fb6:	f109 0901 	add.w	r9, r9, #1
   18fba:	e7e2      	b.n	18f82 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18fbc:	f10a 0a01 	add.w	sl, sl, #1
   18fc0:	e7d7      	b.n	18f72 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18fc2:	b005      	add	sp, #20
   18fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018fc8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fca:	b0df      	sub	sp, #380	; 0x17c
   18fcc:	4604      	mov	r4, r0
   18fce:	460e      	mov	r6, r1
   18fd0:	ab22      	add	r3, sp, #136	; 0x88
   18fd2:	250a      	movs	r5, #10
   18fd4:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18fd6:	3d01      	subs	r5, #1
   18fd8:	f843 2b18 	str.w	r2, [r3], #24
   18fdc:	d1fb      	bne.n	18fd6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18fde:	f104 0008 	add.w	r0, r4, #8
   18fe2:	6831      	ldr	r1, [r6, #0]
   18fe4:	aa22      	add	r2, sp, #136	; 0x88
   18fe6:	f7ff fc1c 	bl	18822 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18fea:	6833      	ldr	r3, [r6, #0]
   18fec:	aa0e      	add	r2, sp, #56	; 0x38
   18fee:	6819      	ldr	r1, [r3, #0]
   18ff0:	a822      	add	r0, sp, #136	; 0x88
   18ff2:	f7ff fc38 	bl	18866 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18ff6:	6831      	ldr	r1, [r6, #0]
   18ff8:	68a4      	ldr	r4, [r4, #8]
   18ffa:	f851 2b04 	ldr.w	r2, [r1], #4
   18ffe:	af18      	add	r7, sp, #96	; 0x60
   19000:	42aa      	cmp	r2, r5
   19002:	dd09      	ble.n	19018 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   19004:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19008:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   1900c:	bf18      	it	ne
   1900e:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   19010:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   19014:	3501      	adds	r5, #1
   19016:	e7f3      	b.n	19000 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   19018:	6873      	ldr	r3, [r6, #4]
   1901a:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   1901c:	6973      	ldr	r3, [r6, #20]
   1901e:	681b      	ldr	r3, [r3, #0]
   19020:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   19024:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   19026:	bfbc      	itt	lt
   19028:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   1902a:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   1902c:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   19030:	bfb8      	it	lt
   19032:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   19034:	a808      	add	r0, sp, #32
   19036:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   19038:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   1903c:	f7fc fc7a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19040:	b104      	cbz	r4, 19044 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x7c>
   19042:	6864      	ldr	r4, [r4, #4]
   19044:	9400      	str	r4, [sp, #0]
   19046:	ab08      	add	r3, sp, #32
   19048:	463a      	mov	r2, r7
   1904a:	a90e      	add	r1, sp, #56	; 0x38
   1904c:	a802      	add	r0, sp, #8
   1904e:	f7ff ff2b 	bl	18ea8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   19052:	a808      	add	r0, sp, #32
   19054:	f7fc fc29 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   19058:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   1905a:	2518      	movs	r5, #24
   1905c:	ab22      	add	r3, sp, #136	; 0x88
   1905e:	fb05 3004 	mla	r0, r5, r4, r3
   19062:	f7fc fc22 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   19066:	3c01      	subs	r4, #1
   19068:	d2f8      	bcs.n	1905c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   1906a:	b05f      	add	sp, #380	; 0x17c
   1906c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001906e <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1906e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19070:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19072:	b90b      	cbnz	r3, 19078 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0xa>
   19074:	f005 faad 	bl	1e5d2 <abort>
  void* data = nullptr;
   19078:	2400      	movs	r4, #0
   1907a:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1907c:	aa01      	add	r2, sp, #4
   1907e:	2128      	movs	r1, #40	; 0x28
   19080:	4798      	blx	r3
   19082:	2801      	cmp	r0, #1
  return data;
   19084:	bf14      	ite	ne
   19086:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   19088:	4620      	moveq	r0, r4
}
   1908a:	b002      	add	sp, #8
   1908c:	bd10      	pop	{r4, pc}

0001908e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
   1908e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19092:	ed2d 8b02 	vpush	{d8}
   19096:	b0a1      	sub	sp, #132	; 0x84
   19098:	4699      	mov	r9, r3
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
   1909a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   1909e:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   190a0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   190a4:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   190a6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   190aa:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   190ac:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   190b0:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   190b2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   190b6:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   190b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   190bc:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 input_offset = params.input_offset;
   190be:	6943      	ldr	r3, [r0, #20]
   190c0:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
   190c2:	6983      	ldr	r3, [r0, #24]
   190c4:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   190c6:	69c3      	ldr	r3, [r0, #28]
   190c8:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_multiplier = params.output_multiplier;
   190ca:	6a03      	ldr	r3, [r0, #32]
                 uint8* im2col_data, void* cpu_backend_context) {
   190cc:	921f      	str	r2, [sp, #124]	; 0x7c
  const int32 output_multiplier = params.output_multiplier;
   190ce:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   190d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
                 uint8* im2col_data, void* cpu_backend_context) {
   190d4:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
  const int output_shift = params.output_shift;
   190d6:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   190da:	6a83      	ldr	r3, [r0, #40]	; 0x28
   190dc:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   190de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   190e0:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   190e2:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   190e6:	4293      	cmp	r3, r2
                 uint8* im2col_data, void* cpu_backend_context) {
   190e8:	4688      	mov	r8, r1
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   190ea:	dd01      	ble.n	190f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x62>
   190ec:	f005 fa71 	bl	1e5d2 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   190f0:	680b      	ldr	r3, [r1, #0]
   190f2:	2b04      	cmp	r3, #4
   190f4:	d1fa      	bne.n	190ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   190f6:	f8d9 3000 	ldr.w	r3, [r9]
   190fa:	2b04      	cmp	r3, #4
   190fc:	d1f6      	bne.n	190ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   190fe:	6833      	ldr	r3, [r6, #0]
   19100:	2b04      	cmp	r3, #4
   19102:	d1f3      	bne.n	190ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19104:	2300      	movs	r3, #0
   19106:	4619      	mov	r1, r3
   19108:	4632      	mov	r2, r6
   1910a:	4640      	mov	r0, r8
   1910c:	f7ff fa85 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19110:	2303      	movs	r3, #3
   19112:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19114:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19116:	464a      	mov	r2, r9
   19118:	4640      	mov	r0, r8
   1911a:	f7ff fa7e 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1911e:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19120:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19122:	4632      	mov	r2, r6
   19124:	2100      	movs	r1, #0
   19126:	4648      	mov	r0, r9
   19128:	f7ff fa77 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   1912c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1912e:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   19130:	b12b      	cbz	r3, 1913e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19132:	982d      	ldr	r0, [sp, #180]	; 0xb4
   19134:	f7fc fc49 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1913a:	4298      	cmp	r0, r3
   1913c:	d1d6      	bne.n	190ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  }
  const int input_height = input_shape.Dims(1);
   1913e:	2101      	movs	r1, #1
   19140:	4640      	mov	r0, r8
   19142:	f7fc fbbd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19146:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19148:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   1914a:	4640      	mov	r0, r8
   1914c:	f7fc fbb8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19150:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   19152:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   19154:	4648      	mov	r0, r9
   19156:	f7fc fbb3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1915a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1915c:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   1915e:	4648      	mov	r0, r9
   19160:	f7fc fbae 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19164:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19166:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   19168:	4630      	mov	r0, r6
   1916a:	f7fc fba9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1916e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19170:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   19172:	4630      	mov	r0, r6
   19174:	f7fc fba4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   19178:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   1917c:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   1917e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19180:	459b      	cmp	fp, r3
   19182:	f280 8096 	bge.w	192b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x224>
   19186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19188:	425b      	negs	r3, r3
   1918a:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1918c:	2300      	movs	r3, #0
   1918e:	9304      	str	r3, [sp, #16]
   19190:	9b04      	ldr	r3, [sp, #16]
   19192:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   19194:	4293      	cmp	r3, r2
   19196:	f280 8089 	bge.w	192ac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x21e>
   1919a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1919c:	425b      	negs	r3, r3
   1919e:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   191a0:	2300      	movs	r3, #0
   191a2:	9305      	str	r3, [sp, #20]
   191a4:	9b05      	ldr	r3, [sp, #20]
   191a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   191a8:	4293      	cmp	r3, r2
   191aa:	da77      	bge.n	1929c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x20e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   191ac:	2400      	movs	r4, #0
   191ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   191b0:	429c      	cmp	r4, r3
   191b2:	da6b      	bge.n	1928c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1fe>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   191b4:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   191b6:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   191ba:	9506      	str	r5, [sp, #24]
   191bc:	9b06      	ldr	r3, [sp, #24]
   191be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   191c0:	4293      	cmp	r3, r2
   191c2:	da42      	bge.n	1924a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1bc>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   191c4:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   191c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   191c8:	9307      	str	r3, [sp, #28]
   191ca:	9b07      	ldr	r3, [sp, #28]
   191cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   191ce:	4293      	cmp	r3, r2
   191d0:	da35      	bge.n	1923e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1b0>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   191d2:	2300      	movs	r3, #0
   191d4:	9303      	str	r3, [sp, #12]
   191d6:	9b03      	ldr	r3, [sp, #12]
   191d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   191da:	4293      	cmp	r3, r2
   191dc:	da29      	bge.n	19232 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1a4>
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   191de:	2f00      	cmp	r7, #0
   191e0:	db24      	blt.n	1922c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   191e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   191e4:	42bb      	cmp	r3, r7
   191e6:	dd21      	ble.n	1922c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   191e8:	f1ba 0f00 	cmp.w	sl, #0
   191ec:	db1e      	blt.n	1922c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   191ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
   191f0:	4553      	cmp	r3, sl
   191f2:	dd1b      	ble.n	1922c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   191f4:	9b03      	ldr	r3, [sp, #12]
   191f6:	9300      	str	r3, [sp, #0]
   191f8:	4652      	mov	r2, sl
   191fa:	463b      	mov	r3, r7
   191fc:	4659      	mov	r1, fp
   191fe:	4640      	mov	r0, r8
   19200:	f7fc fc20 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19204:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19206:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19208:	9300      	str	r3, [sp, #0]
   1920a:	4621      	mov	r1, r4
   1920c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19210:	4648      	mov	r0, r9
   19212:	f7fc fc17 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   19216:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   19218:	9a15      	ldr	r2, [sp, #84]	; 0x54
                                         filter_x, in_channel)];
   1921a:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   1921c:	9911      	ldr	r1, [sp, #68]	; 0x44
                      (filter_val + filter_offset) * (input_val + input_offset);
   1921e:	4413      	add	r3, r2
                                                      in_x, in_channel)];
   19220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19222:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   19224:	9914      	ldr	r1, [sp, #80]	; 0x50
   19226:	440a      	add	r2, r1
                  acc +=
   19228:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1922c:	9b03      	ldr	r3, [sp, #12]
   1922e:	3301      	adds	r3, #1
   19230:	e7d0      	b.n	191d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x146>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19232:	9b07      	ldr	r3, [sp, #28]
   19234:	3301      	adds	r3, #1
   19236:	9307      	str	r3, [sp, #28]
   19238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1923a:	441f      	add	r7, r3
   1923c:	e7c5      	b.n	191ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x13c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1923e:	9b06      	ldr	r3, [sp, #24]
   19240:	3301      	adds	r3, #1
   19242:	9306      	str	r3, [sp, #24]
   19244:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19246:	449a      	add	sl, r3
   19248:	e7b8      	b.n	191bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x12e>
                }
              }
            }
          }
          if (bias_data) {
   1924a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1924c:	b113      	cbz	r3, 19254 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1c6>
            acc += bias_data[out_channel];
   1924e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19252:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   19254:	ee18 2a90 	vmov	r2, s17
   19258:	ee18 1a10 	vmov	r1, s16
   1925c:	4628      	mov	r0, r5
   1925e:	f7f0 fb0d 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                              output_shift);
          acc += output_offset;
   19262:	9b16      	ldr	r3, [sp, #88]	; 0x58
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19264:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   19266:	18c5      	adds	r5, r0, r3
   19268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1926a:	429d      	cmp	r5, r3
   1926c:	bfb8      	it	lt
   1926e:	461d      	movlt	r5, r3
   19270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19272:	429d      	cmp	r5, r3
   19274:	bfa8      	it	ge
   19276:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19278:	4659      	mov	r1, fp
   1927a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1927e:	4630      	mov	r0, r6
   19280:	f7fc fbe0 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19284:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   19286:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19288:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   1928a:	e790      	b.n	191ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x120>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1928c:	9b05      	ldr	r3, [sp, #20]
   1928e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19290:	3301      	adds	r3, #1
   19292:	9305      	str	r3, [sp, #20]
   19294:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19296:	4413      	add	r3, r2
   19298:	9309      	str	r3, [sp, #36]	; 0x24
   1929a:	e783      	b.n	191a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x116>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1929c:	9b04      	ldr	r3, [sp, #16]
   1929e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   192a0:	3301      	adds	r3, #1
   192a2:	9304      	str	r3, [sp, #16]
   192a4:	9b08      	ldr	r3, [sp, #32]
   192a6:	4413      	add	r3, r2
   192a8:	9308      	str	r3, [sp, #32]
   192aa:	e771      	b.n	19190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x102>
  for (int batch = 0; batch < batches; ++batch) {
   192ac:	f10b 0b01 	add.w	fp, fp, #1
   192b0:	e765      	b.n	1917e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xf0>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   192b2:	b021      	add	sp, #132	; 0x84
   192b4:	ecbd 8b02 	vpop	{d8}
   192b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000192bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   192bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192c0:	b0a1      	sub	sp, #132	; 0x84
   192c2:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   192c4:	6943      	ldr	r3, [r0, #20]
   192c6:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   192c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   192cc:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   192ce:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   192d2:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   192d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   192d8:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   192da:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   192de:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   192e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   192e4:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   192e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   192ea:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 output_offset = params.output_offset;
   192ec:	69c3      	ldr	r3, [r0, #28]
   192ee:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
   192f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   192f2:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   192f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   192f6:	930b      	str	r3, [sp, #44]	; 0x2c
    int8* output_data) {
   192f8:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   192fc:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   19300:	4293      	cmp	r3, r2
    int8* output_data) {
   19302:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   19304:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19306:	dd01      	ble.n	1930c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
   19308:	f005 f963 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1930c:	f8d8 3000 	ldr.w	r3, [r8]
   19310:	2b04      	cmp	r3, #4
   19312:	d1f9      	bne.n	19308 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19314:	6833      	ldr	r3, [r6, #0]
   19316:	2b04      	cmp	r3, #4
   19318:	d1f6      	bne.n	19308 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1931a:	683b      	ldr	r3, [r7, #0]
   1931c:	2b04      	cmp	r3, #4
   1931e:	d1f3      	bne.n	19308 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19320:	2300      	movs	r3, #0
   19322:	4619      	mov	r1, r3
   19324:	463a      	mov	r2, r7
   19326:	4640      	mov	r0, r8
   19328:	f7ff f977 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1932c:	2303      	movs	r3, #3
   1932e:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19330:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19332:	4632      	mov	r2, r6
   19334:	4640      	mov	r0, r8
   19336:	f7ff f970 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1933a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1933c:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1933e:	463a      	mov	r2, r7
   19340:	2100      	movs	r1, #0
   19342:	4630      	mov	r0, r6
   19344:	f7ff f969 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   19348:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1934a:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   1934c:	b12b      	cbz	r3, 1935a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1934e:	982d      	ldr	r0, [sp, #180]	; 0xb4
   19350:	f7fc fb3b 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19356:	4298      	cmp	r0, r3
   19358:	d1d6      	bne.n	19308 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   1935a:	2101      	movs	r1, #1
   1935c:	4640      	mov	r0, r8
   1935e:	f7fc faaf 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19362:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19364:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   19366:	4640      	mov	r0, r8
   19368:	f7fc faaa 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   1936c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1936e:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   19370:	4630      	mov	r0, r6
   19372:	f7fc faa5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   19376:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   19378:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   1937a:	4630      	mov	r0, r6
   1937c:	f7fc faa0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19380:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19382:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   19384:	4638      	mov	r0, r7
   19386:	f7fc fa9b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1938a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1938c:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   1938e:	4638      	mov	r0, r7
   19390:	f7fc fa96 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   19394:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   19398:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   1939a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1939c:	459b      	cmp	fp, r3
   1939e:	f280 8098 	bge.w	194d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x216>
   193a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   193a4:	425b      	negs	r3, r3
   193a6:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   193a8:	2300      	movs	r3, #0
   193aa:	9304      	str	r3, [sp, #16]
   193ac:	9b04      	ldr	r3, [sp, #16]
   193ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   193b0:	4293      	cmp	r3, r2
   193b2:	f280 808b 	bge.w	194cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
   193b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   193b8:	425b      	negs	r3, r3
   193ba:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   193bc:	2300      	movs	r3, #0
   193be:	9305      	str	r3, [sp, #20]
   193c0:	9b05      	ldr	r3, [sp, #20]
   193c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   193c4:	4293      	cmp	r3, r2
   193c6:	da79      	bge.n	194bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   193c8:	2400      	movs	r4, #0
   193ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   193cc:	429c      	cmp	r4, r3
   193ce:	da6d      	bge.n	194ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f0>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   193d0:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   193d2:	f8dd 9020 	ldr.w	r9, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   193d6:	9506      	str	r5, [sp, #24]
   193d8:	9b06      	ldr	r3, [sp, #24]
   193da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   193dc:	4293      	cmp	r3, r2
   193de:	da42      	bge.n	19466 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   193e0:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   193e2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   193e6:	9307      	str	r3, [sp, #28]
   193e8:	9b07      	ldr	r3, [sp, #28]
   193ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   193ec:	4293      	cmp	r3, r2
   193ee:	da34      	bge.n	1945a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   193f0:	2300      	movs	r3, #0
   193f2:	9303      	str	r3, [sp, #12]
   193f4:	9b03      	ldr	r3, [sp, #12]
   193f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   193f8:	4293      	cmp	r3, r2
   193fa:	da28      	bge.n	1944e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   193fc:	f1ba 0f00 	cmp.w	sl, #0
   19400:	db22      	blt.n	19448 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   19402:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19404:	4553      	cmp	r3, sl
   19406:	dd1f      	ble.n	19448 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   19408:	f1b9 0f00 	cmp.w	r9, #0
   1940c:	db1c      	blt.n	19448 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   1940e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19410:	454b      	cmp	r3, r9
   19412:	dd19      	ble.n	19448 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19414:	9b03      	ldr	r3, [sp, #12]
   19416:	9300      	str	r3, [sp, #0]
   19418:	464a      	mov	r2, r9
   1941a:	4653      	mov	r3, sl
   1941c:	4659      	mov	r1, fp
   1941e:	4640      	mov	r0, r8
   19420:	f7fc fb10 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19424:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19426:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19428:	9300      	str	r3, [sp, #0]
   1942a:	4621      	mov	r1, r4
   1942c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19430:	4630      	mov	r0, r6
   19432:	f7fc fb07 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   19436:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19438:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1943a:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   1943c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1943e:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   19440:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19442:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   19444:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   19448:	9b03      	ldr	r3, [sp, #12]
   1944a:	3301      	adds	r3, #1
   1944c:	e7d1      	b.n	193f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1944e:	9b07      	ldr	r3, [sp, #28]
   19450:	3301      	adds	r3, #1
   19452:	9307      	str	r3, [sp, #28]
   19454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19456:	449a      	add	sl, r3
   19458:	e7c6      	b.n	193e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1945a:	9b06      	ldr	r3, [sp, #24]
   1945c:	3301      	adds	r3, #1
   1945e:	9306      	str	r3, [sp, #24]
   19460:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19462:	4499      	add	r9, r3
   19464:	e7b8      	b.n	193d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
                }
              }
            }
          }

          if (bias_data) {
   19466:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   19468:	b113      	cbz	r3, 19470 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
            acc += bias_data[out_channel];
   1946a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1946e:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   19470:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19472:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   19476:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   19478:	4628      	mov	r0, r5
   1947a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1947e:	f7f0 f9fd 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   19482:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19484:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   19486:	18c5      	adds	r5, r0, r3
   19488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1948a:	429d      	cmp	r5, r3
   1948c:	bfb8      	it	lt
   1948e:	461d      	movlt	r5, r3
   19490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19492:	429d      	cmp	r5, r3
   19494:	bfa8      	it	ge
   19496:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19498:	4659      	mov	r1, fp
   1949a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1949e:	4638      	mov	r0, r7
   194a0:	f7fc fad0 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   194a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194a6:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   194a8:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194aa:	e78e      	b.n	193ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   194ac:	9b05      	ldr	r3, [sp, #20]
   194ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   194b0:	3301      	adds	r3, #1
   194b2:	9305      	str	r3, [sp, #20]
   194b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194b6:	4413      	add	r3, r2
   194b8:	9309      	str	r3, [sp, #36]	; 0x24
   194ba:	e781      	b.n	193c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   194bc:	9b04      	ldr	r3, [sp, #16]
   194be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   194c0:	3301      	adds	r3, #1
   194c2:	9304      	str	r3, [sp, #16]
   194c4:	9b08      	ldr	r3, [sp, #32]
   194c6:	4413      	add	r3, r2
   194c8:	9308      	str	r3, [sp, #32]
   194ca:	e76f      	b.n	193ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
   194cc:	f10b 0b01 	add.w	fp, fp, #1
   194d0:	e763      	b.n	1939a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   194d2:	b021      	add	sp, #132	; 0x84
   194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  switch (padding) {
   194d8:	2801      	cmp	r0, #1
   194da:	d003      	beq.n	194e4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   194dc:	2802      	cmp	r0, #2
   194de:	d006      	beq.n	194ee <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   194e0:	2000      	movs	r0, #0
   194e2:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   194e4:	1e58      	subs	r0, r3, #1
   194e6:	4408      	add	r0, r1
      return (image_size + stride - effective_filter_size) / stride;
   194e8:	fb90 f0f3 	sdiv	r0, r0, r3
}
   194ec:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
   194ee:	1e58      	subs	r0, r3, #1
   194f0:	4408      	add	r0, r1
   194f2:	9900      	ldr	r1, [sp, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   194f4:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   194f6:	fb01 0012 	mls	r0, r1, r2, r0
   194fa:	e7f5      	b.n	194e8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

000194fc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   194fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19500:	b0b5      	sub	sp, #212	; 0xd4
   19502:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
  const int32_t input_offset = -input->params.zero_point;
   19506:	f8d8 1010 	ldr.w	r1, [r8, #16]
  op_params.padding_type = RuntimePaddingType(params->padding);
   1950a:	7810      	ldrb	r0, [r2, #0]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1950c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
  const int32_t input_offset = -input->params.zero_point;
   1950e:	f1c1 0c00 	rsb	ip, r1, #0
  const int32_t filter_offset = -filter->params.zero_point;
   19512:	6939      	ldr	r1, [r7, #16]
  const int32_t output_offset = output->params.zero_point;
   19514:	f8d6 e010 	ldr.w	lr, [r6, #16]
  switch (padding) {
   19518:	2801      	cmp	r0, #1
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1951a:	e9dd 4540 	ldrd	r4, r5, [sp, #256]	; 0x100
  const int32_t filter_offset = -filter->params.zero_point;
   1951e:	f1c1 0100 	rsb	r1, r1, #0
  switch (padding) {
   19522:	d002      	beq.n	1952a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e>
      return PaddingType::kNone;
   19524:	2802      	cmp	r0, #2
   19526:	bf18      	it	ne
   19528:	2000      	movne	r0, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   1952a:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   1952e:	6818      	ldr	r0, [r3, #0]
   19530:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   19534:	6858      	ldr	r0, [r3, #4]
   19536:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   1953a:	6850      	ldr	r0, [r2, #4]
   1953c:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   19540:	6890      	ldr	r0, [r2, #8]
   19542:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   19546:	6910      	ldr	r0, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   19548:	6952      	ldr	r2, [r2, #20]
   1954a:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   1954e:	691a      	ldr	r2, [r3, #16]
   19550:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.output_shift = -data.output_shift;
   19552:	695a      	ldr	r2, [r3, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   19554:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
  op_params.output_shift = -data.output_shift;
   19558:	4252      	negs	r2, r2
  op_params.weights_offset = filter_offset;
   1955a:	e9cd c12b 	strd	ip, r1, [sp, #172]	; 0xac
  op_params.output_shift = -data.output_shift;
   1955e:	922f      	str	r2, [sp, #188]	; 0xbc
  reference_ops::Conv(op_params, GetTensorShape(input),
   19560:	4641      	mov	r1, r8
  op_params.quantized_activation_min = data.output_activation_min;
   19562:	6a1a      	ldr	r2, [r3, #32]
  op_params.quantized_activation_max = data.output_activation_max;
   19564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  op_params.output_offset = output_offset;
   19566:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
  reference_ops::Conv(op_params, GetTensorShape(input),
   1956a:	a808      	add	r0, sp, #32
  op_params.quantized_activation_min = data.output_activation_min;
   1956c:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data.output_activation_max;
   1956e:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_ops::Conv(op_params, GetTensorShape(input),
   19570:	f7fc f9e0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   19574:	4639      	mov	r1, r7
   19576:	a80e      	add	r0, sp, #56	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19578:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1957c:	f7fc f9da 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19580:	f8d7 a004 	ldr.w	sl, [r7, #4]
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   19584:	af14      	add	r7, sp, #80	; 0x50
   19586:	4621      	mov	r1, r4
   19588:	4638      	mov	r0, r7
   1958a:	f7fc f9d3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1958e:	b104      	cbz	r4, 19592 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x96>
   19590:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   19592:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   19596:	4631      	mov	r1, r6
   19598:	4640      	mov	r0, r8
   1959a:	f7fc f9cb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1959e:	f8d6 b004 	ldr.w	fp, [r6, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   195a2:	ae20      	add	r6, sp, #128	; 0x80
   195a4:	4629      	mov	r1, r5
   195a6:	4630      	mov	r0, r6
   195a8:	f7fc f9c4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   195ac:	b105      	cbz	r5, 195b0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb4>
   195ae:	686d      	ldr	r5, [r5, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   195b0:	2300      	movs	r3, #0
   195b2:	464a      	mov	r2, r9
   195b4:	a908      	add	r1, sp, #32
   195b6:	e9cd 5306 	strd	r5, r3, [sp, #24]
   195ba:	a826      	add	r0, sp, #152	; 0x98
   195bc:	ab0e      	add	r3, sp, #56	; 0x38
   195be:	e9cd b604 	strd	fp, r6, [sp, #16]
   195c2:	e9cd 4802 	strd	r4, r8, [sp, #8]
   195c6:	e9cd a700 	strd	sl, r7, [sp]
   195ca:	f7ff fd60 	bl	1908e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   195ce:	4630      	mov	r0, r6
   195d0:	f7fc f96b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   195d4:	4640      	mov	r0, r8
   195d6:	f7fc f968 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   195da:	4638      	mov	r0, r7
   195dc:	f7fc f965 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   195e0:	a80e      	add	r0, sp, #56	; 0x38
   195e2:	f7fc f962 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   195e6:	a808      	add	r0, sp, #32
   195e8:	f7fc f95f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   195ec:	b035      	add	sp, #212	; 0xd4
   195ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000195f2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
                             TfLiteTensor* im2col) {
   195f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f6:	b0b1      	sub	sp, #196	; 0xc4
   195f8:	e9dd 643a 	ldrd	r6, r4, [sp, #232]	; 0xe8
   195fc:	e9dd 593c 	ldrd	r5, r9, [sp, #240]	; 0xf0
  op_params.input_offset = -input->params.zero_point;
   19600:	6931      	ldr	r1, [r6, #16]
   19602:	4249      	negs	r1, r1
   19604:	9127      	str	r1, [sp, #156]	; 0x9c
  op_params.output_offset = output->params.zero_point;
   19606:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1960a:	9129      	str	r1, [sp, #164]	; 0xa4
  op_params.stride_height = params->stride_height;
   1960c:	6891      	ldr	r1, [r2, #8]
   1960e:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.stride_width = params->stride_width;
   19612:	6851      	ldr	r1, [r2, #4]
   19614:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.dilation_height_factor = params->dilation_height_factor;
   19618:	6951      	ldr	r1, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   1961a:	6912      	ldr	r2, [r2, #16]
   1961c:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.padding_values.height = data.padding.height;
   19620:	685a      	ldr	r2, [r3, #4]
   19622:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.padding_values.width = data.padding.width;
   19626:	681a      	ldr	r2, [r3, #0]
   19628:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
  op_params.quantized_activation_min = data.output_activation_min;
   1962c:	6a1a      	ldr	r2, [r3, #32]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1962e:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.quantized_activation_min = data.output_activation_min;
   19632:	922c      	str	r2, [sp, #176]	; 0xb0
      data.per_channel_output_shift, GetTensorShape(input),
   19634:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data.output_activation_max;
   19636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19638:	922d      	str	r2, [sp, #180]	; 0xb4
      data.per_channel_output_shift, GetTensorShape(input),
   1963a:	a80a      	add	r0, sp, #40	; 0x28
   1963c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
   19640:	f7fc f978 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19644:	6873      	ldr	r3, [r6, #4]
   19646:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
   19648:	ae10      	add	r6, sp, #64	; 0x40
   1964a:	4621      	mov	r1, r4
   1964c:	4630      	mov	r0, r6
   1964e:	f7fc f971 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19652:	b104      	cbz	r4, 19656 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x64>
   19654:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   19656:	af16      	add	r7, sp, #88	; 0x58
   19658:	4629      	mov	r1, r5
   1965a:	4638      	mov	r0, r7
   1965c:	f7fc f96a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19660:	b105      	cbz	r5, 19664 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x72>
   19662:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   19664:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   19668:	4649      	mov	r1, r9
   1966a:	4640      	mov	r0, r8
   1966c:	f7fc f962 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   19670:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19674:	e9cd 8305 	strd	r8, r3, [sp, #20]
   19678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1967a:	9300      	str	r3, [sp, #0]
   1967c:	465a      	mov	r2, fp
   1967e:	ab0a      	add	r3, sp, #40	; 0x28
   19680:	4651      	mov	r1, sl
   19682:	a822      	add	r0, sp, #136	; 0x88
   19684:	e9cd 7503 	strd	r7, r5, [sp, #12]
   19688:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1968c:	f7ff fe16 	bl	192bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   19690:	4640      	mov	r0, r8
   19692:	f7fc f90a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   19696:	4638      	mov	r0, r7
   19698:	f7fc f907 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   1969c:	4630      	mov	r0, r6
   1969e:	f7fc f904 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
   196a2:	a80a      	add	r0, sp, #40	; 0x28
   196a4:	f7fc f901 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   196a8:	b031      	add	sp, #196	; 0xc4
   196aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000196ae <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   196ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   196b0:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   196b2:	b90b      	cbnz	r3, 196b8 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0xa>
   196b4:	f004 ff8d 	bl	1e5d2 <abort>
  void* data = nullptr;
   196b8:	2400      	movs	r4, #0
   196ba:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   196bc:	aa01      	add	r2, sp, #4
   196be:	2128      	movs	r1, #40	; 0x28
   196c0:	4798      	blx	r3
   196c2:	2801      	cmp	r0, #1
  return data;
   196c4:	bf14      	ite	ne
   196c6:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   196c8:	4620      	moveq	r0, r4
}
   196ca:	b002      	add	sp, #8
   196cc:	bd10      	pop	{r4, pc}

000196ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   196ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196d2:	b0a1      	sub	sp, #132	; 0x84
   196d4:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   196d6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   196da:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   196dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   196e0:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   196e2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   196e6:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   196e8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   196ec:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   196ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   196f2:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   196f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   196f8:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   196fa:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   196fe:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   19700:	6943      	ldr	r3, [r0, #20]
   19702:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   19704:	69c3      	ldr	r3, [r0, #28]
   19706:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   19708:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1970a:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   1970c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1970e:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19710:	f8d9 3000 	ldr.w	r3, [r9]
    int8* output_data) {
   19714:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   19716:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19718:	2b04      	cmp	r3, #4
    int8* output_data) {
   1971a:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1971e:	d001      	beq.n	19724 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   19720:	f004 ff57 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19724:	6833      	ldr	r3, [r6, #0]
   19726:	2b04      	cmp	r3, #4
   19728:	d1fa      	bne.n	19720 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1972a:	683b      	ldr	r3, [r7, #0]
   1972c:	2b04      	cmp	r3, #4
   1972e:	d1f7      	bne.n	19720 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19730:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   19734:	4293      	cmp	r3, r2
   19736:	dcf3      	bgt.n	19720 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19738:	2300      	movs	r3, #0
   1973a:	4619      	mov	r1, r3
   1973c:	463a      	mov	r2, r7
   1973e:	4648      	mov	r0, r9
   19740:	f7fe ff6b 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19744:	2303      	movs	r3, #3
   19746:	4619      	mov	r1, r3
   19748:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1974a:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1974c:	4630      	mov	r0, r6
   1974e:	f7fe ff64 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19752:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19754:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   19756:	4648      	mov	r0, r9
   19758:	f7fc f8b2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1975c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1975e:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   19760:	4648      	mov	r0, r9
   19762:	f7fc f8ad 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   19766:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   19768:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   1976a:	4648      	mov	r0, r9
   1976c:	f7fc f8a8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19770:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   19772:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   19774:	4630      	mov	r0, r6
   19776:	f7fc f8a3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1977a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1977c:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   1977e:	4630      	mov	r0, r6
   19780:	f7fc f89e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19784:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19786:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   19788:	4638      	mov	r0, r7
   1978a:	f7fc f899 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1978e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19790:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   19792:	4638      	mov	r0, r7
   19794:	f7fc f894 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1979a:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
   1979c:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   1979e:	fb03 f502 	mul.w	r5, r3, r2
   197a2:	42a5      	cmp	r5, r4
   197a4:	d1bc      	bne.n	19720 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   197a6:	982d      	ldr	r0, [sp, #180]	; 0xb4
   197a8:	f7fc f90f 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   197ac:	42a8      	cmp	r0, r5
   197ae:	d1b7      	bne.n	19720 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   197b0:	f04f 0b00 	mov.w	fp, #0
   197b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   197b6:	459b      	cmp	fp, r3
   197b8:	f280 80a0 	bge.w	198fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   197bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   197be:	425b      	negs	r3, r3
   197c0:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   197c2:	2300      	movs	r3, #0
   197c4:	9303      	str	r3, [sp, #12]
   197c6:	9b03      	ldr	r3, [sp, #12]
   197c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   197ca:	4293      	cmp	r3, r2
   197cc:	f280 8093 	bge.w	198f6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
   197d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   197d2:	425b      	negs	r3, r3
   197d4:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   197d6:	2300      	movs	r3, #0
   197d8:	9304      	str	r3, [sp, #16]
   197da:	9b04      	ldr	r3, [sp, #16]
   197dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   197de:	4293      	cmp	r3, r2
   197e0:	f280 8081 	bge.w	198e6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
   197e4:	2300      	movs	r3, #0
   197e6:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   197e8:	9305      	str	r3, [sp, #20]
   197ea:	9b05      	ldr	r3, [sp, #20]
   197ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   197ee:	4293      	cmp	r3, r2
   197f0:	da71      	bge.n	198d6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   197f2:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   197f4:	9b02      	ldr	r3, [sp, #8]
   197f6:	9a08      	ldr	r2, [sp, #32]
   197f8:	1ae3      	subs	r3, r4, r3
   197fa:	4293      	cmp	r3, r2
   197fc:	da63      	bge.n	198c6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   197fe:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   19800:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19804:	9506      	str	r5, [sp, #24]
   19806:	9b06      	ldr	r3, [sp, #24]
   19808:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1980a:	4293      	cmp	r3, r2
   1980c:	da38      	bge.n	19880 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1980e:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   19810:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19814:	9307      	str	r3, [sp, #28]
   19816:	9b07      	ldr	r3, [sp, #28]
   19818:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1981a:	4293      	cmp	r3, r2
   1981c:	da2a      	bge.n	19874 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   1981e:	f1b8 0f00 	cmp.w	r8, #0
   19822:	db21      	blt.n	19868 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   19824:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19826:	4543      	cmp	r3, r8
   19828:	dd1e      	ble.n	19868 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   1982a:	f1ba 0f00 	cmp.w	sl, #0
   1982e:	db1b      	blt.n	19868 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   19830:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19832:	4553      	cmp	r3, sl
   19834:	dd18      	ble.n	19868 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19836:	9b05      	ldr	r3, [sp, #20]
   19838:	9300      	str	r3, [sp, #0]
   1983a:	4652      	mov	r2, sl
   1983c:	4643      	mov	r3, r8
   1983e:	4659      	mov	r1, fp
   19840:	4648      	mov	r0, r9
   19842:	f7fc f8ff 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   19846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   1984a:	9012      	str	r0, [sp, #72]	; 0x48
                  int32 filter_val = filter_data[Offset(
   1984c:	9400      	str	r4, [sp, #0]
   1984e:	2100      	movs	r1, #0
   19850:	4630      	mov	r0, r6
   19852:	f7fc f8f7 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   19856:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19858:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1985a:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   1985c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1985e:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   19860:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19862:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   19864:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19868:	9b07      	ldr	r3, [sp, #28]
   1986a:	3301      	adds	r3, #1
   1986c:	9307      	str	r3, [sp, #28]
   1986e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19870:	4498      	add	r8, r3
   19872:	e7d0      	b.n	19816 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19874:	9b06      	ldr	r3, [sp, #24]
   19876:	3301      	adds	r3, #1
   19878:	9306      	str	r3, [sp, #24]
   1987a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1987c:	449a      	add	sl, r3
   1987e:	e7c2      	b.n	19806 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   19880:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   19882:	b113      	cbz	r3, 1988a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   19884:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19888:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   1988a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1988c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   19890:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   19892:	4628      	mov	r0, r5
   19894:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   19898:	f7ef fff0 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
   1989c:	9b16      	ldr	r3, [sp, #88]	; 0x58
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   1989e:	9400      	str	r4, [sp, #0]
            acc += output_offset;
   198a0:	18c5      	adds	r5, r0, r3
   198a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198a4:	429d      	cmp	r5, r3
   198a6:	bfb8      	it	lt
   198a8:	461d      	movlt	r5, r3
   198aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   198ac:	429d      	cmp	r5, r3
   198ae:	bfa8      	it	ge
   198b0:	461d      	movge	r5, r3
            output_data[Offset(output_shape, batch, out_y, out_x,
   198b2:	4659      	mov	r1, fp
   198b4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   198b8:	4638      	mov	r0, r7
   198ba:	f7fc f8c3 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
   198be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   198c0:	3401      	adds	r4, #1
   198c2:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   198c4:	e796      	b.n	197f4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   198c6:	9b05      	ldr	r3, [sp, #20]
   198c8:	9a08      	ldr	r2, [sp, #32]
   198ca:	3301      	adds	r3, #1
   198cc:	9305      	str	r3, [sp, #20]
   198ce:	9b02      	ldr	r3, [sp, #8]
   198d0:	4413      	add	r3, r2
   198d2:	9302      	str	r3, [sp, #8]
   198d4:	e789      	b.n	197ea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   198d6:	9b04      	ldr	r3, [sp, #16]
   198d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   198da:	3301      	adds	r3, #1
   198dc:	9304      	str	r3, [sp, #16]
   198de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   198e0:	4413      	add	r3, r2
   198e2:	9309      	str	r3, [sp, #36]	; 0x24
   198e4:	e779      	b.n	197da <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   198e6:	9b03      	ldr	r3, [sp, #12]
   198e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   198ea:	3301      	adds	r3, #1
   198ec:	9303      	str	r3, [sp, #12]
   198ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   198f0:	4413      	add	r3, r2
   198f2:	930a      	str	r3, [sp, #40]	; 0x28
   198f4:	e767      	b.n	197c6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   198f6:	f10b 0b01 	add.w	fp, fp, #1
   198fa:	e75b      	b.n	197b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   198fc:	b021      	add	sp, #132	; 0x84
   198fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019902 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>:
  static inline void Run(const DepthwiseParams& params,
   19902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19906:	ed2d 8b02 	vpush	{d8}
   1990a:	b0a1      	sub	sp, #132	; 0x84
   1990c:	469a      	mov	sl, r3
    const int stride_width = params.stride_width;
   1990e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   19912:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   19914:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   19918:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   1991a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   1991e:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   19920:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   19924:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   19926:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   1992a:	9313      	str	r3, [sp, #76]	; 0x4c
    const int pad_height = params.padding_values.height;
   1992c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19930:	9314      	str	r3, [sp, #80]	; 0x50
    const int depth_multiplier = params.depth_multiplier;
   19932:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   19936:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   19938:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1993a:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   1993c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1993e:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   19940:	6943      	ldr	r3, [r0, #20]
   19942:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   19944:	6983      	ldr	r3, [r0, #24]
   19946:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   19948:	69c3      	ldr	r3, [r0, #28]
   1994a:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   1994c:	6a03      	ldr	r3, [r0, #32]
  static inline void Run(const DepthwiseParams& params,
   1994e:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
   19950:	921f      	str	r2, [sp, #124]	; 0x7c
    const int32 output_multiplier = params.output_multiplier;
   19952:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   19956:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19958:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1995c:	680b      	ldr	r3, [r1, #0]
   1995e:	2b04      	cmp	r3, #4
  static inline void Run(const DepthwiseParams& params,
   19960:	4689      	mov	r9, r1
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19962:	d001      	beq.n	19968 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x66>
   19964:	f004 fe35 	bl	1e5d2 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19968:	f8da 3000 	ldr.w	r3, [sl]
   1996c:	2b04      	cmp	r3, #4
   1996e:	d1f9      	bne.n	19964 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19970:	6833      	ldr	r3, [r6, #0]
   19972:	2b04      	cmp	r3, #4
   19974:	d1f6      	bne.n	19964 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19976:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   1997a:	4293      	cmp	r3, r2
   1997c:	dcf2      	bgt.n	19964 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1997e:	2300      	movs	r3, #0
   19980:	4619      	mov	r1, r3
   19982:	4632      	mov	r2, r6
   19984:	4648      	mov	r0, r9
   19986:	f7fe fe48 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1998a:	2303      	movs	r3, #3
   1998c:	4619      	mov	r1, r3
   1998e:	4632      	mov	r2, r6
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19990:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19992:	4650      	mov	r0, sl
   19994:	f7fe fe41 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   19998:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1999a:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   1999c:	4648      	mov	r0, r9
   1999e:	f7fb ff8f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   199a2:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   199a4:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   199a6:	4648      	mov	r0, r9
   199a8:	f7fb ff8a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   199ac:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   199ae:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   199b0:	4648      	mov	r0, r9
   199b2:	f7fb ff85 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   199b6:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   199b8:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   199ba:	4650      	mov	r0, sl
   199bc:	f7fb ff80 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   199c0:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   199c2:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   199c4:	4650      	mov	r0, sl
   199c6:	f7fb ff7b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   199ca:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   199cc:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   199ce:	4630      	mov	r0, r6
   199d0:	f7fb ff76 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   199d4:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   199d6:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   199d8:	4630      	mov	r0, r6
   199da:	f7fb ff71 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   199de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   199e0:	9a08      	ldr	r2, [sp, #32]
    const int output_width = output_shape.Dims(2);
   199e2:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   199e4:	fb03 f502 	mul.w	r5, r3, r2
   199e8:	42a5      	cmp	r5, r4
   199ea:	d1bb      	bne.n	19964 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   199ec:	982d      	ldr	r0, [sp, #180]	; 0xb4
   199ee:	f7fb ffec 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   199f2:	42a8      	cmp	r0, r5
   199f4:	d1b6      	bne.n	19964 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    for (int b = 0; b < batches; ++b) {
   199f6:	f04f 0b00 	mov.w	fp, #0
   199fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   199fc:	459b      	cmp	fp, r3
   199fe:	f280 809d 	bge.w	19b3c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x23a>
   19a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19a04:	425b      	negs	r3, r3
   19a06:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_y = 0; out_y < output_height; ++out_y) {
   19a08:	2300      	movs	r3, #0
   19a0a:	9303      	str	r3, [sp, #12]
   19a0c:	9b03      	ldr	r3, [sp, #12]
   19a0e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   19a10:	4293      	cmp	r3, r2
   19a12:	f280 8090 	bge.w	19b36 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x234>
   19a16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19a18:	425b      	negs	r3, r3
   19a1a:	9309      	str	r3, [sp, #36]	; 0x24
        for (int out_x = 0; out_x < output_width; ++out_x) {
   19a1c:	2300      	movs	r3, #0
   19a1e:	9304      	str	r3, [sp, #16]
   19a20:	9b04      	ldr	r3, [sp, #16]
   19a22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   19a24:	4293      	cmp	r3, r2
   19a26:	da7e      	bge.n	19b26 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x224>
   19a28:	2300      	movs	r3, #0
   19a2a:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   19a2c:	9305      	str	r3, [sp, #20]
   19a2e:	9b05      	ldr	r3, [sp, #20]
   19a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19a32:	4293      	cmp	r3, r2
   19a34:	da6f      	bge.n	19b16 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x214>
   19a36:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   19a38:	9b02      	ldr	r3, [sp, #8]
   19a3a:	9a08      	ldr	r2, [sp, #32]
   19a3c:	1ae3      	subs	r3, r4, r3
   19a3e:	429a      	cmp	r2, r3
   19a40:	dd61      	ble.n	19b06 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x204>
              int32 acc = 0;
   19a42:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   19a44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19a46:	9506      	str	r5, [sp, #24]
   19a48:	9b06      	ldr	r3, [sp, #24]
   19a4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   19a4c:	4293      	cmp	r3, r2
   19a4e:	da39      	bge.n	19ac4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19a50:	2300      	movs	r3, #0
                  const int in_y =
   19a52:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19a56:	9307      	str	r3, [sp, #28]
   19a58:	9b07      	ldr	r3, [sp, #28]
   19a5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   19a5c:	4293      	cmp	r3, r2
   19a5e:	da2b      	bge.n	19ab8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1b6>
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19a60:	f1b8 0f00 	cmp.w	r8, #0
   19a64:	db22      	blt.n	19aac <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19a68:	4543      	cmp	r3, r8
   19a6a:	dd1f      	ble.n	19aac <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a6c:	2f00      	cmp	r7, #0
   19a6e:	db1d      	blt.n	19aac <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19a72:	42bb      	cmp	r3, r7
   19a74:	dd1a      	ble.n	19aac <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19a76:	9b05      	ldr	r3, [sp, #20]
   19a78:	9300      	str	r3, [sp, #0]
   19a7a:	463a      	mov	r2, r7
   19a7c:	4643      	mov	r3, r8
   19a7e:	4659      	mov	r1, fp
   19a80:	4648      	mov	r0, r9
   19a82:	f7fb ffdf 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   19a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19a8a:	9012      	str	r0, [sp, #72]	; 0x48
                    int32 filter_val = filter_data[Offset(
   19a8c:	2100      	movs	r1, #0
   19a8e:	9400      	str	r4, [sp, #0]
   19a90:	4650      	mov	r0, sl
   19a92:	f7fb ffd7 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19a96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                    acc += (filter_val + filter_offset) *
   19a98:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   19a9a:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   19a9c:	9912      	ldr	r1, [sp, #72]	; 0x48
                    acc += (filter_val + filter_offset) *
   19a9e:	4413      	add	r3, r2
                    int32 input_val =
   19aa0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19aa2:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   19aa4:	9915      	ldr	r1, [sp, #84]	; 0x54
   19aa6:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   19aa8:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19aac:	9b07      	ldr	r3, [sp, #28]
   19aae:	3301      	adds	r3, #1
   19ab0:	9307      	str	r3, [sp, #28]
   19ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19ab4:	4498      	add	r8, r3
   19ab6:	e7cf      	b.n	19a58 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19ab8:	9b06      	ldr	r3, [sp, #24]
   19aba:	3301      	adds	r3, #1
   19abc:	9306      	str	r3, [sp, #24]
   19abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19ac0:	441f      	add	r7, r3
   19ac2:	e7c1      	b.n	19a48 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x146>
              if (bias_data) {
   19ac4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   19ac6:	b113      	cbz	r3, 19ace <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1cc>
                acc += bias_data[oc];
   19ac8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19acc:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   19ace:	ee18 2a90 	vmov	r2, s17
   19ad2:	ee18 1a10 	vmov	r1, s16
   19ad6:	4628      	mov	r0, r5
   19ad8:	f7ef fed0 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc += output_offset;
   19adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19ade:	9400      	str	r4, [sp, #0]
              acc += output_offset;
   19ae0:	181d      	adds	r5, r3, r0
   19ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19ae4:	429d      	cmp	r5, r3
   19ae6:	bfb8      	it	lt
   19ae8:	461d      	movlt	r5, r3
   19aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19aec:	429d      	cmp	r5, r3
   19aee:	bfa8      	it	ge
   19af0:	461d      	movge	r5, r3
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19af2:	4659      	mov	r1, fp
   19af4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   19af8:	4630      	mov	r0, r6
   19afa:	f7fb ffa3 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19afe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   19b00:	3401      	adds	r4, #1
   19b02:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   19b04:	e798      	b.n	19a38 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   19b06:	9b05      	ldr	r3, [sp, #20]
   19b08:	9a08      	ldr	r2, [sp, #32]
   19b0a:	3301      	adds	r3, #1
   19b0c:	9305      	str	r3, [sp, #20]
   19b0e:	9b02      	ldr	r3, [sp, #8]
   19b10:	4413      	add	r3, r2
   19b12:	9302      	str	r3, [sp, #8]
   19b14:	e78b      	b.n	19a2e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   19b16:	9b04      	ldr	r3, [sp, #16]
   19b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b1a:	3301      	adds	r3, #1
   19b1c:	9304      	str	r3, [sp, #16]
   19b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19b20:	4413      	add	r3, r2
   19b22:	9309      	str	r3, [sp, #36]	; 0x24
   19b24:	e77c      	b.n	19a20 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   19b26:	9b03      	ldr	r3, [sp, #12]
   19b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19b2a:	3301      	adds	r3, #1
   19b2c:	9303      	str	r3, [sp, #12]
   19b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b30:	4413      	add	r3, r2
   19b32:	930a      	str	r3, [sp, #40]	; 0x28
   19b34:	e76a      	b.n	19a0c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   19b36:	f10b 0b01 	add.w	fp, fp, #1
   19b3a:	e75e      	b.n	199fa <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0xf8>
  }
   19b3c:	b021      	add	sp, #132	; 0x84
   19b3e:	ecbd 8b02 	vpop	{d8}
   19b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019b46 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b46:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19b48:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b4a:	b90b      	cbnz	r3, 19b50 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xa>
   19b4c:	f004 fd41 	bl	1e5d2 <abort>
  void* data = nullptr;
   19b50:	2400      	movs	r4, #0
   19b52:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   19b54:	aa01      	add	r2, sp, #4
   19b56:	2108      	movs	r1, #8
   19b58:	4798      	blx	r3
   19b5a:	2801      	cmp	r0, #1
  return data;
   19b5c:	bf14      	ite	ne
   19b5e:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   19b60:	4620      	moveq	r0, r4
}
   19b62:	b002      	add	sp, #8
   19b64:	bd10      	pop	{r4, pc}

00019b66 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   19b66:	eeb0 0ac0 	vabs.f32	s0, s0
   19b6a:	4770      	bx	lr

00019b6c <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   19b6c:	ee20 0a00 	vmul.f32	s0, s0, s0
   19b70:	4770      	bx	lr

00019b72 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   19b72:	f7f0 bf87 	b.w	aa84 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

00019b76 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   19b76:	f7f8 bb3d 	b.w	121f4 <sinf>

00019b7a <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   19b7a:	f7f8 ba87 	b.w	1208c <cosf>

00019b7e <_ZSt3logf>:
  { return __builtin_logf(__x); }
   19b7e:	f7f8 bc65 	b.w	1244c <logf>

00019b82 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   19b82:	eeb1 0ac0 	vsqrt.f32	s0, s0
   19b86:	4770      	bx	lr

00019b88 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
   19b88:	eef1 7ac0 	vsqrt.f32	s15, s0
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   19b8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19b90:	ee80 0a27 	vdiv.f32	s0, s0, s15
   19b94:	4770      	bx	lr

00019b96 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>:
TfLiteRegistration* Register_ETHOSU() { return nullptr; }
   19b96:	2000      	movs	r0, #0
   19b98:	4770      	bx	lr

00019b9a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19b9c:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b9e:	b90b      	cbnz	r3, 19ba4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0xa>
   19ba0:	f004 fd17 	bl	1e5d2 <abort>
  void* data = nullptr;
   19ba4:	2400      	movs	r4, #0
   19ba6:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   19ba8:	aa01      	add	r2, sp, #4
   19baa:	2114      	movs	r1, #20
   19bac:	4798      	blx	r3
   19bae:	2801      	cmp	r0, #1
  return data;
   19bb0:	bf14      	ite	ne
   19bb2:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   19bb4:	4620      	moveq	r0, r4
}
   19bb6:	b002      	add	sp, #8
   19bb8:	bd10      	pop	{r4, pc}

00019bba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19bba:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   19bbc:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   19bbe:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19bc0:	db01      	blt.n	19bc6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   19bc2:	42a1      	cmp	r1, r4
   19bc4:	db01      	blt.n	19bca <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   19bc6:	f004 fd04 	bl	1e5d2 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   19bca:	2c05      	cmp	r4, #5
   19bcc:	bfcc      	ite	gt
   19bce:	6843      	ldrgt	r3, [r0, #4]
   19bd0:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   19bd2:	2200      	movs	r2, #0
  int flat_size = 1;
   19bd4:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19bd6:	4291      	cmp	r1, r2
   19bd8:	bf18      	it	ne
   19bda:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   19bde:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19be2:	bf08      	it	eq
   19be4:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   19be6:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19be8:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   19bec:	dbf3      	blt.n	19bd6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   19bee:	bd38      	pop	{r3, r4, r5, pc}

00019bf0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
    uint8* output_data) {
   19bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bf4:	ed2d 8b02 	vpush	{d8}
   19bf8:	b089      	sub	sp, #36	; 0x24
   19bfa:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   19bfc:	6803      	ldr	r3, [r0, #0]
   19bfe:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   19c00:	6843      	ldr	r3, [r0, #4]
   19c02:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   19c04:	6883      	ldr	r3, [r0, #8]
   19c06:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   19c08:	68c3      	ldr	r3, [r0, #12]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c0a:	682e      	ldr	r6, [r5, #0]
    uint8* output_data) {
   19c0c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const int32 output_multiplier = params.output_multiplier;
   19c0e:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   19c12:	6903      	ldr	r3, [r0, #16]
   19c14:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   19c18:	6943      	ldr	r3, [r0, #20]
   19c1a:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c1c:	2e01      	cmp	r6, #1
  const int32 output_activation_max = params.quantized_activation_max;
   19c1e:	6983      	ldr	r3, [r0, #24]
   19c20:	9301      	str	r3, [sp, #4]
    uint8* output_data) {
   19c22:	4614      	mov	r4, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c24:	dc01      	bgt.n	19c2a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x3a>
   19c26:	f004 fcd4 	bl	1e5d2 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   19c2a:	683b      	ldr	r3, [r7, #0]
   19c2c:	2b00      	cmp	r3, #0
   19c2e:	ddfa      	ble.n	19c26 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19c30:	e9dd 2100 	ldrd	r2, r1, [sp]
   19c34:	428a      	cmp	r2, r1
   19c36:	dcf6      	bgt.n	19c26 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   19c38:	3b01      	subs	r3, #1
   19c3a:	4619      	mov	r1, r3
   19c3c:	4638      	mov	r0, r7
   19c3e:	9302      	str	r3, [sp, #8]
   19c40:	f7ff ffbb 	bl	19bba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c44:	463a      	mov	r2, r7
   19c46:	1eb1      	subs	r1, r6, #2
   19c48:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   19c4a:	9006      	str	r0, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c4c:	4628      	mov	r0, r5
   19c4e:	f7fe fce4 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19c52:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c54:	4607      	mov	r7, r0
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19c56:	4628      	mov	r0, r5
   19c58:	f7fb fe32 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   19c5c:	2600      	movs	r6, #0
   19c5e:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   19c60:	46b2      	mov	sl, r6
   19c62:	9b06      	ldr	r3, [sp, #24]
   19c64:	459a      	cmp	sl, r3
   19c66:	da41      	bge.n	19cec <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xfc>
   19c68:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19c6a:	f04f 0800 	mov.w	r8, #0
   19c6e:	eb03 0b06 	add.w	fp, r3, r6
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19c72:	46c1      	mov	r9, r8
   19c74:	45b9      	cmp	r9, r7
   19c76:	da34      	bge.n	19ce2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xf2>
      for (int d = 0; d < accum_depth; ++d) {
   19c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19c7a:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   19c7e:	2300      	movs	r3, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19c80:	46a6      	mov	lr, r4
      for (int d = 0; d < accum_depth; ++d) {
   19c82:	461a      	mov	r2, r3
   19c84:	42aa      	cmp	r2, r5
   19c86:	da10      	bge.n	19caa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xba>
        int32 input_val = input_data[b * accum_depth + d];
   19c88:	f81e 1b01 	ldrb.w	r1, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19c8c:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   19c8e:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   19c90:	f81c 1b01 	ldrb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19c94:	4401      	add	r1, r0
   19c96:	9107      	str	r1, [sp, #28]
   19c98:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   19c9c:	4401      	add	r1, r0
   19c9e:	4608      	mov	r0, r1
   19ca0:	9907      	ldr	r1, [sp, #28]
      for (int d = 0; d < accum_depth; ++d) {
   19ca2:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19ca4:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   19ca8:	e7ec      	b.n	19c84 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x94>
      if (bias_data) {
   19caa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19cac:	b112      	cbz	r2, 19cb4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xc4>
        acc += bias_data[out_c];
   19cae:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   19cb2:	4413      	add	r3, r2
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   19cb4:	4618      	mov	r0, r3
   19cb6:	ee18 2a90 	vmov	r2, s17
   19cba:	ee18 1a10 	vmov	r1, s16
   19cbe:	f7ef fddd 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   19cc2:	9b05      	ldr	r3, [sp, #20]
   19cc4:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   19cc6:	9b00      	ldr	r3, [sp, #0]
   19cc8:	4298      	cmp	r0, r3
   19cca:	bfb8      	it	lt
   19ccc:	4618      	movlt	r0, r3
   19cce:	9b01      	ldr	r3, [sp, #4]
   19cd0:	4298      	cmp	r0, r3
   19cd2:	bfa8      	it	ge
   19cd4:	4618      	movge	r0, r3
   19cd6:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19cda:	f109 0901 	add.w	r9, r9, #1
   19cde:	44a8      	add	r8, r5
   19ce0:	e7c8      	b.n	19c74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x84>
  for (int b = 0; b < batches; ++b) {
   19ce2:	f10a 0a01 	add.w	sl, sl, #1
   19ce6:	443e      	add	r6, r7
   19ce8:	442c      	add	r4, r5
   19cea:	e7ba      	b.n	19c62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x72>
}
   19cec:	b009      	add	sp, #36	; 0x24
   19cee:	ecbd 8b02 	vpop	{d8}
   19cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019cf6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   19cf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cfa:	ed2d 8b02 	vpush	{d8}
   19cfe:	b089      	sub	sp, #36	; 0x24
   19d00:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   19d02:	6803      	ldr	r3, [r0, #0]
   19d04:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   19d06:	6843      	ldr	r3, [r0, #4]
   19d08:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   19d0a:	6883      	ldr	r3, [r0, #8]
   19d0c:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   19d0e:	68c3      	ldr	r3, [r0, #12]
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d10:	682f      	ldr	r7, [r5, #0]
    int8_t* output_data) {
   19d12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  const int32 output_multiplier = params.output_multiplier;
   19d14:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   19d18:	6903      	ldr	r3, [r0, #16]
   19d1a:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   19d1e:	6943      	ldr	r3, [r0, #20]
   19d20:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d22:	2f01      	cmp	r7, #1
  const int32 output_activation_max = params.quantized_activation_max;
   19d24:	6983      	ldr	r3, [r0, #24]
   19d26:	9301      	str	r3, [sp, #4]
    int8_t* output_data) {
   19d28:	4614      	mov	r4, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d2a:	dc01      	bgt.n	19d30 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x3a>
   19d2c:	f004 fc51 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   19d30:	6833      	ldr	r3, [r6, #0]
   19d32:	2b02      	cmp	r3, #2
   19d34:	d1fa      	bne.n	19d2c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19d36:	e9dd 3200 	ldrd	r3, r2, [sp]
   19d3a:	4293      	cmp	r3, r2
   19d3c:	dcf6      	bgt.n	19d2c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   19d3e:	2100      	movs	r1, #0
   19d40:	4630      	mov	r0, r6
   19d42:	f7fb fdbd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   19d46:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   19d48:	9006      	str	r0, [sp, #24]
  const int output_depth = output_shape.Dims(1);
   19d4a:	4630      	mov	r0, r6
   19d4c:	f7fb fdb8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   19d50:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
   19d52:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   19d54:	4628      	mov	r0, r5
   19d56:	f7fb fdb3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   19d5a:	42b0      	cmp	r0, r6
   19d5c:	dbe6      	blt.n	19d2c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19d5e:	1e79      	subs	r1, r7, #1
   19d60:	4628      	mov	r0, r5
   19d62:	f7fb fdad 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   19d66:	2700      	movs	r7, #0
   19d68:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   19d6a:	46ba      	mov	sl, r7
   19d6c:	9b06      	ldr	r3, [sp, #24]
   19d6e:	459a      	cmp	sl, r3
   19d70:	da41      	bge.n	19df6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x100>
   19d72:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19d74:	f04f 0800 	mov.w	r8, #0
   19d78:	eb03 0b07 	add.w	fp, r3, r7
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19d7c:	46c1      	mov	r9, r8
   19d7e:	45b1      	cmp	r9, r6
   19d80:	da34      	bge.n	19dec <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf6>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   19d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19d84:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   19d88:	2300      	movs	r3, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19d8a:	46a6      	mov	lr, r4
      for (int d = 0; d < accum_depth; ++d) {
   19d8c:	461a      	mov	r2, r3
   19d8e:	42aa      	cmp	r2, r5
   19d90:	da10      	bge.n	19db4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xbe>
        int32 input_val = input_data[b * accum_depth + d];
   19d92:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19d96:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   19d98:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   19d9a:	f91c 1b01 	ldrsb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19d9e:	4401      	add	r1, r0
   19da0:	9107      	str	r1, [sp, #28]
   19da2:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   19da6:	4401      	add	r1, r0
   19da8:	4608      	mov	r0, r1
   19daa:	9907      	ldr	r1, [sp, #28]
      for (int d = 0; d < accum_depth; ++d) {
   19dac:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19dae:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   19db2:	e7ec      	b.n	19d8e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x98>
      }
      if (bias_data) {
   19db4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19db6:	b112      	cbz	r2, 19dbe <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xc8>
        acc += bias_data[out_c];
   19db8:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   19dbc:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   19dbe:	4618      	mov	r0, r3
   19dc0:	ee18 2a90 	vmov	r2, s17
   19dc4:	ee18 1a10 	vmov	r1, s16
   19dc8:	f7ef fd58 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   19dcc:	9b05      	ldr	r3, [sp, #20]
   19dce:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   19dd0:	9b00      	ldr	r3, [sp, #0]
   19dd2:	4298      	cmp	r0, r3
   19dd4:	bfb8      	it	lt
   19dd6:	4618      	movlt	r0, r3
   19dd8:	9b01      	ldr	r3, [sp, #4]
   19dda:	4298      	cmp	r0, r3
   19ddc:	bfa8      	it	ge
   19dde:	4618      	movge	r0, r3
   19de0:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19de4:	f109 0901 	add.w	r9, r9, #1
   19de8:	44a8      	add	r8, r5
   19dea:	e7c8      	b.n	19d7e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x88>
  for (int b = 0; b < batches; ++b) {
   19dec:	f10a 0a01 	add.w	sl, sl, #1
   19df0:	4437      	add	r7, r6
   19df2:	442c      	add	r4, r5
   19df4:	e7ba      	b.n	19d6c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x76>
    }
  }
}
   19df6:	b009      	add	sp, #36	; 0x24
   19df8:	ecbd 8b02 	vpop	{d8}
   19dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019e00 <_ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   19e00:	2000      	movs	r0, #0
   19e02:	4770      	bx	lr

00019e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   19e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const int dims_count = shape.DimensionsCount();
   19e08:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   19e0a:	4604      	mov	r4, r0
   19e0c:	460d      	mov	r5, r1
   19e0e:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   19e10:	2600      	movs	r6, #0
   19e12:	42be      	cmp	r6, r7
   19e14:	da10      	bge.n	19e38 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   19e16:	42ae      	cmp	r6, r5
   19e18:	d00c      	beq.n	19e34 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   19e1a:	4631      	mov	r1, r6
   19e1c:	4620      	mov	r0, r4
   19e1e:	f7fb fd4f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   19e22:	4631      	mov	r1, r6
   19e24:	4681      	mov	r9, r0
   19e26:	4640      	mov	r0, r8
   19e28:	f7fb fd4a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   19e2c:	4581      	cmp	r9, r0
   19e2e:	d001      	beq.n	19e34 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   19e30:	f004 fbcf 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   19e34:	3601      	adds	r6, #1
   19e36:	e7ec      	b.n	19e12 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19e38:	2d00      	cmp	r5, #0
   19e3a:	dbf9      	blt.n	19e30 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   19e3c:	42bd      	cmp	r5, r7
   19e3e:	daf7      	bge.n	19e30 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   19e40:	2f05      	cmp	r7, #5
   19e42:	bfcc      	ite	gt
   19e44:	6864      	ldrgt	r4, [r4, #4]
   19e46:	3404      	addle	r4, #4
  int flat_size = 1;
   19e48:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   19e4a:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e4c:	429d      	cmp	r5, r3
   19e4e:	bf18      	it	ne
   19e50:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   19e54:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e58:	bf08      	it	eq
   19e5a:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   19e5c:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e5e:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   19e62:	dcf3      	bgt.n	19e4c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   19e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019e68 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const uint8* input_data,
                            const RuntimeShape& output_shape,
                            uint8* output_data) {
   19e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e6c:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   19e6e:	6809      	ldr	r1, [r1, #0]
   19e70:	3901      	subs	r1, #1
                            uint8* output_data) {
   19e72:	b087      	sub	sp, #28
   19e74:	4606      	mov	r6, r0
   19e76:	4617      	mov	r7, r2
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19e78:	4620      	mov	r0, r4
                            uint8* output_data) {
   19e7a:	461a      	mov	r2, r3
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19e7c:	460b      	mov	r3, r1
   19e7e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   19e82:	f7fe fbca 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19e86:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19e8a:	4605      	mov	r5, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19e8c:	4620      	mov	r0, r4
   19e8e:	f7ff ffb9 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int32 input_zero_point = op_params.input_zero_point;
   19e92:	2400      	movs	r4, #0
   19e94:	f8d6 b000 	ldr.w	fp, [r6]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19e98:	9001      	str	r0, [sp, #4]

  for (int i = 0; i < outer_size; ++i) {
   19e9a:	4626      	mov	r6, r4
   19e9c:	9b01      	ldr	r3, [sp, #4]
   19e9e:	429e      	cmp	r6, r3
   19ea0:	da3d      	bge.n	19f1e <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
   19ea2:	eb07 0904 	add.w	r9, r7, r4
    int32 square_l2_norm = 0;
    for (int c = 0; c < depth; c++) {
   19ea6:	2300      	movs	r3, #0
  for (int i = 0; i < outer_size; ++i) {
   19ea8:	4649      	mov	r1, r9
    int32 square_l2_norm = 0;
   19eaa:	4618      	mov	r0, r3
    for (int c = 0; c < depth; c++) {
   19eac:	42ab      	cmp	r3, r5
   19eae:	da07      	bge.n	19ec0 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x58>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   19eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
   19eb4:	eba2 020b 	sub.w	r2, r2, fp
      square_l2_norm += diff * diff;
   19eb8:	fb02 0002 	mla	r0, r2, r2, r0
    for (int c = 0; c < depth; c++) {
   19ebc:	3301      	adds	r3, #1
   19ebe:	e7f5      	b.n	19eac <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x44>
    }
    int32 inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
   19ec0:	ab05      	add	r3, sp, #20
   19ec2:	aa04      	add	r2, sp, #16
   19ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19ec8:	f7f1 fab8 	bl	b43c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
  return RoundingDivideByPOT(
   19ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19ed0:	f1c3 0a00 	rsb	sl, r3, #0
   19ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
                                     &inv_l2norm_multiplier, &inv_l2norm_shift);
    for (int c = 0; c < depth; c++) {
   19ed6:	f04f 0800 	mov.w	r8, #0
   19eda:	4423      	add	r3, r4
   19edc:	45a8      	cmp	r8, r5
   19ede:	9303      	str	r3, [sp, #12]
   19ee0:	da1a      	bge.n	19f18 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   19ee2:	f819 0b01 	ldrb.w	r0, [r9], #1
   19ee6:	9202      	str	r2, [sp, #8]
   19ee8:	eba0 000b 	sub.w	r0, r0, fp
   19eec:	4611      	mov	r1, r2
   19eee:	01c0      	lsls	r0, r0, #7
   19ef0:	f7f1 fa50 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   19ef4:	4651      	mov	r1, sl
   19ef6:	f7f1 fa7b 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      int32 rescaled_diff = MultiplyByQuantizedMultiplierSmallerThanOneExp(
          128 * diff, inv_l2norm_multiplier, inv_l2norm_shift);
      int32 unclamped_output_val = 128 + rescaled_diff;
   19efa:	3080      	adds	r0, #128	; 0x80
      if (__a < __b)
   19efc:	2800      	cmp	r0, #0
   19efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19f02:	dd07      	ble.n	19f14 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
      return __a;
   19f04:	28ff      	cmp	r0, #255	; 0xff
   19f06:	bfa8      	it	ge
   19f08:	20ff      	movge	r0, #255	; 0xff
      int32 output_val =
          std::min(static_cast<int32>(255),
                   std::max(static_cast<int32>(0), unclamped_output_val));
      output_data[depth * i + c] = static_cast<uint8>(output_val);
   19f0a:	f803 0b01 	strb.w	r0, [r3], #1
    for (int c = 0; c < depth; c++) {
   19f0e:	f108 0801 	add.w	r8, r8, #1
   19f12:	e7e3      	b.n	19edc <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x74>
      return __a;
   19f14:	2000      	movs	r0, #0
   19f16:	e7f8      	b.n	19f0a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
  for (int i = 0; i < outer_size; ++i) {
   19f18:	3601      	adds	r6, #1
   19f1a:	442c      	add	r4, r5
   19f1c:	e7be      	b.n	19e9c <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x34>
    }
  }
}
   19f1e:	b007      	add	sp, #28
   19f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019f24 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>:
namespace tflite {
namespace reference_integer_ops {

inline void L2Normalization(int32_t input_zero_point, int32_t outer_size,
                            int32_t depth, const int8* input_data,
                            int8* output_data) {
   19f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f28:	b087      	sub	sp, #28
   19f2a:	2500      	movs	r5, #0
   19f2c:	4680      	mov	r8, r0
   19f2e:	460f      	mov	r7, r1
   19f30:	4616      	mov	r6, r2
   19f32:	9301      	str	r3, [sp, #4]
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  // The output scale must be in sync with Prepare().
  // Output is in 1/128 scale so the actual output range is nudged from [-1, 1]
  // to [-1, 127/128].
  static constexpr int32_t kOutputScale = 7;
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19f34:	46a9      	mov	r9, r5
   19f36:	45b9      	cmp	r9, r7
   19f38:	da4c      	bge.n	19fd4 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xb0>
   19f3a:	9b01      	ldr	r3, [sp, #4]
   19f3c:	eb03 0b05 	add.w	fp, r3, r5
    // int32 = (int8 - int8) ^ 2.
    // ([-128, 127] - [-128, 127]) ^ 2 = [0, (2^8 - 1)^2] so the accumulator is
    // safe from overflowing in at least 2^16 steps.
    int32_t acc = 0;
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f40:	2300      	movs	r3, #0
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19f42:	4659      	mov	r1, fp
    int32_t acc = 0;
   19f44:	4618      	mov	r0, r3
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f46:	42b3      	cmp	r3, r6
   19f48:	da07      	bge.n	19f5a <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x36>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
   19f4a:	f911 2b01 	ldrsb.w	r2, [r1], #1
      int32_t input =
   19f4e:	eba2 0208 	sub.w	r2, r2, r8
      acc += input * input;
   19f52:	fb02 0002 	mla	r0, r2, r2, r0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f56:	3301      	adds	r3, #1
   19f58:	e7f5      	b.n	19f46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x22>
    }
    int32_t inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(acc, kReverseShift, &inv_l2norm_multiplier,
   19f5a:	ab05      	add	r3, sp, #20
   19f5c:	aa04      	add	r2, sp, #16
   19f5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f62:	f7f1 fa6b 	bl	b43c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;

      // Rescale and downcast. Rescale is folded into the division.
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
   19f66:	e9dd 2404 	ldrd	r2, r4, [sp, #16]
   19f6a:	1de3      	adds	r3, r4, #7
  int left_shift = shift > 0 ? shift : 0;
   19f6c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   19f70:	2b00      	cmp	r3, #0
  int right_shift = shift > 0 ? 0 : -shift;
   19f72:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
   19f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
   19f78:	9100      	str	r1, [sp, #0]
  int right_shift = shift > 0 ? 0 : -shift;
   19f7a:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
   19f7e:	f104 04f9 	add.w	r4, r4, #249	; 0xf9
   19f82:	442b      	add	r3, r5
   19f84:	bfc8      	it	gt
   19f86:	2400      	movgt	r4, #0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f88:	f04f 0a00 	mov.w	sl, #0
   19f8c:	45b2      	cmp	sl, r6
   19f8e:	9303      	str	r3, [sp, #12]
   19f90:	da1c      	bge.n	19fcc <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa8>
          input_data[depth * outer_index + inner_index] - input_zero_point;
   19f92:	f91b 0b01 	ldrsb.w	r0, [fp], #1
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   19f96:	9b00      	ldr	r3, [sp, #0]
   19f98:	9202      	str	r2, [sp, #8]
      int32_t input =
   19f9a:	eba0 0008 	sub.w	r0, r0, r8
   19f9e:	4611      	mov	r1, r2
   19fa0:	4098      	lsls	r0, r3
   19fa2:	f7f1 f9f7 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   19fa6:	4621      	mov	r1, r4
   19fa8:	f7f1 fa22 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   19fac:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   19fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19fb4:	db07      	blt.n	19fc6 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa2>
      return __a;
   19fb6:	287f      	cmp	r0, #127	; 0x7f
   19fb8:	bfa8      	it	ge
   19fba:	207f      	movge	r0, #127	; 0x7f
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
      output_in_q24 =
          std::min(static_cast<int32_t>(kMaxInt8),
                   std::max(static_cast<int32_t>(kMinInt8), output_in_q24));
      output_data[depth * outer_index + inner_index] =
   19fbc:	f803 0b01 	strb.w	r0, [r3], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19fc0:	f10a 0a01 	add.w	sl, sl, #1
   19fc4:	e7e2      	b.n	19f8c <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x68>
      return __a;
   19fc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19fca:	e7f7      	b.n	19fbc <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x98>
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19fcc:	f109 0901 	add.w	r9, r9, #1
   19fd0:	4435      	add	r5, r6
   19fd2:	e7b0      	b.n	19f36 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x12>
          static_cast<int8>(output_in_q24);
    }
  }
}
   19fd4:	b007      	add	sp, #28
   19fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019fda <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
bool LogicalOr(bool x, bool y) { return x || y; }
   19fda:	2800      	cmp	r0, #0
   19fdc:	bf08      	it	eq
   19fde:	4608      	moveq	r0, r1
   19fe0:	4770      	bx	lr

00019fe2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:
bool LogicalAnd(bool x, bool y) { return x && y; }
   19fe2:	2800      	cmp	r0, #0
   19fe4:	bf14      	ite	ne
   19fe6:	4608      	movne	r0, r1
   19fe8:	2000      	moveq	r0, #0
   19fea:	4770      	bx	lr

00019fec <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   19fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   19ff0:	6807      	ldr	r7, [r0, #0]
   19ff2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   19ff4:	4699      	mov	r9, r3
   19ff6:	6813      	ldr	r3, [r2, #0]
   19ff8:	429f      	cmp	r7, r3
   19ffa:	4604      	mov	r4, r0
   19ffc:	4688      	mov	r8, r1
   19ffe:	4616      	mov	r6, r2
   1a000:	d001      	beq.n	1a006 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   1a002:	f004 fae6 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1a006:	f04f 0a00 	mov.w	sl, #0
   1a00a:	4557      	cmp	r7, sl
   1a00c:	dd0d      	ble.n	1a02a <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a00e:	4651      	mov	r1, sl
   1a010:	4620      	mov	r0, r4
   1a012:	f7fb fc55 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a016:	4651      	mov	r1, sl
   1a018:	4683      	mov	fp, r0
   1a01a:	4630      	mov	r0, r6
   1a01c:	f7fb fc50 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a020:	4583      	cmp	fp, r0
   1a022:	d1ee      	bne.n	1a002 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a024:	f10a 0a01 	add.w	sl, sl, #1
   1a028:	e7ef      	b.n	1a00a <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1a02a:	682b      	ldr	r3, [r5, #0]
   1a02c:	429f      	cmp	r7, r3
   1a02e:	d1e8      	bne.n	1a002 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a030:	f04f 0a00 	mov.w	sl, #0
   1a034:	4557      	cmp	r7, sl
   1a036:	dd0d      	ble.n	1a054 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a038:	4651      	mov	r1, sl
   1a03a:	4620      	mov	r0, r4
   1a03c:	f7fb fc40 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a040:	4651      	mov	r1, sl
   1a042:	4606      	mov	r6, r0
   1a044:	4628      	mov	r0, r5
   1a046:	f7fb fc3b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a04a:	4286      	cmp	r6, r0
   1a04c:	d1d9      	bne.n	1a002 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a04e:	f10a 0a01 	add.w	sl, sl, #1
   1a052:	e7ef      	b.n	1a034 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a054:	2f05      	cmp	r7, #5
   1a056:	bfcc      	ite	gt
   1a058:	6864      	ldrgt	r4, [r4, #4]
   1a05a:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1a05c:	2300      	movs	r3, #0
    int buffer_size = 1;
   1a05e:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
   1a062:	429f      	cmp	r7, r3
   1a064:	dd05      	ble.n	1a072 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   1a066:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1a06a:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1a06c:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   1a070:	e7f7      	b.n	1a062 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   1a072:	2400      	movs	r4, #0
   1a074:	4554      	cmp	r4, sl
   1a076:	da09      	bge.n	1a08c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   1a078:	f819 1004 	ldrb.w	r1, [r9, r4]
   1a07c:	f818 0004 	ldrb.w	r0, [r8, r4]
   1a080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a082:	4798      	blx	r3
   1a084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a086:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   1a088:	3401      	adds	r4, #1
   1a08a:	e7f3      	b.n	1a074 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   1a08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a090 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   1a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a094:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a096:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   1a098:	b0a7      	sub	sp, #156	; 0x9c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a09a:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   1a09c:	4614      	mov	r4, r2
   1a09e:	4605      	mov	r5, r0
   1a0a0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   1a0a2:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a0a4:	dd01      	ble.n	1a0aa <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   1a0a6:	f004 fa94 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1a0aa:	6823      	ldr	r3, [r4, #0]
   1a0ac:	2b04      	cmp	r3, #4
   1a0ae:	dcfa      	bgt.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1a0b0:	6813      	ldr	r3, [r2, #0]
   1a0b2:	2b04      	cmp	r3, #4
   1a0b4:	dcf7      	bgt.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   1a0b6:	2301      	movs	r3, #1
   1a0b8:	2104      	movs	r1, #4
   1a0ba:	a804      	add	r0, sp, #16
   1a0bc:	f7fb fc95 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a0c0:	2301      	movs	r3, #1
   1a0c2:	462a      	mov	r2, r5
   1a0c4:	2104      	movs	r1, #4
   1a0c6:	a80a      	add	r0, sp, #40	; 0x28
   1a0c8:	f7fb fc8f 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a0cc:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   1a0d0:	4622      	mov	r2, r4
   1a0d2:	2301      	movs	r3, #1
   1a0d4:	2104      	movs	r1, #4
   1a0d6:	a810      	add	r0, sp, #64	; 0x40
   1a0d8:	f7fb fc87 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a0dc:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a0e0:	4641      	mov	r1, r8
   1a0e2:	a80a      	add	r0, sp, #40	; 0x28
   1a0e4:	f7fb fe6f 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a0e8:	4659      	mov	r1, fp
   1a0ea:	a810      	add	r0, sp, #64	; 0x40
   1a0ec:	f7fb fe6b 	bl	15dc6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   1a0f0:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a0f2:	2610      	movs	r6, #16
   1a0f4:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a0f6:	4621      	mov	r1, r4
   1a0f8:	a80a      	add	r0, sp, #40	; 0x28
   1a0fa:	f7fb fbe1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   1a0fe:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a100:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   1a102:	a810      	add	r0, sp, #64	; 0x40
   1a104:	f7fb fbdc 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   1a108:	4285      	cmp	r5, r0
   1a10a:	d005      	beq.n	1a118 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      if (extent0 == 1) {
   1a10c:	2d01      	cmp	r5, #1
   1a10e:	d166      	bne.n	1a1de <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x14e>
        desc0_out->strides[i] = 0;
   1a110:	f848 7006 	str.w	r7, [r8, r6]
        desc0_out->extents[i] = extent1;
   1a114:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   1a118:	3401      	adds	r4, #1
   1a11a:	2c04      	cmp	r4, #4
   1a11c:	f106 0604 	add.w	r6, r6, #4
   1a120:	d1e9      	bne.n	1a0f6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x66>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   1a122:	a810      	add	r0, sp, #64	; 0x40
   1a124:	f7fb fbc1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   1a128:	a80a      	add	r0, sp, #40	; 0x28
   1a12a:	f7fb fbbe 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1a12e:	2400      	movs	r4, #0
   1a130:	2100      	movs	r1, #0
   1a132:	a804      	add	r0, sp, #16
   1a134:	f7fb fbc4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a138:	42a0      	cmp	r0, r4
   1a13a:	dd5f      	ble.n	1a1fc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1a13c:	2700      	movs	r7, #0
   1a13e:	f10d 0810 	add.w	r8, sp, #16
   1a142:	2101      	movs	r1, #1
   1a144:	4640      	mov	r0, r8
   1a146:	f7fb fbbb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a14a:	42b8      	cmp	r0, r7
   1a14c:	dd54      	ble.n	1a1f8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x168>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1a14e:	f04f 0900 	mov.w	r9, #0
   1a152:	2102      	movs	r1, #2
   1a154:	4640      	mov	r0, r8
   1a156:	f7fb fbb3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a15a:	4548      	cmp	r0, r9
   1a15c:	dd4a      	ble.n	1a1f4 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x164>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a15e:	2500      	movs	r5, #0
   1a160:	2103      	movs	r1, #3
   1a162:	4640      	mov	r0, r8
   1a164:	f7fb fbac 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a168:	42a8      	cmp	r0, r5
   1a16a:	dd40      	ble.n	1a1ee <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x15e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1a16c:	9904      	ldr	r1, [sp, #16]
   1a16e:	2904      	cmp	r1, #4
   1a170:	d199      	bne.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1a172:	2c00      	cmp	r4, #0
   1a174:	db97      	blt.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a176:	9905      	ldr	r1, [sp, #20]
   1a178:	428c      	cmp	r4, r1
   1a17a:	da94      	bge.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1a17c:	2f00      	cmp	r7, #0
   1a17e:	db92      	blt.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a180:	9e06      	ldr	r6, [sp, #24]
   1a182:	42b7      	cmp	r7, r6
   1a184:	da8f      	bge.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1a186:	f1b9 0f00 	cmp.w	r9, #0
   1a18a:	db8c      	blt.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a18c:	9b07      	ldr	r3, [sp, #28]
   1a18e:	4599      	cmp	r9, r3
   1a190:	da89      	bge.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1a192:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
   1a196:	d086      	beq.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a198:	9808      	ldr	r0, [sp, #32]
   1a19a:	4285      	cmp	r5, r0
   1a19c:	da83      	bge.n	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1a19e:	fb06 7604 	mla	r6, r6, r4, r7
   1a1a2:	fb03 9606 	mla	r6, r3, r6, r9
   1a1a6:	fb00 5606 	mla	r6, r0, r6, r5
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1a1aa:	9500      	str	r5, [sp, #0]
   1a1ac:	464b      	mov	r3, r9
   1a1ae:	463a      	mov	r2, r7
   1a1b0:	4621      	mov	r1, r4
   1a1b2:	a816      	add	r0, sp, #88	; 0x58
   1a1b4:	f7fb fc7c 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1a1b8:	9500      	str	r5, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1a1ba:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1a1bc:	464b      	mov	r3, r9
   1a1be:	463a      	mov	r2, r7
   1a1c0:	4621      	mov	r1, r4
   1a1c2:	a81e      	add	r0, sp, #120	; 0x78
   1a1c4:	f7fb fc74 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   1a1c8:	9b03      	ldr	r3, [sp, #12]
   1a1ca:	f81a 1000 	ldrb.w	r1, [sl, r0]
   1a1ce:	f813 000b 	ldrb.w	r0, [r3, fp]
   1a1d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1a1d4:	4798      	blx	r3
   1a1d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a1d8:	3501      	adds	r5, #1
          output_data[out_idx] = func(in1_val, in2_val);
   1a1da:	5598      	strb	r0, [r3, r6]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a1dc:	e7c0      	b.n	1a160 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
        TFLITE_DCHECK_EQ(extent1, 1);
   1a1de:	2801      	cmp	r0, #1
   1a1e0:	f47f af61 	bne.w	1a0a6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   1a1e4:	f84b 7006 	str.w	r7, [fp, r6]
        desc1_out->extents[i] = extent0;
   1a1e8:	f84b 5024 	str.w	r5, [fp, r4, lsl #2]
   1a1ec:	e794      	b.n	1a118 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1a1ee:	f109 0901 	add.w	r9, r9, #1
   1a1f2:	e7ae      	b.n	1a152 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xc2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1a1f4:	3701      	adds	r7, #1
   1a1f6:	e7a2      	b.n	1a13e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1a1f8:	3401      	adds	r4, #1
   1a1fa:	e799      	b.n	1a130 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
  const RuntimeShape output_shape =
   1a1fc:	a804      	add	r0, sp, #16
   1a1fe:	f7fb fb54 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a202:	b027      	add	sp, #156	; 0x9c
   1a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a208 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>:
                         bool (*func)(bool, bool)) {
   1a208:	b5f0      	push	{r4, r5, r6, r7, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   1a20a:	680b      	ldr	r3, [r1, #0]
   1a20c:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1a20e:	685d      	ldr	r5, [r3, #4]
   1a210:	689e      	ldr	r6, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1a212:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1a214:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a218:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1a21a:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  if (HaveSameShapes(input1, input2)) {
   1a21e:	4631      	mov	r1, r6
                         bool (*func)(bool, bool)) {
   1a220:	b097      	sub	sp, #92	; 0x5c
  if (HaveSameShapes(input1, input2)) {
   1a222:	4628      	mov	r0, r5
                         bool (*func)(bool, bool)) {
   1a224:	4617      	mov	r7, r2
  return &context->tensors[node->outputs->data[index]];
   1a226:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  if (HaveSameShapes(input1, input2)) {
   1a22a:	f004 f919 	bl	1e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a22e:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   1a230:	b330      	cbz	r0, 1a280 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a232:	a804      	add	r0, sp, #16
   1a234:	f7fb fb7e 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a238:	b105      	cbz	r5, 1a23c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x34>
   1a23a:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a23c:	4631      	mov	r1, r6
   1a23e:	a80a      	add	r0, sp, #40	; 0x28
   1a240:	f7fb fb78 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a244:	b106      	cbz	r6, 1a248 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x40>
   1a246:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a248:	4621      	mov	r1, r4
   1a24a:	a810      	add	r0, sp, #64	; 0x40
   1a24c:	f7fb fb72 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a250:	b104      	cbz	r4, 1a254 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x4c>
   1a252:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   1a254:	ab10      	add	r3, sp, #64	; 0x40
   1a256:	9300      	str	r3, [sp, #0]
   1a258:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1a25c:	4633      	mov	r3, r6
   1a25e:	aa0a      	add	r2, sp, #40	; 0x28
   1a260:	4629      	mov	r1, r5
   1a262:	a804      	add	r0, sp, #16
   1a264:	f7ff fec2 	bl	19fec <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a268:	a810      	add	r0, sp, #64	; 0x40
   1a26a:	f7fb fb1e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a26e:	a80a      	add	r0, sp, #40	; 0x28
   1a270:	f7fb fb1b 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a274:	a804      	add	r0, sp, #16
   1a276:	f7fb fb18 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a27a:	2000      	movs	r0, #0
   1a27c:	b017      	add	sp, #92	; 0x5c
   1a27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a280:	a804      	add	r0, sp, #16
   1a282:	f7fb fb57 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a286:	b105      	cbz	r5, 1a28a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x82>
   1a288:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a28a:	4631      	mov	r1, r6
   1a28c:	a80a      	add	r0, sp, #40	; 0x28
   1a28e:	f7fb fb51 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a292:	b106      	cbz	r6, 1a296 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x8e>
   1a294:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a296:	4621      	mov	r1, r4
   1a298:	a810      	add	r0, sp, #64	; 0x40
   1a29a:	f7fb fb4b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a29e:	b104      	cbz	r4, 1a2a2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x9a>
   1a2a0:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   1a2a2:	ab10      	add	r3, sp, #64	; 0x40
   1a2a4:	9300      	str	r3, [sp, #0]
   1a2a6:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1a2aa:	4633      	mov	r3, r6
   1a2ac:	aa0a      	add	r2, sp, #40	; 0x28
   1a2ae:	4629      	mov	r1, r5
   1a2b0:	a804      	add	r0, sp, #16
   1a2b2:	f7ff feed 	bl	1a090 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   1a2b6:	e7d7      	b.n	1a268 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x60>

0001a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   1a2b8:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   1a2ba:	2100      	movs	r1, #0
   1a2bc:	f7f1 f898 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   1a2c0:	bd08      	pop	{r3, pc}

0001a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   1a2c2:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1a2c4:	f7f1 f866 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   1a2c8:	bd08      	pop	{r3, pc}

0001a2ca <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>:
namespace reference_integer_ops {

inline void Logistic(int32_t input_zero_point, int32_t input_range_radius,
                     int32_t input_multiplier, int32_t input_left_shift,
                     int32_t input_size, const int8_t* input_data,
                     int8_t* output_data) {
   1a2ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2ce:	2b00      	cmp	r3, #0
  int right_shift = shift > 0 ? 0 : -shift;
   1a2d0:	f1c3 0800 	rsb	r8, r3, #0
   1a2d4:	b089      	sub	sp, #36	; 0x24
   1a2d6:	4682      	mov	sl, r0
   1a2d8:	460f      	mov	r7, r1
   1a2da:	4691      	mov	r9, r2
   1a2dc:	bfc8      	it	gt
   1a2de:	f04f 0800 	movgt.w	r8, #0
  static constexpr int32_t kOutputIntegerBits = 8;
  static constexpr int8_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  static constexpr int32_t kOutputZeroPoint = -128;

  for (int i = 0; i < input_size; ++i) {
   1a2e2:	2400      	movs	r4, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1a2e4:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   1a2e8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   1a2ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a2ee:	429c      	cmp	r4, r3
   1a2f0:	da55      	bge.n	1a39e <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xd4>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1a2f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a2f4:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   1a2f6:	eba0 000a 	sub.w	r0, r0, sl
    if (input <= -input_range_radius) {
   1a2fa:	4583      	cmp	fp, r0
   1a2fc:	db04      	blt.n	1a308 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x3e>
      output_data[i] = kMinInt8;
   1a2fe:	2380      	movs	r3, #128	; 0x80
      int32_t output_in_q23 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
                                        static_cast<int32_t>(kMinInt8)),
                               static_cast<int32_t>(kMaxInt8));
      output_data[i] = static_cast<int8_t>(output_in_q23);
   1a300:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a302:	5513      	strb	r3, [r2, r4]
  for (int i = 0; i < input_size; ++i) {
   1a304:	3401      	adds	r4, #1
   1a306:	e7f1      	b.n	1a2ec <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x22>
    } else if (input >= input_range_radius) {
   1a308:	42b8      	cmp	r0, r7
   1a30a:	db01      	blt.n	1a310 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x46>
      output_data[i] = kMaxInt8;
   1a30c:	237f      	movs	r3, #127	; 0x7f
   1a30e:	e7f7      	b.n	1a300 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1a310:	4649      	mov	r1, r9
   1a312:	40a8      	lsls	r0, r5
   1a314:	f7f1 f83e 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1a318:	4641      	mov	r1, r8
   1a31a:	f7f1 f869 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   1a31e:	2800      	cmp	r0, #0
   1a320:	dc39      	bgt.n	1a396 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xcc>
   1a322:	bf0c      	ite	eq
   1a324:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1a328:	2200      	movne	r2, #0
   1a32a:	2300      	movs	r3, #0
  return ~a;
   1a32c:	43d9      	mvns	r1, r3
  return -a;
   1a32e:	4246      	negs	r6, r0
  return a & b;
   1a330:	400e      	ands	r6, r1
   1a332:	4018      	ands	r0, r3
  return a ^ b;
   1a334:	4070      	eors	r0, r6

// Returns logistic(x) = 1 / (1 + exp(-x)) for x > 0.
template <typename tRawType, int tIntegerBits>
FixedPoint<tRawType, 0> logistic_on_positive_values(
    FixedPoint<tRawType, tIntegerBits> a) {
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   1a336:	4240      	negs	r0, r0
   1a338:	9203      	str	r2, [sp, #12]
  return a & b;
   1a33a:	9102      	str	r1, [sp, #8]
   1a33c:	9301      	str	r3, [sp, #4]
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   1a33e:	f7f1 fb2b 	bl	b998 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1a342:	f7f1 fa61 	bl	b808 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
   1a346:	4606      	mov	r6, r0
  tRawType mask_if_zero = MaskIfZero(a);
  InputF abs_input = SelectUsingMask(mask_if_positive, a, -a);
  ResultF result_if_positive = logistic_on_positive_values(abs_input);
  ResultF result_if_negative = ResultF::One() - result_if_positive;
  const ResultF one_half =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(ResultF, 1 << 30, 0.5);
   1a348:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1a34c:	f7ff ffb4 	bl	1a2b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
   1a350:	9b01      	ldr	r3, [sp, #4]
   1a352:	9902      	ldr	r1, [sp, #8]
  return ~a;
   1a354:	9a03      	ldr	r2, [sp, #12]
  return a - b;
   1a356:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1a35a:	ebac 0c06 	sub.w	ip, ip, r6
  return a & b;
   1a35e:	ea0c 0101 	and.w	r1, ip, r1
   1a362:	401e      	ands	r6, r3
  return a ^ b;
   1a364:	404e      	eors	r6, r1
  return ~a;
   1a366:	43d3      	mvns	r3, r2
  return a & b;
   1a368:	401e      	ands	r6, r3
   1a36a:	4010      	ands	r0, r2
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
   1a36c:	2117      	movs	r1, #23
   1a36e:	4070      	eors	r0, r6
   1a370:	f7f1 f83e 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                                        static_cast<int32_t>(kMinInt8)),
   1a374:	f06f 037f 	mvn.w	r3, #127	; 0x7f
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a378:	3880      	subs	r0, #128	; 0x80
      if (__a < __b)
   1a37a:	4298      	cmp	r0, r3
                                        static_cast<int32_t>(kMinInt8)),
   1a37c:	9306      	str	r3, [sp, #24]
	return __b;
   1a37e:	bfb4      	ite	lt
   1a380:	ab06      	addlt	r3, sp, #24
      return __a;
   1a382:	ab05      	addge	r3, sp, #20
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a384:	9005      	str	r0, [sp, #20]
                               static_cast<int32_t>(kMaxInt8));
   1a386:	227f      	movs	r2, #127	; 0x7f
   1a388:	9207      	str	r2, [sp, #28]
      if (__b < __a)
   1a38a:	681a      	ldr	r2, [r3, #0]
   1a38c:	2a7f      	cmp	r2, #127	; 0x7f
	return __b;
   1a38e:	bfc8      	it	gt
   1a390:	ab07      	addgt	r3, sp, #28
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a392:	681b      	ldr	r3, [r3, #0]
   1a394:	e7b4      	b.n	1a300 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return a ? BitNot(zero) : zero;
   1a396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a39a:	2200      	movs	r2, #0
   1a39c:	e7c6      	b.n	1a32c <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x62>
    }
  }
}
   1a39e:	b009      	add	sp, #36	; 0x24
   1a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a3a4 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
    return el1 > el2 ? el1 : el2;
   1a3a4:	eeb4 0ae0 	vcmpe.f32	s0, s1
   1a3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   1a3ac:	bfb8      	it	lt
   1a3ae:	eeb0 0a60 	vmovlt.f32	s0, s1
   1a3b2:	4770      	bx	lr

0001a3b4 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   1a3b4:	4288      	cmp	r0, r1
   1a3b6:	bf38      	it	cc
   1a3b8:	4608      	movcc	r0, r1
   1a3ba:	4770      	bx	lr

0001a3bc <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   1a3bc:	4288      	cmp	r0, r1
   1a3be:	bfb8      	it	lt
   1a3c0:	4608      	movlt	r0, r1
   1a3c2:	4770      	bx	lr

0001a3c4 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_>:
   1a3c4:	4288      	cmp	r0, r1
   1a3c6:	bfb8      	it	lt
   1a3c8:	4608      	movlt	r0, r1
   1a3ca:	4770      	bx	lr

0001a3cc <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   1a3cc:	b530      	push	{r4, r5, lr}
   1a3ce:	4614      	mov	r4, r2
   1a3d0:	461d      	mov	r5, r3
    return el1 > el2 ? el1 : el2;
   1a3d2:	42a0      	cmp	r0, r4
   1a3d4:	460b      	mov	r3, r1
   1a3d6:	eb73 0105 	sbcs.w	r1, r3, r5
   1a3da:	4602      	mov	r2, r0
   1a3dc:	bfbc      	itt	lt
   1a3de:	462b      	movlt	r3, r5
   1a3e0:	4622      	movlt	r2, r4
  }
   1a3e2:	4610      	mov	r0, r2
   1a3e4:	4619      	mov	r1, r3
   1a3e6:	bd30      	pop	{r4, r5, pc}

0001a3e8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
    return el1 < el2 ? el1 : el2;
   1a3e8:	eeb4 0ae0 	vcmpe.f32	s0, s1
   1a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   1a3f0:	bf88      	it	hi
   1a3f2:	eeb0 0a60 	vmovhi.f32	s0, s1
   1a3f6:	4770      	bx	lr

0001a3f8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   1a3f8:	4288      	cmp	r0, r1
   1a3fa:	bf28      	it	cs
   1a3fc:	4608      	movcs	r0, r1
   1a3fe:	4770      	bx	lr

0001a400 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   1a400:	4288      	cmp	r0, r1
   1a402:	bfa8      	it	ge
   1a404:	4608      	movge	r0, r1
   1a406:	4770      	bx	lr

0001a408 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_>:
   1a408:	4288      	cmp	r0, r1
   1a40a:	bfa8      	it	ge
   1a40c:	4608      	movge	r0, r1
   1a40e:	4770      	bx	lr

0001a410 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   1a410:	b530      	push	{r4, r5, lr}
   1a412:	4614      	mov	r4, r2
   1a414:	461d      	mov	r5, r3
    return el1 < el2 ? el1 : el2;
   1a416:	4284      	cmp	r4, r0
   1a418:	460b      	mov	r3, r1
   1a41a:	eb75 0103 	sbcs.w	r1, r5, r3
   1a41e:	4602      	mov	r2, r0
   1a420:	bfbc      	itt	lt
   1a422:	462b      	movlt	r3, r5
   1a424:	4622      	movlt	r2, r4
  }
   1a426:	4610      	mov	r0, r2
   1a428:	4619      	mov	r1, r3
   1a42a:	bd30      	pop	{r4, r5, pc}

0001a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
   1a42c:	b508      	push	{r3, lr}
    return this->size_ == comp.size_ &&
   1a42e:	6802      	ldr	r2, [r0, #0]
   1a430:	680b      	ldr	r3, [r1, #0]
   1a432:	429a      	cmp	r2, r3
   1a434:	d10e      	bne.n	1a454 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a436:	2a05      	cmp	r2, #5
   1a438:	bfcc      	ite	gt
   1a43a:	6840      	ldrgt	r0, [r0, #4]
   1a43c:	3004      	addle	r0, #4
   1a43e:	2b05      	cmp	r3, #5
   1a440:	bfcc      	ite	gt
   1a442:	6849      	ldrgt	r1, [r1, #4]
   1a444:	3104      	addle	r1, #4
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   1a446:	0092      	lsls	r2, r2, #2
   1a448:	f004 f8ca 	bl	1e5e0 <memcmp>
    return this->size_ == comp.size_ &&
   1a44c:	fab0 f080 	clz	r0, r0
   1a450:	0940      	lsrs	r0, r0, #5
  }
   1a452:	bd08      	pop	{r3, pc}
    return this->size_ == comp.size_ &&
   1a454:	2000      	movs	r0, #0
   1a456:	e7fc      	b.n	1a452 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x26>

0001a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>:
inline int SubscriptToIndex(const NdArrayDesc<5>& desc, int indexes[5]) {
   1a458:	b530      	push	{r4, r5, lr}
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
   1a45a:	684a      	ldr	r2, [r1, #4]
   1a45c:	6984      	ldr	r4, [r0, #24]
   1a45e:	680b      	ldr	r3, [r1, #0]
   1a460:	6945      	ldr	r5, [r0, #20]
   1a462:	4362      	muls	r2, r4
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   1a464:	fb05 2203 	mla	r2, r5, r3, r2
   1a468:	6a04      	ldr	r4, [r0, #32]
   1a46a:	68cb      	ldr	r3, [r1, #12]
   1a46c:	fb04 2203 	mla	r2, r4, r3, r2
   1a470:	69c4      	ldr	r4, [r0, #28]
   1a472:	688b      	ldr	r3, [r1, #8]
         indexes[4] * desc.strides[4];
   1a474:	6a40      	ldr	r0, [r0, #36]	; 0x24
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   1a476:	fb04 2303 	mla	r3, r4, r3, r2
         indexes[4] * desc.strides[4];
   1a47a:	690a      	ldr	r2, [r1, #16]
}
   1a47c:	fb00 3002 	mla	r0, r0, r2, r3
   1a480:	bd30      	pop	{r4, r5, pc}

0001a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   1a482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a484:	4606      	mov	r6, r0
   1a486:	f101 0510 	add.w	r5, r1, #16
  for (int i = N - 1; i >= 0; --i) {
   1a48a:	2404      	movs	r4, #4
  int desc_stride = 1;
   1a48c:	2701      	movs	r7, #1
    desc_out->extents[i] = input_shape.Dims(i);
   1a48e:	4621      	mov	r1, r4
   1a490:	4630      	mov	r0, r6
   1a492:	f7fb fa15 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a496:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   1a49a:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   1a49c:	61af      	str	r7, [r5, #24]
    desc_stride *= input_shape.Dims(i);
   1a49e:	4630      	mov	r0, r6
   1a4a0:	f7fb fa0e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   1a4a4:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   1a4a6:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   1a4aa:	d2f0      	bcs.n	1a48e <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   1a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   1a4ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a4b2:	460c      	mov	r4, r1
   1a4b4:	b08d      	sub	sp, #52	; 0x34
   1a4b6:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   1a4b8:	4615      	mov	r5, r2
   1a4ba:	b90a      	cbnz	r2, 1a4c0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   1a4bc:	f004 f889 	bl	1e5d2 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   1a4c0:	2b00      	cmp	r3, #0
   1a4c2:	d0fb      	beq.n	1a4bc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   1a4c4:	4602      	mov	r2, r0
   1a4c6:	2301      	movs	r3, #1
   1a4c8:	2105      	movs	r1, #5
   1a4ca:	4668      	mov	r0, sp
   1a4cc:	f7fb fa8d 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a4d0:	4622      	mov	r2, r4
   1a4d2:	2301      	movs	r3, #1
   1a4d4:	2105      	movs	r1, #5
   1a4d6:	a806      	add	r0, sp, #24
   1a4d8:	f7fb fa87 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a4dc:	4629      	mov	r1, r5
   1a4de:	4668      	mov	r0, sp
   1a4e0:	f7ff ffcf 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a4e4:	4631      	mov	r1, r6
   1a4e6:	a806      	add	r0, sp, #24
   1a4e8:	f7ff ffcb 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   1a4ec:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a4ee:	f04f 0814 	mov.w	r8, #20
   1a4f2:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a4f4:	4621      	mov	r1, r4
   1a4f6:	4668      	mov	r0, sp
   1a4f8:	f7fb f9e2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   1a4fc:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a4fe:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   1a500:	a806      	add	r0, sp, #24
   1a502:	f7fb f9dd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   1a506:	4287      	cmp	r7, r0
   1a508:	d005      	beq.n	1a516 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   1a50a:	2f01      	cmp	r7, #1
   1a50c:	d111      	bne.n	1a532 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   1a50e:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   1a512:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   1a516:	3401      	adds	r4, #1
   1a518:	2c05      	cmp	r4, #5
   1a51a:	f108 0804 	add.w	r8, r8, #4
   1a51e:	d1e9      	bne.n	1a4f4 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   1a520:	a806      	add	r0, sp, #24
   1a522:	f7fb f9c2 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   1a526:	4668      	mov	r0, sp
   1a528:	f7fb f9bf 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a52c:	b00d      	add	sp, #52	; 0x34
   1a52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   1a532:	2801      	cmp	r0, #1
   1a534:	d1c2      	bne.n	1a4bc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   1a536:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   1a53a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   1a53e:	e7ea      	b.n	1a516 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

0001a540 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a544:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a546:	4606      	mov	r6, r0
   1a548:	460d      	mov	r5, r1
   1a54a:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a54c:	60d7      	str	r7, [r2, #12]
   1a54e:	68e2      	ldr	r2, [r4, #12]
   1a550:	68f3      	ldr	r3, [r6, #12]
   1a552:	429a      	cmp	r2, r3
   1a554:	da2f      	bge.n	1a5b6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x76>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a556:	6127      	str	r7, [r4, #16]
   1a558:	6922      	ldr	r2, [r4, #16]
   1a55a:	6933      	ldr	r3, [r6, #16]
   1a55c:	429a      	cmp	r2, r3
   1a55e:	da26      	bge.n	1a5ae <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
                   &output_desc);

    auto maxmin_func = [&](int indexes[N]) {
      output_data[SubscriptToIndex(output_desc, indexes)] =
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a560:	6928      	ldr	r0, [r5, #16]
   1a562:	4621      	mov	r1, r4
   1a564:	f7ff ff78 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a568:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a56a:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a56c:	69a8      	ldr	r0, [r5, #24]
   1a56e:	f7ff ff73 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a572:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a574:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a576:	6868      	ldr	r0, [r5, #4]
   1a578:	f7ff ff6e 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a57c:	682b      	ldr	r3, [r5, #0]
   1a57e:	681b      	ldr	r3, [r3, #0]
   1a580:	eb03 0880 	add.w	r8, r3, r0, lsl #2
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a584:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a586:	681a      	ldr	r2, [r3, #0]
   1a588:	68eb      	ldr	r3, [r5, #12]
   1a58a:	6818      	ldr	r0, [r3, #0]
   1a58c:	68ab      	ldr	r3, [r5, #8]
   1a58e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1a592:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   1a596:	681b      	ldr	r3, [r3, #0]
   1a598:	edd2 0a00 	vldr	s1, [r2]
   1a59c:	ed90 0a00 	vldr	s0, [r0]
   1a5a0:	4798      	blx	r3
   1a5a2:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a5a4:	ed88 0a00 	vstr	s0, [r8]
   1a5a8:	3301      	adds	r3, #1
   1a5aa:	6123      	str	r3, [r4, #16]
   1a5ac:	e7d4      	b.n	1a558 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a5ae:	68e3      	ldr	r3, [r4, #12]
   1a5b0:	3301      	adds	r3, #1
   1a5b2:	60e3      	str	r3, [r4, #12]
   1a5b4:	e7cb      	b.n	1a54e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a5ba <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5be:	b0ae      	sub	sp, #184	; 0xb8
   1a5c0:	4605      	mov	r5, r0
   1a5c2:	9103      	str	r1, [sp, #12]
   1a5c4:	4611      	mov	r1, r2
   1a5c6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a5c8:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a5ca:	9201      	str	r2, [sp, #4]
   1a5cc:	f7ff ff2e 	bl	1a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a5d0:	9901      	ldr	r1, [sp, #4]
   1a5d2:	4604      	mov	r4, r0
   1a5d4:	b1d0      	cbz	r0, 1a60c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a5d6:	4632      	mov	r2, r6
   1a5d8:	4628      	mov	r0, r5
   1a5da:	f7fb fa55 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a5de:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a5e0:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   1a5e2:	42b4      	cmp	r4, r6
   1a5e4:	da61      	bge.n	1a6aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a5e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   1a5e8:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   1a5ec:	9b02      	ldr	r3, [sp, #8]
   1a5ee:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1a5f2:	9b03      	ldr	r3, [sp, #12]
   1a5f4:	edd2 0a00 	vldr	s1, [r2]
   1a5f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1a5fc:	ed93 0a00 	vldr	s0, [r3]
   1a600:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a602:	4798      	blx	r3
    for (int i = 0; i < flat_size; ++i) {
   1a604:	3401      	adds	r4, #1
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a606:	ed85 0a00 	vstr	s0, [r5]
    for (int i = 0; i < flat_size; ++i) {
   1a60a:	e7ea      	b.n	1a5e2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a60c:	682b      	ldr	r3, [r5, #0]
   1a60e:	2b05      	cmp	r3, #5
   1a610:	dd01      	ble.n	1a616 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   1a612:	f003 ffde 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a616:	680b      	ldr	r3, [r1, #0]
   1a618:	2b05      	cmp	r3, #5
   1a61a:	dcfa      	bgt.n	1a612 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a61c:	6833      	ldr	r3, [r6, #0]
   1a61e:	2b05      	cmp	r3, #5
   1a620:	dcf7      	bgt.n	1a612 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   1a622:	af1a      	add	r7, sp, #104	; 0x68
   1a624:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a628:	4628      	mov	r0, r5
   1a62a:	463b      	mov	r3, r7
   1a62c:	4642      	mov	r2, r8
   1a62e:	f7ff ff3e 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a632:	ad24      	add	r5, sp, #144	; 0x90
   1a634:	2301      	movs	r3, #1
   1a636:	4632      	mov	r2, r6
   1a638:	2105      	movs	r1, #5
   1a63a:	a809      	add	r0, sp, #36	; 0x24
   1a63c:	f7fb f9d5 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a640:	4629      	mov	r1, r5
   1a642:	a809      	add	r0, sp, #36	; 0x24
   1a644:	f7ff ff1d 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a648:	a809      	add	r0, sp, #36	; 0x24
   1a64a:	f7fb f92e 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a64e:	ab35      	add	r3, sp, #212	; 0xd4
   1a650:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a654:	ab36      	add	r3, sp, #216	; 0xd8
   1a656:	930b      	str	r3, [sp, #44]	; 0x2c
   1a658:	ab03      	add	r3, sp, #12
   1a65a:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a65e:	ab02      	add	r3, sp, #8
   1a660:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a664:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a668:	9404      	str	r4, [sp, #16]
   1a66a:	9a04      	ldr	r2, [sp, #16]
   1a66c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a66e:	429a      	cmp	r2, r3
   1a670:	da1b      	bge.n	1a6aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
   1a672:	2400      	movs	r4, #0
   1a674:	9405      	str	r4, [sp, #20]
   1a676:	9a05      	ldr	r2, [sp, #20]
   1a678:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a67a:	429a      	cmp	r2, r3
   1a67c:	da11      	bge.n	1a6a2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
   1a67e:	9406      	str	r4, [sp, #24]
   1a680:	9a06      	ldr	r2, [sp, #24]
   1a682:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a684:	429a      	cmp	r2, r3
   1a686:	da08      	bge.n	1a69a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a688:	aa04      	add	r2, sp, #16
   1a68a:	a909      	add	r1, sp, #36	; 0x24
   1a68c:	4628      	mov	r0, r5
   1a68e:	f7ff ff57 	bl	1a540 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a692:	9b06      	ldr	r3, [sp, #24]
   1a694:	3301      	adds	r3, #1
   1a696:	9306      	str	r3, [sp, #24]
   1a698:	e7f2      	b.n	1a680 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc6>
   1a69a:	9b05      	ldr	r3, [sp, #20]
   1a69c:	3301      	adds	r3, #1
   1a69e:	9305      	str	r3, [sp, #20]
   1a6a0:	e7e9      	b.n	1a676 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   1a6a2:	9b04      	ldr	r3, [sp, #16]
   1a6a4:	3301      	adds	r3, #1
   1a6a6:	9304      	str	r3, [sp, #16]
   1a6a8:	e7df      	b.n	1a66a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
    };
    NDOpsHelper<N>(output_desc, maxmin_func);
  }
}
   1a6aa:	b02e      	add	sp, #184	; 0xb8
   1a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a6b0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6b4:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a6b6:	4606      	mov	r6, r0
   1a6b8:	460d      	mov	r5, r1
   1a6ba:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6bc:	60d7      	str	r7, [r2, #12]
   1a6be:	68e2      	ldr	r2, [r4, #12]
   1a6c0:	68f3      	ldr	r3, [r6, #12]
   1a6c2:	429a      	cmp	r2, r3
   1a6c4:	da2b      	bge.n	1a71e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6c6:	6127      	str	r7, [r4, #16]
   1a6c8:	6922      	ldr	r2, [r4, #16]
   1a6ca:	6933      	ldr	r3, [r6, #16]
   1a6cc:	429a      	cmp	r2, r3
   1a6ce:	da22      	bge.n	1a716 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a6d0:	6928      	ldr	r0, [r5, #16]
   1a6d2:	4621      	mov	r1, r4
   1a6d4:	f7ff fec0 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6d8:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a6da:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6dc:	69a8      	ldr	r0, [r5, #24]
   1a6de:	f7ff febb 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a6e2:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6e4:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a6e6:	6868      	ldr	r0, [r5, #4]
   1a6e8:	f7ff feb6 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a6ec:	682b      	ldr	r3, [r5, #0]
   1a6ee:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6f2:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a6f4:	6819      	ldr	r1, [r3, #0]
   1a6f6:	68eb      	ldr	r3, [r5, #12]
   1a6f8:	f811 100a 	ldrb.w	r1, [r1, sl]
   1a6fc:	681a      	ldr	r2, [r3, #0]
   1a6fe:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a700:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a702:	681b      	ldr	r3, [r3, #0]
   1a704:	f812 0009 	ldrb.w	r0, [r2, r9]
   1a708:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a70a:	f80b 0008 	strb.w	r0, [fp, r8]
   1a70e:	6923      	ldr	r3, [r4, #16]
   1a710:	3301      	adds	r3, #1
   1a712:	6123      	str	r3, [r4, #16]
   1a714:	e7d8      	b.n	1a6c8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a716:	68e3      	ldr	r3, [r4, #12]
   1a718:	3301      	adds	r3, #1
   1a71a:	60e3      	str	r3, [r4, #12]
   1a71c:	e7cf      	b.n	1a6be <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a722 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a726:	b0ae      	sub	sp, #184	; 0xb8
   1a728:	4605      	mov	r5, r0
   1a72a:	9103      	str	r1, [sp, #12]
   1a72c:	4611      	mov	r1, r2
   1a72e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a730:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a732:	9201      	str	r2, [sp, #4]
   1a734:	f7ff fe7a 	bl	1a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a738:	9901      	ldr	r1, [sp, #4]
   1a73a:	4604      	mov	r4, r0
   1a73c:	b188      	cbz	r0, 1a762 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a73e:	4628      	mov	r0, r5
   1a740:	4632      	mov	r2, r6
   1a742:	f7fb f9a1 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a746:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a748:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1a74a:	42ac      	cmp	r4, r5
   1a74c:	da58      	bge.n	1a800 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a74e:	9b02      	ldr	r3, [sp, #8]
   1a750:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1a752:	5d19      	ldrb	r1, [r3, r4]
   1a754:	9b03      	ldr	r3, [sp, #12]
   1a756:	5d18      	ldrb	r0, [r3, r4]
   1a758:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a75a:	4798      	blx	r3
   1a75c:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   1a75e:	3401      	adds	r4, #1
   1a760:	e7f3      	b.n	1a74a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a762:	682b      	ldr	r3, [r5, #0]
   1a764:	2b05      	cmp	r3, #5
   1a766:	dd01      	ble.n	1a76c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   1a768:	f003 ff33 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a76c:	680b      	ldr	r3, [r1, #0]
   1a76e:	2b05      	cmp	r3, #5
   1a770:	dcfa      	bgt.n	1a768 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a772:	6833      	ldr	r3, [r6, #0]
   1a774:	2b05      	cmp	r3, #5
   1a776:	dcf7      	bgt.n	1a768 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   1a778:	af1a      	add	r7, sp, #104	; 0x68
   1a77a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a77e:	4628      	mov	r0, r5
   1a780:	463b      	mov	r3, r7
   1a782:	4642      	mov	r2, r8
   1a784:	f7ff fe93 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a788:	ad24      	add	r5, sp, #144	; 0x90
   1a78a:	2301      	movs	r3, #1
   1a78c:	4632      	mov	r2, r6
   1a78e:	2105      	movs	r1, #5
   1a790:	a809      	add	r0, sp, #36	; 0x24
   1a792:	f7fb f92a 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a796:	4629      	mov	r1, r5
   1a798:	a809      	add	r0, sp, #36	; 0x24
   1a79a:	f7ff fe72 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a79e:	a809      	add	r0, sp, #36	; 0x24
   1a7a0:	f7fb f883 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a7a4:	ab35      	add	r3, sp, #212	; 0xd4
   1a7a6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a7aa:	ab36      	add	r3, sp, #216	; 0xd8
   1a7ac:	930b      	str	r3, [sp, #44]	; 0x2c
   1a7ae:	ab03      	add	r3, sp, #12
   1a7b0:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a7b4:	ab02      	add	r3, sp, #8
   1a7b6:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a7ba:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a7be:	9404      	str	r4, [sp, #16]
   1a7c0:	9a04      	ldr	r2, [sp, #16]
   1a7c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a7c4:	429a      	cmp	r2, r3
   1a7c6:	da1b      	bge.n	1a800 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   1a7c8:	2400      	movs	r4, #0
   1a7ca:	9405      	str	r4, [sp, #20]
   1a7cc:	9a05      	ldr	r2, [sp, #20]
   1a7ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a7d0:	429a      	cmp	r2, r3
   1a7d2:	da11      	bge.n	1a7f8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
   1a7d4:	9406      	str	r4, [sp, #24]
   1a7d6:	9a06      	ldr	r2, [sp, #24]
   1a7d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a7da:	429a      	cmp	r2, r3
   1a7dc:	da08      	bge.n	1a7f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xce>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a7de:	aa04      	add	r2, sp, #16
   1a7e0:	a909      	add	r1, sp, #36	; 0x24
   1a7e2:	4628      	mov	r0, r5
   1a7e4:	f7ff ff64 	bl	1a6b0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a7e8:	9b06      	ldr	r3, [sp, #24]
   1a7ea:	3301      	adds	r3, #1
   1a7ec:	9306      	str	r3, [sp, #24]
   1a7ee:	e7f2      	b.n	1a7d6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
   1a7f0:	9b05      	ldr	r3, [sp, #20]
   1a7f2:	3301      	adds	r3, #1
   1a7f4:	9305      	str	r3, [sp, #20]
   1a7f6:	e7e9      	b.n	1a7cc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xaa>
   1a7f8:	9b04      	ldr	r3, [sp, #16]
   1a7fa:	3301      	adds	r3, #1
   1a7fc:	9304      	str	r3, [sp, #16]
   1a7fe:	e7df      	b.n	1a7c0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x9e>
}
   1a800:	b02e      	add	sp, #184	; 0xb8
   1a802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a806 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a806:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a80a:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a80c:	4606      	mov	r6, r0
   1a80e:	460d      	mov	r5, r1
   1a810:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a812:	60d7      	str	r7, [r2, #12]
   1a814:	68e2      	ldr	r2, [r4, #12]
   1a816:	68f3      	ldr	r3, [r6, #12]
   1a818:	429a      	cmp	r2, r3
   1a81a:	da2b      	bge.n	1a874 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a81c:	6127      	str	r7, [r4, #16]
   1a81e:	6922      	ldr	r2, [r4, #16]
   1a820:	6933      	ldr	r3, [r6, #16]
   1a822:	429a      	cmp	r2, r3
   1a824:	da22      	bge.n	1a86c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a826:	6928      	ldr	r0, [r5, #16]
   1a828:	4621      	mov	r1, r4
   1a82a:	f7ff fe15 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a82e:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a830:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a832:	69a8      	ldr	r0, [r5, #24]
   1a834:	f7ff fe10 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a838:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a83a:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a83c:	6868      	ldr	r0, [r5, #4]
   1a83e:	f7ff fe0b 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a842:	682b      	ldr	r3, [r5, #0]
   1a844:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a848:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a84a:	6819      	ldr	r1, [r3, #0]
   1a84c:	68eb      	ldr	r3, [r5, #12]
   1a84e:	f911 100a 	ldrsb.w	r1, [r1, sl]
   1a852:	681a      	ldr	r2, [r3, #0]
   1a854:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a856:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a858:	681b      	ldr	r3, [r3, #0]
   1a85a:	f912 0009 	ldrsb.w	r0, [r2, r9]
   1a85e:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a860:	f80b 0008 	strb.w	r0, [fp, r8]
   1a864:	6923      	ldr	r3, [r4, #16]
   1a866:	3301      	adds	r3, #1
   1a868:	6123      	str	r3, [r4, #16]
   1a86a:	e7d8      	b.n	1a81e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a86c:	68e3      	ldr	r3, [r4, #12]
   1a86e:	3301      	adds	r3, #1
   1a870:	60e3      	str	r3, [r4, #12]
   1a872:	e7cf      	b.n	1a814 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a878 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a87c:	b0ae      	sub	sp, #184	; 0xb8
   1a87e:	4605      	mov	r5, r0
   1a880:	9103      	str	r1, [sp, #12]
   1a882:	4611      	mov	r1, r2
   1a884:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a886:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a888:	9201      	str	r2, [sp, #4]
   1a88a:	f7ff fdcf 	bl	1a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a88e:	9901      	ldr	r1, [sp, #4]
   1a890:	4604      	mov	r4, r0
   1a892:	b188      	cbz	r0, 1a8b8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a894:	4628      	mov	r0, r5
   1a896:	4632      	mov	r2, r6
   1a898:	f7fb f8f6 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a89c:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a89e:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1a8a0:	42ac      	cmp	r4, r5
   1a8a2:	da58      	bge.n	1a956 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a8a4:	9b02      	ldr	r3, [sp, #8]
   1a8a6:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1a8a8:	5719      	ldrsb	r1, [r3, r4]
   1a8aa:	9b03      	ldr	r3, [sp, #12]
   1a8ac:	5718      	ldrsb	r0, [r3, r4]
   1a8ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a8b0:	4798      	blx	r3
   1a8b2:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   1a8b4:	3401      	adds	r4, #1
   1a8b6:	e7f3      	b.n	1a8a0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a8b8:	682b      	ldr	r3, [r5, #0]
   1a8ba:	2b05      	cmp	r3, #5
   1a8bc:	dd01      	ble.n	1a8c2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   1a8be:	f003 fe88 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a8c2:	680b      	ldr	r3, [r1, #0]
   1a8c4:	2b05      	cmp	r3, #5
   1a8c6:	dcfa      	bgt.n	1a8be <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a8c8:	6833      	ldr	r3, [r6, #0]
   1a8ca:	2b05      	cmp	r3, #5
   1a8cc:	dcf7      	bgt.n	1a8be <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   1a8ce:	af1a      	add	r7, sp, #104	; 0x68
   1a8d0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	463b      	mov	r3, r7
   1a8d8:	4642      	mov	r2, r8
   1a8da:	f7ff fde8 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a8de:	ad24      	add	r5, sp, #144	; 0x90
   1a8e0:	2301      	movs	r3, #1
   1a8e2:	4632      	mov	r2, r6
   1a8e4:	2105      	movs	r1, #5
   1a8e6:	a809      	add	r0, sp, #36	; 0x24
   1a8e8:	f7fb f87f 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a8ec:	4629      	mov	r1, r5
   1a8ee:	a809      	add	r0, sp, #36	; 0x24
   1a8f0:	f7ff fdc7 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a8f4:	a809      	add	r0, sp, #36	; 0x24
   1a8f6:	f7fa ffd8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a8fa:	ab35      	add	r3, sp, #212	; 0xd4
   1a8fc:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a900:	ab36      	add	r3, sp, #216	; 0xd8
   1a902:	930b      	str	r3, [sp, #44]	; 0x2c
   1a904:	ab03      	add	r3, sp, #12
   1a906:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a90a:	ab02      	add	r3, sp, #8
   1a90c:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a910:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a914:	9404      	str	r4, [sp, #16]
   1a916:	9a04      	ldr	r2, [sp, #16]
   1a918:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a91a:	429a      	cmp	r2, r3
   1a91c:	da1b      	bge.n	1a956 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   1a91e:	2400      	movs	r4, #0
   1a920:	9405      	str	r4, [sp, #20]
   1a922:	9a05      	ldr	r2, [sp, #20]
   1a924:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a926:	429a      	cmp	r2, r3
   1a928:	da11      	bge.n	1a94e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
   1a92a:	9406      	str	r4, [sp, #24]
   1a92c:	9a06      	ldr	r2, [sp, #24]
   1a92e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a930:	429a      	cmp	r2, r3
   1a932:	da08      	bge.n	1a946 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xce>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a934:	aa04      	add	r2, sp, #16
   1a936:	a909      	add	r1, sp, #36	; 0x24
   1a938:	4628      	mov	r0, r5
   1a93a:	f7ff ff64 	bl	1a806 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a93e:	9b06      	ldr	r3, [sp, #24]
   1a940:	3301      	adds	r3, #1
   1a942:	9306      	str	r3, [sp, #24]
   1a944:	e7f2      	b.n	1a92c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
   1a946:	9b05      	ldr	r3, [sp, #20]
   1a948:	3301      	adds	r3, #1
   1a94a:	9305      	str	r3, [sp, #20]
   1a94c:	e7e9      	b.n	1a922 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xaa>
   1a94e:	9b04      	ldr	r3, [sp, #16]
   1a950:	3301      	adds	r3, #1
   1a952:	9304      	str	r3, [sp, #16]
   1a954:	e7df      	b.n	1a916 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x9e>
}
   1a956:	b02e      	add	sp, #184	; 0xb8
   1a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a95c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a960:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a962:	4606      	mov	r6, r0
   1a964:	460d      	mov	r5, r1
   1a966:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a968:	60d7      	str	r7, [r2, #12]
   1a96a:	68e2      	ldr	r2, [r4, #12]
   1a96c:	68f3      	ldr	r3, [r6, #12]
   1a96e:	429a      	cmp	r2, r3
   1a970:	da2b      	bge.n	1a9ca <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a972:	6127      	str	r7, [r4, #16]
   1a974:	6922      	ldr	r2, [r4, #16]
   1a976:	6933      	ldr	r3, [r6, #16]
   1a978:	429a      	cmp	r2, r3
   1a97a:	da22      	bge.n	1a9c2 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a97c:	6928      	ldr	r0, [r5, #16]
   1a97e:	4621      	mov	r1, r4
   1a980:	f7ff fd6a 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a984:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a986:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a988:	69a8      	ldr	r0, [r5, #24]
   1a98a:	f7ff fd65 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a98e:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a990:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a992:	6868      	ldr	r0, [r5, #4]
   1a994:	f7ff fd60 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a998:	682b      	ldr	r3, [r5, #0]
   1a99a:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a99e:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a9a0:	6819      	ldr	r1, [r3, #0]
   1a9a2:	68eb      	ldr	r3, [r5, #12]
   1a9a4:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
   1a9a8:	681a      	ldr	r2, [r3, #0]
   1a9aa:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9ac:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a9ae:	681b      	ldr	r3, [r3, #0]
   1a9b0:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
   1a9b4:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9b6:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
   1a9ba:	6923      	ldr	r3, [r4, #16]
   1a9bc:	3301      	adds	r3, #1
   1a9be:	6123      	str	r3, [r4, #16]
   1a9c0:	e7d8      	b.n	1a974 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a9c2:	68e3      	ldr	r3, [r4, #12]
   1a9c4:	3301      	adds	r3, #1
   1a9c6:	60e3      	str	r3, [r4, #12]
   1a9c8:	e7cf      	b.n	1a96a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a9ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a9ce <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9d2:	b0ae      	sub	sp, #184	; 0xb8
   1a9d4:	4605      	mov	r5, r0
   1a9d6:	9103      	str	r1, [sp, #12]
   1a9d8:	4611      	mov	r1, r2
   1a9da:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a9dc:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a9de:	9201      	str	r2, [sp, #4]
   1a9e0:	f7ff fd24 	bl	1a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a9e4:	9901      	ldr	r1, [sp, #4]
   1a9e6:	4604      	mov	r4, r0
   1a9e8:	b1a0      	cbz	r0, 1aa14 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a9ea:	4628      	mov	r0, r5
   1a9ec:	4632      	mov	r2, r6
   1a9ee:	f7fb f84b 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a9f2:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a9f4:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1a9f6:	42ac      	cmp	r4, r5
   1a9f8:	da5b      	bge.n	1aab2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a9fa:	9b02      	ldr	r3, [sp, #8]
   1a9fc:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1a9fe:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1aa02:	9b03      	ldr	r3, [sp, #12]
   1aa04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1aa08:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1aa0a:	4798      	blx	r3
   1aa0c:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (int i = 0; i < flat_size; ++i) {
   1aa10:	3401      	adds	r4, #1
   1aa12:	e7f0      	b.n	1a9f6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1aa14:	682b      	ldr	r3, [r5, #0]
   1aa16:	2b05      	cmp	r3, #5
   1aa18:	dd01      	ble.n	1aa1e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
   1aa1a:	f003 fdda 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1aa1e:	680b      	ldr	r3, [r1, #0]
   1aa20:	2b05      	cmp	r3, #5
   1aa22:	dcfa      	bgt.n	1aa1a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1aa24:	6833      	ldr	r3, [r6, #0]
   1aa26:	2b05      	cmp	r3, #5
   1aa28:	dcf7      	bgt.n	1aa1a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    NdArrayDescsForElementwiseBroadcast(
   1aa2a:	af1a      	add	r7, sp, #104	; 0x68
   1aa2c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1aa30:	4628      	mov	r0, r5
   1aa32:	463b      	mov	r3, r7
   1aa34:	4642      	mov	r2, r8
   1aa36:	f7ff fd3a 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1aa3a:	ad24      	add	r5, sp, #144	; 0x90
   1aa3c:	2301      	movs	r3, #1
   1aa3e:	4632      	mov	r2, r6
   1aa40:	2105      	movs	r1, #5
   1aa42:	a809      	add	r0, sp, #36	; 0x24
   1aa44:	f7fa ffd1 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1aa48:	4629      	mov	r1, r5
   1aa4a:	a809      	add	r0, sp, #36	; 0x24
   1aa4c:	f7ff fd19 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1aa50:	a809      	add	r0, sp, #36	; 0x24
   1aa52:	f7fa ff2a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1aa56:	ab35      	add	r3, sp, #212	; 0xd4
   1aa58:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1aa5c:	ab36      	add	r3, sp, #216	; 0xd8
   1aa5e:	930b      	str	r3, [sp, #44]	; 0x2c
   1aa60:	ab03      	add	r3, sp, #12
   1aa62:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1aa66:	ab02      	add	r3, sp, #8
   1aa68:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1aa6c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aa70:	9404      	str	r4, [sp, #16]
   1aa72:	9a04      	ldr	r2, [sp, #16]
   1aa74:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aa76:	429a      	cmp	r2, r3
   1aa78:	da1b      	bge.n	1aab2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
   1aa7a:	2400      	movs	r4, #0
   1aa7c:	9405      	str	r4, [sp, #20]
   1aa7e:	9a05      	ldr	r2, [sp, #20]
   1aa80:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1aa82:	429a      	cmp	r2, r3
   1aa84:	da11      	bge.n	1aaaa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xdc>
   1aa86:	9406      	str	r4, [sp, #24]
   1aa88:	9a06      	ldr	r2, [sp, #24]
   1aa8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1aa8c:	429a      	cmp	r2, r3
   1aa8e:	da08      	bge.n	1aaa2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd4>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1aa90:	aa04      	add	r2, sp, #16
   1aa92:	a909      	add	r1, sp, #36	; 0x24
   1aa94:	4628      	mov	r0, r5
   1aa96:	f7ff ff61 	bl	1a95c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aa9a:	9b06      	ldr	r3, [sp, #24]
   1aa9c:	3301      	adds	r3, #1
   1aa9e:	9306      	str	r3, [sp, #24]
   1aaa0:	e7f2      	b.n	1aa88 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xba>
   1aaa2:	9b05      	ldr	r3, [sp, #20]
   1aaa4:	3301      	adds	r3, #1
   1aaa6:	9305      	str	r3, [sp, #20]
   1aaa8:	e7e9      	b.n	1aa7e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
   1aaaa:	9b04      	ldr	r3, [sp, #16]
   1aaac:	3301      	adds	r3, #1
   1aaae:	9304      	str	r3, [sp, #16]
   1aab0:	e7df      	b.n	1aa72 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa4>
}
   1aab2:	b02e      	add	sp, #184	; 0xb8
   1aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aab8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1aab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aabc:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1aabe:	4606      	mov	r6, r0
   1aac0:	460d      	mov	r5, r1
   1aac2:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aac4:	60d7      	str	r7, [r2, #12]
   1aac6:	68e2      	ldr	r2, [r4, #12]
   1aac8:	68f3      	ldr	r3, [r6, #12]
   1aaca:	429a      	cmp	r2, r3
   1aacc:	da30      	bge.n	1ab30 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x78>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aace:	6127      	str	r7, [r4, #16]
   1aad0:	6922      	ldr	r2, [r4, #16]
   1aad2:	6933      	ldr	r3, [r6, #16]
   1aad4:	429a      	cmp	r2, r3
   1aad6:	da27      	bge.n	1ab28 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x70>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1aad8:	6928      	ldr	r0, [r5, #16]
   1aada:	4621      	mov	r1, r4
   1aadc:	f7ff fcbc 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1aae0:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1aae2:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1aae4:	69a8      	ldr	r0, [r5, #24]
   1aae6:	f7ff fcb7 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1aaea:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1aaec:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1aaee:	6868      	ldr	r0, [r5, #4]
   1aaf0:	f7ff fcb2 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1aaf4:	682b      	ldr	r3, [r5, #0]
   1aaf6:	681b      	ldr	r3, [r3, #0]
   1aaf8:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1aafc:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1aafe:	681a      	ldr	r2, [r3, #0]
   1ab00:	68eb      	ldr	r3, [r5, #12]
   1ab02:	6818      	ldr	r0, [r3, #0]
   1ab04:	68ab      	ldr	r3, [r5, #8]
   1ab06:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
   1ab0a:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
   1ab0e:	f8d3 9000 	ldr.w	r9, [r3]
   1ab12:	e9d0 0100 	ldrd	r0, r1, [r0]
   1ab16:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab1a:	47c8      	blx	r9
   1ab1c:	6923      	ldr	r3, [r4, #16]
   1ab1e:	3301      	adds	r3, #1
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1ab20:	e9c8 0100 	strd	r0, r1, [r8]
   1ab24:	6123      	str	r3, [r4, #16]
   1ab26:	e7d3      	b.n	1aad0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ab28:	68e3      	ldr	r3, [r4, #12]
   1ab2a:	3301      	adds	r3, #1
   1ab2c:	60e3      	str	r3, [r4, #12]
   1ab2e:	e7ca      	b.n	1aac6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ab34 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab38:	b0ae      	sub	sp, #184	; 0xb8
   1ab3a:	4605      	mov	r5, r0
   1ab3c:	9103      	str	r1, [sp, #12]
   1ab3e:	4611      	mov	r1, r2
   1ab40:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1ab42:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1ab44:	9201      	str	r2, [sp, #4]
   1ab46:	f7ff fc71 	bl	1a42c <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1ab4a:	9901      	ldr	r1, [sp, #4]
   1ab4c:	4604      	mov	r4, r0
   1ab4e:	b1d0      	cbz	r0, 1ab86 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1ab50:	4632      	mov	r2, r6
   1ab52:	4628      	mov	r0, r5
   1ab54:	f7fa ff98 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1ab58:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1ab5a:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   1ab5c:	42b4      	cmp	r4, r6
   1ab5e:	da61      	bge.n	1ac24 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1ab60:	9b02      	ldr	r3, [sp, #8]
   1ab62:	9f36      	ldr	r7, [sp, #216]	; 0xd8
   1ab64:	9d35      	ldr	r5, [sp, #212]	; 0xd4
   1ab66:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1ab6a:	9b03      	ldr	r3, [sp, #12]
   1ab6c:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1ab70:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ab74:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab78:	47b8      	blx	r7
   1ab7a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1ab7e:	e9c5 0100 	strd	r0, r1, [r5]
    for (int i = 0; i < flat_size; ++i) {
   1ab82:	3401      	adds	r4, #1
   1ab84:	e7ea      	b.n	1ab5c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1ab86:	682b      	ldr	r3, [r5, #0]
   1ab88:	2b05      	cmp	r3, #5
   1ab8a:	dd01      	ble.n	1ab90 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   1ab8c:	f003 fd21 	bl	1e5d2 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1ab90:	680b      	ldr	r3, [r1, #0]
   1ab92:	2b05      	cmp	r3, #5
   1ab94:	dcfa      	bgt.n	1ab8c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1ab96:	6833      	ldr	r3, [r6, #0]
   1ab98:	2b05      	cmp	r3, #5
   1ab9a:	dcf7      	bgt.n	1ab8c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   1ab9c:	af1a      	add	r7, sp, #104	; 0x68
   1ab9e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1aba2:	4628      	mov	r0, r5
   1aba4:	463b      	mov	r3, r7
   1aba6:	4642      	mov	r2, r8
   1aba8:	f7ff fc81 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1abac:	ad24      	add	r5, sp, #144	; 0x90
   1abae:	2301      	movs	r3, #1
   1abb0:	4632      	mov	r2, r6
   1abb2:	2105      	movs	r1, #5
   1abb4:	a809      	add	r0, sp, #36	; 0x24
   1abb6:	f7fa ff18 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1abba:	4629      	mov	r1, r5
   1abbc:	a809      	add	r0, sp, #36	; 0x24
   1abbe:	f7ff fc60 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1abc2:	a809      	add	r0, sp, #36	; 0x24
   1abc4:	f7fa fe71 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1abc8:	ab35      	add	r3, sp, #212	; 0xd4
   1abca:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1abce:	ab36      	add	r3, sp, #216	; 0xd8
   1abd0:	930b      	str	r3, [sp, #44]	; 0x2c
   1abd2:	ab03      	add	r3, sp, #12
   1abd4:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1abd8:	ab02      	add	r3, sp, #8
   1abda:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1abde:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1abe2:	9404      	str	r4, [sp, #16]
   1abe4:	9a04      	ldr	r2, [sp, #16]
   1abe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1abe8:	429a      	cmp	r2, r3
   1abea:	da1b      	bge.n	1ac24 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
   1abec:	2400      	movs	r4, #0
   1abee:	9405      	str	r4, [sp, #20]
   1abf0:	9a05      	ldr	r2, [sp, #20]
   1abf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1abf4:	429a      	cmp	r2, r3
   1abf6:	da11      	bge.n	1ac1c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
   1abf8:	9406      	str	r4, [sp, #24]
   1abfa:	9a06      	ldr	r2, [sp, #24]
   1abfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1abfe:	429a      	cmp	r2, r3
   1ac00:	da08      	bge.n	1ac14 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1ac02:	aa04      	add	r2, sp, #16
   1ac04:	a909      	add	r1, sp, #36	; 0x24
   1ac06:	4628      	mov	r0, r5
   1ac08:	f7ff ff56 	bl	1aab8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ac0c:	9b06      	ldr	r3, [sp, #24]
   1ac0e:	3301      	adds	r3, #1
   1ac10:	9306      	str	r3, [sp, #24]
   1ac12:	e7f2      	b.n	1abfa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc6>
   1ac14:	9b05      	ldr	r3, [sp, #20]
   1ac16:	3301      	adds	r3, #1
   1ac18:	9305      	str	r3, [sp, #20]
   1ac1a:	e7e9      	b.n	1abf0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   1ac1c:	9b04      	ldr	r3, [sp, #16]
   1ac1e:	3301      	adds	r3, #1
   1ac20:	9304      	str	r3, [sp, #16]
   1ac22:	e7df      	b.n	1abe4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
}
   1ac24:	b02e      	add	sp, #184	; 0xb8
   1ac26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac2a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    }
  }
}

template <typename T>
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac2a:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1ac2e:	ed2d 8b04 	vpush	{d8-d9}
   1ac32:	461d      	mov	r5, r3
                        T* output_data) {
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac34:	680b      	ldr	r3, [r1, #0]
  *min = params.float_activation_min;
   1ac36:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  *max = params.float_activation_max;
   1ac3a:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac3e:	b098      	sub	sp, #96	; 0x60
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac40:	2b04      	cmp	r3, #4
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac42:	4693      	mov	fp, r2
   1ac44:	460c      	mov	r4, r1
   1ac46:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac48:	dd01      	ble.n	1ac4e <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x24>
   1ac4a:	f003 fcc2 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1ac4e:	682b      	ldr	r3, [r5, #0]
   1ac50:	2b04      	cmp	r3, #4
   1ac52:	dcfa      	bgt.n	1ac4a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1ac54:	6813      	ldr	r3, [r2, #0]
   1ac56:	2b04      	cmp	r3, #4
   1ac58:	dcf7      	bgt.n	1ac4a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
    return RuntimeShape(new_shape_size, shape, 1);
   1ac5a:	2301      	movs	r3, #1
   1ac5c:	2104      	movs	r1, #4
   1ac5e:	a802      	add	r0, sp, #8
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   1ac60:	f10d 0a20 	add.w	sl, sp, #32
   1ac64:	f7fa fec1 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1ac68:	4620      	mov	r0, r4
   1ac6a:	ab10      	add	r3, sp, #64	; 0x40
   1ac6c:	4652      	mov	r2, sl
   1ac6e:	4629      	mov	r1, r5
   1ac70:	f7fb f8bf 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1ac74:	2400      	movs	r4, #0
   1ac76:	2100      	movs	r1, #0
   1ac78:	a802      	add	r0, sp, #8
   1ac7a:	f7fa fe21 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ac7e:	42a0      	cmp	r0, r4
   1ac80:	dd52      	ble.n	1ad28 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfe>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1ac82:	2500      	movs	r5, #0
   1ac84:	2101      	movs	r1, #1
   1ac86:	a802      	add	r0, sp, #8
   1ac88:	f7fa fe1a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ac8c:	42a8      	cmp	r0, r5
   1ac8e:	dd49      	ble.n	1ad24 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfa>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1ac90:	2600      	movs	r6, #0
   1ac92:	2102      	movs	r1, #2
   1ac94:	a802      	add	r0, sp, #8
   1ac96:	f7fa fe13 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ac9a:	42b0      	cmp	r0, r6
   1ac9c:	dd40      	ble.n	1ad20 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1ac9e:	2700      	movs	r7, #0
   1aca0:	2103      	movs	r1, #3
   1aca2:	a802      	add	r0, sp, #8
   1aca4:	f7fa fe0c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1aca8:	42b8      	cmp	r0, r7
   1acaa:	dd37      	ble.n	1ad1c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf2>
          output_data[Offset(output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1acac:	9700      	str	r7, [sp, #0]
   1acae:	4633      	mov	r3, r6
   1acb0:	462a      	mov	r2, r5
   1acb2:	4621      	mov	r1, r4
   1acb4:	4650      	mov	r0, sl
   1acb6:	f7fa fefb 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1acba:	9700      	str	r7, [sp, #0]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1acbc:	4681      	mov	r9, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1acbe:	4633      	mov	r3, r6
   1acc0:	462a      	mov	r2, r5
   1acc2:	4621      	mov	r1, r4
   1acc4:	a810      	add	r0, sp, #64	; 0x40
   1acc6:	f7fa fef3 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1acca:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1accc:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1acd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   1acd4:	edd9 7a00 	vldr	s15, [r9]
   1acd8:	ed90 8a00 	vldr	s16, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   1acdc:	9700      	str	r7, [sp, #0]
              ActivationFunctionWithMinMax(
   1acde:	ee27 8a88 	vmul.f32	s16, s15, s16
          output_data[Offset(output_shape, b, y, x, c)] =
   1ace2:	4633      	mov	r3, r6
   1ace4:	462a      	mov	r2, r5
   1ace6:	4621      	mov	r1, r4
   1ace8:	a802      	add	r0, sp, #8
   1acea:	f7fa feab 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1acee:	eeb4 8ac9 	vcmpe.f32	s16, s18
   1acf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acf6:	bfb4      	ite	lt
   1acf8:	eef0 7a49 	vmovlt.f32	s15, s18
   1acfc:	eef0 7a48 	vmovge.f32	s15, s16
   1ad00:	eef4 7ae8 	vcmpe.f32	s15, s17
   1ad04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1ad06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ad0e:	bf88      	it	hi
   1ad10:	eef0 7a68 	vmovhi.f32	s15, s17
   1ad14:	edc0 7a00 	vstr	s15, [r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1ad18:	3701      	adds	r7, #1
   1ad1a:	e7c1      	b.n	1aca0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1ad1c:	3601      	adds	r6, #1
   1ad1e:	e7b8      	b.n	1ac92 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x68>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1ad20:	3501      	adds	r5, #1
   1ad22:	e7af      	b.n	1ac84 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1ad24:	3401      	adds	r4, #1
   1ad26:	e7a6      	b.n	1ac76 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4c>
  const RuntimeShape output_shape =
   1ad28:	a802      	add	r0, sp, #8
   1ad2a:	f7fa fdbe 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
                  output_activation_min, output_activation_max);
        }
      }
    }
  }
}
   1ad2e:	b018      	add	sp, #96	; 0x60
   1ad30:	ecbd 8b04 	vpop	{d8-d9}
   1ad34:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001ad38 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul4DSlow(
   1ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad3c:	b09b      	sub	sp, #108	; 0x6c
  ruy::profiler::ScopeLabel label("BroadcastMul4DSlow");

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad3e:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
inline void BroadcastMul4DSlow(
   1ad42:	9203      	str	r2, [sp, #12]
   1ad44:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad46:	4652      	mov	r2, sl
inline void BroadcastMul4DSlow(
   1ad48:	4608      	mov	r0, r1
   1ad4a:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad4c:	ab12      	add	r3, sp, #72	; 0x48
   1ad4e:	f7fb f850 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1ad52:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ad54:	2301      	movs	r3, #1
   1ad56:	2104      	movs	r1, #4
   1ad58:	a804      	add	r0, sp, #16
   1ad5a:	f7fa fe46 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ad5e:	2600      	movs	r6, #0
   1ad60:	2100      	movs	r1, #0
   1ad62:	a804      	add	r0, sp, #16
   1ad64:	f7fa fdac 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad68:	42b0      	cmp	r0, r6
   1ad6a:	dd53      	ble.n	1ae14 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ad6c:	2700      	movs	r7, #0
   1ad6e:	f10d 0810 	add.w	r8, sp, #16
   1ad72:	2101      	movs	r1, #1
   1ad74:	4640      	mov	r0, r8
   1ad76:	f7fa fda3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad7a:	42b8      	cmp	r0, r7
   1ad7c:	dd48      	ble.n	1ae10 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ad7e:	f04f 0b00 	mov.w	fp, #0
   1ad82:	2102      	movs	r1, #2
   1ad84:	4640      	mov	r0, r8
   1ad86:	f7fa fd9b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad8a:	4558      	cmp	r0, fp
   1ad8c:	dd3e      	ble.n	1ae0c <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ad8e:	f04f 0900 	mov.w	r9, #0
   1ad92:	2103      	movs	r1, #3
   1ad94:	4640      	mov	r0, r8
   1ad96:	f7fa fd93 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad9a:	4548      	cmp	r0, r9
   1ad9c:	dd33      	ble.n	1ae06 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xce>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1ad9e:	f8cd 9000 	str.w	r9, [sp]
   1ada2:	465b      	mov	r3, fp
   1ada4:	463a      	mov	r2, r7
   1ada6:	4631      	mov	r1, r6
   1ada8:	4650      	mov	r0, sl
   1adaa:	f7fa fe81 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1adae:	9b03      	ldr	r3, [sp, #12]
          const int32 input1_val =
   1adb0:	6862      	ldr	r2, [r4, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1adb2:	561d      	ldrsb	r5, [r3, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1adb4:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   1adb8:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1adba:	465b      	mov	r3, fp
   1adbc:	463a      	mov	r2, r7
   1adbe:	4631      	mov	r1, r6
   1adc0:	a812      	add	r0, sp, #72	; 0x48
   1adc2:	f7fa fe75 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1adc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
          const int32 input2_val =
   1adc8:	68a2      	ldr	r2, [r4, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1adca:	5618      	ldrsb	r0, [r3, r0]
          const int32 input2_val =
   1adcc:	4410      	add	r0, r2
          const int32 unclamped_result =
              params.output_offset +
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1adce:	4368      	muls	r0, r5
   1add0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1add4:	f7ee fd52 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   1add8:	68e5      	ldr	r5, [r4, #12]
                                            params.output_multiplier,
                                            params.output_shift);
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
              std::max(params.quantized_activation_min, unclamped_result));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1adda:	f8cd 9000 	str.w	r9, [sp]
              params.output_offset +
   1adde:	4405      	add	r5, r0
   1ade0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ade2:	4285      	cmp	r5, r0
   1ade4:	bfb8      	it	lt
   1ade6:	4605      	movlt	r5, r0
   1ade8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1adea:	4285      	cmp	r5, r0
   1adec:	bfa8      	it	ge
   1adee:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1adf0:	465b      	mov	r3, fp
   1adf2:	463a      	mov	r2, r7
   1adf4:	4631      	mov	r1, r6
   1adf6:	4640      	mov	r0, r8
   1adf8:	f7fa fe24 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1adfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1adfe:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1ae02:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ae04:	e7c5      	b.n	1ad92 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ae06:	f10b 0b01 	add.w	fp, fp, #1
   1ae0a:	e7ba      	b.n	1ad82 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ae0c:	3701      	adds	r7, #1
   1ae0e:	e7ae      	b.n	1ad6e <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ae10:	3601      	adds	r6, #1
   1ae12:	e7a5      	b.n	1ad60 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x28>
  const RuntimeShape extended_output_shape =
   1ae14:	a804      	add	r0, sp, #16
   1ae16:	f7fa fd48 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   1ae1a:	b01b      	add	sp, #108	; 0x6c
   1ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ae20 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               uint8* output_data) {
   1ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae24:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae26:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
                               uint8* output_data) {
   1ae2a:	9203      	str	r2, [sp, #12]
   1ae2c:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae2e:	4652      	mov	r2, sl
                               uint8* output_data) {
   1ae30:	4608      	mov	r0, r1
   1ae32:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae34:	ab12      	add	r3, sp, #72	; 0x48
   1ae36:	f7fa ffdc 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1ae3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	2104      	movs	r1, #4
   1ae40:	a804      	add	r0, sp, #16
   1ae42:	f7fa fdd2 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ae46:	2600      	movs	r6, #0
   1ae48:	2100      	movs	r1, #0
   1ae4a:	a804      	add	r0, sp, #16
   1ae4c:	f7fa fd38 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae50:	42b0      	cmp	r0, r6
   1ae52:	dd53      	ble.n	1aefc <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ae54:	2700      	movs	r7, #0
   1ae56:	f10d 0810 	add.w	r8, sp, #16
   1ae5a:	2101      	movs	r1, #1
   1ae5c:	4640      	mov	r0, r8
   1ae5e:	f7fa fd2f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae62:	42b8      	cmp	r0, r7
   1ae64:	dd48      	ble.n	1aef8 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ae66:	f04f 0b00 	mov.w	fp, #0
   1ae6a:	2102      	movs	r1, #2
   1ae6c:	4640      	mov	r0, r8
   1ae6e:	f7fa fd27 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae72:	4558      	cmp	r0, fp
   1ae74:	dd3e      	ble.n	1aef4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ae76:	f04f 0900 	mov.w	r9, #0
   1ae7a:	2103      	movs	r1, #3
   1ae7c:	4640      	mov	r0, r8
   1ae7e:	f7fa fd1f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae82:	4548      	cmp	r0, r9
   1ae84:	dd33      	ble.n	1aeee <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xce>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1ae86:	f8cd 9000 	str.w	r9, [sp]
   1ae8a:	465b      	mov	r3, fp
   1ae8c:	463a      	mov	r2, r7
   1ae8e:	4631      	mov	r1, r6
   1ae90:	4650      	mov	r0, sl
   1ae92:	f7fa fe0d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1ae96:	9b03      	ldr	r3, [sp, #12]
   1ae98:	6862      	ldr	r2, [r4, #4]
   1ae9a:	5c1d      	ldrb	r5, [r3, r0]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1ae9c:	f8cd 9000 	str.w	r9, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1aea0:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1aea2:	465b      	mov	r3, fp
   1aea4:	463a      	mov	r2, r7
   1aea6:	4631      	mov	r1, r6
   1aea8:	a812      	add	r0, sp, #72	; 0x48
   1aeaa:	f7fa fe01 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1aeae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aeb0:	68a2      	ldr	r2, [r4, #8]
   1aeb2:	5c18      	ldrb	r0, [r3, r0]
   1aeb4:	4410      	add	r0, r2
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1aeb6:	4368      	muls	r0, r5
   1aeb8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1aebc:	f7ee fcde 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   1aec0:	68e5      	ldr	r5, [r4, #12]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1aec2:	f8cd 9000 	str.w	r9, [sp]
              params.output_offset +
   1aec6:	4405      	add	r5, r0
   1aec8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1aeca:	4285      	cmp	r5, r0
   1aecc:	bfb8      	it	lt
   1aece:	4605      	movlt	r5, r0
   1aed0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1aed2:	4285      	cmp	r5, r0
   1aed4:	bfa8      	it	ge
   1aed6:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1aed8:	465b      	mov	r3, fp
   1aeda:	463a      	mov	r2, r7
   1aedc:	4631      	mov	r1, r6
   1aede:	4640      	mov	r0, r8
   1aee0:	f7fa fdb0 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1aee4:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1aee6:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1aeea:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1aeec:	e7c5      	b.n	1ae7a <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1aeee:	f10b 0b01 	add.w	fp, fp, #1
   1aef2:	e7ba      	b.n	1ae6a <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1aef4:	3701      	adds	r7, #1
   1aef6:	e7ae      	b.n	1ae56 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1aef8:	3601      	adds	r6, #1
   1aefa:	e7a5      	b.n	1ae48 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   1aefc:	a804      	add	r0, sp, #16
   1aefe:	f7fa fcd4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1af02:	b01b      	add	sp, #108	; 0x6c
   1af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001af08 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>:
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   1af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af0c:	4616      	mov	r6, r2
   1af0e:	461d      	mov	r5, r3
  params->quantized_activation_min = min;
   1af10:	e9d0 2300 	ldrd	r2, r3, [r0]
   1af14:	b0be      	sub	sp, #248	; 0xf8
  params->quantized_activation_max = max;
   1af16:	e9cd 2335 	strd	r2, r3, [sp, #212]	; 0xd4
    op_params.input1_offset = -input1->params.zero_point;
   1af1a:	690b      	ldr	r3, [r1, #16]
   1af1c:	425b      	negs	r3, r3
   1af1e:	932b      	str	r3, [sp, #172]	; 0xac
    op_params.input2_offset = -input2->params.zero_point;
   1af20:	6933      	ldr	r3, [r6, #16]
   1af22:	425b      	negs	r3, r3
   1af24:	932c      	str	r3, [sp, #176]	; 0xb0
    op_params.output_offset = output->params.zero_point;
   1af26:	692b      	ldr	r3, [r5, #16]
   1af28:	932d      	str	r3, [sp, #180]	; 0xb4
    op_params.output_multiplier = data->output_multiplier;
   1af2a:	6883      	ldr	r3, [r0, #8]
   1af2c:	932e      	str	r3, [sp, #184]	; 0xb8
    op_params.output_shift = data->output_shift;
   1af2e:	68c3      	ldr	r3, [r0, #12]
   1af30:	932f      	str	r3, [sp, #188]	; 0xbc
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af32:	a824      	add	r0, sp, #144	; 0x90
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   1af34:	460f      	mov	r7, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af36:	f7fa fcfd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1af3a:	4631      	mov	r1, r6
   1af3c:	a81e      	add	r0, sp, #120	; 0x78
   1af3e:	f7fa fcf9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1af42:	aa2a      	add	r2, sp, #168	; 0xa8
   1af44:	a91e      	add	r1, sp, #120	; 0x78
   1af46:	a824      	add	r0, sp, #144	; 0x90
   1af48:	f7fa fe6b 	bl	15c22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1af4c:	4604      	mov	r4, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af4e:	a81e      	add	r0, sp, #120	; 0x78
   1af50:	f7fa fcab 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1af54:	a824      	add	r0, sp, #144	; 0x90
   1af56:	f7fa fca8 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   1af5a:	782b      	ldrb	r3, [r5, #0]
   1af5c:	2b09      	cmp	r3, #9
   1af5e:	d163      	bne.n	1b028 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x120>
      if (need_broadcast) {
   1af60:	f10d 0860 	add.w	r8, sp, #96	; 0x60
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   1af64:	4639      	mov	r1, r7
   1af66:	a824      	add	r0, sp, #144	; 0x90
      if (need_broadcast) {
   1af68:	b314      	cbz	r4, 1afb0 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa8>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   1af6a:	f7fa fce3 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1af6e:	687a      	ldr	r2, [r7, #4]
   1af70:	9205      	str	r2, [sp, #20]
   1af72:	4631      	mov	r1, r6
   1af74:	a81e      	add	r0, sp, #120	; 0x78
   1af76:	f7fa fcdd 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1af7a:	4629      	mov	r1, r5
   1af7c:	4640      	mov	r0, r8
   1af7e:	6874      	ldr	r4, [r6, #4]
   1af80:	f7fa fcd8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1af84:	686b      	ldr	r3, [r5, #4]
   1af86:	9a05      	ldr	r2, [sp, #20]
   1af88:	9400      	str	r4, [sp, #0]
   1af8a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1af8e:	a924      	add	r1, sp, #144	; 0x90
   1af90:	ab1e      	add	r3, sp, #120	; 0x78
   1af92:	a82a      	add	r0, sp, #168	; 0xa8
   1af94:	f7ff fed0 	bl	1ad38 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   1af98:	4640      	mov	r0, r8
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1af9a:	f7fa fc86 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1af9e:	a81e      	add	r0, sp, #120	; 0x78
   1afa0:	f7fa fc83 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1afa4:	a824      	add	r0, sp, #144	; 0x90
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   1afa6:	f7fa fc80 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1afaa:	b03e      	add	sp, #248	; 0xf8
   1afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   1afb0:	f7fa fcc0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1afb4:	4631      	mov	r1, r6
   1afb6:	a81e      	add	r0, sp, #120	; 0x78
   1afb8:	687f      	ldr	r7, [r7, #4]
   1afba:	f7fa fcbb 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1afbe:	4629      	mov	r1, r5
   1afc0:	4640      	mov	r0, r8
   1afc2:	6876      	ldr	r6, [r6, #4]
   1afc4:	f7fa fcb6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1afc8:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   1afcc:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1afce:	686d      	ldr	r5, [r5, #4]
   1afd0:	dd01      	ble.n	1afd6 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xce>
   1afd2:	f003 fafe 	bl	1e5d2 <abort>
  const int size_1 = shape.FlatSize();
   1afd6:	a824      	add	r0, sp, #144	; 0x90
   1afd8:	f7fa fcf7 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1afdc:	4681      	mov	r9, r0
  const int size_2 = check_shape_0.FlatSize();
   1afde:	a81e      	add	r0, sp, #120	; 0x78
   1afe0:	f7fa fcf3 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1afe4:	4682      	mov	sl, r0
  const int size_3 = check_shape_1.FlatSize();
   1afe6:	4640      	mov	r0, r8
   1afe8:	f7fa fcef 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   1afec:	45d1      	cmp	r9, sl
   1afee:	d1f0      	bne.n	1afd2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  TFLITE_CHECK_EQ(size_2, size_3);
   1aff0:	4581      	cmp	r9, r0
   1aff2:	d1ee      	bne.n	1afd2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  for (int i = 0; i < size; ++i) {
   1aff4:	454c      	cmp	r4, r9
   1aff6:	dacf      	bge.n	1af98 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x90>
    const int32 input1_val = params.input1_offset + input1_data[i];
   1aff8:	573b      	ldrsb	r3, [r7, r4]
   1affa:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   1affc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   1affe:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b000:	5730      	ldrsb	r0, [r6, r4]
   1b002:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1b004:	4358      	muls	r0, r3
   1b006:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   1b00a:	f7ee fc37 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   1b00e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1b010:	4403      	add	r3, r0
    output_data[i] = static_cast<T>(clamped_output);
   1b012:	9835      	ldr	r0, [sp, #212]	; 0xd4
   1b014:	4283      	cmp	r3, r0
   1b016:	bfb8      	it	lt
   1b018:	4603      	movlt	r3, r0
   1b01a:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1b01c:	4283      	cmp	r3, r0
   1b01e:	bfa8      	it	ge
   1b020:	4603      	movge	r3, r0
   1b022:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1b024:	3401      	adds	r4, #1
   1b026:	e7e5      	b.n	1aff4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xec>
    } else if (output->type == kTfLiteUInt8) {
   1b028:	2b03      	cmp	r3, #3
   1b02a:	d1be      	bne.n	1afaa <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa2>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1b02c:	4639      	mov	r1, r7
      if (need_broadcast) {
   1b02e:	b1d4      	cbz	r4, 1b066 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x15e>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1b030:	a824      	add	r0, sp, #144	; 0x90
   1b032:	f7fa fc7f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b036:	ac18      	add	r4, sp, #96	; 0x60
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b038:	687a      	ldr	r2, [r7, #4]
   1b03a:	9205      	str	r2, [sp, #20]
   1b03c:	4631      	mov	r1, r6
   1b03e:	a81e      	add	r0, sp, #120	; 0x78
   1b040:	f7fa fc78 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b044:	4629      	mov	r1, r5
   1b046:	4620      	mov	r0, r4
   1b048:	6876      	ldr	r6, [r6, #4]
   1b04a:	f7fa fc73 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b04e:	686b      	ldr	r3, [r5, #4]
   1b050:	9a05      	ldr	r2, [sp, #20]
   1b052:	9600      	str	r6, [sp, #0]
   1b054:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b058:	a82a      	add	r0, sp, #168	; 0xa8
   1b05a:	ab1e      	add	r3, sp, #120	; 0x78
   1b05c:	a924      	add	r1, sp, #144	; 0x90
   1b05e:	f7ff fedf 	bl	1ae20 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   1b062:	4620      	mov	r0, r4
   1b064:	e799      	b.n	1af9a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x92>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   1b066:	a812      	add	r0, sp, #72	; 0x48
   1b068:	f7fa fc64 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b06c:	4631      	mov	r1, r6
   1b06e:	a80c      	add	r0, sp, #48	; 0x30
   1b070:	687f      	ldr	r7, [r7, #4]
   1b072:	f7fa fc5f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b076:	4629      	mov	r1, r5
   1b078:	a806      	add	r0, sp, #24
   1b07a:	6876      	ldr	r6, [r6, #4]
   1b07c:	f7fa fc5a 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b080:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   1b084:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b086:	686d      	ldr	r5, [r5, #4]
   1b088:	dca3      	bgt.n	1afd2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1b08a:	aa06      	add	r2, sp, #24
   1b08c:	a90c      	add	r1, sp, #48	; 0x30
   1b08e:	a812      	add	r0, sp, #72	; 0x48
   1b090:	f7fb fc94 	bl	169bc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   1b094:	4680      	mov	r8, r0
  for (int i = 0; i < size; ++i) {
   1b096:	45a0      	cmp	r8, r4
   1b098:	dd17      	ble.n	1b0ca <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x1c2>
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b09a:	5d3b      	ldrb	r3, [r7, r4]
   1b09c:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b09e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b0a0:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b0a2:	5d30      	ldrb	r0, [r6, r4]
   1b0a4:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1b0a6:	4358      	muls	r0, r3
   1b0a8:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   1b0ac:	f7ee fbe6 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   1b0b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1b0b2:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   1b0b4:	9835      	ldr	r0, [sp, #212]	; 0xd4
   1b0b6:	4283      	cmp	r3, r0
   1b0b8:	bfb8      	it	lt
   1b0ba:	4603      	movlt	r3, r0
   1b0bc:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1b0be:	4283      	cmp	r3, r0
   1b0c0:	bfa8      	it	ge
   1b0c2:	4603      	movge	r3, r0
   1b0c4:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1b0c6:	3401      	adds	r4, #1
   1b0c8:	e7e5      	b.n	1b096 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x18e>
   1b0ca:	a806      	add	r0, sp, #24
   1b0cc:	f7fa fbed 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1b0d0:	a80c      	add	r0, sp, #48	; 0x30
   1b0d2:	f7fa fbea 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1b0d6:	a812      	add	r0, sp, #72	; 0x48
   1b0d8:	e765      	b.n	1afa6 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x9e>

0001b0da <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
                   TfLiteTensor* output) {
   1b0da:	b410      	push	{r4}
   1b0dc:	4618      	mov	r0, r3
   1b0de:	9b03      	ldr	r3, [sp, #12]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   1b0e0:	781c      	ldrb	r4, [r3, #0]
   1b0e2:	2c09      	cmp	r4, #9
                   TfLiteTensor* output) {
   1b0e4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   1b0e8:	d001      	beq.n	1b0ee <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x14>
   1b0ea:	2c03      	cmp	r4, #3
   1b0ec:	d103      	bne.n	1b0f6 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1c>
}
   1b0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b0f2:	f7ff bf09 	b.w	1af08 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>
   1b0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b0fa:	4770      	bx	lr

0001b0fc <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>:
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    input = GetInput(context, node, 0);
   1b0fe:	6816      	ldr	r6, [r2, #0]
   1b100:	688b      	ldr	r3, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   1b102:	6875      	ldr	r5, [r6, #4]
   1b104:	68b1      	ldr	r1, [r6, #8]
    if (NumInputs(node) == 3) {
   1b106:	6837      	ldr	r7, [r6, #0]
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b108:	4604      	mov	r4, r0
   1b10a:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   1b10e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    input = GetInput(context, node, 0);
   1b112:	6045      	str	r5, [r0, #4]
    paddings = GetInput(context, node, 1);
   1b114:	6081      	str	r1, [r0, #8]
    if (NumInputs(node) == 3) {
   1b116:	2f03      	cmp	r7, #3
    constant_values = nullptr;
   1b118:	f04f 0000 	mov.w	r0, #0
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b11c:	b087      	sub	sp, #28
    constant_values = nullptr;
   1b11e:	6020      	str	r0, [r4, #0]
    if (NumInputs(node) == 3) {
   1b120:	d105      	bne.n	1b12e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x32>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1b122:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   1b124:	1c77      	adds	r7, r6, #1
    return &context->tensors[node->inputs->data[index]];
   1b126:	bf18      	it	ne
   1b128:	eb03 1086 	addne.w	r0, r3, r6, lsl #6
      constant_values = GetOptionalInputTensor(context, node, 2);
   1b12c:	6020      	str	r0, [r4, #0]
  return &context->tensors[node->outputs->data[index]];
   1b12e:	6852      	ldr	r2, [r2, #4]
   1b130:	6852      	ldr	r2, [r2, #4]
   1b132:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    output = GetOutput(context, node, 0);
   1b136:	60e3      	str	r3, [r4, #12]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1b138:	68ab      	ldr	r3, [r5, #8]
    dims = NumDimensions(input);
   1b13a:	681b      	ldr	r3, [r3, #0]
   1b13c:	6123      	str	r3, [r4, #16]
    resizing_category = ResizingCategory::kGenericResize;
   1b13e:	2302      	movs	r3, #2
   1b140:	7523      	strb	r3, [r4, #20]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   1b142:	4668      	mov	r0, sp
   1b144:	f7fa fbf6 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b148:	4668      	mov	r0, sp
   1b14a:	f7fa fc3e 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1b14e:	4605      	mov	r5, r0
   1b150:	4668      	mov	r0, sp
   1b152:	f7fa fbaa 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    const int32* paddings_data = GetTensorData<int32>(paddings);
   1b156:	68a2      	ldr	r2, [r4, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b158:	b18a      	cbz	r2, 1b17e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x82>
   1b15a:	6853      	ldr	r3, [r2, #4]
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   1b15c:	7d12      	ldrb	r2, [r2, #20]
   1b15e:	2a01      	cmp	r2, #1
   1b160:	d10a      	bne.n	1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
    if (IsConstantTensor(paddings) && paddings_total == 8 &&
   1b162:	2d08      	cmp	r5, #8
   1b164:	d108      	bne.n	1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
   1b166:	6819      	ldr	r1, [r3, #0]
   1b168:	b931      	cbnz	r1, 1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   1b16a:	6859      	ldr	r1, [r3, #4]
   1b16c:	b921      	cbnz	r1, 1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
   1b16e:	6999      	ldr	r1, [r3, #24]
   1b170:	b911      	cbnz	r1, 1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
        (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   1b172:	69db      	ldr	r3, [r3, #28]
   1b174:	b903      	cbnz	r3, 1b178 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
      resizing_category = ResizingCategory::kImageStyle;
   1b176:	7522      	strb	r2, [r4, #20]
  }
   1b178:	4620      	mov	r0, r4
   1b17a:	b007      	add	sp, #28
   1b17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b17e:	4613      	mov	r3, r2
   1b180:	e7ec      	b.n	1b15c <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x60>

0001b182 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b186:	b09f      	sub	sp, #124	; 0x7c
   1b188:	4606      	mov	r6, r0
   1b18a:	4614      	mov	r4, r2
   1b18c:	461d      	mov	r5, r3
    return RuntimeShape(new_shape_size, shape, 1);
   1b18e:	460a      	mov	r2, r1
   1b190:	2301      	movs	r3, #1
   1b192:	2104      	movs	r1, #4
   1b194:	a812      	add	r0, sp, #72	; 0x48
   1b196:	f7fa fc28 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b19a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b19c:	2301      	movs	r3, #1
   1b19e:	2104      	movs	r1, #4
   1b1a0:	a818      	add	r0, sp, #96	; 0x60
   1b1a2:	f7fa fc22 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b1a6:	f996 0000 	ldrsb.w	r0, [r6]
   1b1aa:	2804      	cmp	r0, #4
   1b1ac:	dd01      	ble.n	1b1b2 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b1ae:	f003 fa10 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b1b2:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b1b6:	2904      	cmp	r1, #4
   1b1b8:	dcf9      	bgt.n	1b1ae <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b1ba:	2300      	movs	r3, #0
   1b1bc:	f06f 0203 	mvn.w	r2, #3
   1b1c0:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b1c4:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b1c8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b1cc:	fb02 c200 	mla	r2, r2, r0, ip
   1b1d0:	1d37      	adds	r7, r6, #4
   1b1d2:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b1d4:	4298      	cmp	r0, r3
   1b1d6:	dc13      	bgt.n	1b200 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b1d8:	2300      	movs	r3, #0
   1b1da:	f06f 0203 	mvn.w	r2, #3
   1b1de:	a81e      	add	r0, sp, #120	; 0x78
   1b1e0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b1e4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b1e8:	fb02 0201 	mla	r2, r2, r1, r0
   1b1ec:	3618      	adds	r6, #24
   1b1ee:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b1f0:	4299      	cmp	r1, r3
   1b1f2:	dd0b      	ble.n	1b20c <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b1f4:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b1f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b1fc:	3301      	adds	r3, #1
   1b1fe:	e7f7      	b.n	1b1f0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b200:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b204:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b208:	3301      	adds	r3, #1
   1b20a:	e7e3      	b.n	1b1d4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b20c:	2100      	movs	r1, #0
   1b20e:	a818      	add	r0, sp, #96	; 0x60
   1b210:	f7fa fb56 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b214:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b216:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b218:	a818      	add	r0, sp, #96	; 0x60
   1b21a:	f7fa fb51 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b21e:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b220:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b222:	a818      	add	r0, sp, #96	; 0x60
   1b224:	f7fa fb4c 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b228:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b22a:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b22c:	a818      	add	r0, sp, #96	; 0x60
   1b22e:	f7fa fb47 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b234:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[1];
   1b236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b238:	9302      	str	r3, [sp, #8]
  const int left_w_padding = left_padding_copy[2];
   1b23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b23c:	9303      	str	r3, [sp, #12]
  const int left_d_padding = left_padding_copy[3];
   1b23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b240:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b242:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b244:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b246:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b248:	9306      	str	r3, [sp, #24]
   1b24a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1b24e:	009b      	lsls	r3, r3, #2
   1b250:	9307      	str	r3, [sp, #28]
              out_b >= output_batch - right_b_padding ||
   1b252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b254:	6829      	ldr	r1, [r5, #0]
              out_b >= output_batch - right_b_padding ||
   1b256:	eba8 0303 	sub.w	r3, r8, r3
   1b25a:	9309      	str	r3, [sp, #36]	; 0x24
              out_h >= output_height - right_h_padding ||
   1b25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  const int output_depth = ext_output_shape.Dims(3);
   1b25e:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b260:	2600      	movs	r6, #0
              out_h >= output_height - right_h_padding ||
   1b262:	eba9 0e03 	sub.w	lr, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b266:	4546      	cmp	r6, r8
   1b268:	da39      	bge.n	1b2de <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b26a:	f04f 0c00 	mov.w	ip, #0
   1b26e:	45cc      	cmp	ip, r9
   1b270:	da33      	bge.n	1b2da <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
              out_w >= output_width - right_w_padding ||
   1b272:	9b05      	ldr	r3, [sp, #20]
   1b274:	ebaa 0b03 	sub.w	fp, sl, r3
              out_d >= output_depth - right_d_padding) {
   1b278:	9b06      	ldr	r3, [sp, #24]
   1b27a:	1afb      	subs	r3, r7, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b27c:	2000      	movs	r0, #0
              out_d >= output_depth - right_d_padding) {
   1b27e:	9308      	str	r3, [sp, #32]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b280:	4550      	cmp	r0, sl
   1b282:	da27      	bge.n	1b2d4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b284:	2500      	movs	r5, #0
   1b286:	42bd      	cmp	r5, r7
   1b288:	da1e      	bge.n	1b2c8 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b28a:	9b01      	ldr	r3, [sp, #4]
   1b28c:	429e      	cmp	r6, r3
   1b28e:	db19      	blt.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   1b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b292:	42b3      	cmp	r3, r6
   1b294:	dd16      	ble.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   1b296:	9b02      	ldr	r3, [sp, #8]
   1b298:	459c      	cmp	ip, r3
   1b29a:	db13      	blt.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   1b29c:	45e6      	cmp	lr, ip
   1b29e:	dd11      	ble.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   1b2a0:	9b03      	ldr	r3, [sp, #12]
   1b2a2:	4298      	cmp	r0, r3
   1b2a4:	db0e      	blt.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   1b2a6:	4583      	cmp	fp, r0
   1b2a8:	dd0c      	ble.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   1b2aa:	9b04      	ldr	r3, [sp, #16]
   1b2ac:	429d      	cmp	r5, r3
   1b2ae:	db09      	blt.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   1b2b0:	9b08      	ldr	r3, [sp, #32]
   1b2b2:	42ab      	cmp	r3, r5
   1b2b4:	dd06      	ble.n	1b2c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   1b2b6:	f854 3b04 	ldr.w	r3, [r4], #4
   1b2ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b2bc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b2c0:	3501      	adds	r5, #1
   1b2c2:	e7e0      	b.n	1b286 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x104>
            *out_ptr++ = pad_value;
   1b2c4:	460b      	mov	r3, r1
   1b2c6:	e7f8      	b.n	1b2ba <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   1b2c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b2ca:	9a07      	ldr	r2, [sp, #28]
   1b2cc:	4413      	add	r3, r2
   1b2ce:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b2d0:	3001      	adds	r0, #1
   1b2d2:	e7d5      	b.n	1b280 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfe>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b2d4:	f10c 0c01 	add.w	ip, ip, #1
   1b2d8:	e7c9      	b.n	1b26e <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b2da:	3601      	adds	r6, #1
   1b2dc:	e7c3      	b.n	1b266 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   1b2de:	a818      	add	r0, sp, #96	; 0x60
   1b2e0:	f7fa fae3 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b2e4:	a812      	add	r0, sp, #72	; 0x48
   1b2e6:	f7fa fae0 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b2ea:	b01f      	add	sp, #124	; 0x7c
   1b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b2f0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2f4:	b09d      	sub	sp, #116	; 0x74
   1b2f6:	4606      	mov	r6, r0
   1b2f8:	4614      	mov	r4, r2
   1b2fa:	461d      	mov	r5, r3
   1b2fc:	460a      	mov	r2, r1
   1b2fe:	2301      	movs	r3, #1
   1b300:	2104      	movs	r1, #4
   1b302:	a810      	add	r0, sp, #64	; 0x40
   1b304:	f7fa fb71 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b308:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1b30a:	2301      	movs	r3, #1
   1b30c:	2104      	movs	r1, #4
   1b30e:	a816      	add	r0, sp, #88	; 0x58
   1b310:	f7fa fb6b 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b314:	f996 0000 	ldrsb.w	r0, [r6]
   1b318:	2804      	cmp	r0, #4
   1b31a:	dd01      	ble.n	1b320 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b31c:	f003 f959 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b320:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b324:	2904      	cmp	r1, #4
   1b326:	dcf9      	bgt.n	1b31c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b328:	2300      	movs	r3, #0
   1b32a:	f06f 0203 	mvn.w	r2, #3
   1b32e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1b332:	e9cd 3308 	strd	r3, r3, [sp, #32]
   1b336:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b33a:	fb02 c200 	mla	r2, r2, r0, ip
   1b33e:	1d37      	adds	r7, r6, #4
   1b340:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b342:	4298      	cmp	r0, r3
   1b344:	dc13      	bgt.n	1b36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b346:	2300      	movs	r3, #0
   1b348:	f06f 0203 	mvn.w	r2, #3
   1b34c:	a81c      	add	r0, sp, #112	; 0x70
   1b34e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1b352:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b356:	fb02 0201 	mla	r2, r2, r1, r0
   1b35a:	3618      	adds	r6, #24
   1b35c:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b35e:	4299      	cmp	r1, r3
   1b360:	dd0b      	ble.n	1b37a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b362:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b366:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b36a:	3301      	adds	r3, #1
   1b36c:	e7f7      	b.n	1b35e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b36e:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b372:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b376:	3301      	adds	r3, #1
   1b378:	e7e3      	b.n	1b342 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b37a:	2100      	movs	r1, #0
   1b37c:	a816      	add	r0, sp, #88	; 0x58
   1b37e:	f7fa fa9f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b382:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b384:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b386:	a816      	add	r0, sp, #88	; 0x58
   1b388:	f7fa fa9a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b38c:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b38e:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b390:	a816      	add	r0, sp, #88	; 0x58
   1b392:	f7fa fa95 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b396:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b398:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b39a:	a816      	add	r0, sp, #88	; 0x58
   1b39c:	f7fa fa90 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b3a0:	9b08      	ldr	r3, [sp, #32]
   1b3a2:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3a6:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b3aa:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b3ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b3ae:	9303      	str	r3, [sp, #12]
  const int right_w_padding = right_padding_copy[2];
   1b3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b3b2:	9304      	str	r3, [sp, #16]
  const int right_d_padding = right_padding_copy[3];
   1b3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              out_h >= output_height - right_h_padding ||
   1b3b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int right_d_padding = right_padding_copy[3];
   1b3b8:	9305      	str	r3, [sp, #20]
  const int output_depth = ext_output_shape.Dims(3);
   1b3ba:	4601      	mov	r1, r0
   1b3bc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
              out_b >= output_batch - right_b_padding ||
   1b3c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  const T pad_value = *pad_value_ptr;
   1b3c2:	ed95 7a00 	vldr	s14, [r5]
   1b3c6:	009b      	lsls	r3, r3, #2
   1b3c8:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b3ca:	eba8 0000 	sub.w	r0, r8, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b3ce:	2300      	movs	r3, #0
              out_h >= output_height - right_h_padding ||
   1b3d0:	eba9 0c02 	sub.w	ip, r9, r2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b3d4:	4543      	cmp	r3, r8
   1b3d6:	da38      	bge.n	1b44a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b3d8:	2500      	movs	r5, #0
   1b3da:	454d      	cmp	r5, r9
   1b3dc:	da33      	bge.n	1b446 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x156>
              out_w >= output_width - right_w_padding ||
   1b3de:	9a04      	ldr	r2, [sp, #16]
   1b3e0:	ebaa 0b02 	sub.w	fp, sl, r2
              out_d >= output_depth - right_d_padding) {
   1b3e4:	9a05      	ldr	r2, [sp, #20]
   1b3e6:	1a8a      	subs	r2, r1, r2
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b3e8:	2600      	movs	r6, #0
              out_d >= output_depth - right_d_padding) {
   1b3ea:	9207      	str	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b3ec:	4556      	cmp	r6, sl
   1b3ee:	da28      	bge.n	1b442 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
   1b3f0:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b3f4:	2700      	movs	r7, #0
   1b3f6:	428f      	cmp	r7, r1
   1b3f8:	da1d      	bge.n	1b436 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b3fa:	9a00      	ldr	r2, [sp, #0]
   1b3fc:	4293      	cmp	r3, r2
   1b3fe:	db17      	blt.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
   1b400:	4298      	cmp	r0, r3
   1b402:	dd15      	ble.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_b >= output_batch - right_b_padding ||
   1b404:	9a01      	ldr	r2, [sp, #4]
   1b406:	4295      	cmp	r5, r2
   1b408:	db12      	blt.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h < left_h_padding ||
   1b40a:	45ac      	cmp	ip, r5
   1b40c:	dd10      	ble.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h >= output_height - right_h_padding ||
   1b40e:	9a02      	ldr	r2, [sp, #8]
   1b410:	4296      	cmp	r6, r2
   1b412:	db0d      	blt.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w < left_w_padding ||
   1b414:	45b3      	cmp	fp, r6
   1b416:	dd0b      	ble.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w >= output_width - right_w_padding ||
   1b418:	9a03      	ldr	r2, [sp, #12]
   1b41a:	4297      	cmp	r7, r2
   1b41c:	db08      	blt.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_d < left_d_padding ||
   1b41e:	9a07      	ldr	r2, [sp, #28]
   1b420:	42ba      	cmp	r2, r7
   1b422:	dd05      	ble.n	1b430 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
            *out_ptr++ = *in_ptr++;
   1b424:	ecf4 7a01 	vldmia	r4!, {s15}
   1b428:	ecee 7a01 	vstmia	lr!, {s15}
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b42c:	3701      	adds	r7, #1
   1b42e:	e7e2      	b.n	1b3f6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   1b430:	eef0 7a47 	vmov.f32	s15, s14
   1b434:	e7f8      	b.n	1b428 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   1b436:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1b438:	9f06      	ldr	r7, [sp, #24]
   1b43a:	443a      	add	r2, r7
   1b43c:	9227      	str	r2, [sp, #156]	; 0x9c
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b43e:	3601      	adds	r6, #1
   1b440:	e7d4      	b.n	1b3ec <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b442:	3501      	adds	r5, #1
   1b444:	e7c9      	b.n	1b3da <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b446:	3301      	adds	r3, #1
   1b448:	e7c4      	b.n	1b3d4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   1b44a:	a816      	add	r0, sp, #88	; 0x58
   1b44c:	f7fa fa2d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b450:	a810      	add	r0, sp, #64	; 0x40
   1b452:	f7fa fa2a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b456:	b01d      	add	sp, #116	; 0x74
   1b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b45c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b460:	b09f      	sub	sp, #124	; 0x7c
   1b462:	4606      	mov	r6, r0
   1b464:	4614      	mov	r4, r2
   1b466:	461d      	mov	r5, r3
   1b468:	460a      	mov	r2, r1
   1b46a:	2301      	movs	r3, #1
   1b46c:	2104      	movs	r1, #4
   1b46e:	a812      	add	r0, sp, #72	; 0x48
   1b470:	f7fa fabb 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b474:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b476:	2301      	movs	r3, #1
   1b478:	2104      	movs	r1, #4
   1b47a:	a818      	add	r0, sp, #96	; 0x60
   1b47c:	f7fa fab5 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b480:	f996 0000 	ldrsb.w	r0, [r6]
   1b484:	2804      	cmp	r0, #4
   1b486:	dd01      	ble.n	1b48c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b488:	f003 f8a3 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b48c:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b490:	2904      	cmp	r1, #4
   1b492:	dcf9      	bgt.n	1b488 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b494:	2300      	movs	r3, #0
   1b496:	f06f 0203 	mvn.w	r2, #3
   1b49a:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b49e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b4a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b4a6:	fb02 c200 	mla	r2, r2, r0, ip
   1b4aa:	1d37      	adds	r7, r6, #4
   1b4ac:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b4ae:	4298      	cmp	r0, r3
   1b4b0:	dc13      	bgt.n	1b4da <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b4b2:	2300      	movs	r3, #0
   1b4b4:	f06f 0203 	mvn.w	r2, #3
   1b4b8:	a81e      	add	r0, sp, #120	; 0x78
   1b4ba:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b4be:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b4c2:	fb02 0201 	mla	r2, r2, r1, r0
   1b4c6:	3618      	adds	r6, #24
   1b4c8:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b4ca:	4299      	cmp	r1, r3
   1b4cc:	dd0b      	ble.n	1b4e6 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b4ce:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b4d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b4d6:	3301      	adds	r3, #1
   1b4d8:	e7f7      	b.n	1b4ca <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b4da:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b4de:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b4e2:	3301      	adds	r3, #1
   1b4e4:	e7e3      	b.n	1b4ae <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b4e6:	2100      	movs	r1, #0
   1b4e8:	a818      	add	r0, sp, #96	; 0x60
   1b4ea:	f7fa f9e9 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b4ee:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b4f0:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b4f2:	a818      	add	r0, sp, #96	; 0x60
   1b4f4:	f7fa f9e4 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b4f8:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b4fa:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b4fc:	a818      	add	r0, sp, #96	; 0x60
   1b4fe:	f7fa f9df 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b502:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b504:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b506:	a818      	add	r0, sp, #96	; 0x60
   1b508:	f7fa f9da 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b50e:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b512:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b516:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b51a:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   1b51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b51e:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b520:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b522:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b524:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b526:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b52a:	7829      	ldrb	r1, [r5, #0]
              out_b >= output_batch - right_b_padding ||
   1b52c:	eba8 0303 	sub.w	r3, r8, r3
   1b530:	9308      	str	r3, [sp, #32]
   1b532:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   1b536:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b538:	2600      	movs	r6, #0
   1b53a:	9309      	str	r3, [sp, #36]	; 0x24
   1b53c:	4546      	cmp	r6, r8
   1b53e:	da3b      	bge.n	1b5b8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
              out_h >= output_height - right_h_padding ||
   1b540:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b542:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   1b546:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b54a:	45cc      	cmp	ip, r9
   1b54c:	da32      	bge.n	1b5b4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
              out_w >= output_width - right_w_padding ||
   1b54e:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b550:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   1b552:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b556:	4550      	cmp	r0, sl
   1b558:	da29      	bge.n	1b5ae <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
              out_d >= output_depth - right_d_padding) {
   1b55a:	9b06      	ldr	r3, [sp, #24]
   1b55c:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b55e:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   1b560:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b562:	42bd      	cmp	r5, r7
   1b564:	da1d      	bge.n	1b5a2 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b566:	9b00      	ldr	r3, [sp, #0]
   1b568:	429e      	cmp	r6, r3
   1b56a:	db18      	blt.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   1b56c:	9b08      	ldr	r3, [sp, #32]
   1b56e:	42b3      	cmp	r3, r6
   1b570:	dd15      	ble.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   1b572:	9b01      	ldr	r3, [sp, #4]
   1b574:	459c      	cmp	ip, r3
   1b576:	db12      	blt.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   1b578:	45e6      	cmp	lr, ip
   1b57a:	dd10      	ble.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   1b57c:	9b02      	ldr	r3, [sp, #8]
   1b57e:	4298      	cmp	r0, r3
   1b580:	db0d      	blt.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   1b582:	4583      	cmp	fp, r0
   1b584:	dd0b      	ble.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   1b586:	9b03      	ldr	r3, [sp, #12]
   1b588:	429d      	cmp	r5, r3
   1b58a:	db08      	blt.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   1b58c:	9b07      	ldr	r3, [sp, #28]
   1b58e:	42ab      	cmp	r3, r5
   1b590:	dd05      	ble.n	1b59e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   1b592:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b596:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b598:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b59a:	3501      	adds	r5, #1
   1b59c:	e7e1      	b.n	1b562 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   1b59e:	460b      	mov	r3, r1
   1b5a0:	e7f9      	b.n	1b596 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13a>
   1b5a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b5a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b5a6:	4413      	add	r3, r2
   1b5a8:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b5aa:	3001      	adds	r0, #1
   1b5ac:	e7d3      	b.n	1b556 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfa>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b5ae:	f10c 0c01 	add.w	ip, ip, #1
   1b5b2:	e7ca      	b.n	1b54a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xee>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b5b4:	3601      	adds	r6, #1
   1b5b6:	e7c1      	b.n	1b53c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe0>
  const RuntimeShape ext_output_shape =
   1b5b8:	a818      	add	r0, sp, #96	; 0x60
   1b5ba:	f7fa f976 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b5be:	a812      	add	r0, sp, #72	; 0x48
   1b5c0:	f7fa f973 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b5c4:	b01f      	add	sp, #124	; 0x7c
   1b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b5ca <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5ce:	b09f      	sub	sp, #124	; 0x7c
   1b5d0:	4606      	mov	r6, r0
   1b5d2:	4614      	mov	r4, r2
   1b5d4:	461d      	mov	r5, r3
   1b5d6:	460a      	mov	r2, r1
   1b5d8:	2301      	movs	r3, #1
   1b5da:	2104      	movs	r1, #4
   1b5dc:	a812      	add	r0, sp, #72	; 0x48
   1b5de:	f7fa fa04 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b5e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b5e4:	2301      	movs	r3, #1
   1b5e6:	2104      	movs	r1, #4
   1b5e8:	a818      	add	r0, sp, #96	; 0x60
   1b5ea:	f7fa f9fe 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b5ee:	f996 0000 	ldrsb.w	r0, [r6]
   1b5f2:	2804      	cmp	r0, #4
   1b5f4:	dd01      	ble.n	1b5fa <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b5f6:	f002 ffec 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b5fa:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b5fe:	2904      	cmp	r1, #4
   1b600:	dcf9      	bgt.n	1b5f6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b602:	2300      	movs	r3, #0
   1b604:	f06f 0203 	mvn.w	r2, #3
   1b608:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b60c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b610:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b614:	fb02 c200 	mla	r2, r2, r0, ip
   1b618:	1d37      	adds	r7, r6, #4
   1b61a:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b61c:	4298      	cmp	r0, r3
   1b61e:	dc13      	bgt.n	1b648 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b620:	2300      	movs	r3, #0
   1b622:	f06f 0203 	mvn.w	r2, #3
   1b626:	a81e      	add	r0, sp, #120	; 0x78
   1b628:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b62c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b630:	fb02 0201 	mla	r2, r2, r1, r0
   1b634:	3618      	adds	r6, #24
   1b636:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b638:	4299      	cmp	r1, r3
   1b63a:	dd0b      	ble.n	1b654 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b63c:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b640:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b644:	3301      	adds	r3, #1
   1b646:	e7f7      	b.n	1b638 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b648:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b64c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b650:	3301      	adds	r3, #1
   1b652:	e7e3      	b.n	1b61c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b654:	2100      	movs	r1, #0
   1b656:	a818      	add	r0, sp, #96	; 0x60
   1b658:	f7fa f932 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b65c:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b65e:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b660:	a818      	add	r0, sp, #96	; 0x60
   1b662:	f7fa f92d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b666:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b668:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b66a:	a818      	add	r0, sp, #96	; 0x60
   1b66c:	f7fa f928 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b670:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b672:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b674:	a818      	add	r0, sp, #96	; 0x60
   1b676:	f7fa f923 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b67c:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b680:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b684:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b688:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   1b68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b68c:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b68e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b690:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b692:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b694:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b698:	f995 1000 	ldrsb.w	r1, [r5]
              out_b >= output_batch - right_b_padding ||
   1b69c:	eba8 0303 	sub.w	r3, r8, r3
   1b6a0:	9308      	str	r3, [sp, #32]
   1b6a2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   1b6a6:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b6a8:	2600      	movs	r6, #0
   1b6aa:	9309      	str	r3, [sp, #36]	; 0x24
   1b6ac:	4546      	cmp	r6, r8
   1b6ae:	da3b      	bge.n	1b728 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15e>
              out_h >= output_height - right_h_padding ||
   1b6b0:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b6b2:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   1b6b6:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b6ba:	45cc      	cmp	ip, r9
   1b6bc:	da32      	bge.n	1b724 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
              out_w >= output_width - right_w_padding ||
   1b6be:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b6c0:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   1b6c2:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b6c6:	4550      	cmp	r0, sl
   1b6c8:	da29      	bge.n	1b71e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x154>
              out_d >= output_depth - right_d_padding) {
   1b6ca:	9b06      	ldr	r3, [sp, #24]
   1b6cc:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b6ce:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   1b6d0:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b6d2:	42bd      	cmp	r5, r7
   1b6d4:	da1d      	bge.n	1b712 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
          if (out_b < left_b_padding ||
   1b6d6:	9b00      	ldr	r3, [sp, #0]
   1b6d8:	429e      	cmp	r6, r3
   1b6da:	db18      	blt.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
   1b6dc:	9b08      	ldr	r3, [sp, #32]
   1b6de:	42b3      	cmp	r3, r6
   1b6e0:	dd15      	ble.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_b >= output_batch - right_b_padding ||
   1b6e2:	9b01      	ldr	r3, [sp, #4]
   1b6e4:	459c      	cmp	ip, r3
   1b6e6:	db12      	blt.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h < left_h_padding ||
   1b6e8:	45e6      	cmp	lr, ip
   1b6ea:	dd10      	ble.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h >= output_height - right_h_padding ||
   1b6ec:	9b02      	ldr	r3, [sp, #8]
   1b6ee:	4298      	cmp	r0, r3
   1b6f0:	db0d      	blt.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w < left_w_padding ||
   1b6f2:	4583      	cmp	fp, r0
   1b6f4:	dd0b      	ble.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w >= output_width - right_w_padding ||
   1b6f6:	9b03      	ldr	r3, [sp, #12]
   1b6f8:	429d      	cmp	r5, r3
   1b6fa:	db08      	blt.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_d < left_d_padding ||
   1b6fc:	9b07      	ldr	r3, [sp, #28]
   1b6fe:	42ab      	cmp	r3, r5
   1b700:	dd05      	ble.n	1b70e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
            *out_ptr++ = *in_ptr++;
   1b702:	f914 3b01 	ldrsb.w	r3, [r4], #1
   1b706:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b708:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b70a:	3501      	adds	r5, #1
   1b70c:	e7e1      	b.n	1b6d2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x108>
            *out_ptr++ = pad_value;
   1b70e:	460b      	mov	r3, r1
   1b710:	e7f9      	b.n	1b706 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13c>
   1b712:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b714:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b716:	4413      	add	r3, r2
   1b718:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b71a:	3001      	adds	r0, #1
   1b71c:	e7d3      	b.n	1b6c6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b71e:	f10c 0c01 	add.w	ip, ip, #1
   1b722:	e7ca      	b.n	1b6ba <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b724:	3601      	adds	r6, #1
   1b726:	e7c1      	b.n	1b6ac <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe2>
  const RuntimeShape ext_output_shape =
   1b728:	a818      	add	r0, sp, #96	; 0x60
   1b72a:	f7fa f8be 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b72e:	a812      	add	r0, sp, #72	; 0x48
   1b730:	f7fa f8bb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b734:	b01f      	add	sp, #124	; 0x7c
   1b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b73a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   1b73a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b73e:	b097      	sub	sp, #92	; 0x5c
   1b740:	4698      	mov	r8, r3
   1b742:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b744:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1b748:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   1b74a:	4604      	mov	r4, r0
   1b74c:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b74e:	dd01      	ble.n	1b754 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   1b750:	f002 ff3f 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b754:	680b      	ldr	r3, [r1, #0]
   1b756:	2b04      	cmp	r3, #4
   1b758:	d1fa      	bne.n	1b750 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1b75a:	f8d8 3000 	ldr.w	r3, [r8]
   1b75e:	2b04      	cmp	r3, #4
   1b760:	d1f6      	bne.n	1b750 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b762:	2300      	movs	r3, #0
   1b764:	4619      	mov	r1, r3
   1b766:	4642      	mov	r2, r8
   1b768:	4638      	mov	r0, r7
   1b76a:	f7fc ff56 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b76e:	2303      	movs	r3, #3
   1b770:	4619      	mov	r1, r3
   1b772:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b774:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b776:	4638      	mov	r0, r7
   1b778:	f7fc ff4f 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1b77c:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b77e:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   1b780:	4638      	mov	r0, r7
   1b782:	f7fa f89d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1b786:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1b788:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   1b78a:	4638      	mov	r0, r7
   1b78c:	f7fa f898 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1b790:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1b792:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   1b794:	4640      	mov	r0, r8
   1b796:	f7fa f893 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1b79a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1b79c:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   1b79e:	4640      	mov	r0, r8
   1b7a0:	f7fa f88e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1b7a4:	68e3      	ldr	r3, [r4, #12]
   1b7a6:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   1b7a8:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1b7aa:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1b7ac:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   1b7ae:	2100      	movs	r1, #0
   1b7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b7b2:	4299      	cmp	r1, r3
   1b7b4:	f280 808d 	bge.w	1b8d2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   1b7b8:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b7bc:	f8cd b010 	str.w	fp, [sp, #16]
   1b7c0:	9b04      	ldr	r3, [sp, #16]
   1b7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b7c4:	4293      	cmp	r3, r2
   1b7c6:	f280 8082 	bge.w	1b8ce <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1b7ca:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b7ce:	f8cd a014 	str.w	sl, [sp, #20]
   1b7d2:	9b05      	ldr	r3, [sp, #20]
   1b7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b7d6:	4293      	cmp	r3, r2
   1b7d8:	da73      	bge.n	1b8c2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1b7da:	2300      	movs	r3, #0
   1b7dc:	9303      	str	r3, [sp, #12]
   1b7de:	9b03      	ldr	r3, [sp, #12]
   1b7e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b7e2:	4293      	cmp	r3, r2
   1b7e4:	da67      	bge.n	1b8b6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   1b7e6:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   1b7ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   1b7ee:	ebaa 0306 	sub.w	r3, sl, r6
   1b7f2:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1b7f4:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   1b7f8:	ebab 0302 	sub.w	r3, fp, r2
   1b7fc:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   1b7fe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1b802:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1b804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b806:	441e      	add	r6, r3
   1b808:	69a3      	ldr	r3, [r4, #24]
   1b80a:	429e      	cmp	r6, r3
   1b80c:	bfa8      	it	ge
   1b80e:	461e      	movge	r6, r3
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1b810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b812:	9606      	str	r6, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
   1b814:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_height, input_height - in_y_origin);
   1b818:	18d0      	adds	r0, r2, r3
   1b81a:	6963      	ldr	r3, [r4, #20]
   1b81c:	4298      	cmp	r0, r3
   1b81e:	bfa8      	it	ge
   1b820:	4618      	movge	r0, r3
   1b822:	9b08      	ldr	r3, [sp, #32]
   1b824:	9009      	str	r0, [sp, #36]	; 0x24
          int32 acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b826:	2a00      	cmp	r2, #0
   1b828:	bfa8      	it	ge
   1b82a:	189b      	addge	r3, r3, r2
          int32 acc = 0;
   1b82c:	2500      	movs	r5, #0
   1b82e:	461a      	mov	r2, r3
          int filter_count = 0;
   1b830:	46a9      	mov	r9, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b832:	9b08      	ldr	r3, [sp, #32]
   1b834:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b836:	1ad3      	subs	r3, r2, r3
   1b838:	4283      	cmp	r3, r0
   1b83a:	da1e      	bge.n	1b87a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b83c:	9e07      	ldr	r6, [sp, #28]
   1b83e:	9b06      	ldr	r3, [sp, #24]
   1b840:	429e      	cmp	r6, r3
   1b842:	da0f      	bge.n	1b864 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12a>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1b844:	9b03      	ldr	r3, [sp, #12]
   1b846:	9300      	str	r3, [sp, #0]
   1b848:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b84a:	4638      	mov	r0, r7
   1b84c:	4433      	add	r3, r6
   1b84e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   1b852:	f7fa f8f7 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   1b856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b858:	5c1b      	ldrb	r3, [r3, r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b85a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   1b85e:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b860:	3601      	adds	r6, #1
   1b862:	e7ec      	b.n	1b83e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   1b864:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   1b868:	1a1b      	subs	r3, r3, r0
   1b86a:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   1b86e:	42b0      	cmp	r0, r6
   1b870:	bfb8      	it	lt
   1b872:	2300      	movlt	r3, #0
   1b874:	4499      	add	r9, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b876:	3201      	adds	r2, #1
   1b878:	e7db      	b.n	1b832 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf8>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   1b87a:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
   1b87e:	eb05 0563 	add.w	r5, r5, r3, asr #1
   1b882:	fb95 f9f9 	sdiv	r9, r5, r9
   1b886:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1b888:	9b03      	ldr	r3, [sp, #12]
   1b88a:	9300      	str	r3, [sp, #0]
   1b88c:	45a9      	cmp	r9, r5
   1b88e:	bfb8      	it	lt
   1b890:	46a9      	movlt	r9, r5
   1b892:	6a25      	ldr	r5, [r4, #32]
   1b894:	9106      	str	r1, [sp, #24]
   1b896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b89a:	45a9      	cmp	r9, r5
   1b89c:	4640      	mov	r0, r8
   1b89e:	bfa8      	it	ge
   1b8a0:	46a9      	movge	r9, r5
   1b8a2:	f7fa f8cf 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1b8a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   1b8a8:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1b8aa:	f803 9000 	strb.w	r9, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1b8ae:	9b03      	ldr	r3, [sp, #12]
   1b8b0:	3301      	adds	r3, #1
   1b8b2:	9303      	str	r3, [sp, #12]
   1b8b4:	e793      	b.n	1b7de <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b8b6:	9b05      	ldr	r3, [sp, #20]
   1b8b8:	3301      	adds	r3, #1
   1b8ba:	9305      	str	r3, [sp, #20]
   1b8bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b8be:	449a      	add	sl, r3
   1b8c0:	e787      	b.n	1b7d2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b8c2:	9b04      	ldr	r3, [sp, #16]
   1b8c4:	3301      	adds	r3, #1
   1b8c6:	9304      	str	r3, [sp, #16]
   1b8c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b8ca:	449b      	add	fp, r3
   1b8cc:	e778      	b.n	1b7c0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   1b8ce:	3101      	adds	r1, #1
   1b8d0:	e76e      	b.n	1b7b0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   1b8d2:	b017      	add	sp, #92	; 0x5c
   1b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b8d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   1b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8dc:	ed2d 8b02 	vpush	{d8}
   1b8e0:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b8e2:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   1b8e4:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b8e6:	2b04      	cmp	r3, #4
                    float* output_data) {
   1b8e8:	4604      	mov	r4, r0
   1b8ea:	460d      	mov	r5, r1
   1b8ec:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b8ee:	d001      	beq.n	1b8f4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   1b8f0:	f002 fe6f 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1b8f4:	6833      	ldr	r3, [r6, #0]
   1b8f6:	2b04      	cmp	r3, #4
   1b8f8:	d1fa      	bne.n	1b8f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b8fa:	2300      	movs	r3, #0
   1b8fc:	4619      	mov	r1, r3
   1b8fe:	4632      	mov	r2, r6
   1b900:	4628      	mov	r0, r5
   1b902:	f7fc fe8a 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b906:	2303      	movs	r3, #3
   1b908:	4619      	mov	r1, r3
   1b90a:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b90c:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b90e:	4628      	mov	r0, r5
   1b910:	f7fc fe83 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1b914:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b916:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   1b918:	4628      	mov	r0, r5
   1b91a:	f7f9 ffd1 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1b91e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1b920:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   1b922:	4628      	mov	r0, r5
   1b924:	f7f9 ffcc 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1b928:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1b92a:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1b92c:	4630      	mov	r0, r6
   1b92e:	f7f9 ffc7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1b932:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1b934:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
   1b936:	4630      	mov	r0, r6
   1b938:	f7f9 ffc2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1b93c:	68e3      	ldr	r3, [r4, #12]
   1b93e:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1b940:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1b942:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
   1b944:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
   1b946:	f04f 0b00 	mov.w	fp, #0
   1b94a:	9b07      	ldr	r3, [sp, #28]
   1b94c:	459b      	cmp	fp, r3
   1b94e:	f280 8094 	bge.w	1ba7a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
   1b952:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b956:	46d0      	mov	r8, sl
   1b958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b95a:	4598      	cmp	r8, r3
   1b95c:	f280 808a 	bge.w	1ba74 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1b960:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b962:	46b9      	mov	r9, r7
   1b964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b966:	4599      	cmp	r9, r3
   1b968:	da7f      	bge.n	1ba6a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   1b96a:	2300      	movs	r3, #0
   1b96c:	9303      	str	r3, [sp, #12]
   1b96e:	9b03      	ldr	r3, [sp, #12]
   1b970:	9a08      	ldr	r2, [sp, #32]
   1b972:	4293      	cmp	r3, r2
   1b974:	da74      	bge.n	1ba60 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
              (out_x * stride_width) - params.padding_values.width;
   1b976:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1b97a:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1b97c:	1afa      	subs	r2, r7, r3
   1b97e:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
   1b980:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1b984:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1b986:	ebaa 0102 	sub.w	r1, sl, r2
   1b98a:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1b98c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1b990:	9111      	str	r1, [sp, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1b992:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b994:	440b      	add	r3, r1
   1b996:	4283      	cmp	r3, r0
   1b998:	bfa8      	it	ge
   1b99a:	4603      	movge	r3, r0
   1b99c:	9306      	str	r3, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
          const int filter_y_start = std::max(0, -in_y_origin);
   1b9a0:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_height, input_height - in_y_origin);
   1b9a4:	18d0      	adds	r0, r2, r3
   1b9a6:	6963      	ldr	r3, [r4, #20]
   1b9a8:	4298      	cmp	r0, r3
   1b9aa:	bfa8      	it	ge
   1b9ac:	4618      	movge	r0, r3
          float max = std::numeric_limits<float>::lowest();
   1b9ae:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1b9b2:	9315      	str	r3, [sp, #84]	; 0x54
   1b9b4:	9b05      	ldr	r3, [sp, #20]
   1b9b6:	900a      	str	r0, [sp, #40]	; 0x28
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b9b8:	2a00      	cmp	r2, #0
   1b9ba:	bfa8      	it	ge
   1b9bc:	189b      	addge	r3, r3, r2
   1b9be:	461a      	mov	r2, r3
   1b9c0:	9b05      	ldr	r3, [sp, #20]
   1b9c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b9c4:	1ad3      	subs	r3, r2, r3
   1b9c6:	428b      	cmp	r3, r1
   1b9c8:	da26      	bge.n	1ba18 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b9ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b9cc:	9304      	str	r3, [sp, #16]
   1b9ce:	9b06      	ldr	r3, [sp, #24]
   1b9d0:	9904      	ldr	r1, [sp, #16]
   1b9d2:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   1b9d6:	428b      	cmp	r3, r1
   1b9d8:	dd1c      	ble.n	1ba14 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1b9da:	9b03      	ldr	r3, [sp, #12]
   1b9dc:	9300      	str	r3, [sp, #0]
   1b9de:	460b      	mov	r3, r1
   1b9e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b9e2:	9213      	str	r2, [sp, #76]	; 0x4c
   1b9e4:	440b      	add	r3, r1
   1b9e6:	4628      	mov	r0, r5
   1b9e8:	4659      	mov	r1, fp
   1b9ea:	f7fa f82b 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1b9ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b9f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1b9f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
      if (__a < __b)
   1b9f6:	edd0 7a00 	vldr	s15, [r0]
   1b9fa:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   1b9fe:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   1ba00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1ba04:	bfd8      	it	le
   1ba06:	4618      	movle	r0, r3
              max = std::max(
   1ba08:	6803      	ldr	r3, [r0, #0]
   1ba0a:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1ba0c:	9b04      	ldr	r3, [sp, #16]
   1ba0e:	3301      	adds	r3, #1
   1ba10:	9304      	str	r3, [sp, #16]
   1ba12:	e7dc      	b.n	1b9ce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1ba14:	3201      	adds	r2, #1
   1ba16:	e7d3      	b.n	1b9c0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba18:	9b03      	ldr	r3, [sp, #12]
   1ba1a:	9300      	str	r3, [sp, #0]
   1ba1c:	4642      	mov	r2, r8
   1ba1e:	464b      	mov	r3, r9
   1ba20:	4659      	mov	r1, fp
   1ba22:	4630      	mov	r0, r6
   1ba24:	f7fa f80e 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   1ba28:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba2c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   1ba30:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   1ba34:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ba36:	eef4 7ac8 	vcmpe.f32	s15, s16
   1ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba3e:	bfb8      	it	lt
   1ba40:	eef0 7a48 	vmovlt.f32	s15, s16
   1ba44:	eef4 7ac7 	vcmpe.f32	s15, s14
   1ba48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ba4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        for (int channel = 0; channel < depth; ++channel) {
   1ba50:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba52:	bf88      	it	hi
   1ba54:	eef0 7a47 	vmovhi.f32	s15, s14
   1ba58:	edc0 7a00 	vstr	s15, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   1ba5c:	3301      	adds	r3, #1
   1ba5e:	e785      	b.n	1b96c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x94>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1ba60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ba62:	f109 0901 	add.w	r9, r9, #1
   1ba66:	441f      	add	r7, r3
   1ba68:	e77c      	b.n	1b964 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1ba6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ba6c:	f108 0801 	add.w	r8, r8, #1
   1ba70:	449a      	add	sl, r3
   1ba72:	e771      	b.n	1b958 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int batch = 0; batch < batches; ++batch) {
   1ba74:	f10b 0b01 	add.w	fp, fp, #1
   1ba78:	e767      	b.n	1b94a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x72>
                                           params.float_activation_max);
        }
      }
    }
  }
}
   1ba7a:	b017      	add	sp, #92	; 0x5c
   1ba7c:	ecbd 8b02 	vpop	{d8}
   1ba80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ba84 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   1ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba88:	b097      	sub	sp, #92	; 0x5c
   1ba8a:	461e      	mov	r6, r3
   1ba8c:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1ba8e:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1ba92:	429a      	cmp	r2, r3
                    uint8* output_data) {
   1ba94:	4604      	mov	r4, r0
   1ba96:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1ba98:	dd01      	ble.n	1ba9e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   1ba9a:	f002 fd9a 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   1ba9e:	2a00      	cmp	r2, #0
   1baa0:	dbfb      	blt.n	1ba9a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   1baa2:	2bff      	cmp	r3, #255	; 0xff
   1baa4:	dcf9      	bgt.n	1ba9a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1baa6:	680b      	ldr	r3, [r1, #0]
   1baa8:	2b04      	cmp	r3, #4
   1baaa:	d1f6      	bne.n	1ba9a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1baac:	6833      	ldr	r3, [r6, #0]
   1baae:	2b04      	cmp	r3, #4
   1bab0:	d1f3      	bne.n	1ba9a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bab2:	2300      	movs	r3, #0
   1bab4:	4619      	mov	r1, r3
   1bab6:	4632      	mov	r2, r6
   1bab8:	4628      	mov	r0, r5
   1baba:	f7fc fdae 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1babe:	2303      	movs	r3, #3
   1bac0:	4619      	mov	r1, r3
   1bac2:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bac4:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bac6:	4628      	mov	r0, r5
   1bac8:	f7fc fda7 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1bacc:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bace:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   1bad0:	4628      	mov	r0, r5
   1bad2:	f7f9 fef5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1bad6:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1bad8:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   1bada:	4628      	mov	r0, r5
   1badc:	f7f9 fef0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1bae0:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1bae2:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1bae4:	4630      	mov	r0, r6
   1bae6:	f7f9 feeb 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1baea:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1baec:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   1baee:	4630      	mov	r0, r6
   1baf0:	f7f9 fee6 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1baf4:	68e3      	ldr	r3, [r4, #12]
   1baf6:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1baf8:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1bafa:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1bafc:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   1bafe:	f04f 0b00 	mov.w	fp, #0
   1bb02:	9b08      	ldr	r3, [sp, #32]
   1bb04:	459b      	cmp	fp, r3
   1bb06:	f280 8089 	bge.w	1bc1c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   1bb0a:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bb0e:	f8cd 800c 	str.w	r8, [sp, #12]
   1bb12:	9b03      	ldr	r3, [sp, #12]
   1bb14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bb16:	4293      	cmp	r3, r2
   1bb18:	da7d      	bge.n	1bc16 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x192>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1bb1a:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bb1c:	46b9      	mov	r9, r7
   1bb1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bb20:	4599      	cmp	r9, r3
   1bb22:	da72      	bge.n	1bc0a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x186>
        for (int channel = 0; channel < depth; ++channel) {
   1bb24:	2300      	movs	r3, #0
   1bb26:	9302      	str	r3, [sp, #8]
   1bb28:	9b02      	ldr	r3, [sp, #8]
   1bb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bb2c:	4293      	cmp	r3, r2
   1bb2e:	da67      	bge.n	1bc00 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   1bb30:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1bb34:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1bb36:	1afa      	subs	r2, r7, r3
   1bb38:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   1bb3a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1bb3e:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1bb40:	eba8 0102 	sub.w	r1, r8, r2
   1bb44:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   1bb46:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1bb4a:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1bb4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bb4e:	440b      	add	r3, r1
   1bb50:	4283      	cmp	r3, r0
   1bb52:	bfa8      	it	ge
   1bb54:	4603      	movge	r3, r0
   1bb56:	9307      	str	r3, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1bb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1bb5a:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_height, input_height - in_y_origin);
   1bb5e:	18d0      	adds	r0, r2, r3
   1bb60:	6963      	ldr	r3, [r4, #20]
   1bb62:	4298      	cmp	r0, r3
   1bb64:	bfa8      	it	ge
   1bb66:	4618      	movge	r0, r3
          uint8 max = 0;
   1bb68:	2300      	movs	r3, #0
   1bb6a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1bb6e:	9b04      	ldr	r3, [sp, #16]
   1bb70:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bb72:	2a00      	cmp	r2, #0
   1bb74:	bfa8      	it	ge
   1bb76:	189b      	addge	r3, r3, r2
   1bb78:	461a      	mov	r2, r3
   1bb7a:	9b04      	ldr	r3, [sp, #16]
   1bb7c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bb7e:	1ad3      	subs	r3, r2, r3
   1bb80:	428b      	cmp	r3, r1
   1bb82:	da23      	bge.n	1bbcc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x148>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bb84:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   1bb88:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   1bb8c:	9305      	str	r3, [sp, #20]
   1bb8e:	9b07      	ldr	r3, [sp, #28]
   1bb90:	4553      	cmp	r3, sl
   1bb92:	dd19      	ble.n	1bbc8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1bb94:	9b02      	ldr	r3, [sp, #8]
   1bb96:	9300      	str	r3, [sp, #0]
   1bb98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bb9a:	9213      	str	r2, [sp, #76]	; 0x4c
   1bb9c:	4453      	add	r3, sl
   1bb9e:	4659      	mov	r1, fp
   1bba0:	4628      	mov	r0, r5
   1bba2:	f7f9 ff4f 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   1bba6:	9a06      	ldr	r2, [sp, #24]
   1bba8:	9b06      	ldr	r3, [sp, #24]
   1bbaa:	4403      	add	r3, r0
   1bbac:	5c10      	ldrb	r0, [r2, r0]
   1bbae:	9a05      	ldr	r2, [sp, #20]
   1bbb0:	4290      	cmp	r0, r2
      return __a;
   1bbb2:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   1bbb6:	bf98      	it	ls
   1bbb8:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbba:	f10a 0a01 	add.w	sl, sl, #1
              max = std::max(
   1bbbe:	781b      	ldrb	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   1bbc2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbc6:	e7df      	b.n	1bb88 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bbc8:	3201      	adds	r2, #1
   1bbca:	e7d6      	b.n	1bb7a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   1bbcc:	f894 a01c 	ldrb.w	sl, [r4, #28]
   1bbd0:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bbd4:	9a03      	ldr	r2, [sp, #12]
   1bbd6:	459a      	cmp	sl, r3
   1bbd8:	bf38      	it	cc
   1bbda:	469a      	movcc	sl, r3
   1bbdc:	f894 3020 	ldrb.w	r3, [r4, #32]
   1bbe0:	459a      	cmp	sl, r3
   1bbe2:	bf28      	it	cs
   1bbe4:	469a      	movcs	sl, r3
   1bbe6:	9b02      	ldr	r3, [sp, #8]
   1bbe8:	9300      	str	r3, [sp, #0]
   1bbea:	4659      	mov	r1, fp
   1bbec:	464b      	mov	r3, r9
   1bbee:	4630      	mov	r0, r6
   1bbf0:	f7f9 ff28 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bbf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1bbf6:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bbfa:	9b02      	ldr	r3, [sp, #8]
   1bbfc:	3301      	adds	r3, #1
   1bbfe:	e792      	b.n	1bb26 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bc00:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bc02:	f109 0901 	add.w	r9, r9, #1
   1bc06:	441f      	add	r7, r3
   1bc08:	e789      	b.n	1bb1e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bc0a:	9b03      	ldr	r3, [sp, #12]
   1bc0c:	3301      	adds	r3, #1
   1bc0e:	9303      	str	r3, [sp, #12]
   1bc10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc12:	4498      	add	r8, r3
   1bc14:	e77d      	b.n	1bb12 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   1bc16:	f10b 0b01 	add.w	fp, fp, #1
   1bc1a:	e772      	b.n	1bb02 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   1bc1c:	b017      	add	sp, #92	; 0x5c
   1bc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bc22 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   1bc22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc26:	b097      	sub	sp, #92	; 0x5c
   1bc28:	4698      	mov	r8, r3
   1bc2a:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bc2c:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1bc30:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   1bc32:	4605      	mov	r5, r0
   1bc34:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bc36:	dd01      	ble.n	1bc3c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   1bc38:	f002 fccb 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1bc3c:	680b      	ldr	r3, [r1, #0]
   1bc3e:	2b04      	cmp	r3, #4
   1bc40:	d1fa      	bne.n	1bc38 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1bc42:	f8d8 3000 	ldr.w	r3, [r8]
   1bc46:	2b04      	cmp	r3, #4
   1bc48:	d1f6      	bne.n	1bc38 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bc4a:	2300      	movs	r3, #0
   1bc4c:	4619      	mov	r1, r3
   1bc4e:	4642      	mov	r2, r8
   1bc50:	4638      	mov	r0, r7
   1bc52:	f7fc fce2 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc56:	2303      	movs	r3, #3
   1bc58:	4619      	mov	r1, r3
   1bc5a:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bc5c:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc5e:	4638      	mov	r0, r7
   1bc60:	f7fc fcdb 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1bc64:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc66:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   1bc68:	4638      	mov	r0, r7
   1bc6a:	f7f9 fe29 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1bc6e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1bc70:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   1bc72:	4638      	mov	r0, r7
   1bc74:	f7f9 fe24 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1bc78:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1bc7a:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   1bc7c:	4640      	mov	r0, r8
   1bc7e:	f7f9 fe1f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1bc82:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1bc84:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   1bc86:	4640      	mov	r0, r8
   1bc88:	f7f9 fe1a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1bc8c:	68eb      	ldr	r3, [r5, #12]
   1bc8e:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   1bc90:	692b      	ldr	r3, [r5, #16]
  const int output_width = output_shape.Dims(2);
   1bc92:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1bc94:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   1bc96:	2100      	movs	r1, #0
   1bc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc9a:	4299      	cmp	r1, r3
   1bc9c:	f280 8092 	bge.w	1bdc4 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
   1bca0:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bca4:	f8cd b010 	str.w	fp, [sp, #16]
   1bca8:	9b04      	ldr	r3, [sp, #16]
   1bcaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bcac:	4293      	cmp	r3, r2
   1bcae:	f280 8087 	bge.w	1bdc0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1bcb2:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bcb6:	f8cd a014 	str.w	sl, [sp, #20]
   1bcba:	9b05      	ldr	r3, [sp, #20]
   1bcbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1bcbe:	4293      	cmp	r3, r2
   1bcc0:	da78      	bge.n	1bdb4 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	9303      	str	r3, [sp, #12]
   1bcc6:	9b03      	ldr	r3, [sp, #12]
   1bcc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bcca:	4293      	cmp	r3, r2
   1bccc:	da6c      	bge.n	1bda8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
              (out_x * stride_width) - params.padding_values.width;
   1bcce:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
              (out_y * stride_height) - params.padding_values.height;
   1bcd2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
          const int in_x_origin =
   1bcd6:	ebaa 0306 	sub.w	r3, sl, r6
   1bcda:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1bcdc:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   1bce0:	ebab 0302 	sub.w	r3, fp, r2
   1bce4:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   1bce6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1bcea:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1bcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bcee:	441e      	add	r6, r3
   1bcf0:	69ab      	ldr	r3, [r5, #24]
   1bcf2:	429e      	cmp	r6, r3
   1bcf4:	bfa8      	it	ge
   1bcf6:	461e      	movge	r6, r3
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1bcf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bcfa:	9606      	str	r6, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
   1bcfc:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_height, input_height - in_y_origin);
   1bd00:	18d0      	adds	r0, r2, r3
   1bd02:	696b      	ldr	r3, [r5, #20]
   1bd04:	4298      	cmp	r0, r3
   1bd06:	bfa8      	it	ge
   1bd08:	4618      	movge	r0, r3
   1bd0a:	9b08      	ldr	r3, [sp, #32]
   1bd0c:	9009      	str	r0, [sp, #36]	; 0x24
          int32 acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd0e:	2a00      	cmp	r2, #0
   1bd10:	bfa8      	it	ge
   1bd12:	189b      	addge	r3, r3, r2
          int32 acc = 0;
   1bd14:	f04f 0900 	mov.w	r9, #0
   1bd18:	461a      	mov	r2, r3
          int filter_count = 0;
   1bd1a:	464c      	mov	r4, r9
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd1c:	9b08      	ldr	r3, [sp, #32]
   1bd1e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bd20:	1ad3      	subs	r3, r2, r3
   1bd22:	4298      	cmp	r0, r3
   1bd24:	dd1e      	ble.n	1bd64 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x142>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd26:	9e07      	ldr	r6, [sp, #28]
   1bd28:	9b06      	ldr	r3, [sp, #24]
   1bd2a:	429e      	cmp	r6, r3
   1bd2c:	da0f      	bge.n	1bd4e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1bd2e:	9b03      	ldr	r3, [sp, #12]
   1bd30:	9300      	str	r3, [sp, #0]
   1bd32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bd34:	4638      	mov	r0, r7
   1bd36:	4433      	add	r3, r6
   1bd38:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   1bd3c:	f7f9 fe82 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   1bd40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bd42:	561b      	ldrsb	r3, [r3, r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd44:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   1bd48:	4499      	add	r9, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd4a:	3601      	adds	r6, #1
   1bd4c:	e7ec      	b.n	1bd28 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   1bd4e:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   1bd52:	1a1b      	subs	r3, r3, r0
   1bd54:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   1bd58:	42b0      	cmp	r0, r6
   1bd5a:	bfb8      	it	lt
   1bd5c:	2300      	movlt	r3, #0
   1bd5e:	441c      	add	r4, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd60:	3201      	adds	r2, #1
   1bd62:	e7db      	b.n	1bd1c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xfa>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   1bd64:	0fe3      	lsrs	r3, r4, #31
   1bd66:	4423      	add	r3, r4
   1bd68:	f1b9 0f00 	cmp.w	r9, #0
   1bd6c:	bfcc      	ite	gt
   1bd6e:	eb09 0963 	addgt.w	r9, r9, r3, asr #1
                        : (acc - filter_count / 2) / filter_count;
   1bd72:	eba9 0963 	suble.w	r9, r9, r3, asr #1
   1bd76:	69eb      	ldr	r3, [r5, #28]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   1bd78:	fb99 f4f4 	sdiv	r4, r9, r4
    min(const _Tp& __a, const _Tp& __b)
   1bd7c:	429c      	cmp	r4, r3
   1bd7e:	bfb8      	it	lt
   1bd80:	461c      	movlt	r4, r3
   1bd82:	6a2b      	ldr	r3, [r5, #32]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bd84:	9106      	str	r1, [sp, #24]
   1bd86:	429c      	cmp	r4, r3
   1bd88:	bfa8      	it	ge
   1bd8a:	461c      	movge	r4, r3
   1bd8c:	9b03      	ldr	r3, [sp, #12]
   1bd8e:	9300      	str	r3, [sp, #0]
   1bd90:	4640      	mov	r0, r8
   1bd92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bd96:	f7f9 fe55 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bd9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   1bd9c:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bd9e:	541c      	strb	r4, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bda0:	9b03      	ldr	r3, [sp, #12]
   1bda2:	3301      	adds	r3, #1
   1bda4:	9303      	str	r3, [sp, #12]
   1bda6:	e78e      	b.n	1bcc6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bda8:	9b05      	ldr	r3, [sp, #20]
   1bdaa:	3301      	adds	r3, #1
   1bdac:	9305      	str	r3, [sp, #20]
   1bdae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bdb0:	449a      	add	sl, r3
   1bdb2:	e782      	b.n	1bcba <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bdb4:	9b04      	ldr	r3, [sp, #16]
   1bdb6:	3301      	adds	r3, #1
   1bdb8:	9304      	str	r3, [sp, #16]
   1bdba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bdbc:	449b      	add	fp, r3
   1bdbe:	e773      	b.n	1bca8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   1bdc0:	3101      	adds	r1, #1
   1bdc2:	e769      	b.n	1bc98 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   1bdc4:	b017      	add	sp, #92	; 0x5c
   1bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bdca <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
   1bdca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdce:	b097      	sub	sp, #92	; 0x5c
   1bdd0:	461e      	mov	r6, r3
   1bdd2:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bdd4:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1bdd8:	429a      	cmp	r2, r3
                    int8* output_data) {
   1bdda:	4604      	mov	r4, r0
   1bddc:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bdde:	dd01      	ble.n	1bde4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   1bde0:	f002 fbf7 	bl	1e5d2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   1bde4:	3280      	adds	r2, #128	; 0x80
   1bde6:	dbfb      	blt.n	1bde0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   1bde8:	2b7f      	cmp	r3, #127	; 0x7f
   1bdea:	dcf9      	bgt.n	1bde0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1bdec:	680b      	ldr	r3, [r1, #0]
   1bdee:	2b04      	cmp	r3, #4
   1bdf0:	d1f6      	bne.n	1bde0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1bdf2:	6833      	ldr	r3, [r6, #0]
   1bdf4:	2b04      	cmp	r3, #4
   1bdf6:	d1f3      	bne.n	1bde0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bdf8:	2300      	movs	r3, #0
   1bdfa:	4619      	mov	r1, r3
   1bdfc:	4632      	mov	r2, r6
   1bdfe:	4628      	mov	r0, r5
   1be00:	f7fc fc0b 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be04:	2303      	movs	r3, #3
   1be06:	4619      	mov	r1, r3
   1be08:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1be0a:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be0c:	4628      	mov	r0, r5
   1be0e:	f7fc fc04 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1be12:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be14:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   1be16:	4628      	mov	r0, r5
   1be18:	f7f9 fd52 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1be1c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1be1e:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   1be20:	4628      	mov	r0, r5
   1be22:	f7f9 fd4d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1be26:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1be28:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1be2a:	4630      	mov	r0, r6
   1be2c:	f7f9 fd48 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1be30:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1be32:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   1be34:	4630      	mov	r0, r6
   1be36:	f7f9 fd43 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1be3a:	68e3      	ldr	r3, [r4, #12]
   1be3c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1be3e:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1be40:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1be42:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   1be44:	f04f 0b00 	mov.w	fp, #0
   1be48:	9b08      	ldr	r3, [sp, #32]
   1be4a:	459b      	cmp	fp, r3
   1be4c:	f280 808a 	bge.w	1bf64 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19a>
   1be50:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1be54:	f8cd 800c 	str.w	r8, [sp, #12]
   1be58:	9b03      	ldr	r3, [sp, #12]
   1be5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1be5c:	4293      	cmp	r3, r2
   1be5e:	da7e      	bge.n	1bf5e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1be60:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1be62:	46b9      	mov	r9, r7
   1be64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1be66:	4599      	cmp	r9, r3
   1be68:	da73      	bge.n	1bf52 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1be6a:	2300      	movs	r3, #0
   1be6c:	9302      	str	r3, [sp, #8]
   1be6e:	9b02      	ldr	r3, [sp, #8]
   1be70:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be72:	4293      	cmp	r3, r2
   1be74:	da68      	bge.n	1bf48 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   1be76:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1be7a:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1be7c:	1afa      	subs	r2, r7, r3
   1be7e:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   1be80:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1be84:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1be86:	eba8 0102 	sub.w	r1, r8, r2
   1be8a:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   1be8c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1be90:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1be92:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1be94:	440b      	add	r3, r1
   1be96:	4283      	cmp	r3, r0
   1be98:	bfa8      	it	ge
   1be9a:	4603      	movge	r3, r0
   1be9c:	9307      	str	r3, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1be9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1bea0:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_height, input_height - in_y_origin);
   1bea4:	18d0      	adds	r0, r2, r3
   1bea6:	6963      	ldr	r3, [r4, #20]
   1bea8:	4298      	cmp	r0, r3
   1beaa:	bfa8      	it	ge
   1beac:	4618      	movge	r0, r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
   1beae:	2380      	movs	r3, #128	; 0x80
   1beb0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1beb4:	9b04      	ldr	r3, [sp, #16]
   1beb6:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1beb8:	2a00      	cmp	r2, #0
   1beba:	bfa8      	it	ge
   1bebc:	189b      	addge	r3, r3, r2
   1bebe:	461a      	mov	r2, r3
   1bec0:	9b04      	ldr	r3, [sp, #16]
   1bec2:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bec4:	1ad3      	subs	r3, r2, r3
   1bec6:	428b      	cmp	r3, r1
   1bec8:	da24      	bge.n	1bf14 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x14a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1beca:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   1bece:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
   1bed2:	9305      	str	r3, [sp, #20]
   1bed4:	9b07      	ldr	r3, [sp, #28]
   1bed6:	4553      	cmp	r3, sl
   1bed8:	dd1a      	ble.n	1bf10 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x146>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1beda:	9b02      	ldr	r3, [sp, #8]
   1bedc:	9300      	str	r3, [sp, #0]
   1bede:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bee0:	9213      	str	r2, [sp, #76]	; 0x4c
   1bee2:	4453      	add	r3, sl
   1bee4:	4659      	mov	r1, fp
   1bee6:	4628      	mov	r0, r5
   1bee8:	f7f9 fdac 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   1beec:	9a06      	ldr	r2, [sp, #24]
   1beee:	9b06      	ldr	r3, [sp, #24]
   1bef0:	4403      	add	r3, r0
   1bef2:	5610      	ldrsb	r0, [r2, r0]
   1bef4:	9a05      	ldr	r2, [sp, #20]
   1bef6:	4290      	cmp	r0, r2
      return __a;
   1bef8:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   1befc:	bfd8      	it	le
   1befe:	4613      	movle	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf00:	f10a 0a01 	add.w	sl, sl, #1
              max = std::max(
   1bf04:	f993 3000 	ldrsb.w	r3, [r3]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   1bf0a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf0e:	e7de      	b.n	1bece <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bf10:	3201      	adds	r2, #1
   1bf12:	e7d5      	b.n	1bec0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf6>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
   1bf14:	f994 a01c 	ldrsb.w	sl, [r4, #28]
   1bf18:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bf1c:	9a03      	ldr	r2, [sp, #12]
   1bf1e:	459a      	cmp	sl, r3
   1bf20:	bfb8      	it	lt
   1bf22:	469a      	movlt	sl, r3
   1bf24:	f994 3020 	ldrsb.w	r3, [r4, #32]
   1bf28:	459a      	cmp	sl, r3
   1bf2a:	bfa8      	it	ge
   1bf2c:	469a      	movge	sl, r3
   1bf2e:	9b02      	ldr	r3, [sp, #8]
   1bf30:	9300      	str	r3, [sp, #0]
   1bf32:	4659      	mov	r1, fp
   1bf34:	464b      	mov	r3, r9
   1bf36:	4630      	mov	r0, r6
   1bf38:	f7f9 fd84 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bf3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1bf3e:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bf42:	9b02      	ldr	r3, [sp, #8]
   1bf44:	3301      	adds	r3, #1
   1bf46:	e791      	b.n	1be6c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bf48:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bf4a:	f109 0901 	add.w	r9, r9, #1
   1bf4e:	441f      	add	r7, r3
   1bf50:	e788      	b.n	1be64 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bf52:	9b03      	ldr	r3, [sp, #12]
   1bf54:	3301      	adds	r3, #1
   1bf56:	9303      	str	r3, [sp, #12]
   1bf58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bf5a:	4498      	add	r8, r3
   1bf5c:	e77c      	b.n	1be58 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   1bf5e:	f10b 0b01 	add.w	fp, fp, #1
   1bf62:	e771      	b.n	1be48 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7e>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
   1bf64:	b017      	add	sp, #92	; 0x5c
   1bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bf6a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   1bf6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int height = SizeOfDimension(input, 1);
   1bf6e:	688b      	ldr	r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   1bf70:	f890 b000 	ldrb.w	fp, [r0]
  return t->dims->data[dim];
   1bf74:	e9d3 a802 	ldrd	sl, r8, [r3, #8]
   1bf78:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
      params->stride_height, params->stride_width,
   1bf7c:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   1bf80:	b085      	sub	sp, #20
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1bf82:	2401      	movs	r4, #1
   1bf84:	4615      	mov	r5, r2
   1bf86:	9400      	str	r4, [sp, #0]
   1bf88:	4632      	mov	r2, r6
   1bf8a:	4641      	mov	r1, r8
   1bf8c:	4658      	mov	r0, fp
      params->stride_height, params->stride_width,
   1bf8e:	9302      	str	r3, [sp, #8]
   1bf90:	f7fd faa2 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1bf94:	9400      	str	r4, [sp, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1bf96:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1bf98:	464b      	mov	r3, r9
   1bf9a:	463a      	mov	r2, r7
   1bf9c:	4651      	mov	r1, sl
   1bf9e:	4658      	mov	r0, fp
   1bfa0:	f7fd fa9a 	bl	194d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1bfa4:	9b03      	ldr	r3, [sp, #12]
   1bfa6:	1e5c      	subs	r4, r3, #1
  int total_padding =
   1bfa8:	9b02      	ldr	r3, [sp, #8]
   1bfaa:	eba6 0608 	sub.w	r6, r6, r8
   1bfae:	eba7 070a 	sub.w	r7, r7, sl
   1bfb2:	fb03 6604 	mla	r6, r3, r4, r6
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1bfb6:	3801      	subs	r0, #1
  int total_padding =
   1bfb8:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   1bfbc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1bfc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   1bfc4:	1073      	asrs	r3, r6, #1
      params->filter_width, params->padding, &out_height, &out_width);
   1bfc6:	602b      	str	r3, [r5, #0]
  *offset = total_padding % 2;
   1bfc8:	f006 0601 	and.w	r6, r6, #1
  return total_padding / 2;
   1bfcc:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   1bfd0:	f009 0701 	and.w	r7, r9, #1
}
   1bfd4:	2000      	movs	r0, #0
      params->filter_width, params->padding, &out_height, &out_width);
   1bfd6:	606b      	str	r3, [r5, #4]
   1bfd8:	60ae      	str	r6, [r5, #8]
   1bfda:	60ef      	str	r7, [r5, #12]
}
   1bfdc:	b005      	add	sp, #20
   1bfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bfe2 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   1bfe2:	2000      	movs	r0, #0
   1bfe4:	4770      	bx	lr

0001bfe6 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1bfe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfea:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1bfec:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1bfee:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1bff0:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1bff2:	4615      	mov	r5, r2
   1bff4:	4604      	mov	r4, r0
   1bff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bff8:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1bffa:	dd01      	ble.n	1c000 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   1bffc:	f002 fae9 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1c000:	682b      	ldr	r3, [r5, #0]
   1c002:	2b04      	cmp	r3, #4
   1c004:	dcfa      	bgt.n	1bffc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c006:	6813      	ldr	r3, [r2, #0]
   1c008:	2b04      	cmp	r3, #4
   1c00a:	dcf7      	bgt.n	1bffc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
   1c00c:	2301      	movs	r3, #1
   1c00e:	2104      	movs	r1, #4
   1c010:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   1c012:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   1c016:	f7f9 fce8 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c01a:	4620      	mov	r0, r4
   1c01c:	ab12      	add	r3, sp, #72	; 0x48
   1c01e:	464a      	mov	r2, r9
   1c020:	4629      	mov	r1, r5
   1c022:	f7f9 fee6 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1c026:	2400      	movs	r4, #0
   1c028:	2100      	movs	r1, #0
   1c02a:	a804      	add	r0, sp, #16
   1c02c:	f7f9 fc48 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c030:	42a0      	cmp	r0, r4
   1c032:	dd4a      	ble.n	1c0ca <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe4>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1c034:	2500      	movs	r5, #0
   1c036:	2101      	movs	r1, #1
   1c038:	a804      	add	r0, sp, #16
   1c03a:	f7f9 fc41 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c03e:	42a8      	cmp	r0, r5
   1c040:	dd41      	ble.n	1c0c6 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe0>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1c042:	f04f 0a00 	mov.w	sl, #0
   1c046:	2102      	movs	r1, #2
   1c048:	a804      	add	r0, sp, #16
   1c04a:	f7f9 fc39 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c04e:	4550      	cmp	r0, sl
   1c050:	dd37      	ble.n	1c0c2 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xdc>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1c052:	2600      	movs	r6, #0
   1c054:	2103      	movs	r1, #3
   1c056:	a804      	add	r0, sp, #16
   1c058:	f7f9 fc32 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c05c:	42b0      	cmp	r0, r6
   1c05e:	dd2d      	ble.n	1c0bc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
          auto out_idx = Offset(output_shape, b, y, x, c);
   1c060:	9600      	str	r6, [sp, #0]
   1c062:	4653      	mov	r3, sl
   1c064:	462a      	mov	r2, r5
   1c066:	4621      	mov	r1, r4
   1c068:	a804      	add	r0, sp, #16
   1c06a:	f7f9 fceb 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c06e:	9600      	str	r6, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   1c070:	4607      	mov	r7, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c072:	4653      	mov	r3, sl
   1c074:	462a      	mov	r2, r5
   1c076:	4621      	mov	r1, r4
   1c078:	4648      	mov	r0, r9
   1c07a:	f7f9 fd19 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1c07e:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c080:	4680      	mov	r8, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1c082:	4653      	mov	r3, sl
   1c084:	462a      	mov	r2, r5
   1c086:	4621      	mov	r1, r4
   1c088:	a812      	add	r0, sp, #72	; 0x48
   1c08a:	f7f9 fd11 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   1c08e:	9b03      	ldr	r3, [sp, #12]
   1c090:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   1c094:	edd8 7a00 	vldr	s15, [r8]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   1c098:	9b25      	ldr	r3, [sp, #148]	; 0x94
          auto in2_val = input2_data[in2_idx];
   1c09a:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   1c09e:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   1c0a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c0aa:	bf48      	it	mi
   1c0ac:	ee67 7a87 	vmulmi.f32	s15, s15, s14
   1c0b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1c0b4:	edc7 7a00 	vstr	s15, [r7]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1c0b8:	3601      	adds	r6, #1
   1c0ba:	e7cb      	b.n	1c054 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x6e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1c0bc:	f10a 0a01 	add.w	sl, sl, #1
   1c0c0:	e7c1      	b.n	1c046 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x60>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1c0c2:	3501      	adds	r5, #1
   1c0c4:	e7b7      	b.n	1c036 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1c0c6:	3401      	adds	r4, #1
   1c0c8:	e7ae      	b.n	1c028 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x42>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   1c0ca:	a804      	add	r0, sp, #16
   1c0cc:	f7f9 fbed 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c0d0:	b01b      	add	sp, #108	; 0x6c
   1c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c0d6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

namespace reference_ops {

// Broadcast prelu to output_shape for quantized uint8/int8 data.
template <typename T>
inline void BroadcastPrelu4DSlow(
   1c0d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0da:	461e      	mov	r6, r3
    const PreluParams& params, const RuntimeShape& input_shape,
    const T* input_data, const RuntimeShape& alpha_shape, const T* alpha_data,
    const RuntimeShape& output_shape, T* output_data) {
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c0dc:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   1c0de:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c0e0:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   1c0e2:	9203      	str	r2, [sp, #12]
   1c0e4:	4604      	mov	r4, r0
   1c0e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c0e8:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c0ea:	dd01      	ble.n	1c0f0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   1c0ec:	f002 fa71 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   1c0f0:	6833      	ldr	r3, [r6, #0]
   1c0f2:	2b04      	cmp	r3, #4
   1c0f4:	dcfa      	bgt.n	1c0ec <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   1c0f6:	6813      	ldr	r3, [r2, #0]
   1c0f8:	2b04      	cmp	r3, #4
   1c0fa:	dcf7      	bgt.n	1c0ec <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   1c0fc:	2301      	movs	r3, #1
   1c0fe:	2104      	movs	r1, #4
   1c100:	a804      	add	r0, sp, #16
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   1c102:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   1c106:	f7f9 fc70 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c10a:	4628      	mov	r0, r5
   1c10c:	ab12      	add	r3, sp, #72	; 0x48
   1c10e:	465a      	mov	r2, fp
   1c110:	4631      	mov	r1, r6
   1c112:	f7f9 fe6e 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c116:	2500      	movs	r5, #0
   1c118:	2100      	movs	r1, #0
   1c11a:	a804      	add	r0, sp, #16
   1c11c:	f7f9 fbd0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c120:	42a8      	cmp	r0, r5
   1c122:	dd5a      	ble.n	1c1da <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c124:	2600      	movs	r6, #0
   1c126:	f10d 0810 	add.w	r8, sp, #16
   1c12a:	2101      	movs	r1, #1
   1c12c:	4640      	mov	r0, r8
   1c12e:	f7f9 fbc7 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c132:	42b0      	cmp	r0, r6
   1c134:	dd4f      	ble.n	1c1d6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c136:	2700      	movs	r7, #0
   1c138:	2102      	movs	r1, #2
   1c13a:	4640      	mov	r0, r8
   1c13c:	f7f9 fbc0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c140:	42b8      	cmp	r0, r7
   1c142:	dd46      	ble.n	1c1d2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c144:	f04f 0900 	mov.w	r9, #0
   1c148:	2103      	movs	r1, #3
   1c14a:	4640      	mov	r0, r8
   1c14c:	f7f9 fbb8 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c150:	4548      	cmp	r0, r9
   1c152:	dd3c      	ble.n	1c1ce <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf8>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c154:	463b      	mov	r3, r7
   1c156:	4632      	mov	r2, r6
   1c158:	4629      	mov	r1, r5
   1c15a:	f8cd 9000 	str.w	r9, [sp]
   1c15e:	4640      	mov	r0, r8
   1c160:	f7f9 fc70 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c164:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c166:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c168:	f8cd 9000 	str.w	r9, [sp]
   1c16c:	4632      	mov	r2, r6
   1c16e:	4629      	mov	r1, r5
   1c170:	4658      	mov	r0, fp
   1c172:	f7f9 fc9d 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   1c176:	9b03      	ldr	r3, [sp, #12]
   1c178:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input_value =
   1c17c:	6823      	ldr	r3, [r4, #0]
          int32 output_value;
          if (input_value >= 0) {
   1c17e:	eb1a 0a03 	adds.w	sl, sl, r3
   1c182:	d411      	bmi.n	1c1a8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd2>
            output_value = MultiplyByQuantizedMultiplier(
   1c184:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1c188:	4650      	mov	r0, sl
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];

            output_value = MultiplyByQuantizedMultiplier(
   1c18a:	f7ed fb77 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                input_value * alpha_value, params.output_multiplier_2,
                params.output_shift_2);
          }
          output_value += params.output_offset;
   1c18e:	68a3      	ldr	r3, [r4, #8]
   1c190:	4418      	add	r0, r3
      if (__a < __b)
   1c192:	2800      	cmp	r0, #0
   1c194:	dd19      	ble.n	1c1ca <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf4>
      return __a;
   1c196:	28ff      	cmp	r0, #255	; 0xff
   1c198:	bfa8      	it	ge
   1c19a:	20ff      	movge	r0, #255	; 0xff

          const int32 quantized_min = std::numeric_limits<T>::min();
          const int32 quantized_max = std::numeric_limits<T>::max();
          const int32 clamped_output =
              std::min(quantized_max, std::max(quantized_min, output_value));
          output_data[output_index] = static_cast<T>(clamped_output);
   1c19c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c19e:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c1a0:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   1c1a4:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c1a6:	e7cf      	b.n	1c148 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   1c1a8:	463b      	mov	r3, r7
   1c1aa:	4632      	mov	r2, r6
   1c1ac:	4629      	mov	r1, r5
   1c1ae:	f8cd 9000 	str.w	r9, [sp]
   1c1b2:	a812      	add	r0, sp, #72	; 0x48
   1c1b4:	f7f9 fc7c 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                params.alpha_offset + alpha_data[alpha_index];
   1c1b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c1ba:	5c18      	ldrb	r0, [r3, r0]
            const int32 alpha_value =
   1c1bc:	6863      	ldr	r3, [r4, #4]
   1c1be:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   1c1c0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1c1c4:	fb0a f000 	mul.w	r0, sl, r0
   1c1c8:	e7df      	b.n	1c18a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   1c1ca:	2000      	movs	r0, #0
   1c1cc:	e7e6      	b.n	1c19c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c1ce:	3701      	adds	r7, #1
   1c1d0:	e7b2      	b.n	1c138 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c1d2:	3601      	adds	r6, #1
   1c1d4:	e7a7      	b.n	1c126 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c1d6:	3501      	adds	r5, #1
   1c1d8:	e79e      	b.n	1c118 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   1c1da:	a804      	add	r0, sp, #16
   1c1dc:	f7f9 fb65 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   1c1e0:	b01b      	add	sp, #108	; 0x6c
   1c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c1e6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void BroadcastPrelu4DSlow(
   1c1e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1ea:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c1ec:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   1c1ee:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c1f0:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   1c1f2:	9203      	str	r2, [sp, #12]
   1c1f4:	4604      	mov	r4, r0
   1c1f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c1f8:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c1fa:	dd01      	ble.n	1c200 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   1c1fc:	f002 f9e9 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   1c200:	6833      	ldr	r3, [r6, #0]
   1c202:	2b04      	cmp	r3, #4
   1c204:	dcfa      	bgt.n	1c1fc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   1c206:	6813      	ldr	r3, [r2, #0]
   1c208:	2b04      	cmp	r3, #4
   1c20a:	dcf7      	bgt.n	1c1fc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   1c20c:	2301      	movs	r3, #1
   1c20e:	2104      	movs	r1, #4
   1c210:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   1c212:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   1c216:	f7f9 fbe8 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c21a:	4628      	mov	r0, r5
   1c21c:	ab12      	add	r3, sp, #72	; 0x48
   1c21e:	465a      	mov	r2, fp
   1c220:	4631      	mov	r1, r6
   1c222:	f7f9 fde6 	bl	15df2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c226:	2500      	movs	r5, #0
   1c228:	2100      	movs	r1, #0
   1c22a:	a804      	add	r0, sp, #16
   1c22c:	f7f9 fb48 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c230:	42a8      	cmp	r0, r5
   1c232:	dd5c      	ble.n	1c2ee <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x108>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c234:	2600      	movs	r6, #0
   1c236:	f10d 0810 	add.w	r8, sp, #16
   1c23a:	2101      	movs	r1, #1
   1c23c:	4640      	mov	r0, r8
   1c23e:	f7f9 fb3f 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c242:	42b0      	cmp	r0, r6
   1c244:	dd51      	ble.n	1c2ea <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c246:	2700      	movs	r7, #0
   1c248:	2102      	movs	r1, #2
   1c24a:	4640      	mov	r0, r8
   1c24c:	f7f9 fb38 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c250:	42b8      	cmp	r0, r7
   1c252:	dd48      	ble.n	1c2e6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c254:	f04f 0900 	mov.w	r9, #0
   1c258:	2103      	movs	r1, #3
   1c25a:	4640      	mov	r0, r8
   1c25c:	f7f9 fb30 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c260:	4548      	cmp	r0, r9
   1c262:	dd3e      	ble.n	1c2e2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c264:	463b      	mov	r3, r7
   1c266:	4632      	mov	r2, r6
   1c268:	4629      	mov	r1, r5
   1c26a:	f8cd 9000 	str.w	r9, [sp]
   1c26e:	4640      	mov	r0, r8
   1c270:	f7f9 fbe8 	bl	15a44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c274:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c276:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c278:	f8cd 9000 	str.w	r9, [sp]
   1c27c:	4632      	mov	r2, r6
   1c27e:	4629      	mov	r1, r5
   1c280:	4658      	mov	r0, fp
   1c282:	f7f9 fc15 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              params.input_offset + input_data[input_index];
   1c286:	9b03      	ldr	r3, [sp, #12]
   1c288:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input_value =
   1c28c:	6823      	ldr	r3, [r4, #0]
          if (input_value >= 0) {
   1c28e:	eb1a 0a03 	adds.w	sl, sl, r3
   1c292:	d412      	bmi.n	1c2ba <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
            output_value = MultiplyByQuantizedMultiplier(
   1c294:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1c298:	4650      	mov	r0, sl
            output_value = MultiplyByQuantizedMultiplier(
   1c29a:	f7ed faef 	bl	987c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
          output_value += params.output_offset;
   1c29e:	68a3      	ldr	r3, [r4, #8]
   1c2a0:	4418      	add	r0, r3
      if (__a < __b)
   1c2a2:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   1c2a6:	db19      	blt.n	1c2dc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      return __a;
   1c2a8:	287f      	cmp	r0, #127	; 0x7f
   1c2aa:	bfa8      	it	ge
   1c2ac:	207f      	movge	r0, #127	; 0x7f
          output_data[output_index] = static_cast<T>(clamped_output);
   1c2ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c2b0:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c2b2:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   1c2b6:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c2b8:	e7ce      	b.n	1c258 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   1c2ba:	463b      	mov	r3, r7
   1c2bc:	4632      	mov	r2, r6
   1c2be:	4629      	mov	r1, r5
   1c2c0:	f8cd 9000 	str.w	r9, [sp]
   1c2c4:	a812      	add	r0, sp, #72	; 0x48
   1c2c6:	f7f9 fbf3 	bl	15ab0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                params.alpha_offset + alpha_data[alpha_index];
   1c2ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c2cc:	5618      	ldrsb	r0, [r3, r0]
            const int32 alpha_value =
   1c2ce:	6863      	ldr	r3, [r4, #4]
   1c2d0:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   1c2d2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1c2d6:	fb0a f000 	mul.w	r0, sl, r0
   1c2da:	e7de      	b.n	1c29a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   1c2dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c2e0:	e7e5      	b.n	1c2ae <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c2e2:	3701      	adds	r7, #1
   1c2e4:	e7b0      	b.n	1c248 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c2e6:	3601      	adds	r6, #1
   1c2e8:	e7a5      	b.n	1c236 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c2ea:	3501      	adds	r5, #1
   1c2ec:	e79c      	b.n	1c228 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   1c2ee:	a804      	add	r0, sp, #16
   1c2f0:	f7f9 fadb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c2f4:	b01b      	add	sp, #108	; 0x6c
   1c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c2fa <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1c2fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1c2fc:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1c2fe:	b90b      	cbnz	r3, 1c304 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj+0xa>
   1c300:	f002 f967 	bl	1e5d2 <abort>
  void* data = nullptr;
   1c304:	2400      	movs	r4, #0
   1c306:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1c308:	aa01      	add	r2, sp, #4
   1c30a:	2108      	movs	r1, #8
   1c30c:	4798      	blx	r3
   1c30e:	2801      	cmp	r0, #1
  return data;
   1c310:	bf14      	ite	ne
   1c312:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   1c314:	4620      	moveq	r0, r4
}
   1c316:	b002      	add	sp, #8
   1c318:	bd10      	pop	{r4, pc}

0001c31a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
   1c31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c31c:	9f06      	ldr	r7, [sp, #24]
   1c31e:	469c      	mov	ip, r3
  if (num_dims == 0) {
   1c320:	b1d0      	cbz	r0, 1c358 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3e>
  TFLITE_DCHECK(dims != nullptr);
   1c322:	b909      	cbnz	r1, 1c328 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xe>
   1c324:	f002 f955 	bl	1e5d2 <abort>
  TFLITE_DCHECK(index != nullptr);
   1c328:	2a00      	cmp	r2, #0
   1c32a:	d0fb      	beq.n	1c324 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xa>
  for (int idx = 0; idx < num_dims; ++idx) {
   1c32c:	2400      	movs	r4, #0
  size_t offset = 0;
   1c32e:	4625      	mov	r5, r4
  for (int idx = 0; idx < num_dims; ++idx) {
   1c330:	42a0      	cmp	r0, r4
   1c332:	dd12      	ble.n	1c35a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
    if (axis != nullptr) {
   1c334:	b147      	cbz	r7, 1c348 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   1c336:	2600      	movs	r6, #0
   1c338:	45b4      	cmp	ip, r6
   1c33a:	dd05      	ble.n	1c348 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
        if (idx == axis[axis_idx]) {
   1c33c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1c340:	429c      	cmp	r4, r3
   1c342:	d007      	beq.n	1c354 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   1c344:	3601      	adds	r6, #1
   1c346:	e7f7      	b.n	1c338 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x1e>
      offset = offset * static_cast<size_t>(dims[idx]) +
   1c348:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   1c34c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1c350:	fb03 6505 	mla	r5, r3, r5, r6
  for (int idx = 0; idx < num_dims; ++idx) {
   1c354:	3401      	adds	r4, #1
   1c356:	e7eb      	b.n	1c330 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x16>
    return 0;
   1c358:	4605      	mov	r5, r0
}
   1c35a:	4628      	mov	r0, r5
   1c35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c35e <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
   1c35e:	f7f1 b9cd 	b.w	d6fc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>

0001c362 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>:
                 tflite::MeanParams* op_params) {
   1c362:	b570      	push	{r4, r5, r6, lr}
   1c364:	1c94      	adds	r4, r2, #2
   1c366:	4625      	mov	r5, r4
  int i = 0;
   1c368:	2300      	movs	r3, #0
  for (; i < axis_count; ++i) {
   1c36a:	428b      	cmp	r3, r1
   1c36c:	db08      	blt.n	1c380 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x1e>
   1c36e:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    op_params->axis[i] = 1;
   1c372:	2001      	movs	r0, #1
  for (; i < 4; ++i) {
   1c374:	2b03      	cmp	r3, #3
   1c376:	dc09      	bgt.n	1c38c <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x2a>
    op_params->axis[i] = 1;
   1c378:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
  for (; i < 4; ++i) {
   1c37c:	3301      	adds	r3, #1
   1c37e:	e7f9      	b.n	1c374 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x12>
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   1c380:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   1c384:	f825 6b02 	strh.w	r6, [r5], #2
  for (; i < axis_count; ++i) {
   1c388:	3301      	adds	r3, #1
   1c38a:	e7ee      	b.n	1c36a <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x8>
  op_params->axis_count = axis_count;
   1c38c:	7011      	strb	r1, [r2, #0]
}
   1c38e:	bd70      	pop	{r4, r5, r6, pc}

0001c390 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c390:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c392:	6882      	ldr	r2, [r0, #8]
   1c394:	6858      	ldr	r0, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c396:	684b      	ldr	r3, [r1, #4]
   1c398:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1c39a:	eb02 1080 	add.w	r0, r2, r0, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1c39e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  if (input->data.raw != output->data.raw) {
   1c3a2:	6841      	ldr	r1, [r0, #4]
   1c3a4:	6853      	ldr	r3, [r2, #4]
   1c3a6:	4299      	cmp	r1, r3
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c3a8:	b510      	push	{r4, lr}
  if (input->data.raw != output->data.raw) {
   1c3aa:	d009      	beq.n	1c3c0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
    for (size_t i = 0; i < input->bytes; ++i) {
   1c3ac:	2300      	movs	r3, #0
   1c3ae:	6981      	ldr	r1, [r0, #24]
   1c3b0:	4299      	cmp	r1, r3
   1c3b2:	d905      	bls.n	1c3c0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
      output->data.raw[i] = input->data.raw[i];
   1c3b4:	6841      	ldr	r1, [r0, #4]
   1c3b6:	5ccc      	ldrb	r4, [r1, r3]
   1c3b8:	6851      	ldr	r1, [r2, #4]
   1c3ba:	54cc      	strb	r4, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
   1c3bc:	3301      	adds	r3, #1
   1c3be:	e7f6      	b.n	1c3ae <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
}
   1c3c0:	2000      	movs	r0, #0
   1c3c2:	bd10      	pop	{r4, pc}

0001c3c4 <_ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   1c3c4:	2000      	movs	r0, #0
   1c3c6:	4770      	bx	lr

0001c3c8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:

template <typename T>
inline void ResizeNearestNeighbor(
   1c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3cc:	4698      	mov	r8, r3
    const tflite::ResizeNearestNeighborParams& op_params,
    const RuntimeShape& unextended_input_shape, const T* input_data,
    const RuntimeShape& output_size_shape, const int32* output_size_data,
    const RuntimeShape& unextended_output_shape, T* output_data) {
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3ce:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c3d0:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3d2:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c3d4:	e9dd 7422 	ldrd	r7, r4, [sp, #136]	; 0x88
   1c3d8:	4605      	mov	r5, r0
   1c3da:	4616      	mov	r6, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3dc:	dd01      	ble.n	1c3e2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c3de:	f002 f8f8 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c3e2:	6823      	ldr	r3, [r4, #0]
   1c3e4:	2b04      	cmp	r3, #4
   1c3e6:	dcfa      	bgt.n	1c3de <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   1c3e8:	460a      	mov	r2, r1
   1c3ea:	2301      	movs	r3, #1
   1c3ec:	2104      	movs	r1, #4
   1c3ee:	a80c      	add	r0, sp, #48	; 0x30
   1c3f0:	f7f9 fafb 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c3f4:	4622      	mov	r2, r4
   1c3f6:	2301      	movs	r3, #1
   1c3f8:	2104      	movs	r1, #4
   1c3fa:	a812      	add	r0, sp, #72	; 0x48
   1c3fc:	f7f9 faf5 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c400:	2300      	movs	r3, #0
   1c402:	4619      	mov	r1, r3
   1c404:	aa12      	add	r2, sp, #72	; 0x48
   1c406:	a80c      	add	r0, sp, #48	; 0x30
   1c408:	f7fc f907 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c40c:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c40e:	900a      	str	r0, [sp, #40]	; 0x28
  int32 input_height = input_shape.Dims(1);
   1c410:	a80c      	add	r0, sp, #48	; 0x30
   1c412:	f7f9 fa55 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c416:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c418:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c41a:	a80c      	add	r0, sp, #48	; 0x30
   1c41c:	f7f9 fa50 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c420:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c422:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c424:	aa12      	add	r2, sp, #72	; 0x48
   1c426:	4619      	mov	r1, r3
   1c428:	a80c      	add	r0, sp, #48	; 0x30
   1c42a:	f7fc f8f6 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c42e:	4604      	mov	r4, r0

  // The Tensorflow version of this op allows resize on the width and height
  // axis only.
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c430:	4640      	mov	r0, r8
   1c432:	f7f9 faca 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c436:	2802      	cmp	r0, #2
   1c438:	d1d1      	bne.n	1c3de <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c43a:	683b      	ldr	r3, [r7, #0]
   1c43c:	9305      	str	r3, [sp, #20]
  int32 output_width = output_size_data[1];

  const int col_offset = input_shape.Dims(3);
   1c43e:	2103      	movs	r1, #3
   1c440:	a80c      	add	r0, sp, #48	; 0x30
   1c442:	f7f9 fa3d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c446:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c448:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c44c:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c44e:	4603      	mov	r3, r0
   1c450:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c452:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c454:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c456:	4353      	muls	r3, r2
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
        output_ptr += depth;
      }
    }
    input_ptr += batch_offset;
   1c458:	009b      	lsls	r3, r3, #2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c45a:	00a4      	lsls	r4, r4, #2
    input_ptr += batch_offset;
   1c45c:	9309      	str	r3, [sp, #36]	; 0x24
   1c45e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c462:	4363      	muls	r3, r4
   1c464:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c466:	f04f 0900 	mov.w	r9, #0
   1c46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c46c:	4599      	cmp	r9, r3
   1c46e:	da35      	bge.n	1c4dc <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x114>
    for (int y = 0; y < output_height; ++y) {
   1c470:	2700      	movs	r7, #0
   1c472:	9b05      	ldr	r3, [sp, #20]
   1c474:	429f      	cmp	r7, r3
   1c476:	da2c      	bge.n	1c4d2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10a>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c478:	786b      	ldrb	r3, [r5, #1]
   1c47a:	9300      	str	r3, [sp, #0]
   1c47c:	9a05      	ldr	r2, [sp, #20]
   1c47e:	782b      	ldrb	r3, [r5, #0]
   1c480:	9903      	ldr	r1, [sp, #12]
   1c482:	4638      	mov	r0, r7
   1c484:	f7f1 fca8 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c488:	9b07      	ldr	r3, [sp, #28]
   1c48a:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c48e:	4343      	muls	r3, r0
   1c490:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c492:	f04f 0800 	mov.w	r8, #0
   1c496:	45d0      	cmp	r8, sl
   1c498:	da15      	bge.n	1c4c6 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xfe>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c49a:	786b      	ldrb	r3, [r5, #1]
   1c49c:	9904      	ldr	r1, [sp, #16]
   1c49e:	9300      	str	r3, [sp, #0]
   1c4a0:	4652      	mov	r2, sl
   1c4a2:	782b      	ldrb	r3, [r5, #0]
   1c4a4:	4640      	mov	r0, r8
   1c4a6:	f7f1 fc97 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c4aa:	9a08      	ldr	r2, [sp, #32]
   1c4ac:	9b06      	ldr	r3, [sp, #24]
   1c4ae:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c4b2:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   1c4b6:	4622      	mov	r2, r4
   1c4b8:	4658      	mov	r0, fp
   1c4ba:	f002 f89f 	bl	1e5fc <memcpy>
        output_ptr += depth;
   1c4be:	44a3      	add	fp, r4
      for (int x = 0; x < output_width; ++x) {
   1c4c0:	f108 0801 	add.w	r8, r8, #1
   1c4c4:	e7e7      	b.n	1c496 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xce>
   1c4c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c4c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c4ca:	4413      	add	r3, r2
   1c4cc:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c4ce:	3701      	adds	r7, #1
   1c4d0:	e7cf      	b.n	1c472 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xaa>
    input_ptr += batch_offset;
   1c4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
   1c4d4:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c4d8:	441e      	add	r6, r3
  for (int b = 0; b < batches; ++b) {
   1c4da:	e7c6      	b.n	1c46a <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa2>
  const RuntimeShape output_shape =
   1c4dc:	a812      	add	r0, sp, #72	; 0x48
   1c4de:	f7f9 f9e4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c4e2:	a80c      	add	r0, sp, #48	; 0x30
   1c4e4:	f7f9 f9e1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  }
}
   1c4e8:	b019      	add	sp, #100	; 0x64
   1c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c4ee <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   1c4ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4f2:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c4f4:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c4f6:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c4f8:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c4fa:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   1c4fe:	4604      	mov	r4, r0
   1c500:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c502:	dd01      	ble.n	1c508 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c504:	f002 f865 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c508:	6833      	ldr	r3, [r6, #0]
   1c50a:	2b04      	cmp	r3, #4
   1c50c:	dcfa      	bgt.n	1c504 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   1c50e:	460a      	mov	r2, r1
   1c510:	2301      	movs	r3, #1
   1c512:	2104      	movs	r1, #4
   1c514:	a80c      	add	r0, sp, #48	; 0x30
   1c516:	f7f9 fa68 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c51a:	4632      	mov	r2, r6
   1c51c:	2301      	movs	r3, #1
   1c51e:	2104      	movs	r1, #4
   1c520:	a812      	add	r0, sp, #72	; 0x48
   1c522:	f7f9 fa62 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c526:	2300      	movs	r3, #0
   1c528:	4619      	mov	r1, r3
   1c52a:	aa12      	add	r2, sp, #72	; 0x48
   1c52c:	a80c      	add	r0, sp, #48	; 0x30
   1c52e:	f7fc f874 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c532:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c534:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   1c536:	a80c      	add	r0, sp, #48	; 0x30
   1c538:	f7f9 f9c2 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c53c:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c53e:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c540:	a80c      	add	r0, sp, #48	; 0x30
   1c542:	f7f9 f9bd 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c546:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c548:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c54a:	aa12      	add	r2, sp, #72	; 0x48
   1c54c:	4619      	mov	r1, r3
   1c54e:	a80c      	add	r0, sp, #48	; 0x30
   1c550:	f7fc f863 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c554:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c556:	4640      	mov	r0, r8
   1c558:	f7f9 fa37 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c55c:	2802      	cmp	r0, #2
   1c55e:	d1d1      	bne.n	1c504 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c560:	683b      	ldr	r3, [r7, #0]
   1c562:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   1c564:	2103      	movs	r1, #3
   1c566:	a80c      	add	r0, sp, #48	; 0x30
   1c568:	f7f9 f9aa 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c56c:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c56e:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c572:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c574:	4603      	mov	r3, r0
   1c576:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c578:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c57a:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c57c:	4353      	muls	r3, r2
   1c57e:	930a      	str	r3, [sp, #40]	; 0x28
   1c580:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c584:	4373      	muls	r3, r6
   1c586:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c588:	f04f 0900 	mov.w	r9, #0
   1c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c58e:	4599      	cmp	r9, r3
   1c590:	da34      	bge.n	1c5fc <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   1c592:	2700      	movs	r7, #0
   1c594:	9b05      	ldr	r3, [sp, #20]
   1c596:	429f      	cmp	r7, r3
   1c598:	da2b      	bge.n	1c5f2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c59a:	7863      	ldrb	r3, [r4, #1]
   1c59c:	9300      	str	r3, [sp, #0]
   1c59e:	9a05      	ldr	r2, [sp, #20]
   1c5a0:	7823      	ldrb	r3, [r4, #0]
   1c5a2:	9903      	ldr	r1, [sp, #12]
   1c5a4:	4638      	mov	r0, r7
   1c5a6:	f7f1 fc17 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c5aa:	9b07      	ldr	r3, [sp, #28]
   1c5ac:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c5b0:	4343      	muls	r3, r0
   1c5b2:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c5b4:	f04f 0800 	mov.w	r8, #0
   1c5b8:	45d0      	cmp	r8, sl
   1c5ba:	da14      	bge.n	1c5e6 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c5bc:	7863      	ldrb	r3, [r4, #1]
   1c5be:	9904      	ldr	r1, [sp, #16]
   1c5c0:	9300      	str	r3, [sp, #0]
   1c5c2:	4652      	mov	r2, sl
   1c5c4:	7823      	ldrb	r3, [r4, #0]
   1c5c6:	4640      	mov	r0, r8
   1c5c8:	f7f1 fc06 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c5cc:	9a08      	ldr	r2, [sp, #32]
   1c5ce:	9b06      	ldr	r3, [sp, #24]
   1c5d0:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c5d4:	1829      	adds	r1, r5, r0
   1c5d6:	4632      	mov	r2, r6
   1c5d8:	4658      	mov	r0, fp
   1c5da:	f002 f80f 	bl	1e5fc <memcpy>
        output_ptr += depth;
   1c5de:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   1c5e0:	f108 0801 	add.w	r8, r8, #1
   1c5e4:	e7e8      	b.n	1c5b8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   1c5e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c5e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c5ea:	4413      	add	r3, r2
   1c5ec:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c5ee:	3701      	adds	r7, #1
   1c5f0:	e7d0      	b.n	1c594 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   1c5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   1c5f4:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c5f8:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   1c5fa:	e7c7      	b.n	1c58c <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   1c5fc:	a812      	add	r0, sp, #72	; 0x48
   1c5fe:	f7f9 f954 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c602:	a80c      	add	r0, sp, #48	; 0x30
   1c604:	f7f9 f951 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c608:	b019      	add	sp, #100	; 0x64
   1c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c60e <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   1c60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c612:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c614:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c616:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c618:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c61a:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   1c61e:	4604      	mov	r4, r0
   1c620:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c622:	dd01      	ble.n	1c628 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c624:	f001 ffd5 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c628:	6833      	ldr	r3, [r6, #0]
   1c62a:	2b04      	cmp	r3, #4
   1c62c:	dcfa      	bgt.n	1c624 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   1c62e:	460a      	mov	r2, r1
   1c630:	2301      	movs	r3, #1
   1c632:	2104      	movs	r1, #4
   1c634:	a80c      	add	r0, sp, #48	; 0x30
   1c636:	f7f9 f9d8 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c63a:	4632      	mov	r2, r6
   1c63c:	2301      	movs	r3, #1
   1c63e:	2104      	movs	r1, #4
   1c640:	a812      	add	r0, sp, #72	; 0x48
   1c642:	f7f9 f9d2 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c646:	2300      	movs	r3, #0
   1c648:	4619      	mov	r1, r3
   1c64a:	aa12      	add	r2, sp, #72	; 0x48
   1c64c:	a80c      	add	r0, sp, #48	; 0x30
   1c64e:	f7fb ffe4 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c652:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c654:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   1c656:	a80c      	add	r0, sp, #48	; 0x30
   1c658:	f7f9 f932 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c65c:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c65e:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c660:	a80c      	add	r0, sp, #48	; 0x30
   1c662:	f7f9 f92d 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c666:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c668:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c66a:	aa12      	add	r2, sp, #72	; 0x48
   1c66c:	4619      	mov	r1, r3
   1c66e:	a80c      	add	r0, sp, #48	; 0x30
   1c670:	f7fb ffd3 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c674:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c676:	4640      	mov	r0, r8
   1c678:	f7f9 f9a7 	bl	159ca <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c67c:	2802      	cmp	r0, #2
   1c67e:	d1d1      	bne.n	1c624 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c680:	683b      	ldr	r3, [r7, #0]
   1c682:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   1c684:	2103      	movs	r1, #3
   1c686:	a80c      	add	r0, sp, #48	; 0x30
   1c688:	f7f9 f91a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c68c:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c68e:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c692:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c694:	4603      	mov	r3, r0
   1c696:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c698:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c69a:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c69c:	4353      	muls	r3, r2
   1c69e:	930a      	str	r3, [sp, #40]	; 0x28
   1c6a0:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c6a4:	4373      	muls	r3, r6
   1c6a6:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c6a8:	f04f 0900 	mov.w	r9, #0
   1c6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c6ae:	4599      	cmp	r9, r3
   1c6b0:	da34      	bge.n	1c71c <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   1c6b2:	2700      	movs	r7, #0
   1c6b4:	9b05      	ldr	r3, [sp, #20]
   1c6b6:	429f      	cmp	r7, r3
   1c6b8:	da2b      	bge.n	1c712 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c6ba:	7863      	ldrb	r3, [r4, #1]
   1c6bc:	9300      	str	r3, [sp, #0]
   1c6be:	9a05      	ldr	r2, [sp, #20]
   1c6c0:	7823      	ldrb	r3, [r4, #0]
   1c6c2:	9903      	ldr	r1, [sp, #12]
   1c6c4:	4638      	mov	r0, r7
   1c6c6:	f7f1 fb87 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c6ca:	9b07      	ldr	r3, [sp, #28]
   1c6cc:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c6d0:	4343      	muls	r3, r0
   1c6d2:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c6d4:	f04f 0800 	mov.w	r8, #0
   1c6d8:	45d0      	cmp	r8, sl
   1c6da:	da14      	bge.n	1c706 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c6dc:	7863      	ldrb	r3, [r4, #1]
   1c6de:	9904      	ldr	r1, [sp, #16]
   1c6e0:	9300      	str	r3, [sp, #0]
   1c6e2:	4652      	mov	r2, sl
   1c6e4:	7823      	ldrb	r3, [r4, #0]
   1c6e6:	4640      	mov	r0, r8
   1c6e8:	f7f1 fb76 	bl	ddd8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c6ec:	9a08      	ldr	r2, [sp, #32]
   1c6ee:	9b06      	ldr	r3, [sp, #24]
   1c6f0:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c6f4:	1829      	adds	r1, r5, r0
   1c6f6:	4632      	mov	r2, r6
   1c6f8:	4658      	mov	r0, fp
   1c6fa:	f001 ff7f 	bl	1e5fc <memcpy>
        output_ptr += depth;
   1c6fe:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   1c700:	f108 0801 	add.w	r8, r8, #1
   1c704:	e7e8      	b.n	1c6d8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   1c706:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c70a:	4413      	add	r3, r2
   1c70c:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c70e:	3701      	adds	r7, #1
   1c710:	e7d0      	b.n	1c6b4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   1c712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   1c714:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c718:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   1c71a:	e7c7      	b.n	1c6ac <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   1c71c:	a812      	add	r0, sp, #72	; 0x48
   1c71e:	f7f9 f8c4 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c722:	a80c      	add	r0, sp, #48	; 0x30
   1c724:	f7f9 f8c1 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c728:	b019      	add	sp, #100	; 0x64
   1c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c72e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>:
    return floor_val = floor_val + 1.0f;
  }
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
   1c72e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1c732:	f8d0 8000 	ldr.w	r8, [r0]
   1c736:	461e      	mov	r6, r3
   1c738:	6813      	ldr	r3, [r2, #0]
   1c73a:	4598      	cmp	r8, r3
   1c73c:	ed2d 8b04 	vpush	{d8-d9}
   1c740:	4604      	mov	r4, r0
   1c742:	460f      	mov	r7, r1
   1c744:	4691      	mov	r9, r2
   1c746:	d001      	beq.n	1c74c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   1c748:	f001 ff43 	bl	1e5d2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1c74c:	2500      	movs	r5, #0
   1c74e:	45a8      	cmp	r8, r5
   1c750:	dd0c      	ble.n	1c76c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1c752:	4629      	mov	r1, r5
   1c754:	4620      	mov	r0, r4
   1c756:	f7f9 f8b3 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c75a:	4629      	mov	r1, r5
   1c75c:	4682      	mov	sl, r0
   1c75e:	4648      	mov	r0, r9
   1c760:	f7f9 f8ae 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c764:	4582      	cmp	sl, r0
   1c766:	d1ef      	bne.n	1c748 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   1c768:	3501      	adds	r5, #1
   1c76a:	e7f0      	b.n	1c74e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1c76c:	f1b8 0f05 	cmp.w	r8, #5
   1c770:	bfcc      	ite	gt
   1c772:	6864      	ldrgt	r4, [r4, #4]
   1c774:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1c776:	2300      	movs	r3, #0
    int buffer_size = 1;
   1c778:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
   1c77c:	4598      	cmp	r8, r3
   1c77e:	dc25      	bgt.n	1c7cc <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x9e>
   1c780:	4634      	mov	r4, r6
  if ((diff < 0.5f) ||
   1c782:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   1c786:	2600      	movs	r6, #0
    return floor_val = floor_val + 1.0f;
   1c788:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   1c78c:	454e      	cmp	r6, r9
   1c78e:	da23      	bge.n	1c7d8 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0xaa>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   1c790:	ecb7 8a01 	vldmia	r7!, {s16}
  { return __builtin_floorf(__x); }
   1c794:	eeb0 0a48 	vmov.f32	s0, s16
   1c798:	f7f5 fcc0 	bl	1211c <floorf>
  auto diff = value - floor_val;
   1c79c:	ee38 8a40 	vsub.f32	s16, s16, s0
  if ((diff < 0.5f) ||
   1c7a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
   1c7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c7a8:	d40c      	bmi.n	1c7c4 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
   1c7aa:	eeb4 8a68 	vcmp.f32	s16, s17
   1c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c7b2:	d105      	bne.n	1c7c0 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x92>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   1c7b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1c7b8:	ee17 3a90 	vmov	r3, s15
   1c7bc:	07db      	lsls	r3, r3, #31
   1c7be:	d501      	bpl.n	1c7c4 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
    return floor_val = floor_val + 1.0f;
   1c7c0:	ee30 0a09 	vadd.f32	s0, s0, s18
    output_data[i] = RoundToNearest(input_data[i]);
   1c7c4:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   1c7c8:	3601      	adds	r6, #1
   1c7ca:	e7df      	b.n	1c78c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x5e>
      buffer_size *= dims_data[i];
   1c7cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1c7d0:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1c7d2:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   1c7d6:	e7d1      	b.n	1c77c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
  }
}
   1c7d8:	ecbd 8b04 	vpop	{d8-d9}
   1c7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c7e0 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c7e0:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c7e2:	b530      	push	{r4, r5, lr}
   1c7e4:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c7e6:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c7e8:	6884      	ldr	r4, [r0, #8]
   1c7ea:	685d      	ldr	r5, [r3, #4]
   1c7ec:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   1c7f0:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c7f4:	b08d      	sub	sp, #52	; 0x34
   1c7f6:	d111      	bne.n	1c81c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  RuntimeShape() : size_(0) {}
   1c7f8:	9400      	str	r4, [sp, #0]
   1c7fa:	b9cd      	cbnz	r5, 1c830 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   1c7fc:	9506      	str	r5, [sp, #24]
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   1c7fe:	462b      	mov	r3, r5
   1c800:	aa06      	add	r2, sp, #24
   1c802:	4621      	mov	r1, r4
   1c804:	4668      	mov	r0, sp
   1c806:	f7ff ff92 	bl	1c72e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>
                       GetTensorShape(output), GetTensorData<float>(output));
   1c80a:	a806      	add	r0, sp, #24
   1c80c:	f7f9 f84d 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   1c810:	4668      	mov	r0, sp
   1c812:	f7f9 f84a 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c816:	2000      	movs	r0, #0
   1c818:	b00d      	add	sp, #52	; 0x34
   1c81a:	bd30      	pop	{r4, r5, pc}
  const int dims_size = dims->size;
   1c81c:	68a2      	ldr	r2, [r4, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   1c81e:	2300      	movs	r3, #0
   1c820:	f852 1b04 	ldr.w	r1, [r2], #4
   1c824:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   1c826:	4668      	mov	r0, sp
   1c828:	f7fa f845 	bl	168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c82c:	6864      	ldr	r4, [r4, #4]
   1c82e:	e7e4      	b.n	1c7fa <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  const int dims_size = dims->size;
   1c830:	68aa      	ldr	r2, [r5, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   1c832:	2300      	movs	r3, #0
   1c834:	f852 1b04 	ldr.w	r1, [r2], #4
   1c838:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   1c83a:	a806      	add	r0, sp, #24
   1c83c:	f7fa f83b 	bl	168b6 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c840:	686d      	ldr	r5, [r5, #4]
   1c842:	e7dc      	b.n	1c7fe <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1e>

0001c844 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
   1c844:	b570      	push	{r4, r5, r6, lr}
   1c846:	b08e      	sub	sp, #56	; 0x38
   1c848:	4604      	mov	r4, r0
   1c84a:	460d      	mov	r5, r1
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c84c:	4601      	mov	r1, r0
   1c84e:	a802      	add	r0, sp, #8
                  const SoftmaxParams& op_data) {
   1c850:	4616      	mov	r6, r2
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c852:	f7f9 f86f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c856:	b104      	cbz	r4, 1c85a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16>
   1c858:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   1c85a:	4629      	mov	r1, r5
   1c85c:	a808      	add	r0, sp, #32
   1c85e:	f7f9 f869 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c862:	b105      	cbz	r5, 1c866 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22>
   1c864:	686d      	ldr	r5, [r5, #4]
  tflite::reference_ops::Softmax(
   1c866:	9500      	str	r5, [sp, #0]
   1c868:	ab08      	add	r3, sp, #32
   1c86a:	4622      	mov	r2, r4
   1c86c:	a902      	add	r1, sp, #8
   1c86e:	4630      	mov	r0, r6
   1c870:	f7f1 fc98 	bl	e1a4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
   1c874:	a808      	add	r0, sp, #32
   1c876:	f7f9 f818 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c87a:	a802      	add	r0, sp, #8
   1c87c:	f7f9 f815 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c880:	b00e      	add	sp, #56	; 0x38
   1c882:	bd70      	pop	{r4, r5, r6, pc}

0001c884 <_ZN6tflite13GetReciprocalEiiPi>:
                           int* num_bits_over_unit) {
   1c884:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   1c886:	fab0 f380 	clz	r3, r0
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   1c88a:	1ac9      	subs	r1, r1, r3
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   1c88c:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   1c88e:	6011      	str	r1, [r2, #0]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   1c890:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   1c894:	f7ee ffb8 	bl	b808 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
}
   1c898:	bd08      	pop	{r3, pc}

0001c89a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   1c89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c89e:	b08d      	sub	sp, #52	; 0x34
   1c8a0:	460c      	mov	r4, r1
   1c8a2:	9203      	str	r2, [sp, #12]
   1c8a4:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   1c8a6:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   1c8aa:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   1c8ac:	6983      	ldr	r3, [r0, #24]
   1c8ae:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c8b0:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8b2:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c8b4:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8b6:	4619      	mov	r1, r3
   1c8b8:	4620      	mov	r0, r4
   1c8ba:	9304      	str	r3, [sp, #16]
   1c8bc:	f7fd faa2 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c8c0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8c4:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c8c6:	4619      	mov	r1, r3
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f7fb fea6 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c8ce:	2400      	movs	r4, #0
   1c8d0:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   1c8d2:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c8d4:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   1c8d6:	9b02      	ldr	r3, [sp, #8]
   1c8d8:	4598      	cmp	r8, r3
   1c8da:	da71      	bge.n	1c9c0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   1c8dc:	9b03      	ldr	r3, [sp, #12]
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c8de:	f88d 901f 	strb.w	r9, [sp, #31]
   1c8e2:	191f      	adds	r7, r3, r4
   1c8e4:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   1c8e6:	2200      	movs	r2, #0
   1c8e8:	42aa      	cmp	r2, r5
   1c8ea:	da0e      	bge.n	1c90a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1c8ec:	460b      	mov	r3, r1
      if (__a < __b)
   1c8ee:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1c8f2:	781e      	ldrb	r6, [r3, #0]
   1c8f4:	4286      	cmp	r6, r0
      return __a;
   1c8f6:	f10d 001f 	add.w	r0, sp, #31
   1c8fa:	bf98      	it	ls
   1c8fc:	4603      	movls	r3, r0
   1c8fe:	3101      	adds	r1, #1
   1c900:	781b      	ldrb	r3, [r3, #0]
   1c902:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   1c906:	3201      	adds	r2, #1
   1c908:	e7ee      	b.n	1c8e8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1c90a:	2600      	movs	r6, #0
   1c90c:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   1c90e:	46b2      	mov	sl, r6
   1c910:	45aa      	cmp	sl, r5
   1c912:	da17      	bge.n	1c944 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c914:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1c918:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   1c91c:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   1c91e:	9a01      	ldr	r2, [sp, #4]
   1c920:	4282      	cmp	r2, r0
   1c922:	dc0c      	bgt.n	1c93e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   1c924:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1c926:	9b00      	ldr	r3, [sp, #0]
   1c928:	4659      	mov	r1, fp
   1c92a:	4098      	lsls	r0, r3
   1c92c:	f7ee fd32 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1c930:	f7f1 fcc2 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1c934:	210c      	movs	r1, #12
   1c936:	f7ee fd5b 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1c93a:	9b04      	ldr	r3, [sp, #16]
   1c93c:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   1c93e:	f10a 0a01 	add.w	sl, sl, #1
   1c942:	e7e5      	b.n	1c910 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1c944:	4630      	mov	r0, r6
   1c946:	aa08      	add	r2, sp, #32
   1c948:	210c      	movs	r1, #12
   1c94a:	f7ff ff9b 	bl	1c884 <_ZN6tflite13GetReciprocalEiiPi>
   1c94e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c950:	4682      	mov	sl, r0
   1c952:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   1c954:	2300      	movs	r3, #0
   1c956:	42ab      	cmp	r3, r5
   1c958:	da2e      	bge.n	1c9b8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c95a:	f89d 101f 	ldrb.w	r1, [sp, #31]
   1c95e:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32 input_diff =
   1c962:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1c964:	9901      	ldr	r1, [sp, #4]
   1c966:	4281      	cmp	r1, r0
   1c968:	dc23      	bgt.n	1c9b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   1c96a:	9304      	str	r3, [sp, #16]
   1c96c:	9b00      	ldr	r3, [sp, #0]
   1c96e:	4659      	mov	r1, fp
   1c970:	4098      	lsls	r0, r3
   1c972:	f7ee fd0f 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1c976:	f7f1 fc9f 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1c97a:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   1c97c:	4650      	mov	r0, sl
   1c97e:	f7fd fca0 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1c982:	9908      	ldr	r1, [sp, #32]
   1c984:	3117      	adds	r1, #23
   1c986:	f7ee fd33 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1c98a:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   1c98c:	4298      	cmp	r0, r3
	return __b;
   1c98e:	bfcc      	ite	gt
   1c990:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   1c992:	a909      	addle	r1, sp, #36	; 0x24
   1c994:	930a      	str	r3, [sp, #40]	; 0x28
        const int32 shifted_output =
   1c996:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1c998:	6808      	ldr	r0, [r1, #0]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1c99a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
      if (__b < __a)
   1c99e:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   1c9a0:	2800      	cmp	r0, #0
	return __b;
   1c9a2:	bfb8      	it	lt
   1c9a4:	4611      	movlt	r1, r2
      if (__b < __a)
   1c9a6:	9b04      	ldr	r3, [sp, #16]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1c9a8:	6809      	ldr	r1, [r1, #0]
   1c9aa:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   1c9ac:	3301      	adds	r3, #1
   1c9ae:	3601      	adds	r6, #1
   1c9b0:	e7d1      	b.n	1c956 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1c9b2:	f886 9000 	strb.w	r9, [r6]
   1c9b6:	e7f9      	b.n	1c9ac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1c9b8:	f108 0801 	add.w	r8, r8, #1
   1c9bc:	442c      	add	r4, r5
   1c9be:	e78a      	b.n	1c8d6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   1c9c0:	b00d      	add	sp, #52	; 0x34
   1c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c9c6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   1c9c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9ca:	b08d      	sub	sp, #52	; 0x34
   1c9cc:	460c      	mov	r4, r1
   1c9ce:	9203      	str	r2, [sp, #12]
   1c9d0:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   1c9d2:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   1c9d6:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   1c9d8:	6983      	ldr	r3, [r0, #24]
   1c9da:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c9dc:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c9de:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c9e0:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c9e2:	4619      	mov	r1, r3
   1c9e4:	4620      	mov	r0, r4
   1c9e6:	9304      	str	r3, [sp, #16]
   1c9e8:	f7fd fa0c 	bl	19e04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c9ec:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c9f0:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c9f2:	4619      	mov	r1, r3
   1c9f4:	4620      	mov	r0, r4
   1c9f6:	f7fb fe10 	bl	1861a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c9fa:	2500      	movs	r5, #0
   1c9fc:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   1c9fe:	46a8      	mov	r8, r5
   1ca00:	9b02      	ldr	r3, [sp, #8]
   1ca02:	4598      	cmp	r8, r3
   1ca04:	da74      	bge.n	1caf0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1ca06:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ca0a:	f88d 301f 	strb.w	r3, [sp, #31]
   1ca0e:	9b03      	ldr	r3, [sp, #12]
   1ca10:	195f      	adds	r7, r3, r5
   1ca12:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   1ca14:	2200      	movs	r2, #0
   1ca16:	42a2      	cmp	r2, r4
   1ca18:	da10      	bge.n	1ca3c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1ca1a:	460b      	mov	r3, r1
      if (__a < __b)
   1ca1c:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   1ca20:	f993 6000 	ldrsb.w	r6, [r3]
   1ca24:	4286      	cmp	r6, r0
      return __a;
   1ca26:	f10d 001f 	add.w	r0, sp, #31
   1ca2a:	bfd8      	it	le
   1ca2c:	4603      	movle	r3, r0
   1ca2e:	3101      	adds	r1, #1
   1ca30:	f993 3000 	ldrsb.w	r3, [r3]
   1ca34:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   1ca38:	3201      	adds	r2, #1
   1ca3a:	e7ec      	b.n	1ca16 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1ca3c:	2600      	movs	r6, #0
   1ca3e:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   1ca40:	46b1      	mov	r9, r6
   1ca42:	45a1      	cmp	r9, r4
   1ca44:	da15      	bge.n	1ca72 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1ca46:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1ca4a:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32 input_diff =
   1ca4e:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   1ca50:	9b01      	ldr	r3, [sp, #4]
   1ca52:	4283      	cmp	r3, r0
   1ca54:	dc0a      	bgt.n	1ca6c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
   1ca56:	9b00      	ldr	r3, [sp, #0]
   1ca58:	4659      	mov	r1, fp
   1ca5a:	4098      	lsls	r0, r3
   1ca5c:	f7ee fc9a 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1ca60:	f7f1 fc2a 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1ca64:	210c      	movs	r1, #12
   1ca66:	f7ee fcc3 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1ca6a:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   1ca6c:	f109 0901 	add.w	r9, r9, #1
   1ca70:	e7e7      	b.n	1ca42 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1ca72:	4630      	mov	r0, r6
   1ca74:	aa08      	add	r2, sp, #32
   1ca76:	210c      	movs	r1, #12
   1ca78:	f7ff ff04 	bl	1c884 <_ZN6tflite13GetReciprocalEiiPi>
   1ca7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ca7e:	4682      	mov	sl, r0
   1ca80:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
   1ca82:	f04f 0900 	mov.w	r9, #0
   1ca86:	45a1      	cmp	r9, r4
   1ca88:	da2e      	bge.n	1cae8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1ca8a:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   1ca8e:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32 input_diff =
   1ca92:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1ca94:	9901      	ldr	r1, [sp, #4]
   1ca96:	4281      	cmp	r1, r0
   1ca98:	dc23      	bgt.n	1cae2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
   1ca9a:	9b00      	ldr	r3, [sp, #0]
   1ca9c:	4659      	mov	r1, fp
   1ca9e:	4098      	lsls	r0, r3
   1caa0:	f7ee fc78 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1caa4:	f7f1 fc08 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1caa8:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   1caaa:	4650      	mov	r0, sl
   1caac:	f7fd fc09 	bl	1a2c2 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1cab0:	9908      	ldr	r1, [sp, #32]
   1cab2:	3117      	adds	r1, #23
   1cab4:	f7ee fc9c 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1cab8:	237f      	movs	r3, #127	; 0x7f
            unsat_output +
   1caba:	3880      	subs	r0, #128	; 0x80
      if (__b < __a)
   1cabc:	4298      	cmp	r0, r3
	return __b;
   1cabe:	bfcc      	ite	gt
   1cac0:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   1cac2:	a909      	addle	r1, sp, #36	; 0x24
        const int32 shifted_output =
   1cac4:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1cac6:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
   1cac8:	6808      	ldr	r0, [r1, #0]
   1caca:	3080      	adds	r0, #128	; 0x80
      if (__b < __a)
   1cacc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
	return __b;
   1cad0:	bfb8      	it	lt
   1cad2:	a90b      	addlt	r1, sp, #44	; 0x2c
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1cad4:	920b      	str	r2, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1cad6:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1cad8:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   1cada:	f109 0901 	add.w	r9, r9, #1
   1cade:	3601      	adds	r6, #1
   1cae0:	e7d1      	b.n	1ca86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1cae2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   1cae6:	e7f7      	b.n	1cad8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1cae8:	f108 0801 	add.w	r8, r8, #1
   1caec:	4425      	add	r5, r4
   1caee:	e787      	b.n	1ca00 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   1caf0:	b00d      	add	sp, #52	; 0x34
   1caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001caf6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   1caf6:	b570      	push	{r4, r5, r6, lr}
  if (input->type == kTfLiteUInt8) {
   1caf8:	7803      	ldrb	r3, [r0, #0]
   1cafa:	2b03      	cmp	r3, #3
                      const SoftmaxParams& op_data) {
   1cafc:	b090      	sub	sp, #64	; 0x40
   1cafe:	4605      	mov	r5, r0
   1cb00:	460c      	mov	r4, r1
   1cb02:	4616      	mov	r6, r2
  if (input->type == kTfLiteUInt8) {
   1cb04:	d11a      	bne.n	1cb3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x46>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cb06:	4601      	mov	r1, r0
   1cb08:	a804      	add	r0, sp, #16
   1cb0a:	f7f8 ff13 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cb0e:	686a      	ldr	r2, [r5, #4]
   1cb10:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cb12:	4621      	mov	r1, r4
   1cb14:	a80a      	add	r0, sp, #40	; 0x28
   1cb16:	f7f8 ff0d 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cb1a:	9a03      	ldr	r2, [sp, #12]
   1cb1c:	b104      	cbz	r4, 1cb20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a>
   1cb1e:	6864      	ldr	r4, [r4, #4]
    tflite::reference_ops::Softmax(
   1cb20:	9400      	str	r4, [sp, #0]
   1cb22:	ab0a      	add	r3, sp, #40	; 0x28
   1cb24:	a904      	add	r1, sp, #16
   1cb26:	4630      	mov	r0, r6
   1cb28:	f7ff feb7 	bl	1c89a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1cb2c:	a80a      	add	r0, sp, #40	; 0x28
   1cb2e:	f7f8 febc 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb32:	a804      	add	r0, sp, #16
   1cb34:	f7f8 feb9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1cb38:	b010      	add	sp, #64	; 0x40
   1cb3a:	bd70      	pop	{r4, r5, r6, pc}
    if (output->type == kTfLiteInt16) {
   1cb3c:	780b      	ldrb	r3, [r1, #0]
   1cb3e:	2b07      	cmp	r3, #7
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb40:	4601      	mov	r1, r0
   1cb42:	a804      	add	r0, sp, #16
    if (output->type == kTfLiteInt16) {
   1cb44:	d110      	bne.n	1cb68 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x72>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb46:	f7f8 fef5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cb4a:	686a      	ldr	r2, [r5, #4]
   1cb4c:	9203      	str	r2, [sp, #12]
          GetTensorShape(output), GetTensorData<int16_t>(output));
   1cb4e:	4621      	mov	r1, r4
   1cb50:	a80a      	add	r0, sp, #40	; 0x28
   1cb52:	f7f8 feef 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   1cb56:	6863      	ldr	r3, [r4, #4]
   1cb58:	9300      	str	r3, [sp, #0]
   1cb5a:	9a03      	ldr	r2, [sp, #12]
   1cb5c:	ab0a      	add	r3, sp, #40	; 0x28
   1cb5e:	a904      	add	r1, sp, #16
   1cb60:	4630      	mov	r0, r6
   1cb62:	f7f1 fc43 	bl	e3ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   1cb66:	e7e1      	b.n	1cb2c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb68:	f7f8 fee4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cb6c:	686a      	ldr	r2, [r5, #4]
   1cb6e:	9203      	str	r2, [sp, #12]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1cb70:	4621      	mov	r1, r4
   1cb72:	a80a      	add	r0, sp, #40	; 0x28
   1cb74:	f7f8 fede 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   1cb78:	6863      	ldr	r3, [r4, #4]
   1cb7a:	9300      	str	r3, [sp, #0]
   1cb7c:	9a03      	ldr	r2, [sp, #12]
   1cb7e:	ab0a      	add	r3, sp, #40	; 0x28
   1cb80:	a904      	add	r1, sp, #16
   1cb82:	4630      	mov	r0, r6
   1cb84:	f7ff ff1f 	bl	1c9c6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   1cb88:	e7d0      	b.n	1cb2c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>

0001cb8a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cb8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb8e:	b087      	sub	sp, #28
  const int output_count = NumOutputs(node);
   1cb90:	f8d1 c004 	ldr.w	ip, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cb94:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cb96:	6881      	ldr	r1, [r0, #8]
   1cb98:	9103      	str	r1, [sp, #12]
  const int split_dimensions = input_dims->size;
   1cb9a:	f8d4 9000 	ldr.w	r9, [r4]
   1cb9e:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cba2:	9803      	ldr	r0, [sp, #12]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cba4:	f8dc e000 	ldr.w	lr, [ip]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cba8:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cbaa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cbae:	bfb8      	it	lt
   1cbb0:	444b      	addlt	r3, r9
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cbb2:	454b      	cmp	r3, r9
  const TfLiteIntArray* output_dims = output0->dims;
   1cbb4:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cbb6:	db01      	blt.n	1cbbc <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x32>
   1cbb8:	f001 fd0b 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cbbc:	6808      	ldr	r0, [r1, #0]
   1cbbe:	4548      	cmp	r0, r9
   1cbc0:	d1fa      	bne.n	1cbb8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t split_size = output_dims->data[axis] * output_count;
   1cbc2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1cbc6:	f8d1 8004 	ldr.w	r8, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cbca:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cbce:	fb0e f008 	mul.w	r0, lr, r8
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cbd2:	6849      	ldr	r1, [r1, #4]
   1cbd4:	4288      	cmp	r0, r1
   1cbd6:	d1ef      	bne.n	1cbb8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t outer_size = 1;
   1cbd8:	2001      	movs	r0, #1
   1cbda:	2100      	movs	r1, #0
   1cbdc:	e9cd 0100 	strd	r0, r1, [sp]
   1cbe0:	3404      	adds	r4, #4
   1cbe2:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1cbe4:	2600      	movs	r6, #0
   1cbe6:	429e      	cmp	r6, r3
   1cbe8:	da11      	bge.n	1cc0e <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x84>
    outer_size *= input_dims->data[i];
   1cbea:	f85a 7b04 	ldr.w	r7, [sl], #4
   1cbee:	9d00      	ldr	r5, [sp, #0]
   1cbf0:	9801      	ldr	r0, [sp, #4]
   1cbf2:	17f9      	asrs	r1, r7, #31
   1cbf4:	4369      	muls	r1, r5
   1cbf6:	fb07 1500 	mla	r5, r7, r0, r1
   1cbfa:	9800      	ldr	r0, [sp, #0]
   1cbfc:	fba0 0107 	umull	r0, r1, r0, r7
   1cc00:	e9cd 0100 	strd	r0, r1, [sp]
   1cc04:	9801      	ldr	r0, [sp, #4]
   1cc06:	1829      	adds	r1, r5, r0
   1cc08:	9101      	str	r1, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   1cc0a:	3601      	adds	r6, #1
   1cc0c:	e7eb      	b.n	1cbe6 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x5c>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc0e:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cc10:	2001      	movs	r0, #1
   1cc12:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc14:	454b      	cmp	r3, r9
   1cc16:	d00c      	beq.n	1cc32 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa8>
    base_inner_size *= input_dims->data[i];
   1cc18:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1cc1c:	4656      	mov	r6, sl
   1cc1e:	17f7      	asrs	r7, r6, #31
   1cc20:	fb00 f607 	mul.w	r6, r0, r7
   1cc24:	fb0a 6601 	mla	r6, sl, r1, r6
   1cc28:	fba0 010a 	umull	r0, r1, r0, sl
   1cc2c:	4431      	add	r1, r6
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc2e:	3301      	adds	r3, #1
   1cc30:	e7f0      	b.n	1cc14 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cc32:	fb00 f308 	mul.w	r3, r0, r8
   1cc36:	6854      	ldr	r4, [r2, #4]
      input_ptr += copy_size;
   1cc38:	ea4f 0983 	mov.w	r9, r3, lsl #2
   1cc3c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
   1cc40:	fb09 f202 	mul.w	r2, r9, r2
   1cc44:	2100      	movs	r1, #0
   1cc46:	9204      	str	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   1cc48:	4608      	mov	r0, r1
   1cc4a:	e9dd ab00 	ldrd	sl, fp, [sp]
   1cc4e:	17c7      	asrs	r7, r0, #31
   1cc50:	4550      	cmp	r0, sl
   1cc52:	eb77 020b 	sbcs.w	r2, r7, fp
   1cc56:	da24      	bge.n	1cca2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x118>
   1cc58:	008a      	lsls	r2, r1, #2
   1cc5a:	f10c 0a04 	add.w	sl, ip, #4
   1cc5e:	9205      	str	r2, [sp, #20]
   1cc60:	4627      	mov	r7, r4
    for (int i = 0; i < output_count; ++i) {
   1cc62:	2600      	movs	r6, #0
   1cc64:	4576      	cmp	r6, lr
   1cc66:	da17      	bge.n	1cc98 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cc68:	9d03      	ldr	r5, [sp, #12]
  return &context->tensors[node->outputs->data[index]];
   1cc6a:	f85a 2b04 	ldr.w	r2, [sl], #4
   1cc6e:	eb15 1282 	adds.w	r2, r5, r2, lsl #6
   1cc72:	9d05      	ldr	r5, [sp, #20]
   1cc74:	bf18      	it	ne
   1cc76:	6852      	ldrne	r2, [r2, #4]
   1cc78:	46bb      	mov	fp, r7
   1cc7a:	442a      	add	r2, r5
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cc7c:	f04f 0800 	mov.w	r8, #0
   1cc80:	4598      	cmp	r8, r3
   1cc82:	da06      	bge.n	1cc92 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x108>
   1cc84:	ecfb 7a01 	vldmia	fp!, {s15}
   1cc88:	f108 0801 	add.w	r8, r8, #1
   1cc8c:	ece2 7a01 	vstmia	r2!, {s15}
   1cc90:	e7f6      	b.n	1cc80 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
      input_ptr += copy_size;
   1cc92:	444f      	add	r7, r9
    for (int i = 0; i < output_count; ++i) {
   1cc94:	3601      	adds	r6, #1
   1cc96:	e7e5      	b.n	1cc64 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xda>
   1cc98:	9a04      	ldr	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   1cc9a:	3001      	adds	r0, #1
   1cc9c:	4414      	add	r4, r2
   1cc9e:	4419      	add	r1, r3
   1cca0:	e7d3      	b.n	1cc4a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
}
   1cca2:	2000      	movs	r0, #0
   1cca4:	b007      	add	sp, #28
   1cca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ccaa <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1ccaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1ccae:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1ccb0:	6896      	ldr	r6, [r2, #8]
   1ccb2:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   1ccb4:	f8d6 c000 	ldr.w	ip, [r6]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1ccb8:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   1ccbc:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1ccbe:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1ccc0:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1ccc2:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1ccc6:	bfb8      	it	lt
   1ccc8:	4463      	addlt	r3, ip
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ccca:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   1cccc:	68a7      	ldr	r7, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ccce:	db01      	blt.n	1ccd4 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1ccd0:	f001 fc7f 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1ccd4:	683c      	ldr	r4, [r7, #0]
   1ccd6:	4564      	cmp	r4, ip
   1ccd8:	d1fa      	bne.n	1ccd0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1ccda:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1ccde:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cce2:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cce4:	686d      	ldr	r5, [r5, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cce6:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1ccea:	42ac      	cmp	r4, r5
   1ccec:	d1f0      	bne.n	1ccd0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1ccee:	3604      	adds	r6, #4
   1ccf0:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   1ccf2:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1ccf6:	f04f 0a01 	mov.w	sl, #1
   1ccfa:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   1ccfe:	4598      	cmp	r8, r3
   1cd00:	da0d      	bge.n	1cd1e <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   1cd02:	f851 9b04 	ldr.w	r9, [r1], #4
   1cd06:	464c      	mov	r4, r9
   1cd08:	17e5      	asrs	r5, r4, #31
   1cd0a:	fb0a f405 	mul.w	r4, sl, r5
   1cd0e:	fb09 440b 	mla	r4, r9, fp, r4
   1cd12:	fbaa ab09 	umull	sl, fp, sl, r9
   1cd16:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   1cd18:	f108 0801 	add.w	r8, r8, #1
   1cd1c:	e7ef      	b.n	1ccfe <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd1e:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cd20:	2401      	movs	r4, #1
   1cd22:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd24:	4563      	cmp	r3, ip
   1cd26:	d00c      	beq.n	1cd42 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   1cd28:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1cd2c:	ea4f 79e1 	mov.w	r9, r1, asr #31
   1cd30:	fb04 f809 	mul.w	r8, r4, r9
   1cd34:	fb01 8805 	mla	r8, r1, r5, r8
   1cd38:	fba4 4501 	umull	r4, r5, r4, r1
   1cd3c:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd3e:	3301      	adds	r3, #1
   1cd40:	e7f0      	b.n	1cd24 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cd42:	f8d2 c004 	ldr.w	ip, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1cd46:	2600      	movs	r6, #0
   1cd48:	17f3      	asrs	r3, r6, #31
   1cd4a:	4556      	cmp	r6, sl
   1cd4c:	eb73 030b 	sbcs.w	r3, r3, fp
   1cd50:	da22      	bge.n	1cd98 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   1cd52:	f04f 0800 	mov.w	r8, #0
   1cd56:	45f0      	cmp	r8, lr
   1cd58:	da1c      	bge.n	1cd94 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
  return &context->tensors[node->outputs->data[index]];
   1cd5a:	9b01      	ldr	r3, [sp, #4]
   1cd5c:	685b      	ldr	r3, [r3, #4]
   1cd5e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cd62:	f04f 0900 	mov.w	r9, #0
   1cd66:	685a      	ldr	r2, [r3, #4]
   1cd68:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cd6a:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cd6e:	687a      	ldr	r2, [r7, #4]
   1cd70:	bf18      	it	ne
   1cd72:	685b      	ldrne	r3, [r3, #4]
   1cd74:	4362      	muls	r2, r4
   1cd76:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cd7a:	4591      	cmp	r9, r2
   1cd7c:	da06      	bge.n	1cd8c <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   1cd7e:	f81c 1009 	ldrb.w	r1, [ip, r9]
   1cd82:	f803 1b01 	strb.w	r1, [r3], #1
   1cd86:	f109 0901 	add.w	r9, r9, #1
   1cd8a:	e7f6      	b.n	1cd7a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   1cd8c:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   1cd8e:	f108 0801 	add.w	r8, r8, #1
   1cd92:	e7e0      	b.n	1cd56 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   1cd94:	3601      	adds	r6, #1
   1cd96:	e7d7      	b.n	1cd48 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   1cd98:	2000      	movs	r0, #0
   1cd9a:	b003      	add	sp, #12
   1cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cda0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1cda4:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cda6:	6896      	ldr	r6, [r2, #8]
   1cda8:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   1cdaa:	f8d6 c000 	ldr.w	ip, [r6]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cdae:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cdb2:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cdb4:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cdb6:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cdb8:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cdbc:	bfb8      	it	lt
   1cdbe:	4463      	addlt	r3, ip
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cdc0:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   1cdc2:	68a7      	ldr	r7, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cdc4:	db01      	blt.n	1cdca <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cdc6:	f001 fc04 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cdca:	683c      	ldr	r4, [r7, #0]
   1cdcc:	4564      	cmp	r4, ip
   1cdce:	d1fa      	bne.n	1cdc6 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cdd0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cdd4:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cdd8:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cdda:	686d      	ldr	r5, [r5, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cddc:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cde0:	42ac      	cmp	r4, r5
   1cde2:	d1f0      	bne.n	1cdc6 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cde4:	3604      	adds	r6, #4
   1cde6:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   1cde8:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1cdec:	f04f 0a01 	mov.w	sl, #1
   1cdf0:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   1cdf4:	4598      	cmp	r8, r3
   1cdf6:	da0d      	bge.n	1ce14 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   1cdf8:	f851 9b04 	ldr.w	r9, [r1], #4
   1cdfc:	464c      	mov	r4, r9
   1cdfe:	17e5      	asrs	r5, r4, #31
   1ce00:	fb0a f405 	mul.w	r4, sl, r5
   1ce04:	fb09 440b 	mla	r4, r9, fp, r4
   1ce08:	fbaa ab09 	umull	sl, fp, sl, r9
   1ce0c:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   1ce0e:	f108 0801 	add.w	r8, r8, #1
   1ce12:	e7ef      	b.n	1cdf4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce14:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1ce16:	2401      	movs	r4, #1
   1ce18:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce1a:	4563      	cmp	r3, ip
   1ce1c:	d00c      	beq.n	1ce38 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   1ce1e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1ce22:	ea4f 79e1 	mov.w	r9, r1, asr #31
   1ce26:	fb04 f809 	mul.w	r8, r4, r9
   1ce2a:	fb01 8805 	mla	r8, r1, r5, r8
   1ce2e:	fba4 4501 	umull	r4, r5, r4, r1
   1ce32:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce34:	3301      	adds	r3, #1
   1ce36:	e7f0      	b.n	1ce1a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ce38:	f8d2 c004 	ldr.w	ip, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1ce3c:	2600      	movs	r6, #0
   1ce3e:	17f3      	asrs	r3, r6, #31
   1ce40:	4556      	cmp	r6, sl
   1ce42:	eb73 030b 	sbcs.w	r3, r3, fp
   1ce46:	da22      	bge.n	1ce8e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   1ce48:	f04f 0800 	mov.w	r8, #0
   1ce4c:	45f0      	cmp	r8, lr
   1ce4e:	da1c      	bge.n	1ce8a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
  return &context->tensors[node->outputs->data[index]];
   1ce50:	9b01      	ldr	r3, [sp, #4]
   1ce52:	685b      	ldr	r3, [r3, #4]
   1ce54:	eb03 0388 	add.w	r3, r3, r8, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1ce58:	f04f 0900 	mov.w	r9, #0
   1ce5c:	685a      	ldr	r2, [r3, #4]
   1ce5e:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ce60:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1ce64:	687a      	ldr	r2, [r7, #4]
   1ce66:	bf18      	it	ne
   1ce68:	685b      	ldrne	r3, [r3, #4]
   1ce6a:	4362      	muls	r2, r4
   1ce6c:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1ce70:	4591      	cmp	r9, r2
   1ce72:	da06      	bge.n	1ce82 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   1ce74:	f91c 1009 	ldrsb.w	r1, [ip, r9]
   1ce78:	f803 1b01 	strb.w	r1, [r3], #1
   1ce7c:	f109 0901 	add.w	r9, r9, #1
   1ce80:	e7f6      	b.n	1ce70 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   1ce82:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   1ce84:	f108 0801 	add.w	r8, r8, #1
   1ce88:	e7e0      	b.n	1ce4c <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   1ce8a:	3601      	adds	r6, #1
   1ce8c:	e7d7      	b.n	1ce3e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   1ce8e:	2000      	movs	r0, #0
   1ce90:	b003      	add	sp, #12
   1ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ce96 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1ce96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce9a:	b085      	sub	sp, #20
  const int output_count = NumOutputs(node);
   1ce9c:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1ce9e:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cea0:	6881      	ldr	r1, [r0, #8]
   1cea2:	9101      	str	r1, [sp, #4]
  const int split_dimensions = input_dims->size;
   1cea4:	6825      	ldr	r5, [r4, #0]
   1cea6:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cea8:	9801      	ldr	r0, [sp, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1ceaa:	683e      	ldr	r6, [r7, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1ceac:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1ceae:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1ceb2:	bfb8      	it	lt
   1ceb4:	195b      	addlt	r3, r3, r5
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ceb6:	42ab      	cmp	r3, r5
  const TfLiteIntArray* output_dims = output0->dims;
   1ceb8:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ceba:	db01      	blt.n	1cec0 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cebc:	f001 fb89 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cec0:	6808      	ldr	r0, [r1, #0]
   1cec2:	42a8      	cmp	r0, r5
   1cec4:	d1fa      	bne.n	1cebc <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
  int64_t split_size = output_dims->data[axis] * output_count;
   1cec6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1ceca:	f8d1 e004 	ldr.w	lr, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cece:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1ced2:	fb06 f00e 	mul.w	r0, r6, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1ced6:	6849      	ldr	r1, [r1, #4]
   1ced8:	4288      	cmp	r0, r1
   1ceda:	d1ef      	bne.n	1cebc <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cedc:	3404      	adds	r4, #4
   1cede:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1cee0:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1cee4:	f04f 0b01 	mov.w	fp, #1
   1cee8:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   1ceec:	4598      	cmp	r8, r3
   1ceee:	da0d      	bge.n	1cf0c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   1cef0:	f85a 9b04 	ldr.w	r9, [sl], #4
   1cef4:	4648      	mov	r0, r9
   1cef6:	17c1      	asrs	r1, r0, #31
   1cef8:	fb0b f101 	mul.w	r1, fp, r1
   1cefc:	fb09 110c 	mla	r1, r9, ip, r1
   1cf00:	fbab bc09 	umull	fp, ip, fp, r9
   1cf04:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   1cf06:	f108 0801 	add.w	r8, r8, #1
   1cf0a:	e7ef      	b.n	1ceec <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf0c:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cf0e:	2001      	movs	r0, #1
   1cf10:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf12:	42ab      	cmp	r3, r5
   1cf14:	d00c      	beq.n	1cf30 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   1cf16:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1cf1a:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1cf1e:	fb00 f809 	mul.w	r8, r0, r9
   1cf22:	fb0a 8801 	mla	r8, sl, r1, r8
   1cf26:	fba0 010a 	umull	r0, r1, r0, sl
   1cf2a:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf2c:	3301      	adds	r3, #1
   1cf2e:	e7f0      	b.n	1cf12 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cf30:	fb00 f30e 	mul.w	r3, r0, lr
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cf34:	6855      	ldr	r5, [r2, #4]
      input_ptr += copy_size;
   1cf36:	ea4f 0a43 	mov.w	sl, r3, lsl #1
   1cf3a:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   1cf3e:	fb0a f202 	mul.w	r2, sl, r2
   1cf42:	2100      	movs	r1, #0
   1cf44:	9202      	str	r2, [sp, #8]
  for (int k = 0; k < outer_size; ++k) {
   1cf46:	9100      	str	r1, [sp, #0]
   1cf48:	9a00      	ldr	r2, [sp, #0]
   1cf4a:	ea4f 79e2 	mov.w	r9, r2, asr #31
   1cf4e:	455a      	cmp	r2, fp
   1cf50:	eb79 020c 	sbcs.w	r2, r9, ip
   1cf54:	da26      	bge.n	1cfa4 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
   1cf56:	004a      	lsls	r2, r1, #1
   1cf58:	f107 0904 	add.w	r9, r7, #4
   1cf5c:	9203      	str	r2, [sp, #12]
   1cf5e:	46a8      	mov	r8, r5
    for (int i = 0; i < output_count; ++i) {
   1cf60:	f04f 0e00 	mov.w	lr, #0
   1cf64:	45b6      	cmp	lr, r6
   1cf66:	da16      	bge.n	1cf96 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x100>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cf68:	9801      	ldr	r0, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
   1cf6a:	f859 2b04 	ldr.w	r2, [r9], #4
   1cf6e:	eb10 1282 	adds.w	r2, r0, r2, lsl #6
   1cf72:	9803      	ldr	r0, [sp, #12]
   1cf74:	bf18      	it	ne
   1cf76:	6852      	ldrne	r2, [r2, #4]
   1cf78:	4402      	add	r2, r0
   1cf7a:	4614      	mov	r4, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cf7c:	2000      	movs	r0, #0
   1cf7e:	4298      	cmp	r0, r3
   1cf80:	da05      	bge.n	1cf8e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf8>
   1cf82:	f938 2010 	ldrsh.w	r2, [r8, r0, lsl #1]
   1cf86:	f824 2b02 	strh.w	r2, [r4], #2
   1cf8a:	3001      	adds	r0, #1
   1cf8c:	e7f7      	b.n	1cf7e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe8>
      input_ptr += copy_size;
   1cf8e:	44d0      	add	r8, sl
    for (int i = 0; i < output_count; ++i) {
   1cf90:	f10e 0e01 	add.w	lr, lr, #1
   1cf94:	e7e6      	b.n	1cf64 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
   1cf96:	9a02      	ldr	r2, [sp, #8]
   1cf98:	4415      	add	r5, r2
  for (int k = 0; k < outer_size; ++k) {
   1cf9a:	9a00      	ldr	r2, [sp, #0]
   1cf9c:	3201      	adds	r2, #1
   1cf9e:	9200      	str	r2, [sp, #0]
   1cfa0:	4419      	add	r1, r3
   1cfa2:	e7d1      	b.n	1cf48 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
}
   1cfa4:	2000      	movs	r0, #0
   1cfa6:	b005      	add	sp, #20
   1cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cfac <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cfac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1cfb0:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cfb2:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cfb4:	6881      	ldr	r1, [r0, #8]
   1cfb6:	9100      	str	r1, [sp, #0]
  const int split_dimensions = input_dims->size;
   1cfb8:	6826      	ldr	r6, [r4, #0]
   1cfba:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cfbc:	9800      	ldr	r0, [sp, #0]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cfbe:	f8d7 e000 	ldr.w	lr, [r7]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cfc2:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cfc4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cfc8:	bfb8      	it	lt
   1cfca:	199b      	addlt	r3, r3, r6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cfcc:	42b3      	cmp	r3, r6
  const TfLiteIntArray* output_dims = output0->dims;
   1cfce:	688d      	ldr	r5, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cfd0:	db01      	blt.n	1cfd6 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cfd2:	f001 fafe 	bl	1e5d2 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cfd6:	6829      	ldr	r1, [r5, #0]
   1cfd8:	42b1      	cmp	r1, r6
   1cfda:	d1fa      	bne.n	1cfd2 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cfdc:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cfe0:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   1cfe4:	9101      	str	r1, [sp, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cfe6:	6849      	ldr	r1, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cfe8:	6840      	ldr	r0, [r0, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cfea:	fb01 f10e 	mul.w	r1, r1, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cfee:	4281      	cmp	r1, r0
   1cff0:	d1ef      	bne.n	1cfd2 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cff2:	3404      	adds	r4, #4
   1cff4:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1cff6:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1cffa:	f04f 0b01 	mov.w	fp, #1
   1cffe:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   1d002:	4598      	cmp	r8, r3
   1d004:	da0d      	bge.n	1d022 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   1d006:	f85a 9b04 	ldr.w	r9, [sl], #4
   1d00a:	4648      	mov	r0, r9
   1d00c:	17c1      	asrs	r1, r0, #31
   1d00e:	fb0b f101 	mul.w	r1, fp, r1
   1d012:	fb09 110c 	mla	r1, r9, ip, r1
   1d016:	fbab bc09 	umull	fp, ip, fp, r9
   1d01a:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   1d01c:	f108 0801 	add.w	r8, r8, #1
   1d020:	e7ef      	b.n	1d002 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d022:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1d024:	2001      	movs	r0, #1
   1d026:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d028:	42b3      	cmp	r3, r6
   1d02a:	d00c      	beq.n	1d046 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   1d02c:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1d030:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1d034:	fb00 f809 	mul.w	r8, r0, r9
   1d038:	fb0a 8801 	mla	r8, sl, r1, r8
   1d03c:	fba0 010a 	umull	r0, r1, r0, sl
   1d040:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d042:	3301      	adds	r3, #1
   1d044:	e7f0      	b.n	1d028 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d046:	f8d2 8004 	ldr.w	r8, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1d04a:	2400      	movs	r4, #0
   1d04c:	17e3      	asrs	r3, r4, #31
   1d04e:	455c      	cmp	r4, fp
   1d050:	eb73 030c 	sbcs.w	r3, r3, ip
   1d054:	da23      	bge.n	1d09e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
   1d056:	f107 0a04 	add.w	sl, r7, #4
    for (int i = 0; i < output_count; ++i) {
   1d05a:	f04f 0900 	mov.w	r9, #0
   1d05e:	45f1      	cmp	r9, lr
   1d060:	da1b      	bge.n	1d09a <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d062:	9a00      	ldr	r2, [sp, #0]
  return &context->tensors[node->outputs->data[index]];
   1d064:	f85a 3b04 	ldr.w	r3, [sl], #4
   1d068:	eb12 1383 	adds.w	r3, r2, r3, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1d06c:	9a01      	ldr	r2, [sp, #4]
   1d06e:	bf18      	it	ne
   1d070:	685b      	ldrne	r3, [r3, #4]
   1d072:	6852      	ldr	r2, [r2, #4]
   1d074:	4342      	muls	r2, r0
      T* output_ptr = output_data + k * copy_size;
   1d076:	fb02 f604 	mul.w	r6, r2, r4
   1d07a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1d07e:	2600      	movs	r6, #0
   1d080:	4296      	cmp	r6, r2
   1d082:	da05      	bge.n	1d090 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   1d084:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
   1d088:	f843 5b04 	str.w	r5, [r3], #4
   1d08c:	3601      	adds	r6, #1
   1d08e:	e7f7      	b.n	1d080 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd4>
      input_ptr += copy_size;
   1d090:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   1d094:	f109 0901 	add.w	r9, r9, #1
   1d098:	e7e1      	b.n	1d05e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
  for (int k = 0; k < outer_size; ++k) {
   1d09a:	3401      	adds	r4, #1
   1d09c:	e7d6      	b.n	1d04c <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa0>
}
   1d09e:	2000      	movs	r0, #0
   1d0a0:	b003      	add	sp, #12
   1d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d0a6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
   1d0a6:	2905      	cmp	r1, #5
                                   int dim_count) {
   1d0a8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_CHECK_LE(dim_count, 5);
   1d0aa:	dd01      	ble.n	1d0b0 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
   1d0ac:	f001 fa91 	bl	1e5d2 <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   1d0b0:	f990 2000 	ldrsb.w	r2, [r0]
   1d0b4:	428a      	cmp	r2, r1
   1d0b6:	dcf9      	bgt.n	1d0ac <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   1d0b8:	f990 3018 	ldrsb.w	r3, [r0, #24]
   1d0bc:	429a      	cmp	r2, r3
   1d0be:	d1f5      	bne.n	1d0ac <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   1d0c0:	f990 3030 	ldrsb.w	r3, [r0, #48]	; 0x30
   1d0c4:	4293      	cmp	r3, r2
   1d0c6:	d1f1      	bne.n	1d0ac <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>

  const int pad_count = dim_count - p->start_indices_count;
   1d0c8:	1aca      	subs	r2, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   1d0ca:	1e5d      	subs	r5, r3, #1
   1d0cc:	eb00 0481 	add.w	r4, r0, r1, lsl #2
   1d0d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1d0d4:	2d00      	cmp	r5, #0
   1d0d6:	da0b      	bge.n	1d0f0 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
   1d0d8:	2300      	movs	r3, #0
   1d0da:	1d04      	adds	r4, r0, #4
    p->start_indices[i] = 0;
   1d0dc:	461e      	mov	r6, r3
    p->stop_indices[i] = 1;
   1d0de:	2501      	movs	r5, #1
  for (int i = 0; i < pad_count; ++i) {
   1d0e0:	4293      	cmp	r3, r2
   1d0e2:	da0f      	bge.n	1d104 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5e>
    p->start_indices[i] = 0;
   1d0e4:	f844 6b04 	str.w	r6, [r4], #4
  for (int i = 0; i < pad_count; ++i) {
   1d0e8:	3301      	adds	r3, #1
    p->stop_indices[i] = 1;
   1d0ea:	6165      	str	r5, [r4, #20]
    p->strides[i] = 1;
   1d0ec:	62e5      	str	r5, [r4, #44]	; 0x2c
  for (int i = 0; i < pad_count; ++i) {
   1d0ee:	e7f7      	b.n	1d0e0 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3a>
    p->strides[i + pad_count] = p->strides[i];
   1d0f0:	6b1e      	ldr	r6, [r3, #48]	; 0x30
   1d0f2:	6326      	str	r6, [r4, #48]	; 0x30
    p->start_indices[i + pad_count] = p->start_indices[i];
   1d0f4:	f853 6904 	ldr.w	r6, [r3], #-4
   1d0f8:	f844 6904 	str.w	r6, [r4], #-4
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   1d0fc:	69de      	ldr	r6, [r3, #28]
   1d0fe:	61e6      	str	r6, [r4, #28]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   1d100:	3d01      	subs	r5, #1
   1d102:	e7e7      	b.n	1d0d4 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x2e>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   1d104:	f9b0 3050 	ldrsh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   1d108:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
  p->shrink_axis_mask <<= pad_count;
   1d10c:	4093      	lsls	r3, r2
   1d10e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
   1d112:	f9b0 304a 	ldrsh.w	r3, [r0, #74]	; 0x4a
   1d116:	4093      	lsls	r3, r2
   1d118:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
   1d11c:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	; 0x4e
   1d120:	4093      	lsls	r3, r2
   1d122:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
  p->end_mask <<= pad_count;
   1d126:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
   1d12a:	fa03 f402 	lsl.w	r4, r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   1d12e:	2301      	movs	r3, #1
   1d130:	4093      	lsls	r3, r2
   1d132:	3b01      	subs	r3, #1
   1d134:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   1d136:	fa05 f202 	lsl.w	r2, r5, r2
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   1d13a:	b249      	sxtb	r1, r1
  p->begin_mask |= (1 << pad_count) - 1;
   1d13c:	431a      	orrs	r2, r3
  p->end_mask |= (1 << pad_count) - 1;
   1d13e:	4323      	orrs	r3, r4
  p->begin_mask |= (1 << pad_count) - 1;
   1d140:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
   1d144:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  p->start_indices_count = dim_count;
   1d148:	7001      	strb	r1, [r0, #0]
  p->stop_indices_count = dim_count;
   1d14a:	7601      	strb	r1, [r0, #24]
  p->strides_count = dim_count;
   1d14c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
   1d150:	bd70      	pop	{r4, r5, r6, pc}

0001d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   1d152:	b538      	push	{r3, r4, r5, lr}
   1d154:	4605      	mov	r5, r0
   1d156:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   1d158:	4611      	mov	r1, r2
                        const RuntimeShape& input_shape, int axis) {
   1d15a:	4614      	mov	r4, r2
  const int axis_size = input_shape.Dims(axis);
   1d15c:	f7f8 fbb0 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   1d160:	b1d8      	cbz	r0, 1d19a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x48>
  }
  // Begin with the specified index.
  int start = start_indices[axis];

  // begin_mask override
  if (begin_mask & 1 << axis) {
   1d162:	f9b5 2048 	ldrsh.w	r2, [r5, #72]	; 0x48
  int start = start_indices[axis];
   1d166:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  if (begin_mask & 1 << axis) {
   1d16a:	4122      	asrs	r2, r4
   1d16c:	07d2      	lsls	r2, r2, #31
  int start = start_indices[axis];
   1d16e:	684b      	ldr	r3, [r1, #4]
  if (begin_mask & 1 << axis) {
   1d170:	d508      	bpl.n	1d184 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x32>
    if (strides[axis] > 0) {
   1d172:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1d174:	2b00      	cmp	r3, #0
   1d176:	dc09      	bgt.n	1d18c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3a>
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   1d178:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  TFLITE_DCHECK(!(hi < lo));
   1d17c:	3801      	subs	r0, #1
   1d17e:	d508      	bpl.n	1d192 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x40>
   1d180:	f001 fa27 	bl	1e5d2 <abort>
    }
  }

  // Handle negative indices
  if (start < 0) {
   1d184:	2b00      	cmp	r3, #0
   1d186:	daf9      	bge.n	1d17c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
    start += axis_size;
   1d188:	4403      	add	r3, r0
   1d18a:	e7f7      	b.n	1d17c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
      start = std::numeric_limits<int>::lowest();
   1d18c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d190:	e7fa      	b.n	1d188 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x36>
  if (hi < v) return hi;
   1d192:	4298      	cmp	r0, r3
  if (v < lo) return lo;
   1d194:	bfa8      	it	ge
   1d196:	ea23 70e3 	bicge.w	r0, r3, r3, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   1d19a:	bd38      	pop	{r3, r4, r5, pc}

0001d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   1d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d19e:	4606      	mov	r6, r0
   1d1a0:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   1d1a2:	4611      	mov	r1, r2
                       int start_for_axis) {
   1d1a4:	4615      	mov	r5, r2
   1d1a6:	461f      	mov	r7, r3
  const int axis_size = input_shape.Dims(axis);
   1d1a8:	f7f8 fb8a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   1d1ac:	b320      	cbz	r0, 1d1f8 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
    return 0;
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   1d1ae:	f9b6 3050 	ldrsh.w	r3, [r6, #80]	; 0x50
  int stop = stop_indices[axis];
   1d1b2:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   1d1b6:	412b      	asrs	r3, r5

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   1d1b8:	07d9      	lsls	r1, r3, #31
  int stop = stop_indices[axis];
   1d1ba:	69d4      	ldr	r4, [r2, #28]
    stop = start_for_axis + 1;
   1d1bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   1d1be:	f9b6 204c 	ldrsh.w	r2, [r6, #76]	; 0x4c
   1d1c2:	fa42 f205 	asr.w	r2, r2, r5
    stop = start_for_axis + 1;
   1d1c6:	bf48      	it	mi
   1d1c8:	1c7c      	addmi	r4, r7, #1
  if (end_mask & (1 << axis)) {
   1d1ca:	07d2      	lsls	r2, r2, #31
   1d1cc:	d505      	bpl.n	1d1da <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3e>
    if (strides[axis] > 0) {
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	dc0b      	bgt.n	1d1ea <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4e>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
   1d1d2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  if (stop < 0) {
    stop += axis_size;
   1d1d6:	4404      	add	r4, r0
   1d1d8:	e001      	b.n	1d1de <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x42>
  if (stop < 0) {
   1d1da:	2c00      	cmp	r4, #0
   1d1dc:	dbfb      	blt.n	1d1d6 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3a>
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   1d1de:	2b00      	cmp	r3, #0
   1d1e0:	dd0b      	ble.n	1d1fa <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5e>
  TFLITE_DCHECK(!(hi < lo));
   1d1e2:	2800      	cmp	r0, #0
   1d1e4:	da04      	bge.n	1d1f0 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x54>
   1d1e6:	f001 f9f4 	bl	1e5d2 <abort>
      stop = std::numeric_limits<int>::max();
   1d1ea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1d1ee:	e7f8      	b.n	1d1e2 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x46>
  if (hi < v) return hi;
   1d1f0:	4284      	cmp	r4, r0
   1d1f2:	dc01      	bgt.n	1d1f8 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  if (v < lo) return lo;
   1d1f4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   1d1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   1d1fa:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   1d1fc:	1c43      	adds	r3, r0, #1
   1d1fe:	dbf2      	blt.n	1d1e6 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4a>
  if (hi < v) return hi;
   1d200:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   1d202:	bfa8      	it	ge
   1d204:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
   1d208:	e7f6      	b.n	1d1f8 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>

0001d20a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   1d20a:	b570      	push	{r4, r5, r6, lr}
    input = GetInput(context, node, kInputTensor);
   1d20c:	6815      	ldr	r5, [r2, #0]
   1d20e:	6889      	ldr	r1, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   1d210:	68ae      	ldr	r6, [r5, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   1d212:	6954      	ldr	r4, [r2, #20]
   1d214:	6004      	str	r4, [r0, #0]
  return &context->tensors[node->outputs->data[index]];
   1d216:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   1d218:	686c      	ldr	r4, [r5, #4]
  return &context->tensors[node->outputs->data[index]];
   1d21a:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   1d21c:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   1d220:	eb01 1484 	add.w	r4, r1, r4, lsl #6
    begin = GetInput(context, node, kBeginTensor);
   1d224:	6086      	str	r6, [r0, #8]
   1d226:	68ee      	ldr	r6, [r5, #12]
   1d228:	692d      	ldr	r5, [r5, #16]
    input = GetInput(context, node, kInputTensor);
   1d22a:	6044      	str	r4, [r0, #4]
   1d22c:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   1d230:	eb01 1585 	add.w	r5, r1, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d234:	eb01 1182 	add.w	r1, r1, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1d238:	68a2      	ldr	r2, [r4, #8]
    end = GetInput(context, node, kEndTensor);
   1d23a:	60c6      	str	r6, [r0, #12]
    dims = NumDimensions(input);
   1d23c:	6812      	ldr	r2, [r2, #0]
    strides = GetInput(context, node, kStridesTensor);
   1d23e:	6105      	str	r5, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   1d240:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   1d242:	6182      	str	r2, [r0, #24]
  }
   1d244:	bd70      	pop	{r4, r5, r6, pc}

0001d246 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
    StridedSliceContext* op_context) {
   1d246:	b570      	push	{r4, r5, r6, lr}
  op_params.start_indices_count = op_context->dims;
   1d248:	698e      	ldr	r6, [r1, #24]
   1d24a:	b273      	sxtb	r3, r6
   1d24c:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   1d24e:	7603      	strb	r3, [r0, #24]
  op_params.strides_count = op_context->dims;
   1d250:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
   1d254:	2200      	movs	r2, #0
   1d256:	4603      	mov	r3, r0
   1d258:	4296      	cmp	r6, r2
   1d25a:	dd13      	ble.n	1d284 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3e>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   1d25c:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d25e:	b104      	cbz	r4, 1d262 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1c>
   1d260:	6864      	ldr	r4, [r4, #4]
   1d262:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   1d266:	605c      	str	r4, [r3, #4]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   1d268:	68cc      	ldr	r4, [r1, #12]
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   1d26a:	0095      	lsls	r5, r2, #2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d26c:	b104      	cbz	r4, 1d270 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x2a>
   1d26e:	6864      	ldr	r4, [r4, #4]
   1d270:	5964      	ldr	r4, [r4, r5]
   1d272:	61dc      	str	r4, [r3, #28]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   1d274:	690c      	ldr	r4, [r1, #16]
   1d276:	b104      	cbz	r4, 1d27a <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x34>
   1d278:	6864      	ldr	r4, [r4, #4]
   1d27a:	5964      	ldr	r4, [r4, r5]
   1d27c:	635c      	str	r4, [r3, #52]	; 0x34
  for (int i = 0; i < op_context->dims; ++i) {
   1d27e:	3201      	adds	r2, #1
   1d280:	3304      	adds	r3, #4
   1d282:	e7e9      	b.n	1d258 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x12>
  op_params.begin_mask = op_context->params->begin_mask;
   1d284:	680b      	ldr	r3, [r1, #0]
   1d286:	681a      	ldr	r2, [r3, #0]
  op_params.end_mask = op_context->params->end_mask;
   1d288:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   1d28a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   1d28e:	691b      	ldr	r3, [r3, #16]
  op_params.end_mask = op_context->params->end_mask;
   1d290:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  op_params.ellipsis_mask = 0;
   1d294:	2200      	movs	r2, #0
   1d296:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  op_params.new_axis_mask = 0;
   1d29a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   1d29e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
   1d2a2:	bd70      	pop	{r4, r5, r6, pc}

0001d2a4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2a8:	b0b5      	sub	sp, #212	; 0xd4
   1d2aa:	460e      	mov	r6, r1
   1d2ac:	9211      	str	r2, [sp, #68]	; 0x44
                         T* output_data) {
  using strided_slice::LoopCondition;
  using strided_slice::StartForAxis;
  using strided_slice::StopForAxis;
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   1d2ae:	4601      	mov	r1, r0
   1d2b0:	2254      	movs	r2, #84	; 0x54
   1d2b2:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d2b4:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d2b6:	f001 f9a1 	bl	1e5fc <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d2ba:	6833      	ldr	r3, [r6, #0]
   1d2bc:	2b05      	cmp	r3, #5
   1d2be:	dd01      	ble.n	1d2c4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d2c0:	f001 f987 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d2c4:	682b      	ldr	r3, [r5, #0]
   1d2c6:	2b05      	cmp	r3, #5
   1d2c8:	dcfa      	bgt.n	1d2c0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    return RuntimeShape(new_shape_size, shape, 1);
   1d2ca:	ac13      	add	r4, sp, #76	; 0x4c
   1d2cc:	4632      	mov	r2, r6
   1d2ce:	2301      	movs	r3, #1
   1d2d0:	2105      	movs	r1, #5
   1d2d2:	4620      	mov	r0, r4
   1d2d4:	f7f8 fb89 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d2d8:	2301      	movs	r3, #1
   1d2da:	462a      	mov	r2, r5
   1d2dc:	2105      	movs	r1, #5
   1d2de:	a819      	add	r0, sp, #100	; 0x64
   1d2e0:	f7f8 fb83 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d2e4:	2105      	movs	r1, #5
   1d2e6:	a81f      	add	r0, sp, #124	; 0x7c
   1d2e8:	f7ff fedd 	bl	1d0a6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d2ec:	2200      	movs	r2, #0
   1d2ee:	4621      	mov	r1, r4
   1d2f0:	a81f      	add	r0, sp, #124	; 0x7c
   1d2f2:	f7ff ff2e 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d2f6:	2200      	movs	r2, #0
   1d2f8:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d2fa:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d2fc:	4621      	mov	r1, r4
   1d2fe:	a81f      	add	r0, sp, #124	; 0x7c
   1d300:	f7ff ff4c 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d304:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d306:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d308:	4621      	mov	r1, r4
   1d30a:	a81f      	add	r0, sp, #124	; 0x7c
   1d30c:	f7ff ff21 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d310:	2201      	movs	r2, #1
   1d312:	4603      	mov	r3, r0
   1d314:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d316:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d318:	a81f      	add	r0, sp, #124	; 0x7c
   1d31a:	f7ff ff3f 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d31e:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d320:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d322:	4621      	mov	r1, r4
   1d324:	a81f      	add	r0, sp, #124	; 0x7c
   1d326:	f7ff ff14 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d32a:	2202      	movs	r2, #2
   1d32c:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d32e:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d330:	4621      	mov	r1, r4
   1d332:	a81f      	add	r0, sp, #124	; 0x7c
   1d334:	f7ff ff32 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d338:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d33a:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d33c:	4621      	mov	r1, r4
   1d33e:	a81f      	add	r0, sp, #124	; 0x7c
   1d340:	f7ff ff07 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d344:	2203      	movs	r2, #3
   1d346:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d348:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d34a:	4621      	mov	r1, r4
   1d34c:	a81f      	add	r0, sp, #124	; 0x7c
   1d34e:	f7ff ff25 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d352:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d354:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d356:	4621      	mov	r1, r4
   1d358:	a81f      	add	r0, sp, #124	; 0x7c
   1d35a:	f7ff fefa 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d35e:	2204      	movs	r2, #4
   1d360:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d362:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d364:	4621      	mov	r1, r4
   1d366:	a81f      	add	r0, sp, #124	; 0x7c
   1d368:	f7ff ff18 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d36c:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d36e:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d370:	4620      	mov	r0, r4
   1d372:	f7f8 faa5 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d376:	fb06 f300 	mul.w	r3, r6, r0
   1d37a:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d37c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d37e:	9300      	str	r3, [sp, #0]
   1d380:	4343      	muls	r3, r0
   1d382:	930e      	str	r3, [sp, #56]	; 0x38
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
       offset_0 += step_0) {
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d384:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d386:	9301      	str	r3, [sp, #4]
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
         offset_1 += step_1) {
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d388:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d38a:	9302      	str	r3, [sp, #8]
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
           offset_2 += step_2) {
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d38c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d38e:	9303      	str	r3, [sp, #12]
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
             offset_3 += step_3) {
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d390:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d392:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d394:	4345      	muls	r5, r0

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   1d396:	9b00      	ldr	r3, [sp, #0]
   1d398:	2b00      	cmp	r3, #0
   1d39a:	9b08      	ldr	r3, [sp, #32]
   1d39c:	dd6c      	ble.n	1d478 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d4>
   1d39e:	429d      	cmp	r5, r3
   1d3a0:	bfb4      	ite	lt
   1d3a2:	2300      	movlt	r3, #0
   1d3a4:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d3a6:	2b00      	cmp	r3, #0
   1d3a8:	f040 808e 	bne.w	1d4c8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x224>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3ac:	2102      	movs	r1, #2
   1d3ae:	4620      	mov	r0, r4
   1d3b0:	f7f8 fa86 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d3b6:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3ba:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3bc:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3c0:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3c2:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d3c4:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3c8:	930f      	str	r3, [sp, #60]	; 0x3c
   1d3ca:	9b01      	ldr	r3, [sp, #4]
   1d3cc:	2b00      	cmp	r3, #0
   1d3ce:	dd58      	ble.n	1d482 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1de>
   1d3d0:	454e      	cmp	r6, r9
   1d3d2:	bfb4      	ite	lt
   1d3d4:	2300      	movlt	r3, #0
   1d3d6:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	d172      	bne.n	1d4c2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21e>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d3dc:	2103      	movs	r1, #3
   1d3de:	4620      	mov	r0, r4
   1d3e0:	f7f8 fa6e 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d3e4:	9b05      	ldr	r3, [sp, #20]
   1d3e6:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d3ea:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d3ee:	9b02      	ldr	r3, [sp, #8]
   1d3f0:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d3f2:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d3f4:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d3f8:	9310      	str	r3, [sp, #64]	; 0x40
   1d3fa:	9b02      	ldr	r3, [sp, #8]
   1d3fc:	2b00      	cmp	r3, #0
   1d3fe:	dd45      	ble.n	1d48c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
   1d400:	4557      	cmp	r7, sl
   1d402:	bfb4      	ite	lt
   1d404:	2300      	movlt	r3, #0
   1d406:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d408:	2b00      	cmp	r3, #0
   1d40a:	d157      	bne.n	1d4bc <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x218>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d40c:	2104      	movs	r1, #4
   1d40e:	4620      	mov	r0, r4
   1d410:	f7f8 fa56 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d416:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d418:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d41c:	9a03      	ldr	r2, [sp, #12]
   1d41e:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d420:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d422:	9209      	str	r2, [sp, #36]	; 0x24
   1d424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d426:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d428:	fb00 fc0c 	mul.w	ip, r0, ip
   1d42c:	18d1      	adds	r1, r2, r3
   1d42e:	9a03      	ldr	r2, [sp, #12]
   1d430:	2a00      	cmp	r2, #0
   1d432:	dd30      	ble.n	1d496 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f2>
   1d434:	4563      	cmp	r3, ip
   1d436:	bfb4      	ite	lt
   1d438:	2200      	movlt	r2, #0
   1d43a:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d43c:	2a00      	cmp	r2, #0
   1d43e:	d13a      	bne.n	1d4b6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x212>
   1d440:	9a07      	ldr	r2, [sp, #28]
   1d442:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d446:	441a      	add	r2, r3
   1d448:	9804      	ldr	r0, [sp, #16]
   1d44a:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d44e:	2800      	cmp	r0, #0
   1d450:	dd26      	ble.n	1d4a0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1fc>
   1d452:	428a      	cmp	r2, r1
   1d454:	bfb4      	ite	lt
   1d456:	f04f 0b00 	movlt.w	fp, #0
   1d45a:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d45e:	f1bb 0f00 	cmp.w	fp, #0
   1d462:	d124      	bne.n	1d4ae <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20a>
               offset_4 += params_copy.strides[4]) {
            *out_ptr++ = input_data[offset_4];
   1d464:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d466:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d46a:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d46c:	f8db b000 	ldr.w	fp, [fp]
   1d470:	f84e bb04 	str.w	fp, [lr], #4
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d474:	4402      	add	r2, r0
   1d476:	e7e7      	b.n	1d448 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d478:	429d      	cmp	r5, r3
   1d47a:	bfcc      	ite	gt
   1d47c:	2300      	movgt	r3, #0
   1d47e:	2301      	movle	r3, #1
   1d480:	e791      	b.n	1d3a6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d482:	454e      	cmp	r6, r9
   1d484:	bfcc      	ite	gt
   1d486:	2300      	movgt	r3, #0
   1d488:	2301      	movle	r3, #1
   1d48a:	e7a5      	b.n	1d3d8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d48c:	4557      	cmp	r7, sl
   1d48e:	bfcc      	ite	gt
   1d490:	2300      	movgt	r3, #0
   1d492:	2301      	movle	r3, #1
   1d494:	e7b8      	b.n	1d408 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d496:	4563      	cmp	r3, ip
   1d498:	bfcc      	ite	gt
   1d49a:	2200      	movgt	r2, #0
   1d49c:	2201      	movle	r2, #1
   1d49e:	e7cd      	b.n	1d43c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d4a0:	428a      	cmp	r2, r1
   1d4a2:	bfcc      	ite	gt
   1d4a4:	f04f 0b00 	movgt.w	fp, #0
   1d4a8:	f04f 0b01 	movle.w	fp, #1
   1d4ac:	e7d7      	b.n	1d45e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d4b0:	4413      	add	r3, r2
   1d4b2:	4411      	add	r1, r2
   1d4b4:	e7bb      	b.n	1d42e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d4b8:	441f      	add	r7, r3
   1d4ba:	e79e      	b.n	1d3fa <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d4be:	441e      	add	r6, r3
   1d4c0:	e783      	b.n	1d3ca <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d4c4:	441d      	add	r5, r3
   1d4c6:	e766      	b.n	1d396 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d4c8:	a819      	add	r0, sp, #100	; 0x64
   1d4ca:	f7f8 f9ee 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d4ce:	4620      	mov	r0, r4
   1d4d0:	f7f8 f9eb 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   1d4d4:	b035      	add	sp, #212	; 0xd4
   1d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d4da <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d4da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4de:	b0b5      	sub	sp, #212	; 0xd4
   1d4e0:	460e      	mov	r6, r1
   1d4e2:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   1d4e4:	4601      	mov	r1, r0
   1d4e6:	2254      	movs	r2, #84	; 0x54
   1d4e8:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d4ea:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d4ec:	f001 f886 	bl	1e5fc <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d4f0:	6833      	ldr	r3, [r6, #0]
   1d4f2:	2b05      	cmp	r3, #5
   1d4f4:	dd01      	ble.n	1d4fa <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d4f6:	f001 f86c 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d4fa:	682b      	ldr	r3, [r5, #0]
   1d4fc:	2b05      	cmp	r3, #5
   1d4fe:	dcfa      	bgt.n	1d4f6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d500:	ac13      	add	r4, sp, #76	; 0x4c
   1d502:	4632      	mov	r2, r6
   1d504:	2301      	movs	r3, #1
   1d506:	2105      	movs	r1, #5
   1d508:	4620      	mov	r0, r4
   1d50a:	f7f8 fa6e 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d50e:	2301      	movs	r3, #1
   1d510:	462a      	mov	r2, r5
   1d512:	2105      	movs	r1, #5
   1d514:	a819      	add	r0, sp, #100	; 0x64
   1d516:	f7f8 fa68 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d51a:	2105      	movs	r1, #5
   1d51c:	a81f      	add	r0, sp, #124	; 0x7c
   1d51e:	f7ff fdc2 	bl	1d0a6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d522:	2200      	movs	r2, #0
   1d524:	4621      	mov	r1, r4
   1d526:	a81f      	add	r0, sp, #124	; 0x7c
   1d528:	f7ff fe13 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d52c:	2200      	movs	r2, #0
   1d52e:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d530:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d532:	4621      	mov	r1, r4
   1d534:	a81f      	add	r0, sp, #124	; 0x7c
   1d536:	f7ff fe31 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d53a:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d53c:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d53e:	4621      	mov	r1, r4
   1d540:	a81f      	add	r0, sp, #124	; 0x7c
   1d542:	f7ff fe06 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d546:	2201      	movs	r2, #1
   1d548:	4603      	mov	r3, r0
   1d54a:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d54c:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d54e:	a81f      	add	r0, sp, #124	; 0x7c
   1d550:	f7ff fe24 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d554:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d556:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d558:	4621      	mov	r1, r4
   1d55a:	a81f      	add	r0, sp, #124	; 0x7c
   1d55c:	f7ff fdf9 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d560:	2202      	movs	r2, #2
   1d562:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d564:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d566:	4621      	mov	r1, r4
   1d568:	a81f      	add	r0, sp, #124	; 0x7c
   1d56a:	f7ff fe17 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d56e:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d570:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d572:	4621      	mov	r1, r4
   1d574:	a81f      	add	r0, sp, #124	; 0x7c
   1d576:	f7ff fdec 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d57a:	2203      	movs	r2, #3
   1d57c:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d57e:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d580:	4621      	mov	r1, r4
   1d582:	a81f      	add	r0, sp, #124	; 0x7c
   1d584:	f7ff fe0a 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d588:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d58a:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d58c:	4621      	mov	r1, r4
   1d58e:	a81f      	add	r0, sp, #124	; 0x7c
   1d590:	f7ff fddf 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d594:	2204      	movs	r2, #4
   1d596:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d598:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d59a:	4621      	mov	r1, r4
   1d59c:	a81f      	add	r0, sp, #124	; 0x7c
   1d59e:	f7ff fdfd 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5a2:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d5a4:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	f7f8 f98a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d5ac:	fb06 f300 	mul.w	r3, r6, r0
   1d5b0:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d5b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d5b4:	9300      	str	r3, [sp, #0]
   1d5b6:	4343      	muls	r3, r0
   1d5b8:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d5ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d5bc:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d5be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d5c0:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d5c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d5c4:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d5c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d5c8:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5ca:	4345      	muls	r5, r0
   1d5cc:	9b00      	ldr	r3, [sp, #0]
   1d5ce:	2b00      	cmp	r3, #0
   1d5d0:	9b08      	ldr	r3, [sp, #32]
   1d5d2:	dd6a      	ble.n	1d6aa <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   1d5d4:	429d      	cmp	r5, r3
   1d5d6:	bfb4      	ite	lt
   1d5d8:	2300      	movlt	r3, #0
   1d5da:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d5dc:	2b00      	cmp	r3, #0
   1d5de:	f040 808c 	bne.w	1d6fa <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d5e2:	2102      	movs	r1, #2
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	f7f8 f96b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d5ec:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d5f0:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d5f2:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d5f6:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d5f8:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d5fa:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d5fe:	930f      	str	r3, [sp, #60]	; 0x3c
   1d600:	9b01      	ldr	r3, [sp, #4]
   1d602:	2b00      	cmp	r3, #0
   1d604:	dd56      	ble.n	1d6b4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   1d606:	454e      	cmp	r6, r9
   1d608:	bfb4      	ite	lt
   1d60a:	2300      	movlt	r3, #0
   1d60c:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d60e:	2b00      	cmp	r3, #0
   1d610:	d170      	bne.n	1d6f4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d612:	2103      	movs	r1, #3
   1d614:	4620      	mov	r0, r4
   1d616:	f7f8 f953 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d61a:	9b05      	ldr	r3, [sp, #20]
   1d61c:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d620:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d624:	9b02      	ldr	r3, [sp, #8]
   1d626:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d628:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d62a:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d62e:	9310      	str	r3, [sp, #64]	; 0x40
   1d630:	9b02      	ldr	r3, [sp, #8]
   1d632:	2b00      	cmp	r3, #0
   1d634:	dd43      	ble.n	1d6be <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   1d636:	4557      	cmp	r7, sl
   1d638:	bfb4      	ite	lt
   1d63a:	2300      	movlt	r3, #0
   1d63c:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d63e:	2b00      	cmp	r3, #0
   1d640:	d155      	bne.n	1d6ee <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d642:	2104      	movs	r1, #4
   1d644:	4620      	mov	r0, r4
   1d646:	f7f8 f93b 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d64c:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d64e:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d652:	9a03      	ldr	r2, [sp, #12]
   1d654:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d656:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d658:	9209      	str	r2, [sp, #36]	; 0x24
   1d65a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d65c:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d65e:	fb00 fc0c 	mul.w	ip, r0, ip
   1d662:	18d1      	adds	r1, r2, r3
   1d664:	9a03      	ldr	r2, [sp, #12]
   1d666:	2a00      	cmp	r2, #0
   1d668:	dd2e      	ble.n	1d6c8 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   1d66a:	4563      	cmp	r3, ip
   1d66c:	bfb4      	ite	lt
   1d66e:	2200      	movlt	r2, #0
   1d670:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d672:	2a00      	cmp	r2, #0
   1d674:	d138      	bne.n	1d6e8 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   1d676:	9a07      	ldr	r2, [sp, #28]
   1d678:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d67c:	441a      	add	r2, r3
   1d67e:	9804      	ldr	r0, [sp, #16]
   1d680:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d684:	2800      	cmp	r0, #0
   1d686:	dd24      	ble.n	1d6d2 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   1d688:	428a      	cmp	r2, r1
   1d68a:	bfb4      	ite	lt
   1d68c:	f04f 0b00 	movlt.w	fp, #0
   1d690:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d694:	f1bb 0f00 	cmp.w	fp, #0
   1d698:	d122      	bne.n	1d6e0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   1d69a:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d69c:	f810 b002 	ldrb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d6a0:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d6a2:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d6a6:	4402      	add	r2, r0
   1d6a8:	e7e9      	b.n	1d67e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d6aa:	429d      	cmp	r5, r3
   1d6ac:	bfcc      	ite	gt
   1d6ae:	2300      	movgt	r3, #0
   1d6b0:	2301      	movle	r3, #1
   1d6b2:	e793      	b.n	1d5dc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d6b4:	454e      	cmp	r6, r9
   1d6b6:	bfcc      	ite	gt
   1d6b8:	2300      	movgt	r3, #0
   1d6ba:	2301      	movle	r3, #1
   1d6bc:	e7a7      	b.n	1d60e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d6be:	4557      	cmp	r7, sl
   1d6c0:	bfcc      	ite	gt
   1d6c2:	2300      	movgt	r3, #0
   1d6c4:	2301      	movle	r3, #1
   1d6c6:	e7ba      	b.n	1d63e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d6c8:	4563      	cmp	r3, ip
   1d6ca:	bfcc      	ite	gt
   1d6cc:	2200      	movgt	r2, #0
   1d6ce:	2201      	movle	r2, #1
   1d6d0:	e7cf      	b.n	1d672 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d6d2:	428a      	cmp	r2, r1
   1d6d4:	bfcc      	ite	gt
   1d6d6:	f04f 0b00 	movgt.w	fp, #0
   1d6da:	f04f 0b01 	movle.w	fp, #1
   1d6de:	e7d9      	b.n	1d694 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d6e2:	4413      	add	r3, r2
   1d6e4:	4411      	add	r1, r2
   1d6e6:	e7bd      	b.n	1d664 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d6e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d6ea:	441f      	add	r7, r3
   1d6ec:	e7a0      	b.n	1d630 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d6f0:	441e      	add	r6, r3
   1d6f2:	e785      	b.n	1d600 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d6f6:	441d      	add	r5, r3
   1d6f8:	e768      	b.n	1d5cc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d6fa:	a819      	add	r0, sp, #100	; 0x64
   1d6fc:	f7f8 f8d5 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d700:	4620      	mov	r0, r4
   1d702:	f7f8 f8d2 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1d706:	b035      	add	sp, #212	; 0xd4
   1d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d70c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d710:	b0b5      	sub	sp, #212	; 0xd4
   1d712:	460e      	mov	r6, r1
   1d714:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   1d716:	4601      	mov	r1, r0
   1d718:	2254      	movs	r2, #84	; 0x54
   1d71a:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d71c:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d71e:	f000 ff6d 	bl	1e5fc <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d722:	6833      	ldr	r3, [r6, #0]
   1d724:	2b05      	cmp	r3, #5
   1d726:	dd01      	ble.n	1d72c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d728:	f000 ff53 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d72c:	682b      	ldr	r3, [r5, #0]
   1d72e:	2b05      	cmp	r3, #5
   1d730:	dcfa      	bgt.n	1d728 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d732:	ac13      	add	r4, sp, #76	; 0x4c
   1d734:	4632      	mov	r2, r6
   1d736:	2301      	movs	r3, #1
   1d738:	2105      	movs	r1, #5
   1d73a:	4620      	mov	r0, r4
   1d73c:	f7f8 f955 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d740:	2301      	movs	r3, #1
   1d742:	462a      	mov	r2, r5
   1d744:	2105      	movs	r1, #5
   1d746:	a819      	add	r0, sp, #100	; 0x64
   1d748:	f7f8 f94f 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d74c:	2105      	movs	r1, #5
   1d74e:	a81f      	add	r0, sp, #124	; 0x7c
   1d750:	f7ff fca9 	bl	1d0a6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d754:	2200      	movs	r2, #0
   1d756:	4621      	mov	r1, r4
   1d758:	a81f      	add	r0, sp, #124	; 0x7c
   1d75a:	f7ff fcfa 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d75e:	2200      	movs	r2, #0
   1d760:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d762:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d764:	4621      	mov	r1, r4
   1d766:	a81f      	add	r0, sp, #124	; 0x7c
   1d768:	f7ff fd18 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d76c:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d76e:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d770:	4621      	mov	r1, r4
   1d772:	a81f      	add	r0, sp, #124	; 0x7c
   1d774:	f7ff fced 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d778:	2201      	movs	r2, #1
   1d77a:	4603      	mov	r3, r0
   1d77c:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d77e:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d780:	a81f      	add	r0, sp, #124	; 0x7c
   1d782:	f7ff fd0b 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d786:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d788:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d78a:	4621      	mov	r1, r4
   1d78c:	a81f      	add	r0, sp, #124	; 0x7c
   1d78e:	f7ff fce0 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d792:	2202      	movs	r2, #2
   1d794:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d796:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d798:	4621      	mov	r1, r4
   1d79a:	a81f      	add	r0, sp, #124	; 0x7c
   1d79c:	f7ff fcfe 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7a0:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d7a2:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7a4:	4621      	mov	r1, r4
   1d7a6:	a81f      	add	r0, sp, #124	; 0x7c
   1d7a8:	f7ff fcd3 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7ac:	2203      	movs	r2, #3
   1d7ae:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7b0:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7b2:	4621      	mov	r1, r4
   1d7b4:	a81f      	add	r0, sp, #124	; 0x7c
   1d7b6:	f7ff fcf1 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7ba:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7bc:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7be:	4621      	mov	r1, r4
   1d7c0:	a81f      	add	r0, sp, #124	; 0x7c
   1d7c2:	f7ff fcc6 	bl	1d152 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7c6:	2204      	movs	r2, #4
   1d7c8:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7ca:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7cc:	4621      	mov	r1, r4
   1d7ce:	a81f      	add	r0, sp, #124	; 0x7c
   1d7d0:	f7ff fce4 	bl	1d19c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d7d4:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7d6:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d7d8:	4620      	mov	r0, r4
   1d7da:	f7f8 f871 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d7de:	fb06 f300 	mul.w	r3, r6, r0
   1d7e2:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d7e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d7e6:	9300      	str	r3, [sp, #0]
   1d7e8:	4343      	muls	r3, r0
   1d7ea:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d7ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d7ee:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d7f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d7f2:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d7f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d7f6:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d7f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d7fa:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d7fc:	4345      	muls	r5, r0
   1d7fe:	9b00      	ldr	r3, [sp, #0]
   1d800:	2b00      	cmp	r3, #0
   1d802:	9b08      	ldr	r3, [sp, #32]
   1d804:	dd6a      	ble.n	1d8dc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   1d806:	429d      	cmp	r5, r3
   1d808:	bfb4      	ite	lt
   1d80a:	2300      	movlt	r3, #0
   1d80c:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d80e:	2b00      	cmp	r3, #0
   1d810:	f040 808c 	bne.w	1d92c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d814:	2102      	movs	r1, #2
   1d816:	4620      	mov	r0, r4
   1d818:	f7f8 f852 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d81e:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d822:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d824:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d828:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d82a:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d82c:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d830:	930f      	str	r3, [sp, #60]	; 0x3c
   1d832:	9b01      	ldr	r3, [sp, #4]
   1d834:	2b00      	cmp	r3, #0
   1d836:	dd56      	ble.n	1d8e6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   1d838:	454e      	cmp	r6, r9
   1d83a:	bfb4      	ite	lt
   1d83c:	2300      	movlt	r3, #0
   1d83e:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d840:	2b00      	cmp	r3, #0
   1d842:	d170      	bne.n	1d926 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d844:	2103      	movs	r1, #3
   1d846:	4620      	mov	r0, r4
   1d848:	f7f8 f83a 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d84c:	9b05      	ldr	r3, [sp, #20]
   1d84e:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d852:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d856:	9b02      	ldr	r3, [sp, #8]
   1d858:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d85a:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d85c:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d860:	9310      	str	r3, [sp, #64]	; 0x40
   1d862:	9b02      	ldr	r3, [sp, #8]
   1d864:	2b00      	cmp	r3, #0
   1d866:	dd43      	ble.n	1d8f0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   1d868:	4557      	cmp	r7, sl
   1d86a:	bfb4      	ite	lt
   1d86c:	2300      	movlt	r3, #0
   1d86e:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d870:	2b00      	cmp	r3, #0
   1d872:	d155      	bne.n	1d920 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d874:	2104      	movs	r1, #4
   1d876:	4620      	mov	r0, r4
   1d878:	f7f8 f822 	bl	158c0 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d87e:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d880:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d884:	9a03      	ldr	r2, [sp, #12]
   1d886:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d888:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d88a:	9209      	str	r2, [sp, #36]	; 0x24
   1d88c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d88e:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d890:	fb00 fc0c 	mul.w	ip, r0, ip
   1d894:	18d1      	adds	r1, r2, r3
   1d896:	9a03      	ldr	r2, [sp, #12]
   1d898:	2a00      	cmp	r2, #0
   1d89a:	dd2e      	ble.n	1d8fa <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   1d89c:	4563      	cmp	r3, ip
   1d89e:	bfb4      	ite	lt
   1d8a0:	2200      	movlt	r2, #0
   1d8a2:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d8a4:	2a00      	cmp	r2, #0
   1d8a6:	d138      	bne.n	1d91a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   1d8a8:	9a07      	ldr	r2, [sp, #28]
   1d8aa:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d8ae:	441a      	add	r2, r3
   1d8b0:	9804      	ldr	r0, [sp, #16]
   1d8b2:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d8b6:	2800      	cmp	r0, #0
   1d8b8:	dd24      	ble.n	1d904 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   1d8ba:	428a      	cmp	r2, r1
   1d8bc:	bfb4      	ite	lt
   1d8be:	f04f 0b00 	movlt.w	fp, #0
   1d8c2:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d8c6:	f1bb 0f00 	cmp.w	fp, #0
   1d8ca:	d122      	bne.n	1d912 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   1d8cc:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d8ce:	f910 b002 	ldrsb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d8d2:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d8d4:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d8d8:	4402      	add	r2, r0
   1d8da:	e7e9      	b.n	1d8b0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d8dc:	429d      	cmp	r5, r3
   1d8de:	bfcc      	ite	gt
   1d8e0:	2300      	movgt	r3, #0
   1d8e2:	2301      	movle	r3, #1
   1d8e4:	e793      	b.n	1d80e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d8e6:	454e      	cmp	r6, r9
   1d8e8:	bfcc      	ite	gt
   1d8ea:	2300      	movgt	r3, #0
   1d8ec:	2301      	movle	r3, #1
   1d8ee:	e7a7      	b.n	1d840 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d8f0:	4557      	cmp	r7, sl
   1d8f2:	bfcc      	ite	gt
   1d8f4:	2300      	movgt	r3, #0
   1d8f6:	2301      	movle	r3, #1
   1d8f8:	e7ba      	b.n	1d870 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d8fa:	4563      	cmp	r3, ip
   1d8fc:	bfcc      	ite	gt
   1d8fe:	2200      	movgt	r2, #0
   1d900:	2201      	movle	r2, #1
   1d902:	e7cf      	b.n	1d8a4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d904:	428a      	cmp	r2, r1
   1d906:	bfcc      	ite	gt
   1d908:	f04f 0b00 	movgt.w	fp, #0
   1d90c:	f04f 0b01 	movle.w	fp, #1
   1d910:	e7d9      	b.n	1d8c6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d912:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d914:	4413      	add	r3, r2
   1d916:	4411      	add	r1, r2
   1d918:	e7bd      	b.n	1d896 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d91c:	441f      	add	r7, r3
   1d91e:	e7a0      	b.n	1d862 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d922:	441e      	add	r6, r3
   1d924:	e785      	b.n	1d832 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d928:	441d      	add	r5, r3
   1d92a:	e768      	b.n	1d7fe <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d92c:	a819      	add	r0, sp, #100	; 0x64
   1d92e:	f7f7 ffbc 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d932:	4620      	mov	r0, r4
   1d934:	f7f7 ffb9 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1d938:	b035      	add	sp, #212	; 0xd4
   1d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d93e <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                const RuntimeShape& output_shape, uint8* output_data) {
   1d93e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d942:	4604      	mov	r4, r0
   1d944:	4690      	mov	r8, r2
   1d946:	4608      	mov	r0, r1
   1d948:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d94a:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   1d94e:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   1d950:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d954:	dd01      	ble.n	1d95a <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   1d956:	f000 fe3c 	bl	1e5d2 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d95c:	f7f8 f894 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   1d960:	6862      	ldr	r2, [r4, #4]
   1d962:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d966:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   1d968:	dbf5      	blt.n	1d956 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   1d96a:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   1d96c:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   1d96e:	dcf2      	bgt.n	1d956 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   1d970:	33ff      	adds	r3, #255	; 0xff
   1d972:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   1d976:	d8ee      	bhi.n	1d956 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   1d978:	2700      	movs	r7, #0
   1d97a:	45b9      	cmp	r9, r7
   1d97c:	dd29      	ble.n	1d9d2 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x94>
    const int32 input2_val = params.input2_offset + input2_data[i];
   1d97e:	f816 a007 	ldrb.w	sl, [r6, r7]
   1d982:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   1d984:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1d986:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   1d988:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   1d98a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1d98e:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1d990:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d994:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   1d998:	fa03 f000 	lsl.w	r0, r3, r0
   1d99c:	f7e9 fbf4 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9a0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9a4:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9a6:	4650      	mov	r0, sl
   1d9a8:	f7e9 fbee 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9ac:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1d9b0:	ebab 0000 	sub.w	r0, fp, r0
   1d9b4:	f7e9 fbe8 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1d9b8:	68e3      	ldr	r3, [r4, #12]
   1d9ba:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   1d9bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d9be:	4283      	cmp	r3, r0
   1d9c0:	bfb8      	it	lt
   1d9c2:	4603      	movlt	r3, r0
   1d9c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1d9c6:	4283      	cmp	r3, r0
   1d9c8:	bfa8      	it	ge
   1d9ca:	4603      	movge	r3, r0
   1d9cc:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   1d9ce:	3701      	adds	r7, #1
   1d9d0:	e7d3      	b.n	1d97a <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
}
   1d9d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d9d6 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                const RuntimeShape& output_shape, int8_t* output_data) {
   1d9d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9da:	4604      	mov	r4, r0
   1d9dc:	4690      	mov	r8, r2
   1d9de:	4608      	mov	r0, r1
   1d9e0:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d9e2:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   1d9e6:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   1d9e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d9ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d9ec:	dd01      	ble.n	1d9f2 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   1d9ee:	f000 fdf0 	bl	1e5d2 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d9f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d9f4:	f7f8 f848 	bl	15a88 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   1d9f8:	6862      	ldr	r2, [r4, #4]
   1d9fa:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d9fe:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   1da00:	dbf5      	blt.n	1d9ee <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   1da02:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   1da04:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   1da06:	dcf2      	bgt.n	1d9ee <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   1da08:	337f      	adds	r3, #127	; 0x7f
   1da0a:	2bfe      	cmp	r3, #254	; 0xfe
   1da0c:	d8ef      	bhi.n	1d9ee <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   1da0e:	2700      	movs	r7, #0
   1da10:	45b9      	cmp	r9, r7
   1da12:	dd29      	ble.n	1da68 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   1da14:	f916 a007 	ldrsb.w	sl, [r6, r7]
   1da18:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   1da1a:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1da1c:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   1da1e:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   1da20:	f918 3007 	ldrsb.w	r3, [r8, r7]
   1da24:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1da26:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da2a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   1da2e:	fa03 f000 	lsl.w	r0, r3, r0
   1da32:	f7e9 fba9 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da36:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da3a:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da3c:	4650      	mov	r0, sl
   1da3e:	f7e9 fba3 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da42:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1da46:	ebab 0000 	sub.w	r0, fp, r0
   1da4a:	f7e9 fb9d 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1da4e:	68e3      	ldr	r3, [r4, #12]
   1da50:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   1da52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1da54:	4283      	cmp	r3, r0
   1da56:	bfb8      	it	lt
   1da58:	4603      	movlt	r3, r0
   1da5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1da5c:	4283      	cmp	r3, r0
   1da5e:	bfa8      	it	ge
   1da60:	4603      	movge	r3, r0
   1da62:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   1da64:	3701      	adds	r7, #1
   1da66:	e7d3      	b.n	1da10 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
}
   1da68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001da6c <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   1da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da70:	4605      	mov	r5, r0
   1da72:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1da74:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   1da76:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1da78:	f7fc fcee 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1da7c:	686b      	ldr	r3, [r5, #4]
   1da7e:	681b      	ldr	r3, [r3, #0]
   1da80:	f913 8000 	ldrsb.w	r8, [r3, r0]
    const int32_t input1_val =
   1da84:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1da86:	6928      	ldr	r0, [r5, #16]
   1da88:	4639      	mov	r1, r7
    const int32_t input1_val =
   1da8a:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1da8c:	f7fc fce4 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1da90:	68ea      	ldr	r2, [r5, #12]
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   1da92:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1da94:	6812      	ldr	r2, [r2, #0]
   1da96:	5616      	ldrsb	r6, [r2, r0]
    const int32_t input2_val =
   1da98:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da9a:	fa08 f003 	lsl.w	r0, r8, r3
    const int32_t input2_val =
   1da9e:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1daa0:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   1daa4:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1daa6:	f7e9 fb6f 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1daaa:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1daae:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dab0:	4630      	mov	r0, r6
   1dab2:	f7e9 fb69 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dab6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1daba:	eba8 0000 	sub.w	r0, r8, r0
   1dabe:	f7e9 fb63 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1dac2:	68e3      	ldr	r3, [r4, #12]
   1dac4:	4418      	add	r0, r3
   1dac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dac8:	6b24      	ldr	r4, [r4, #48]	; 0x30
   1daca:	4298      	cmp	r0, r3
   1dacc:	bfb8      	it	lt
   1dace:	4618      	movlt	r0, r3
   1dad0:	4284      	cmp	r4, r0
   1dad2:	bfa8      	it	ge
   1dad4:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1dad6:	4639      	mov	r1, r7
   1dad8:	69a8      	ldr	r0, [r5, #24]
   1dada:	f7fc fcbd 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1dade:	696b      	ldr	r3, [r5, #20]
   1dae0:	681b      	ldr	r3, [r3, #0]
   1dae2:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   1dae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dae8 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   1dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1daec:	4605      	mov	r5, r0
   1daee:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1daf0:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   1daf2:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1daf4:	f7fc fcb0 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1daf8:	686b      	ldr	r3, [r5, #4]
   1dafa:	681b      	ldr	r3, [r3, #0]
   1dafc:	f813 8000 	ldrb.w	r8, [r3, r0]
    const int32 input1_val =
   1db00:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db02:	6928      	ldr	r0, [r5, #16]
   1db04:	4639      	mov	r1, r7
    const int32 input1_val =
   1db06:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db08:	f7fc fca6 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db0c:	68ea      	ldr	r2, [r5, #12]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1db0e:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db10:	6812      	ldr	r2, [r2, #0]
   1db12:	5c16      	ldrb	r6, [r2, r0]
    const int32 input2_val =
   1db14:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db16:	fa08 f003 	lsl.w	r0, r8, r3
    const int32 input2_val =
   1db1a:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db1c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1db20:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db22:	f7e9 fb31 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db26:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db2a:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db2c:	4630      	mov	r0, r6
   1db2e:	f7e9 fb2b 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db32:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1db36:	eba8 0000 	sub.w	r0, r8, r0
   1db3a:	f7e9 fb25 	bl	7188 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1db3e:	68e3      	ldr	r3, [r4, #12]
   1db40:	4418      	add	r0, r3
   1db42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1db44:	6b24      	ldr	r4, [r4, #48]	; 0x30
   1db46:	4298      	cmp	r0, r3
   1db48:	bfb8      	it	lt
   1db4a:	4618      	movlt	r0, r3
   1db4c:	4284      	cmp	r4, r0
   1db4e:	bfa8      	it	ge
   1db50:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1db52:	4639      	mov	r1, r7
   1db54:	69a8      	ldr	r0, [r5, #24]
   1db56:	f7fc fc7f 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db5a:	696b      	ldr	r3, [r5, #20]
   1db5c:	681b      	ldr	r3, [r3, #0]
   1db5e:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   1db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db64 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db66:	b0ad      	sub	sp, #180	; 0xb4
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db68:	ae18      	add	r6, sp, #96	; 0x60
   1db6a:	af0e      	add	r7, sp, #56	; 0x38
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db6c:	4604      	mov	r4, r0
   1db6e:	9201      	str	r2, [sp, #4]
   1db70:	4608      	mov	r0, r1
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db72:	463a      	mov	r2, r7
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db74:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db76:	4633      	mov	r3, r6
   1db78:	f7fc fc99 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1db7c:	ad22      	add	r5, sp, #136	; 0x88
   1db7e:	2301      	movs	r3, #1
   1db80:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   1db82:	2105      	movs	r1, #5
   1db84:	a807      	add	r0, sp, #28
   1db86:	f7f7 ff30 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1db8a:	4629      	mov	r1, r5
   1db8c:	a807      	add	r0, sp, #28
   1db8e:	f7fc fc78 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1db92:	a807      	add	r0, sp, #28
   1db94:	f7f7 fe89 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   1db98:	ab01      	add	r3, sp, #4
   1db9a:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1db9e:	ab32      	add	r3, sp, #200	; 0xc8
   1dba0:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
   1dba4:	ab34      	add	r3, sp, #208	; 0xd0
   1dba6:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
   1dbaa:	9407      	str	r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbac:	2300      	movs	r3, #0
   1dbae:	9302      	str	r3, [sp, #8]
   1dbb0:	9a02      	ldr	r2, [sp, #8]
   1dbb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dbb4:	429a      	cmp	r2, r3
   1dbb6:	da2b      	bge.n	1dc10 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xac>
   1dbb8:	2300      	movs	r3, #0
   1dbba:	9303      	str	r3, [sp, #12]
   1dbbc:	9a03      	ldr	r2, [sp, #12]
   1dbbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1dbc0:	429a      	cmp	r2, r3
   1dbc2:	da22      	bge.n	1dc0a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa6>
   1dbc4:	2300      	movs	r3, #0
   1dbc6:	9304      	str	r3, [sp, #16]
   1dbc8:	9a04      	ldr	r2, [sp, #16]
   1dbca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dbcc:	429a      	cmp	r2, r3
   1dbce:	da19      	bge.n	1dc04 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa0>
   1dbd0:	2400      	movs	r4, #0
   1dbd2:	9405      	str	r4, [sp, #20]
   1dbd4:	9a05      	ldr	r2, [sp, #20]
   1dbd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1dbd8:	429a      	cmp	r2, r3
   1dbda:	da10      	bge.n	1dbfe <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x9a>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbdc:	9406      	str	r4, [sp, #24]
   1dbde:	9a06      	ldr	r2, [sp, #24]
   1dbe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1dbe2:	429a      	cmp	r2, r3
   1dbe4:	da07      	bge.n	1dbf6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x92>
    calc(indexes);
   1dbe6:	a902      	add	r1, sp, #8
   1dbe8:	a807      	add	r0, sp, #28
   1dbea:	f7ff ff3f 	bl	1da6c <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbee:	9b06      	ldr	r3, [sp, #24]
   1dbf0:	3301      	adds	r3, #1
   1dbf2:	9306      	str	r3, [sp, #24]
   1dbf4:	e7f3      	b.n	1dbde <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x7a>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbf6:	9b05      	ldr	r3, [sp, #20]
   1dbf8:	3301      	adds	r3, #1
   1dbfa:	9305      	str	r3, [sp, #20]
   1dbfc:	e7ea      	b.n	1dbd4 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x70>
   1dbfe:	9b04      	ldr	r3, [sp, #16]
   1dc00:	3301      	adds	r3, #1
   1dc02:	e7e0      	b.n	1dbc6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x62>
   1dc04:	9b03      	ldr	r3, [sp, #12]
   1dc06:	3301      	adds	r3, #1
   1dc08:	e7d7      	b.n	1dbba <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x56>
   1dc0a:	9b02      	ldr	r3, [sp, #8]
   1dc0c:	3301      	adds	r3, #1
   1dc0e:	e7ce      	b.n	1dbae <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x4a>
}
   1dc10:	b02d      	add	sp, #180	; 0xb4
   1dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dc14 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc16:	4604      	mov	r4, r0
   1dc18:	4608      	mov	r0, r1
   1dc1a:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc1c:	6803      	ldr	r3, [r0, #0]
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc1e:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc20:	2b05      	cmp	r3, #5
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc22:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   1dc24:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc26:	dd01      	ble.n	1dc2c <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x18>
   1dc28:	f000 fcd3 	bl	1e5d2 <abort>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   1dc2c:	680b      	ldr	r3, [r1, #0]
   1dc2e:	2b05      	cmp	r3, #5
   1dc30:	dcfa      	bgt.n	1dc28 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   1dc32:	682b      	ldr	r3, [r5, #0]
   1dc34:	2b05      	cmp	r3, #5
   1dc36:	dcf7      	bgt.n	1dc28 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1dc38:	ae18      	add	r6, sp, #96	; 0x60
   1dc3a:	af0e      	add	r7, sp, #56	; 0x38
   1dc3c:	4633      	mov	r3, r6
   1dc3e:	463a      	mov	r2, r7
   1dc40:	f7fc fc35 	bl	1a4ae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1dc44:	2301      	movs	r3, #1
   1dc46:	462a      	mov	r2, r5
   1dc48:	2105      	movs	r1, #5
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1dc4a:	ad22      	add	r5, sp, #136	; 0x88
   1dc4c:	a807      	add	r0, sp, #28
   1dc4e:	f7f7 fecc 	bl	159ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1dc52:	4629      	mov	r1, r5
   1dc54:	a807      	add	r0, sp, #28
   1dc56:	f7fc fc14 	bl	1a482 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1dc5a:	a807      	add	r0, sp, #28
   1dc5c:	f7f7 fe25 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   1dc60:	ab01      	add	r3, sp, #4
   1dc62:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1dc66:	ab32      	add	r3, sp, #200	; 0xc8
   1dc68:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
   1dc6c:	ab34      	add	r3, sp, #208	; 0xd0
   1dc6e:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
   1dc72:	9407      	str	r4, [sp, #28]
   1dc74:	2300      	movs	r3, #0
   1dc76:	9302      	str	r3, [sp, #8]
   1dc78:	9a02      	ldr	r2, [sp, #8]
   1dc7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dc7c:	429a      	cmp	r2, r3
   1dc7e:	da2b      	bge.n	1dcd8 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xc4>
   1dc80:	2300      	movs	r3, #0
   1dc82:	9303      	str	r3, [sp, #12]
   1dc84:	9a03      	ldr	r2, [sp, #12]
   1dc86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1dc88:	429a      	cmp	r2, r3
   1dc8a:	da22      	bge.n	1dcd2 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xbe>
   1dc8c:	2300      	movs	r3, #0
   1dc8e:	9304      	str	r3, [sp, #16]
   1dc90:	9a04      	ldr	r2, [sp, #16]
   1dc92:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dc94:	429a      	cmp	r2, r3
   1dc96:	da19      	bge.n	1dccc <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb8>
   1dc98:	2400      	movs	r4, #0
   1dc9a:	9405      	str	r4, [sp, #20]
   1dc9c:	9a05      	ldr	r2, [sp, #20]
   1dc9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1dca0:	429a      	cmp	r2, r3
   1dca2:	da10      	bge.n	1dcc6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb2>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dca4:	9406      	str	r4, [sp, #24]
   1dca6:	9a06      	ldr	r2, [sp, #24]
   1dca8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1dcaa:	429a      	cmp	r2, r3
   1dcac:	da07      	bge.n	1dcbe <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xaa>
    calc(indexes);
   1dcae:	a902      	add	r1, sp, #8
   1dcb0:	a807      	add	r0, sp, #28
   1dcb2:	f7ff ff19 	bl	1dae8 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dcb6:	9b06      	ldr	r3, [sp, #24]
   1dcb8:	3301      	adds	r3, #1
   1dcba:	9306      	str	r3, [sp, #24]
   1dcbc:	e7f3      	b.n	1dca6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x92>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dcbe:	9b05      	ldr	r3, [sp, #20]
   1dcc0:	3301      	adds	r3, #1
   1dcc2:	9305      	str	r3, [sp, #20]
   1dcc4:	e7ea      	b.n	1dc9c <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x88>
   1dcc6:	9b04      	ldr	r3, [sp, #16]
   1dcc8:	3301      	adds	r3, #1
   1dcca:	e7e0      	b.n	1dc8e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x7a>
   1dccc:	9b03      	ldr	r3, [sp, #12]
   1dcce:	3301      	adds	r3, #1
   1dcd0:	e7d7      	b.n	1dc82 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x6e>
   1dcd2:	9b02      	ldr	r3, [sp, #8]
   1dcd4:	3301      	adds	r3, #1
   1dcd6:	e7ce      	b.n	1dc76 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x62>
}
   1dcd8:	b02d      	add	sp, #180	; 0xb4
   1dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dcdc <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcde:	b0ab      	sub	sp, #172	; 0xac
   1dce0:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   1dce2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dce4:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   1dce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1dce8:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   1dcea:	6943      	ldr	r3, [r0, #20]
   1dcec:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   1dcee:	6843      	ldr	r3, [r0, #4]
   1dcf0:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   1dcf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1dcf4:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   1dcf6:	6983      	ldr	r3, [r0, #24]
   1dcf8:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   1dcfa:	6883      	ldr	r3, [r0, #8]
   1dcfc:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   1dcfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1dd00:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   1dd02:	69c3      	ldr	r3, [r0, #28]
   1dd04:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   1dd06:	6a03      	ldr	r3, [r0, #32]
   1dd08:	931b      	str	r3, [sp, #108]	; 0x6c
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dd0a:	4614      	mov	r4, r2
  params->quantized_activation_min = min;
   1dd0c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd10:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   1dd12:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dd16:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd18:	f7f7 fe0c 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd1c:	4621      	mov	r1, r4
   1dd1e:	a80a      	add	r0, sp, #40	; 0x28
   1dd20:	f7f7 fe08 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1dd24:	a90a      	add	r1, sp, #40	; 0x28
   1dd26:	aa16      	add	r2, sp, #88	; 0x58
   1dd28:	a810      	add	r0, sp, #64	; 0x40
   1dd2a:	f7f7 ff7a 	bl	15c22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1dd2e:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd30:	a80a      	add	r0, sp, #40	; 0x28
   1dd32:	f7f7 fdba 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1dd36:	a810      	add	r0, sp, #64	; 0x40
   1dd38:	f7f7 fdb7 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   1dd3c:	7833      	ldrb	r3, [r6, #0]
   1dd3e:	2b09      	cmp	r3, #9
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   1dd40:	4629      	mov	r1, r5
   1dd42:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   1dd44:	d13e      	bne.n	1ddc4 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   1dd46:	b31f      	cbz	r7, 1dd90 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   1dd48:	f7f7 fdf4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd4c:	b105      	cbz	r5, 1dd50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   1dd4e:	686d      	ldr	r5, [r5, #4]
   1dd50:	4621      	mov	r1, r4
   1dd52:	a80a      	add	r0, sp, #40	; 0x28
   1dd54:	f7f7 fdee 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd58:	b104      	cbz	r4, 1dd5c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   1dd5a:	6864      	ldr	r4, [r4, #4]
   1dd5c:	4631      	mov	r1, r6
   1dd5e:	a804      	add	r0, sp, #16
   1dd60:	f7f7 fde8 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd64:	6873      	ldr	r3, [r6, #4]
   1dd66:	9302      	str	r3, [sp, #8]
   1dd68:	ab04      	add	r3, sp, #16
   1dd6a:	e9cd 4300 	strd	r4, r3, [sp]
   1dd6e:	462a      	mov	r2, r5
   1dd70:	ab0a      	add	r3, sp, #40	; 0x28
   1dd72:	a910      	add	r1, sp, #64	; 0x40
   1dd74:	a816      	add	r0, sp, #88	; 0x58
   1dd76:	f7ff fef5 	bl	1db64 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   1dd7a:	a804      	add	r0, sp, #16
   1dd7c:	f7f7 fd95 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1dd80:	a80a      	add	r0, sp, #40	; 0x28
   1dd82:	f7f7 fd92 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
   1dd86:	a810      	add	r0, sp, #64	; 0x40
   1dd88:	f7f7 fd8f 	bl	158aa <_ZN6tflite12RuntimeShapeD1Ev>
}
   1dd8c:	b02b      	add	sp, #172	; 0xac
   1dd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_SUB(tflite::reference_ops::Sub, int8_t);
   1dd90:	f7f7 fdd0 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd94:	b105      	cbz	r5, 1dd98 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   1dd96:	686d      	ldr	r5, [r5, #4]
   1dd98:	4621      	mov	r1, r4
   1dd9a:	a80a      	add	r0, sp, #40	; 0x28
   1dd9c:	f7f7 fdca 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dda0:	b104      	cbz	r4, 1dda4 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   1dda2:	6864      	ldr	r4, [r4, #4]
   1dda4:	4631      	mov	r1, r6
   1dda6:	a804      	add	r0, sp, #16
   1dda8:	f7f7 fdc4 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddac:	6873      	ldr	r3, [r6, #4]
   1ddae:	9302      	str	r3, [sp, #8]
   1ddb0:	ab04      	add	r3, sp, #16
   1ddb2:	e9cd 4300 	strd	r4, r3, [sp]
   1ddb6:	462a      	mov	r2, r5
   1ddb8:	ab0a      	add	r3, sp, #40	; 0x28
   1ddba:	a910      	add	r1, sp, #64	; 0x40
   1ddbc:	a816      	add	r0, sp, #88	; 0x58
   1ddbe:	f7ff fe0a 	bl	1d9d6 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   1ddc2:	e7da      	b.n	1dd7a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   1ddc4:	b1cf      	cbz	r7, 1ddfa <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, uint8_t);
   1ddc6:	f7f7 fdb5 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddca:	b105      	cbz	r5, 1ddce <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   1ddcc:	686d      	ldr	r5, [r5, #4]
   1ddce:	4621      	mov	r1, r4
   1ddd0:	a80a      	add	r0, sp, #40	; 0x28
   1ddd2:	f7f7 fdaf 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddd6:	b104      	cbz	r4, 1ddda <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   1ddd8:	6864      	ldr	r4, [r4, #4]
   1ddda:	4631      	mov	r1, r6
   1dddc:	a804      	add	r0, sp, #16
   1ddde:	f7f7 fda9 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dde2:	6873      	ldr	r3, [r6, #4]
   1dde4:	9302      	str	r3, [sp, #8]
   1dde6:	ab04      	add	r3, sp, #16
   1dde8:	e9cd 4300 	strd	r4, r3, [sp]
   1ddec:	462a      	mov	r2, r5
   1ddee:	ab0a      	add	r3, sp, #40	; 0x28
   1ddf0:	a910      	add	r1, sp, #64	; 0x40
   1ddf2:	a816      	add	r0, sp, #88	; 0x58
   1ddf4:	f7ff ff0e 	bl	1dc14 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>
   1ddf8:	e7bf      	b.n	1dd7a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   1ddfa:	f7f7 fd9b 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddfe:	b105      	cbz	r5, 1de02 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   1de00:	686d      	ldr	r5, [r5, #4]
   1de02:	4621      	mov	r1, r4
   1de04:	a80a      	add	r0, sp, #40	; 0x28
   1de06:	f7f7 fd95 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de0a:	b104      	cbz	r4, 1de0e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   1de0c:	6864      	ldr	r4, [r4, #4]
   1de0e:	4631      	mov	r1, r6
   1de10:	a804      	add	r0, sp, #16
   1de12:	f7f7 fd8f 	bl	15934 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de16:	6873      	ldr	r3, [r6, #4]
   1de18:	9302      	str	r3, [sp, #8]
   1de1a:	ab04      	add	r3, sp, #16
   1de1c:	e9cd 4300 	strd	r4, r3, [sp]
   1de20:	462a      	mov	r2, r5
   1de22:	ab0a      	add	r3, sp, #40	; 0x28
   1de24:	a910      	add	r1, sp, #64	; 0x40
   1de26:	a816      	add	r0, sp, #88	; 0x58
   1de28:	f7ff fd89 	bl	1d93e <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   1de2c:	e7a5      	b.n	1dd7a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

0001de2e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   1de2e:	b508      	push	{r3, lr}
   1de30:	4618      	mov	r0, r3
   1de32:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1de34:	781a      	ldrb	r2, [r3, #0]
   1de36:	2a03      	cmp	r2, #3
   1de38:	d001      	beq.n	1de3e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   1de3a:	2a09      	cmp	r2, #9
   1de3c:	d103      	bne.n	1de46 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   1de3e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1de42:	f7ff ff4b 	bl	1dcdc <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   1de46:	2000      	movs	r0, #0
   1de48:	bd08      	pop	{r3, pc}

0001de4a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1de4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de4e:	2300      	movs	r3, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1de50:	ed2d 8b02 	vpush	{d8}
   1de54:	4607      	mov	r7, r0
   1de56:	460d      	mov	r5, r1
   1de58:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de5a:	60d3      	str	r3, [r2, #12]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de5c:	4698      	mov	r8, r3
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de5e:	68e6      	ldr	r6, [r4, #12]
   1de60:	68fb      	ldr	r3, [r7, #12]
   1de62:	429e      	cmp	r6, r3
   1de64:	da42      	bge.n	1deec <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0xa2>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de66:	f8c4 8010 	str.w	r8, [r4, #16]
   1de6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
   1de6e:	693b      	ldr	r3, [r7, #16]
   1de70:	4599      	cmp	r9, r3
   1de72:	da38      	bge.n	1dee6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x9c>
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de74:	68e8      	ldr	r0, [r5, #12]
   1de76:	4621      	mov	r1, r4
   1de78:	f7fc faee 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
                input2_data[SubscriptToIndex(desc2, indexes)],
   1de7c:	4621      	mov	r1, r4
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de7e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, indexes)],
   1de80:	6968      	ldr	r0, [r5, #20]
   1de82:	f7fc fae9 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1de86:	6929      	ldr	r1, [r5, #16]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de88:	68aa      	ldr	r2, [r5, #8]
                input2_data[SubscriptToIndex(desc2, indexes)],
   1de8a:	680b      	ldr	r3, [r1, #0]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de8c:	6812      	ldr	r2, [r2, #0]
                input2_data[SubscriptToIndex(desc2, indexes)],
   1de8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de92:	eb02 028a 	add.w	r2, r2, sl, lsl #2
        ActivationFunctionWithMinMax(
   1de96:	edd2 7a00 	vldr	s15, [r2]
   1de9a:	ed93 8a00 	vldr	s16, [r3]
  auto sub_func = [&](int indexes[N]) {
   1de9e:	f8d5 a018 	ldr.w	sl, [r5, #24]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1dea2:	6868      	ldr	r0, [r5, #4]
   1dea4:	4621      	mov	r1, r4
        ActivationFunctionWithMinMax(
   1dea6:	ee37 8ac8 	vsub.f32	s16, s15, s16
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1deaa:	f7fc fad5 	bl	1a458 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1deae:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
   1deb2:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
   1deb6:	682a      	ldr	r2, [r5, #0]
   1deb8:	eef4 7ac8 	vcmpe.f32	s15, s16
   1debc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1dec0:	bfb8      	it	lt
   1dec2:	eef0 7a48 	vmovlt.f32	s15, s16
   1dec6:	6813      	ldr	r3, [r2, #0]
   1dec8:	eef4 7ac7 	vcmpe.f32	s15, s14
   1decc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ded0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ded4:	bf88      	it	hi
   1ded6:	eef0 7a47 	vmovhi.f32	s15, s14
   1deda:	f109 0301 	add.w	r3, r9, #1
   1dede:	edc0 7a00 	vstr	s15, [r0]
   1dee2:	6123      	str	r3, [r4, #16]
   1dee4:	e7c1      	b.n	1de6a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x20>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dee6:	3601      	adds	r6, #1
   1dee8:	60e6      	str	r6, [r4, #12]
   1deea:	e7b8      	b.n	1de5e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x14>
}
   1deec:	ecbd 8b02 	vpop	{d8}
   1def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001def4 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1def4:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1def6:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1def8:	b90b      	cbnz	r3, 1defe <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj+0xa>
   1defa:	f000 fb6a 	bl	1e5d2 <abort>
  void* data = nullptr;
   1defe:	2400      	movs	r4, #0
   1df00:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1df02:	aa01      	add	r2, sp, #4
   1df04:	2118      	movs	r1, #24
   1df06:	4798      	blx	r3
   1df08:	2801      	cmp	r0, #1
  return data;
   1df0a:	bf14      	ite	ne
   1df0c:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   1df0e:	4620      	moveq	r0, r4
}
   1df10:	b002      	add	sp, #8
   1df12:	bd10      	pop	{r4, pc}

0001df14 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>:
  return a ? BitNot(zero) : zero;
   1df14:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  static IntegerType eval(IntegerType x) {
   1df18:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   1df1a:	da26      	bge.n	1df6a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x56>
   1df1c:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1df20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df24:	f04f 0400 	mov.w	r4, #0
   1df28:	bfc8      	it	gt
   1df2a:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1df2c:	17c7      	asrs	r7, r0, #31
   1df2e:	0082      	lsls	r2, r0, #2
   1df30:	00bb      	lsls	r3, r7, #2
   1df32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1df36:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1df3a:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1df3e:	db18      	blt.n	1df72 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x5e>
             : wide_shifted > max ? max
   1df40:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1df44:	4296      	cmp	r6, r2
   1df46:	f04f 0700 	mov.w	r7, #0
   1df4a:	eb77 0003 	sbcs.w	r0, r7, r3
   1df4e:	bfb8      	it	lt
   1df50:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1df54:	43e3      	mvns	r3, r4
  return a & b;
   1df56:	401a      	ands	r2, r3
   1df58:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  return ~a;
   1df5c:	43c8      	mvns	r0, r1
  return a ^ b;
   1df5e:	4062      	eors	r2, r4
  return a & b;
   1df60:	4002      	ands	r2, r0
   1df62:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  }
   1df66:	4050      	eors	r0, r2
   1df68:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   1df6a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1df6e:	2100      	movs	r1, #0
   1df70:	e7dc      	b.n	1df2c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x18>
             ? min
   1df72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1df76:	e7ed      	b.n	1df54 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x40>

0001df78 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa>:
namespace reference_integer_ops {

inline void Tanh(int32_t input_zero_point, int32_t input_range_radius,
                 int32_t input_multiplier, int32_t input_shift,
                 int32_t input_size, const int8_t* input_data,
                 int8_t* output_data) {
   1df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df7c:	b085      	sub	sp, #20
   1df7e:	2b00      	cmp	r3, #0
   1df80:	9f10      	ldr	r7, [sp, #64]	; 0x40
  int right_shift = shift > 0 ? 0 : -shift;
   1df82:	f1c3 0900 	rsb	r9, r3, #0
   1df86:	4606      	mov	r6, r0
   1df88:	4688      	mov	r8, r1
   1df8a:	4692      	mov	sl, r2
   1df8c:	bfc8      	it	gt
   1df8e:	f04f 0900 	movgt.w	r9, #0
  static constexpr int32_t kOutputScale = 7;
  static constexpr int32_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int32_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  using F4 = gemmlowp::FixedPoint<int32_t, kInputIntegerBits>;

  for (int i = 0; i < input_size; ++i) {
   1df92:	2400      	movs	r4, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1df94:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   1df98:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   1df9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1df9e:	429c      	cmp	r4, r3
   1dfa0:	da3f      	bge.n	1e022 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0xaa>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1dfa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dfa4:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   1dfa6:	1b80      	subs	r0, r0, r6
    if (input <= -input_range_radius) {
   1dfa8:	4583      	cmp	fp, r0
   1dfaa:	db03      	blt.n	1dfb4 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x3c>
      output_data[i] = kMinInt8;
   1dfac:	2380      	movs	r3, #128	; 0x80
    } else if (input >= input_range_radius) {
      output_data[i] = kMaxInt8;
   1dfae:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < input_size; ++i) {
   1dfb0:	3401      	adds	r4, #1
   1dfb2:	e7f3      	b.n	1df9c <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x24>
    } else if (input >= input_range_radius) {
   1dfb4:	4540      	cmp	r0, r8
   1dfb6:	db01      	blt.n	1dfbc <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x44>
      output_data[i] = kMaxInt8;
   1dfb8:	237f      	movs	r3, #127	; 0x7f
   1dfba:	e7f8      	b.n	1dfae <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1dfbc:	4651      	mov	r1, sl
   1dfbe:	40a8      	lsls	r0, r5
   1dfc0:	f7ed f9e8 	bl	b394 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1dfc4:	4649      	mov	r1, r9
   1dfc6:	f7ed fa13 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   1dfca:	2800      	cmp	r0, #0
   1dfcc:	db25      	blt.n	1e01a <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0xa2>
   1dfce:	bf0c      	ite	eq
   1dfd0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1dfd4:	2300      	movne	r3, #0
   1dfd6:	2200      	movs	r2, #0
  return ~a;
   1dfd8:	43d1      	mvns	r1, r2
  return -a;
   1dfda:	f1c0 0c00 	rsb	ip, r0, #0
  return a & b;
   1dfde:	ea0c 0c01 	and.w	ip, ip, r1
   1dfe2:	4010      	ands	r0, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   1dfe4:	ea8c 0000 	eor.w	r0, ip, r0
   1dfe8:	9303      	str	r3, [sp, #12]
  return a & b;
   1dfea:	9102      	str	r1, [sp, #8]
   1dfec:	9201      	str	r2, [sp, #4]
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   1dfee:	f7f0 f963 	bl	e2b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1dff2:	f7f1 fccf 	bl	f994 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return a & b;
   1dff6:	9902      	ldr	r1, [sp, #8]
   1dff8:	9a01      	ldr	r2, [sp, #4]
  return ~a;
   1dffa:	9b03      	ldr	r3, [sp, #12]
  return -a;
   1dffc:	f1c0 0c00 	rsb	ip, r0, #0
  return a & b;
   1e000:	ea0c 0202 	and.w	r2, ip, r2
   1e004:	4008      	ands	r0, r1
  return a ^ b;
   1e006:	4050      	eors	r0, r2
  return ~a;
   1e008:	43db      	mvns	r3, r3
          gemmlowp::tanh(F4::FromRaw(input_in_q4)).raw();

      // Rescale and downcast.
      using gemmlowp::RoundingDivideByPOT;
      int32_t output_in_q24 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputScale);
   1e00a:	2118      	movs	r1, #24
   1e00c:	4018      	ands	r0, r3
   1e00e:	f7ed f9ef 	bl	b3f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_in_q24 = std::min(std::max(output_in_q24, kMinInt8), kMaxInt8);
      output_data[i] = static_cast<int8_t>(output_in_q24);
   1e012:	f300 0007 	ssat	r0, #8, r0
   1e016:	5538      	strb	r0, [r7, r4]
   1e018:	e7ca      	b.n	1dfb0 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x38>
  return a ? BitNot(zero) : zero;
   1e01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e01e:	2300      	movs	r3, #0
   1e020:	e7da      	b.n	1dfd8 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x60>
    }
  }
}
   1e022:	b005      	add	sp, #20
   1e024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e028 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   1e028:	4770      	bx	lr

0001e02a <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   1e02a:	6880      	ldr	r0, [r0, #8]
   1e02c:	4770      	bx	lr

0001e02e <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   1e02e:	b510      	push	{r4, lr}
   1e030:	4604      	mov	r4, r0
}
   1e032:	f000 faa8 	bl	1e586 <_ZdlPv>
   1e036:	4620      	mov	r0, r4
   1e038:	bd10      	pop	{r4, pc}

0001e03a <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   1e03a:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   1e03c:	4604      	mov	r4, r0
   1e03e:	460b      	mov	r3, r1
   1e040:	2501      	movs	r5, #1
    any_swapped = false;
   1e042:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   1e044:	4295      	cmp	r5, r2
   1e046:	da12      	bge.n	1e06e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   1e048:	e9d4 7c00 	ldrd	r7, ip, [r4]
   1e04c:	4567      	cmp	r7, ip
        values[i] = value_temp;
   1e04e:	bfbc      	itt	lt
   1e050:	e9c4 c700 	strdlt	ip, r7, [r4]
        ids[i - 1] = ids[i];
   1e054:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    for (int i = 1; i < size; ++i) {
   1e058:	f105 0501 	add.w	r5, r5, #1
        ids[i] = id_temp;
   1e05c:	bfb8      	it	lt
   1e05e:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   1e062:	f104 0404 	add.w	r4, r4, #4
   1e066:	bfb8      	it	lt
   1e068:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   1e06a:	3304      	adds	r3, #4
   1e06c:	e7ea      	b.n	1e044 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   1e06e:	2e00      	cmp	r6, #0
   1e070:	d1e4      	bne.n	1e03c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   1e072:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e074 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   1e074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1e076:	9f08      	ldr	r7, [sp, #32]
   1e078:	6804      	ldr	r4, [r0, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
   1e07a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1e07e:	9700      	str	r7, [sp, #0]
   1e080:	68a4      	ldr	r4, [r4, #8]
   1e082:	47a0      	blx	r4
   1e084:	b928      	cbnz	r0, 1e092 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
   1e086:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1e08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e08c:	606b      	str	r3, [r5, #4]
}
   1e08e:	b003      	add	sp, #12
   1e090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
   1e092:	2001      	movs	r0, #1
   1e094:	e7fb      	b.n	1e08e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

0001e096 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   1e096:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   1e098:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   1e09a:	68c1      	ldr	r1, [r0, #12]
   1e09c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   1e0a0:	6888      	ldr	r0, [r1, #8]
   1e0a2:	4298      	cmp	r0, r3
   1e0a4:	dc05      	bgt.n	1e0b2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
   1e0a6:	68c8      	ldr	r0, [r1, #12]
   1e0a8:	4290      	cmp	r0, r2
   1e0aa:	bfb4      	ite	lt
   1e0ac:	2000      	movlt	r0, #0
   1e0ae:	2001      	movge	r0, #1
}
   1e0b0:	bd10      	pop	{r4, pc}
    return false;
   1e0b2:	2000      	movs	r0, #0
   1e0b4:	e7fc      	b.n	1e0b0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

0001e0b6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   1e0b6:	b570      	push	{r4, r5, r6, lr}
   1e0b8:	4605      	mov	r5, r0
  if (start == nullptr) {
   1e0ba:	b989      	cbnz	r1, 1e0e0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e0bc:	6a04      	ldr	r4, [r0, #32]
   1e0be:	69a9      	ldr	r1, [r5, #24]
   1e0c0:	200c      	movs	r0, #12
   1e0c2:	fb00 1404 	mla	r4, r0, r4, r1
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   1e0c6:	260c      	movs	r6, #12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   1e0c8:	4621      	mov	r1, r4
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	f7ff ffe3 	bl	1e096 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   1e0d0:	b950      	cbnz	r0, 1e0e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
   1e0d2:	68a4      	ldr	r4, [r4, #8]
   1e0d4:	1c61      	adds	r1, r4, #1
   1e0d6:	d009      	beq.n	1e0ec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
   1e0d8:	69a9      	ldr	r1, [r5, #24]
   1e0da:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   1e0de:	e7f3      	b.n	1e0c8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
   1e0e0:	688c      	ldr	r4, [r1, #8]
   1e0e2:	1c60      	adds	r0, r4, #1
   1e0e4:	d1eb      	bne.n	1e0be <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   1e0e6:	2400      	movs	r4, #0
}
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   1e0ec:	4604      	mov	r4, r0
   1e0ee:	e7fb      	b.n	1e0e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

0001e0f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   1e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1e0f4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   1e0f8:	b085      	sub	sp, #20
   1e0fa:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	f000 80ae 	beq.w	1e25e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
   1e102:	6885      	ldr	r5, [r0, #8]
   1e104:	2d00      	cmp	r5, #0
   1e106:	f000 80aa 	beq.w	1e25e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
   1e10a:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
   1e10e:	2300      	movs	r3, #0
   1e110:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  int idx_from_head = 0;
   1e114:	461a      	mov	r2, r3
  for (int i = 0; i < buffer_count_; ++i) {
   1e116:	f8d4 c008 	ldr.w	ip, [r4, #8]
   1e11a:	459c      	cmp	ip, r3
   1e11c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   1e120:	eb07 0082 	add.w	r0, r7, r2, lsl #2
   1e124:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   1e128:	dd1e      	ble.n	1e168 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   1e12a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   1e12e:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
   1e132:	0119      	lsls	r1, r3, #4
   1e134:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1e138:	f85c c001 	ldr.w	ip, [ip, r1]
   1e13c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e13e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1e142:	d108      	bne.n	1e156 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
   1e144:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   1e146:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   1e14a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
   1e14e:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   1e152:	3301      	adds	r3, #1
   1e154:	e7df      	b.n	1e116 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   1e156:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
   1e15a:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   1e15e:	6840      	ldr	r0, [r0, #4]
   1e160:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
   1e164:	3201      	adds	r2, #1
   1e166:	e7f4      	b.n	1e152 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   1e168:	ebac 0202 	sub.w	r2, ip, r2
   1e16c:	f7ff ff65 	bl	1e03a <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e170:	69a6      	ldr	r6, [r4, #24]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e172:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1e176:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  next_free_entry_ = 1;
   1e17a:	2301      	movs	r3, #1
   1e17c:	2200      	movs	r2, #0
   1e17e:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   1e182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e186:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
   1e188:	6963      	ldr	r3, [r4, #20]
   1e18a:	9301      	str	r3, [sp, #4]
   1e18c:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   1e18e:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e190:	eb08 1103 	add.w	r1, r8, r3, lsl #4
  first_entry->offset = buffer_offsets_[buffer_id];
   1e194:	46b2      	mov	sl, r6
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e196:	6849      	ldr	r1, [r1, #4]
   1e198:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
   1e19a:	bf08      	it	eq
   1e19c:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
   1e1a0:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   1e1a4:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
   1e1a6:	2701      	movs	r7, #1
   1e1a8:	68a3      	ldr	r3, [r4, #8]
   1e1aa:	42bb      	cmp	r3, r7
   1e1ac:	dd57      	ble.n	1e25e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
   1e1ae:	9b01      	ldr	r3, [sp, #4]
   1e1b0:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   1e1b4:	eb08 1309 	add.w	r3, r8, r9, lsl #4
   1e1b8:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   1e1bc:	685d      	ldr	r5, [r3, #4]
   1e1be:	1c69      	adds	r1, r5, #1
   1e1c0:	d120      	bne.n	1e204 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
    const int wanted_size = wanted_requirements->size;
   1e1c2:	f858 2002 	ldr.w	r2, [r8, r2]
   1e1c6:	9202      	str	r2, [sp, #8]
      ListEntry* prior_entry = nullptr;
   1e1c8:	2000      	movs	r0, #0
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   1e1ca:	689a      	ldr	r2, [r3, #8]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   1e1cc:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
   1e1d0:	4605      	mov	r5, r0
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   1e1d2:	4601      	mov	r1, r0
   1e1d4:	9003      	str	r0, [sp, #12]
   1e1d6:	ee17 3a90 	vmov	r3, s15
   1e1da:	4620      	mov	r0, r4
   1e1dc:	f7ff ff6b 	bl	1e0b6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
   1e1e0:	9903      	ldr	r1, [sp, #12]
   1e1e2:	b149      	cbz	r1, 1e1f8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
   1e1e4:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
   1e1e6:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
   1e1e8:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
   1e1ec:	f858 c00c 	ldr.w	ip, [r8, ip]
   1e1f0:	448c      	add	ip, r1
   1e1f2:	4565      	cmp	r5, ip
   1e1f4:	bfb8      	it	lt
   1e1f6:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
   1e1f8:	b120      	cbz	r0, 1e204 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
   1e1fa:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
   1e1fc:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
   1e1fe:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
   1e200:	428b      	cmp	r3, r1
   1e202:	dce6      	bgt.n	1e1d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    buffer_offsets_[buffer_id] = candidate_offset;
   1e204:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   1e208:	69e3      	ldr	r3, [r4, #28]
   1e20a:	220c      	movs	r2, #12
   1e20c:	fb02 f103 	mul.w	r1, r2, r3
   1e210:	1872      	adds	r2, r6, r1
    new_entry->offset = candidate_offset;
   1e212:	5075      	str	r5, [r6, r1]
    ++next_free_entry_;
   1e214:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
   1e216:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
   1e21a:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   1e21c:	f8da 1000 	ldr.w	r1, [sl]
   1e220:	42a9      	cmp	r1, r5
   1e222:	dd05      	ble.n	1e230 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
   1e224:	6a21      	ldr	r1, [r4, #32]
   1e226:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
   1e228:	4692      	mov	sl, r2
   1e22a:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
   1e22c:	3701      	adds	r7, #1
   1e22e:	e7bb      	b.n	1e1a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
   1e230:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
   1e232:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
   1e234:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1e238:	d104      	bne.n	1e244 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
   1e23a:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
   1e23c:	6090      	str	r0, [r2, #8]
          break;
   1e23e:	e7f5      	b.n	1e22c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
   1e240:	4671      	mov	r1, lr
   1e242:	e7f6      	b.n	1e232 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   1e244:	f04f 0c0c 	mov.w	ip, #12
   1e248:	fb0c fc00 	mul.w	ip, ip, r0
   1e24c:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
   1e250:	f856 c00c 	ldr.w	ip, [r6, ip]
   1e254:	45ac      	cmp	ip, r5
   1e256:	ddf3      	ble.n	1e240 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
   1e258:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
   1e25a:	608b      	str	r3, [r1, #8]
          break;
   1e25c:	e7e6      	b.n	1e22c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
   1e25e:	b005      	add	sp, #20
   1e260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e264 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   1e264:	b570      	push	{r4, r5, r6, lr}
   1e266:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   1e268:	f7ff ff42 	bl	1e0f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   1e26c:	68a0      	ldr	r0, [r4, #8]
   1e26e:	b1a8      	cbz	r0, 1e29c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e270:	69a5      	ldr	r5, [r4, #24]
   1e272:	6a23      	ldr	r3, [r4, #32]
   1e274:	220c      	movs	r2, #12
   1e276:	fb02 5303 	mla	r3, r2, r3, r5
  size_t max_size = 0;
   1e27a:	2000      	movs	r0, #0
  while (entry) {
   1e27c:	b173      	cbz	r3, 1e29c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
   1e27e:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
   1e280:	68e6      	ldr	r6, [r4, #12]
   1e282:	0109      	lsls	r1, r1, #4
   1e284:	5871      	ldr	r1, [r6, r1]
   1e286:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   1e288:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
   1e28a:	4431      	add	r1, r6
   1e28c:	4288      	cmp	r0, r1
   1e28e:	bf38      	it	cc
   1e290:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
   1e292:	1c59      	adds	r1, r3, #1
   1e294:	d002      	beq.n	1e29c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   1e296:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   1e29a:	e7ef      	b.n	1e27c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
   1e29c:	bd70      	pop	{r4, r5, r6, pc}

0001e29e <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   1e29e:	b40e      	push	{r1, r2, r3}
   1e2a0:	b503      	push	{r0, r1, lr}
   1e2a2:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   1e2a4:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
   1e2a6:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   1e2aa:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   1e2ac:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   1e2ae:	4798      	blx	r3
  va_end(args);
  return code;
}
   1e2b0:	b002      	add	sp, #8
   1e2b2:	f85d eb04 	ldr.w	lr, [sp], #4
   1e2b6:	b003      	add	sp, #12
   1e2b8:	4770      	bx	lr

0001e2ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   1e2ba:	b40c      	push	{r2, r3}
   1e2bc:	b507      	push	{r0, r1, r2, lr}
   1e2be:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   1e2c0:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
   1e2c2:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   1e2c6:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   1e2c8:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   1e2ca:	4798      	blx	r3
  va_end(args);
  return code;
}
   1e2cc:	b003      	add	sp, #12
   1e2ce:	f85d eb04 	ldr.w	lr, [sp], #4
   1e2d2:	b002      	add	sp, #8
   1e2d4:	4770      	bx	lr

0001e2d6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   1e2d6:	b120      	cbz	r0, 1e2e2 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
   1e2d8:	2801      	cmp	r0, #1
   1e2da:	bf14      	ite	ne
   1e2dc:	2000      	movne	r0, #0
   1e2de:	2002      	moveq	r0, #2
   1e2e0:	4770      	bx	lr
      return kTfLitePaddingSame;
   1e2e2:	2001      	movs	r0, #1
}
   1e2e4:	4770      	bx	lr

0001e2e6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   1e2e6:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   1e2e8:	b908      	cbnz	r0, 1e2ee <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
   1e2ea:	f000 f972 	bl	1e5d2 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1e2ee:	2900      	cmp	r1, #0
   1e2f0:	d0fb      	beq.n	1e2ea <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
   1e2f2:	2a00      	cmp	r2, #0
   1e2f4:	d0f9      	beq.n	1e2ea <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
   1e2f6:	2b00      	cmp	r3, #0
   1e2f8:	d0f7      	beq.n	1e2ea <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
   1e2fa:	bd08      	pop	{r3, pc}

0001e2fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   1e2fc:	6803      	ldr	r3, [r0, #0]
   1e2fe:	685b      	ldr	r3, [r3, #4]
   1e300:	4718      	bx	r3

0001e302 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   1e302:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   1e304:	210c      	movs	r1, #12
   1e306:	4604      	mov	r4, r0
   1e308:	f7f7 f9ad 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e30c:	b110      	cbz	r0, 1e314 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   1e30e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e310:	5820      	ldr	r0, [r4, r0]
   1e312:	4418      	add	r0, r3
  }
   1e314:	bd10      	pop	{r4, pc}

0001e316 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
   1e316:	2000      	movs	r0, #0
   1e318:	4770      	bx	lr

0001e31a <_ZN6tflite13ParseQuantizeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   1e31a:	2000      	movs	r0, #0
   1e31c:	4770      	bx	lr

0001e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e31e:	b538      	push	{r3, r4, r5, lr}
   1e320:	4605      	mov	r5, r0
   1e322:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e324:	f7f7 f99f 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e328:	b100      	cbz	r0, 1e32c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   1e32a:	5c2c      	ldrb	r4, [r5, r0]
  }
   1e32c:	4620      	mov	r0, r4
   1e32e:	bd38      	pop	{r3, r4, r5, pc}

0001e330 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
   1e330:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   1e332:	2200      	movs	r2, #0
   1e334:	210a      	movs	r1, #10
   1e336:	f7ff fff2 	bl	1e31e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   1e33a:	bd08      	pop	{r3, pc}

0001e33c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e33c:	b538      	push	{r3, r4, r5, lr}
   1e33e:	4605      	mov	r5, r0
   1e340:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e342:	f7f7 f990 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e346:	b100      	cbz	r0, 1e34a <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
   1e348:	582c      	ldr	r4, [r5, r0]
  }
   1e34a:	4620      	mov	r0, r4
   1e34c:	bd38      	pop	{r3, r4, r5, pc}

0001e34e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e34e:	b538      	push	{r3, r4, r5, lr}
   1e350:	4605      	mov	r5, r0
   1e352:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e354:	f7f7 f987 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e358:	b100      	cbz	r0, 1e35c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   1e35a:	562c      	ldrsb	r4, [r5, r0]
  }
   1e35c:	4620      	mov	r0, r4
   1e35e:	bd38      	pop	{r3, r4, r5, pc}

0001e360 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e360:	b510      	push	{r4, lr}
   1e362:	ed2d 8b02 	vpush	{d8}
   1e366:	4604      	mov	r4, r0
   1e368:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
   1e36c:	f7f7 f97b 	bl	15666 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e370:	b110      	cbz	r0, 1e378 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
   1e372:	4420      	add	r0, r4
   1e374:	ed90 8a00 	vldr	s16, [r0]
  }
   1e378:	eeb0 0a48 	vmov.f32	s0, s16
   1e37c:	ecbd 8b02 	vpop	{d8}
   1e380:	bd10      	pop	{r4, pc}

0001e382 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
   1e382:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   1e386:	b510      	push	{r4, lr}
  if (!tensor->is_variable) {
   1e388:	b163      	cbz	r3, 1e3a4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x22>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   1e38a:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   1e38c:	6841      	ldr	r1, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   1e38e:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
   1e390:	bf0c      	ite	eq
   1e392:	6902      	ldreq	r2, [r0, #16]
  int value = 0;
   1e394:	2200      	movne	r2, #0
  for (size_t i = 0; i < tensor->bytes; ++i) {
   1e396:	2300      	movs	r3, #0
   1e398:	6984      	ldr	r4, [r0, #24]
   1e39a:	429c      	cmp	r4, r3
   1e39c:	d902      	bls.n	1e3a4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x22>
    *raw_ptr = value;
   1e39e:	54ca      	strb	r2, [r1, r3]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   1e3a0:	3301      	adds	r3, #1
   1e3a2:	e7f9      	b.n	1e398 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x16>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   1e3a4:	2000      	movs	r0, #0
   1e3a6:	bd10      	pop	{r4, pc}

0001e3a8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   1e3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3ac:	2401      	movs	r4, #1
                         int total_signed_bits) {
   1e3ae:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3b0:	fa04 f000 	lsl.w	r0, r4, r0
   1e3b4:	3801      	subs	r0, #1
                         int total_signed_bits) {
   1e3b6:	4688      	mov	r8, r1
   1e3b8:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3ba:	f7e2 fc43 	bl	c44 <__aeabi_i2d>
   1e3be:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e3c0:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3c4:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e3c6:	f1c0 0320 	rsb	r3, r0, #32
   1e3ca:	f1a0 0120 	sub.w	r1, r0, #32
   1e3ce:	fa24 f303 	lsr.w	r3, r4, r3
   1e3d2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3d6:	fa04 f000 	lsl.w	r0, r4, r0
   1e3da:	4319      	orrs	r1, r3
   1e3dc:	f7e2 fc6e 	bl	cbc <__aeabi_l2d>
   1e3e0:	4602      	mov	r2, r0
   1e3e2:	460b      	mov	r3, r1
   1e3e4:	4630      	mov	r0, r6
   1e3e6:	4639      	mov	r1, r7
   1e3e8:	f7e2 fc96 	bl	d18 <__aeabi_dmul>
      (1ll << input_left_shift);
   1e3ec:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3f0:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   1e3f2:	f1a8 0120 	sub.w	r1, r8, #32
   1e3f6:	fa24 f303 	lsr.w	r3, r4, r3
   1e3fa:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3fe:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e400:	4319      	orrs	r1, r3
   1e402:	fa04 f008 	lsl.w	r0, r4, r8
   1e406:	f7e2 fc59 	bl	cbc <__aeabi_l2d>
   1e40a:	4602      	mov	r2, r0
   1e40c:	460b      	mov	r3, r1
  const double max_input_rescaled =
   1e40e:	4630      	mov	r0, r6
   1e410:	4639      	mov	r1, r7
   1e412:	f7e2 fdab 	bl	f6c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   1e416:	ec41 0b10 	vmov	d0, r0, r1
   1e41a:	f7e3 f88d 	bl	1538 <floor>
   1e41e:	ec51 0b10 	vmov	r0, r1, d0
   1e422:	f7e2 ff13 	bl	124c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   1e426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e42a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1e42a:	edd0 7a00 	vldr	s15, [r0]
   1e42e:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   1e432:	b510      	push	{r4, lr}
   1e434:	4604      	mov	r4, r0
   1e436:	ee17 0a90 	vmov	r0, s15
   1e43a:	f7e2 fc15 	bl	c68 <__aeabi_f2d>
   1e43e:	ec41 0b10 	vmov	d0, r0, r1
   1e442:	f7f3 fd8f 	bl	11f64 <round>
   1e446:	ec51 0b10 	vmov	r0, r1, d0
   1e44a:	f7e2 ff27 	bl	129c <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1e44e:	ee07 0a90 	vmov	s15, r0
   1e452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1e456:	6863      	ldr	r3, [r4, #4]
   1e458:	ee17 0a90 	vmov	r0, s15
  };
   1e45c:	4418      	add	r0, r3
   1e45e:	bd10      	pop	{r4, pc}

0001e460 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   1e460:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   1e462:	6889      	ldr	r1, [r1, #8]
   1e464:	6880      	ldr	r0, [r0, #8]
   1e466:	f7e2 f824 	bl	4b2 <TfLiteIntArrayEqual>
}
   1e46a:	3800      	subs	r0, #0
   1e46c:	bf18      	it	ne
   1e46e:	2001      	movne	r0, #1
   1e470:	bd08      	pop	{r3, pc}

0001e472 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   1e472:	1e4b      	subs	r3, r1, #1
   1e474:	4403      	add	r3, r0
   1e476:	fbb3 f3f1 	udiv	r3, r3, r1
}
   1e47a:	fb01 f003 	mul.w	r0, r1, r3
   1e47e:	4770      	bx	lr

0001e480 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   1e480:	fbb0 f0f1 	udiv	r0, r0, r1
}
   1e484:	4348      	muls	r0, r1
   1e486:	4770      	bx	lr

0001e488 <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   1e488:	1e43      	subs	r3, r0, #1
   1e48a:	440b      	add	r3, r1
   1e48c:	fbb3 f3f1 	udiv	r3, r3, r1
}
   1e490:	fb01 f003 	mul.w	r0, r1, r3
   1e494:	4770      	bx	lr

0001e496 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   1e496:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e49a:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
   1e49c:	6801      	ldr	r1, [r0, #0]
   1e49e:	1a41      	subs	r1, r0, r1
   1e4a0:	4617      	mov	r7, r2
   1e4a2:	f8b1 c000 	ldrh.w	ip, [r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1e4a6:	f1bc 0f04 	cmp.w	ip, #4
   1e4aa:	461a      	mov	r2, r3
   1e4ac:	d92c      	bls.n	1e508 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x72>
   1e4ae:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
   1e4b0:	18c5      	adds	r5, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e4b2:	b173      	cbz	r3, 1e4d2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
   1e4b4:	58c4      	ldr	r4, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
   1e4b6:	192b      	adds	r3, r5, r4
   1e4b8:	d00b      	beq.n	1e4d2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
  uoffset_t Length() const { return size(); }
   1e4ba:	f855 8004 	ldr.w	r8, [r5, r4]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4be:	2500      	movs	r5, #0
  int element_count = 1;
   1e4c0:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4c2:	4545      	cmp	r5, r8
   1e4c4:	d006      	beq.n	1e4d4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
   1e4c6:	f853 ef04 	ldr.w	lr, [r3, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4ca:	3501      	adds	r5, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
   1e4cc:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4d0:	e7f7      	b.n	1e4c2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
  int element_count = 1;
   1e4d2:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1e4d4:	f1bc 0f06 	cmp.w	ip, #6
   1e4d8:	d917      	bls.n	1e50a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x74>
   1e4da:	88cd      	ldrh	r5, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e4dc:	b105      	cbz	r5, 1e4e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>
   1e4de:	5745      	ldrsb	r5, [r0, r5]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   1e4e0:	9201      	str	r2, [sp, #4]
   1e4e2:	f10d 010f 	add.w	r1, sp, #15
   1e4e6:	b2e8      	uxtb	r0, r5
   1e4e8:	f7f1 fe0a 	bl	10100 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   1e4ec:	b948      	cbnz	r0, 1e502 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
   1e4ee:	9a01      	ldr	r2, [sp, #4]
   1e4f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1e4f4:	4639      	mov	r1, r7
   1e4f6:	f7f3 fb47 	bl	11b88 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
   1e4fa:	b910      	cbnz	r0, 1e502 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
   1e4fc:	683b      	ldr	r3, [r7, #0]
   1e4fe:	435c      	muls	r4, r3
   1e500:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
}
   1e502:	b004      	add	sp, #16
   1e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
   1e508:	2401      	movs	r4, #1
   1e50a:	2500      	movs	r5, #0
   1e50c:	e7e8      	b.n	1e4e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>

0001e50e <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
static const int32_t kAsymmetricInt32Max = INT32_MAX;
static const int kSymmetricInt32Scale = kAsymmetricInt32Max;

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
   1e50e:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   1e510:	f850 4b04 	ldr.w	r4, [r0], #4
   1e514:	2200      	movs	r2, #0
  int result = 1;
   1e516:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   1e518:	4294      	cmp	r4, r2
   1e51a:	dd04      	ble.n	1e526 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   1e51c:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   1e520:	3201      	adds	r2, #1
    result *= dims.data[i];
   1e522:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   1e524:	e7f8      	b.n	1e518 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   1e526:	4618      	mov	r0, r3
   1e528:	bd10      	pop	{r4, pc}

0001e52a <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
   1e52a:	b508      	push	{r3, lr}
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   1e52c:	ee80 0a20 	vdiv.f32	s0, s0, s1
   1e530:	ed2d 8b02 	vpush	{d8}
   1e534:	ee08 0a10 	vmov	s16, r0
   1e538:	f7f3 fe36 	bl	121a8 <roundf>
  int32_t result = round(value / scale) + zero_point;
   1e53c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1e540:	ee38 8a00 	vadd.f32	s16, s16, s0
   1e544:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    result = kAsymmetricUInt8Min;
  }
  if (result > kAsymmetricUInt8Max) {
    result = kAsymmetricUInt8Max;
  }
  return result;
   1e548:	ee18 3a10 	vmov	r3, s16
}
   1e54c:	ecbd 8b02 	vpop	{d8}
  return result;
   1e550:	f383 0008 	usat	r0, #8, r3
}
   1e554:	b2c0      	uxtb	r0, r0
   1e556:	bd08      	pop	{r3, pc}

0001e558 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  }
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
   1e558:	b508      	push	{r3, lr}
   1e55a:	ee80 0a20 	vdiv.f32	s0, s0, s1
   1e55e:	ed2d 8b02 	vpush	{d8}
   1e562:	ee08 0a10 	vmov	s16, r0
   1e566:	f7f3 fe1f 	bl	121a8 <roundf>
  int32_t result = round(value / scale) + zero_point;
   1e56a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1e56e:	ee38 8a00 	vadd.f32	s16, s16, s0
   1e572:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    result = kAsymmetricInt8Min;
  }
  if (result > kAsymmetricInt8Max) {
    result = kAsymmetricInt8Max;
  }
  return result;
   1e576:	ee18 3a10 	vmov	r3, s16
}
   1e57a:	ecbd 8b02 	vpop	{d8}
  return result;
   1e57e:	f303 0007 	ssat	r0, #8, r3
}
   1e582:	b240      	sxtb	r0, r0
   1e584:	bd08      	pop	{r3, pc}

0001e586 <_ZdlPv>:
   1e586:	f7f5 b903 	b.w	13790 <free>

0001e58a <_ZdaPv>:
   1e58a:	f7ff bffc 	b.w	1e586 <_ZdlPv>

0001e58e <__cxa_guard_acquire>:
   1e58e:	6803      	ldr	r3, [r0, #0]
   1e590:	07db      	lsls	r3, r3, #31
   1e592:	d406      	bmi.n	1e5a2 <__cxa_guard_acquire+0x14>
   1e594:	7843      	ldrb	r3, [r0, #1]
   1e596:	b103      	cbz	r3, 1e59a <__cxa_guard_acquire+0xc>
   1e598:	deff      	udf	#255	; 0xff
   1e59a:	2301      	movs	r3, #1
   1e59c:	7043      	strb	r3, [r0, #1]
   1e59e:	4618      	mov	r0, r3
   1e5a0:	4770      	bx	lr
   1e5a2:	2000      	movs	r0, #0
   1e5a4:	4770      	bx	lr

0001e5a6 <__cxa_guard_release>:
   1e5a6:	2301      	movs	r3, #1
   1e5a8:	6003      	str	r3, [r0, #0]
   1e5aa:	4770      	bx	lr

0001e5ac <_Znaj>:
   1e5ac:	f000 b800 	b.w	1e5b0 <_Znwj>

0001e5b0 <_Znwj>:
   1e5b0:	2801      	cmp	r0, #1
   1e5b2:	bf38      	it	cc
   1e5b4:	2001      	movcc	r0, #1
   1e5b6:	b510      	push	{r4, lr}
   1e5b8:	4604      	mov	r4, r0
   1e5ba:	4620      	mov	r0, r4
   1e5bc:	f7f5 f8e0 	bl	13780 <malloc>
   1e5c0:	b930      	cbnz	r0, 1e5d0 <_Znwj+0x20>
   1e5c2:	f7f3 fc91 	bl	11ee8 <_ZSt15get_new_handlerv>
   1e5c6:	b908      	cbnz	r0, 1e5cc <_Znwj+0x1c>
   1e5c8:	f000 f803 	bl	1e5d2 <abort>
   1e5cc:	4780      	blx	r0
   1e5ce:	e7f4      	b.n	1e5ba <_Znwj+0xa>
   1e5d0:	bd10      	pop	{r4, pc}

0001e5d2 <abort>:
   1e5d2:	b508      	push	{r3, lr}
   1e5d4:	2006      	movs	r0, #6
   1e5d6:	f7f5 fbfb 	bl	13dd0 <raise>
   1e5da:	2001      	movs	r0, #1
   1e5dc:	f7e5 f8f6 	bl	37cc <_exit>

0001e5e0 <memcmp>:
   1e5e0:	b530      	push	{r4, r5, lr}
   1e5e2:	3901      	subs	r1, #1
   1e5e4:	2400      	movs	r4, #0
   1e5e6:	42a2      	cmp	r2, r4
   1e5e8:	d101      	bne.n	1e5ee <memcmp+0xe>
   1e5ea:	2000      	movs	r0, #0
   1e5ec:	e005      	b.n	1e5fa <memcmp+0x1a>
   1e5ee:	5d03      	ldrb	r3, [r0, r4]
   1e5f0:	3401      	adds	r4, #1
   1e5f2:	5d0d      	ldrb	r5, [r1, r4]
   1e5f4:	42ab      	cmp	r3, r5
   1e5f6:	d0f6      	beq.n	1e5e6 <memcmp+0x6>
   1e5f8:	1b58      	subs	r0, r3, r5
   1e5fa:	bd30      	pop	{r4, r5, pc}

0001e5fc <memcpy>:
   1e5fc:	440a      	add	r2, r1
   1e5fe:	4291      	cmp	r1, r2
   1e600:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1e604:	d100      	bne.n	1e608 <memcpy+0xc>
   1e606:	4770      	bx	lr
   1e608:	b510      	push	{r4, lr}
   1e60a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e60e:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e612:	4291      	cmp	r1, r2
   1e614:	d1f9      	bne.n	1e60a <memcpy+0xe>
   1e616:	bd10      	pop	{r4, pc}

0001e618 <memset>:
   1e618:	4402      	add	r2, r0
   1e61a:	4603      	mov	r3, r0
   1e61c:	4293      	cmp	r3, r2
   1e61e:	d100      	bne.n	1e622 <memset+0xa>
   1e620:	4770      	bx	lr
   1e622:	f803 1b01 	strb.w	r1, [r3], #1
   1e626:	e7f9      	b.n	1e61c <memset+0x4>

0001e628 <__sfputc_r>:
   1e628:	6893      	ldr	r3, [r2, #8]
   1e62a:	3b01      	subs	r3, #1
   1e62c:	2b00      	cmp	r3, #0
   1e62e:	b410      	push	{r4}
   1e630:	6093      	str	r3, [r2, #8]
   1e632:	da08      	bge.n	1e646 <__sfputc_r+0x1e>
   1e634:	6994      	ldr	r4, [r2, #24]
   1e636:	42a3      	cmp	r3, r4
   1e638:	db01      	blt.n	1e63e <__sfputc_r+0x16>
   1e63a:	290a      	cmp	r1, #10
   1e63c:	d103      	bne.n	1e646 <__sfputc_r+0x1e>
   1e63e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e642:	f7f5 bbdf 	b.w	13e04 <__swbuf_r>
   1e646:	6813      	ldr	r3, [r2, #0]
   1e648:	1c58      	adds	r0, r3, #1
   1e64a:	6010      	str	r0, [r2, #0]
   1e64c:	7019      	strb	r1, [r3, #0]
   1e64e:	4608      	mov	r0, r1
   1e650:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e654:	4770      	bx	lr

0001e656 <__sfputs_r>:
   1e656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e658:	4606      	mov	r6, r0
   1e65a:	460f      	mov	r7, r1
   1e65c:	4614      	mov	r4, r2
   1e65e:	18d5      	adds	r5, r2, r3
   1e660:	42ac      	cmp	r4, r5
   1e662:	d101      	bne.n	1e668 <__sfputs_r+0x12>
   1e664:	2000      	movs	r0, #0
   1e666:	e007      	b.n	1e678 <__sfputs_r+0x22>
   1e668:	f814 1b01 	ldrb.w	r1, [r4], #1
   1e66c:	463a      	mov	r2, r7
   1e66e:	4630      	mov	r0, r6
   1e670:	f7ff ffda 	bl	1e628 <__sfputc_r>
   1e674:	1c43      	adds	r3, r0, #1
   1e676:	d1f3      	bne.n	1e660 <__sfputs_r+0xa>
   1e678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e67a <_printf_common>:
   1e67a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e67e:	4616      	mov	r6, r2
   1e680:	4699      	mov	r9, r3
   1e682:	688a      	ldr	r2, [r1, #8]
   1e684:	690b      	ldr	r3, [r1, #16]
   1e686:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1e68a:	4293      	cmp	r3, r2
   1e68c:	bfb8      	it	lt
   1e68e:	4613      	movlt	r3, r2
   1e690:	6033      	str	r3, [r6, #0]
   1e692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1e696:	4607      	mov	r7, r0
   1e698:	460c      	mov	r4, r1
   1e69a:	b10a      	cbz	r2, 1e6a0 <_printf_common+0x26>
   1e69c:	3301      	adds	r3, #1
   1e69e:	6033      	str	r3, [r6, #0]
   1e6a0:	6823      	ldr	r3, [r4, #0]
   1e6a2:	0699      	lsls	r1, r3, #26
   1e6a4:	bf42      	ittt	mi
   1e6a6:	6833      	ldrmi	r3, [r6, #0]
   1e6a8:	3302      	addmi	r3, #2
   1e6aa:	6033      	strmi	r3, [r6, #0]
   1e6ac:	6825      	ldr	r5, [r4, #0]
   1e6ae:	f015 0506 	ands.w	r5, r5, #6
   1e6b2:	d106      	bne.n	1e6c2 <_printf_common+0x48>
   1e6b4:	f104 0a19 	add.w	sl, r4, #25
   1e6b8:	68e3      	ldr	r3, [r4, #12]
   1e6ba:	6832      	ldr	r2, [r6, #0]
   1e6bc:	1a9b      	subs	r3, r3, r2
   1e6be:	42ab      	cmp	r3, r5
   1e6c0:	dc26      	bgt.n	1e710 <_printf_common+0x96>
   1e6c2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1e6c6:	1e13      	subs	r3, r2, #0
   1e6c8:	6822      	ldr	r2, [r4, #0]
   1e6ca:	bf18      	it	ne
   1e6cc:	2301      	movne	r3, #1
   1e6ce:	0692      	lsls	r2, r2, #26
   1e6d0:	d42b      	bmi.n	1e72a <_printf_common+0xb0>
   1e6d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1e6d6:	4649      	mov	r1, r9
   1e6d8:	4638      	mov	r0, r7
   1e6da:	47c0      	blx	r8
   1e6dc:	3001      	adds	r0, #1
   1e6de:	d01e      	beq.n	1e71e <_printf_common+0xa4>
   1e6e0:	6823      	ldr	r3, [r4, #0]
   1e6e2:	68e5      	ldr	r5, [r4, #12]
   1e6e4:	6832      	ldr	r2, [r6, #0]
   1e6e6:	f003 0306 	and.w	r3, r3, #6
   1e6ea:	2b04      	cmp	r3, #4
   1e6ec:	bf08      	it	eq
   1e6ee:	1aad      	subeq	r5, r5, r2
   1e6f0:	68a3      	ldr	r3, [r4, #8]
   1e6f2:	6922      	ldr	r2, [r4, #16]
   1e6f4:	bf0c      	ite	eq
   1e6f6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1e6fa:	2500      	movne	r5, #0
   1e6fc:	4293      	cmp	r3, r2
   1e6fe:	bfc4      	itt	gt
   1e700:	1a9b      	subgt	r3, r3, r2
   1e702:	18ed      	addgt	r5, r5, r3
   1e704:	2600      	movs	r6, #0
   1e706:	341a      	adds	r4, #26
   1e708:	42b5      	cmp	r5, r6
   1e70a:	d11a      	bne.n	1e742 <_printf_common+0xc8>
   1e70c:	2000      	movs	r0, #0
   1e70e:	e008      	b.n	1e722 <_printf_common+0xa8>
   1e710:	2301      	movs	r3, #1
   1e712:	4652      	mov	r2, sl
   1e714:	4649      	mov	r1, r9
   1e716:	4638      	mov	r0, r7
   1e718:	47c0      	blx	r8
   1e71a:	3001      	adds	r0, #1
   1e71c:	d103      	bne.n	1e726 <_printf_common+0xac>
   1e71e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e726:	3501      	adds	r5, #1
   1e728:	e7c6      	b.n	1e6b8 <_printf_common+0x3e>
   1e72a:	18e1      	adds	r1, r4, r3
   1e72c:	1c5a      	adds	r2, r3, #1
   1e72e:	2030      	movs	r0, #48	; 0x30
   1e730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1e734:	4422      	add	r2, r4
   1e736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1e73a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1e73e:	3302      	adds	r3, #2
   1e740:	e7c7      	b.n	1e6d2 <_printf_common+0x58>
   1e742:	2301      	movs	r3, #1
   1e744:	4622      	mov	r2, r4
   1e746:	4649      	mov	r1, r9
   1e748:	4638      	mov	r0, r7
   1e74a:	47c0      	blx	r8
   1e74c:	3001      	adds	r0, #1
   1e74e:	d0e6      	beq.n	1e71e <_printf_common+0xa4>
   1e750:	3601      	adds	r6, #1
   1e752:	e7d9      	b.n	1e708 <_printf_common+0x8e>

0001e754 <_raise_r>:
   1e754:	291f      	cmp	r1, #31
   1e756:	b538      	push	{r3, r4, r5, lr}
   1e758:	4604      	mov	r4, r0
   1e75a:	460d      	mov	r5, r1
   1e75c:	d904      	bls.n	1e768 <_raise_r+0x14>
   1e75e:	2316      	movs	r3, #22
   1e760:	6003      	str	r3, [r0, #0]
   1e762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e766:	bd38      	pop	{r3, r4, r5, pc}
   1e768:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1e76a:	b112      	cbz	r2, 1e772 <_raise_r+0x1e>
   1e76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e770:	b94b      	cbnz	r3, 1e786 <_raise_r+0x32>
   1e772:	4620      	mov	r0, r4
   1e774:	f000 f816 	bl	1e7a4 <_getpid_r>
   1e778:	462a      	mov	r2, r5
   1e77a:	4601      	mov	r1, r0
   1e77c:	4620      	mov	r0, r4
   1e77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e782:	f7f5 bb2d 	b.w	13de0 <_kill_r>
   1e786:	2b01      	cmp	r3, #1
   1e788:	d00a      	beq.n	1e7a0 <_raise_r+0x4c>
   1e78a:	1c59      	adds	r1, r3, #1
   1e78c:	d103      	bne.n	1e796 <_raise_r+0x42>
   1e78e:	2316      	movs	r3, #22
   1e790:	6003      	str	r3, [r0, #0]
   1e792:	2001      	movs	r0, #1
   1e794:	e7e7      	b.n	1e766 <_raise_r+0x12>
   1e796:	2400      	movs	r4, #0
   1e798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1e79c:	4628      	mov	r0, r5
   1e79e:	4798      	blx	r3
   1e7a0:	2000      	movs	r0, #0
   1e7a2:	e7e0      	b.n	1e766 <_raise_r+0x12>

0001e7a4 <_getpid_r>:
   1e7a4:	f7f6 bb9d 	b.w	14ee2 <_getpid>

0001e7a8 <strcpy>:
   1e7a8:	4603      	mov	r3, r0
   1e7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e7ae:	f803 2b01 	strb.w	r2, [r3], #1
   1e7b2:	2a00      	cmp	r2, #0
   1e7b4:	d1f9      	bne.n	1e7aa <strcpy+0x2>
   1e7b6:	4770      	bx	lr

0001e7b8 <strncmp>:
   1e7b8:	b510      	push	{r4, lr}
   1e7ba:	b16a      	cbz	r2, 1e7d8 <strncmp+0x20>
   1e7bc:	3901      	subs	r1, #1
   1e7be:	1884      	adds	r4, r0, r2
   1e7c0:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e7c8:	4293      	cmp	r3, r2
   1e7ca:	d103      	bne.n	1e7d4 <strncmp+0x1c>
   1e7cc:	42a0      	cmp	r0, r4
   1e7ce:	d001      	beq.n	1e7d4 <strncmp+0x1c>
   1e7d0:	2b00      	cmp	r3, #0
   1e7d2:	d1f5      	bne.n	1e7c0 <strncmp+0x8>
   1e7d4:	1a98      	subs	r0, r3, r2
   1e7d6:	bd10      	pop	{r4, pc}
   1e7d8:	4610      	mov	r0, r2
   1e7da:	e7fc      	b.n	1e7d6 <strncmp+0x1e>

0001e7dc <strncpy>:
   1e7dc:	b510      	push	{r4, lr}
   1e7de:	3901      	subs	r1, #1
   1e7e0:	4603      	mov	r3, r0
   1e7e2:	b132      	cbz	r2, 1e7f2 <strncpy+0x16>
   1e7e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e7e8:	f803 4b01 	strb.w	r4, [r3], #1
   1e7ec:	3a01      	subs	r2, #1
   1e7ee:	2c00      	cmp	r4, #0
   1e7f0:	d1f7      	bne.n	1e7e2 <strncpy+0x6>
   1e7f2:	441a      	add	r2, r3
   1e7f4:	2100      	movs	r1, #0
   1e7f6:	4293      	cmp	r3, r2
   1e7f8:	d100      	bne.n	1e7fc <strncpy+0x20>
   1e7fa:	bd10      	pop	{r4, pc}
   1e7fc:	f803 1b01 	strb.w	r1, [r3], #1
   1e800:	e7f9      	b.n	1e7f6 <strncpy+0x1a>

0001e802 <__sfmoreglue>:
   1e802:	b570      	push	{r4, r5, r6, lr}
   1e804:	1e4a      	subs	r2, r1, #1
   1e806:	2568      	movs	r5, #104	; 0x68
   1e808:	4355      	muls	r5, r2
   1e80a:	460e      	mov	r6, r1
   1e80c:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1e810:	f7f5 f816 	bl	13840 <_malloc_r>
   1e814:	4604      	mov	r4, r0
   1e816:	b140      	cbz	r0, 1e82a <__sfmoreglue+0x28>
   1e818:	2100      	movs	r1, #0
   1e81a:	e9c0 1600 	strd	r1, r6, [r0]
   1e81e:	300c      	adds	r0, #12
   1e820:	60a0      	str	r0, [r4, #8]
   1e822:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1e826:	f7ff fef7 	bl	1e618 <memset>
   1e82a:	4620      	mov	r0, r4
   1e82c:	bd70      	pop	{r4, r5, r6, pc}

0001e82e <_fwalk_reent>:
   1e82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e832:	4606      	mov	r6, r0
   1e834:	4688      	mov	r8, r1
   1e836:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1e83a:	2700      	movs	r7, #0
   1e83c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1e840:	f1b9 0901 	subs.w	r9, r9, #1
   1e844:	d505      	bpl.n	1e852 <_fwalk_reent+0x24>
   1e846:	6824      	ldr	r4, [r4, #0]
   1e848:	2c00      	cmp	r4, #0
   1e84a:	d1f7      	bne.n	1e83c <_fwalk_reent+0xe>
   1e84c:	4638      	mov	r0, r7
   1e84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e852:	89ab      	ldrh	r3, [r5, #12]
   1e854:	2b01      	cmp	r3, #1
   1e856:	d907      	bls.n	1e868 <_fwalk_reent+0x3a>
   1e858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1e85c:	3301      	adds	r3, #1
   1e85e:	d003      	beq.n	1e868 <_fwalk_reent+0x3a>
   1e860:	4629      	mov	r1, r5
   1e862:	4630      	mov	r0, r6
   1e864:	47c0      	blx	r8
   1e866:	4307      	orrs	r7, r0
   1e868:	3568      	adds	r5, #104	; 0x68
   1e86a:	e7e9      	b.n	1e840 <_fwalk_reent+0x12>

0001e86c <__retarget_lock_init_recursive>:
   1e86c:	4770      	bx	lr

0001e86e <__retarget_lock_acquire_recursive>:
   1e86e:	4770      	bx	lr

0001e870 <__retarget_lock_release_recursive>:
   1e870:	4770      	bx	lr

0001e872 <__swhatbuf_r>:
   1e872:	b570      	push	{r4, r5, r6, lr}
   1e874:	460e      	mov	r6, r1
   1e876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e87a:	2900      	cmp	r1, #0
   1e87c:	b096      	sub	sp, #88	; 0x58
   1e87e:	4614      	mov	r4, r2
   1e880:	461d      	mov	r5, r3
   1e882:	da07      	bge.n	1e894 <__swhatbuf_r+0x22>
   1e884:	2300      	movs	r3, #0
   1e886:	602b      	str	r3, [r5, #0]
   1e888:	89b3      	ldrh	r3, [r6, #12]
   1e88a:	061a      	lsls	r2, r3, #24
   1e88c:	d410      	bmi.n	1e8b0 <__swhatbuf_r+0x3e>
   1e88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e892:	e00e      	b.n	1e8b2 <__swhatbuf_r+0x40>
   1e894:	466a      	mov	r2, sp
   1e896:	f7f5 fd65 	bl	14364 <_fstat_r>
   1e89a:	2800      	cmp	r0, #0
   1e89c:	dbf2      	blt.n	1e884 <__swhatbuf_r+0x12>
   1e89e:	9a01      	ldr	r2, [sp, #4]
   1e8a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1e8a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1e8a8:	425a      	negs	r2, r3
   1e8aa:	415a      	adcs	r2, r3
   1e8ac:	602a      	str	r2, [r5, #0]
   1e8ae:	e7ee      	b.n	1e88e <__swhatbuf_r+0x1c>
   1e8b0:	2340      	movs	r3, #64	; 0x40
   1e8b2:	2000      	movs	r0, #0
   1e8b4:	6023      	str	r3, [r4, #0]
   1e8b6:	b016      	add	sp, #88	; 0x58
   1e8b8:	bd70      	pop	{r4, r5, r6, pc}

0001e8ba <_realloc_r>:
   1e8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8bc:	4607      	mov	r7, r0
   1e8be:	4614      	mov	r4, r2
   1e8c0:	460e      	mov	r6, r1
   1e8c2:	b921      	cbnz	r1, 1e8ce <_realloc_r+0x14>
   1e8c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e8c8:	4611      	mov	r1, r2
   1e8ca:	f7f4 bfb9 	b.w	13840 <_malloc_r>
   1e8ce:	b922      	cbnz	r2, 1e8da <_realloc_r+0x20>
   1e8d0:	f7f4 ff66 	bl	137a0 <_free_r>
   1e8d4:	4625      	mov	r5, r4
   1e8d6:	4628      	mov	r0, r5
   1e8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8da:	f000 f857 	bl	1e98c <_malloc_usable_size_r>
   1e8de:	42a0      	cmp	r0, r4
   1e8e0:	d20f      	bcs.n	1e902 <_realloc_r+0x48>
   1e8e2:	4621      	mov	r1, r4
   1e8e4:	4638      	mov	r0, r7
   1e8e6:	f7f4 ffab 	bl	13840 <_malloc_r>
   1e8ea:	4605      	mov	r5, r0
   1e8ec:	2800      	cmp	r0, #0
   1e8ee:	d0f2      	beq.n	1e8d6 <_realloc_r+0x1c>
   1e8f0:	4631      	mov	r1, r6
   1e8f2:	4622      	mov	r2, r4
   1e8f4:	f7ff fe82 	bl	1e5fc <memcpy>
   1e8f8:	4631      	mov	r1, r6
   1e8fa:	4638      	mov	r0, r7
   1e8fc:	f7f4 ff50 	bl	137a0 <_free_r>
   1e900:	e7e9      	b.n	1e8d6 <_realloc_r+0x1c>
   1e902:	4635      	mov	r5, r6
   1e904:	e7e7      	b.n	1e8d6 <_realloc_r+0x1c>

0001e906 <__sread>:
   1e906:	b510      	push	{r4, lr}
   1e908:	460c      	mov	r4, r1
   1e90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e90e:	f7f5 fd5d 	bl	143cc <_read_r>
   1e912:	2800      	cmp	r0, #0
   1e914:	bfab      	itete	ge
   1e916:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1e918:	89a3      	ldrhlt	r3, [r4, #12]
   1e91a:	181b      	addge	r3, r3, r0
   1e91c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1e920:	bfac      	ite	ge
   1e922:	6563      	strge	r3, [r4, #84]	; 0x54
   1e924:	81a3      	strhlt	r3, [r4, #12]
   1e926:	bd10      	pop	{r4, pc}

0001e928 <__swrite>:
   1e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e92c:	461f      	mov	r7, r3
   1e92e:	898b      	ldrh	r3, [r1, #12]
   1e930:	05db      	lsls	r3, r3, #23
   1e932:	4605      	mov	r5, r0
   1e934:	460c      	mov	r4, r1
   1e936:	4616      	mov	r6, r2
   1e938:	d505      	bpl.n	1e946 <__swrite+0x1e>
   1e93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e93e:	2302      	movs	r3, #2
   1e940:	2200      	movs	r2, #0
   1e942:	f7f5 fd31 	bl	143a8 <_lseek_r>
   1e946:	89a3      	ldrh	r3, [r4, #12]
   1e948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1e94c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1e950:	81a3      	strh	r3, [r4, #12]
   1e952:	4632      	mov	r2, r6
   1e954:	463b      	mov	r3, r7
   1e956:	4628      	mov	r0, r5
   1e958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e95c:	f7f5 bce0 	b.w	14320 <_write_r>

0001e960 <__sseek>:
   1e960:	b510      	push	{r4, lr}
   1e962:	460c      	mov	r4, r1
   1e964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e968:	f7f5 fd1e 	bl	143a8 <_lseek_r>
   1e96c:	1c43      	adds	r3, r0, #1
   1e96e:	89a3      	ldrh	r3, [r4, #12]
   1e970:	bf15      	itete	ne
   1e972:	6560      	strne	r0, [r4, #84]	; 0x54
   1e974:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1e978:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1e97c:	81a3      	strheq	r3, [r4, #12]
   1e97e:	bf18      	it	ne
   1e980:	81a3      	strhne	r3, [r4, #12]
   1e982:	bd10      	pop	{r4, pc}

0001e984 <__sclose>:
   1e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e988:	f7f5 bcdc 	b.w	14344 <_close_r>

0001e98c <_malloc_usable_size_r>:
   1e98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e990:	1f18      	subs	r0, r3, #4
   1e992:	2b00      	cmp	r3, #0
   1e994:	bfbc      	itt	lt
   1e996:	580b      	ldrlt	r3, [r1, r0]
   1e998:	18c0      	addlt	r0, r0, r3
   1e99a:	4770      	bx	lr

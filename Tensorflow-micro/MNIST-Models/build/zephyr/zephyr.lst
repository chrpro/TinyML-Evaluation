
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20010de0 	.word	0x20010de0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00003121 	.word	0x00003121
   8:	00014ec1 	.word	0x00014ec1
   c:	00003151 	.word	0x00003151
		if (fdtable[fd].obj == NULL) {
  10:	00003151 	.word	0x00003151
  14:	00003151 	.word	0x00003151
  18:	00003151 	.word	0x00003151
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00002ef5 	.word	0x00002ef5
  30:	00003151 	.word	0x00003151
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00002ead 	.word	0x00002ead
  3c:	00014df7 	.word	0x00014df7

00000040 <_irq_vector_table>:
  40:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  60:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  70:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  80:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  90:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  a0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  b0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  c0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  d0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  e0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..
  f0:	000030e1 000030e1 000030e1 000030e1     .0...0...0...0..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b96e 	b.w	494 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f806 	bl	1d0 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__udivmoddi4>:
     1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1d4:	9d08      	ldr	r5, [sp, #32]
     1d6:	4604      	mov	r4, r0
     1d8:	468c      	mov	ip, r1
     1da:	2b00      	cmp	r3, #0
     1dc:	f040 8083 	bne.w	2e6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xe6>
     1e0:	428a      	cmp	r2, r1
     1e2:	4617      	mov	r7, r2
     1e4:	d947      	bls.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     1e6:	fab2 f282 	clz	r2, r2
     1ea:	b142      	cbz	r2, 1fe <__udivmoddi4+0x2e>
     1ec:	f1c2 0020 	rsb	r0, r2, #32
     1f0:	fa24 f000 	lsr.w	r0, r4, r0
     1f4:	4091      	lsls	r1, r2
     1f6:	4097      	lsls	r7, r2
     1f8:	ea40 0c01 	orr.w	ip, r0, r1
     1fc:	4094      	lsls	r4, r2
     1fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
     202:	0c23      	lsrs	r3, r4, #16
     204:	fbbc f6f8 	udiv	r6, ip, r8
     208:	fa1f fe87 	uxth.w	lr, r7
     20c:	fb08 c116 	mls	r1, r8, r6, ip
     210:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     214:	fb06 f10e 	mul.w	r1, r6, lr
     218:	4299      	cmp	r1, r3
     21a:	d909      	bls.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     21c:	18fb      	adds	r3, r7, r3
     21e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     222:	f080 8119 	bcs.w	458 <CONFIG_FLASH_SIZE+0x58>
     226:	4299      	cmp	r1, r3
     228:	f240 8116 	bls.w	458 <CONFIG_FLASH_SIZE+0x58>
     22c:	3e02      	subs	r6, #2
     22e:	443b      	add	r3, r7
     230:	1a5b      	subs	r3, r3, r1
     232:	b2a4      	uxth	r4, r4
     234:	fbb3 f0f8 	udiv	r0, r3, r8
     238:	fb08 3310 	mls	r3, r8, r0, r3
     23c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     240:	fb00 fe0e 	mul.w	lr, r0, lr
     244:	45a6      	cmp	lr, r4
     246:	d909      	bls.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     248:	193c      	adds	r4, r7, r4
     24a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     24e:	f080 8105 	bcs.w	45c <CONFIG_FLASH_SIZE+0x5c>
     252:	45a6      	cmp	lr, r4
     254:	f240 8102 	bls.w	45c <CONFIG_FLASH_SIZE+0x5c>
     258:	3802      	subs	r0, #2
     25a:	443c      	add	r4, r7
     25c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     260:	eba4 040e 	sub.w	r4, r4, lr
     264:	2600      	movs	r6, #0
     266:	b11d      	cbz	r5, 270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     268:	40d4      	lsrs	r4, r2
     26a:	2300      	movs	r3, #0
     26c:	e9c5 4300 	strd	r4, r3, [r5]
     270:	4631      	mov	r1, r6
     272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     276:	b902      	cbnz	r2, 27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     278:	deff      	udf	#255	; 0xff
     27a:	fab2 f282 	clz	r2, r2
     27e:	2a00      	cmp	r2, #0
     280:	d150      	bne.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     282:	1bcb      	subs	r3, r1, r7
     284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     288:	fa1f f887 	uxth.w	r8, r7
     28c:	2601      	movs	r6, #1
     28e:	fbb3 fcfe 	udiv	ip, r3, lr
     292:	0c21      	lsrs	r1, r4, #16
     294:	fb0e 331c 	mls	r3, lr, ip, r3
     298:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     29c:	fb08 f30c 	mul.w	r3, r8, ip
     2a0:	428b      	cmp	r3, r1
     2a2:	d907      	bls.n	2b4 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb4>
     2a4:	1879      	adds	r1, r7, r1
     2a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2aa:	d202      	bcs.n	2b2 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb2>
     2ac:	428b      	cmp	r3, r1
     2ae:	f200 80e9 	bhi.w	484 <CONFIG_FLASH_SIZE+0x84>
     2b2:	4684      	mov	ip, r0
     2b4:	1ac9      	subs	r1, r1, r3
     2b6:	b2a3      	uxth	r3, r4
     2b8:	fbb1 f0fe 	udiv	r0, r1, lr
     2bc:	fb0e 1110 	mls	r1, lr, r0, r1
     2c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2c4:	fb08 f800 	mul.w	r8, r8, r0
     2c8:	45a0      	cmp	r8, r4
     2ca:	d907      	bls.n	2dc <CONFIG_UART_MUX_RX_STACK_SIZE+0xdc>
     2cc:	193c      	adds	r4, r7, r4
     2ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2d2:	d202      	bcs.n	2da <CONFIG_UART_MUX_RX_STACK_SIZE+0xda>
     2d4:	45a0      	cmp	r8, r4
     2d6:	f200 80d9 	bhi.w	48c <CONFIG_FLASH_SIZE+0x8c>
     2da:	4618      	mov	r0, r3
     2dc:	eba4 0408 	sub.w	r4, r4, r8
     2e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2e4:	e7bf      	b.n	266 <CONFIG_UART_MUX_RX_STACK_SIZE+0x66>
     2e6:	428b      	cmp	r3, r1
     2e8:	d909      	bls.n	2fe <CONFIG_UART_MUX_RX_STACK_SIZE+0xfe>
     2ea:	2d00      	cmp	r5, #0
     2ec:	f000 80b1 	beq.w	452 <CONFIG_FLASH_SIZE+0x52>
     2f0:	2600      	movs	r6, #0
     2f2:	e9c5 0100 	strd	r0, r1, [r5]
     2f6:	4630      	mov	r0, r6
     2f8:	4631      	mov	r1, r6
     2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2fe:	fab3 f683 	clz	r6, r3
     302:	2e00      	cmp	r6, #0
     304:	d14a      	bne.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     306:	428b      	cmp	r3, r1
     308:	d302      	bcc.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     30a:	4282      	cmp	r2, r0
     30c:	f200 80b8 	bhi.w	480 <CONFIG_FLASH_SIZE+0x80>
     310:	1a84      	subs	r4, r0, r2
     312:	eb61 0103 	sbc.w	r1, r1, r3
     316:	2001      	movs	r0, #1
     318:	468c      	mov	ip, r1
     31a:	2d00      	cmp	r5, #0
     31c:	d0a8      	beq.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     31e:	e9c5 4c00 	strd	r4, ip, [r5]
     322:	e7a5      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     324:	f1c2 0320 	rsb	r3, r2, #32
     328:	fa20 f603 	lsr.w	r6, r0, r3
     32c:	4097      	lsls	r7, r2
     32e:	fa01 f002 	lsl.w	r0, r1, r2
     332:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     336:	40d9      	lsrs	r1, r3
     338:	4330      	orrs	r0, r6
     33a:	0c03      	lsrs	r3, r0, #16
     33c:	fbb1 f6fe 	udiv	r6, r1, lr
     340:	fa1f f887 	uxth.w	r8, r7
     344:	fb0e 1116 	mls	r1, lr, r6, r1
     348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     34c:	fb06 f108 	mul.w	r1, r6, r8
     350:	4299      	cmp	r1, r3
     352:	fa04 f402 	lsl.w	r4, r4, r2
     356:	d909      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     358:	18fb      	adds	r3, r7, r3
     35a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     35e:	f080 808d 	bcs.w	47c <CONFIG_FLASH_SIZE+0x7c>
     362:	4299      	cmp	r1, r3
     364:	f240 808a 	bls.w	47c <CONFIG_FLASH_SIZE+0x7c>
     368:	3e02      	subs	r6, #2
     36a:	443b      	add	r3, r7
     36c:	1a5b      	subs	r3, r3, r1
     36e:	b281      	uxth	r1, r0
     370:	fbb3 f0fe 	udiv	r0, r3, lr
     374:	fb0e 3310 	mls	r3, lr, r0, r3
     378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     37c:	fb00 f308 	mul.w	r3, r0, r8
     380:	428b      	cmp	r3, r1
     382:	d907      	bls.n	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     384:	1879      	adds	r1, r7, r1
     386:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     38a:	d273      	bcs.n	474 <CONFIG_FLASH_SIZE+0x74>
     38c:	428b      	cmp	r3, r1
     38e:	d971      	bls.n	474 <CONFIG_FLASH_SIZE+0x74>
     390:	3802      	subs	r0, #2
     392:	4439      	add	r1, r7
     394:	1acb      	subs	r3, r1, r3
     396:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
     39a:	e778      	b.n	28e <CONFIG_UART_MUX_RX_STACK_SIZE+0x8e>
     39c:	f1c6 0c20 	rsb	ip, r6, #32
     3a0:	fa03 f406 	lsl.w	r4, r3, r6
     3a4:	fa22 f30c 	lsr.w	r3, r2, ip
     3a8:	431c      	orrs	r4, r3
     3aa:	fa20 f70c 	lsr.w	r7, r0, ip
     3ae:	fa01 f306 	lsl.w	r3, r1, r6
     3b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     3b6:	fa21 f10c 	lsr.w	r1, r1, ip
     3ba:	431f      	orrs	r7, r3
     3bc:	0c3b      	lsrs	r3, r7, #16
     3be:	fbb1 f9fe 	udiv	r9, r1, lr
     3c2:	fa1f f884 	uxth.w	r8, r4
     3c6:	fb0e 1119 	mls	r1, lr, r9, r1
     3ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     3ce:	fb09 fa08 	mul.w	sl, r9, r8
     3d2:	458a      	cmp	sl, r1
     3d4:	fa02 f206 	lsl.w	r2, r2, r6
     3d8:	fa00 f306 	lsl.w	r3, r0, r6
     3dc:	d908      	bls.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     3de:	1861      	adds	r1, r4, r1
     3e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3e4:	d248      	bcs.n	478 <CONFIG_FLASH_SIZE+0x78>
     3e6:	458a      	cmp	sl, r1
     3e8:	d946      	bls.n	478 <CONFIG_FLASH_SIZE+0x78>
     3ea:	f1a9 0902 	sub.w	r9, r9, #2
     3ee:	4421      	add	r1, r4
     3f0:	eba1 010a 	sub.w	r1, r1, sl
     3f4:	b2bf      	uxth	r7, r7
     3f6:	fbb1 f0fe 	udiv	r0, r1, lr
     3fa:	fb0e 1110 	mls	r1, lr, r0, r1
     3fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
     402:	fb00 f808 	mul.w	r8, r0, r8
     406:	45b8      	cmp	r8, r7
     408:	d907      	bls.n	41a <CONFIG_FLASH_SIZE+0x1a>
     40a:	19e7      	adds	r7, r4, r7
     40c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     410:	d22e      	bcs.n	470 <CONFIG_FLASH_SIZE+0x70>
     412:	45b8      	cmp	r8, r7
     414:	d92c      	bls.n	470 <CONFIG_FLASH_SIZE+0x70>
     416:	3802      	subs	r0, #2
     418:	4427      	add	r7, r4
     41a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     41e:	eba7 0708 	sub.w	r7, r7, r8
     422:	fba0 8902 	umull	r8, r9, r0, r2
     426:	454f      	cmp	r7, r9
     428:	46c6      	mov	lr, r8
     42a:	4649      	mov	r1, r9
     42c:	d31a      	bcc.n	464 <CONFIG_FLASH_SIZE+0x64>
     42e:	d017      	beq.n	460 <CONFIG_FLASH_SIZE+0x60>
     430:	b15d      	cbz	r5, 44a <CONFIG_FLASH_SIZE+0x4a>
     432:	ebb3 020e 	subs.w	r2, r3, lr
     436:	eb67 0701 	sbc.w	r7, r7, r1
     43a:	fa07 fc0c 	lsl.w	ip, r7, ip
     43e:	40f2      	lsrs	r2, r6
     440:	ea4c 0202 	orr.w	r2, ip, r2
     444:	40f7      	lsrs	r7, r6
     446:	e9c5 2700 	strd	r2, r7, [r5]
     44a:	2600      	movs	r6, #0
     44c:	4631      	mov	r1, r6
     44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     452:	462e      	mov	r6, r5
     454:	4628      	mov	r0, r5
     456:	e70b      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     458:	4606      	mov	r6, r0
     45a:	e6e9      	b.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     45c:	4618      	mov	r0, r3
     45e:	e6fd      	b.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     460:	4543      	cmp	r3, r8
     462:	d2e5      	bcs.n	430 <CONFIG_FLASH_SIZE+0x30>
     464:	ebb8 0e02 	subs.w	lr, r8, r2
     468:	eb69 0104 	sbc.w	r1, r9, r4
     46c:	3801      	subs	r0, #1
     46e:	e7df      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     470:	4608      	mov	r0, r1
     472:	e7d2      	b.n	41a <CONFIG_FLASH_SIZE+0x1a>
     474:	4660      	mov	r0, ip
     476:	e78d      	b.n	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     478:	4681      	mov	r9, r0
     47a:	e7b9      	b.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     47c:	4666      	mov	r6, ip
     47e:	e775      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     480:	4630      	mov	r0, r6
     482:	e74a      	b.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     484:	f1ac 0c02 	sub.w	ip, ip, #2
     488:	4439      	add	r1, r7
     48a:	e713      	b.n	2b4 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb4>
     48c:	3802      	subs	r0, #2
     48e:	443c      	add	r4, r7
     490:	e724      	b.n	2dc <CONFIG_UART_MUX_RX_STACK_SIZE+0xdc>
     492:	bf00      	nop

00000494 <__aeabi_idiv0>:
     494:	4770      	bx	lr
     496:	bf00      	nop

00000498 <TfLiteIntArrayGetSizeInBytes>:
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	3301      	adds	r3, #1
     4a4:	009b      	lsls	r3, r3, #2
     4a6:	4618      	mov	r0, r3
     4a8:	370c      	adds	r7, #12
     4aa:	46bd      	mov	sp, r7
     4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b0:	4770      	bx	lr

000004b2 <TfLiteIntArrayEqual>:
     4b2:	b580      	push	{r7, lr}
     4b4:	b082      	sub	sp, #8
     4b6:	af00      	add	r7, sp, #0
     4b8:	6078      	str	r0, [r7, #4]
     4ba:	6039      	str	r1, [r7, #0]
     4bc:	687a      	ldr	r2, [r7, #4]
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	429a      	cmp	r2, r3
     4c2:	d101      	bne.n	4c8 <TfLiteIntArrayEqual+0x16>
     4c4:	2301      	movs	r3, #1
     4c6:	e010      	b.n	4ea <TfLiteIntArrayEqual+0x38>
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d002      	beq.n	4d4 <TfLiteIntArrayEqual+0x22>
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d101      	bne.n	4d8 <TfLiteIntArrayEqual+0x26>
     4d4:	2300      	movs	r3, #0
     4d6:	e008      	b.n	4ea <TfLiteIntArrayEqual+0x38>
     4d8:	683b      	ldr	r3, [r7, #0]
     4da:	6819      	ldr	r1, [r3, #0]
     4dc:	683b      	ldr	r3, [r7, #0]
     4de:	3304      	adds	r3, #4
     4e0:	461a      	mov	r2, r3
     4e2:	6878      	ldr	r0, [r7, #4]
     4e4:	f000 f805 	bl	4f2 <TfLiteIntArrayEqualsArray>
     4e8:	4603      	mov	r3, r0
     4ea:	4618      	mov	r0, r3
     4ec:	3708      	adds	r7, #8
     4ee:	46bd      	mov	sp, r7
     4f0:	bd80      	pop	{r7, pc}

000004f2 <TfLiteIntArrayEqualsArray>:
     4f2:	b480      	push	{r7}
     4f4:	b087      	sub	sp, #28
     4f6:	af00      	add	r7, sp, #0
     4f8:	60f8      	str	r0, [r7, #12]
     4fa:	60b9      	str	r1, [r7, #8]
     4fc:	607a      	str	r2, [r7, #4]
     4fe:	68fb      	ldr	r3, [r7, #12]
     500:	2b00      	cmp	r3, #0
     502:	d106      	bne.n	512 <TfLiteIntArrayEqualsArray+0x20>
     504:	68bb      	ldr	r3, [r7, #8]
     506:	2b00      	cmp	r3, #0
     508:	bf0c      	ite	eq
     50a:	2301      	moveq	r3, #1
     50c:	2300      	movne	r3, #0
     50e:	b2db      	uxtb	r3, r3
     510:	e020      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     512:	68fb      	ldr	r3, [r7, #12]
     514:	681b      	ldr	r3, [r3, #0]
     516:	68ba      	ldr	r2, [r7, #8]
     518:	429a      	cmp	r2, r3
     51a:	d001      	beq.n	520 <TfLiteIntArrayEqualsArray+0x2e>
     51c:	2300      	movs	r3, #0
     51e:	e019      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     520:	2300      	movs	r3, #0
     522:	617b      	str	r3, [r7, #20]
     524:	e010      	b.n	548 <TfLiteIntArrayEqualsArray+0x56>
     526:	68fa      	ldr	r2, [r7, #12]
     528:	697b      	ldr	r3, [r7, #20]
     52a:	009b      	lsls	r3, r3, #2
     52c:	4413      	add	r3, r2
     52e:	685a      	ldr	r2, [r3, #4]
     530:	697b      	ldr	r3, [r7, #20]
     532:	009b      	lsls	r3, r3, #2
     534:	6879      	ldr	r1, [r7, #4]
     536:	440b      	add	r3, r1
     538:	681b      	ldr	r3, [r3, #0]
     53a:	429a      	cmp	r2, r3
     53c:	d001      	beq.n	542 <TfLiteIntArrayEqualsArray+0x50>
     53e:	2300      	movs	r3, #0
     540:	e008      	b.n	554 <TfLiteIntArrayEqualsArray+0x62>
     542:	697b      	ldr	r3, [r7, #20]
     544:	3301      	adds	r3, #1
     546:	617b      	str	r3, [r7, #20]
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	697a      	ldr	r2, [r7, #20]
     54e:	429a      	cmp	r2, r3
     550:	dbe9      	blt.n	526 <TfLiteIntArrayEqualsArray+0x34>
     552:	2301      	movs	r3, #1
     554:	4618      	mov	r0, r3
     556:	371c      	adds	r7, #28
     558:	46bd      	mov	sp, r7
     55a:	f85d 7b04 	ldr.w	r7, [sp], #4
     55e:	4770      	bx	lr

00000560 <TfLiteIntArrayCreate>:
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6878      	ldr	r0, [r7, #4]
     56a:	f7ff ff95 	bl	498 <TfLiteIntArrayGetSizeInBytes>
     56e:	4603      	mov	r3, r0
     570:	4618      	mov	r0, r3
     572:	f013 f915 	bl	137a0 <malloc>
     576:	4603      	mov	r3, r0
     578:	60fb      	str	r3, [r7, #12]
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	687a      	ldr	r2, [r7, #4]
     57e:	601a      	str	r2, [r3, #0]
     580:	68fb      	ldr	r3, [r7, #12]
     582:	4618      	mov	r0, r3
     584:	3710      	adds	r7, #16
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}

0000058a <TfLiteIntArrayCopy>:
     58a:	b580      	push	{r7, lr}
     58c:	b084      	sub	sp, #16
     58e:	af00      	add	r7, sp, #0
     590:	6078      	str	r0, [r7, #4]
     592:	687b      	ldr	r3, [r7, #4]
     594:	2b00      	cmp	r3, #0
     596:	d101      	bne.n	59c <TfLiteIntArrayCopy+0x12>
     598:	2300      	movs	r3, #0
     59a:	e013      	b.n	5c4 <TfLiteIntArrayCopy+0x3a>
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	4618      	mov	r0, r3
     5a2:	f7ff ffdd 	bl	560 <TfLiteIntArrayCreate>
     5a6:	60f8      	str	r0, [r7, #12]
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d009      	beq.n	5c2 <TfLiteIntArrayCopy+0x38>
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	1d18      	adds	r0, r3, #4
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	1d19      	adds	r1, r3, #4
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	681b      	ldr	r3, [r3, #0]
     5ba:	009b      	lsls	r3, r3, #2
     5bc:	461a      	mov	r2, r3
     5be:	f01e f82e 	bl	1e61e <memcpy>
     5c2:	68fb      	ldr	r3, [r7, #12]
     5c4:	4618      	mov	r0, r3
     5c6:	3710      	adds	r7, #16
     5c8:	46bd      	mov	sp, r7
     5ca:	bd80      	pop	{r7, pc}

000005cc <TfLiteIntArrayFree>:
     5cc:	b580      	push	{r7, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
     5d4:	6878      	ldr	r0, [r7, #4]
     5d6:	f013 f8eb 	bl	137b0 <free>
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bd80      	pop	{r7, pc}

000005e2 <TfLiteFloatArrayGetSizeInBytes>:
     5e2:	b480      	push	{r7}
     5e4:	b083      	sub	sp, #12
     5e6:	af00      	add	r7, sp, #0
     5e8:	6078      	str	r0, [r7, #4]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	3301      	adds	r3, #1
     5ee:	009b      	lsls	r3, r3, #2
     5f0:	4618      	mov	r0, r3
     5f2:	370c      	adds	r7, #12
     5f4:	46bd      	mov	sp, r7
     5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     5fa:	4770      	bx	lr

000005fc <TfLiteFloatArrayCreate>:
     5fc:	b580      	push	{r7, lr}
     5fe:	b084      	sub	sp, #16
     600:	af00      	add	r7, sp, #0
     602:	6078      	str	r0, [r7, #4]
     604:	6878      	ldr	r0, [r7, #4]
     606:	f7ff ffec 	bl	5e2 <TfLiteFloatArrayGetSizeInBytes>
     60a:	4603      	mov	r3, r0
     60c:	4618      	mov	r0, r3
     60e:	f013 f8c7 	bl	137a0 <malloc>
     612:	4603      	mov	r3, r0
     614:	60fb      	str	r3, [r7, #12]
     616:	68fb      	ldr	r3, [r7, #12]
     618:	687a      	ldr	r2, [r7, #4]
     61a:	601a      	str	r2, [r3, #0]
     61c:	68fb      	ldr	r3, [r7, #12]
     61e:	4618      	mov	r0, r3
     620:	3710      	adds	r7, #16
     622:	46bd      	mov	sp, r7
     624:	bd80      	pop	{r7, pc}

00000626 <TfLiteFloatArrayFree>:
     626:	b580      	push	{r7, lr}
     628:	b082      	sub	sp, #8
     62a:	af00      	add	r7, sp, #0
     62c:	6078      	str	r0, [r7, #4]
     62e:	6878      	ldr	r0, [r7, #4]
     630:	f013 f8be 	bl	137b0 <free>
     634:	bf00      	nop
     636:	3708      	adds	r7, #8
     638:	46bd      	mov	sp, r7
     63a:	bd80      	pop	{r7, pc}

0000063c <TfLiteTensorDataFree>:
     63c:	b580      	push	{r7, lr}
     63e:	b082      	sub	sp, #8
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
     644:	687b      	ldr	r3, [r7, #4]
     646:	7d1b      	ldrb	r3, [r3, #20]
     648:	2b04      	cmp	r3, #4
     64a:	d003      	beq.n	654 <TfLiteTensorDataFree+0x18>
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	7d1b      	ldrb	r3, [r3, #20]
     650:	2b05      	cmp	r3, #5
     652:	d104      	bne.n	65e <TfLiteTensorDataFree+0x22>
     654:	687b      	ldr	r3, [r7, #4]
     656:	685b      	ldr	r3, [r3, #4]
     658:	4618      	mov	r0, r3
     65a:	f013 f8a9 	bl	137b0 <free>
     65e:	687b      	ldr	r3, [r7, #4]
     660:	2200      	movs	r2, #0
     662:	605a      	str	r2, [r3, #4]
     664:	bf00      	nop
     666:	3708      	adds	r7, #8
     668:	46bd      	mov	sp, r7
     66a:	bd80      	pop	{r7, pc}

0000066c <TfLiteQuantizationFree>:
     66c:	b580      	push	{r7, lr}
     66e:	b084      	sub	sp, #16
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
     674:	687b      	ldr	r3, [r7, #4]
     676:	781b      	ldrb	r3, [r3, #0]
     678:	2b01      	cmp	r3, #1
     67a:	d11d      	bne.n	6b8 <TfLiteQuantizationFree+0x4c>
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	685b      	ldr	r3, [r3, #4]
     680:	60fb      	str	r3, [r7, #12]
     682:	68fb      	ldr	r3, [r7, #12]
     684:	681b      	ldr	r3, [r3, #0]
     686:	2b00      	cmp	r3, #0
     688:	d007      	beq.n	69a <TfLiteQuantizationFree+0x2e>
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	4618      	mov	r0, r3
     690:	f7ff ffc9 	bl	626 <TfLiteFloatArrayFree>
     694:	68fb      	ldr	r3, [r7, #12]
     696:	2200      	movs	r2, #0
     698:	601a      	str	r2, [r3, #0]
     69a:	68fb      	ldr	r3, [r7, #12]
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	2b00      	cmp	r3, #0
     6a0:	d007      	beq.n	6b2 <TfLiteQuantizationFree+0x46>
     6a2:	68fb      	ldr	r3, [r7, #12]
     6a4:	685b      	ldr	r3, [r3, #4]
     6a6:	4618      	mov	r0, r3
     6a8:	f7ff ff90 	bl	5cc <TfLiteIntArrayFree>
     6ac:	68fb      	ldr	r3, [r7, #12]
     6ae:	2200      	movs	r2, #0
     6b0:	605a      	str	r2, [r3, #4]
     6b2:	68f8      	ldr	r0, [r7, #12]
     6b4:	f013 f87c 	bl	137b0 <free>
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	2200      	movs	r2, #0
     6bc:	605a      	str	r2, [r3, #4]
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	2200      	movs	r2, #0
     6c2:	701a      	strb	r2, [r3, #0]
     6c4:	bf00      	nop
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}

000006cc <TfLiteSparsityFree>:
     6cc:	b590      	push	{r4, r7, lr}
     6ce:	b089      	sub	sp, #36	; 0x24
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d04b      	beq.n	772 <TfLiteSparsityFree+0xa6>
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	2b00      	cmp	r3, #0
     6e0:	d007      	beq.n	6f2 <TfLiteSparsityFree+0x26>
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	4618      	mov	r0, r3
     6e8:	f7ff ff70 	bl	5cc <TfLiteIntArrayFree>
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2200      	movs	r2, #0
     6f0:	601a      	str	r2, [r3, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	685b      	ldr	r3, [r3, #4]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d007      	beq.n	70a <TfLiteSparsityFree+0x3e>
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	685b      	ldr	r3, [r3, #4]
     6fe:	4618      	mov	r0, r3
     700:	f7ff ff64 	bl	5cc <TfLiteIntArrayFree>
     704:	687b      	ldr	r3, [r7, #4]
     706:	2200      	movs	r2, #0
     708:	605a      	str	r2, [r3, #4]
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	689b      	ldr	r3, [r3, #8]
     70e:	2b00      	cmp	r3, #0
     710:	d02b      	beq.n	76a <TfLiteSparsityFree+0x9e>
     712:	2300      	movs	r3, #0
     714:	61fb      	str	r3, [r7, #28]
     716:	e01b      	b.n	750 <TfLiteSparsityFree+0x84>
     718:	687b      	ldr	r3, [r7, #4]
     71a:	689a      	ldr	r2, [r3, #8]
     71c:	69fb      	ldr	r3, [r7, #28]
     71e:	011b      	lsls	r3, r3, #4
     720:	4413      	add	r3, r2
     722:	f107 040c 	add.w	r4, r7, #12
     726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     72c:	7b3b      	ldrb	r3, [r7, #12]
     72e:	2b01      	cmp	r3, #1
     730:	d10b      	bne.n	74a <TfLiteSparsityFree+0x7e>
     732:	697b      	ldr	r3, [r7, #20]
     734:	4618      	mov	r0, r3
     736:	f7ff ff49 	bl	5cc <TfLiteIntArrayFree>
     73a:	2300      	movs	r3, #0
     73c:	617b      	str	r3, [r7, #20]
     73e:	69bb      	ldr	r3, [r7, #24]
     740:	4618      	mov	r0, r3
     742:	f7ff ff43 	bl	5cc <TfLiteIntArrayFree>
     746:	2300      	movs	r3, #0
     748:	61bb      	str	r3, [r7, #24]
     74a:	69fb      	ldr	r3, [r7, #28]
     74c:	3301      	adds	r3, #1
     74e:	61fb      	str	r3, [r7, #28]
     750:	687b      	ldr	r3, [r7, #4]
     752:	68db      	ldr	r3, [r3, #12]
     754:	69fa      	ldr	r2, [r7, #28]
     756:	429a      	cmp	r2, r3
     758:	dbde      	blt.n	718 <TfLiteSparsityFree+0x4c>
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	689b      	ldr	r3, [r3, #8]
     75e:	4618      	mov	r0, r3
     760:	f013 f826 	bl	137b0 <free>
     764:	687b      	ldr	r3, [r7, #4]
     766:	2200      	movs	r2, #0
     768:	609a      	str	r2, [r3, #8]
     76a:	6878      	ldr	r0, [r7, #4]
     76c:	f013 f820 	bl	137b0 <free>
     770:	e000      	b.n	774 <TfLiteSparsityFree+0xa8>
     772:	bf00      	nop
     774:	3724      	adds	r7, #36	; 0x24
     776:	46bd      	mov	sp, r7
     778:	bd90      	pop	{r4, r7, pc}

0000077a <TfLiteTensorFree>:
     77a:	b580      	push	{r7, lr}
     77c:	b082      	sub	sp, #8
     77e:	af00      	add	r7, sp, #0
     780:	6078      	str	r0, [r7, #4]
     782:	6878      	ldr	r0, [r7, #4]
     784:	f7ff ff5a 	bl	63c <TfLiteTensorDataFree>
     788:	687b      	ldr	r3, [r7, #4]
     78a:	689b      	ldr	r3, [r3, #8]
     78c:	2b00      	cmp	r3, #0
     78e:	d004      	beq.n	79a <TfLiteTensorFree+0x20>
     790:	687b      	ldr	r3, [r7, #4]
     792:	689b      	ldr	r3, [r3, #8]
     794:	4618      	mov	r0, r3
     796:	f7ff ff19 	bl	5cc <TfLiteIntArrayFree>
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	2200      	movs	r2, #0
     79e:	609a      	str	r2, [r3, #8]
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     7a4:	2b00      	cmp	r3, #0
     7a6:	d004      	beq.n	7b2 <TfLiteTensorFree+0x38>
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     7ac:	4618      	mov	r0, r3
     7ae:	f7ff ff0d 	bl	5cc <TfLiteIntArrayFree>
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	2200      	movs	r2, #0
     7b6:	63da      	str	r2, [r3, #60]	; 0x3c
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	3330      	adds	r3, #48	; 0x30
     7bc:	4618      	mov	r0, r3
     7be:	f7ff ff55 	bl	66c <TfLiteQuantizationFree>
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     7c6:	4618      	mov	r0, r3
     7c8:	f7ff ff80 	bl	6cc <TfLiteSparsityFree>
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	2200      	movs	r2, #0
     7d0:	639a      	str	r2, [r3, #56]	; 0x38
     7d2:	bf00      	nop
     7d4:	3708      	adds	r7, #8
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}

000007da <TfLiteTensorReset>:
     7da:	b082      	sub	sp, #8
     7dc:	b580      	push	{r7, lr}
     7de:	b084      	sub	sp, #16
     7e0:	af00      	add	r7, sp, #0
     7e2:	60b9      	str	r1, [r7, #8]
     7e4:	607a      	str	r2, [r7, #4]
     7e6:	61fb      	str	r3, [r7, #28]
     7e8:	4603      	mov	r3, r0
     7ea:	73fb      	strb	r3, [r7, #15]
     7ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     7ee:	f7ff ffc4 	bl	77a <TfLiteTensorFree>
     7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7f4:	7bfa      	ldrb	r2, [r7, #15]
     7f6:	701a      	strb	r2, [r3, #0]
     7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7fa:	68ba      	ldr	r2, [r7, #8]
     7fc:	621a      	str	r2, [r3, #32]
     7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     800:	687a      	ldr	r2, [r7, #4]
     802:	609a      	str	r2, [r3, #8]
     804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     806:	330c      	adds	r3, #12
     808:	f107 021c 	add.w	r2, r7, #28
     80c:	e892 0003 	ldmia.w	r2, {r0, r1}
     810:	e883 0003 	stmia.w	r3, {r0, r1}
     814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     818:	605a      	str	r2, [r3, #4]
     81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     81e:	619a      	str	r2, [r3, #24]
     820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     822:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
     826:	751a      	strb	r2, [r3, #20]
     828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     82c:	61da      	str	r2, [r3, #28]
     82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     830:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
     834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
     838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     83a:	2200      	movs	r2, #0
     83c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     842:	2200      	movs	r2, #0
     844:	635a      	str	r2, [r3, #52]	; 0x34
     846:	bf00      	nop
     848:	3710      	adds	r7, #16
     84a:	46bd      	mov	sp, r7
     84c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     850:	b002      	add	sp, #8
     852:	4770      	bx	lr

00000854 <TfLiteTensorRealloc>:
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
     85c:	6039      	str	r1, [r7, #0]
     85e:	683b      	ldr	r3, [r7, #0]
     860:	7d1b      	ldrb	r3, [r3, #20]
     862:	2b04      	cmp	r3, #4
     864:	d003      	beq.n	86e <TfLiteTensorRealloc+0x1a>
     866:	683b      	ldr	r3, [r7, #0]
     868:	7d1b      	ldrb	r3, [r3, #20]
     86a:	2b05      	cmp	r3, #5
     86c:	d11d      	bne.n	8aa <TfLiteTensorRealloc+0x56>
     86e:	683b      	ldr	r3, [r7, #0]
     870:	685b      	ldr	r3, [r3, #4]
     872:	2b00      	cmp	r3, #0
     874:	d107      	bne.n	886 <TfLiteTensorRealloc+0x32>
     876:	6878      	ldr	r0, [r7, #4]
     878:	f012 ff92 	bl	137a0 <malloc>
     87c:	4603      	mov	r3, r0
     87e:	461a      	mov	r2, r3
     880:	683b      	ldr	r3, [r7, #0]
     882:	605a      	str	r2, [r3, #4]
     884:	e00d      	b.n	8a2 <TfLiteTensorRealloc+0x4e>
     886:	683b      	ldr	r3, [r7, #0]
     888:	699b      	ldr	r3, [r3, #24]
     88a:	687a      	ldr	r2, [r7, #4]
     88c:	429a      	cmp	r2, r3
     88e:	d908      	bls.n	8a2 <TfLiteTensorRealloc+0x4e>
     890:	683b      	ldr	r3, [r7, #0]
     892:	685b      	ldr	r3, [r3, #4]
     894:	6879      	ldr	r1, [r7, #4]
     896:	4618      	mov	r0, r3
     898:	f013 fa92 	bl	13dc0 <realloc>
     89c:	4602      	mov	r2, r0
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	605a      	str	r2, [r3, #4]
     8a2:	683b      	ldr	r3, [r7, #0]
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	619a      	str	r2, [r3, #24]
     8a8:	e000      	b.n	8ac <TfLiteTensorRealloc+0x58>
     8aa:	bf00      	nop
     8ac:	3708      	adds	r7, #8
     8ae:	46bd      	mov	sp, r7
     8b0:	bd80      	pop	{r7, pc}

000008b2 <TfLiteTypeGetName>:
     8b2:	b480      	push	{r7}
     8b4:	b083      	sub	sp, #12
     8b6:	af00      	add	r7, sp, #0
     8b8:	4603      	mov	r3, r0
     8ba:	71fb      	strb	r3, [r7, #7]
     8bc:	79fb      	ldrb	r3, [r7, #7]
     8be:	2b0b      	cmp	r3, #11
     8c0:	d832      	bhi.n	928 <TfLiteTypeGetName+0x76>
     8c2:	a201      	add	r2, pc, #4	; (adr r2, 8c8 <TfLiteTypeGetName+0x16>)
     8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     8c8:	000008f9 	.word	0x000008f9
     8cc:	000008fd 	.word	0x000008fd
     8d0:	00000905 	.word	0x00000905
     8d4:	00000909 	.word	0x00000909
     8d8:	00000911 	.word	0x00000911
     8dc:	0000091d 	.word	0x0000091d
     8e0:	00000915 	.word	0x00000915
     8e4:	00000901 	.word	0x00000901
     8e8:	00000919 	.word	0x00000919
     8ec:	0000090d 	.word	0x0000090d
     8f0:	00000921 	.word	0x00000921
     8f4:	00000925 	.word	0x00000925
     8f8:	4b0f      	ldr	r3, [pc, #60]	; (938 <TfLiteTypeGetName+0x86>)
     8fa:	e016      	b.n	92a <TfLiteTypeGetName+0x78>
     8fc:	4b0f      	ldr	r3, [pc, #60]	; (93c <TfLiteTypeGetName+0x8a>)
     8fe:	e014      	b.n	92a <TfLiteTypeGetName+0x78>
     900:	4b0f      	ldr	r3, [pc, #60]	; (940 <TfLiteTypeGetName+0x8e>)
     902:	e012      	b.n	92a <TfLiteTypeGetName+0x78>
     904:	4b0f      	ldr	r3, [pc, #60]	; (944 <TfLiteTypeGetName+0x92>)
     906:	e010      	b.n	92a <TfLiteTypeGetName+0x78>
     908:	4b0f      	ldr	r3, [pc, #60]	; (948 <TfLiteTypeGetName+0x96>)
     90a:	e00e      	b.n	92a <TfLiteTypeGetName+0x78>
     90c:	4b0f      	ldr	r3, [pc, #60]	; (94c <TfLiteTypeGetName+0x9a>)
     90e:	e00c      	b.n	92a <TfLiteTypeGetName+0x78>
     910:	4b0f      	ldr	r3, [pc, #60]	; (950 <TfLiteTypeGetName+0x9e>)
     912:	e00a      	b.n	92a <TfLiteTypeGetName+0x78>
     914:	4b0f      	ldr	r3, [pc, #60]	; (954 <TfLiteTypeGetName+0xa2>)
     916:	e008      	b.n	92a <TfLiteTypeGetName+0x78>
     918:	4b0f      	ldr	r3, [pc, #60]	; (958 <TfLiteTypeGetName+0xa6>)
     91a:	e006      	b.n	92a <TfLiteTypeGetName+0x78>
     91c:	4b0f      	ldr	r3, [pc, #60]	; (95c <TfLiteTypeGetName+0xaa>)
     91e:	e004      	b.n	92a <TfLiteTypeGetName+0x78>
     920:	4b0f      	ldr	r3, [pc, #60]	; (960 <TfLiteTypeGetName+0xae>)
     922:	e002      	b.n	92a <TfLiteTypeGetName+0x78>
     924:	4b0f      	ldr	r3, [pc, #60]	; (964 <TfLiteTypeGetName+0xb2>)
     926:	e000      	b.n	92a <TfLiteTypeGetName+0x78>
     928:	4b0f      	ldr	r3, [pc, #60]	; (968 <TfLiteTypeGetName+0xb6>)
     92a:	4618      	mov	r0, r3
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	f85d 7b04 	ldr.w	r7, [sp], #4
     934:	4770      	bx	lr
     936:	bf00      	nop
     938:	0001ec20 	.word	0x0001ec20
     93c:	0001ec28 	.word	0x0001ec28
     940:	0001ec30 	.word	0x0001ec30
     944:	0001ec38 	.word	0x0001ec38
     948:	0001ec40 	.word	0x0001ec40
     94c:	0001ec48 	.word	0x0001ec48
     950:	0001ec50 	.word	0x0001ec50
     954:	0001ec58 	.word	0x0001ec58
     958:	0001ec60 	.word	0x0001ec60
     95c:	0001ec6c 	.word	0x0001ec6c
     960:	0001ec74 	.word	0x0001ec74
     964:	0001ec7c 	.word	0x0001ec7c
     968:	0001ec84 	.word	0x0001ec84

0000096c <TfLiteDelegateCreate>:
     96c:	b5b0      	push	{r4, r5, r7, lr}
     96e:	b08a      	sub	sp, #40	; 0x28
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	f107 0308 	add.w	r3, r7, #8
     978:	2220      	movs	r2, #32
     97a:	2100      	movs	r1, #0
     97c:	4618      	mov	r0, r3
     97e:	f01d fe5c 	bl	1e63a <memset>
     982:	687b      	ldr	r3, [r7, #4]
     984:	461d      	mov	r5, r3
     986:	f107 0408 	add.w	r4, r7, #8
     98a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     98c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     98e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     992:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     996:	6878      	ldr	r0, [r7, #4]
     998:	3728      	adds	r7, #40	; 0x28
     99a:	46bd      	mov	sp, r7
     99c:	bdb0      	pop	{r4, r5, r7, pc}
     99e:	bf00      	nop

000009a0 <__aeabi_drsub>:
     9a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     9a4:	e002      	b.n	9ac <__adddf3>
     9a6:	bf00      	nop

000009a8 <__aeabi_dsub>:
     9a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000009ac <__adddf3>:
     9ac:	b530      	push	{r4, r5, lr}
     9ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     9b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     9b6:	ea94 0f05 	teq	r4, r5
     9ba:	bf08      	it	eq
     9bc:	ea90 0f02 	teqeq	r0, r2
     9c0:	bf1f      	itttt	ne
     9c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     9c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     9ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     9ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9d2:	f000 80e2 	beq.w	b9a <__adddf3+0x1ee>
     9d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     9da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     9de:	bfb8      	it	lt
     9e0:	426d      	neglt	r5, r5
     9e2:	dd0c      	ble.n	9fe <__adddf3+0x52>
     9e4:	442c      	add	r4, r5
     9e6:	ea80 0202 	eor.w	r2, r0, r2
     9ea:	ea81 0303 	eor.w	r3, r1, r3
     9ee:	ea82 0000 	eor.w	r0, r2, r0
     9f2:	ea83 0101 	eor.w	r1, r3, r1
     9f6:	ea80 0202 	eor.w	r2, r0, r2
     9fa:	ea81 0303 	eor.w	r3, r1, r3
     9fe:	2d36      	cmp	r5, #54	; 0x36
     a00:	bf88      	it	hi
     a02:	bd30      	pophi	{r4, r5, pc}
     a04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
     a0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     a10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     a14:	d002      	beq.n	a1c <__adddf3+0x70>
     a16:	4240      	negs	r0, r0
     a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
     a24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     a28:	d002      	beq.n	a30 <__adddf3+0x84>
     a2a:	4252      	negs	r2, r2
     a2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a30:	ea94 0f05 	teq	r4, r5
     a34:	f000 80a7 	beq.w	b86 <__adddf3+0x1da>
     a38:	f1a4 0401 	sub.w	r4, r4, #1
     a3c:	f1d5 0e20 	rsbs	lr, r5, #32
     a40:	db0d      	blt.n	a5e <__adddf3+0xb2>
     a42:	fa02 fc0e 	lsl.w	ip, r2, lr
     a46:	fa22 f205 	lsr.w	r2, r2, r5
     a4a:	1880      	adds	r0, r0, r2
     a4c:	f141 0100 	adc.w	r1, r1, #0
     a50:	fa03 f20e 	lsl.w	r2, r3, lr
     a54:	1880      	adds	r0, r0, r2
     a56:	fa43 f305 	asr.w	r3, r3, r5
     a5a:	4159      	adcs	r1, r3
     a5c:	e00e      	b.n	a7c <__adddf3+0xd0>
     a5e:	f1a5 0520 	sub.w	r5, r5, #32
     a62:	f10e 0e20 	add.w	lr, lr, #32
     a66:	2a01      	cmp	r2, #1
     a68:	fa03 fc0e 	lsl.w	ip, r3, lr
     a6c:	bf28      	it	cs
     a6e:	f04c 0c02 	orrcs.w	ip, ip, #2
     a72:	fa43 f305 	asr.w	r3, r3, r5
     a76:	18c0      	adds	r0, r0, r3
     a78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a80:	d507      	bpl.n	a92 <__adddf3+0xe6>
     a82:	f04f 0e00 	mov.w	lr, #0
     a86:	f1dc 0c00 	rsbs	ip, ip, #0
     a8a:	eb7e 0000 	sbcs.w	r0, lr, r0
     a8e:	eb6e 0101 	sbc.w	r1, lr, r1
     a92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     a96:	d31b      	bcc.n	ad0 <__adddf3+0x124>
     a98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     a9c:	d30c      	bcc.n	ab8 <__adddf3+0x10c>
     a9e:	0849      	lsrs	r1, r1, #1
     aa0:	ea5f 0030 	movs.w	r0, r0, rrx
     aa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     aa8:	f104 0401 	add.w	r4, r4, #1
     aac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     ab0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     ab4:	f080 809a 	bcs.w	bec <__adddf3+0x240>
     ab8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     abc:	bf08      	it	eq
     abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     ac2:	f150 0000 	adcs.w	r0, r0, #0
     ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     aca:	ea41 0105 	orr.w	r1, r1, r5
     ace:	bd30      	pop	{r4, r5, pc}
     ad0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     ad4:	4140      	adcs	r0, r0
     ad6:	eb41 0101 	adc.w	r1, r1, r1
     ada:	3c01      	subs	r4, #1
     adc:	bf28      	it	cs
     ade:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     ae2:	d2e9      	bcs.n	ab8 <__adddf3+0x10c>
     ae4:	f091 0f00 	teq	r1, #0
     ae8:	bf04      	itt	eq
     aea:	4601      	moveq	r1, r0
     aec:	2000      	moveq	r0, #0
     aee:	fab1 f381 	clz	r3, r1
     af2:	bf08      	it	eq
     af4:	3320      	addeq	r3, #32
     af6:	f1a3 030b 	sub.w	r3, r3, #11
     afa:	f1b3 0220 	subs.w	r2, r3, #32
     afe:	da0c      	bge.n	b1a <__adddf3+0x16e>
     b00:	320c      	adds	r2, #12
     b02:	dd08      	ble.n	b16 <__adddf3+0x16a>
     b04:	f102 0c14 	add.w	ip, r2, #20
     b08:	f1c2 020c 	rsb	r2, r2, #12
     b0c:	fa01 f00c 	lsl.w	r0, r1, ip
     b10:	fa21 f102 	lsr.w	r1, r1, r2
     b14:	e00c      	b.n	b30 <__adddf3+0x184>
     b16:	f102 0214 	add.w	r2, r2, #20
     b1a:	bfd8      	it	le
     b1c:	f1c2 0c20 	rsble	ip, r2, #32
     b20:	fa01 f102 	lsl.w	r1, r1, r2
     b24:	fa20 fc0c 	lsr.w	ip, r0, ip
     b28:	bfdc      	itt	le
     b2a:	ea41 010c 	orrle.w	r1, r1, ip
     b2e:	4090      	lslle	r0, r2
     b30:	1ae4      	subs	r4, r4, r3
     b32:	bfa2      	ittt	ge
     b34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     b38:	4329      	orrge	r1, r5
     b3a:	bd30      	popge	{r4, r5, pc}
     b3c:	ea6f 0404 	mvn.w	r4, r4
     b40:	3c1f      	subs	r4, #31
     b42:	da1c      	bge.n	b7e <__adddf3+0x1d2>
     b44:	340c      	adds	r4, #12
     b46:	dc0e      	bgt.n	b66 <__adddf3+0x1ba>
     b48:	f104 0414 	add.w	r4, r4, #20
     b4c:	f1c4 0220 	rsb	r2, r4, #32
     b50:	fa20 f004 	lsr.w	r0, r0, r4
     b54:	fa01 f302 	lsl.w	r3, r1, r2
     b58:	ea40 0003 	orr.w	r0, r0, r3
     b5c:	fa21 f304 	lsr.w	r3, r1, r4
     b60:	ea45 0103 	orr.w	r1, r5, r3
     b64:	bd30      	pop	{r4, r5, pc}
     b66:	f1c4 040c 	rsb	r4, r4, #12
     b6a:	f1c4 0220 	rsb	r2, r4, #32
     b6e:	fa20 f002 	lsr.w	r0, r0, r2
     b72:	fa01 f304 	lsl.w	r3, r1, r4
     b76:	ea40 0003 	orr.w	r0, r0, r3
     b7a:	4629      	mov	r1, r5
     b7c:	bd30      	pop	{r4, r5, pc}
     b7e:	fa21 f004 	lsr.w	r0, r1, r4
     b82:	4629      	mov	r1, r5
     b84:	bd30      	pop	{r4, r5, pc}
     b86:	f094 0f00 	teq	r4, #0
     b8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     b8e:	bf06      	itte	eq
     b90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     b94:	3401      	addeq	r4, #1
     b96:	3d01      	subne	r5, #1
     b98:	e74e      	b.n	a38 <__adddf3+0x8c>
     b9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     b9e:	bf18      	it	ne
     ba0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     ba4:	d029      	beq.n	bfa <__adddf3+0x24e>
     ba6:	ea94 0f05 	teq	r4, r5
     baa:	bf08      	it	eq
     bac:	ea90 0f02 	teqeq	r0, r2
     bb0:	d005      	beq.n	bbe <__adddf3+0x212>
     bb2:	ea54 0c00 	orrs.w	ip, r4, r0
     bb6:	bf04      	itt	eq
     bb8:	4619      	moveq	r1, r3
     bba:	4610      	moveq	r0, r2
     bbc:	bd30      	pop	{r4, r5, pc}
     bbe:	ea91 0f03 	teq	r1, r3
     bc2:	bf1e      	ittt	ne
     bc4:	2100      	movne	r1, #0
     bc6:	2000      	movne	r0, #0
     bc8:	bd30      	popne	{r4, r5, pc}
     bca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     bce:	d105      	bne.n	bdc <__adddf3+0x230>
     bd0:	0040      	lsls	r0, r0, #1
     bd2:	4149      	adcs	r1, r1
     bd4:	bf28      	it	cs
     bd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     bda:	bd30      	pop	{r4, r5, pc}
     bdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     be0:	bf3c      	itt	cc
     be2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     be6:	bd30      	popcc	{r4, r5, pc}
     be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     bec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     bf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     bf4:	f04f 0000 	mov.w	r0, #0
     bf8:	bd30      	pop	{r4, r5, pc}
     bfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     bfe:	bf1a      	itte	ne
     c00:	4619      	movne	r1, r3
     c02:	4610      	movne	r0, r2
     c04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     c08:	bf1c      	itt	ne
     c0a:	460b      	movne	r3, r1
     c0c:	4602      	movne	r2, r0
     c0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     c12:	bf06      	itte	eq
     c14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     c18:	ea91 0f03 	teqeq	r1, r3
     c1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     c20:	bd30      	pop	{r4, r5, pc}
     c22:	bf00      	nop

00000c24 <__aeabi_ui2d>:
     c24:	f090 0f00 	teq	r0, #0
     c28:	bf04      	itt	eq
     c2a:	2100      	moveq	r1, #0
     c2c:	4770      	bxeq	lr
     c2e:	b530      	push	{r4, r5, lr}
     c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
     c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
     c38:	f04f 0500 	mov.w	r5, #0
     c3c:	f04f 0100 	mov.w	r1, #0
     c40:	e750      	b.n	ae4 <__adddf3+0x138>
     c42:	bf00      	nop

00000c44 <__aeabi_i2d>:
     c44:	f090 0f00 	teq	r0, #0
     c48:	bf04      	itt	eq
     c4a:	2100      	moveq	r1, #0
     c4c:	4770      	bxeq	lr
     c4e:	b530      	push	{r4, r5, lr}
     c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
     c54:	f104 0432 	add.w	r4, r4, #50	; 0x32
     c58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     c5c:	bf48      	it	mi
     c5e:	4240      	negmi	r0, r0
     c60:	f04f 0100 	mov.w	r1, #0
     c64:	e73e      	b.n	ae4 <__adddf3+0x138>
     c66:	bf00      	nop

00000c68 <__aeabi_f2d>:
     c68:	0042      	lsls	r2, r0, #1
     c6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     c6e:	ea4f 0131 	mov.w	r1, r1, rrx
     c72:	ea4f 7002 	mov.w	r0, r2, lsl #28
     c76:	bf1f      	itttt	ne
     c78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     c7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     c80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     c84:	4770      	bxne	lr
     c86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     c8a:	bf08      	it	eq
     c8c:	4770      	bxeq	lr
     c8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     c92:	bf04      	itt	eq
     c94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     c98:	4770      	bxeq	lr
     c9a:	b530      	push	{r4, r5, lr}
     c9c:	f44f 7460 	mov.w	r4, #896	; 0x380
     ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     ca8:	e71c      	b.n	ae4 <__adddf3+0x138>
     caa:	bf00      	nop

00000cac <__aeabi_ul2d>:
     cac:	ea50 0201 	orrs.w	r2, r0, r1
     cb0:	bf08      	it	eq
     cb2:	4770      	bxeq	lr
     cb4:	b530      	push	{r4, r5, lr}
     cb6:	f04f 0500 	mov.w	r5, #0
     cba:	e00a      	b.n	cd2 <__aeabi_l2d+0x16>

00000cbc <__aeabi_l2d>:
     cbc:	ea50 0201 	orrs.w	r2, r0, r1
     cc0:	bf08      	it	eq
     cc2:	4770      	bxeq	lr
     cc4:	b530      	push	{r4, r5, lr}
     cc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     cca:	d502      	bpl.n	cd2 <__aeabi_l2d+0x16>
     ccc:	4240      	negs	r0, r0
     cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     cd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     cda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     cde:	f43f aed8 	beq.w	a92 <__adddf3+0xe6>
     ce2:	f04f 0203 	mov.w	r2, #3
     ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     cea:	bf18      	it	ne
     cec:	3203      	addne	r2, #3
     cee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     cf2:	bf18      	it	ne
     cf4:	3203      	addne	r2, #3
     cf6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     cfa:	f1c2 0320 	rsb	r3, r2, #32
     cfe:	fa00 fc03 	lsl.w	ip, r0, r3
     d02:	fa20 f002 	lsr.w	r0, r0, r2
     d06:	fa01 fe03 	lsl.w	lr, r1, r3
     d0a:	ea40 000e 	orr.w	r0, r0, lr
     d0e:	fa21 f102 	lsr.w	r1, r1, r2
     d12:	4414      	add	r4, r2
     d14:	e6bd      	b.n	a92 <__adddf3+0xe6>
     d16:	bf00      	nop

00000d18 <__aeabi_dmul>:
     d18:	b570      	push	{r4, r5, r6, lr}
     d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     d22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     d26:	bf1d      	ittte	ne
     d28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     d2c:	ea94 0f0c 	teqne	r4, ip
     d30:	ea95 0f0c 	teqne	r5, ip
     d34:	f000 f8de 	bleq	ef4 <__aeabi_dmul+0x1dc>
     d38:	442c      	add	r4, r5
     d3a:	ea81 0603 	eor.w	r6, r1, r3
     d3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     d42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     d46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     d4a:	bf18      	it	ne
     d4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     d50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     d58:	d038      	beq.n	dcc <__aeabi_dmul+0xb4>
     d5a:	fba0 ce02 	umull	ip, lr, r0, r2
     d5e:	f04f 0500 	mov.w	r5, #0
     d62:	fbe1 e502 	umlal	lr, r5, r1, r2
     d66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     d6a:	fbe0 e503 	umlal	lr, r5, r0, r3
     d6e:	f04f 0600 	mov.w	r6, #0
     d72:	fbe1 5603 	umlal	r5, r6, r1, r3
     d76:	f09c 0f00 	teq	ip, #0
     d7a:	bf18      	it	ne
     d7c:	f04e 0e01 	orrne.w	lr, lr, #1
     d80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     d84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     d88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     d8c:	d204      	bcs.n	d98 <__aeabi_dmul+0x80>
     d8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     d92:	416d      	adcs	r5, r5
     d94:	eb46 0606 	adc.w	r6, r6, r6
     d98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     d9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     da0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     da4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     da8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     dac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     db0:	bf88      	it	hi
     db2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     db6:	d81e      	bhi.n	df6 <__aeabi_dmul+0xde>
     db8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     dbc:	bf08      	it	eq
     dbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     dc2:	f150 0000 	adcs.w	r0, r0, #0
     dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     dca:	bd70      	pop	{r4, r5, r6, pc}
     dcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     dd0:	ea46 0101 	orr.w	r1, r6, r1
     dd4:	ea40 0002 	orr.w	r0, r0, r2
     dd8:	ea81 0103 	eor.w	r1, r1, r3
     ddc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     de0:	bfc2      	ittt	gt
     de2:	ebd4 050c 	rsbsgt	r5, r4, ip
     de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     dea:	bd70      	popgt	{r4, r5, r6, pc}
     dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     df0:	f04f 0e00 	mov.w	lr, #0
     df4:	3c01      	subs	r4, #1
     df6:	f300 80ab 	bgt.w	f50 <__aeabi_dmul+0x238>
     dfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     dfe:	bfde      	ittt	le
     e00:	2000      	movle	r0, #0
     e02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     e06:	bd70      	pople	{r4, r5, r6, pc}
     e08:	f1c4 0400 	rsb	r4, r4, #0
     e0c:	3c20      	subs	r4, #32
     e0e:	da35      	bge.n	e7c <__aeabi_dmul+0x164>
     e10:	340c      	adds	r4, #12
     e12:	dc1b      	bgt.n	e4c <__aeabi_dmul+0x134>
     e14:	f104 0414 	add.w	r4, r4, #20
     e18:	f1c4 0520 	rsb	r5, r4, #32
     e1c:	fa00 f305 	lsl.w	r3, r0, r5
     e20:	fa20 f004 	lsr.w	r0, r0, r4
     e24:	fa01 f205 	lsl.w	r2, r1, r5
     e28:	ea40 0002 	orr.w	r0, r0, r2
     e2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     e34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     e38:	fa21 f604 	lsr.w	r6, r1, r4
     e3c:	eb42 0106 	adc.w	r1, r2, r6
     e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     e44:	bf08      	it	eq
     e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     e4a:	bd70      	pop	{r4, r5, r6, pc}
     e4c:	f1c4 040c 	rsb	r4, r4, #12
     e50:	f1c4 0520 	rsb	r5, r4, #32
     e54:	fa00 f304 	lsl.w	r3, r0, r4
     e58:	fa20 f005 	lsr.w	r0, r0, r5
     e5c:	fa01 f204 	lsl.w	r2, r1, r4
     e60:	ea40 0002 	orr.w	r0, r0, r2
     e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     e68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     e6c:	f141 0100 	adc.w	r1, r1, #0
     e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     e74:	bf08      	it	eq
     e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     e7a:	bd70      	pop	{r4, r5, r6, pc}
     e7c:	f1c4 0520 	rsb	r5, r4, #32
     e80:	fa00 f205 	lsl.w	r2, r0, r5
     e84:	ea4e 0e02 	orr.w	lr, lr, r2
     e88:	fa20 f304 	lsr.w	r3, r0, r4
     e8c:	fa01 f205 	lsl.w	r2, r1, r5
     e90:	ea43 0302 	orr.w	r3, r3, r2
     e94:	fa21 f004 	lsr.w	r0, r1, r4
     e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     e9c:	fa21 f204 	lsr.w	r2, r1, r4
     ea0:	ea20 0002 	bic.w	r0, r0, r2
     ea4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     eac:	bf08      	it	eq
     eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     eb2:	bd70      	pop	{r4, r5, r6, pc}
     eb4:	f094 0f00 	teq	r4, #0
     eb8:	d10f      	bne.n	eda <__aeabi_dmul+0x1c2>
     eba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     ebe:	0040      	lsls	r0, r0, #1
     ec0:	eb41 0101 	adc.w	r1, r1, r1
     ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ec8:	bf08      	it	eq
     eca:	3c01      	subeq	r4, #1
     ecc:	d0f7      	beq.n	ebe <__aeabi_dmul+0x1a6>
     ece:	ea41 0106 	orr.w	r1, r1, r6
     ed2:	f095 0f00 	teq	r5, #0
     ed6:	bf18      	it	ne
     ed8:	4770      	bxne	lr
     eda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     ede:	0052      	lsls	r2, r2, #1
     ee0:	eb43 0303 	adc.w	r3, r3, r3
     ee4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     ee8:	bf08      	it	eq
     eea:	3d01      	subeq	r5, #1
     eec:	d0f7      	beq.n	ede <__aeabi_dmul+0x1c6>
     eee:	ea43 0306 	orr.w	r3, r3, r6
     ef2:	4770      	bx	lr
     ef4:	ea94 0f0c 	teq	r4, ip
     ef8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     efc:	bf18      	it	ne
     efe:	ea95 0f0c 	teqne	r5, ip
     f02:	d00c      	beq.n	f1e <__aeabi_dmul+0x206>
     f04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f08:	bf18      	it	ne
     f0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f0e:	d1d1      	bne.n	eb4 <__aeabi_dmul+0x19c>
     f10:	ea81 0103 	eor.w	r1, r1, r3
     f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     f18:	f04f 0000 	mov.w	r0, #0
     f1c:	bd70      	pop	{r4, r5, r6, pc}
     f1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f22:	bf06      	itte	eq
     f24:	4610      	moveq	r0, r2
     f26:	4619      	moveq	r1, r3
     f28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f2c:	d019      	beq.n	f62 <__aeabi_dmul+0x24a>
     f2e:	ea94 0f0c 	teq	r4, ip
     f32:	d102      	bne.n	f3a <__aeabi_dmul+0x222>
     f34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     f38:	d113      	bne.n	f62 <__aeabi_dmul+0x24a>
     f3a:	ea95 0f0c 	teq	r5, ip
     f3e:	d105      	bne.n	f4c <__aeabi_dmul+0x234>
     f40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     f44:	bf1c      	itt	ne
     f46:	4610      	movne	r0, r2
     f48:	4619      	movne	r1, r3
     f4a:	d10a      	bne.n	f62 <__aeabi_dmul+0x24a>
     f4c:	ea81 0103 	eor.w	r1, r1, r3
     f50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     f54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     f58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     f5c:	f04f 0000 	mov.w	r0, #0
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     f66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     f6a:	bd70      	pop	{r4, r5, r6, pc}

00000f6c <__aeabi_ddiv>:
     f6c:	b570      	push	{r4, r5, r6, lr}
     f6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     f72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     f76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     f7a:	bf1d      	ittte	ne
     f7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     f80:	ea94 0f0c 	teqne	r4, ip
     f84:	ea95 0f0c 	teqne	r5, ip
     f88:	f000 f8a7 	bleq	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
     f8c:	eba4 0405 	sub.w	r4, r4, r5
     f90:	ea81 0e03 	eor.w	lr, r1, r3
     f94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
     f9c:	f000 8088 	beq.w	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
     fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     fa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     fa8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     fac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     fb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     fb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     fb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     fbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     fc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     fc4:	429d      	cmp	r5, r3
     fc6:	bf08      	it	eq
     fc8:	4296      	cmpeq	r6, r2
     fca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     fce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     fd2:	d202      	bcs.n	fda <__aeabi_ddiv+0x6e>
     fd4:	085b      	lsrs	r3, r3, #1
     fd6:	ea4f 0232 	mov.w	r2, r2, rrx
     fda:	1ab6      	subs	r6, r6, r2
     fdc:	eb65 0503 	sbc.w	r5, r5, r3
     fe0:	085b      	lsrs	r3, r3, #1
     fe2:	ea4f 0232 	mov.w	r2, r2, rrx
     fe6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     fea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     fee:	ebb6 0e02 	subs.w	lr, r6, r2
     ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
     ff6:	bf22      	ittt	cs
     ff8:	1ab6      	subcs	r6, r6, r2
     ffa:	4675      	movcs	r5, lr
     ffc:	ea40 000c 	orrcs.w	r0, r0, ip
    1000:	085b      	lsrs	r3, r3, #1
    1002:	ea4f 0232 	mov.w	r2, r2, rrx
    1006:	ebb6 0e02 	subs.w	lr, r6, r2
    100a:	eb75 0e03 	sbcs.w	lr, r5, r3
    100e:	bf22      	ittt	cs
    1010:	1ab6      	subcs	r6, r6, r2
    1012:	4675      	movcs	r5, lr
    1014:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1018:	085b      	lsrs	r3, r3, #1
    101a:	ea4f 0232 	mov.w	r2, r2, rrx
    101e:	ebb6 0e02 	subs.w	lr, r6, r2
    1022:	eb75 0e03 	sbcs.w	lr, r5, r3
    1026:	bf22      	ittt	cs
    1028:	1ab6      	subcs	r6, r6, r2
    102a:	4675      	movcs	r5, lr
    102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1030:	085b      	lsrs	r3, r3, #1
    1032:	ea4f 0232 	mov.w	r2, r2, rrx
    1036:	ebb6 0e02 	subs.w	lr, r6, r2
    103a:	eb75 0e03 	sbcs.w	lr, r5, r3
    103e:	bf22      	ittt	cs
    1040:	1ab6      	subcs	r6, r6, r2
    1042:	4675      	movcs	r5, lr
    1044:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1048:	ea55 0e06 	orrs.w	lr, r5, r6
    104c:	d018      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    104e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1052:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1056:	ea4f 1606 	mov.w	r6, r6, lsl #4
    105a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    105e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1062:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1066:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    106a:	d1c0      	bne.n	fee <__aeabi_ddiv+0x82>
    106c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1070:	d10b      	bne.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    1072:	ea41 0100 	orr.w	r1, r1, r0
    1076:	f04f 0000 	mov.w	r0, #0
    107a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    107e:	e7b6      	b.n	fee <__aeabi_ddiv+0x82>
    1080:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1084:	bf04      	itt	eq
    1086:	4301      	orreq	r1, r0
    1088:	2000      	moveq	r0, #0
    108a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    108e:	bf88      	it	hi
    1090:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1094:	f63f aeaf 	bhi.w	df6 <__aeabi_dmul+0xde>
    1098:	ebb5 0c03 	subs.w	ip, r5, r3
    109c:	bf04      	itt	eq
    109e:	ebb6 0c02 	subseq.w	ip, r6, r2
    10a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    10a6:	f150 0000 	adcs.w	r0, r0, #0
    10aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    10ae:	bd70      	pop	{r4, r5, r6, pc}
    10b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    10b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    10b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    10bc:	bfc2      	ittt	gt
    10be:	ebd4 050c 	rsbsgt	r5, r4, ip
    10c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    10c6:	bd70      	popgt	{r4, r5, r6, pc}
    10c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    10cc:	f04f 0e00 	mov.w	lr, #0
    10d0:	3c01      	subs	r4, #1
    10d2:	e690      	b.n	df6 <__aeabi_dmul+0xde>
    10d4:	ea45 0e06 	orr.w	lr, r5, r6
    10d8:	e68d      	b.n	df6 <__aeabi_dmul+0xde>
    10da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    10de:	ea94 0f0c 	teq	r4, ip
    10e2:	bf08      	it	eq
    10e4:	ea95 0f0c 	teqeq	r5, ip
    10e8:	f43f af3b 	beq.w	f62 <__aeabi_dmul+0x24a>
    10ec:	ea94 0f0c 	teq	r4, ip
    10f0:	d10a      	bne.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    10f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    10f6:	f47f af34 	bne.w	f62 <__aeabi_dmul+0x24a>
    10fa:	ea95 0f0c 	teq	r5, ip
    10fe:	f47f af25 	bne.w	f4c <__aeabi_dmul+0x234>
    1102:	4610      	mov	r0, r2
    1104:	4619      	mov	r1, r3
    1106:	e72c      	b.n	f62 <__aeabi_dmul+0x24a>
    1108:	ea95 0f0c 	teq	r5, ip
    110c:	d106      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    110e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1112:	f43f aefd 	beq.w	f10 <__aeabi_dmul+0x1f8>
    1116:	4610      	mov	r0, r2
    1118:	4619      	mov	r1, r3
    111a:	e722      	b.n	f62 <__aeabi_dmul+0x24a>
    111c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1120:	bf18      	it	ne
    1122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1126:	f47f aec5 	bne.w	eb4 <__aeabi_dmul+0x19c>
    112a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    112e:	f47f af0d 	bne.w	f4c <__aeabi_dmul+0x234>
    1132:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1136:	f47f aeeb 	bne.w	f10 <__aeabi_dmul+0x1f8>
    113a:	e712      	b.n	f62 <__aeabi_dmul+0x24a>

0000113c <__gedf2>:
    113c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    1140:	e006      	b.n	1150 <__cmpdf2+0x4>
    1142:	bf00      	nop

00001144 <__ledf2>:
    1144:	f04f 0c01 	mov.w	ip, #1
    1148:	e002      	b.n	1150 <__cmpdf2+0x4>
    114a:	bf00      	nop

0000114c <__cmpdf2>:
    114c:	f04f 0c01 	mov.w	ip, #1
    1150:	f84d cd04 	str.w	ip, [sp, #-4]!
    1154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    115c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1160:	bf18      	it	ne
    1162:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1166:	d01b      	beq.n	11a0 <__cmpdf2+0x54>
    1168:	b001      	add	sp, #4
    116a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    116e:	bf0c      	ite	eq
    1170:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1174:	ea91 0f03 	teqne	r1, r3
    1178:	bf02      	ittt	eq
    117a:	ea90 0f02 	teqeq	r0, r2
    117e:	2000      	moveq	r0, #0
    1180:	4770      	bxeq	lr
    1182:	f110 0f00 	cmn.w	r0, #0
    1186:	ea91 0f03 	teq	r1, r3
    118a:	bf58      	it	pl
    118c:	4299      	cmppl	r1, r3
    118e:	bf08      	it	eq
    1190:	4290      	cmpeq	r0, r2
    1192:	bf2c      	ite	cs
    1194:	17d8      	asrcs	r0, r3, #31
    1196:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    119a:	f040 0001 	orr.w	r0, r0, #1
    119e:	4770      	bx	lr
    11a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    11a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11a8:	d102      	bne.n	11b0 <__cmpdf2+0x64>
    11aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    11ae:	d107      	bne.n	11c0 <__cmpdf2+0x74>
    11b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    11b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11b8:	d1d6      	bne.n	1168 <__cmpdf2+0x1c>
    11ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    11be:	d0d3      	beq.n	1168 <__cmpdf2+0x1c>
    11c0:	f85d 0b04 	ldr.w	r0, [sp], #4
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop

000011c8 <__aeabi_cdrcmple>:
    11c8:	4684      	mov	ip, r0
    11ca:	4610      	mov	r0, r2
    11cc:	4662      	mov	r2, ip
    11ce:	468c      	mov	ip, r1
    11d0:	4619      	mov	r1, r3
    11d2:	4663      	mov	r3, ip
    11d4:	e000      	b.n	11d8 <__aeabi_cdcmpeq>
    11d6:	bf00      	nop

000011d8 <__aeabi_cdcmpeq>:
    11d8:	b501      	push	{r0, lr}
    11da:	f7ff ffb7 	bl	114c <__cmpdf2>
    11de:	2800      	cmp	r0, #0
    11e0:	bf48      	it	mi
    11e2:	f110 0f00 	cmnmi.w	r0, #0
    11e6:	bd01      	pop	{r0, pc}

000011e8 <__aeabi_dcmpeq>:
    11e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    11ec:	f7ff fff4 	bl	11d8 <__aeabi_cdcmpeq>
    11f0:	bf0c      	ite	eq
    11f2:	2001      	moveq	r0, #1
    11f4:	2000      	movne	r0, #0
    11f6:	f85d fb08 	ldr.w	pc, [sp], #8
    11fa:	bf00      	nop

000011fc <__aeabi_dcmplt>:
    11fc:	f84d ed08 	str.w	lr, [sp, #-8]!
    1200:	f7ff ffea 	bl	11d8 <__aeabi_cdcmpeq>
    1204:	bf34      	ite	cc
    1206:	2001      	movcc	r0, #1
    1208:	2000      	movcs	r0, #0
    120a:	f85d fb08 	ldr.w	pc, [sp], #8
    120e:	bf00      	nop

00001210 <__aeabi_dcmple>:
    1210:	f84d ed08 	str.w	lr, [sp, #-8]!
    1214:	f7ff ffe0 	bl	11d8 <__aeabi_cdcmpeq>
    1218:	bf94      	ite	ls
    121a:	2001      	movls	r0, #1
    121c:	2000      	movhi	r0, #0
    121e:	f85d fb08 	ldr.w	pc, [sp], #8
    1222:	bf00      	nop

00001224 <__aeabi_dcmpge>:
    1224:	f84d ed08 	str.w	lr, [sp, #-8]!
    1228:	f7ff ffce 	bl	11c8 <__aeabi_cdrcmple>
    122c:	bf94      	ite	ls
    122e:	2001      	movls	r0, #1
    1230:	2000      	movhi	r0, #0
    1232:	f85d fb08 	ldr.w	pc, [sp], #8
    1236:	bf00      	nop

00001238 <__aeabi_dcmpgt>:
    1238:	f84d ed08 	str.w	lr, [sp, #-8]!
    123c:	f7ff ffc4 	bl	11c8 <__aeabi_cdrcmple>
    1240:	bf34      	ite	cc
    1242:	2001      	movcc	r0, #1
    1244:	2000      	movcs	r0, #0
    1246:	f85d fb08 	ldr.w	pc, [sp], #8
    124a:	bf00      	nop

0000124c <__aeabi_d2iz>:
    124c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1250:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1254:	d215      	bcs.n	1282 <__aeabi_d2iz+0x36>
    1256:	d511      	bpl.n	127c <__aeabi_d2iz+0x30>
    1258:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    125c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1260:	d912      	bls.n	1288 <__aeabi_d2iz+0x3c>
    1262:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    126a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    126e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1272:	fa23 f002 	lsr.w	r0, r3, r2
    1276:	bf18      	it	ne
    1278:	4240      	negne	r0, r0
    127a:	4770      	bx	lr
    127c:	f04f 0000 	mov.w	r0, #0
    1280:	4770      	bx	lr
    1282:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1286:	d105      	bne.n	1294 <__aeabi_d2iz+0x48>
    1288:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    128c:	bf08      	it	eq
    128e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1292:	4770      	bx	lr
    1294:	f04f 0000 	mov.w	r0, #0
    1298:	4770      	bx	lr
    129a:	bf00      	nop

0000129c <__aeabi_d2f>:
    129c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    12a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    12a4:	bf24      	itt	cs
    12a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    12aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    12ae:	d90d      	bls.n	12cc <__aeabi_d2f+0x30>
    12b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    12b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    12b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    12bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    12c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    12c4:	bf08      	it	eq
    12c6:	f020 0001 	biceq.w	r0, r0, #1
    12ca:	4770      	bx	lr
    12cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    12d0:	d121      	bne.n	1316 <__aeabi_d2f+0x7a>
    12d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    12d6:	bfbc      	itt	lt
    12d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    12dc:	4770      	bxlt	lr
    12de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    12e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    12e6:	f1c2 0218 	rsb	r2, r2, #24
    12ea:	f1c2 0c20 	rsb	ip, r2, #32
    12ee:	fa10 f30c 	lsls.w	r3, r0, ip
    12f2:	fa20 f002 	lsr.w	r0, r0, r2
    12f6:	bf18      	it	ne
    12f8:	f040 0001 	orrne.w	r0, r0, #1
    12fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1300:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1304:	fa03 fc0c 	lsl.w	ip, r3, ip
    1308:	ea40 000c 	orr.w	r0, r0, ip
    130c:	fa23 f302 	lsr.w	r3, r3, r2
    1310:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1314:	e7cc      	b.n	12b0 <__aeabi_d2f+0x14>
    1316:	ea7f 5362 	mvns.w	r3, r2, asr #21
    131a:	d107      	bne.n	132c <__aeabi_d2f+0x90>
    131c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    1320:	bf1e      	ittt	ne
    1322:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    1326:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    132a:	4770      	bxne	lr
    132c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    1330:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1334:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1338:	4770      	bx	lr
    133a:	bf00      	nop

0000133c <__aeabi_d2lz>:
    133c:	b538      	push	{r3, r4, r5, lr}
    133e:	2200      	movs	r2, #0
    1340:	2300      	movs	r3, #0
    1342:	4604      	mov	r4, r0
    1344:	460d      	mov	r5, r1
    1346:	f7ff ff59 	bl	11fc <__aeabi_dcmplt>
    134a:	b928      	cbnz	r0, 1358 <__aeabi_d2lz+0x1c>
    134c:	4620      	mov	r0, r4
    134e:	4629      	mov	r1, r5
    1350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1354:	f000 b80a 	b.w	136c <__aeabi_d2ulz>
    1358:	4620      	mov	r0, r4
    135a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    135e:	f000 f805 	bl	136c <__aeabi_d2ulz>
    1362:	4240      	negs	r0, r0
    1364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1368:	bd38      	pop	{r3, r4, r5, pc}
    136a:	bf00      	nop

0000136c <__aeabi_d2ulz>:
    136c:	b5d0      	push	{r4, r6, r7, lr}
    136e:	4b0c      	ldr	r3, [pc, #48]	; (13a0 <__aeabi_d2ulz+0x34>)
    1370:	2200      	movs	r2, #0
    1372:	4606      	mov	r6, r0
    1374:	460f      	mov	r7, r1
    1376:	f7ff fccf 	bl	d18 <__aeabi_dmul>
    137a:	f000 f815 	bl	13a8 <__aeabi_d2uiz>
    137e:	4604      	mov	r4, r0
    1380:	f7ff fc50 	bl	c24 <__aeabi_ui2d>
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <__aeabi_d2ulz+0x38>)
    1386:	2200      	movs	r2, #0
    1388:	f7ff fcc6 	bl	d18 <__aeabi_dmul>
    138c:	4602      	mov	r2, r0
    138e:	460b      	mov	r3, r1
    1390:	4630      	mov	r0, r6
    1392:	4639      	mov	r1, r7
    1394:	f7ff fb08 	bl	9a8 <__aeabi_dsub>
    1398:	f000 f806 	bl	13a8 <__aeabi_d2uiz>
    139c:	4621      	mov	r1, r4
    139e:	bdd0      	pop	{r4, r6, r7, pc}
    13a0:	3df00000 	.word	0x3df00000
    13a4:	41f00000 	.word	0x41f00000

000013a8 <__aeabi_d2uiz>:
    13a8:	004a      	lsls	r2, r1, #1
    13aa:	d211      	bcs.n	13d0 <__aeabi_d2uiz+0x28>
    13ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    13b0:	d211      	bcs.n	13d6 <__aeabi_d2uiz+0x2e>
    13b2:	d50d      	bpl.n	13d0 <__aeabi_d2uiz+0x28>
    13b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    13b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    13bc:	d40e      	bmi.n	13dc <__aeabi_d2uiz+0x34>
    13be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    13c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    13c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    13ca:	fa23 f002 	lsr.w	r0, r3, r2
    13ce:	4770      	bx	lr
    13d0:	f04f 0000 	mov.w	r0, #0
    13d4:	4770      	bx	lr
    13d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    13da:	d102      	bne.n	13e2 <__aeabi_d2uiz+0x3a>
    13dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13e0:	4770      	bx	lr
    13e2:	f04f 0000 	mov.w	r0, #0
    13e6:	4770      	bx	lr

000013e8 <strcmp>:
    13e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    13ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    13f0:	2a01      	cmp	r2, #1
    13f2:	bf28      	it	cs
    13f4:	429a      	cmpcs	r2, r3
    13f6:	d0f7      	beq.n	13e8 <strcmp>
    13f8:	1ad0      	subs	r0, r2, r3
    13fa:	4770      	bx	lr

000013fc <strlen>:
    13fc:	4603      	mov	r3, r0
    13fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    1402:	2a00      	cmp	r2, #0
    1404:	d1fb      	bne.n	13fe <strlen+0x2>
    1406:	1a18      	subs	r0, r3, r0
    1408:	3801      	subs	r0, #1
    140a:	4770      	bx	lr
    140c:	0000      	movs	r0, r0
	...

00001410 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    1418:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    141c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    1420:	ec57 6b10 	vmov	r6, r7, d0
    1424:	ec59 8b11 	vmov	r8, r9, d1
    1428:	4693      	mov	fp, r2
    142a:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    142c:	f7ff fc0a 	bl	c44 <__aeabi_i2d>
    1430:	4642      	mov	r2, r8
    1432:	4604      	mov	r4, r0
    1434:	460d      	mov	r5, r1
    1436:	464b      	mov	r3, r9
    1438:	4630      	mov	r0, r6
    143a:	4639      	mov	r1, r7
    143c:	f7ff fc6c 	bl	d18 <__aeabi_dmul>
    1440:	4602      	mov	r2, r0
    1442:	460b      	mov	r3, r1
    1444:	4620      	mov	r0, r4
    1446:	4629      	mov	r1, r5
    1448:	f7ff fc66 	bl	d18 <__aeabi_dmul>
    144c:	4602      	mov	r2, r0
    144e:	460b      	mov	r3, r1
    1450:	ec43 2b18 	vmov	d8, r2, r3
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1454:	a30a      	add	r3, pc, #40	; (adr r3, 1480 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    1456:	e9d3 2300 	ldrd	r2, r3, [r3]
    145a:	f7ff fed9 	bl	1210 <__aeabi_dcmple>
    145e:	b908      	cbnz	r0, 1464 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
    1460:	ed9f 8b07 	vldr	d8, [pc, #28]	; 1480 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
    1464:	eeb0 0a48 	vmov.f32	s0, s16
    1468:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    146c:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1470:	4659      	mov	r1, fp
    1472:	4650      	mov	r0, sl
}
    1474:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1478:	f010 b99e 	b.w	117b8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    147c:	f3af 8000 	nop.w
    1480:	ffc00000 	.word	0xffc00000
    1484:	41dfffff 	.word	0x41dfffff

00001488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    148c:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    148e:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    1490:	4615      	mov	r5, r2
    1492:	461e      	mov	r6, r3
    1494:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1496:	f7ff fbe7 	bl	c68 <__aeabi_f2d>
    149a:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    149c:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    149e:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    14a0:	f7ff fbe2 	bl	c68 <__aeabi_f2d>
    14a4:	4602      	mov	r2, r0
    14a6:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    14a8:	4640      	mov	r0, r8
    14aa:	4649      	mov	r1, r9
    14ac:	f7ff fc34 	bl	d18 <__aeabi_dmul>
                                              double* multiplier) {
    14b0:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    14b4:	4680      	mov	r8, r0
    14b6:	4689      	mov	r9, r1
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
    14b8:	b1d6      	cbz	r6, 14f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    14ba:	68f0      	ldr	r0, [r6, #12]
    14bc:	f7ff fbd4 	bl	c68 <__aeabi_f2d>
    14c0:	4602      	mov	r2, r0
    14c2:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    14c4:	4640      	mov	r0, r8
    14c6:	4649      	mov	r1, r9
    14c8:	f7ff fa6e 	bl	9a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    14cc:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    14ce:	68f8      	ldr	r0, [r7, #12]
    14d0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    14d4:	f7ff fbc8 	bl	c68 <__aeabi_f2d>
    14d8:	4602      	mov	r2, r0
    14da:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    14dc:	4640      	mov	r0, r8
    14de:	4649      	mov	r1, r9
    14e0:	f7ff fd44 	bl	f6c <__aeabi_ddiv>
    14e4:	a311      	add	r3, pc, #68	; (adr r3, 152c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    14e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ea:	f7ff fea5 	bl	1238 <__aeabi_dcmpgt>
    14ee:	b950      	cbnz	r0, 1506 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    14f0:	463b      	mov	r3, r7
    14f2:	462a      	mov	r2, r5
    14f4:	4651      	mov	r1, sl
    14f6:	4620      	mov	r0, r4
    14f8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    14fc:	b003      	add	sp, #12
    14fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    1502:	f010 b99b 	b.w	1183c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1506:	4b06      	ldr	r3, [pc, #24]	; (1520 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1508:	9300      	str	r3, [sp, #0]
    150a:	4620      	mov	r0, r4
    150c:	6965      	ldr	r5, [r4, #20]
    150e:	4a05      	ldr	r2, [pc, #20]	; (1524 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1510:	4905      	ldr	r1, [pc, #20]	; (1528 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1512:	239a      	movs	r3, #154	; 0x9a
    1514:	47a8      	blx	r5
}
    1516:	2001      	movs	r0, #1
    1518:	b003      	add	sp, #12
    151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    151e:	bf00      	nop
    1520:	0002936b 	.word	0x0002936b
    1524:	0002932b 	.word	0x0002932b
    1528:	000272d2 	.word	0x000272d2
    152c:	47ae147b 	.word	0x47ae147b
    1530:	3f947ae1 	.word	0x3f947ae1
    1534:	00000000 	.word	0x00000000

00001538 <floor>:
    1538:	ec51 0b10 	vmov	r0, r1, d0
    153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    153e:	f3c1 530a 	ubfx	r3, r1, #20, #11
    1542:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
    1546:	2d13      	cmp	r5, #19
    1548:	ee10 6a10 	vmov	r6, s0
    154c:	460c      	mov	r4, r1
    154e:	dc20      	bgt.n	1592 <floor+0x5a>
    1550:	2d00      	cmp	r5, #0
    1552:	db3d      	blt.n	15d0 <floor+0x98>
    1554:	4f38      	ldr	r7, [pc, #224]	; (1638 <floor+0x100>)
    1556:	412f      	asrs	r7, r5
    1558:	ea01 0307 	and.w	r3, r1, r7
    155c:	4303      	orrs	r3, r0
    155e:	d01d      	beq.n	159c <floor+0x64>
    1560:	a333      	add	r3, pc, #204	; (adr r3, 1630 <floor+0xf8>)
    1562:	e9d3 2300 	ldrd	r2, r3, [r3]
    1566:	f7ff fa21 	bl	9ac <__adddf3>
    156a:	2200      	movs	r2, #0
    156c:	2300      	movs	r3, #0
    156e:	f7ff fe63 	bl	1238 <__aeabi_dcmpgt>
    1572:	b148      	cbz	r0, 1588 <floor+0x50>
    1574:	2c00      	cmp	r4, #0
    1576:	da04      	bge.n	1582 <floor+0x4a>
    1578:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    157c:	fa43 f505 	asr.w	r5, r3, r5
    1580:	442c      	add	r4, r5
    1582:	ea24 0407 	bic.w	r4, r4, r7
    1586:	2600      	movs	r6, #0
    1588:	4623      	mov	r3, r4
    158a:	4632      	mov	r2, r6
    158c:	ec43 2b10 	vmov	d0, r2, r3
    1590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1592:	2d33      	cmp	r5, #51	; 0x33
    1594:	dd05      	ble.n	15a2 <floor+0x6a>
    1596:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    159a:	d029      	beq.n	15f0 <floor+0xb8>
    159c:	ec41 0b10 	vmov	d0, r0, r1
    15a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15a2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
    15a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    15aa:	40df      	lsrs	r7, r3
    15ac:	4207      	tst	r7, r0
    15ae:	d0f5      	beq.n	159c <floor+0x64>
    15b0:	a31f      	add	r3, pc, #124	; (adr r3, 1630 <floor+0xf8>)
    15b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b6:	f7ff f9f9 	bl	9ac <__adddf3>
    15ba:	2200      	movs	r2, #0
    15bc:	2300      	movs	r3, #0
    15be:	f7ff fe3b 	bl	1238 <__aeabi_dcmpgt>
    15c2:	2800      	cmp	r0, #0
    15c4:	d0e0      	beq.n	1588 <floor+0x50>
    15c6:	2c00      	cmp	r4, #0
    15c8:	db23      	blt.n	1612 <floor+0xda>
    15ca:	ea26 0607 	bic.w	r6, r6, r7
    15ce:	e7db      	b.n	1588 <floor+0x50>
    15d0:	a317      	add	r3, pc, #92	; (adr r3, 1630 <floor+0xf8>)
    15d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15d6:	f7ff f9e9 	bl	9ac <__adddf3>
    15da:	2200      	movs	r2, #0
    15dc:	2300      	movs	r3, #0
    15de:	f7ff fe2b 	bl	1238 <__aeabi_dcmpgt>
    15e2:	2800      	cmp	r0, #0
    15e4:	d0d0      	beq.n	1588 <floor+0x50>
    15e6:	2c00      	cmp	r4, #0
    15e8:	db0a      	blt.n	1600 <floor+0xc8>
    15ea:	2600      	movs	r6, #0
    15ec:	4634      	mov	r4, r6
    15ee:	e7cb      	b.n	1588 <floor+0x50>
    15f0:	ee10 2a10 	vmov	r2, s0
    15f4:	460b      	mov	r3, r1
    15f6:	f7ff f9d9 	bl	9ac <__adddf3>
    15fa:	ec41 0b10 	vmov	d0, r0, r1
    15fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1600:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    1604:	4a0d      	ldr	r2, [pc, #52]	; (163c <floor+0x104>)
    1606:	431e      	orrs	r6, r3
    1608:	2e00      	cmp	r6, #0
    160a:	bf18      	it	ne
    160c:	4614      	movne	r4, r2
    160e:	2600      	movs	r6, #0
    1610:	e7ba      	b.n	1588 <floor+0x50>
    1612:	2d14      	cmp	r5, #20
    1614:	d008      	beq.n	1628 <floor+0xf0>
    1616:	2301      	movs	r3, #1
    1618:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
    161c:	fa03 f505 	lsl.w	r5, r3, r5
    1620:	19ae      	adds	r6, r5, r6
    1622:	bf28      	it	cs
    1624:	18e4      	addcs	r4, r4, r3
    1626:	e7d0      	b.n	15ca <floor+0x92>
    1628:	3401      	adds	r4, #1
    162a:	e7ce      	b.n	15ca <floor+0x92>
    162c:	f3af 8000 	nop.w
    1630:	8800759c 	.word	0x8800759c
    1634:	7e37e43c 	.word	0x7e37e43c
    1638:	000fffff 	.word	0x000fffff
    163c:	bff00000 	.word	0xbff00000

00001640 <nan>:
    1640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1648 <nan+0x8>
    1644:	4770      	bx	lr
    1646:	bf00      	nop
    1648:	00000000 	.word	0x00000000
    164c:	7ff80000 	.word	0x7ff80000

00001650 <setup>:
alignas(16) static uint8_t tensor_arena[kTensorArenaSize];
} // namespace

// The name of this function is important for Arduino compatibility.
void setup()
{
    1650:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Set up logging. Google style is to avoid globals or statics because of
	// lifetime uncertainty, but since this has a trivial destructor it's okay.
	// NOLINTNEXTLINE(runtime-global-variables)

	static tflite::MicroErrorReporter micro_error_reporter;
    1652:	4c43      	ldr	r4, [pc, #268]	; (1760 <setup+0x110>)
{
    1654:	b085      	sub	sp, #20
	outputInit();
    1656:	f000 f931 	bl	18bc <_Z10outputInitv>
	static tflite::MicroErrorReporter micro_error_reporter;
    165a:	7823      	ldrb	r3, [r4, #0]
    165c:	f3bf 8f5b 	dmb	ish
    1660:	07da      	lsls	r2, r3, #31
    1662:	d40b      	bmi.n	167c <setup+0x2c>
    1664:	4620      	mov	r0, r4
    1666:	f01c ffa3 	bl	1e5b0 <__cxa_guard_acquire>
    166a:	b138      	cbz	r0, 167c <setup+0x2c>
    166c:	4620      	mov	r0, r4
    166e:	f01c ffab 	bl	1e5c8 <__cxa_guard_release>
    1672:	4a3c      	ldr	r2, [pc, #240]	; (1764 <setup+0x114>)
    1674:	493c      	ldr	r1, [pc, #240]	; (1768 <setup+0x118>)
    1676:	483d      	ldr	r0, [pc, #244]	; (176c <setup+0x11c>)
    1678:	f013 fc29 	bl	14ece <__aeabi_atexit>
	error_reporter = &micro_error_reporter;
    167c:	4d3c      	ldr	r5, [pc, #240]	; (1770 <setup+0x120>)
    167e:	4b3b      	ldr	r3, [pc, #236]	; (176c <setup+0x11c>)
    1680:	602b      	str	r3, [r5, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    1682:	4b3c      	ldr	r3, [pc, #240]	; (1774 <setup+0x124>)

	// Map the model into a usable data structure. This doesn't involve any
	// copying or parsing, it's a very lightweight operation.
	model = tflite::GetModel(model_tflite);
    1684:	4c3c      	ldr	r4, [pc, #240]	; (1778 <setup+0x128>)
    1686:	681a      	ldr	r2, [r3, #0]
    1688:	18d1      	adds	r1, r2, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    168a:	58d3      	ldr	r3, [r2, r3]
    168c:	6021      	str	r1, [r4, #0]
    168e:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1690:	881a      	ldrh	r2, [r3, #0]
    1692:	2a04      	cmp	r2, #4
    1694:	d962      	bls.n	175c <setup+0x10c>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    1696:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1698:	b112      	cbz	r2, 16a0 <setup+0x50>
    169a:	588a      	ldr	r2, [r1, r2]

	if (model->version() != TFLITE_SCHEMA_VERSION) {
    169c:	2a03      	cmp	r2, #3
    169e:	d004      	beq.n	16aa <setup+0x5a>
		TF_LITE_REPORT_ERROR(
    16a0:	4936      	ldr	r1, [pc, #216]	; (177c <setup+0x12c>)
    16a2:	4832      	ldr	r0, [pc, #200]	; (176c <setup+0x11c>)
    16a4:	2303      	movs	r3, #3
    16a6:	f01c fe0b 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		// return;
	}

	// This pulls in all the operation implementations we need.
	// NOLINTNEXTLINE(runtime-global-variables)
	static tflite::AllOpsResolver resolver;
    16aa:	4e35      	ldr	r6, [pc, #212]	; (1780 <setup+0x130>)
    16ac:	7833      	ldrb	r3, [r6, #0]
    16ae:	f3bf 8f5b 	dmb	ish
    16b2:	07db      	lsls	r3, r3, #31
    16b4:	d40e      	bmi.n	16d4 <setup+0x84>
    16b6:	4630      	mov	r0, r6
    16b8:	f01c ff7a 	bl	1e5b0 <__cxa_guard_acquire>
    16bc:	b150      	cbz	r0, 16d4 <setup+0x84>
    16be:	4831      	ldr	r0, [pc, #196]	; (1784 <setup+0x134>)
    16c0:	f004 f956 	bl	5970 <_ZN6tflite14AllOpsResolverC1Ev>
    16c4:	4630      	mov	r0, r6
    16c6:	f01c ff7f 	bl	1e5c8 <__cxa_guard_release>
    16ca:	4a26      	ldr	r2, [pc, #152]	; (1764 <setup+0x114>)
    16cc:	492e      	ldr	r1, [pc, #184]	; (1788 <setup+0x138>)
    16ce:	482d      	ldr	r0, [pc, #180]	; (1784 <setup+0x134>)
    16d0:	f013 fbfd 	bl	14ece <__aeabi_atexit>

	// Build an interpreter to run the model with.
	static tflite::MicroInterpreter static_interpreter(model, resolver,
							   tensor_arena,
							   kTensorArenaSize,
							   error_reporter);
    16d4:	4f2d      	ldr	r7, [pc, #180]	; (178c <setup+0x13c>)
    16d6:	783b      	ldrb	r3, [r7, #0]
    16d8:	f3bf 8f5b 	dmb	ish
    16dc:	f013 0601 	ands.w	r6, r3, #1
    16e0:	d117      	bne.n	1712 <setup+0xc2>
    16e2:	4638      	mov	r0, r7
    16e4:	f01c ff64 	bl	1e5b0 <__cxa_guard_acquire>
    16e8:	b198      	cbz	r0, 1712 <setup+0xc2>
    16ea:	9602      	str	r6, [sp, #8]
    16ec:	682b      	ldr	r3, [r5, #0]
    16ee:	9301      	str	r3, [sp, #4]
    16f0:	f647 13b8 	movw	r3, #31160	; 0x79b8
    16f4:	9300      	str	r3, [sp, #0]
    16f6:	4a23      	ldr	r2, [pc, #140]	; (1784 <setup+0x134>)
    16f8:	6821      	ldr	r1, [r4, #0]
    16fa:	4b25      	ldr	r3, [pc, #148]	; (1790 <setup+0x140>)
    16fc:	4825      	ldr	r0, [pc, #148]	; (1794 <setup+0x144>)
    16fe:	f014 f852 	bl	157a6 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
    1702:	4638      	mov	r0, r7
    1704:	f01c ff60 	bl	1e5c8 <__cxa_guard_release>
    1708:	4a16      	ldr	r2, [pc, #88]	; (1764 <setup+0x114>)
    170a:	4923      	ldr	r1, [pc, #140]	; (1798 <setup+0x148>)
    170c:	4821      	ldr	r0, [pc, #132]	; (1794 <setup+0x144>)
    170e:	f013 fbde 	bl	14ece <__aeabi_atexit>
	interpreter = &static_interpreter;
    1712:	4c22      	ldr	r4, [pc, #136]	; (179c <setup+0x14c>)
    1714:	481f      	ldr	r0, [pc, #124]	; (1794 <setup+0x144>)
    1716:	6020      	str	r0, [r4, #0]

	// Allocate memory from the tensor_arena for the model's tensors.
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
    1718:	f005 f9c6 	bl	6aa8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
	if (allocate_status != kTfLiteOk) {
    171c:	b118      	cbz	r0, 1726 <setup+0xd6>
		TF_LITE_REPORT_ERROR(error_reporter,
    171e:	4920      	ldr	r1, [pc, #128]	; (17a0 <setup+0x150>)
    1720:	6828      	ldr	r0, [r5, #0]
    1722:	f01c fdcd 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
				     "AllocateTensors() failed");
	}

	TF_LITE_REPORT_ERROR(error_reporter,"size : %d",interpreter->arena_used_bytes());
    1726:	6823      	ldr	r3, [r4, #0]
    1728:	682d      	ldr	r5, [r5, #0]
  // Returns the actual used arena in bytes. This method gives the optimal arena
  // size. It's only available after `AllocateTensors` has been called.
  // Note that normally `tensor_arena` requires 16 bytes alignment to fully
  // utilize the space. If it's not the case, the optimial arena size would be
  // arena_used_bytes() + 16.
  size_t arena_used_bytes() const { return allocator_.used_bytes(); }
    172a:	6e18      	ldr	r0, [r3, #96]	; 0x60
    172c:	f013 ffd3 	bl	156d6 <_ZNK6tflite14MicroAllocator10used_bytesEv>
    1730:	491c      	ldr	r1, [pc, #112]	; (17a4 <setup+0x154>)
    1732:	4602      	mov	r2, r0
    1734:	4628      	mov	r0, r5
    1736:	f01c fdc3 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>

	// Obtain pointers to the model's input and output tensors.
	input = interpreter->input(0);
    173a:	6820      	ldr	r0, [r4, #0]
    173c:	2100      	movs	r1, #0
    173e:	f005 f97b 	bl	6a38 <_ZN6tflite16MicroInterpreter5inputEj>
    1742:	4b19      	ldr	r3, [pc, #100]	; (17a8 <setup+0x158>)
	output = interpreter->output(0);
    1744:	2100      	movs	r1, #0
	input = interpreter->input(0);
    1746:	6018      	str	r0, [r3, #0]
	output = interpreter->output(0);
    1748:	6820      	ldr	r0, [r4, #0]
    174a:	f005 f991 	bl	6a70 <_ZN6tflite16MicroInterpreter6outputEj>
    174e:	4b17      	ldr	r3, [pc, #92]	; (17ac <setup+0x15c>)
    1750:	6018      	str	r0, [r3, #0]

	// Keep track of how many inferences we have performed.
	inference_count = 0;
    1752:	4b17      	ldr	r3, [pc, #92]	; (17b0 <setup+0x160>)
    1754:	2200      	movs	r2, #0
    1756:	601a      	str	r2, [r3, #0]
}
    1758:	b005      	add	sp, #20
    175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175c:	2200      	movs	r2, #0
    175e:	e79f      	b.n	16a0 <setup+0x50>
    1760:	200082b4 	.word	0x200082b4
    1764:	200096c0 	.word	0x200096c0
    1768:	0001441f 	.word	0x0001441f
    176c:	20000000 	.word	0x20000000
    1770:	200082c0 	.word	0x200082c0
    1774:	0001eca0 	.word	0x0001eca0
    1778:	200082cc 	.word	0x200082cc
    177c:	00025e5c 	.word	0x00025e5c
    1780:	200082b8 	.word	0x200082b8
    1784:	2000834c 	.word	0x2000834c
    1788:	00014421 	.word	0x00014421
    178c:	200082b0 	.word	0x200082b0
    1790:	200008c0 	.word	0x200008c0
    1794:	200082d4 	.word	0x200082d4
    1798:	000157ef 	.word	0x000157ef
    179c:	200082bc 	.word	0x200082bc
    17a0:	00025ea3 	.word	0x00025ea3
    17a4:	00025ebc 	.word	0x00025ebc
    17a8:	200082c8 	.word	0x200082c8
    17ac:	200082d0 	.word	0x200082d0
    17b0:	200082c4 	.word	0x200082c4

000017b4 <loop>:

// The name of this function is important for Arduino compatibility.
void loop()
{
    17b4:	b570      	push	{r4, r5, r6, lr}


		// k_sleep(K_SECONDS(1));


		for (int d = 0; d < 784; ++d) {input->data.f[d] = mnistInput[d]/255;}
    17b6:	4b36      	ldr	r3, [pc, #216]	; (1890 <loop+0xdc>)
    17b8:	4a36      	ldr	r2, [pc, #216]	; (1894 <loop+0xe0>)
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1898 <loop+0xe4>
    17c0:	685b      	ldr	r3, [r3, #4]
{
    17c2:	ed2d 8b02 	vpush	{d8}
    17c6:	f503 6144 	add.w	r1, r3, #3136	; 0xc40
		for (int d = 0; d < 784; ++d) {input->data.f[d] = mnistInput[d]/255;}
    17ca:	ecf2 6a01 	vldmia	r2!, {s13}
    17ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
    17d2:	ece3 7a01 	vstmia	r3!, {s15}
    17d6:	428b      	cmp	r3, r1
    17d8:	d1f7      	bne.n	17ca <loop+0x16>
	return z_impl_k_uptime_ticks();
    17da:	f013 feb2 	bl	15542 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    17de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    17e2:	460a      	mov	r2, r1
    17e4:	fba0 0103 	umull	r0, r1, r0, r3
    17e8:	fb03 1102 	mla	r1, r3, r2, r1

		/********** capture initial time stamp ********/
		time_stamp = k_uptime_get();

		
		TfLiteStatus invoke_status = interpreter->Invoke();
    17ec:	4b2b      	ldr	r3, [pc, #172]	; (189c <loop+0xe8>)
    17ee:	0bc4      	lsrs	r4, r0, #15
    17f0:	6818      	ldr	r0, [r3, #0]
    17f2:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
    17f6:	0bcd      	lsrs	r5, r1, #15
    17f8:	f005 f9d4 	bl	6ba4 <_ZN6tflite16MicroInterpreter6InvokeEv>

		if (invoke_status != kTfLiteOk) {
    17fc:	b120      	cbz	r0, 1808 <loop+0x54>
			TF_LITE_REPORT_ERROR(error_reporter,
    17fe:	4b28      	ldr	r3, [pc, #160]	; (18a0 <loop+0xec>)
    1800:	4928      	ldr	r1, [pc, #160]	; (18a4 <loop+0xf0>)
    1802:	6818      	ldr	r0, [r3, #0]
    1804:	f01c fd5c 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
						"Invoke failed.");
		}

		float max_score = output->data.f[0];
    1808:	4b27      	ldr	r3, [pc, #156]	; (18a8 <loop+0xf4>)
		float guess = 0;
    180a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 18ac <loop+0xf8>
		float max_score = output->data.f[0];
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	685a      	ldr	r2, [r3, #4]
    1812:	ecf2 7a01 	vldmia	r2!, {s15}

		for (int category_index = 1; category_index < 10;category_index++) 
    1816:	2301      	movs	r3, #1
		{
			float category_score = output->data.f[category_index];
    1818:	ecb2 7a01 	vldmia	r2!, {s14}
			// TF_LITE_REPORT_ERROR( error_reporter, "Category score= %f",category_score);
			if (category_score > max_score) {
    181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				max_score = category_score;
				guess = category_index;
    1824:	bfc8      	it	gt
    1826:	ee07 3a90 	vmovgt	s15, r3
		for (int category_index = 1; category_index < 10;category_index++) 
    182a:	f103 0301 	add.w	r3, r3, #1
				guess = category_index;
    182e:	bfc4      	itt	gt
    1830:	eeb8 8ae7 	vcvtgt.f32.s32	s16, s15
				max_score = category_score;
    1834:	eef0 7a47 	vmovgt.f32	s15, s14
		for (int category_index = 1; category_index < 10;category_index++) 
    1838:	2b0a      	cmp	r3, #10
    183a:	d1ed      	bne.n	1818 <loop+0x64>
    183c:	f013 fe81 	bl	15542 <z_impl_k_uptime_ticks>
    1840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1844:	460a      	mov	r2, r1
    1846:	fba0 0103 	umull	r0, r1, r0, r3
    184a:	fb03 1102 	mla	r1, r3, r2, r1
    184e:	0bc2      	lsrs	r2, r0, #15
		 }
		

		// ************ GET TIMESTAMP***********
		milliseconds_spent = k_uptime_delta(&time_stamp);
		TF_LITE_REPORT_ERROR( error_reporter, "Time exec = %d",milliseconds_spent);
    1850:	4e13      	ldr	r6, [pc, #76]	; (18a0 <loop+0xec>)
    1852:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    1856:	1b12      	subs	r2, r2, r4
    1858:	ea4f 33d1 	mov.w	r3, r1, lsr #15
    185c:	eb63 0305 	sbc.w	r3, r3, r5
    1860:	4913      	ldr	r1, [pc, #76]	; (18b0 <loop+0xfc>)
    1862:	6830      	ldr	r0, [r6, #0]
    1864:	f01c fd2c 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		// for each supported hardware target.
		// float test_y = 7;

		// k_sleep(K_SECONDS(1));

		HandleOutput(error_reporter, guess, mnistOutput[0]);
    1868:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    186c:	2207      	movs	r2, #7
    186e:	ee17 1a90 	vmov	r1, s15
    1872:	6830      	ldr	r0, [r6, #0]
    1874:	f000 f836 	bl	18e4 <_Z12HandleOutputPN6tflite13ErrorReporterEii>


		inference_count += 1;
    1878:	4a0e      	ldr	r2, [pc, #56]	; (18b4 <loop+0x100>)
		if (inference_count >= kInferencesPerCycle)
    187a:	490f      	ldr	r1, [pc, #60]	; (18b8 <loop+0x104>)
		inference_count += 1;
    187c:	6813      	ldr	r3, [r2, #0]
			inference_count = 0;
    187e:	6809      	ldr	r1, [r1, #0]


	// Increment the inference_counter, and reset it if we have reached
	// the total number per cycle

}
    1880:	ecbd 8b02 	vpop	{d8}
		inference_count += 1;
    1884:	3301      	adds	r3, #1
			inference_count = 0;
    1886:	428b      	cmp	r3, r1
    1888:	bfa8      	it	ge
    188a:	2300      	movge	r3, #0
    188c:	6013      	str	r3, [r2, #0]
}
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	200082c8 	.word	0x200082c8
    1894:	000248f8 	.word	0x000248f8
    1898:	437f0000 	.word	0x437f0000
    189c:	200082bc 	.word	0x200082bc
    18a0:	200082c0 	.word	0x200082c0
    18a4:	00025ec6 	.word	0x00025ec6
    18a8:	200082d0 	.word	0x200082d0
    18ac:	00000000 	.word	0x00000000
    18b0:	00025ed5 	.word	0x00025ed5
    18b4:	200082c4 	.word	0x200082c4
    18b8:	00025538 	.word	0x00025538

000018bc <_Z10outputInitv>:
struct device *pwm;
static u32_t period;
static u32_t new_period;

void outputInit()
{
    18bc:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    18be:	4806      	ldr	r0, [pc, #24]	; (18d8 <_Z10outputInitv+0x1c>)
    18c0:	f002 ff52 	bl	4768 <z_impl_device_get_binding>
	pwm = device_get_binding(PWM_LABEL);
    18c4:	4b05      	ldr	r3, [pc, #20]	; (18dc <_Z10outputInitv+0x20>)
    18c6:	6018      	str	r0, [r3, #0]
	if (!pwm) {
    18c8:	b928      	cbnz	r0, 18d6 <_Z10outputInitv+0x1a>
		printk("Error: didn't find %s device\n", PWM_LABEL);
		return;
	}

 	period = MIN_PERIOD_USEC;
}
    18ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Error: didn't find %s device\n", PWM_LABEL);
    18ce:	4902      	ldr	r1, [pc, #8]	; (18d8 <_Z10outputInitv+0x1c>)
    18d0:	4803      	ldr	r0, [pc, #12]	; (18e0 <_Z10outputInitv+0x24>)
    18d2:	f012 bdd6 	b.w	14482 <printk>
}
    18d6:	bd08      	pop	{r3, pc}
    18d8:	00025ee4 	.word	0x00025ee4
    18dc:	200095dc 	.word	0x200095dc
    18e0:	00025eea 	.word	0x00025eea

000018e4 <_Z12HandleOutputPN6tflite13ErrorReporterEii>:

void HandleOutput(tflite::ErrorReporter* error_reporter, int prediction, int label) {
    18e4:	4613      	mov	r3, r2
  TF_LITE_REPORT_ERROR(error_reporter, "Model estimates [%d] label [%d]\n", prediction, label);
    18e6:	460a      	mov	r2, r1
    18e8:	4901      	ldr	r1, [pc, #4]	; (18f0 <_Z12HandleOutputPN6tflite13ErrorReporterEii+0xc>)
    18ea:	f01c bce9 	b.w	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    18ee:	bf00      	nop
    18f0:	00025f08 	.word	0x00025f08

000018f4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    18f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f8:	ed2d 8b02 	vpush	{d8}
    18fc:	b083      	sub	sp, #12
    18fe:	469a      	mov	sl, r3
    1900:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1902:	f8df b094 	ldr.w	fp, [pc, #148]	; 1998 <_printk_dec_ulong+0xa4>
    1906:	2c01      	cmp	r4, #1
    1908:	bfb8      	it	lt
    190a:	2401      	movlt	r4, #1
    190c:	2b01      	cmp	r3, #1
    190e:	bf0c      	ite	eq
    1910:	2330      	moveq	r3, #48	; 0x30
    1912:	2320      	movne	r3, #32
    1914:	ee08 3a10 	vmov	s16, r3
    1918:	4615      	mov	r5, r2
    191a:	4606      	mov	r6, r0
    191c:	2701      	movs	r7, #1
    191e:	f04f 080a 	mov.w	r8, #10
    1922:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    1924:	fbb5 f9fb 	udiv	r9, r5, fp
    1928:	b90a      	cbnz	r2, 192e <_printk_dec_ulong+0x3a>
    192a:	45ab      	cmp	fp, r5
    192c:	d821      	bhi.n	1972 <_printk_dec_ulong+0x7e>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    192e:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1932:	9100      	str	r1, [sp, #0]
			digits++;
    1934:	3701      	adds	r7, #1
			out((int)(remainder / pos + 48), ctx);
    1936:	47b0      	blx	r6
			found_largest_digit = 1;
    1938:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
    193a:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
    193c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    1940:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    1944:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
    1948:	f04f 030a 	mov.w	r3, #10
    194c:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
    1950:	d1e8      	bne.n	1924 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
    1952:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1956:	9100      	str	r1, [sp, #0]
    1958:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    195a:	f1ba 0f03 	cmp.w	sl, #3
    195e:	9900      	ldr	r1, [sp, #0]
    1960:	d102      	bne.n	1968 <_printk_dec_ulong+0x74>
		remaining = min_width - digits;
    1962:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    1964:	2c00      	cmp	r4, #0
    1966:	dc11      	bgt.n	198c <_printk_dec_ulong+0x98>
			out(' ', ctx);
		}
	}
}
    1968:	b003      	add	sp, #12
    196a:	ecbd 8b02 	vpop	{d8}
    196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1972:	4544      	cmp	r4, r8
    1974:	dbe2      	blt.n	193c <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
    1976:	f1ba 0f02 	cmp.w	sl, #2
    197a:	d8df      	bhi.n	193c <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    197c:	ee18 0a10 	vmov	r0, s16
    1980:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
    1984:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1986:	47b0      	blx	r6
			digits++;
    1988:	9a01      	ldr	r2, [sp, #4]
    198a:	e7d6      	b.n	193a <_printk_dec_ulong+0x46>
			out(' ', ctx);
    198c:	2020      	movs	r0, #32
    198e:	9100      	str	r1, [sp, #0]
    1990:	3c01      	subs	r4, #1
    1992:	47b0      	blx	r6
    1994:	9900      	ldr	r1, [sp, #0]
    1996:	e7e5      	b.n	1964 <_printk_dec_ulong+0x70>
    1998:	3b9aca00 	.word	0x3b9aca00

0000199c <__printk_hook_install>:
	_char_out = fn;
    199c:	4b01      	ldr	r3, [pc, #4]	; (19a4 <__printk_hook_install+0x8>)
    199e:	6018      	str	r0, [r3, #0]
}
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	20000004 	.word	0x20000004

000019a8 <z_vprintk>:
{
    19a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19ac:	b08d      	sub	sp, #52	; 0x34
    19ae:	461c      	mov	r4, r3
	char length_mod = 0;
    19b0:	2700      	movs	r7, #0
    19b2:	1e53      	subs	r3, r2, #1
{
    19b4:	4605      	mov	r5, r0
    19b6:	468b      	mov	fp, r1
    19b8:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    19ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    19be:	46b8      	mov	r8, r7
			might_format = 0;
    19c0:	2600      	movs	r6, #0
					break;
    19c2:	e005      	b.n	19d0 <z_vprintk+0x28>
		if (!might_format) {
    19c4:	b96e      	cbnz	r6, 19e2 <z_vprintk+0x3a>
			if (*fmt != '%') {
    19c6:	2825      	cmp	r0, #37	; 0x25
    19c8:	f000 8171 	beq.w	1cae <z_vprintk+0x306>
				out((int)*fmt, ctx);
    19cc:	4659      	mov	r1, fp
    19ce:	47a8      	blx	r5
	while (*fmt) {
    19d0:	9b03      	ldr	r3, [sp, #12]
    19d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    19d6:	9303      	str	r3, [sp, #12]
    19d8:	2800      	cmp	r0, #0
    19da:	d1f3      	bne.n	19c4 <z_vprintk+0x1c>
}
    19dc:	b00d      	add	sp, #52	; 0x34
    19de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    19e2:	287a      	cmp	r0, #122	; 0x7a
    19e4:	d80a      	bhi.n	19fc <z_vprintk+0x54>
    19e6:	2862      	cmp	r0, #98	; 0x62
    19e8:	d810      	bhi.n	1a0c <z_vprintk+0x64>
    19ea:	2830      	cmp	r0, #48	; 0x30
    19ec:	d054      	beq.n	1a98 <z_vprintk+0xf0>
    19ee:	d845      	bhi.n	1a7c <z_vprintk+0xd4>
    19f0:	2825      	cmp	r0, #37	; 0x25
    19f2:	f000 815a 	beq.w	1caa <z_vprintk+0x302>
    19f6:	282d      	cmp	r0, #45	; 0x2d
    19f8:	f000 815f 	beq.w	1cba <z_vprintk+0x312>
					out((int)'%', ctx);
    19fc:	4659      	mov	r1, fp
    19fe:	2025      	movs	r0, #37	; 0x25
    1a00:	47a8      	blx	r5
					out((int)*fmt, ctx);
    1a02:	9b03      	ldr	r3, [sp, #12]
    1a04:	7818      	ldrb	r0, [r3, #0]
    1a06:	4659      	mov	r1, fp
    1a08:	47a8      	blx	r5
    1a0a:	e7d9      	b.n	19c0 <z_vprintk+0x18>
    1a0c:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    1a10:	2b17      	cmp	r3, #23
    1a12:	d8f3      	bhi.n	19fc <z_vprintk+0x54>
    1a14:	a201      	add	r2, pc, #4	; (adr r2, 1a1c <z_vprintk+0x74>)
    1a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a1a:	bf00      	nop
    1a1c:	00001ca3 	.word	0x00001ca3
    1a20:	00001ae7 	.word	0x00001ae7
    1a24:	000019fd 	.word	0x000019fd
    1a28:	000019fd 	.word	0x000019fd
    1a2c:	000019fd 	.word	0x000019fd
    1a30:	00001ac9 	.word	0x00001ac9
    1a34:	00001ae7 	.word	0x00001ae7
    1a38:	000019fd 	.word	0x000019fd
    1a3c:	000019fd 	.word	0x000019fd
    1a40:	00001ac9 	.word	0x00001ac9
    1a44:	000019fd 	.word	0x000019fd
    1a48:	000019fd 	.word	0x000019fd
    1a4c:	000019fd 	.word	0x000019fd
    1a50:	00001b89 	.word	0x00001b89
    1a54:	000019fd 	.word	0x000019fd
    1a58:	000019fd 	.word	0x000019fd
    1a5c:	00001c73 	.word	0x00001c73
    1a60:	000019fd 	.word	0x000019fd
    1a64:	00001b57 	.word	0x00001b57
    1a68:	000019fd 	.word	0x000019fd
    1a6c:	000019fd 	.word	0x000019fd
    1a70:	00001a85 	.word	0x00001a85
    1a74:	000019fd 	.word	0x000019fd
    1a78:	00001ac9 	.word	0x00001ac9
			switch (*fmt) {
    1a7c:	2839      	cmp	r0, #57	; 0x39
    1a7e:	d91a      	bls.n	1ab6 <z_vprintk+0x10e>
    1a80:	2858      	cmp	r0, #88	; 0x58
    1a82:	d1bb      	bne.n	19fc <z_vprintk+0x54>
				if (*fmt == 'p') {
    1a84:	9b03      	ldr	r3, [sp, #12]
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	2b70      	cmp	r3, #112	; 0x70
    1a8a:	f040 8088 	bne.w	1b9e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    1a8e:	f854 3b04 	ldr.w	r3, [r4], #4
    1a92:	9306      	str	r3, [sp, #24]
    1a94:	2200      	movs	r2, #0
    1a96:	e090      	b.n	1bba <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    1a98:	f1b9 0f00 	cmp.w	r9, #0
    1a9c:	da0e      	bge.n	1abc <z_vprintk+0x114>
    1a9e:	f1b8 0f00 	cmp.w	r8, #0
    1aa2:	f000 810d 	beq.w	1cc0 <z_vprintk+0x318>
					min_width = *fmt - '0';
    1aa6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1aaa:	f1b8 0f00 	cmp.w	r8, #0
    1aae:	bf08      	it	eq
    1ab0:	f04f 0802 	moveq.w	r8, #2
    1ab4:	e78c      	b.n	19d0 <z_vprintk+0x28>
				if (min_width < 0) {
    1ab6:	f1b9 0f00 	cmp.w	r9, #0
    1aba:	dbf4      	blt.n	1aa6 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    1abc:	230a      	movs	r3, #10
    1abe:	fb03 0909 	mla	r9, r3, r9, r0
    1ac2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1ac6:	e7f0      	b.n	1aaa <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    1ac8:	2868      	cmp	r0, #104	; 0x68
    1aca:	d103      	bne.n	1ad4 <z_vprintk+0x12c>
    1acc:	2f68      	cmp	r7, #104	; 0x68
    1ace:	d106      	bne.n	1ade <z_vprintk+0x136>
					length_mod = 'H';
    1ad0:	2748      	movs	r7, #72	; 0x48
    1ad2:	e77d      	b.n	19d0 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1ad4:	286c      	cmp	r0, #108	; 0x6c
    1ad6:	d102      	bne.n	1ade <z_vprintk+0x136>
    1ad8:	2f6c      	cmp	r7, #108	; 0x6c
    1ada:	f000 80f4 	beq.w	1cc6 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    1ade:	2f00      	cmp	r7, #0
    1ae0:	d18c      	bne.n	19fc <z_vprintk+0x54>
    1ae2:	4607      	mov	r7, r0
    1ae4:	e774      	b.n	19d0 <z_vprintk+0x28>
				if (length_mod == 'z') {
    1ae6:	2f7a      	cmp	r7, #122	; 0x7a
    1ae8:	d102      	bne.n	1af0 <z_vprintk+0x148>
					d = va_arg(ap, int);
    1aea:	f854 6b04 	ldr.w	r6, [r4], #4
    1aee:	e021      	b.n	1b34 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    1af0:	2f6c      	cmp	r7, #108	; 0x6c
    1af2:	d0fa      	beq.n	1aea <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1af4:	2f4c      	cmp	r7, #76	; 0x4c
    1af6:	d1f8      	bne.n	1aea <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    1af8:	3407      	adds	r4, #7
    1afa:	f024 0407 	bic.w	r4, r4, #7
    1afe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    1b06:	9b04      	ldr	r3, [sp, #16]
    1b08:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    1b0c:	9b05      	ldr	r3, [sp, #20]
    1b0e:	9108      	str	r1, [sp, #32]
    1b10:	f143 0100 	adc.w	r1, r3, #0
    1b14:	9109      	str	r1, [sp, #36]	; 0x24
    1b16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1b1a:	2100      	movs	r1, #0
    1b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b20:	4299      	cmp	r1, r3
    1b22:	bf08      	it	eq
    1b24:	4290      	cmpeq	r0, r2
    1b26:	d204      	bcs.n	1b32 <z_vprintk+0x18a>
						print_err(out, ctx);
    1b28:	4659      	mov	r1, fp
    1b2a:	4628      	mov	r0, r5
    1b2c:	f012 fc88 	bl	14440 <print_err>
						break;
    1b30:	e746      	b.n	19c0 <z_vprintk+0x18>
					d = lld;
    1b32:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1b34:	2e00      	cmp	r6, #0
    1b36:	da05      	bge.n	1b44 <z_vprintk+0x19c>
					out((int)'-', ctx);
    1b38:	4659      	mov	r1, fp
    1b3a:	202d      	movs	r0, #45	; 0x2d
    1b3c:	47a8      	blx	r5
					d = -d;
    1b3e:	4276      	negs	r6, r6
					min_width--;
    1b40:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    1b44:	f8cd 9000 	str.w	r9, [sp]
    1b48:	4643      	mov	r3, r8
    1b4a:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    1b4c:	4659      	mov	r1, fp
    1b4e:	4628      	mov	r0, r5
    1b50:	f7ff fed0 	bl	18f4 <_printk_dec_ulong>
				break;
    1b54:	e734      	b.n	19c0 <z_vprintk+0x18>
				if (length_mod == 'z') {
    1b56:	2f7a      	cmp	r7, #122	; 0x7a
    1b58:	d102      	bne.n	1b60 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    1b5a:	f854 2b04 	ldr.w	r2, [r4], #4
    1b5e:	e00f      	b.n	1b80 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    1b60:	2f6c      	cmp	r7, #108	; 0x6c
    1b62:	d0fa      	beq.n	1b5a <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1b64:	2f4c      	cmp	r7, #76	; 0x4c
    1b66:	d1f8      	bne.n	1b5a <z_vprintk+0x1b2>
					unsigned long long llu =
    1b68:	3407      	adds	r4, #7
    1b6a:	f024 0407 	bic.w	r4, r4, #7
    1b6e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    1b72:	2100      	movs	r1, #0
    1b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b78:	4299      	cmp	r1, r3
    1b7a:	bf08      	it	eq
    1b7c:	4290      	cmpeq	r0, r2
    1b7e:	d3d3      	bcc.n	1b28 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1b80:	f8cd 9000 	str.w	r9, [sp]
    1b84:	4643      	mov	r3, r8
    1b86:	e7e1      	b.n	1b4c <z_vprintk+0x1a4>
				out('0', ctx);
    1b88:	4659      	mov	r1, fp
    1b8a:	2030      	movs	r0, #48	; 0x30
    1b8c:	47a8      	blx	r5
				out('x', ctx);
    1b8e:	4659      	mov	r1, fp
    1b90:	2078      	movs	r0, #120	; 0x78
    1b92:	47a8      	blx	r5
					min_width = 8;
    1b94:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    1b98:	f04f 0801 	mov.w	r8, #1
    1b9c:	e772      	b.n	1a84 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    1b9e:	2f6c      	cmp	r7, #108	; 0x6c
    1ba0:	f43f af75 	beq.w	1a8e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    1ba4:	2f4c      	cmp	r7, #76	; 0x4c
    1ba6:	f47f af72 	bne.w	1a8e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    1baa:	1de3      	adds	r3, r4, #7
    1bac:	f023 0307 	bic.w	r3, r3, #7
    1bb0:	461c      	mov	r4, r3
    1bb2:	f854 2b08 	ldr.w	r2, [r4], #8
    1bb6:	9206      	str	r2, [sp, #24]
    1bb8:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    1bba:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    1bbc:	2310      	movs	r3, #16
	int digits = 0;
    1bbe:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    1bc0:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    1bc2:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    1bc6:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    1bca:	9906      	ldr	r1, [sp, #24]
    1bcc:	f1ca 0e20 	rsb	lr, sl, #32
    1bd0:	f1aa 0c20 	sub.w	ip, sl, #32
    1bd4:	fa21 f00a 	lsr.w	r0, r1, sl
    1bd8:	fa02 fe0e 	lsl.w	lr, r2, lr
    1bdc:	ea40 000e 	orr.w	r0, r0, lr
    1be0:	fa22 fc0c 	lsr.w	ip, r2, ip
    1be4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1be8:	f010 000f 	ands.w	r0, r0, #15
    1bec:	d107      	bne.n	1bfe <z_vprintk+0x256>
    1bee:	9907      	ldr	r1, [sp, #28]
    1bf0:	b911      	cbnz	r1, 1bf8 <z_vprintk+0x250>
    1bf2:	f1ba 0f00 	cmp.w	sl, #0
    1bf6:	d125      	bne.n	1c44 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    1bf8:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1bfc:	e005      	b.n	1c0a <z_vprintk+0x262>
    1bfe:	2809      	cmp	r0, #9
    1c00:	bf8c      	ite	hi
    1c02:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1c06:	f04f 0c30 	movls.w	ip, #48	; 0x30
    1c0a:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1c0c:	4659      	mov	r1, fp
    1c0e:	b240      	sxtb	r0, r0
    1c10:	920a      	str	r2, [sp, #40]	; 0x28
    1c12:	9307      	str	r3, [sp, #28]
    1c14:	47a8      	blx	r5
			digits++;
    1c16:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    1c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    1c1a:	3301      	adds	r3, #1
    1c1c:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    1c1e:	9b07      	ldr	r3, [sp, #28]
    1c20:	f1ba 0f00 	cmp.w	sl, #0
    1c24:	d123      	bne.n	1c6e <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    1c26:	f1b8 0f03 	cmp.w	r8, #3
    1c2a:	f47f aec9 	bne.w	19c0 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    1c2e:	9b04      	ldr	r3, [sp, #16]
    1c30:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1c34:	2e00      	cmp	r6, #0
    1c36:	f77f aec3 	ble.w	19c0 <z_vprintk+0x18>
			out(' ', ctx);
    1c3a:	4659      	mov	r1, fp
    1c3c:	2020      	movs	r0, #32
    1c3e:	47a8      	blx	r5
    1c40:	3e01      	subs	r6, #1
    1c42:	e7f7      	b.n	1c34 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    1c44:	1e59      	subs	r1, r3, #1
    1c46:	4599      	cmp	r9, r3
    1c48:	910a      	str	r1, [sp, #40]	; 0x28
    1c4a:	db07      	blt.n	1c5c <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    1c4c:	f1b8 0f01 	cmp.w	r8, #1
    1c50:	d106      	bne.n	1c60 <z_vprintk+0x2b8>
    1c52:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    1c54:	4659      	mov	r1, fp
    1c56:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1c58:	47a8      	blx	r5
    1c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    1c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c5e:	e7b2      	b.n	1bc6 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    1c60:	f1b8 0f02 	cmp.w	r8, #2
    1c64:	d1fa      	bne.n	1c5c <z_vprintk+0x2b4>
    1c66:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    1c68:	4659      	mov	r1, fp
    1c6a:	2020      	movs	r0, #32
    1c6c:	e7f4      	b.n	1c58 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    1c6e:	9607      	str	r6, [sp, #28]
    1c70:	e7a9      	b.n	1bc6 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    1c72:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    1c76:	46b2      	mov	sl, r6
    1c78:	4653      	mov	r3, sl
    1c7a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    1c7e:	b968      	cbnz	r0, 1c9c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    1c80:	f1b8 0f03 	cmp.w	r8, #3
    1c84:	d121      	bne.n	1cca <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    1c86:	1b9e      	subs	r6, r3, r6
    1c88:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    1c8c:	2e00      	cmp	r6, #0
    1c8e:	f77f ae97 	ble.w	19c0 <z_vprintk+0x18>
						out(' ', ctx);
    1c92:	4659      	mov	r1, fp
    1c94:	2020      	movs	r0, #32
    1c96:	47a8      	blx	r5
    1c98:	3e01      	subs	r6, #1
    1c9a:	e7f7      	b.n	1c8c <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    1c9c:	4659      	mov	r1, fp
    1c9e:	47a8      	blx	r5
    1ca0:	e7ea      	b.n	1c78 <z_vprintk+0x2d0>
				out(c, ctx);
    1ca2:	f854 0b04 	ldr.w	r0, [r4], #4
    1ca6:	4659      	mov	r1, fp
    1ca8:	e6ae      	b.n	1a08 <z_vprintk+0x60>
				out((int)'%', ctx);
    1caa:	4659      	mov	r1, fp
    1cac:	e6ac      	b.n	1a08 <z_vprintk+0x60>
				length_mod = 0;
    1cae:	4637      	mov	r7, r6
				padding = PAD_NONE;
    1cb0:	46b0      	mov	r8, r6
				min_width = -1;
    1cb2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1cb6:	2601      	movs	r6, #1
    1cb8:	e68a      	b.n	19d0 <z_vprintk+0x28>
			switch (*fmt) {
    1cba:	f04f 0803 	mov.w	r8, #3
    1cbe:	e687      	b.n	19d0 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    1cc0:	f04f 0801 	mov.w	r8, #1
    1cc4:	e684      	b.n	19d0 <z_vprintk+0x28>
					length_mod = 'L';
    1cc6:	274c      	movs	r7, #76	; 0x4c
    1cc8:	e682      	b.n	19d0 <z_vprintk+0x28>
			might_format = 0;
    1cca:	4606      	mov	r6, r0
		++fmt;
    1ccc:	e680      	b.n	19d0 <z_vprintk+0x28>
    1cce:	bf00      	nop

00001cd0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1cd0:	b530      	push	{r4, r5, lr}
    1cd2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1cd4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1cd8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1cda:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1cdc:	4805      	ldr	r0, [pc, #20]	; (1cf4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1cde:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1ce0:	a901      	add	r1, sp, #4
    1ce2:	f7ff fe61 	bl	19a8 <z_vprintk>

	if (ctx.count < ctx.max) {
    1ce6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1cea:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1cec:	bfb8      	it	lt
    1cee:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1cf0:	b005      	add	sp, #20
    1cf2:	bd30      	pop	{r4, r5, pc}
    1cf4:	0001445d 	.word	0x0001445d

00001cf8 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    1cf8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1cfa:	4910      	ldr	r1, [pc, #64]	; (1d3c <enable_logger+0x44>)
    1cfc:	4810      	ldr	r0, [pc, #64]	; (1d40 <enable_logger+0x48>)
{
    1cfe:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1d00:	2200      	movs	r2, #0
    1d02:	f013 fc20 	bl	15546 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1d06:	4d0f      	ldr	r5, [pc, #60]	; (1d44 <enable_logger+0x4c>)
    1d08:	490f      	ldr	r1, [pc, #60]	; (1d48 <enable_logger+0x50>)
    1d0a:	2200      	movs	r2, #0
    1d0c:	2300      	movs	r3, #0
    1d0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1d12:	2400      	movs	r4, #0
    1d14:	230e      	movs	r3, #14
    1d16:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1d1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <enable_logger+0x54>)
    1d20:	9400      	str	r4, [sp, #0]
    1d22:	f44f 7240 	mov.w	r2, #768	; 0x300
    1d26:	4628      	mov	r0, r5
    1d28:	f003 fb92 	bl	5450 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    1d2c:	4908      	ldr	r1, [pc, #32]	; (1d50 <enable_logger+0x58>)
    1d2e:	4628      	mov	r0, r5
    1d30:	f013 fbbd 	bl	154ae <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1d34:	4620      	mov	r0, r4
    1d36:	b009      	add	sp, #36	; 0x24
    1d38:	bd30      	pop	{r4, r5, pc}
    1d3a:	bf00      	nop
    1d3c:	00001d55 	.word	0x00001d55
    1d40:	20008278 	.word	0x20008278
    1d44:	20009610 	.word	0x20009610
    1d48:	2000eae0 	.word	0x2000eae0
    1d4c:	000021d5 	.word	0x000021d5
    1d50:	00025f29 	.word	0x00025f29

00001d54 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1d54:	4801      	ldr	r0, [pc, #4]	; (1d5c <log_process_thread_timer_expiry_fn+0x8>)
    1d56:	f003 bb0b 	b.w	5370 <z_impl_k_sem_give>
    1d5a:	bf00      	nop
    1d5c:	20000828 	.word	0x20000828

00001d60 <z_log_get_s_mask>:
{
    1d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d62:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    1d64:	4e0f      	ldr	r6, [pc, #60]	; (1da4 <z_log_get_s_mask+0x44>)
	u32_t mask = 0;
    1d66:	2000      	movs	r0, #0
	u32_t arg = 0;
    1d68:	4603      	mov	r3, r0
	bool arm = false;
    1d6a:	4602      	mov	r2, r0
				mask |= BIT(arg);
    1d6c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    1d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
    1d72:	b10c      	cbz	r4, 1d78 <z_log_get_s_mask+0x18>
    1d74:	428b      	cmp	r3, r1
    1d76:	d300      	bcc.n	1d7a <z_log_get_s_mask+0x1a>
}
    1d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    1d7a:	2c25      	cmp	r4, #37	; 0x25
    1d7c:	d102      	bne.n	1d84 <z_log_get_s_mask+0x24>
			arm = !arm;
    1d7e:	f082 0201 	eor.w	r2, r2, #1
    1d82:	e7f4      	b.n	1d6e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    1d84:	2a00      	cmp	r2, #0
    1d86:	d0f2      	beq.n	1d6e <z_log_get_s_mask+0xe>
    1d88:	f814 c006 	ldrb.w	ip, [r4, r6]
    1d8c:	f01c 0f03 	tst.w	ip, #3
    1d90:	d0ed      	beq.n	1d6e <z_log_get_s_mask+0xe>
			if (curr == 's') {
    1d92:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    1d94:	bf04      	itt	eq
    1d96:	fa07 f203 	lsleq.w	r2, r7, r3
    1d9a:	4310      	orreq	r0, r2
			arg++;
    1d9c:	3301      	adds	r3, #1
			arm = false;
    1d9e:	2200      	movs	r2, #0
    1da0:	e7e5      	b.n	1d6e <z_log_get_s_mask+0xe>
    1da2:	bf00      	nop
    1da4:	00029426 	.word	0x00029426

00001da8 <log_core_init>:
{
    1da8:	b508      	push	{r3, lr}
		log_msg_pool_init();
    1daa:	f000 fa75 	bl	2298 <log_msg_pool_init>
		log_list_init(&list);
    1dae:	4809      	ldr	r0, [pc, #36]	; (1dd4 <log_core_init+0x2c>)
    1db0:	f012 fc4a 	bl	14648 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1db4:	2304      	movs	r3, #4
    1db6:	2228      	movs	r2, #40	; 0x28
    1db8:	4907      	ldr	r1, [pc, #28]	; (1dd8 <log_core_init+0x30>)
    1dba:	4808      	ldr	r0, [pc, #32]	; (1ddc <log_core_init+0x34>)
    1dbc:	f013 fa56 	bl	1526c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    1dc0:	4b07      	ldr	r3, [pc, #28]	; (1de0 <log_core_init+0x38>)
    1dc2:	4a08      	ldr	r2, [pc, #32]	; (1de4 <log_core_init+0x3c>)
    1dc4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1dc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    1dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    1dce:	f000 bcad 	b.w	272c <log_output_timestamp_freq_set>
    1dd2:	bf00      	nop
    1dd4:	200095ec 	.word	0x200095ec
    1dd8:	20011720 	.word	0x20011720
    1ddc:	200095f4 	.word	0x200095f4
    1de0:	20000008 	.word	0x20000008
    1de4:	00014687 	.word	0x00014687

00001de8 <dropped_notify>:
{
    1de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1dea:	4b0f      	ldr	r3, [pc, #60]	; (1e28 <dropped_notify+0x40>)
    1dec:	f3bf 8f5b 	dmb	ish
    1df0:	2500      	movs	r5, #0
    1df2:	e853 7f00 	ldrex	r7, [r3]
    1df6:	e843 5200 	strex	r2, r5, [r3]
    1dfa:	2a00      	cmp	r2, #0
    1dfc:	d1f9      	bne.n	1df2 <dropped_notify+0xa>
    1dfe:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1e02:	4c0a      	ldr	r4, [pc, #40]	; (1e2c <dropped_notify+0x44>)
    1e04:	4e0a      	ldr	r6, [pc, #40]	; (1e30 <dropped_notify+0x48>)
    1e06:	1b36      	subs	r6, r6, r4
    1e08:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e0a:	42b5      	cmp	r5, r6
    1e0c:	db00      	blt.n	1e10 <dropped_notify+0x28>
}
    1e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1e10:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1e12:	795b      	ldrb	r3, [r3, #5]
    1e14:	b12b      	cbz	r3, 1e22 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    1e16:	6823      	ldr	r3, [r4, #0]
    1e18:	68db      	ldr	r3, [r3, #12]
    1e1a:	b113      	cbz	r3, 1e22 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    1e1c:	4639      	mov	r1, r7
    1e1e:	4620      	mov	r0, r4
    1e20:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e22:	3501      	adds	r5, #1
    1e24:	3410      	adds	r4, #16
    1e26:	e7f0      	b.n	1e0a <dropped_notify+0x22>
    1e28:	200095e4 	.word	0x200095e4
    1e2c:	0001ec10 	.word	0x0001ec10
    1e30:	0001ec20 	.word	0x0001ec20

00001e34 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <log_dropped+0x1c>)
    1e36:	f3bf 8f5b 	dmb	ish
    1e3a:	e853 2f00 	ldrex	r2, [r3]
    1e3e:	3201      	adds	r2, #1
    1e40:	e843 2100 	strex	r1, r2, [r3]
    1e44:	2900      	cmp	r1, #0
    1e46:	d1f8      	bne.n	1e3a <log_dropped+0x6>
    1e48:	f3bf 8f5b 	dmb	ish
}
    1e4c:	4770      	bx	lr
    1e4e:	bf00      	nop
    1e50:	200095e4 	.word	0x200095e4

00001e54 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1e54:	4a04      	ldr	r2, [pc, #16]	; (1e68 <log_source_name_get+0x14>)
    1e56:	4b05      	ldr	r3, [pc, #20]	; (1e6c <log_source_name_get+0x18>)
    1e58:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1e5a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1e5e:	bf34      	ite	cc
    1e60:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1e64:	2000      	movcs	r0, #0
}
    1e66:	4770      	bx	lr
    1e68:	0001ebc8 	.word	0x0001ebc8
    1e6c:	0001ec10 	.word	0x0001ec10

00001e70 <log_backend_enable>:
	id += backend - log_backend_get(0);
    1e70:	4b09      	ldr	r3, [pc, #36]	; (1e98 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    1e72:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    1e74:	1ac3      	subs	r3, r0, r3
    1e76:	111b      	asrs	r3, r3, #4
    1e78:	3301      	adds	r3, #1
{
    1e7a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    1e7c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    1e7e:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    1e80:	4c06      	ldr	r4, [pc, #24]	; (1e9c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    1e82:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1e84:	2201      	movs	r2, #1
    1e86:	715a      	strb	r2, [r3, #5]
    1e88:	7822      	ldrb	r2, [r4, #0]
    1e8a:	b912      	cbnz	r2, 1e92 <log_backend_enable+0x22>
    1e8c:	4804      	ldr	r0, [pc, #16]	; (1ea0 <log_backend_enable+0x30>)
    1e8e:	f003 fa6f 	bl	5370 <z_impl_k_sem_give>
	backend_attached = true;
    1e92:	2301      	movs	r3, #1
    1e94:	7023      	strb	r3, [r4, #0]
}
    1e96:	bd10      	pop	{r4, pc}
    1e98:	0001ec10 	.word	0x0001ec10
    1e9c:	2000e6a4 	.word	0x2000e6a4
    1ea0:	20000828 	.word	0x20000828

00001ea4 <log_init>:
{
    1ea4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    1ea6:	4b16      	ldr	r3, [pc, #88]	; (1f00 <log_init+0x5c>)
    1ea8:	4c16      	ldr	r4, [pc, #88]	; (1f04 <log_init+0x60>)
    1eaa:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1eac:	2b9f      	cmp	r3, #159	; 0x9f
    1eae:	ea4f 1623 	mov.w	r6, r3, asr #4
    1eb2:	d906      	bls.n	1ec2 <log_init+0x1e>
    1eb4:	4b14      	ldr	r3, [pc, #80]	; (1f08 <log_init+0x64>)
    1eb6:	4a15      	ldr	r2, [pc, #84]	; (1f0c <log_init+0x68>)
    1eb8:	4815      	ldr	r0, [pc, #84]	; (1f10 <log_init+0x6c>)
    1eba:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    1ebe:	f012 fabc 	bl	1443a <__assert_func>
    1ec2:	4b14      	ldr	r3, [pc, #80]	; (1f14 <log_init+0x70>)
    1ec4:	f3bf 8f5b 	dmb	ish
    1ec8:	e853 5f00 	ldrex	r5, [r3]
    1ecc:	1c6a      	adds	r2, r5, #1
    1ece:	e843 2100 	strex	r1, r2, [r3]
    1ed2:	2900      	cmp	r1, #0
    1ed4:	d1f8      	bne.n	1ec8 <log_init+0x24>
    1ed6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1eda:	b90d      	cbnz	r5, 1ee0 <log_init+0x3c>
	for (i = 0; i < log_backend_count_get(); i++) {
    1edc:	42b5      	cmp	r5, r6
    1ede:	d100      	bne.n	1ee2 <log_init+0x3e>
}
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1ee2:	7b23      	ldrb	r3, [r4, #12]
    1ee4:	b143      	cbz	r3, 1ef8 <log_init+0x54>
			if (backend->api->init != NULL) {
    1ee6:	6823      	ldr	r3, [r4, #0]
    1ee8:	695b      	ldr	r3, [r3, #20]
    1eea:	b103      	cbz	r3, 1eee <log_init+0x4a>
				backend->api->init();
    1eec:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1eee:	2204      	movs	r2, #4
    1ef0:	2100      	movs	r1, #0
    1ef2:	4620      	mov	r0, r4
    1ef4:	f7ff ffbc 	bl	1e70 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ef8:	3501      	adds	r5, #1
    1efa:	3410      	adds	r4, #16
    1efc:	e7ee      	b.n	1edc <log_init+0x38>
    1efe:	bf00      	nop
    1f00:	0001ec20 	.word	0x0001ec20
    1f04:	0001ec10 	.word	0x0001ec10
    1f08:	00025f7b 	.word	0x00025f7b
    1f0c:	0002600b 	.word	0x0002600b
    1f10:	00025f31 	.word	0x00025f31
    1f14:	200095e8 	.word	0x200095e8

00001f18 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    1f18:	4b16      	ldr	r3, [pc, #88]	; (1f74 <log_strdup+0x5c>)
    1f1a:	4298      	cmp	r0, r3
{
    1f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1f1e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1f20:	d302      	bcc.n	1f28 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1f22:	4b15      	ldr	r3, [pc, #84]	; (1f78 <log_strdup+0x60>)
    1f24:	4298      	cmp	r0, r3
    1f26:	d320      	bcc.n	1f6a <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1f28:	4814      	ldr	r0, [pc, #80]	; (1f7c <log_strdup+0x64>)
    1f2a:	2200      	movs	r2, #0
    1f2c:	2300      	movs	r3, #0
    1f2e:	a901      	add	r1, sp, #4
    1f30:	f002 fdb4 	bl	4a9c <k_mem_slab_alloc>
	if (err != 0) {
    1f34:	4605      	mov	r5, r0
    1f36:	b9d8      	cbnz	r0, 1f70 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f38:	2201      	movs	r2, #1
    1f3a:	9b01      	ldr	r3, [sp, #4]
    1f3c:	f3bf 8f5b 	dmb	ish
    1f40:	e853 1f00 	ldrex	r1, [r3]
    1f44:	e843 2000 	strex	r0, r2, [r3]
    1f48:	2800      	cmp	r0, #0
    1f4a:	d1f9      	bne.n	1f40 <log_strdup+0x28>
    1f4c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1f50:	9e01      	ldr	r6, [sp, #4]
    1f52:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    1f54:	221f      	movs	r2, #31
    1f56:	4621      	mov	r1, r4
    1f58:	4618      	mov	r0, r3
    1f5a:	f01c fc50 	bl	1e7fe <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1f5e:	227e      	movs	r2, #126	; 0x7e
    1f60:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1f64:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    1f68:	4604      	mov	r4, r0
}
    1f6a:	4620      	mov	r0, r4
    1f6c:	b002      	add	sp, #8
    1f6e:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    1f70:	4c03      	ldr	r4, [pc, #12]	; (1f80 <log_strdup+0x68>)
    1f72:	e7fa      	b.n	1f6a <log_strdup+0x52>
    1f74:	0001e9c8 	.word	0x0001e9c8
    1f78:	0002955c 	.word	0x0002955c
    1f7c:	200095f4 	.word	0x200095f4
    1f80:	00025fae 	.word	0x00025fae

00001f84 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    1f84:	b148      	cbz	r0, 1f9a <log_is_strdup+0x16>
    1f86:	4b05      	ldr	r3, [pc, #20]	; (1f9c <log_is_strdup+0x18>)
    1f88:	4298      	cmp	r0, r3
    1f8a:	d305      	bcc.n	1f98 <log_is_strdup+0x14>
    1f8c:	33a0      	adds	r3, #160	; 0xa0
    1f8e:	4298      	cmp	r0, r3
    1f90:	bf2c      	ite	cs
    1f92:	2000      	movcs	r0, #0
    1f94:	2001      	movcc	r0, #1
    1f96:	4770      	bx	lr
    1f98:	2000      	movs	r0, #0
}
    1f9a:	4770      	bx	lr
    1f9c:	20011720 	.word	0x20011720

00001fa0 <z_impl_log_process>:
{
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1fa4:	4b4c      	ldr	r3, [pc, #304]	; (20d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
    1fa6:	781b      	ldrb	r3, [r3, #0]
{
    1fa8:	b085      	sub	sp, #20
    1faa:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1fac:	b903      	cbnz	r3, 1fb0 <z_impl_log_process+0x10>
    1fae:	b360      	cbz	r0, 200a <CONFIG_MAIN_STACK_SIZE+0xa>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1fb0:	f04f 0320 	mov.w	r3, #32
    1fb4:	f3ef 8611 	mrs	r6, BASEPRI
    1fb8:	f383 8811 	msr	BASEPRI, r3
    1fbc:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    1fc0:	4846      	ldr	r0, [pc, #280]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    1fc2:	f012 fb51 	bl	14668 <log_list_head_get>
    1fc6:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1fc8:	f386 8811 	msr	BASEPRI, r6
    1fcc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    1fd0:	b178      	cbz	r0, 1ff2 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fd2:	f3bf 8f5b 	dmb	ish
    1fd6:	4b42      	ldr	r3, [pc, #264]	; (20e0 <CONFIG_MAIN_STACK_SIZE+0xe0>)
    1fd8:	e853 2f00 	ldrex	r2, [r3]
    1fdc:	3a01      	subs	r2, #1
    1fde:	e843 2100 	strex	r1, r2, [r3]
    1fe2:	2900      	cmp	r1, #0
    1fe4:	d1f8      	bne.n	1fd8 <z_impl_log_process+0x38>
    1fe6:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1fea:	b194      	cbz	r4, 2012 <CONFIG_MAIN_STACK_SIZE+0x12>
	log_msg_put(msg);
    1fec:	4628      	mov	r0, r5
    1fee:	f012 fc48 	bl	14882 <log_msg_put>
	if (!bypass && dropped_cnt) {
    1ff2:	b924      	cbnz	r4, 1ffe <z_impl_log_process+0x5e>
    1ff4:	4b3b      	ldr	r3, [pc, #236]	; (20e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	b10b      	cbz	r3, 1ffe <z_impl_log_process+0x5e>
		dropped_notify();
    1ffa:	f7ff fef5 	bl	1de8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    1ffe:	4837      	ldr	r0, [pc, #220]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    2000:	f012 fb30 	bl	14664 <log_list_head_peek>
    2004:	1e04      	subs	r4, r0, #0
    2006:	bf18      	it	ne
    2008:	2401      	movne	r4, #1
}
    200a:	4620      	mov	r0, r4
    200c:	b005      	add	sp, #20
    200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    2012:	4b35      	ldr	r3, [pc, #212]	; (20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    2014:	781b      	ldrb	r3, [r3, #0]
    2016:	b9cb      	cbnz	r3, 204c <CONFIG_MAIN_STACK_SIZE+0x4c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2018:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    201a:	07db      	lsls	r3, r3, #31
    201c:	d416      	bmi.n	204c <CONFIG_MAIN_STACK_SIZE+0x4c>
	msg_str = log_msg_str_get(msg);
    201e:	f012 fc43 	bl	148a8 <log_msg_str_get>
    2022:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2024:	4628      	mov	r0, r5
    2026:	f012 fc0a 	bl	1483e <log_msg_nargs_get>
    202a:	4601      	mov	r1, r0
    202c:	4640      	mov	r0, r8
    202e:	f7ff fe97 	bl	1d60 <z_log_get_s_mask>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2032:	4f2e      	ldr	r7, [pc, #184]	; (20ec <CONFIG_MAIN_STACK_SIZE+0xec>)
    2034:	4b2e      	ldr	r3, [pc, #184]	; (20f0 <CONFIG_MAIN_STACK_SIZE+0xf0>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2036:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 210c <CONFIG_MAIN_STACK_SIZE+0x10c>
    203a:	1bdb      	subs	r3, r3, r7
    203c:	08db      	lsrs	r3, r3, #3
    203e:	9303      	str	r3, [sp, #12]
    2040:	4b2c      	ldr	r3, [pc, #176]	; (20f4 <CONFIG_MAIN_STACK_SIZE+0xf4>)
    2042:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2044:	4606      	mov	r6, r0
    2046:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    204a:	b936      	cbnz	r6, 205a <CONFIG_MAIN_STACK_SIZE+0x5a>
    204c:	4e2a      	ldr	r6, [pc, #168]	; (20f8 <CONFIG_MAIN_STACK_SIZE+0xf8>)
    204e:	4f2b      	ldr	r7, [pc, #172]	; (20fc <CONFIG_MAIN_STACK_SIZE+0xfc>)
    2050:	1bbf      	subs	r7, r7, r6
    2052:	113f      	asrs	r7, r7, #4
    2054:	f04f 0800 	mov.w	r8, #0
    2058:	e03a      	b.n	20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
		idx = 31 - __builtin_clz(mask);
    205a:	fab6 f186 	clz	r1, r6
    205e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2062:	4649      	mov	r1, r9
    2064:	4628      	mov	r0, r5
    2066:	f012 fbed 	bl	14844 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    206a:	4b25      	ldr	r3, [pc, #148]	; (2100 <CONFIG_MAIN_STACK_SIZE+0x100>)
    206c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    206e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2070:	d302      	bcc.n	2078 <CONFIG_MAIN_STACK_SIZE+0x78>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2072:	4a24      	ldr	r2, [pc, #144]	; (2104 <CONFIG_MAIN_STACK_SIZE+0x104>)
    2074:	4290      	cmp	r0, r2
    2076:	d31a      	bcc.n	20ae <CONFIG_MAIN_STACK_SIZE+0xae>
    2078:	4608      	mov	r0, r1
    207a:	f7ff ff83 	bl	1f84 <log_is_strdup>
    207e:	4602      	mov	r2, r0
    2080:	b9a8      	cbnz	r0, 20ae <CONFIG_MAIN_STACK_SIZE+0xae>
    2082:	4b21      	ldr	r3, [pc, #132]	; (2108 <CONFIG_MAIN_STACK_SIZE+0x108>)
    2084:	4299      	cmp	r1, r3
    2086:	d012      	beq.n	20ae <CONFIG_MAIN_STACK_SIZE+0xae>
	return msg->hdr.ids.source_id;
    2088:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    208a:	9903      	ldr	r1, [sp, #12]
    208c:	f3c3 1389 	ubfx	r3, r3, #6, #10
    2090:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    2092:	bf38      	it	cc
    2094:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2098:	ea4f 138a 	mov.w	r3, sl, lsl #6
    209c:	f043 0301 	orr.w	r3, r3, #1
    20a0:	f8ad 3000 	strh.w	r3, [sp]
    20a4:	4649      	mov	r1, r9
    20a6:	4643      	mov	r3, r8
    20a8:	4658      	mov	r0, fp
    20aa:	f012 fb2f 	bl	1470c <log_3>
		mask &= ~BIT(idx);
    20ae:	2301      	movs	r3, #1
    20b0:	fa03 f109 	lsl.w	r1, r3, r9
    20b4:	ea26 0601 	bic.w	r6, r6, r1
    20b8:	e7c7      	b.n	204a <CONFIG_MAIN_STACK_SIZE+0x4a>
	return backend->cb->active;
    20ba:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    20bc:	795b      	ldrb	r3, [r3, #5]
    20be:	b123      	cbz	r3, 20ca <CONFIG_MAIN_STACK_SIZE+0xca>
	backend->api->put(backend, msg);
    20c0:	6833      	ldr	r3, [r6, #0]
    20c2:	4629      	mov	r1, r5
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	4630      	mov	r0, r6
    20c8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    20ca:	f108 0801 	add.w	r8, r8, #1
    20ce:	3610      	adds	r6, #16
    20d0:	45b8      	cmp	r8, r7
    20d2:	dbf2      	blt.n	20ba <CONFIG_MAIN_STACK_SIZE+0xba>
    20d4:	e78a      	b.n	1fec <z_impl_log_process+0x4c>
    20d6:	bf00      	nop
    20d8:	2000e6a4 	.word	0x2000e6a4
    20dc:	200095ec 	.word	0x200095ec
    20e0:	200095e0 	.word	0x200095e0
    20e4:	200095e4 	.word	0x200095e4
    20e8:	2000e6a5 	.word	0x2000e6a5
    20ec:	0001ebc8 	.word	0x0001ebc8
    20f0:	0001ec10 	.word	0x0001ec10
    20f4:	0001ebd8 	.word	0x0001ebd8
    20f8:	0001ec10 	.word	0x0001ec10
    20fc:	0001ec20 	.word	0x0001ec20
    2100:	0001e9c8 	.word	0x0001e9c8
    2104:	0002955c 	.word	0x0002955c
    2108:	00025fae 	.word	0x00025fae
    210c:	00025fc8 	.word	0x00025fc8

00002110 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2110:	4b29      	ldr	r3, [pc, #164]	; (21b8 <msg_finalize+0xa8>)
{
    2112:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2114:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    2116:	8141      	strh	r1, [r0, #10]
{
    2118:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    211a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    211c:	4d27      	ldr	r5, [pc, #156]	; (21bc <msg_finalize+0xac>)
    211e:	60e0      	str	r0, [r4, #12]
    2120:	f3bf 8f5b 	dmb	ish
    2124:	e855 3f00 	ldrex	r3, [r5]
    2128:	3301      	adds	r3, #1
    212a:	e845 3200 	strex	r2, r3, [r5]
    212e:	2a00      	cmp	r2, #0
    2130:	d1f8      	bne.n	2124 <msg_finalize+0x14>
    2132:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    2136:	f04f 0320 	mov.w	r3, #32
    213a:	f3ef 8611 	mrs	r6, BASEPRI
    213e:	f383 8811 	msr	BASEPRI, r3
    2142:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2146:	481e      	ldr	r0, [pc, #120]	; (21c0 <msg_finalize+0xb0>)
    2148:	4621      	mov	r1, r4
    214a:	f012 fa81 	bl	14650 <log_list_add_tail>
	__asm__ volatile(
    214e:	f386 8811 	msr	BASEPRI, r6
    2152:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    2156:	4b1b      	ldr	r3, [pc, #108]	; (21c4 <msg_finalize+0xb4>)
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	b183      	cbz	r3, 217e <msg_finalize+0x6e>
	__asm__ volatile(
    215c:	f04f 0320 	mov.w	r3, #32
    2160:	f3ef 8411 	mrs	r4, BASEPRI
    2164:	f383 8811 	msr	BASEPRI, r3
    2168:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    216c:	2000      	movs	r0, #0
    216e:	f7ff ff17 	bl	1fa0 <z_impl_log_process>
	__asm__ volatile(
    2172:	f384 8811 	msr	BASEPRI, r4
    2176:	f3bf 8f6f 	isb	sy
}
    217a:	b002      	add	sp, #8
    217c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    217e:	4a12      	ldr	r2, [pc, #72]	; (21c8 <msg_finalize+0xb8>)
    2180:	682b      	ldr	r3, [r5, #0]
    2182:	6812      	ldr	r2, [r2, #0]
    2184:	2a00      	cmp	r2, #0
    2186:	d0f8      	beq.n	217a <msg_finalize+0x6a>
    2188:	2b01      	cmp	r3, #1
    218a:	d10a      	bne.n	21a2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    218c:	2200      	movs	r2, #0
    218e:	2300      	movs	r3, #0
    2190:	e9cd 2300 	strd	r2, r3, [sp]
    2194:	480d      	ldr	r0, [pc, #52]	; (21cc <msg_finalize+0xbc>)
    2196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    219a:	2300      	movs	r3, #0
    219c:	f003 fb2e 	bl	57fc <z_impl_k_timer_start>
    21a0:	e7eb      	b.n	217a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    21a2:	2b0a      	cmp	r3, #10
    21a4:	d1e9      	bne.n	217a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    21a6:	4809      	ldr	r0, [pc, #36]	; (21cc <msg_finalize+0xbc>)
    21a8:	f013 f9d9 	bl	1555e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    21ac:	4808      	ldr	r0, [pc, #32]	; (21d0 <msg_finalize+0xc0>)
}
    21ae:	b002      	add	sp, #8
    21b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    21b4:	f003 b8dc 	b.w	5370 <z_impl_k_sem_give>
    21b8:	20000008 	.word	0x20000008
    21bc:	200095e0 	.word	0x200095e0
    21c0:	200095ec 	.word	0x200095ec
    21c4:	2000e6a5 	.word	0x2000e6a5
    21c8:	20009684 	.word	0x20009684
    21cc:	20008278 	.word	0x20008278
    21d0:	20000828 	.word	0x20000828

000021d4 <log_process_thread_func>:
{
    21d4:	b510      	push	{r4, lr}
	log_init();
    21d6:	f7ff fe65 	bl	1ea4 <log_init>
	return z_impl_k_current_get();
    21da:	f003 f8c3 	bl	5364 <z_impl_k_current_get>
	proc_tid = process_tid;
    21de:	4b0c      	ldr	r3, [pc, #48]	; (2210 <log_process_thread_func+0x3c>)
    21e0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    21e2:	b130      	cbz	r0, 21f2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    21e4:	4b0b      	ldr	r3, [pc, #44]	; (2214 <log_process_thread_func+0x40>)
	    process_tid &&
    21e6:	681b      	ldr	r3, [r3, #0]
    21e8:	2b09      	cmp	r3, #9
    21ea:	dd02      	ble.n	21f2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    21ec:	480a      	ldr	r0, [pc, #40]	; (2218 <log_process_thread_func+0x44>)
    21ee:	f003 f8bf 	bl	5370 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    21f2:	4c09      	ldr	r4, [pc, #36]	; (2218 <log_process_thread_func+0x44>)
    21f4:	2000      	movs	r0, #0
    21f6:	f7ff fed3 	bl	1fa0 <z_impl_log_process>
		if (log_process(false) == false) {
    21fa:	2800      	cmp	r0, #0
    21fc:	d1fa      	bne.n	21f4 <log_process_thread_func+0x20>
    21fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2206:	4620      	mov	r0, r4
    2208:	f003 f8d2 	bl	53b0 <z_impl_k_sem_take>
    220c:	e7f2      	b.n	21f4 <log_process_thread_func+0x20>
    220e:	bf00      	nop
    2210:	20009684 	.word	0x20009684
    2214:	200095e0 	.word	0x200095e0
    2218:	20000828 	.word	0x20000828

0000221c <z_impl_log_panic>:
{
    221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    221e:	4f0e      	ldr	r7, [pc, #56]	; (2258 <z_impl_log_panic+0x3c>)
    2220:	783d      	ldrb	r5, [r7, #0]
    2222:	b975      	cbnz	r5, 2242 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2224:	4c0d      	ldr	r4, [pc, #52]	; (225c <z_impl_log_panic+0x40>)
    2226:	4e0e      	ldr	r6, [pc, #56]	; (2260 <z_impl_log_panic+0x44>)
	log_init();
    2228:	f7ff fe3c 	bl	1ea4 <log_init>
    222c:	1b36      	subs	r6, r6, r4
    222e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2230:	42b5      	cmp	r5, r6
    2232:	db07      	blt.n	2244 <z_impl_log_panic+0x28>
    2234:	2000      	movs	r0, #0
    2236:	f7ff feb3 	bl	1fa0 <z_impl_log_process>
		while (log_process(false) == true) {
    223a:	2800      	cmp	r0, #0
    223c:	d1fa      	bne.n	2234 <z_impl_log_panic+0x18>
	panic_mode = true;
    223e:	2301      	movs	r3, #1
    2240:	703b      	strb	r3, [r7, #0]
}
    2242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2244:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2246:	795b      	ldrb	r3, [r3, #5]
    2248:	b11b      	cbz	r3, 2252 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    224a:	6823      	ldr	r3, [r4, #0]
    224c:	4620      	mov	r0, r4
    224e:	691b      	ldr	r3, [r3, #16]
    2250:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2252:	3501      	adds	r5, #1
    2254:	3410      	adds	r4, #16
    2256:	e7eb      	b.n	2230 <z_impl_log_panic+0x14>
    2258:	2000e6a5 	.word	0x2000e6a5
    225c:	0001ec10 	.word	0x0001ec10
    2260:	0001ec20 	.word	0x0001ec20

00002264 <log_free>:
{
    2264:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2266:	3804      	subs	r0, #4
    2268:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    226a:	f3bf 8f5b 	dmb	ish
    226e:	e850 3f00 	ldrex	r3, [r0]
    2272:	1e5a      	subs	r2, r3, #1
    2274:	e840 2100 	strex	r1, r2, [r0]
    2278:	2900      	cmp	r1, #0
    227a:	d1f8      	bne.n	226e <log_free+0xa>
    227c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2280:	2b01      	cmp	r3, #1
    2282:	d103      	bne.n	228c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2284:	4803      	ldr	r0, [pc, #12]	; (2294 <log_free+0x30>)
    2286:	a901      	add	r1, sp, #4
    2288:	f002 fc3a 	bl	4b00 <k_mem_slab_free>
}
    228c:	b003      	add	sp, #12
    228e:	f85d fb04 	ldr.w	pc, [sp], #4
    2292:	bf00      	nop
    2294:	200095f4 	.word	0x200095f4

00002298 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2298:	2320      	movs	r3, #32
    229a:	4902      	ldr	r1, [pc, #8]	; (22a4 <log_msg_pool_init+0xc>)
    229c:	4802      	ldr	r0, [pc, #8]	; (22a8 <log_msg_pool_init+0x10>)
    229e:	461a      	mov	r2, r3
    22a0:	f012 bfe4 	b.w	1526c <k_mem_slab_init>
    22a4:	200117c0 	.word	0x200117c0
    22a8:	20009688 	.word	0x20009688

000022ac <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    22ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    22ae:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    22b0:	4d09      	ldr	r5, [pc, #36]	; (22d8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    22b2:	9301      	str	r3, [sp, #4]
    22b4:	2001      	movs	r0, #1
    22b6:	f7ff fe73 	bl	1fa0 <z_impl_log_process>
    22ba:	4604      	mov	r4, r0
			log_dropped();
    22bc:	f7ff fdba 	bl	1e34 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    22c0:	2200      	movs	r2, #0
    22c2:	2300      	movs	r3, #0
    22c4:	a901      	add	r1, sp, #4
    22c6:	4628      	mov	r0, r5
    22c8:	f002 fbe8 	bl	4a9c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    22cc:	b108      	cbz	r0, 22d2 <log_msg_no_space_handle+0x26>
    22ce:	2c00      	cmp	r4, #0
    22d0:	d1f0      	bne.n	22b4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    22d2:	9801      	ldr	r0, [sp, #4]
    22d4:	b003      	add	sp, #12
    22d6:	bd30      	pop	{r4, r5, pc}
    22d8:	20009688 	.word	0x20009688

000022dc <log_msg_chunk_alloc>:
{
    22dc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    22de:	2300      	movs	r3, #0
    22e0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    22e2:	4807      	ldr	r0, [pc, #28]	; (2300 <log_msg_chunk_alloc+0x24>)
    22e4:	2200      	movs	r2, #0
    22e6:	2300      	movs	r3, #0
    22e8:	a901      	add	r1, sp, #4
    22ea:	f002 fbd7 	bl	4a9c <k_mem_slab_alloc>
	if (err != 0) {
    22ee:	b110      	cbz	r0, 22f6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    22f0:	f7ff ffdc 	bl	22ac <log_msg_no_space_handle>
    22f4:	9001      	str	r0, [sp, #4]
}
    22f6:	9801      	ldr	r0, [sp, #4]
    22f8:	b003      	add	sp, #12
    22fa:	f85d fb04 	ldr.w	pc, [sp], #4
    22fe:	bf00      	nop
    2300:	20009688 	.word	0x20009688

00002304 <msg_free>:
{
    2304:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2306:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2308:	7a45      	ldrb	r5, [r0, #9]
{
    230a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    230c:	092d      	lsrs	r5, r5, #4
{
    230e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2310:	07d8      	lsls	r0, r3, #31
    2312:	d41c      	bmi.n	234e <msg_free+0x4a>
    2314:	b1dd      	cbz	r5, 234e <msg_free+0x4a>
		u32_t smask = 0;
    2316:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    2318:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    231a:	9801      	ldr	r0, [sp, #4]
    231c:	4631      	mov	r1, r6
    231e:	f012 fa91 	bl	14844 <log_msg_arg_get>
    2322:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2324:	f7ff fe2e 	bl	1f84 <log_is_strdup>
    2328:	b170      	cbz	r0, 2348 <msg_free+0x44>
				if (smask == 0) {
    232a:	b934      	cbnz	r4, 233a <msg_free+0x36>
					smask = z_log_get_s_mask(
    232c:	9b01      	ldr	r3, [sp, #4]
    232e:	4629      	mov	r1, r5
    2330:	6918      	ldr	r0, [r3, #16]
    2332:	f7ff fd15 	bl	1d60 <z_log_get_s_mask>
					if (smask == 0) {
    2336:	4604      	mov	r4, r0
    2338:	b148      	cbz	r0, 234e <msg_free+0x4a>
				if (smask & BIT(i)) {
    233a:	fa24 f306 	lsr.w	r3, r4, r6
    233e:	07d9      	lsls	r1, r3, #31
    2340:	d502      	bpl.n	2348 <msg_free+0x44>
					log_free(buf);
    2342:	4638      	mov	r0, r7
    2344:	f7ff ff8e 	bl	2264 <log_free>
		for (i = 0; i < nargs; i++) {
    2348:	3601      	adds	r6, #1
    234a:	42ae      	cmp	r6, r5
    234c:	d3e5      	bcc.n	231a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    234e:	9b01      	ldr	r3, [sp, #4]
    2350:	7a1a      	ldrb	r2, [r3, #8]
    2352:	0792      	lsls	r2, r2, #30
    2354:	d504      	bpl.n	2360 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2356:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2358:	4c08      	ldr	r4, [pc, #32]	; (237c <msg_free+0x78>)
    235a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    235c:	9b03      	ldr	r3, [sp, #12]
    235e:	b92b      	cbnz	r3, 236c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2360:	4806      	ldr	r0, [pc, #24]	; (237c <msg_free+0x78>)
    2362:	a901      	add	r1, sp, #4
    2364:	f002 fbcc 	bl	4b00 <k_mem_slab_free>
}
    2368:	b005      	add	sp, #20
    236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    236c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    236e:	a903      	add	r1, sp, #12
    2370:	4620      	mov	r0, r4
    2372:	f002 fbc5 	bl	4b00 <k_mem_slab_free>
		cont = next;
    2376:	9503      	str	r5, [sp, #12]
    2378:	e7f0      	b.n	235c <msg_free+0x58>
    237a:	bf00      	nop
    237c:	20009688 	.word	0x20009688

00002380 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    2380:	b40e      	push	{r1, r2, r3}
    2382:	b503      	push	{r0, r1, lr}
    2384:	ab03      	add	r3, sp, #12
    2386:	4601      	mov	r1, r0
    2388:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    238c:	4804      	ldr	r0, [pc, #16]	; (23a0 <print_formatted+0x20>)
	va_start(args, fmt);
    238e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    2390:	f7ff fb0a 	bl	19a8 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    2394:	2000      	movs	r0, #0
    2396:	b002      	add	sp, #8
    2398:	f85d eb04 	ldr.w	lr, [sp], #4
    239c:	b003      	add	sp, #12
    239e:	4770      	bx	lr
    23a0:	00014c4d 	.word	0x00014c4d

000023a4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    23a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a8:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    23aa:	f011 0402 	ands.w	r4, r1, #2
{
    23ae:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    23b2:	4606      	mov	r6, r0
    23b4:	4690      	mov	r8, r2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    23b6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    23ba:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    23be:	d007      	beq.n	23d0 <prefix_print+0x2c>
	if (!format) {
    23c0:	f011 0f44 	tst.w	r1, #68	; 0x44
    23c4:	d137      	bne.n	2436 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    23c6:	4933      	ldr	r1, [pc, #204]	; (2494 <prefix_print+0xf0>)
    23c8:	461a      	mov	r2, r3
    23ca:	f7ff ffd9 	bl	2380 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    23ce:	4604      	mov	r4, r0
	if (color) {
    23d0:	f1b9 0f00 	cmp.w	r9, #0
    23d4:	d00a      	beq.n	23ec <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    23d6:	4b30      	ldr	r3, [pc, #192]	; (2498 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    23d8:	4930      	ldr	r1, [pc, #192]	; (249c <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    23da:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    23de:	4b30      	ldr	r3, [pc, #192]	; (24a0 <prefix_print+0xfc>)
    23e0:	4630      	mov	r0, r6
    23e2:	2a00      	cmp	r2, #0
    23e4:	bf08      	it	eq
    23e6:	461a      	moveq	r2, r3
    23e8:	f7ff ffca 	bl	2380 <print_formatted>
	if (level_on) {
    23ec:	b13d      	cbz	r5, 23fe <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    23ee:	4b2d      	ldr	r3, [pc, #180]	; (24a4 <prefix_print+0x100>)
    23f0:	492d      	ldr	r1, [pc, #180]	; (24a8 <prefix_print+0x104>)
    23f2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    23f6:	4630      	mov	r0, r6
    23f8:	f7ff ffc2 	bl	2380 <print_formatted>
    23fc:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    23fe:	f1b8 0f00 	cmp.w	r8, #0
    2402:	d044      	beq.n	248e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2404:	2301      	movs	r3, #1
    2406:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    240a:	4b28      	ldr	r3, [pc, #160]	; (24ac <prefix_print+0x108>)
    240c:	f017 0f10 	tst.w	r7, #16
    2410:	4f27      	ldr	r7, [pc, #156]	; (24b0 <prefix_print+0x10c>)
    2412:	bf18      	it	ne
    2414:	461f      	movne	r7, r3
    2416:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    241a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    241e:	f7ff fd19 	bl	1e54 <log_source_name_get>
    2422:	4639      	mov	r1, r7
    2424:	4602      	mov	r2, r0
    2426:	4630      	mov	r0, r6
    2428:	f7ff ffaa 	bl	2380 <print_formatted>
    242c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    242e:	4420      	add	r0, r4
    2430:	b005      	add	sp, #20
    2432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2436:	4a1f      	ldr	r2, [pc, #124]	; (24b4 <prefix_print+0x110>)
    2438:	6811      	ldr	r1, [r2, #0]
    243a:	b331      	cbz	r1, 248a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    243c:	4a1e      	ldr	r2, [pc, #120]	; (24b8 <prefix_print+0x114>)
    243e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2442:	6814      	ldr	r4, [r2, #0]
    2444:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    2448:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    244c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2450:	fbb4 f2fe 	udiv	r2, r4, lr
    2454:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    2458:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    245c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2460:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2464:	fbb4 fbf1 	udiv	fp, r4, r1
    2468:	fb01 441b 	mls	r4, r1, fp, r4
    246c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2470:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2474:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    2478:	e9cd b101 	strd	fp, r1, [sp, #4]
    247c:	fb0a e113 	mls	r1, sl, r3, lr
    2480:	9100      	str	r1, [sp, #0]
    2482:	490e      	ldr	r1, [pc, #56]	; (24bc <prefix_print+0x118>)
    2484:	f7ff ff7c 	bl	2380 <print_formatted>
    2488:	e7a1      	b.n	23ce <prefix_print+0x2a>
		length = 0;
    248a:	4608      	mov	r0, r1
    248c:	e79f      	b.n	23ce <prefix_print+0x2a>
	total += print_formatted(log_output,
    248e:	4f08      	ldr	r7, [pc, #32]	; (24b0 <prefix_print+0x10c>)
    2490:	e7c1      	b.n	2416 <prefix_print+0x72>
    2492:	bf00      	nop
    2494:	0002601e 	.word	0x0002601e
    2498:	0002553c 	.word	0x0002553c
    249c:	0002659e 	.word	0x0002659e
    24a0:	00026014 	.word	0x00026014
    24a4:	00025550 	.word	0x00025550
    24a8:	00026043 	.word	0x00026043
    24ac:	00027b49 	.word	0x00027b49
    24b0:	00026019 	.word	0x00026019
    24b4:	200096a4 	.word	0x200096a4
    24b8:	200096a8 	.word	0x200096a8
    24bc:	00026027 	.word	0x00026027

000024c0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    24c0:	b538      	push	{r3, r4, r5, lr}
    24c2:	460c      	mov	r4, r1
	if (color) {
    24c4:	07e1      	lsls	r1, r4, #31
{
    24c6:	4605      	mov	r5, r0
	if (color) {
    24c8:	d503      	bpl.n	24d2 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    24ca:	4a08      	ldr	r2, [pc, #32]	; (24ec <postfix_print+0x2c>)
    24cc:	4908      	ldr	r1, [pc, #32]	; (24f0 <postfix_print+0x30>)
    24ce:	f7ff ff57 	bl	2380 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    24d2:	06e2      	lsls	r2, r4, #27
    24d4:	d408      	bmi.n	24e8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    24d6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    24d8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    24da:	bf4c      	ite	mi
    24dc:	4905      	ldrmi	r1, [pc, #20]	; (24f4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    24de:	4906      	ldrpl	r1, [pc, #24]	; (24f8 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    24e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    24e4:	f7ff bf4c 	b.w	2380 <print_formatted>
}
    24e8:	bd38      	pop	{r3, r4, r5, pc}
    24ea:	bf00      	nop
    24ec:	00026014 	.word	0x00026014
    24f0:	0002659e 	.word	0x0002659e
    24f4:	0002604a 	.word	0x0002604a
    24f8:	00026049 	.word	0x00026049

000024fc <hexdump_line_print>:
{
    24fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2500:	461d      	mov	r5, r3
    2502:	9b08      	ldr	r3, [sp, #32]
    2504:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2506:	06da      	lsls	r2, r3, #27
{
    2508:	4604      	mov	r4, r0
    250a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    250c:	d405      	bmi.n	251a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    250e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2510:	bf4c      	ite	mi
    2512:	492b      	ldrmi	r1, [pc, #172]	; (25c0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    2514:	492b      	ldrpl	r1, [pc, #172]	; (25c4 <hexdump_line_print+0xc8>)
    2516:	f7ff ff33 	bl	2380 <print_formatted>
		print_formatted(log_output, " ");
    251a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 25cc <hexdump_line_print+0xd0>
{
    251e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2522:	45a8      	cmp	r8, r5
    2524:	db2d      	blt.n	2582 <hexdump_line_print+0x86>
			print_formatted(log_output, "   ");
    2526:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 25d0 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    252a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 25d4 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    252e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 25cc <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2532:	2500      	movs	r5, #0
		if (i < length) {
    2534:	42bd      	cmp	r5, r7
    2536:	d232      	bcs.n	259e <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    2538:	5d72      	ldrb	r2, [r6, r5]
    253a:	4649      	mov	r1, r9
    253c:	4620      	mov	r0, r4
    253e:	f7ff ff1f 	bl	2380 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2542:	3501      	adds	r5, #1
    2544:	2d10      	cmp	r5, #16
    2546:	d123      	bne.n	2590 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    2548:	491f      	ldr	r1, [pc, #124]	; (25c8 <hexdump_line_print+0xcc>)
			print_formatted(log_output, " ");
    254a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 25cc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    254e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 25d8 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    2552:	f8df a088 	ldr.w	sl, [pc, #136]	; 25dc <hexdump_line_print+0xe0>
	print_formatted(log_output, "|");
    2556:	4620      	mov	r0, r4
    2558:	f7ff ff12 	bl	2380 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    255c:	2500      	movs	r5, #0
		if (i < length) {
    255e:	42af      	cmp	r7, r5
    2560:	d929      	bls.n	25b6 <hexdump_line_print+0xba>
			char c = (char)data[i];
    2562:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    2564:	f812 3009 	ldrb.w	r3, [r2, r9]
    2568:	f013 0f97 	tst.w	r3, #151	; 0x97
    256c:	bf08      	it	eq
    256e:	222e      	moveq	r2, #46	; 0x2e
    2570:	4651      	mov	r1, sl
    2572:	4620      	mov	r0, r4
    2574:	f7ff ff04 	bl	2380 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2578:	3501      	adds	r5, #1
    257a:	2d10      	cmp	r5, #16
    257c:	d114      	bne.n	25a8 <hexdump_line_print+0xac>
}
    257e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    2582:	4649      	mov	r1, r9
    2584:	4620      	mov	r0, r4
    2586:	f7ff fefb 	bl	2380 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    258a:	f108 0801 	add.w	r8, r8, #1
    258e:	e7c8      	b.n	2522 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2590:	076a      	lsls	r2, r5, #29
    2592:	d1cf      	bne.n	2534 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    2594:	4651      	mov	r1, sl
    2596:	4620      	mov	r0, r4
    2598:	f7ff fef2 	bl	2380 <print_formatted>
    259c:	e7ca      	b.n	2534 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    259e:	4641      	mov	r1, r8
    25a0:	4620      	mov	r0, r4
    25a2:	f7ff feed 	bl	2380 <print_formatted>
    25a6:	e7cc      	b.n	2542 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    25a8:	076b      	lsls	r3, r5, #29
    25aa:	d1d8      	bne.n	255e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    25ac:	4641      	mov	r1, r8
    25ae:	4620      	mov	r0, r4
    25b0:	f7ff fee6 	bl	2380 <print_formatted>
    25b4:	e7d3      	b.n	255e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    25b6:	4641      	mov	r1, r8
    25b8:	4620      	mov	r0, r4
    25ba:	f7ff fee1 	bl	2380 <print_formatted>
    25be:	e7db      	b.n	2578 <hexdump_line_print+0x7c>
    25c0:	0002604a 	.word	0x0002604a
    25c4:	00026049 	.word	0x00026049
    25c8:	00026056 	.word	0x00026056
    25cc:	000270fe 	.word	0x000270fe
    25d0:	00026052 	.word	0x00026052
    25d4:	0002604c 	.word	0x0002604c
    25d8:	00029426 	.word	0x00029426
    25dc:	00026058 	.word	0x00026058

000025e0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    25e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    25e4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    25e6:	f013 0807 	ands.w	r8, r3, #7
{
    25ea:	4617      	mov	r7, r2
    25ec:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    25ee:	7a0a      	ldrb	r2, [r1, #8]
    25f0:	4605      	mov	r5, r0
    25f2:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    25f4:	d021      	beq.n	263a <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    25f6:	8949      	ldrh	r1, [r1, #10]
    25f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    25fc:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2600:	43d2      	mvns	r2, r2
    2602:	e9cd 8300 	strd	r8, r3, [sp]
    2606:	9102      	str	r1, [sp, #8]
    2608:	68f3      	ldr	r3, [r6, #12]
    260a:	f002 0201 	and.w	r2, r2, #1
    260e:	4639      	mov	r1, r7
    2610:	f7ff fec8 	bl	23a4 <prefix_print>
    2614:	4681      	mov	r9, r0
    2616:	7a34      	ldrb	r4, [r6, #8]
    2618:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    261a:	f014 0401 	ands.w	r4, r4, #1
    261e:	d00e      	beq.n	263e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    2620:	4629      	mov	r1, r5
    2622:	4630      	mov	r0, r6
    2624:	f012 f9a8 	bl	14978 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    2628:	f1b8 0f00 	cmp.w	r8, #0
    262c:	d02b      	beq.n	2686 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    262e:	4642      	mov	r2, r8
    2630:	4639      	mov	r1, r7
    2632:	4628      	mov	r0, r5
    2634:	f7ff ff44 	bl	24c0 <postfix_print>
    2638:	e025      	b.n	2686 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    263a:	46c1      	mov	r9, r8
    263c:	e7eb      	b.n	2616 <log_output_msg_process+0x36>
	} else if (raw_string) {
    263e:	f1b8 0f00 	cmp.w	r8, #0
    2642:	d126      	bne.n	2692 <log_output_msg_process+0xb2>
	size_t offset = 0;
    2644:	4627      	mov	r7, r4
		length = log_output->size;
    2646:	68eb      	ldr	r3, [r5, #12]
    2648:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    264a:	aa06      	add	r2, sp, #24
    264c:	463b      	mov	r3, r7
    264e:	68a9      	ldr	r1, [r5, #8]
    2650:	4630      	mov	r0, r6
    2652:	f012 f97d 	bl	14950 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    2656:	9a06      	ldr	r2, [sp, #24]
    2658:	686b      	ldr	r3, [r5, #4]
    265a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    265c:	b13a      	cbz	r2, 266e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    265e:	68ab      	ldr	r3, [r5, #8]
    2660:	4413      	add	r3, r2
    2662:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2666:	f1a4 030a 	sub.w	r3, r4, #10
    266a:	425c      	negs	r4, r3
    266c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    266e:	4628      	mov	r0, r5
    2670:	f012 fadf 	bl	14c32 <log_output_flush>
		offset += length;
    2674:	9b06      	ldr	r3, [sp, #24]
    2676:	441f      	add	r7, r3
	} while (length > 0);
    2678:	2b00      	cmp	r3, #0
    267a:	d1e4      	bne.n	2646 <log_output_msg_process+0x66>
	if (eol) {
    267c:	b11c      	cbz	r4, 2686 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    267e:	4914      	ldr	r1, [pc, #80]	; (26d0 <log_output_msg_process+0xf0>)
    2680:	4628      	mov	r0, r5
    2682:	f7ff fe7d 	bl	2380 <print_formatted>
	}

	log_output_flush(log_output);
    2686:	4628      	mov	r0, r5
    2688:	f012 fad3 	bl	14c32 <log_output_flush>
}
    268c:	b00a      	add	sp, #40	; 0x28
    268e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2692:	4630      	mov	r0, r6
    2694:	f012 f908 	bl	148a8 <log_msg_str_get>
    2698:	490e      	ldr	r1, [pc, #56]	; (26d4 <log_output_msg_process+0xf4>)
    269a:	4602      	mov	r2, r0
    269c:	4628      	mov	r0, r5
    269e:	f7ff fe6f 	bl	2380 <print_formatted>
		length = sizeof(buf);
    26a2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    26a6:	aa05      	add	r2, sp, #20
    26a8:	4623      	mov	r3, r4
    26aa:	a906      	add	r1, sp, #24
    26ac:	4630      	mov	r0, r6
		length = sizeof(buf);
    26ae:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    26b2:	f012 f94d 	bl	14950 <log_msg_hexdump_data_get>
		if (length) {
    26b6:	9a05      	ldr	r2, [sp, #20]
    26b8:	2a00      	cmp	r2, #0
    26ba:	d0b8      	beq.n	262e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    26bc:	464b      	mov	r3, r9
    26be:	9700      	str	r7, [sp, #0]
    26c0:	a906      	add	r1, sp, #24
    26c2:	4628      	mov	r0, r5
    26c4:	f7ff ff1a 	bl	24fc <hexdump_line_print>
			offset += length;
    26c8:	9b05      	ldr	r3, [sp, #20]
    26ca:	441c      	add	r4, r3
		length = sizeof(buf);
    26cc:	e7eb      	b.n	26a6 <log_output_msg_process+0xc6>
    26ce:	bf00      	nop
    26d0:	0002605b 	.word	0x0002605b
    26d4:	0002659e 	.word	0x0002659e

000026d8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    26d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    26da:	e9d0 4300 	ldrd	r4, r3, [r0]
    26de:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    26e0:	4a0f      	ldr	r2, [pc, #60]	; (2720 <log_output_dropped_process+0x48>)
    26e2:	f242 730f 	movw	r3, #9999	; 0x270f
    26e6:	428b      	cmp	r3, r1
    26e8:	bf28      	it	cs
    26ea:	460b      	movcs	r3, r1
    26ec:	4668      	mov	r0, sp
    26ee:	2105      	movs	r1, #5
    26f0:	f011 fed4 	bl	1449c <snprintk>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    26f4:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    26f6:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    26f8:	490a      	ldr	r1, [pc, #40]	; (2724 <log_output_dropped_process+0x4c>)
    26fa:	4620      	mov	r0, r4
    26fc:	220b      	movs	r2, #11
    26fe:	f012 f92e 	bl	1495e <buffer_write>
	buffer_write(outf, buf, len, dev);
    2702:	462b      	mov	r3, r5
    2704:	4632      	mov	r2, r6
    2706:	4669      	mov	r1, sp
    2708:	4620      	mov	r0, r4
    270a:	f012 f928 	bl	1495e <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    270e:	4906      	ldr	r1, [pc, #24]	; (2728 <log_output_dropped_process+0x50>)
    2710:	462b      	mov	r3, r5
    2712:	221b      	movs	r2, #27
    2714:	4620      	mov	r0, r4
    2716:	f012 f922 	bl	1495e <buffer_write>
}
    271a:	b002      	add	sp, #8
    271c:	bd70      	pop	{r4, r5, r6, pc}
    271e:	bf00      	nop
    2720:	00025ec3 	.word	0x00025ec3
    2724:	00026099 	.word	0x00026099
    2728:	0002607d 	.word	0x0002607d

0000272c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    272c:	4a08      	ldr	r2, [pc, #32]	; (2750 <log_output_timestamp_freq_set+0x24>)
{
    272e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2730:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2732:	4c08      	ldr	r4, [pc, #32]	; (2754 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2734:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2736:	2100      	movs	r1, #0
    2738:	42a0      	cmp	r0, r4
    273a:	d804      	bhi.n	2746 <log_output_timestamp_freq_set+0x1a>
    273c:	b101      	cbz	r1, 2740 <log_output_timestamp_freq_set+0x14>
    273e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2740:	4b05      	ldr	r3, [pc, #20]	; (2758 <log_output_timestamp_freq_set+0x2c>)
    2742:	6018      	str	r0, [r3, #0]
}
    2744:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2746:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2748:	005b      	lsls	r3, r3, #1
    274a:	2101      	movs	r1, #1
    274c:	e7f4      	b.n	2738 <log_output_timestamp_freq_set+0xc>
    274e:	bf00      	nop
    2750:	200096a8 	.word	0x200096a8
    2754:	000f4240 	.word	0x000f4240
    2758:	200096a4 	.word	0x200096a4

0000275c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    275c:	4b01      	ldr	r3, [pc, #4]	; (2764 <log_backend_rtt_init+0x8>)
    275e:	2201      	movs	r2, #1
    2760:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2762:	4770      	bx	lr
    2764:	2000e6b6 	.word	0x2000e6b6

00002768 <panic>:

static void panic(struct log_backend const *const backend)
{
    2768:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    276a:	4803      	ldr	r0, [pc, #12]	; (2778 <panic+0x10>)
    276c:	f012 fa61 	bl	14c32 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    2770:	4b02      	ldr	r3, [pc, #8]	; (277c <panic+0x14>)
    2772:	2201      	movs	r2, #1
    2774:	701a      	strb	r2, [r3, #0]
}
    2776:	bd08      	pop	{r3, pc}
    2778:	0002557c 	.word	0x0002557c
    277c:	2000e6b7 	.word	0x2000e6b7

00002780 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    2780:	4801      	ldr	r0, [pc, #4]	; (2788 <dropped+0x8>)
    2782:	f7ff bfa9 	b.w	26d8 <log_output_dropped_process>
    2786:	bf00      	nop
    2788:	0002557c 	.word	0x0002557c

0000278c <put>:
{
    278c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    278e:	4608      	mov	r0, r1
    2790:	460c      	mov	r4, r1
    2792:	f012 f847 	bl	14824 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    2796:	4805      	ldr	r0, [pc, #20]	; (27ac <put+0x20>)
    2798:	4621      	mov	r1, r4
    279a:	220f      	movs	r2, #15
    279c:	f7ff ff20 	bl	25e0 <log_output_msg_process>
	log_msg_put(msg);
    27a0:	4620      	mov	r0, r4
}
    27a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27a6:	f012 b86c 	b.w	14882 <log_msg_put>
    27aa:	bf00      	nop
    27ac:	0002557c 	.word	0x0002557c

000027b0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    27b0:	4b05      	ldr	r3, [pc, #20]	; (27c8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	b11b      	cbz	r3, 27be <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    27b6:	f241 3088 	movw	r0, #5000	; 0x1388
    27ba:	f012 be76 	b.w	154aa <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    27be:	20a4      	movs	r0, #164	; 0xa4
    27c0:	2100      	movs	r1, #0
    27c2:	f002 bdaf 	b.w	5324 <z_impl_k_sleep>
    27c6:	bf00      	nop
    27c8:	2000e6b7 	.word	0x2000e6b7

000027cc <data_out_block_mode>:
{
    27cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    27d0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2864 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    27d4:	f8df b090 	ldr.w	fp, [pc, #144]	; 2868 <data_out_block_mode+0x9c>
{
    27d8:	4607      	mov	r7, r0
    27da:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    27dc:	2404      	movs	r4, #4
    27de:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    27e0:	f899 3000 	ldrb.w	r3, [r9]
    27e4:	b933      	cbnz	r3, 27f4 <data_out_block_mode+0x28>
    27e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    27ee:	4658      	mov	r0, fp
    27f0:	f002 f9b0 	bl	4b54 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    27f4:	4632      	mov	r2, r6
    27f6:	4639      	mov	r1, r7
    27f8:	2000      	movs	r0, #0
    27fa:	f000 fab3 	bl	2d64 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    27fe:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2802:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    2804:	b913      	cbnz	r3, 280c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    2806:	4658      	mov	r0, fp
    2808:	f002 fa1c 	bl	4c44 <z_impl_k_mutex_unlock>
		if (ret) {
    280c:	4d14      	ldr	r5, [pc, #80]	; (2860 <data_out_block_mode+0x94>)
    280e:	f1b8 0f00 	cmp.w	r8, #0
    2812:	d018      	beq.n	2846 <data_out_block_mode+0x7a>
	host_present = true;
    2814:	2301      	movs	r3, #1
    2816:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2818:	f89a 3000 	ldrb.w	r3, [sl]
    281c:	b933      	cbnz	r3, 282c <data_out_block_mode+0x60>
}
    281e:	4630      	mov	r0, r6
    2820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    2824:	b95c      	cbnz	r4, 283e <data_out_block_mode+0x72>
		host_present = false;
    2826:	702c      	strb	r4, [r5, #0]
    2828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    282c:	2000      	movs	r0, #0
    282e:	f000 fb19 	bl	2e64 <SEGGER_RTT_HasDataUp>
    2832:	2800      	cmp	r0, #0
    2834:	d0f3      	beq.n	281e <data_out_block_mode+0x52>
    2836:	782b      	ldrb	r3, [r5, #0]
    2838:	2b00      	cmp	r3, #0
    283a:	d1f3      	bne.n	2824 <data_out_block_mode+0x58>
    283c:	e7ef      	b.n	281e <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    283e:	3c01      	subs	r4, #1
    2840:	f7ff ffb6 	bl	27b0 <on_failed_write.part.0>
    2844:	e7f2      	b.n	282c <data_out_block_mode+0x60>
		} else if (host_present) {
    2846:	782b      	ldrb	r3, [r5, #0]
    2848:	b113      	cbz	r3, 2850 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    284a:	3c01      	subs	r4, #1
    284c:	d104      	bne.n	2858 <data_out_block_mode+0x8c>
		host_present = false;
    284e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2850:	782b      	ldrb	r3, [r5, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d1c4      	bne.n	27e0 <data_out_block_mode+0x14>
    2856:	e7e2      	b.n	281e <data_out_block_mode+0x52>
    2858:	f7ff ffaa 	bl	27b0 <on_failed_write.part.0>
    285c:	e7f8      	b.n	2850 <data_out_block_mode+0x84>
    285e:	bf00      	nop
    2860:	2000e6b6 	.word	0x2000e6b6
    2864:	2000e6b7 	.word	0x2000e6b7
    2868:	200008ac 	.word	0x200008ac

0000286c <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    286c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    286e:	4c04      	ldr	r4, [pc, #16]	; (2880 <__do_init_array_aux+0x14>)
    2870:	4d04      	ldr	r5, [pc, #16]	; (2884 <__do_init_array_aux+0x18>)
    2872:	42ac      	cmp	r4, r5
    2874:	d300      	bcc.n	2878 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    2876:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    2878:	f854 3b04 	ldr.w	r3, [r4], #4
    287c:	4798      	blx	r3
		func++) {
    287e:	e7f8      	b.n	2872 <__do_init_array_aux+0x6>
    2880:	0001ebc8 	.word	0x0001ebc8
    2884:	0001ebc8 	.word	0x0001ebc8

00002888 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    2888:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    288a:	4c05      	ldr	r4, [pc, #20]	; (28a0 <__do_global_ctors_aux+0x18>)
    288c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    288e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    2892:	b905      	cbnz	r5, 2896 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    2894:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    2896:	f854 3904 	ldr.w	r3, [r4], #-4
    289a:	3d01      	subs	r5, #1
    289c:	4798      	blx	r3
    289e:	e7f8      	b.n	2892 <__do_global_ctors_aux+0xa>
    28a0:	0001ebc0 	.word	0x0001ebc0

000028a4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    28a4:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    28a6:	4804      	ldr	r0, [pc, #16]	; (28b8 <rtt_console_init+0x14>)
    28a8:	f7ff f878 	bl	199c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    28ac:	4802      	ldr	r0, [pc, #8]	; (28b8 <rtt_console_init+0x14>)
    28ae:	f000 ff6b 	bl	3788 <__stdout_hook_install>

	return 0;
}
    28b2:	2000      	movs	r0, #0
    28b4:	bd08      	pop	{r3, pc}
    28b6:	bf00      	nop
    28b8:	000028bd 	.word	0x000028bd

000028bc <rtt_console_out>:
{
    28bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    28c0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2924 <rtt_console_out+0x68>
    28c4:	4e16      	ldr	r6, [pc, #88]	; (2920 <rtt_console_out+0x64>)
	char c = (char)character;
    28c6:	f88d 0007 	strb.w	r0, [sp, #7]
{
    28ca:	4604      	mov	r4, r0
	char c = (char)character;
    28cc:	2503      	movs	r5, #3
    28ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28d6:	4640      	mov	r0, r8
    28d8:	f002 f93c 	bl	4b54 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    28dc:	2201      	movs	r2, #1
    28de:	f10d 0107 	add.w	r1, sp, #7
    28e2:	2000      	movs	r0, #0
    28e4:	f000 fa8a 	bl	2dfc <SEGGER_RTT_WriteNoLock>
    28e8:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    28ea:	4640      	mov	r0, r8
    28ec:	f002 f9aa 	bl	4c44 <z_impl_k_mutex_unlock>
		if (cnt) {
    28f0:	b12f      	cbz	r7, 28fe <rtt_console_out+0x42>
			host_present = true;
    28f2:	2301      	movs	r3, #1
    28f4:	7033      	strb	r3, [r6, #0]
}
    28f6:	4620      	mov	r0, r4
    28f8:	b002      	add	sp, #8
    28fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    28fe:	7833      	ldrb	r3, [r6, #0]
    2900:	2b00      	cmp	r3, #0
    2902:	d0f8      	beq.n	28f6 <rtt_console_out+0x3a>
			if (max_cnt) {
    2904:	3d01      	subs	r5, #1
    2906:	d008      	beq.n	291a <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    2908:	f012 fdc9 	bl	1549e <k_is_in_isr>
    290c:	2800      	cmp	r0, #0
    290e:	d1de      	bne.n	28ce <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    2910:	2100      	movs	r1, #0
    2912:	2042      	movs	r0, #66	; 0x42
    2914:	f002 fd06 	bl	5324 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline s32_t k_msleep(s32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    2918:	e7d9      	b.n	28ce <rtt_console_out+0x12>
				host_present = false;
    291a:	7035      	strb	r5, [r6, #0]
    291c:	e7eb      	b.n	28f6 <rtt_console_out+0x3a>
    291e:	bf00      	nop
    2920:	2000e6b8 	.word	0x2000e6b8
    2924:	200008ac 	.word	0x200008ac

00002928 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    2928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    292a:	4f12      	ldr	r7, [pc, #72]	; (2974 <clkstarted_handle.constprop.0+0x4c>)
    292c:	68fb      	ldr	r3, [r7, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    292e:	240c      	movs	r4, #12
    2930:	fb04 3400 	mla	r4, r4, r0, r3
    2934:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    2936:	4605      	mov	r5, r0
	sub_data->started = true;
    2938:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    293a:	f04f 0320 	mov.w	r3, #32
    293e:	f3ef 8111 	mrs	r1, BASEPRI
    2942:	f383 8811 	msr	BASEPRI, r3
    2946:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    294a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    294c:	b12b      	cbz	r3, 295a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    294e:	6866      	ldr	r6, [r4, #4]
    2950:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2952:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2954:	42b3      	cmp	r3, r6
	list->tail = node;
    2956:	bf08      	it	eq
    2958:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    295a:	f381 8811 	msr	BASEPRI, r1
    295e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    2962:	b903      	cbnz	r3, 2966 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    2964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    2966:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    296a:	4629      	mov	r1, r5
    296c:	4638      	mov	r0, r7
    296e:	47b0      	blx	r6
    2970:	e7e3      	b.n	293a <clkstarted_handle.constprop.0+0x12>
    2972:	bf00      	nop
    2974:	20000790 	.word	0x20000790

00002978 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2978:	4b15      	ldr	r3, [pc, #84]	; (29d0 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    297a:	b507      	push	{r0, r1, r2, lr}
    297c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    297e:	b182      	cbz	r2, 29a2 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    2980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2984:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2988:	07d1      	lsls	r1, r2, #31
    298a:	d50a      	bpl.n	29a2 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    298c:	2200      	movs	r2, #0
    298e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	9300      	str	r3, [sp, #0]
    (void)dummy;
    2994:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2996:	4b0f      	ldr	r3, [pc, #60]	; (29d4 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    2998:	68db      	ldr	r3, [r3, #12]
    299a:	7a58      	ldrb	r0, [r3, #9]
    299c:	b908      	cbnz	r0, 29a2 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    299e:	f7ff ffc3 	bl	2928 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    29a2:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <nrf_power_clock_isr+0x60>)
    29a4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    29a6:	b182      	cbz	r2, 29ca <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    29a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29ac:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    29b0:	0792      	lsls	r2, r2, #30
    29b2:	d50a      	bpl.n	29ca <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29b4:	2200      	movs	r2, #0
    29b6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	9301      	str	r3, [sp, #4]
    (void)dummy;
    29bc:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    29be:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    29c0:	b003      	add	sp, #12
    29c2:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    29c6:	f7ff bfaf 	b.w	2928 <clkstarted_handle.constprop.0>
}
    29ca:	b003      	add	sp, #12
    29cc:	f85d fb04 	ldr.w	pc, [sp], #4
    29d0:	40000100 	.word	0x40000100
    29d4:	20000790 	.word	0x20000790
    29d8:	40000104 	.word	0x40000104

000029dc <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    29dc:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    29de:	4b08      	ldr	r3, [pc, #32]	; (2a00 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    29e4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    29e8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    29ec:	4290      	cmp	r0, r2
    29ee:	d100      	bne.n	29f2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    29f0:	4770      	bx	lr
    29f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    29f6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    29fc:	e7f2      	b.n	29e4 <handle_next_tick_case+0x8>
    29fe:	bf00      	nop
    2a00:	40011000 	.word	0x40011000

00002a04 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2a04:	4b04      	ldr	r3, [pc, #16]	; (2a18 <event_clear+0x14>)
    2a06:	2200      	movs	r2, #0
{
    2a08:	b082      	sub	sp, #8
    2a0a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2a10:	9b01      	ldr	r3, [sp, #4]
}
    2a12:	b002      	add	sp, #8
    2a14:	4770      	bx	lr
    2a16:	bf00      	nop
    2a18:	40011140 	.word	0x40011140

00002a1c <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    2a1c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    2a1e:	f7ff fff1 	bl	2a04 <event_clear>
    return p_reg->CC[ch];
    2a22:	4b07      	ldr	r3, [pc, #28]	; (2a40 <rtc1_nrf_isr+0x24>)

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2a24:	4a07      	ldr	r2, [pc, #28]	; (2a44 <rtc1_nrf_isr+0x28>)
    2a26:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    2a2a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2a2c:	1ac0      	subs	r0, r0, r3
    2a2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2a32:	4403      	add	r3, r0
    2a34:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    2a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    2a3a:	f002 be4b 	b.w	56d4 <z_clock_announce>
    2a3e:	bf00      	nop
    2a40:	40011000 	.word	0x40011000
    2a44:	200096dc 	.word	0x200096dc

00002a48 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    2a48:	b538      	push	{r3, r4, r5, lr}
    2a4a:	4814      	ldr	r0, [pc, #80]	; (2a9c <z_clock_driver_init+0x54>)
    2a4c:	f001 fe8c 	bl	4768 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    2a50:	b300      	cbz	r0, 2a94 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    2a52:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    2a54:	4d12      	ldr	r5, [pc, #72]	; (2aa0 <z_clock_driver_init+0x58>)
    2a56:	681b      	ldr	r3, [r3, #0]
    2a58:	2101      	movs	r1, #1
    2a5a:	2400      	movs	r4, #0
    2a5c:	4798      	blx	r3
    2a5e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    2a62:	f7ff ffcf 	bl	2a04 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a66:	4b0f      	ldr	r3, [pc, #60]	; (2aa4 <z_clock_driver_init+0x5c>)
    2a68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2a6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    2a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a74:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    2a78:	4622      	mov	r2, r4
    2a7a:	2101      	movs	r1, #1
    2a7c:	2011      	movs	r0, #17
    2a7e:	f000 fa59 	bl	2f34 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    2a82:	2011      	movs	r0, #17
    2a84:	f000 fa46 	bl	2f14 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a88:	4a07      	ldr	r2, [pc, #28]	; (2aa8 <z_clock_driver_init+0x60>)
    2a8a:	2301      	movs	r3, #1
    2a8c:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    2a8e:	4620      	mov	r0, r4
    2a90:	602b      	str	r3, [r5, #0]
}
    2a92:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a98:	e7fb      	b.n	2a92 <z_clock_driver_init+0x4a>
    2a9a:	bf00      	nop
    2a9c:	000260bb 	.word	0x000260bb
    2aa0:	40011000 	.word	0x40011000
    2aa4:	e000e100 	.word	0xe000e100
    2aa8:	40011008 	.word	0x40011008

00002aac <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2aac:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    2aae:	4b2a      	ldr	r3, [pc, #168]	; (2b58 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    2ab0:	4c2a      	ldr	r4, [pc, #168]	; (2b5c <z_clock_set_timeout+0xb0>)
    2ab2:	6819      	ldr	r1, [r3, #0]
    2ab4:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2ab8:	4d29      	ldr	r5, [pc, #164]	; (2b60 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    2aba:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2abc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2ac0:	bf08      	it	eq
    2ac2:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    2ac4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2ac8:	0212      	lsls	r2, r2, #8
    2aca:	d434      	bmi.n	2b36 <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    2acc:	3801      	subs	r0, #1
    2ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2ad2:	42a8      	cmp	r0, r5
    2ad4:	bfa8      	it	ge
    2ad6:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2ad8:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    2ada:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2ade:	4418      	add	r0, r3
    2ae0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    2ae4:	42a8      	cmp	r0, r5
    2ae6:	bf94      	ite	ls
    2ae8:	180d      	addls	r5, r1, r0
    2aea:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    2aec:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    2af0:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    2af4:	f7ff ff86 	bl	2a04 <event_clear>
	return (a - b) & COUNTER_MAX;
    2af8:	1a09      	subs	r1, r1, r0
    2afa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2afe:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    2b02:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    2b04:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2b08:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    2b0c:	d104      	bne.n	2b18 <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    2b0e:	200f      	movs	r0, #15
    2b10:	f012 fccb 	bl	154aa <z_impl_k_busy_wait>
		event_clear();
    2b14:	f7ff ff76 	bl	2a04 <event_clear>
    2b18:	4b12      	ldr	r3, [pc, #72]	; (2b64 <z_clock_set_timeout+0xb8>)
    2b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2b1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    2b22:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2b26:	1a2b      	subs	r3, r5, r0
    2b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    2b2c:	2b01      	cmp	r3, #1
    2b2e:	d104      	bne.n	2b3a <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    2b30:	f7ff ff54 	bl	29dc <handle_next_tick_case>
    2b34:	e00b      	b.n	2b4e <z_clock_set_timeout+0xa2>
		ticks = 0;
    2b36:	2000      	movs	r0, #0
    2b38:	e7ce      	b.n	2ad8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2b3a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2b3e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    2b42:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2b46:	1a2d      	subs	r5, r5, r0
    2b48:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    2b4a:	022b      	lsls	r3, r5, #8
    2b4c:	d4f0      	bmi.n	2b30 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    2b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b52:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    2b56:	bd70      	pop	{r4, r5, r6, pc}
    2b58:	200096dc 	.word	0x200096dc
    2b5c:	40011000 	.word	0x40011000
    2b60:	007fffff 	.word	0x007fffff
    2b64:	e000e100 	.word	0xe000e100

00002b68 <z_clock_elapsed>:
	__asm__ volatile(
    2b68:	f04f 0220 	mov.w	r2, #32
    2b6c:	f3ef 8311 	mrs	r3, BASEPRI
    2b70:	f382 8811 	msr	BASEPRI, r2
    2b74:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    2b78:	4a06      	ldr	r2, [pc, #24]	; (2b94 <z_clock_elapsed+0x2c>)
    2b7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2b7e:	4a06      	ldr	r2, [pc, #24]	; (2b98 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    2b80:	6812      	ldr	r2, [r2, #0]
    2b82:	1a80      	subs	r0, r0, r2
    2b84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    2b88:	f383 8811 	msr	BASEPRI, r3
    2b8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	40011000 	.word	0x40011000
    2b98:	200096dc 	.word	0x200096dc

00002b9c <z_timer_cycle_get_32>:
	__asm__ volatile(
    2b9c:	f04f 0320 	mov.w	r3, #32
    2ba0:	f3ef 8211 	mrs	r2, BASEPRI
    2ba4:	f383 8811 	msr	BASEPRI, r3
    2ba8:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    2bac:	4906      	ldr	r1, [pc, #24]	; (2bc8 <z_timer_cycle_get_32+0x2c>)
    2bae:	4b07      	ldr	r3, [pc, #28]	; (2bcc <z_timer_cycle_get_32+0x30>)
    2bb0:	6808      	ldr	r0, [r1, #0]
    2bb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    2bb6:	f382 8811 	msr	BASEPRI, r2
    2bba:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2bbe:	1a1b      	subs	r3, r3, r0
    2bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    2bc4:	4418      	add	r0, r3
    2bc6:	4770      	bx	lr
    2bc8:	200096dc 	.word	0x200096dc
    2bcc:	40011000 	.word	0x40011000

00002bd0 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    2bd0:	4801      	ldr	r0, [pc, #4]	; (2bd8 <nrf_cc310_platform_abort_init+0x8>)
    2bd2:	f00f b841 	b.w	11c58 <nrf_cc310_platform_set_abort>
    2bd6:	bf00      	nop
    2bd8:	000255b0 	.word	0x000255b0

00002bdc <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    2bdc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2bde:	b130      	cbz	r0, 2bee <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2be0:	6843      	ldr	r3, [r0, #4]
    2be2:	b13b      	cbz	r3, 2bf4 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    2be4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2be6:	f002 f82d 	bl	4c44 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    2bea:	2000      	movs	r0, #0
}
    2bec:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    2bee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2bf2:	e7fb      	b.n	2bec <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2bf4:	4800      	ldr	r0, [pc, #0]	; (2bf8 <mutex_unlock+0x1c>)
    2bf6:	e7f9      	b.n	2bec <mutex_unlock+0x10>
    2bf8:	ffff8fea 	.word	0xffff8fea

00002bfc <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    2bfc:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    2bfe:	4604      	mov	r4, r0
    2c00:	b918      	cbnz	r0, 2c0a <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    2c02:	4b0b      	ldr	r3, [pc, #44]	; (2c30 <mutex_free+0x34>)
    2c04:	480b      	ldr	r0, [pc, #44]	; (2c34 <mutex_free+0x38>)
    2c06:	685b      	ldr	r3, [r3, #4]
    2c08:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2c0a:	6865      	ldr	r5, [r4, #4]
    2c0c:	b155      	cbz	r5, 2c24 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    2c0e:	f015 0502 	ands.w	r5, r5, #2
    2c12:	6820      	ldr	r0, [r4, #0]
    2c14:	d107      	bne.n	2c26 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    2c16:	4601      	mov	r1, r0
    2c18:	4807      	ldr	r0, [pc, #28]	; (2c38 <mutex_free+0x3c>)
    2c1a:	f001 ff71 	bl	4b00 <k_mem_slab_free>
        mutex->mutex = NULL;
    2c1e:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    2c20:	2300      	movs	r3, #0
    2c22:	6063      	str	r3, [r4, #4]
}
    2c24:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
    2c26:	2214      	movs	r2, #20
    2c28:	2100      	movs	r1, #0
    2c2a:	f01b fd06 	bl	1e63a <memset>
    2c2e:	e7f7      	b.n	2c20 <mutex_free+0x24>
    2c30:	200006e8 	.word	0x200006e8
    2c34:	000260e5 	.word	0x000260e5
    2c38:	200096e0 	.word	0x200096e0

00002c3c <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    2c3c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c3e:	4604      	mov	r4, r0
    2c40:	b918      	cbnz	r0, 2c4a <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    2c42:	4b14      	ldr	r3, [pc, #80]	; (2c94 <mutex_init+0x58>)
    2c44:	4814      	ldr	r0, [pc, #80]	; (2c98 <mutex_init+0x5c>)
    2c46:	685b      	ldr	r3, [r3, #4]
    2c48:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    2c4a:	6863      	ldr	r3, [r4, #4]
    2c4c:	b9cb      	cbnz	r3, 2c82 <mutex_init+0x46>
    2c4e:	6823      	ldr	r3, [r4, #0]
    2c50:	b9bb      	cbnz	r3, 2c82 <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2c52:	4812      	ldr	r0, [pc, #72]	; (2c9c <mutex_init+0x60>)
    2c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c5c:	4621      	mov	r1, r4
    2c5e:	f001 ff1d 	bl	4a9c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2c62:	b908      	cbnz	r0, 2c68 <mutex_init+0x2c>
    2c64:	6823      	ldr	r3, [r4, #0]
    2c66:	b91b      	cbnz	r3, 2c70 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    2c68:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <mutex_init+0x58>)
    2c6a:	480d      	ldr	r0, [pc, #52]	; (2ca0 <mutex_init+0x64>)
    2c6c:	685b      	ldr	r3, [r3, #4]
    2c6e:	4798      	blx	r3
    2c70:	6820      	ldr	r0, [r4, #0]
    2c72:	2214      	movs	r2, #20
    2c74:	2100      	movs	r1, #0
    2c76:	f01b fce0 	bl	1e63a <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2c7a:	6863      	ldr	r3, [r4, #4]
    2c7c:	f043 0302 	orr.w	r3, r3, #2
    2c80:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c82:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2c84:	f012 fb0d 	bl	152a2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    2c88:	6863      	ldr	r3, [r4, #4]
    2c8a:	f043 0301 	orr.w	r3, r3, #1
    2c8e:	6063      	str	r3, [r4, #4]
}
    2c90:	bd10      	pop	{r4, pc}
    2c92:	bf00      	nop
    2c94:	200006e8 	.word	0x200006e8
    2c98:	000260e5 	.word	0x000260e5
    2c9c:	200096e0 	.word	0x200096e0
    2ca0:	0002610b 	.word	0x0002610b

00002ca4 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    2ca4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2ca6:	b168      	cbz	r0, 2cc4 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    2ca8:	6843      	ldr	r3, [r0, #4]
    2caa:	b173      	cbz	r3, 2cca <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2cac:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cb6:	f001 ff4d 	bl	4b54 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    2cba:	4b05      	ldr	r3, [pc, #20]	; (2cd0 <mutex_lock+0x2c>)
    if (ret == 0) {
    2cbc:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    2cbe:	bf18      	it	ne
    2cc0:	4618      	movne	r0, r3
}
    2cc2:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    2cc4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2cc8:	e7fb      	b.n	2cc2 <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2cca:	4802      	ldr	r0, [pc, #8]	; (2cd4 <mutex_lock+0x30>)
    2ccc:	e7f9      	b.n	2cc2 <mutex_lock+0x1e>
    2cce:	bf00      	nop
    2cd0:	ffff8fe9 	.word	0xffff8fe9
    2cd4:	ffff8fea 	.word	0xffff8fea

00002cd8 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    2cd8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2cda:	4906      	ldr	r1, [pc, #24]	; (2cf4 <nrf_cc310_platform_mutex_init+0x1c>)
    2cdc:	4806      	ldr	r0, [pc, #24]	; (2cf8 <nrf_cc310_platform_mutex_init+0x20>)
    2cde:	2340      	movs	r3, #64	; 0x40
    2ce0:	2214      	movs	r2, #20
    2ce2:	f012 fac3 	bl	1526c <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    2cea:	4904      	ldr	r1, [pc, #16]	; (2cfc <nrf_cc310_platform_mutex_init+0x24>)
    2cec:	4804      	ldr	r0, [pc, #16]	; (2d00 <nrf_cc310_platform_mutex_init+0x28>)
    2cee:	f00e bfef 	b.w	11cd0 <nrf_cc310_platform_set_mutexes>
    2cf2:	bf00      	nop
    2cf4:	200096fc 	.word	0x200096fc
    2cf8:	200096e0 	.word	0x200096e0
    2cfc:	000255c8 	.word	0x000255c8
    2d00:	000255b8 	.word	0x000255b8

00002d04 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2d04:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2d06:	4c11      	ldr	r4, [pc, #68]	; (2d4c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2d08:	4a11      	ldr	r2, [pc, #68]	; (2d50 <_DoInit+0x4c>)
    2d0a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2d0c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2d0e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2d12:	4b10      	ldr	r3, [pc, #64]	; (2d54 <_DoInit+0x50>)
    2d14:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    2d16:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    2d1c:	4a0e      	ldr	r2, [pc, #56]	; (2d58 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2d1e:	490f      	ldr	r1, [pc, #60]	; (2d5c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2d20:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    2d22:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    2d24:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2d26:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    2d28:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    2d2a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2d2c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    2d30:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2d32:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2d34:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2d36:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    2d38:	f01b fd47 	bl	1e7ca <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    2d3c:	4908      	ldr	r1, [pc, #32]	; (2d60 <_DoInit+0x5c>)
    2d3e:	4620      	mov	r0, r4
    2d40:	f01b fd43 	bl	1e7ca <strcpy>
  p->acID[6] = ' ';
    2d44:	2320      	movs	r3, #32
    2d46:	71a3      	strb	r3, [r4, #6]
}
    2d48:	bd10      	pop	{r4, pc}
    2d4a:	bf00      	nop
    2d4c:	20009bfc 	.word	0x20009bfc
    2d50:	00026138 	.word	0x00026138
    2d54:	2000e6c9 	.word	0x2000e6c9
    2d58:	2000e6b9 	.word	0x2000e6b9
    2d5c:	00026141 	.word	0x00026141
    2d60:	00026145 	.word	0x00026145

00002d64 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    2d68:	4f23      	ldr	r7, [pc, #140]	; (2df8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    2d6a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d6e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    2d70:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d74:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    2d76:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    2d78:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    2d7a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2d7c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    2d7e:	d834      	bhi.n	2dea <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    2d80:	f8d2 a020 	ldr.w	sl, [r2, #32]
    2d84:	ebaa 0905 	sub.w	r9, sl, r5
    2d88:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    2d8c:	4294      	cmp	r4, r2
    2d8e:	d811      	bhi.n	2db4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    2d90:	f04f 0918 	mov.w	r9, #24
    2d94:	fb06 9309 	mla	r3, r6, r9, r9
    2d98:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2d9a:	4622      	mov	r2, r4
    2d9c:	6858      	ldr	r0, [r3, #4]
    2d9e:	4641      	mov	r1, r8
    2da0:	4428      	add	r0, r5
    2da2:	f01b fc3c 	bl	1e61e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    2da6:	fb09 7606 	mla	r6, r9, r6, r7
    2daa:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    2dac:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    2dae:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    2db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    2db4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    2db6:	429c      	cmp	r4, r3
    2db8:	d81b      	bhi.n	2df2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    2dba:	fb00 bb0b 	mla	fp, r0, fp, fp
    2dbe:	44bb      	add	fp, r7
    2dc0:	464a      	mov	r2, r9
    2dc2:	f8db 0004 	ldr.w	r0, [fp, #4]
    2dc6:	442c      	add	r4, r5
    2dc8:	4428      	add	r0, r5
    2dca:	f01b fc28 	bl	1e61e <memcpy>
      if (NumBytes) {
    2dce:	ebb4 040a 	subs.w	r4, r4, sl
    2dd2:	d006      	beq.n	2de2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    2dd4:	f8db 0004 	ldr.w	r0, [fp, #4]
    2dd8:	4622      	mov	r2, r4
    2dda:	eb08 0109 	add.w	r1, r8, r9
    2dde:	f01b fc1e 	bl	1e61e <memcpy>
      pRing->WrOff = NumBytes;
    2de2:	2018      	movs	r0, #24
    2de4:	fb00 7606 	mla	r6, r0, r6, r7
    2de8:	e7e0      	b.n	2dac <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    2dea:	3b01      	subs	r3, #1
    2dec:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    2dee:	42a3      	cmp	r3, r4
    2df0:	d2ce      	bcs.n	2d90 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    2df2:	2000      	movs	r0, #0
    2df4:	e7dc      	b.n	2db0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    2df6:	bf00      	nop
    2df8:	20009bfc 	.word	0x20009bfc

00002dfc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    2dfe:	4c18      	ldr	r4, [pc, #96]	; (2e60 <SEGGER_RTT_WriteNoLock+0x64>)
    2e00:	2318      	movs	r3, #24
    2e02:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    2e06:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    2e0a:	4425      	add	r5, r4
  switch (pRing->Flags) {
    2e0c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2e0e:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2e10:	460f      	mov	r7, r1
    2e12:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    2e14:	d00f      	beq.n	2e36 <SEGGER_RTT_WriteNoLock+0x3a>
    2e16:	2c02      	cmp	r4, #2
    2e18:	d01a      	beq.n	2e50 <SEGGER_RTT_WriteNoLock+0x54>
    2e1a:	b9f4      	cbnz	r4, 2e5a <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    2e1c:	4628      	mov	r0, r5
    2e1e:	f011 ffed 	bl	14dfc <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    2e22:	4286      	cmp	r6, r0
    2e24:	d805      	bhi.n	2e32 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    2e26:	4632      	mov	r2, r6
    2e28:	4639      	mov	r1, r7
    2e2a:	4628      	mov	r0, r5
    2e2c:	f011 fff4 	bl	14e18 <_WriteNoCheck>
    2e30:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    2e32:	4620      	mov	r0, r4
    2e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    2e36:	4628      	mov	r0, r5
    2e38:	f011 ffe0 	bl	14dfc <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    2e3c:	4286      	cmp	r6, r0
    2e3e:	4634      	mov	r4, r6
    2e40:	bf28      	it	cs
    2e42:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    2e44:	4622      	mov	r2, r4
    2e46:	4639      	mov	r1, r7
    2e48:	4628      	mov	r0, r5
    2e4a:	f011 ffe5 	bl	14e18 <_WriteNoCheck>
    break;
    2e4e:	e7f0      	b.n	2e32 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2e50:	4628      	mov	r0, r5
}
    2e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2e56:	f011 bffb 	b.w	14e50 <_WriteBlocking>
  switch (pRing->Flags) {
    2e5a:	2400      	movs	r4, #0
  return Status;
    2e5c:	e7e9      	b.n	2e32 <SEGGER_RTT_WriteNoLock+0x36>
    2e5e:	bf00      	nop
    2e60:	20009bfc 	.word	0x20009bfc

00002e64 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    2e64:	4b03      	ldr	r3, [pc, #12]	; (2e74 <SEGGER_RTT_HasDataUp+0x10>)
    2e66:	2218      	movs	r2, #24
    2e68:	fb02 3000 	mla	r0, r2, r0, r3
    2e6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
    2e6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2e70:	1ac0      	subs	r0, r0, r3
    2e72:	4770      	bx	lr
    2e74:	20009bfc 	.word	0x20009bfc

00002e78 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2e78:	4a09      	ldr	r2, [pc, #36]	; (2ea0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2e7a:	490a      	ldr	r1, [pc, #40]	; (2ea4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2e7c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2e7e:	6809      	ldr	r1, [r1, #0]
    2e80:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e82:	4909      	ldr	r1, [pc, #36]	; (2ea8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2e84:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e86:	684b      	ldr	r3, [r1, #4]
    2e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2e8c:	604b      	str	r3, [r1, #4]
    2e8e:	2300      	movs	r3, #0
    2e90:	f383 8811 	msr	BASEPRI, r3
    2e94:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2e98:	6893      	ldr	r3, [r2, #8]
}
    2e9a:	6f18      	ldr	r0, [r3, #112]	; 0x70
    2e9c:	4770      	bx	lr
    2e9e:	bf00      	nop
    2ea0:	20009de0 	.word	0x20009de0
    2ea4:	000256b4 	.word	0x000256b4
    2ea8:	e000ed00 	.word	0xe000ed00

00002eac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2eac:	490f      	ldr	r1, [pc, #60]	; (2eec <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2eae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2eb0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2eb4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2eb6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2eba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ebe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ec0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ec4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ec8:	4f09      	ldr	r7, [pc, #36]	; (2ef0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2eca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ece:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2ed0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2ed2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ed4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    2ed6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2ed8:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2eda:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ede:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2ee2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2ee6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2eea:	4770      	bx	lr
    ldr r1, =_kernel
    2eec:	20009de0 	.word	0x20009de0
    ldr v4, =_SCS_ICSR
    2ef0:	e000ed04 	.word	0xe000ed04

00002ef4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2ef4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2ef8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2efa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2efe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f02:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f04:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f08:	2902      	cmp	r1, #2
    beq _oops
    2f0a:	d0ff      	beq.n	2f0c <_oops>

00002f0c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f0c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f0e:	f011 ffd3 	bl	14eb8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f12:	bd01      	pop	{r0, pc}

00002f14 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2f14:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2f16:	2b00      	cmp	r3, #0
    2f18:	db08      	blt.n	2f2c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f1a:	2201      	movs	r2, #1
    2f1c:	f000 001f 	and.w	r0, r0, #31
    2f20:	fa02 f000 	lsl.w	r0, r2, r0
    2f24:	095b      	lsrs	r3, r3, #5
    2f26:	4a02      	ldr	r2, [pc, #8]	; (2f30 <arch_irq_enable+0x1c>)
    2f28:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2f2c:	4770      	bx	lr
    2f2e:	bf00      	nop
    2f30:	e000e100 	.word	0xe000e100

00002f34 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f34:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f36:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f38:	bfa8      	it	ge
    2f3a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    2f3e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f42:	bfb8      	it	lt
    2f44:	4b06      	ldrlt	r3, [pc, #24]	; (2f60 <z_arm_irq_priority_set+0x2c>)
    2f46:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f4a:	bfac      	ite	ge
    2f4c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f50:	f000 000f 	andlt.w	r0, r0, #15
    2f54:	b2c9      	uxtb	r1, r1
    2f56:	bfb4      	ite	lt
    2f58:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f5a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2f5e:	4770      	bx	lr
    2f60:	e000ed14 	.word	0xe000ed14

00002f64 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    2f64:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    2f68:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    2f6a:	3a20      	subs	r2, #32
    2f6c:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    2f70:	4908      	ldr	r1, [pc, #32]	; (2f94 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    2f72:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2f74:	9b00      	ldr	r3, [sp, #0]
    2f76:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2f78:	9b01      	ldr	r3, [sp, #4]
    2f7a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    2f7c:	9b02      	ldr	r3, [sp, #8]
    2f7e:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    2f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f84:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    2f86:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    2f8a:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    2f8c:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    2f8e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2f90:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f92:	4770      	bx	lr
    2f94:	000144df 	.word	0x000144df

00002f98 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    2f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9a:	461d      	mov	r5, r3
    2f9c:	4606      	mov	r6, r0
    2f9e:	460c      	mov	r4, r1
    2fa0:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    2fa2:	2300      	movs	r3, #0
    2fa4:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2fa8:	f000 fb28 	bl	35fc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    2fac:	4b08      	ldr	r3, [pc, #32]	; (2fd0 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    2fae:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    2fb0:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
    2fb4:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2fb6:	4628      	mov	r0, r5
    2fb8:	f384 8809 	msr	PSP, r4
    2fbc:	2100      	movs	r1, #0
    2fbe:	b663      	cpsie	if
    2fc0:	f381 8811 	msr	BASEPRI, r1
    2fc4:	f3bf 8f6f 	isb	sy
    2fc8:	2200      	movs	r2, #0
    2fca:	2300      	movs	r3, #0
    2fcc:	f011 fa87 	bl	144de <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2fd0:	20009de0 	.word	0x20009de0

00002fd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2fd4:	4901      	ldr	r1, [pc, #4]	; (2fdc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2fd6:	2210      	movs	r2, #16
	str	r2, [r1]
    2fd8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2fda:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2fdc:	e000ed10 	.word	0xe000ed10

00002fe0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2fe0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2fe2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2fe4:	f380 8811 	msr	BASEPRI, r0
	isb
    2fe8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2fec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2ff0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2ff2:	b662      	cpsie	i
	isb
    2ff4:	f3bf 8f6f 	isb	sy

	bx	lr
    2ff8:	4770      	bx	lr
    2ffa:	bf00      	nop

00002ffc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2ffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2ffe:	4606      	mov	r6, r0

	if (esf != NULL) {
    3000:	460c      	mov	r4, r1
    3002:	b301      	cbz	r1, 3046 <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    3004:	4b13      	ldr	r3, [pc, #76]	; (3054 <z_arm_fatal_error+0x58>)
    3006:	4d14      	ldr	r5, [pc, #80]	; (3058 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3008:	4814      	ldr	r0, [pc, #80]	; (305c <z_arm_fatal_error+0x60>)
    300a:	1aed      	subs	r5, r5, r3
    300c:	08ed      	lsrs	r5, r5, #3
    300e:	01ad      	lsls	r5, r5, #6
    3010:	f045 0501 	orr.w	r5, r5, #1
    3014:	f8ad 5000 	strh.w	r5, [sp]
    3018:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    301c:	6809      	ldr	r1, [r1, #0]
    301e:	f011 fb75 	bl	1470c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3022:	f8ad 5000 	strh.w	r5, [sp]
    3026:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    302a:	68e1      	ldr	r1, [r4, #12]
    302c:	480c      	ldr	r0, [pc, #48]	; (3060 <z_arm_fatal_error+0x64>)
    302e:	f011 fb6d 	bl	1470c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3032:	69e1      	ldr	r1, [r4, #28]
    3034:	480b      	ldr	r0, [pc, #44]	; (3064 <z_arm_fatal_error+0x68>)
    3036:	462a      	mov	r2, r5
    3038:	f011 fb38 	bl	146ac <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    303c:	69a1      	ldr	r1, [r4, #24]
    303e:	480a      	ldr	r0, [pc, #40]	; (3068 <z_arm_fatal_error+0x6c>)
    3040:	462a      	mov	r2, r5
    3042:	f011 fb33 	bl	146ac <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3046:	4621      	mov	r1, r4
    3048:	4630      	mov	r0, r6
}
    304a:	b002      	add	sp, #8
    304c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3050:	f001 bbb4 	b.w	47bc <z_fatal_error>
    3054:	0001ebc8 	.word	0x0001ebc8
    3058:	0001ebe8 	.word	0x0001ebe8
    305c:	0002614c 	.word	0x0002614c
    3060:	0002617b 	.word	0x0002617b
    3064:	000261aa 	.word	0x000261aa
    3068:	000261b9 	.word	0x000261b9

0000306c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    306c:	bf30      	wfi
    b z_SysNmiOnReset
    306e:	f7ff bffd 	b.w	306c <z_SysNmiOnReset>
    3072:	bf00      	nop

00003074 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3074:	4a17      	ldr	r2, [pc, #92]	; (30d4 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3076:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3078:	4b17      	ldr	r3, [pc, #92]	; (30d8 <z_arm_prep_c+0x64>)
    307a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    307e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3084:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3088:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    308c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    3094:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3098:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    309c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    30a0:	4a0e      	ldr	r2, [pc, #56]	; (30dc <z_arm_prep_c+0x68>)
    30a2:	6853      	ldr	r3, [r2, #4]
    30a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    30a8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    30aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30ae:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    30b2:	2300      	movs	r3, #0
    30b4:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    30b8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    30bc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    30c0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    30c4:	f001 fbf6 	bl	48b4 <z_bss_zero>
	z_data_copy();
    30c8:	f001 fbfe 	bl	48c8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    30cc:	f000 fa64 	bl	3598 <z_arm_interrupt_init>
	z_cstart();
    30d0:	f001 fc3c 	bl	494c <z_cstart>
    30d4:	00000000 	.word	0x00000000
    30d8:	e000ed00 	.word	0xe000ed00
    30dc:	e000ef30 	.word	0xe000ef30

000030e0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    30e0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    30e2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    30e4:	4a0b      	ldr	r2, [pc, #44]	; (3114 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    30e6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    30e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    30ea:	bf1e      	ittt	ne
	movne	r1, #0
    30ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    30ee:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    30f0:	f012 f8ba 	blne	15268 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    30f4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    30f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    30fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    30fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3102:	4905      	ldr	r1, [pc, #20]	; (3118 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3104:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3106:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    3108:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    310a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    310e:	4903      	ldr	r1, [pc, #12]	; (311c <_isr_wrapper+0x3c>)
	bx r1
    3110:	4708      	bx	r1
    3112:	0000      	.short	0x0000
	ldr r2, =_kernel
    3114:	20009de0 	.word	0x20009de0
	ldr r1, =_sw_isr_table
    3118:	0001ea40 	.word	0x0001ea40
	ldr r1, =z_arm_int_exit
    311c:	0000357d 	.word	0x0000357d

00003120 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3120:	f011 fef9 	bl	14f16 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3124:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3126:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    312a:	4808      	ldr	r0, [pc, #32]	; (314c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    312c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3130:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3132:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3136:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    313a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    313c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    313e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3142:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3146:	f7ff ff95 	bl	3074 <z_arm_prep_c>
    314a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    314c:	20010f20 	.word	0x20010f20

00003150 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3150:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3154:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    3158:	4672      	mov	r2, lr

	push {r0, lr}
    315a:	b501      	push	{r0, lr}

	bl z_arm_fault
    315c:	f000 f932 	bl	33c4 <z_arm_fault>

	pop {r0, pc}
    3160:	bd01      	pop	{r0, pc}
    3162:	bf00      	nop

00003164 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    3164:	b570      	push	{r4, r5, r6, lr}
    3166:	4b23      	ldr	r3, [pc, #140]	; (31f4 <usage_fault.isra.0+0x90>)
    3168:	4c23      	ldr	r4, [pc, #140]	; (31f8 <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    316a:	4d24      	ldr	r5, [pc, #144]	; (31fc <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    316c:	4824      	ldr	r0, [pc, #144]	; (3200 <usage_fault.isra.0+0x9c>)
    316e:	1ae4      	subs	r4, r4, r3
    3170:	08e4      	lsrs	r4, r4, #3
    3172:	01a4      	lsls	r4, r4, #6
    3174:	f044 0601 	orr.w	r6, r4, #1
    3178:	4631      	mov	r1, r6
    317a:	f011 fa88 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    317e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3180:	0193      	lsls	r3, r2, #6
    3182:	d503      	bpl.n	318c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3184:	481f      	ldr	r0, [pc, #124]	; (3204 <usage_fault.isra.0+0xa0>)
    3186:	4631      	mov	r1, r6
    3188:	f011 fa81 	bl	1468e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    318c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    318e:	01dd      	lsls	r5, r3, #7
    3190:	d504      	bpl.n	319c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3192:	481d      	ldr	r0, [pc, #116]	; (3208 <usage_fault.isra.0+0xa4>)
    3194:	f044 0101 	orr.w	r1, r4, #1
    3198:	f011 fa79 	bl	1468e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    319c:	4d17      	ldr	r5, [pc, #92]	; (31fc <usage_fault.isra.0+0x98>)
    319e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    31a0:	0310      	lsls	r0, r2, #12
    31a2:	d504      	bpl.n	31ae <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    31a4:	4819      	ldr	r0, [pc, #100]	; (320c <usage_fault.isra.0+0xa8>)
    31a6:	f044 0101 	orr.w	r1, r4, #1
    31aa:	f011 fa70 	bl	1468e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    31ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31b0:	0359      	lsls	r1, r3, #13
    31b2:	d504      	bpl.n	31be <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    31b4:	4816      	ldr	r0, [pc, #88]	; (3210 <usage_fault.isra.0+0xac>)
    31b6:	f044 0101 	orr.w	r1, r4, #1
    31ba:	f011 fa68 	bl	1468e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    31be:	4d0f      	ldr	r5, [pc, #60]	; (31fc <usage_fault.isra.0+0x98>)
    31c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    31c2:	0392      	lsls	r2, r2, #14
    31c4:	d504      	bpl.n	31d0 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    31c6:	4813      	ldr	r0, [pc, #76]	; (3214 <usage_fault.isra.0+0xb0>)
    31c8:	f044 0101 	orr.w	r1, r4, #1
    31cc:	f011 fa5f 	bl	1468e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    31d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31d2:	03db      	lsls	r3, r3, #15
    31d4:	d504      	bpl.n	31e0 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    31d6:	4810      	ldr	r0, [pc, #64]	; (3218 <usage_fault.isra.0+0xb4>)
    31d8:	f044 0101 	orr.w	r1, r4, #1
    31dc:	f011 fa57 	bl	1468e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    31e0:	4a06      	ldr	r2, [pc, #24]	; (31fc <usage_fault.isra.0+0x98>)
    31e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31e4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    31e8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    31ec:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    31ee:	2000      	movs	r0, #0
    31f0:	bd70      	pop	{r4, r5, r6, pc}
    31f2:	bf00      	nop
    31f4:	0001ebc8 	.word	0x0001ebc8
    31f8:	0001ebe8 	.word	0x0001ebe8
    31fc:	e000ed00 	.word	0xe000ed00
    3200:	000261e7 	.word	0x000261e7
    3204:	000261ff 	.word	0x000261ff
    3208:	00026212 	.word	0x00026212
    320c:	0002622c 	.word	0x0002622c
    3210:	0002624a 	.word	0x0002624a
    3214:	0002626f 	.word	0x0002626f
    3218:	00026289 	.word	0x00026289

0000321c <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3220:	4b27      	ldr	r3, [pc, #156]	; (32c0 <mem_manage_fault.isra.0+0xa4>)
    3222:	4c28      	ldr	r4, [pc, #160]	; (32c4 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3224:	4d28      	ldr	r5, [pc, #160]	; (32c8 <mem_manage_fault.isra.0+0xac>)
    3226:	1ae4      	subs	r4, r4, r3
    3228:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    322a:	01a4      	lsls	r4, r4, #6
    322c:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3230:	4607      	mov	r7, r0
    3232:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3234:	4825      	ldr	r0, [pc, #148]	; (32cc <mem_manage_fault.isra.0+0xb0>)
    3236:	4641      	mov	r1, r8
    3238:	f011 fa29 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    323c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    323e:	06d1      	lsls	r1, r2, #27
    3240:	d503      	bpl.n	324a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3242:	4823      	ldr	r0, [pc, #140]	; (32d0 <mem_manage_fault.isra.0+0xb4>)
    3244:	4641      	mov	r1, r8
    3246:	f011 fa22 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    324a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    324c:	071a      	lsls	r2, r3, #28
    324e:	d504      	bpl.n	325a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3250:	4820      	ldr	r0, [pc, #128]	; (32d4 <mem_manage_fault.isra.0+0xb8>)
    3252:	f044 0101 	orr.w	r1, r4, #1
    3256:	f011 fa1a 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    325a:	4d1b      	ldr	r5, [pc, #108]	; (32c8 <mem_manage_fault.isra.0+0xac>)
    325c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    325e:	079b      	lsls	r3, r3, #30
    3260:	d512      	bpl.n	3288 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    3262:	f044 0801 	orr.w	r8, r4, #1
    3266:	481c      	ldr	r0, [pc, #112]	; (32d8 <mem_manage_fault.isra.0+0xbc>)
    3268:	4641      	mov	r1, r8
    326a:	f011 fa10 	bl	1468e <log_0>
		mmfar = SCB->MMFAR;
    326e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3270:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3272:	0618      	lsls	r0, r3, #24
    3274:	d508      	bpl.n	3288 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3276:	4819      	ldr	r0, [pc, #100]	; (32dc <mem_manage_fault.isra.0+0xc0>)
    3278:	4642      	mov	r2, r8
    327a:	f011 fa17 	bl	146ac <log_1>
			if (from_hard_fault) {
    327e:	b11f      	cbz	r7, 3288 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3280:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3286:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3288:	4d0f      	ldr	r5, [pc, #60]	; (32c8 <mem_manage_fault.isra.0+0xac>)
    328a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    328c:	07d2      	lsls	r2, r2, #31
    328e:	d504      	bpl.n	329a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3290:	4813      	ldr	r0, [pc, #76]	; (32e0 <mem_manage_fault.isra.0+0xc4>)
    3292:	f044 0101 	orr.w	r1, r4, #1
    3296:	f011 f9fa 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    329a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    329c:	069b      	lsls	r3, r3, #26
    329e:	d504      	bpl.n	32aa <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    32a0:	4810      	ldr	r0, [pc, #64]	; (32e4 <mem_manage_fault.isra.0+0xc8>)
    32a2:	f044 0101 	orr.w	r1, r4, #1
    32a6:	f011 f9f2 	bl	1468e <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    32aa:	4b07      	ldr	r3, [pc, #28]	; (32c8 <mem_manage_fault.isra.0+0xac>)
    32ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    32ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    32b0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    32b2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    32b6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    32b8:	7030      	strb	r0, [r6, #0]
}
    32ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32be:	bf00      	nop
    32c0:	0001ebc8 	.word	0x0001ebc8
    32c4:	0001ebe8 	.word	0x0001ebe8
    32c8:	e000ed00 	.word	0xe000ed00
    32cc:	000262b4 	.word	0x000262b4
    32d0:	000262ca 	.word	0x000262ca
    32d4:	000262fd 	.word	0x000262fd
    32d8:	00026310 	.word	0x00026310
    32dc:	00026328 	.word	0x00026328
    32e0:	0002633e 	.word	0x0002633e
    32e4:	0002635d 	.word	0x0002635d

000032e8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    32e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32ec:	4b2a      	ldr	r3, [pc, #168]	; (3398 <bus_fault.isra.0+0xb0>)
    32ee:	4c2b      	ldr	r4, [pc, #172]	; (339c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    32f0:	4d2b      	ldr	r5, [pc, #172]	; (33a0 <bus_fault.isra.0+0xb8>)
    32f2:	1ae4      	subs	r4, r4, r3
    32f4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    32f6:	01a4      	lsls	r4, r4, #6
    32f8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    32fc:	4607      	mov	r7, r0
    32fe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3300:	4828      	ldr	r0, [pc, #160]	; (33a4 <bus_fault.isra.0+0xbc>)
    3302:	4641      	mov	r1, r8
    3304:	f011 f9c3 	bl	1468e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3308:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    330a:	04d1      	lsls	r1, r2, #19
    330c:	d503      	bpl.n	3316 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    330e:	4826      	ldr	r0, [pc, #152]	; (33a8 <bus_fault.isra.0+0xc0>)
    3310:	4641      	mov	r1, r8
    3312:	f011 f9bc 	bl	1468e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3316:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3318:	051a      	lsls	r2, r3, #20
    331a:	d504      	bpl.n	3326 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    331c:	4823      	ldr	r0, [pc, #140]	; (33ac <bus_fault.isra.0+0xc4>)
    331e:	f044 0101 	orr.w	r1, r4, #1
    3322:	f011 f9b4 	bl	1468e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3326:	4d1e      	ldr	r5, [pc, #120]	; (33a0 <bus_fault.isra.0+0xb8>)
    3328:	6aab      	ldr	r3, [r5, #40]	; 0x28
    332a:	059b      	lsls	r3, r3, #22
    332c:	d512      	bpl.n	3354 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    332e:	f044 0801 	orr.w	r8, r4, #1
    3332:	481f      	ldr	r0, [pc, #124]	; (33b0 <bus_fault.isra.0+0xc8>)
    3334:	4641      	mov	r1, r8
    3336:	f011 f9aa 	bl	1468e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    333a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    333c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    333e:	0418      	lsls	r0, r3, #16
    3340:	d508      	bpl.n	3354 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3342:	481c      	ldr	r0, [pc, #112]	; (33b4 <bus_fault.isra.0+0xcc>)
    3344:	4642      	mov	r2, r8
    3346:	f011 f9b1 	bl	146ac <log_1>
			if (from_hard_fault) {
    334a:	b11f      	cbz	r7, 3354 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    334c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    334e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3352:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3354:	4d12      	ldr	r5, [pc, #72]	; (33a0 <bus_fault.isra.0+0xb8>)
    3356:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3358:	0559      	lsls	r1, r3, #21
    335a:	d504      	bpl.n	3366 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    335c:	4816      	ldr	r0, [pc, #88]	; (33b8 <bus_fault.isra.0+0xd0>)
    335e:	f044 0101 	orr.w	r1, r4, #1
    3362:	f011 f994 	bl	1468e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3366:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3368:	05da      	lsls	r2, r3, #23
    336a:	d50d      	bpl.n	3388 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    336c:	4813      	ldr	r0, [pc, #76]	; (33bc <bus_fault.isra.0+0xd4>)
    336e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3372:	f011 f98c 	bl	1468e <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3376:	4a0a      	ldr	r2, [pc, #40]	; (33a0 <bus_fault.isra.0+0xb8>)
    3378:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    337a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    337c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3380:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3382:	7030      	strb	r0, [r6, #0]
}
    3384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3388:	6aab      	ldr	r3, [r5, #40]	; 0x28
    338a:	049b      	lsls	r3, r3, #18
    338c:	d5f3      	bpl.n	3376 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    338e:	480c      	ldr	r0, [pc, #48]	; (33c0 <bus_fault.isra.0+0xd8>)
    3390:	f044 0101 	orr.w	r1, r4, #1
    3394:	e7ed      	b.n	3372 <bus_fault.isra.0+0x8a>
    3396:	bf00      	nop
    3398:	0001ebc8 	.word	0x0001ebc8
    339c:	0001ebe8 	.word	0x0001ebe8
    33a0:	e000ed00 	.word	0xe000ed00
    33a4:	0002638c 	.word	0x0002638c
    33a8:	000263a2 	.word	0x000263a2
    33ac:	000262fd 	.word	0x000262fd
    33b0:	000263b3 	.word	0x000263b3
    33b4:	000263cc 	.word	0x000263cc
    33b8:	000263e1 	.word	0x000263e1
    33bc:	000263fc 	.word	0x000263fc
    33c0:	0002635d 	.word	0x0002635d

000033c4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    33c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33c8:	4b5a      	ldr	r3, [pc, #360]	; (3534 <z_arm_fault+0x170>)
    33ca:	685f      	ldr	r7, [r3, #4]
{
    33cc:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33ce:	f3c7 0408 	ubfx	r4, r7, #0, #9
    33d2:	2600      	movs	r6, #0
    33d4:	f386 8811 	msr	BASEPRI, r6
    33d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    33dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    33e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    33e4:	d10d      	bne.n	3402 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    33e6:	f002 030c 	and.w	r3, r2, #12
    33ea:	2b08      	cmp	r3, #8
    33ec:	d10b      	bne.n	3406 <z_arm_fault+0x42>
    33ee:	4952      	ldr	r1, [pc, #328]	; (3538 <z_arm_fault+0x174>)
    33f0:	4b52      	ldr	r3, [pc, #328]	; (353c <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    33f2:	4853      	ldr	r0, [pc, #332]	; (3540 <z_arm_fault+0x17c>)
    33f4:	1ac9      	subs	r1, r1, r3
    33f6:	08c9      	lsrs	r1, r1, #3
    33f8:	0189      	lsls	r1, r1, #6
    33fa:	f041 0101 	orr.w	r1, r1, #1
    33fe:	f011 f946 	bl	1468e <log_0>
		return NULL;
    3402:	4635      	mov	r5, r6
    3404:	e004      	b.n	3410 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3406:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3408:	bf4e      	itee	mi
    340a:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    340c:	4605      	movpl	r5, r0
			*nested_exc = true;
    340e:	2601      	movpl	r6, #1
	*recoverable = false;
    3410:	2300      	movs	r3, #0
    3412:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    3416:	1ee3      	subs	r3, r4, #3
    3418:	2b09      	cmp	r3, #9
    341a:	d871      	bhi.n	3500 <z_arm_fault+0x13c>
    341c:	e8df f003 	tbb	[pc, r3]
    3420:	3c635f05 	.word	0x3c635f05
    3424:	70707070 	.word	0x70707070
    3428:	6770      	.short	0x6770
    342a:	4b44      	ldr	r3, [pc, #272]	; (353c <z_arm_fault+0x178>)
    342c:	4f42      	ldr	r7, [pc, #264]	; (3538 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    342e:	4845      	ldr	r0, [pc, #276]	; (3544 <z_arm_fault+0x180>)
    3430:	1aff      	subs	r7, r7, r3
    3432:	08ff      	lsrs	r7, r7, #3
    3434:	01bf      	lsls	r7, r7, #6
    3436:	f047 0701 	orr.w	r7, r7, #1
    343a:	4639      	mov	r1, r7
    343c:	f011 f927 	bl	1468e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3440:	4b3c      	ldr	r3, [pc, #240]	; (3534 <z_arm_fault+0x170>)
    3442:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3444:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3448:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    344c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3450:	d005      	beq.n	345e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3452:	483d      	ldr	r0, [pc, #244]	; (3548 <z_arm_fault+0x184>)
    3454:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    3456:	f011 f91a 	bl	1468e <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    345a:	2400      	movs	r4, #0
}
    345c:	e01f      	b.n	349e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3460:	005b      	lsls	r3, r3, #1
    3462:	d51c      	bpl.n	349e <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    3464:	4839      	ldr	r0, [pc, #228]	; (354c <z_arm_fault+0x188>)
    3466:	4639      	mov	r1, r7
    3468:	f011 f911 	bl	1468e <log_0>
		if (SCB_MMFSR != 0) {
    346c:	4b38      	ldr	r3, [pc, #224]	; (3550 <z_arm_fault+0x18c>)
    346e:	781b      	ldrb	r3, [r3, #0]
    3470:	b12b      	cbz	r3, 347e <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    3472:	f10d 0107 	add.w	r1, sp, #7
    3476:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3478:	f7ff fed0 	bl	321c <mem_manage_fault.isra.0>
    347c:	e00e      	b.n	349c <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    347e:	4b35      	ldr	r3, [pc, #212]	; (3554 <z_arm_fault+0x190>)
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	b12b      	cbz	r3, 3490 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    3484:	f10d 0107 	add.w	r1, sp, #7
    3488:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    348a:	f7ff ff2d 	bl	32e8 <bus_fault.isra.0>
    348e:	e005      	b.n	349c <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    3490:	4b31      	ldr	r3, [pc, #196]	; (3558 <z_arm_fault+0x194>)
    3492:	881b      	ldrh	r3, [r3, #0]
    3494:	b29b      	uxth	r3, r3
    3496:	b113      	cbz	r3, 349e <z_arm_fault+0xda>
			reason = usage_fault(esf);
    3498:	f7ff fe64 	bl	3164 <usage_fault.isra.0>
    349c:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    349e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34a2:	b9cb      	cbnz	r3, 34d8 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    34a4:	462b      	mov	r3, r5
    34a6:	f103 0720 	add.w	r7, r3, #32
    34aa:	ad02      	add	r5, sp, #8
    34ac:	6818      	ldr	r0, [r3, #0]
    34ae:	6859      	ldr	r1, [r3, #4]
    34b0:	462a      	mov	r2, r5
    34b2:	c203      	stmia	r2!, {r0, r1}
    34b4:	3308      	adds	r3, #8
    34b6:	42bb      	cmp	r3, r7
    34b8:	4615      	mov	r5, r2
    34ba:	d1f7      	bne.n	34ac <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    34bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34be:	b39e      	cbz	r6, 3528 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    34c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    34c4:	b922      	cbnz	r2, 34d0 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    34c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    34ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    34ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    34d0:	a902      	add	r1, sp, #8
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff fd92 	bl	2ffc <z_arm_fatal_error>
}
    34d8:	b00a      	add	sp, #40	; 0x28
    34da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    34de:	f10d 0107 	add.w	r1, sp, #7
    34e2:	2000      	movs	r0, #0
    34e4:	e7c8      	b.n	3478 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    34e6:	f10d 0107 	add.w	r1, sp, #7
    34ea:	2000      	movs	r0, #0
    34ec:	e7cd      	b.n	348a <z_arm_fault+0xc6>
    34ee:	4912      	ldr	r1, [pc, #72]	; (3538 <z_arm_fault+0x174>)
    34f0:	4b12      	ldr	r3, [pc, #72]	; (353c <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    34f2:	481a      	ldr	r0, [pc, #104]	; (355c <z_arm_fault+0x198>)
    34f4:	1ac9      	subs	r1, r1, r3
    34f6:	08c9      	lsrs	r1, r1, #3
    34f8:	0189      	lsls	r1, r1, #6
    34fa:	f041 0101 	orr.w	r1, r1, #1
    34fe:	e7aa      	b.n	3456 <z_arm_fault+0x92>
    3500:	4a0e      	ldr	r2, [pc, #56]	; (353c <z_arm_fault+0x178>)
    3502:	4b0d      	ldr	r3, [pc, #52]	; (3538 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    3504:	4816      	ldr	r0, [pc, #88]	; (3560 <z_arm_fault+0x19c>)
    3506:	4917      	ldr	r1, [pc, #92]	; (3564 <z_arm_fault+0x1a0>)
    3508:	1a9b      	subs	r3, r3, r2
    350a:	08db      	lsrs	r3, r3, #3
    350c:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    3510:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3514:	bf18      	it	ne
    3516:	4601      	movne	r1, r0
    3518:	f043 0301 	orr.w	r3, r3, #1
    351c:	4812      	ldr	r0, [pc, #72]	; (3568 <z_arm_fault+0x1a4>)
    351e:	f1a4 0210 	sub.w	r2, r4, #16
    3522:	f011 f8da 	bl	146da <log_2>
    3526:	e798      	b.n	345a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3528:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    352c:	f023 0301 	bic.w	r3, r3, #1
    3530:	e7cd      	b.n	34ce <z_arm_fault+0x10a>
    3532:	bf00      	nop
    3534:	e000ed00 	.word	0xe000ed00
    3538:	0001ebe8 	.word	0x0001ebe8
    353c:	0001ebc8 	.word	0x0001ebc8
    3540:	00026414 	.word	0x00026414
    3544:	0002643f 	.word	0x0002643f
    3548:	00026456 	.word	0x00026456
    354c:	00026477 	.word	0x00026477
    3550:	e000ed28 	.word	0xe000ed28
    3554:	e000ed29 	.word	0xe000ed29
    3558:	e000ed2a 	.word	0xe000ed2a
    355c:	00026496 	.word	0x00026496
    3560:	000264e1 	.word	0x000264e1
    3564:	000264cc 	.word	0x000264cc
    3568:	000264fa 	.word	0x000264fa

0000356c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    356c:	4a02      	ldr	r2, [pc, #8]	; (3578 <z_arm_fault_init+0xc>)
    356e:	6953      	ldr	r3, [r2, #20]
    3570:	f043 0310 	orr.w	r3, r3, #16
    3574:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3576:	4770      	bx	lr
    3578:	e000ed00 	.word	0xe000ed00

0000357c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    357c:	4b04      	ldr	r3, [pc, #16]	; (3590 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    357e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3580:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3582:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3584:	d003      	beq.n	358e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3586:	4903      	ldr	r1, [pc, #12]	; (3594 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    358c:	600a      	str	r2, [r1, #0]

0000358e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    358e:	4770      	bx	lr
	ldr r3, =_kernel
    3590:	20009de0 	.word	0x20009de0
	ldr r1, =_SCS_ICSR
    3594:	e000ed04 	.word	0xe000ed04

00003598 <z_arm_interrupt_init>:
    3598:	4804      	ldr	r0, [pc, #16]	; (35ac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    359a:	2300      	movs	r3, #0
    359c:	2120      	movs	r1, #32
    359e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    35a0:	3301      	adds	r3, #1
    35a2:	2b30      	cmp	r3, #48	; 0x30
    35a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    35a8:	d1f9      	bne.n	359e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    35aa:	4770      	bx	lr
    35ac:	e000e100 	.word	0xe000e100

000035b0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    35b0:	b538      	push	{r3, r4, r5, lr}
    35b2:	4604      	mov	r4, r0
	__asm__ volatile(
    35b4:	f04f 0320 	mov.w	r3, #32
    35b8:	f3ef 8511 	mrs	r5, BASEPRI
    35bc:	f383 8811 	msr	BASEPRI, r3
    35c0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    35c4:	f001 fd32 	bl	502c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    35c8:	4b0a      	ldr	r3, [pc, #40]	; (35f4 <z_impl_k_thread_abort+0x44>)
    35ca:	689b      	ldr	r3, [r3, #8]
    35cc:	42a3      	cmp	r3, r4
    35ce:	d10b      	bne.n	35e8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    35d0:	4b09      	ldr	r3, [pc, #36]	; (35f8 <z_impl_k_thread_abort+0x48>)
    35d2:	685a      	ldr	r2, [r3, #4]
    35d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    35d8:	b912      	cbnz	r2, 35e0 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    35da:	4628      	mov	r0, r5
    35dc:	f7ff fc4c 	bl	2e78 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    35e0:	685a      	ldr	r2, [r3, #4]
    35e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    35e6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    35e8:	4628      	mov	r0, r5
}
    35ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    35ee:	f011 be93 	b.w	15318 <z_reschedule_irqlock>
    35f2:	bf00      	nop
    35f4:	20009de0 	.word	0x20009de0
    35f8:	e000ed00 	.word	0xe000ed00

000035fc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    35fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    35fe:	4b08      	ldr	r3, [pc, #32]	; (3620 <z_arm_configure_static_mpu_regions+0x24>)
    3600:	9301      	str	r3, [sp, #4]
    3602:	4b08      	ldr	r3, [pc, #32]	; (3624 <z_arm_configure_static_mpu_regions+0x28>)
    3604:	9302      	str	r3, [sp, #8]
    3606:	4b08      	ldr	r3, [pc, #32]	; (3628 <z_arm_configure_static_mpu_regions+0x2c>)
    3608:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    360a:	ab01      	add	r3, sp, #4
    360c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    360e:	4a07      	ldr	r2, [pc, #28]	; (362c <z_arm_configure_static_mpu_regions+0x30>)
    3610:	4b07      	ldr	r3, [pc, #28]	; (3630 <z_arm_configure_static_mpu_regions+0x34>)
    3612:	2101      	movs	r1, #1
    3614:	4668      	mov	r0, sp
    3616:	f000 f8ad 	bl	3774 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    361a:	b005      	add	sp, #20
    361c:	f85d fb04 	ldr.w	pc, [sp], #4
    3620:	20000000 	.word	0x20000000
    3624:	00000000 	.word	0x00000000
    3628:	060b0000 	.word	0x060b0000
    362c:	20000000 	.word	0x20000000
    3630:	20040000 	.word	0x20040000

00003634 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    3634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    3636:	4f2a      	ldr	r7, [pc, #168]	; (36e0 <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3638:	2600      	movs	r6, #0
    363a:	428e      	cmp	r6, r1
    363c:	da1f      	bge.n	367e <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    363e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
    3642:	f8dc 4004 	ldr.w	r4, [ip, #4]
    3646:	2c00      	cmp	r4, #0
    3648:	d048      	beq.n	36dc <mpu_configure_regions+0xa8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    364a:	b1d3      	cbz	r3, 3682 <mpu_configure_regions+0x4e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    364c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3650:	ea14 0f0e 	tst.w	r4, lr
    3654:	d106      	bne.n	3664 <mpu_configure_regions+0x30>
		&&
    3656:	2c1f      	cmp	r4, #31
    3658:	d904      	bls.n	3664 <mpu_configure_regions+0x30>
		((part->start & (part->size - 1)) == 0U);
    365a:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    365e:	ea1e 0f05 	tst.w	lr, r5
    3662:	d00e      	beq.n	3682 <mpu_configure_regions+0x4e>
    3664:	4a1f      	ldr	r2, [pc, #124]	; (36e4 <mpu_configure_regions+0xb0>)
    3666:	4b20      	ldr	r3, [pc, #128]	; (36e8 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3668:	4820      	ldr	r0, [pc, #128]	; (36ec <mpu_configure_regions+0xb8>)
    366a:	1ad2      	subs	r2, r2, r3
    366c:	08d2      	lsrs	r2, r2, #3
    366e:	0192      	lsls	r2, r2, #6
    3670:	f042 0201 	orr.w	r2, r2, #1
    3674:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3676:	f011 f819 	bl	146ac <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    367a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    367e:	4610      	mov	r0, r2
    3680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3682:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    3684:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    3686:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    368a:	f8dc c008 	ldr.w	ip, [ip, #8]
    368e:	d916      	bls.n	36be <mpu_configure_regions+0x8a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3690:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3694:	d815      	bhi.n	36c2 <mpu_configure_regions+0x8e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3696:	3c01      	subs	r4, #1
    3698:	fab4 f484 	clz	r4, r4
    369c:	f1c4 041f 	rsb	r4, r4, #31
    36a0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    36a2:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    36a4:	ea4c 0404 	orr.w	r4, ip, r4
    36a8:	d90d      	bls.n	36c6 <mpu_configure_regions+0x92>
    36aa:	4a0e      	ldr	r2, [pc, #56]	; (36e4 <mpu_configure_regions+0xb0>)
    36ac:	4b0e      	ldr	r3, [pc, #56]	; (36e8 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    36ae:	4810      	ldr	r0, [pc, #64]	; (36f0 <mpu_configure_regions+0xbc>)
    36b0:	1ad2      	subs	r2, r2, r3
    36b2:	08d2      	lsrs	r2, r2, #3
    36b4:	0192      	lsls	r2, r2, #6
    36b6:	f042 0201 	orr.w	r2, r2, #1
    36ba:	4629      	mov	r1, r5
    36bc:	e7db      	b.n	3676 <mpu_configure_regions+0x42>
		return REGION_32B;
    36be:	2408      	movs	r4, #8
    36c0:	e7ef      	b.n	36a2 <mpu_configure_regions+0x6e>
		return REGION_4G;
    36c2:	243e      	movs	r4, #62	; 0x3e
    36c4:	e7ed      	b.n	36a2 <mpu_configure_regions+0x6e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36c6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    36ca:	432a      	orrs	r2, r5
    36cc:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36d0:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    36d4:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36d6:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36d8:	613c      	str	r4, [r7, #16]
		reg_index++;
    36da:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    36dc:	3601      	adds	r6, #1
    36de:	e7ac      	b.n	363a <mpu_configure_regions+0x6>
    36e0:	e000ed90 	.word	0xe000ed90
    36e4:	0001ebe0 	.word	0x0001ebe0
    36e8:	0001ebc8 	.word	0x0001ebc8
    36ec:	00026511 	.word	0x00026511
    36f0:	00026534 	.word	0x00026534

000036f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    36f4:	4b03      	ldr	r3, [pc, #12]	; (3704 <arm_core_mpu_enable+0x10>)
    36f6:	2205      	movs	r2, #5
    36f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    36fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3702:	4770      	bx	lr
    3704:	e000ed90 	.word	0xe000ed90

00003708 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3708:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    370c:	4b01      	ldr	r3, [pc, #4]	; (3714 <arm_core_mpu_disable+0xc>)
    370e:	2200      	movs	r2, #0
    3710:	605a      	str	r2, [r3, #4]
}
    3712:	4770      	bx	lr
    3714:	e000ed90 	.word	0xe000ed90

00003718 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3718:	4913      	ldr	r1, [pc, #76]	; (3768 <arm_mpu_init+0x50>)
    371a:	6808      	ldr	r0, [r1, #0]
    371c:	2808      	cmp	r0, #8
{
    371e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3720:	d81e      	bhi.n	3760 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3722:	f7ff fff1 	bl	3708 <arm_core_mpu_disable>
	MPU->RNR = index;
    3726:	4c11      	ldr	r4, [pc, #68]	; (376c <arm_mpu_init+0x54>)
    3728:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    372a:	2200      	movs	r2, #0
    372c:	4290      	cmp	r0, r2
    372e:	f101 010c 	add.w	r1, r1, #12
    3732:	d105      	bne.n	3740 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3734:	4b0e      	ldr	r3, [pc, #56]	; (3770 <arm_mpu_init+0x58>)
    3736:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3738:	f7ff ffdc 	bl	36f4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    373c:	2000      	movs	r0, #0
}
    373e:	bd10      	pop	{r4, pc}
    3740:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3742:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3746:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    374a:	4313      	orrs	r3, r2
    374c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3750:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3752:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3756:	f043 0301 	orr.w	r3, r3, #1
    375a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    375c:	3201      	adds	r2, #1
    375e:	e7e5      	b.n	372c <arm_mpu_init+0x14>
		return -1;
    3760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3764:	e7eb      	b.n	373e <arm_mpu_init+0x26>
    3766:	bf00      	nop
    3768:	000255dc 	.word	0x000255dc
    376c:	e000ed90 	.word	0xe000ed90
    3770:	2000eac9 	.word	0x2000eac9

00003774 <arm_core_mpu_configure_static_mpu_regions>:
{
    3774:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3776:	4c03      	ldr	r4, [pc, #12]	; (3784 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3778:	2301      	movs	r3, #1
    377a:	7822      	ldrb	r2, [r4, #0]
    377c:	f7ff ff5a 	bl	3634 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3780:	7020      	strb	r0, [r4, #0]
}
    3782:	bd10      	pop	{r4, pc}
    3784:	2000eac9 	.word	0x2000eac9

00003788 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3788:	4b01      	ldr	r3, [pc, #4]	; (3790 <__stdout_hook_install+0x8>)
    378a:	6018      	str	r0, [r3, #0]
}
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	20000030 	.word	0x20000030

00003794 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    3794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    3796:	4f08      	ldr	r7, [pc, #32]	; (37b8 <z_impl_zephyr_read_stdin+0x24>)
{
    3798:	4606      	mov	r6, r0
    379a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    379c:	2400      	movs	r4, #0
    379e:	42ac      	cmp	r4, r5
    37a0:	da08      	bge.n	37b4 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    37a2:	683b      	ldr	r3, [r7, #0]
    37a4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    37a6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    37a8:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    37aa:	f104 0401 	add.w	r4, r4, #1
    37ae:	d001      	beq.n	37b4 <z_impl_zephyr_read_stdin+0x20>
    37b0:	280d      	cmp	r0, #13
    37b2:	d1f4      	bne.n	379e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    37b4:	4620      	mov	r0, r4
    37b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37b8:	2000002c 	.word	0x2000002c

000037bc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    37bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37be:	4f0a      	ldr	r7, [pc, #40]	; (37e8 <z_impl_zephyr_write_stdout+0x2c>)
    37c0:	460d      	mov	r5, r1
    37c2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    37c4:	f1c0 0401 	rsb	r4, r0, #1
    37c8:	19a3      	adds	r3, r4, r6
    37ca:	429d      	cmp	r5, r3
    37cc:	dc01      	bgt.n	37d2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    37ce:	4628      	mov	r0, r5
    37d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    37d2:	7873      	ldrb	r3, [r6, #1]
    37d4:	2b0a      	cmp	r3, #10
    37d6:	d102      	bne.n	37de <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	200d      	movs	r0, #13
    37dc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    37de:	683b      	ldr	r3, [r7, #0]
    37e0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    37e4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    37e6:	e7ef      	b.n	37c8 <z_impl_zephyr_write_stdout+0xc>
    37e8:	20000030 	.word	0x20000030

000037ec <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    37ec:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    37ee:	4802      	ldr	r0, [pc, #8]	; (37f8 <_exit+0xc>)
    37f0:	2105      	movs	r1, #5
    37f2:	f7ff ffe3 	bl	37bc <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    37f6:	e7fe      	b.n	37f6 <_exit+0xa>
    37f8:	0002655a 	.word	0x0002655a

000037fc <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    37fc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
    37fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    3802:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    3804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3808:	480a      	ldr	r0, [pc, #40]	; (3834 <_sbrk+0x38>)
    380a:	f010 fe59 	bl	144c0 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    380e:	490a      	ldr	r1, [pc, #40]	; (3838 <_sbrk+0x3c>)
    3810:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    3812:	18e0      	adds	r0, r4, r3
    3814:	4c09      	ldr	r4, [pc, #36]	; (383c <_sbrk+0x40>)
    3816:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
    381a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    381e:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
    3820:	bf3a      	itte	cc
    3822:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
    3824:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    3826:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	sys_sem_give(&heap_sem);
    382a:	4802      	ldr	r0, [pc, #8]	; (3834 <_sbrk+0x38>)
    382c:	f010 fe43 	bl	144b6 <sys_sem_give>

	return ret;
}
    3830:	4620      	mov	r0, r4
    3832:	bd10      	pop	{r4, pc}
    3834:	20000838 	.word	0x20000838
    3838:	20009ca4 	.word	0x20009ca4
    383c:	20011bc0 	.word	0x20011bc0

00003840 <nordicsemi_nrf52_init>:
    3840:	f04f 0320 	mov.w	r3, #32
    3844:	f3ef 8211 	mrs	r2, BASEPRI
    3848:	f383 8811 	msr	BASEPRI, r3
    384c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3850:	4906      	ldr	r1, [pc, #24]	; (386c <nordicsemi_nrf52_init+0x2c>)
    3852:	2301      	movs	r3, #1
    3854:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3858:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    385c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3860:	f382 8811 	msr	BASEPRI, r2
    3864:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3868:	2000      	movs	r0, #0
    386a:	4770      	bx	lr
    386c:	4001e000 	.word	0x4001e000

00003870 <sys_arch_reboot>:
    *p_gpregret = val;
    3870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3874:	b2c0      	uxtb	r0, r0
    3876:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    387a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    387e:	4905      	ldr	r1, [pc, #20]	; (3894 <sys_arch_reboot+0x24>)
    3880:	4b05      	ldr	r3, [pc, #20]	; (3898 <sys_arch_reboot+0x28>)
    3882:	68ca      	ldr	r2, [r1, #12]
    3884:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3888:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    388a:	60cb      	str	r3, [r1, #12]
    388c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3890:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3892:	e7fd      	b.n	3890 <sys_arch_reboot+0x20>
    3894:	e000ed00 	.word	0xe000ed00
    3898:	05fa0004 	.word	0x05fa0004

0000389c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    389c:	b120      	cbz	r0, 38a8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    389e:	4b03      	ldr	r3, [pc, #12]	; (38ac <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    38a0:	0180      	lsls	r0, r0, #6
    38a2:	f043 0301 	orr.w	r3, r3, #1
    38a6:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    38a8:	4770      	bx	lr
    38aa:	bf00      	nop
    38ac:	000248f0 	.word	0x000248f0

000038b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    38b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    38b2:	4b09      	ldr	r3, [pc, #36]	; (38d8 <gpio_nrfx_init+0x28>)
    38b4:	781a      	ldrb	r2, [r3, #0]
    38b6:	b96a      	cbnz	r2, 38d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    38b8:	2101      	movs	r1, #1
    38ba:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    38bc:	2006      	movs	r0, #6
    38be:	2105      	movs	r1, #5
    38c0:	f7ff fb38 	bl	2f34 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    38c4:	2006      	movs	r0, #6
    38c6:	f7ff fb25 	bl	2f14 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    38ca:	4b04      	ldr	r3, [pc, #16]	; (38dc <gpio_nrfx_init+0x2c>)
    38cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    38d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    38d4:	2000      	movs	r0, #0
    38d6:	bd08      	pop	{r3, pc}
    38d8:	2000eaca 	.word	0x2000eaca
    38dc:	40006000 	.word	0x40006000

000038e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38e0:	4b2d      	ldr	r3, [pc, #180]	; (3998 <gpio_nrfx_config+0xb8>)
{
    38e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    38e4:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38e6:	482d      	ldr	r0, [pc, #180]	; (399c <gpio_nrfx_config+0xbc>)
    38e8:	4013      	ands	r3, r2
    38ea:	4283      	cmp	r3, r0
    38ec:	d045      	beq.n	397a <gpio_nrfx_config+0x9a>
    38ee:	d80d      	bhi.n	390c <gpio_nrfx_config+0x2c>
    38f0:	2b06      	cmp	r3, #6
    38f2:	d015      	beq.n	3920 <gpio_nrfx_config+0x40>
    38f4:	d805      	bhi.n	3902 <gpio_nrfx_config+0x22>
    38f6:	b19b      	cbz	r3, 3920 <gpio_nrfx_config+0x40>
    38f8:	2b02      	cmp	r3, #2
    38fa:	d040      	beq.n	397e <gpio_nrfx_config+0x9e>
    38fc:	f06f 0015 	mvn.w	r0, #21
    3900:	e03a      	b.n	3978 <gpio_nrfx_config+0x98>
    3902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3906:	d1f9      	bne.n	38fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    3908:	2301      	movs	r3, #1
    390a:	e009      	b.n	3920 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    390c:	4824      	ldr	r0, [pc, #144]	; (39a0 <gpio_nrfx_config+0xc0>)
    390e:	4283      	cmp	r3, r0
    3910:	d037      	beq.n	3982 <gpio_nrfx_config+0xa2>
    3912:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3916:	d036      	beq.n	3986 <gpio_nrfx_config+0xa6>
    3918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    391c:	d1ee      	bne.n	38fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    391e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    3920:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    3922:	bf54      	ite	pl
    3924:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    3928:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    392a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    392e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    3930:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3934:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3938:	d507      	bpl.n	394a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    393a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    393e:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3940:	d023      	beq.n	398a <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3942:	2201      	movs	r2, #1
    3944:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3946:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    394a:	7a32      	ldrb	r2, [r6, #8]
    394c:	f001 011f 	and.w	r1, r1, #31
    3950:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
    3954:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3956:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & 0x1F;
    395a:	bfc6      	itte	gt
    395c:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
    3960:	4e10      	ldrgt	r6, [pc, #64]	; (39a4 <gpio_nrfx_config+0xc4>)
        return NRF_P0;
    3962:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3966:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    396a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    396e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3972:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
    3976:	2000      	movs	r0, #0
}
    3978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    397a:	2307      	movs	r3, #7
    397c:	e7d0      	b.n	3920 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    397e:	2304      	movs	r3, #4
    3980:	e7ce      	b.n	3920 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3982:	2305      	movs	r3, #5
    3984:	e7cc      	b.n	3920 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    3986:	2303      	movs	r3, #3
    3988:	e7ca      	b.n	3920 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    398a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    398c:	bf42      	ittt	mi
    398e:	2201      	movmi	r2, #1
    3990:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    3992:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    3996:	e7d8      	b.n	394a <gpio_nrfx_config+0x6a>
    3998:	00f00006 	.word	0x00f00006
    399c:	00100006 	.word	0x00100006
    39a0:	00400002 	.word	0x00400002
    39a4:	50000300 	.word	0x50000300

000039a8 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
    39a8:	281f      	cmp	r0, #31
        return NRF_P1;
    39aa:	bf8a      	itet	hi
    39ac:	4b07      	ldrhi	r3, [pc, #28]	; (39cc <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
    39ae:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & 0x1F;
    39b2:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    39b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    39ba:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    39be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    39c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    39c6:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    39ca:	4770      	bx	lr
    39cc:	50000300 	.word	0x50000300

000039d0 <gpiote_pin_int_cfg>:
{
    39d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39d2:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    39d4:	68c6      	ldr	r6, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39d6:	7a18      	ldrb	r0, [r3, #8]
    39d8:	f001 041f 	and.w	r4, r1, #31
{
    39dc:	460d      	mov	r5, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    39de:	4949      	ldr	r1, [pc, #292]	; (3b04 <gpiote_pin_int_cfg+0x134>)
    39e0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39e4:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
    39e8:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    39ea:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39ec:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    39f0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    39f4:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    39f8:	4284      	cmp	r4, r0
    39fa:	d16d      	bne.n	3ad8 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
    39fc:	fa22 f003 	lsr.w	r0, r2, r3
    3a00:	07c0      	lsls	r0, r0, #31
    3a02:	d569      	bpl.n	3ad8 <gpiote_pin_int_cfg+0x108>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3a04:	009a      	lsls	r2, r3, #2
    3a06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3a0e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3a12:	f020 0001 	bic.w	r0, r0, #1
    3a16:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    3a1a:	2201      	movs	r2, #1
    3a1c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    3a20:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3a24:	4620      	mov	r0, r4
    3a26:	2100      	movs	r1, #0
    3a28:	f7ff ffbe 	bl	39a8 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3a2c:	68f3      	ldr	r3, [r6, #12]
    3a2e:	40eb      	lsrs	r3, r5
    3a30:	f013 0001 	ands.w	r0, r3, #1
    3a34:	d04e      	beq.n	3ad4 <gpiote_pin_int_cfg+0x104>
    3a36:	6933      	ldr	r3, [r6, #16]
    3a38:	40eb      	lsrs	r3, r5
    3a3a:	f013 0001 	ands.w	r0, r3, #1
    3a3e:	d049      	beq.n	3ad4 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    3a40:	69b3      	ldr	r3, [r6, #24]
    3a42:	40eb      	lsrs	r3, r5
    3a44:	f013 0201 	ands.w	r2, r3, #1
    3a48:	d050      	beq.n	3aec <gpiote_pin_int_cfg+0x11c>
			if (data->double_edge & BIT(pin)) {
    3a4a:	69f3      	ldr	r3, [r6, #28]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    3a4c:	4f2d      	ldr	r7, [pc, #180]	; (3b04 <gpiote_pin_int_cfg+0x134>)
    3a4e:	40eb      	lsrs	r3, r5
    3a50:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3a52:	bf5f      	itttt	pl
    3a54:	6971      	ldrpl	r1, [r6, #20]
    3a56:	fa21 f505 	lsrpl.w	r5, r1, r5
    3a5a:	f005 0501 	andpl.w	r5, r5, #1
    3a5e:	f1c5 0502 	rsbpl	r5, r5, #2
    3a62:	bf54      	ite	pl
    3a64:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3a66:	2503      	movmi	r5, #3
    3a68:	2600      	movs	r6, #0
    3a6a:	f506 73a2 	add.w	r3, r6, #324	; 0x144
    3a6e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    3a72:	f010 0003 	ands.w	r0, r0, #3
    3a76:	d133      	bne.n	3ae0 <gpiote_pin_int_cfg+0x110>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a78:	00b2      	lsls	r2, r6, #2
    3a7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a82:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a84:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3a88:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    3a8c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3a90:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a94:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3a98:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
    3a9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    3aa0:	430d      	orrs	r5, r1
			nrf_gpiote_event_t evt =
    3aa2:	f106 0140 	add.w	r1, r6, #64	; 0x40
    3aa6:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    3aa8:	b289      	uxth	r1, r1
    3aaa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3aae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3ab2:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ab6:	6008      	str	r0, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3ab8:	6809      	ldr	r1, [r1, #0]
    3aba:	9101      	str	r1, [sp, #4]
    (void)dummy;
    3abc:	9901      	ldr	r1, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3abe:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    3ac2:	f041 0101 	orr.w	r1, r1, #1
    3ac6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    3aca:	2201      	movs	r2, #1
    3acc:	fa02 f606 	lsl.w	r6, r2, r6
    p_reg->INTENSET = mask;
    3ad0:	f8c7 6304 	str.w	r6, [r7, #772]	; 0x304
}
    3ad4:	b003      	add	sp, #12
    3ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ad8:	3301      	adds	r3, #1
    3ada:	2b08      	cmp	r3, #8
    3adc:	d186      	bne.n	39ec <gpiote_pin_int_cfg+0x1c>
    3ade:	e7a1      	b.n	3a24 <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3ae0:	3601      	adds	r6, #1
    3ae2:	2e08      	cmp	r6, #8
    3ae4:	d1c1      	bne.n	3a6a <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    3ae6:	f06f 0012 	mvn.w	r0, #18
    3aea:	e7f3      	b.n	3ad4 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3aec:	6971      	ldr	r1, [r6, #20]
    3aee:	40e9      	lsrs	r1, r5
    3af0:	f001 0101 	and.w	r1, r1, #1
    3af4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3af8:	4620      	mov	r0, r4
    3afa:	b2c9      	uxtb	r1, r1
    3afc:	f7ff ff54 	bl	39a8 <nrf_gpio_cfg_sense_set>
	int res = 0;
    3b00:	4610      	mov	r0, r2
    3b02:	e7e7      	b.n	3ad4 <gpiote_pin_int_cfg+0x104>
    3b04:	40006000 	.word	0x40006000

00003b08 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3b08:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    3b0c:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    3b0e:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3b10:	d116      	bne.n	3b40 <gpio_nrfx_pin_interrupt_configure+0x38>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b12:	6845      	ldr	r5, [r0, #4]
    3b14:	7a2e      	ldrb	r6, [r5, #8]
    3b16:	f001 051f 	and.w	r5, r1, #31
    3b1a:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    if (*p_pin < P0_PIN_NUM)
    3b1e:	2d1f      	cmp	r5, #31
        *p_pin = *p_pin & 0x1F;
    3b20:	bfc6      	itte	gt
    3b22:	f005 051f 	andgt.w	r5, r5, #31
        return NRF_P1;
    3b26:	4e1e      	ldrgt	r6, [pc, #120]	; (3ba0 <gpio_nrfx_pin_interrupt_configure+0x98>)
        return NRF_P0;
    3b28:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b2c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3b30:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3b34:	07ed      	lsls	r5, r5, #31
    3b36:	d507      	bpl.n	3b48 <gpio_nrfx_pin_interrupt_configure+0x40>
}
    3b38:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b3c:	bc70      	pop	{r4, r5, r6}
    3b3e:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b40:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3b44:	68e5      	ldr	r5, [r4, #12]
    3b46:	d026      	beq.n	3b96 <gpio_nrfx_pin_interrupt_configure+0x8e>
    3b48:	68e6      	ldr	r6, [r4, #12]
    3b4a:	2501      	movs	r5, #1
    3b4c:	408d      	lsls	r5, r1
    3b4e:	4335      	orrs	r5, r6
    3b50:	6926      	ldr	r6, [r4, #16]
    3b52:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b54:	2501      	movs	r5, #1
    3b56:	408d      	lsls	r5, r1
    3b58:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3b5c:	bf14      	ite	ne
    3b5e:	432e      	orrne	r6, r5
    3b60:	43ae      	biceq	r6, r5
    3b62:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3b64:	69a6      	ldr	r6, [r4, #24]
    3b66:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3b6a:	69e2      	ldr	r2, [r4, #28]
    3b6c:	bf0c      	ite	eq
    3b6e:	432e      	orreq	r6, r5
    3b70:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3b72:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3b76:	bf0c      	ite	eq
    3b78:	432a      	orreq	r2, r5
    3b7a:	43aa      	bicne	r2, r5
    3b7c:	61e2      	str	r2, [r4, #28]
    3b7e:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3b80:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3b86:	bf0c      	ite	eq
    3b88:	4315      	orreq	r5, r2
    3b8a:	ea22 0505 	bicne.w	r5, r2, r5
    3b8e:	6165      	str	r5, [r4, #20]
}
    3b90:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    3b92:	f7ff bf1d 	b.w	39d0 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3b96:	2601      	movs	r6, #1
    3b98:	408e      	lsls	r6, r1
    3b9a:	ea25 0506 	bic.w	r5, r5, r6
    3b9e:	e7d7      	b.n	3b50 <gpio_nrfx_pin_interrupt_configure+0x48>
    3ba0:	50000300 	.word	0x50000300

00003ba4 <gpiote_event_handler>:
{
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3ba6:	2600      	movs	r6, #0
{
    3ba8:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3baa:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bae:	4d28      	ldr	r5, [pc, #160]	; (3c50 <gpiote_event_handler+0xac>)
    3bb0:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    3bb2:	b15c      	cbz	r4, 3bcc <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    3bb4:	4827      	ldr	r0, [pc, #156]	; (3c54 <gpiote_event_handler+0xb0>)
    3bb6:	f011 fa1d 	bl	14ff4 <check_level_trigger_pins>
		fired_triggers[0] =
    3bba:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    3bbc:	4826      	ldr	r0, [pc, #152]	; (3c58 <gpiote_event_handler+0xb4>)
    3bbe:	f011 fa19 	bl	14ff4 <check_level_trigger_pins>
		fired_triggers[1] =
    3bc2:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bc4:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3bc6:	682b      	ldr	r3, [r5, #0]
    3bc8:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3bca:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    3bcc:	4d23      	ldr	r5, [pc, #140]	; (3c5c <gpiote_event_handler+0xb8>)
{
    3bce:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3bd0:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd2:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    3bd4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    3bd8:	fa06 f102 	lsl.w	r1, r6, r2
    3bdc:	4219      	tst	r1, r3
    3bde:	d01d      	beq.n	3c1c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3be0:	0091      	lsls	r1, r2, #2
    3be2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3be6:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    3bea:	680b      	ldr	r3, [r1, #0]
    3bec:	b1b3      	cbz	r3, 3c1c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3bee:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3bf2:	af04      	add	r7, sp, #16
    3bf4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bf8:	f8c1 c000 	str.w	ip, [r1]
    3bfc:	f3c3 3040 	ubfx	r0, r3, #13, #1
    3c00:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3c04:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3c08:	f850 7c08 	ldr.w	r7, [r0, #-8]
    3c0c:	fa06 f303 	lsl.w	r3, r6, r3
    3c10:	433b      	orrs	r3, r7
    3c12:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3c16:	680b      	ldr	r3, [r1, #0]
    3c18:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3c1a:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3c1c:	3201      	adds	r2, #1
    3c1e:	2a08      	cmp	r2, #8
    3c20:	d1d8      	bne.n	3bd4 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
    3c22:	9902      	ldr	r1, [sp, #8]
    3c24:	b111      	cbz	r1, 3c2c <gpiote_event_handler+0x88>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    3c26:	480b      	ldr	r0, [pc, #44]	; (3c54 <gpiote_event_handler+0xb0>)
    3c28:	f011 f9c9 	bl	14fbe <fire_callbacks>
	if (fired_triggers[1]) {
    3c2c:	9903      	ldr	r1, [sp, #12]
    3c2e:	b111      	cbz	r1, 3c36 <gpiote_event_handler+0x92>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    3c30:	4809      	ldr	r0, [pc, #36]	; (3c58 <gpiote_event_handler+0xb4>)
    3c32:	f011 f9c4 	bl	14fbe <fire_callbacks>
	if (port_event) {
    3c36:	b144      	cbz	r4, 3c4a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    3c38:	4806      	ldr	r0, [pc, #24]	; (3c54 <gpiote_event_handler+0xb0>)
    3c3a:	f011 fa0d 	bl	15058 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    3c3e:	4806      	ldr	r0, [pc, #24]	; (3c58 <gpiote_event_handler+0xb4>)
}
    3c40:	b005      	add	sp, #20
    3c42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    3c46:	f011 ba07 	b.w	15058 <cfg_level_pins>
}
    3c4a:	b005      	add	sp, #20
    3c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c4e:	bf00      	nop
    3c50:	4000617c 	.word	0x4000617c
    3c54:	200007d0 	.word	0x200007d0
    3c58:	200007e0 	.word	0x200007e0
    3c5c:	40006000 	.word	0x40006000

00003c60 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3c60:	4802      	ldr	r0, [pc, #8]	; (3c6c <pwm_nrfx_get_cycles_per_sec+0xc>)
    3c62:	2100      	movs	r1, #0
    3c64:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3c68:	2000      	movs	r0, #0
    3c6a:	4770      	bx	lr
    3c6c:	00f42400 	.word	0x00f42400

00003c70 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
    3c70:	b510      	push	{r4, lr}
    3c72:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config_info;
    3c74:	6840      	ldr	r0, [r0, #4]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3c76:	2300      	movs	r3, #0
    3c78:	461a      	mov	r2, r3
    3c7a:	f100 0108 	add.w	r1, r0, #8
    3c7e:	f000 fc65 	bl	454c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3c82:	4b09      	ldr	r3, [pc, #36]	; (3ca8 <pwm_nrfx_init+0x38>)
    3c84:	4298      	cmp	r0, r3
    3c86:	d00d      	beq.n	3ca4 <pwm_nrfx_init+0x34>
    3c88:	4b08      	ldr	r3, [pc, #32]	; (3cac <pwm_nrfx_init+0x3c>)
    3c8a:	4a09      	ldr	r2, [pc, #36]	; (3cb0 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    3c8c:	4809      	ldr	r0, [pc, #36]	; (3cb4 <pwm_nrfx_init+0x44>)
    3c8e:	6821      	ldr	r1, [r4, #0]
    3c90:	1ad2      	subs	r2, r2, r3
    3c92:	08d2      	lsrs	r2, r2, #3
    3c94:	0192      	lsls	r2, r2, #6
    3c96:	f042 0201 	orr.w	r2, r2, #1
    3c9a:	f010 fd07 	bl	146ac <log_1>
		return -EBUSY;
    3c9e:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    3ca2:	bd10      	pop	{r4, pc}
	return 0;
    3ca4:	2000      	movs	r0, #0
    3ca6:	e7fc      	b.n	3ca2 <pwm_nrfx_init+0x32>
    3ca8:	0bad0000 	.word	0x0bad0000
    3cac:	0001ebc8 	.word	0x0001ebc8
    3cb0:	0001ebf8 	.word	0x0001ebf8
    3cb4:	00026581 	.word	0x00026581

00003cb8 <pwm_nrfx_pin_set>:
{
    3cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cbc:	f89d 5020 	ldrb.w	r5, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config_info;
    3cc0:	6847      	ldr	r7, [r0, #4]
{
    3cc2:	460c      	mov	r4, r1
    3cc4:	4616      	mov	r6, r2
	struct pwm_nrfx_data *data = dev->driver_data;
    3cc6:	68c1      	ldr	r1, [r0, #12]
{
    3cc8:	4698      	mov	r8, r3
	if (flags) {
    3cca:	2d00      	cmp	r5, #0
    3ccc:	f040 8088 	bne.w	3de0 <pwm_nrfx_pin_set+0x128>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3cd0:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    3cd2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3cd6:	2bff      	cmp	r3, #255	; 0xff
    3cd8:	d004      	beq.n	3ce4 <pwm_nrfx_pin_set+0x2c>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    3cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3cde:	429c      	cmp	r4, r3
    3ce0:	f000 8081 	beq.w	3de6 <pwm_nrfx_pin_set+0x12e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3ce4:	3501      	adds	r5, #1
    3ce6:	b2ed      	uxtb	r5, r5
    3ce8:	2d04      	cmp	r5, #4
    3cea:	d1f2      	bne.n	3cd2 <pwm_nrfx_pin_set+0x1a>
    3cec:	4a61      	ldr	r2, [pc, #388]	; (3e74 <pwm_nrfx_pin_set+0x1bc>)
    3cee:	4b62      	ldr	r3, [pc, #392]	; (3e78 <pwm_nrfx_pin_set+0x1c0>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    3cf0:	4862      	ldr	r0, [pc, #392]	; (3e7c <pwm_nrfx_pin_set+0x1c4>)
    3cf2:	1ad2      	subs	r2, r2, r3
    3cf4:	08d2      	lsrs	r2, r2, #3
    3cf6:	0192      	lsls	r2, r2, #6
    3cf8:	f042 0201 	orr.w	r2, r2, #1
    3cfc:	4621      	mov	r1, r4
    3cfe:	e044      	b.n	3d8a <pwm_nrfx_pin_set+0xd2>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3d00:	2000      	movs	r0, #0
    3d02:	e080      	b.n	3e06 <pwm_nrfx_pin_set+0x14e>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    3d04:	3301      	adds	r3, #1
    3d06:	2b04      	cmp	r3, #4
    3d08:	f040 808b 	bne.w	3e22 <pwm_nrfx_pin_set+0x16a>
    3d0c:	4632      	mov	r2, r6
    3d0e:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    3d10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    3d14:	fa5f fe83 	uxtb.w	lr, r3
    3d18:	d229      	bcs.n	3d6e <pwm_nrfx_pin_set+0xb6>
			data->prescaler     = prescaler;
    3d1a:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    3d1e:	f8d7 e000 	ldr.w	lr, [r7]
			data->period_cycles = period_cycles;
    3d22:	600e      	str	r6, [r1, #0]
			data->countertop    = (u16_t)countertop;
    3d24:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    3d26:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3d2a:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3d2e:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    3d32:	7b8a      	ldrb	r2, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    3d34:	4546      	cmp	r6, r8
    3d36:	4633      	mov	r3, r6
    3d38:	bf28      	it	cs
    3d3a:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
    3d3c:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    3d40:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    3d44:	ea42 020a 	orr.w	r2, r2, sl
    3d48:	b292      	uxth	r2, r2
	data->current[channel] = (
    3d4a:	f8a9 2004 	strh.w	r2, [r9, #4]
	u16_t pulse_cycle =
    3d4e:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3d52:	b11a      	cbz	r2, 3d5c <pwm_nrfx_pin_set+0xa4>
    3d54:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    3d58:	4594      	cmp	ip, r2
    3d5a:	d819      	bhi.n	3d90 <pwm_nrfx_pin_set+0xd8>
			config->initial_config.output_pins[channel]
    3d5c:	197a      	adds	r2, r7, r5
    3d5e:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    3d62:	b1c3      	cbz	r3, 3d96 <pwm_nrfx_pin_set+0xde>
			&& channel_inverted_state;
    3d64:	4546      	cmp	r6, r8
    3d66:	d877      	bhi.n	3e58 <pwm_nrfx_pin_set+0x1a0>
    3d68:	2a00      	cmp	r2, #0
    3d6a:	db16      	blt.n	3d9a <pwm_nrfx_pin_set+0xe2>
    3d6c:	e074      	b.n	3e58 <pwm_nrfx_pin_set+0x1a0>
		countertop >>= 1;
    3d6e:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3d70:	2b08      	cmp	r3, #8
		countertop >>= 1;
    3d72:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3d76:	d1cb      	bne.n	3d10 <pwm_nrfx_pin_set+0x58>
    3d78:	4a3e      	ldr	r2, [pc, #248]	; (3e74 <pwm_nrfx_pin_set+0x1bc>)
    3d7a:	4b3f      	ldr	r3, [pc, #252]	; (3e78 <pwm_nrfx_pin_set+0x1c0>)
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    3d7c:	4840      	ldr	r0, [pc, #256]	; (3e80 <pwm_nrfx_pin_set+0x1c8>)
    3d7e:	1ad2      	subs	r2, r2, r3
    3d80:	08d2      	lsrs	r2, r2, #3
    3d82:	0192      	lsls	r2, r2, #6
    3d84:	f042 0201 	orr.w	r2, r2, #1
    3d88:	4631      	mov	r1, r6
    3d8a:	f010 fc8f 	bl	146ac <log_1>
    3d8e:	e05d      	b.n	3e4c <pwm_nrfx_pin_set+0x194>
		if (was_stopped) {
    3d90:	b9c8      	cbnz	r0, 3dc6 <pwm_nrfx_pin_set+0x10e>
	return 0;
    3d92:	2000      	movs	r0, #0
    3d94:	e05c      	b.n	3e50 <pwm_nrfx_pin_set+0x198>
			&& channel_inverted_state;
    3d96:	4546      	cmp	r6, r8
    3d98:	d85c      	bhi.n	3e54 <pwm_nrfx_pin_set+0x19c>
    if (*p_pin < P0_PIN_NUM)
    3d9a:	2c1f      	cmp	r4, #31
        return NRF_P1;
    3d9c:	bf86      	itte	hi
    3d9e:	4a39      	ldrhi	r2, [pc, #228]	; (3e84 <pwm_nrfx_pin_set+0x1cc>)
        *p_pin = *p_pin & 0x1F;
    3da0:	f004 041f 	andhi.w	r4, r4, #31
        return NRF_P0;
    3da4:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3da8:	2301      	movs	r3, #1
    3daa:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    3dae:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    3db2:	4628      	mov	r0, r5
    3db4:	f011 f97f 	bl	150b6 <any_other_channel_is_active>
    3db8:	2800      	cmp	r0, #0
    3dba:	d1ea      	bne.n	3d92 <pwm_nrfx_pin_set+0xda>
			nrfx_pwm_stop(&config->pwm, false);
    3dbc:	4601      	mov	r1, r0
    3dbe:	4638      	mov	r0, r7
    3dc0:	f011 fa3c 	bl	1523c <nrfx_pwm_stop>
    3dc4:	e7e5      	b.n	3d92 <pwm_nrfx_pin_set+0xda>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    3dc6:	4638      	mov	r0, r7
    3dc8:	f000 fca4 	bl	4714 <nrfx_pwm_is_stopped>
    3dcc:	2800      	cmp	r0, #0
    3dce:	d0fa      	beq.n	3dc6 <pwm_nrfx_pin_set+0x10e>
			nrfx_pwm_simple_playback(&config->pwm,
    3dd0:	2302      	movs	r3, #2
    3dd2:	2201      	movs	r2, #1
    3dd4:	f107 0118 	add.w	r1, r7, #24
    3dd8:	4638      	mov	r0, r7
    3dda:	f000 fc5b 	bl	4694 <nrfx_pwm_simple_playback>
    3dde:	e7d8      	b.n	3d92 <pwm_nrfx_pin_set+0xda>
		return -ENOTSUP;
    3de0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3de4:	e034      	b.n	3e50 <pwm_nrfx_pin_set+0x198>
	u16_t pulse_cycle =
    3de6:	eb01 0945 	add.w	r9, r1, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    3dea:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	u16_t pulse_cycle =
    3dee:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3df2:	b113      	cbz	r3, 3dfa <pwm_nrfx_pin_set+0x142>
    3df4:	898a      	ldrh	r2, [r1, #12]
    3df6:	429a      	cmp	r2, r3
    3df8:	d882      	bhi.n	3d00 <pwm_nrfx_pin_set+0x48>
		      !any_other_channel_is_active(channel, data);
    3dfa:	4628      	mov	r0, r5
    3dfc:	f011 f95b 	bl	150b6 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3e00:	f080 0001 	eor.w	r0, r0, #1
    3e04:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3e06:	f897 c00e 	ldrb.w	ip, [r7, #14]
	if (period_cycles != data->period_cycles) {
    3e0a:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3e0c:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
    3e10:	bf04      	itt	eq
    3e12:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    3e14:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != data->period_cycles) {
    3e18:	42b3      	cmp	r3, r6
    3e1a:	d08a      	beq.n	3d32 <pwm_nrfx_pin_set+0x7a>
    3e1c:	2300      	movs	r3, #0
				data->current[i]
    3e1e:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
    3e22:	b2da      	uxtb	r2, r3
    3e24:	42aa      	cmp	r2, r5
    3e26:	f43f af6d 	beq.w	3d04 <pwm_nrfx_pin_set+0x4c>
			u16_t channel_pulse_cycle =
    3e2a:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    3e2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    3e32:	2a00      	cmp	r2, #0
    3e34:	f43f af66 	beq.w	3d04 <pwm_nrfx_pin_set+0x4c>
    3e38:	490e      	ldr	r1, [pc, #56]	; (3e74 <pwm_nrfx_pin_set+0x1bc>)
    3e3a:	4b0f      	ldr	r3, [pc, #60]	; (3e78 <pwm_nrfx_pin_set+0x1c0>)
				LOG_ERR("Incompatible period.");
    3e3c:	4812      	ldr	r0, [pc, #72]	; (3e88 <pwm_nrfx_pin_set+0x1d0>)
    3e3e:	1ac9      	subs	r1, r1, r3
    3e40:	08c9      	lsrs	r1, r1, #3
    3e42:	0189      	lsls	r1, r1, #6
    3e44:	f041 0101 	orr.w	r1, r1, #1
    3e48:	f010 fc21 	bl	1468e <log_0>
	return -EINVAL;
    3e4c:	f06f 0015 	mvn.w	r0, #21
}
    3e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    3e54:	2a00      	cmp	r2, #0
    3e56:	daa0      	bge.n	3d9a <pwm_nrfx_pin_set+0xe2>
    if (*p_pin < P0_PIN_NUM)
    3e58:	2c1f      	cmp	r4, #31
        return NRF_P1;
    3e5a:	bf86      	itte	hi
    3e5c:	4a09      	ldrhi	r2, [pc, #36]	; (3e84 <pwm_nrfx_pin_set+0x1cc>)
        *p_pin = *p_pin & 0x1F;
    3e5e:	f004 041f 	andhi.w	r4, r4, #31
        return NRF_P0;
    3e62:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3e66:	2301      	movs	r3, #1
    3e68:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTSET = set_mask;
    3e6c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    3e70:	e79f      	b.n	3db2 <pwm_nrfx_pin_set+0xfa>
    3e72:	bf00      	nop
    3e74:	0001ebf8 	.word	0x0001ebf8
    3e78:	0001ebc8 	.word	0x0001ebc8
    3e7c:	000265e0 	.word	0x000265e0
    3e80:	000265b6 	.word	0x000265b6
    3e84:	50000300 	.word	0x50000300
    3e88:	000265a1 	.word	0x000265a1

00003e8c <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3e8c:	4b02      	ldr	r3, [pc, #8]	; (3e98 <uart_nrfx_err_check+0xc>)
    3e8e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3e92:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    3e96:	4770      	bx	lr
    3e98:	40002000 	.word	0x40002000

00003e9c <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    3e9c:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3e9e:	794b      	ldrb	r3, [r1, #5]
    3ea0:	2b01      	cmp	r3, #1
    3ea2:	d027      	beq.n	3ef4 <uart_nrfx_configure+0x58>
    3ea4:	2b03      	cmp	r3, #3
    3ea6:	d122      	bne.n	3eee <uart_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    3ea8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3eaa:	798b      	ldrb	r3, [r1, #6]
    3eac:	2b03      	cmp	r3, #3
    3eae:	d11e      	bne.n	3eee <uart_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3eb0:	79cc      	ldrb	r4, [r1, #7]
    3eb2:	b124      	cbz	r4, 3ebe <uart_nrfx_configure+0x22>
    3eb4:	2c01      	cmp	r4, #1
    3eb6:	d11a      	bne.n	3eee <uart_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    3eb8:	6843      	ldr	r3, [r0, #4]
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	b1bb      	cbz	r3, 3eee <uart_nrfx_configure+0x52>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3ebe:	790a      	ldrb	r2, [r1, #4]
    3ec0:	b112      	cbz	r2, 3ec8 <uart_nrfx_configure+0x2c>
    3ec2:	2a02      	cmp	r2, #2
    3ec4:	d113      	bne.n	3eee <uart_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    3ec6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3ec8:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3eca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3ece:	d062      	beq.n	3f96 <uart_nrfx_configure+0xfa>
    3ed0:	d82d      	bhi.n	3f2e <uart_nrfx_configure+0x92>
    3ed2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3ed6:	d060      	beq.n	3f9a <uart_nrfx_configure+0xfe>
    3ed8:	d816      	bhi.n	3f08 <uart_nrfx_configure+0x6c>
    3eda:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ede:	d05e      	beq.n	3f9e <uart_nrfx_configure+0x102>
    3ee0:	d80a      	bhi.n	3ef8 <uart_nrfx_configure+0x5c>
    3ee2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3ee6:	d05d      	beq.n	3fa4 <uart_nrfx_configure+0x108>
    3ee8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3eec:	d05d      	beq.n	3faa <uart_nrfx_configure+0x10e>
    3eee:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3ef2:	e04f      	b.n	3f94 <uart_nrfx_configure+0xf8>
	switch (cfg->stop_bits) {
    3ef4:	2600      	movs	r6, #0
    3ef6:	e7d8      	b.n	3eaa <uart_nrfx_configure+0xe>
	switch (baudrate) {
    3ef8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3efc:	d058      	beq.n	3fb0 <uart_nrfx_configure+0x114>
    3efe:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3f02:	d1f4      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3f04:	4b34      	ldr	r3, [pc, #208]	; (3fd8 <uart_nrfx_configure+0x13c>)
    3f06:	e039      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f08:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3f0c:	d053      	beq.n	3fb6 <uart_nrfx_configure+0x11a>
    3f0e:	d807      	bhi.n	3f20 <uart_nrfx_configure+0x84>
    3f10:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3f14:	d051      	beq.n	3fba <uart_nrfx_configure+0x11e>
    3f16:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3f1a:	d1e8      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3f1c:	4b2f      	ldr	r3, [pc, #188]	; (3fdc <uart_nrfx_configure+0x140>)
    3f1e:	e02d      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f20:	f647 2512 	movw	r5, #31250	; 0x7a12
    3f24:	42ab      	cmp	r3, r5
    3f26:	d1e2      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3f28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f2c:	e026      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f2e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f32:	d045      	beq.n	3fc0 <uart_nrfx_configure+0x124>
    3f34:	d811      	bhi.n	3f5a <uart_nrfx_configure+0xbe>
    3f36:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f3a:	d043      	beq.n	3fc4 <uart_nrfx_configure+0x128>
    3f3c:	d808      	bhi.n	3f50 <uart_nrfx_configure+0xb4>
    3f3e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3f42:	42ab      	cmp	r3, r5
    3f44:	d040      	beq.n	3fc8 <uart_nrfx_configure+0x12c>
    3f46:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3f4a:	d1d0      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3f4c:	4b24      	ldr	r3, [pc, #144]	; (3fe0 <uart_nrfx_configure+0x144>)
    3f4e:	e015      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f50:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3f54:	d1cb      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3f56:	4b23      	ldr	r3, [pc, #140]	; (3fe4 <uart_nrfx_configure+0x148>)
    3f58:	e010      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f5a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3f5e:	d036      	beq.n	3fce <uart_nrfx_configure+0x132>
    3f60:	d807      	bhi.n	3f72 <uart_nrfx_configure+0xd6>
    3f62:	4d21      	ldr	r5, [pc, #132]	; (3fe8 <uart_nrfx_configure+0x14c>)
    3f64:	42ab      	cmp	r3, r5
    3f66:	d034      	beq.n	3fd2 <uart_nrfx_configure+0x136>
    3f68:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3f6c:	d1bf      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3f6e:	4b1f      	ldr	r3, [pc, #124]	; (3fec <uart_nrfx_configure+0x150>)
    3f70:	e004      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3f72:	4d1f      	ldr	r5, [pc, #124]	; (3ff0 <uart_nrfx_configure+0x154>)
    3f74:	42ab      	cmp	r3, r5
    3f76:	d1ba      	bne.n	3eee <uart_nrfx_configure+0x52>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3f7c:	4d1d      	ldr	r5, [pc, #116]	; (3ff4 <uart_nrfx_configure+0x158>)
                    | (uint32_t)p_cfg->hwfc;
    3f7e:	4334      	orrs	r4, r6
    3f80:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    3f82:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3f86:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3f8a:	68c3      	ldr	r3, [r0, #12]
    3f8c:	c903      	ldmia	r1, {r0, r1}
    3f8e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3f92:	2000      	movs	r0, #0
}
    3f94:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3f96:	4b18      	ldr	r3, [pc, #96]	; (3ff8 <uart_nrfx_configure+0x15c>)
    3f98:	e7f0      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3f9a:	4b18      	ldr	r3, [pc, #96]	; (3ffc <uart_nrfx_configure+0x160>)
    3f9c:	e7ee      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3f9e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3fa2:	e7eb      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    3fa4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3fa8:	e7e8      	b.n	3f7c <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    3faa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3fae:	e7e5      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3fb0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3fb4:	e7e2      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3fb6:	4b12      	ldr	r3, [pc, #72]	; (4000 <CONFIG_HEAP_MEM_POOL_SIZE>)
    3fb8:	e7e0      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3fba:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3fbe:	e7dd      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3fc0:	4b10      	ldr	r3, [pc, #64]	; (4004 <CONFIG_HEAP_MEM_POOL_SIZE+0x4>)
    3fc2:	e7db      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3fc4:	4b10      	ldr	r3, [pc, #64]	; (4008 <CONFIG_HEAP_MEM_POOL_SIZE+0x8>)
    3fc6:	e7d9      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3fc8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3fcc:	e7d6      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3fce:	4b0f      	ldr	r3, [pc, #60]	; (400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>)
    3fd0:	e7d4      	b.n	3f7c <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3fd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3fd6:	e7d1      	b.n	3f7c <uart_nrfx_configure+0xe0>
    3fd8:	0013b000 	.word	0x0013b000
    3fdc:	004ea000 	.word	0x004ea000
    3fe0:	00ebf000 	.word	0x00ebf000
    3fe4:	01d7e000 	.word	0x01d7e000
    3fe8:	0003d090 	.word	0x0003d090
    3fec:	075f7000 	.word	0x075f7000
    3ff0:	000f4240 	.word	0x000f4240
    3ff4:	40002000 	.word	0x40002000
    3ff8:	009d5000 	.word	0x009d5000
    3ffc:	00275000 	.word	0x00275000
    4000:	0075f000 	.word	0x0075f000
    4004:	03afb000 	.word	0x03afb000
    4008:	013a9000 	.word	0x013a9000
    400c:	0ebed000 	.word	0x0ebed000

00004010 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4010:	4b08      	ldr	r3, [pc, #32]	; (4034 <uart_nrfx_poll_in+0x24>)
    4012:	681a      	ldr	r2, [r3, #0]
{
    4014:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    4016:	b152      	cbz	r2, 402e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4018:	2000      	movs	r0, #0
    401a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4020:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    4022:	4b05      	ldr	r3, [pc, #20]	; (4038 <uart_nrfx_poll_in+0x28>)
    4024:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4028:	700b      	strb	r3, [r1, #0]
}
    402a:	b002      	add	sp, #8
    402c:	4770      	bx	lr
		return -1;
    402e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4032:	e7fa      	b.n	402a <uart_nrfx_poll_in+0x1a>
    4034:	40002108 	.word	0x40002108
    4038:	40002000 	.word	0x40002000

0000403c <uart_nrfx_poll_out>:
{
    403c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    403e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    4040:	f011 fa2d 	bl	1549e <k_is_in_isr>
    4044:	4d1b      	ldr	r5, [pc, #108]	; (40b4 <uart_nrfx_poll_out+0x78>)
    4046:	b9c0      	cbnz	r0, 407a <uart_nrfx_poll_out+0x3e>
    4048:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    404a:	2701      	movs	r7, #1
    404c:	f3bf 8f5b 	dmb	ish
    4050:	e855 3f00 	ldrex	r3, [r5]
    4054:	2b00      	cmp	r3, #0
    4056:	d103      	bne.n	4060 <uart_nrfx_poll_out+0x24>
    4058:	e845 7200 	strex	r2, r7, [r5]
    405c:	2a00      	cmp	r2, #0
    405e:	d1f7      	bne.n	4050 <uart_nrfx_poll_out+0x14>
    4060:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    4064:	d00b      	beq.n	407e <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    4066:	2021      	movs	r0, #33	; 0x21
    4068:	2100      	movs	r1, #0
    406a:	3c01      	subs	r4, #1
    406c:	f001 f95a 	bl	5324 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4070:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4074:	d1ea      	bne.n	404c <uart_nrfx_poll_out+0x10>
}
    4076:	b003      	add	sp, #12
    4078:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
    407a:	2301      	movs	r3, #1
    407c:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    407e:	4c0e      	ldr	r4, [pc, #56]	; (40b8 <uart_nrfx_poll_out+0x7c>)
    4080:	2200      	movs	r2, #0
    4082:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4084:	6822      	ldr	r2, [r4, #0]
    4086:	9201      	str	r2, [sp, #4]
    (void)dummy;
    4088:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    408a:	4a0c      	ldr	r2, [pc, #48]	; (40bc <uart_nrfx_poll_out+0x80>)
    408c:	2101      	movs	r1, #1
    408e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    4090:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    4094:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4098:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    409a:	b923      	cbnz	r3, 40a6 <uart_nrfx_poll_out+0x6a>
    409c:	2001      	movs	r0, #1
    409e:	f011 f89d 	bl	151dc <nrfx_busy_wait>
    40a2:	3e01      	subs	r6, #1
    40a4:	d1f8      	bne.n	4098 <uart_nrfx_poll_out+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40a6:	4b06      	ldr	r3, [pc, #24]	; (40c0 <uart_nrfx_poll_out+0x84>)
    40a8:	2201      	movs	r2, #1
    40aa:	601a      	str	r2, [r3, #0]
	*lock = 0;
    40ac:	2300      	movs	r3, #0
    40ae:	602b      	str	r3, [r5, #0]
    40b0:	e7e1      	b.n	4076 <uart_nrfx_poll_out+0x3a>
    40b2:	bf00      	nop
    40b4:	20009ce8 	.word	0x20009ce8
    40b8:	4000211c 	.word	0x4000211c
    40bc:	40002008 	.word	0x40002008
    40c0:	4000200c 	.word	0x4000200c

000040c4 <uart_nrfx_init>:
    40c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    40c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
    40ca:	4c16      	ldr	r4, [pc, #88]	; (4124 <uart_nrfx_init+0x60>)
    40cc:	2240      	movs	r2, #64	; 0x40
    40ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    40d2:	2103      	movs	r1, #3
    40d4:	2200      	movs	r2, #0
    40d6:	2508      	movs	r5, #8
    40d8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    40dc:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    40e0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    40e4:	2506      	movs	r5, #6
    40e6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    40ea:	2520      	movs	r5, #32
    40ec:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    40f0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    40f4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    40f8:	2305      	movs	r3, #5
    40fa:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    40fe:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4100:	68c1      	ldr	r1, [r0, #12]
    4102:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    4106:	f7ff fec9 	bl	3e9c <uart_nrfx_configure>
	if (err) {
    410a:	b948      	cbnz	r0, 4120 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    410c:	2304      	movs	r3, #4
    410e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4112:	4b05      	ldr	r3, [pc, #20]	; (4128 <uart_nrfx_init+0x64>)
    4114:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4116:	681b      	ldr	r3, [r3, #0]
    4118:	9301      	str	r3, [sp, #4]
    (void)dummy;
    411a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    411c:	2301      	movs	r3, #1
    411e:	6023      	str	r3, [r4, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    4120:	b003      	add	sp, #12
    4122:	bd30      	pop	{r4, r5, pc}
    4124:	40002000 	.word	0x40002000
    4128:	40002108 	.word	0x40002108

0000412c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    412c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    412e:	794b      	ldrb	r3, [r1, #5]
    4130:	2b01      	cmp	r3, #1
    4132:	d029      	beq.n	4188 <uarte_nrfx_configure+0x5c>
    4134:	2b03      	cmp	r3, #3
    4136:	d124      	bne.n	4182 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4138:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    413a:	798b      	ldrb	r3, [r1, #6]
    413c:	2b03      	cmp	r3, #3
    413e:	d120      	bne.n	4182 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4140:	79cc      	ldrb	r4, [r1, #7]
    4142:	b124      	cbz	r4, 414e <uarte_nrfx_configure+0x22>
    4144:	2c01      	cmp	r4, #1
    4146:	d11c      	bne.n	4182 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    4148:	6843      	ldr	r3, [r0, #4]
    414a:	791b      	ldrb	r3, [r3, #4]
    414c:	b1cb      	cbz	r3, 4182 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    414e:	790a      	ldrb	r2, [r1, #4]
    4150:	b112      	cbz	r2, 4158 <uarte_nrfx_configure+0x2c>
    4152:	2a02      	cmp	r2, #2
    4154:	d115      	bne.n	4182 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4156:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4158:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    415a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    415c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4160:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4162:	d064      	beq.n	422e <uarte_nrfx_configure+0x102>
    4164:	d82d      	bhi.n	41c2 <uarte_nrfx_configure+0x96>
    4166:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    416a:	d063      	beq.n	4234 <uarte_nrfx_configure+0x108>
    416c:	d816      	bhi.n	419c <uarte_nrfx_configure+0x70>
    416e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4172:	d061      	beq.n	4238 <uarte_nrfx_configure+0x10c>
    4174:	d80a      	bhi.n	418c <uarte_nrfx_configure+0x60>
    4176:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    417a:	d060      	beq.n	423e <uarte_nrfx_configure+0x112>
    417c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4180:	d060      	beq.n	4244 <uarte_nrfx_configure+0x118>
    4182:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4186:	e051      	b.n	422c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    4188:	2600      	movs	r6, #0
    418a:	e7d6      	b.n	413a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    418c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4190:	d05b      	beq.n	424a <uarte_nrfx_configure+0x11e>
    4192:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4196:	d1f4      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4198:	4b36      	ldr	r3, [pc, #216]	; (4274 <uarte_nrfx_configure+0x148>)
    419a:	e03c      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    419c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    41a0:	d056      	beq.n	4250 <uarte_nrfx_configure+0x124>
    41a2:	d807      	bhi.n	41b4 <uarte_nrfx_configure+0x88>
    41a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    41a8:	d054      	beq.n	4254 <uarte_nrfx_configure+0x128>
    41aa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    41ae:	d1e8      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    41b0:	4b31      	ldr	r3, [pc, #196]	; (4278 <uarte_nrfx_configure+0x14c>)
    41b2:	e030      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41b4:	f647 2712 	movw	r7, #31250	; 0x7a12
    41b8:	42bb      	cmp	r3, r7
    41ba:	d1e2      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    41bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    41c0:	e029      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41c2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    41c6:	d047      	beq.n	4258 <uarte_nrfx_configure+0x12c>
    41c8:	d813      	bhi.n	41f2 <uarte_nrfx_configure+0xc6>
    41ca:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    41ce:	d046      	beq.n	425e <uarte_nrfx_configure+0x132>
    41d0:	d809      	bhi.n	41e6 <uarte_nrfx_configure+0xba>
    41d2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    41d6:	42bb      	cmp	r3, r7
    41d8:	d043      	beq.n	4262 <uarte_nrfx_configure+0x136>
    41da:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    41de:	d1d0      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    41e0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    41e4:	e017      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41e6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    41ea:	d1ca      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    41ec:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    41f0:	e011      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    41f2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    41f6:	d037      	beq.n	4268 <uarte_nrfx_configure+0x13c>
    41f8:	d808      	bhi.n	420c <uarte_nrfx_configure+0xe0>
    41fa:	4f20      	ldr	r7, [pc, #128]	; (427c <uarte_nrfx_configure+0x150>)
    41fc:	42bb      	cmp	r3, r7
    41fe:	d036      	beq.n	426e <uarte_nrfx_configure+0x142>
    4200:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4204:	d1bd      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4206:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    420a:	e004      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    420c:	4f1c      	ldr	r7, [pc, #112]	; (4280 <uarte_nrfx_configure+0x154>)
    420e:	42bb      	cmp	r3, r7
    4210:	d1b7      	bne.n	4182 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4216:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    421a:	68c3      	ldr	r3, [r0, #12]
    421c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    421e:	4334      	orrs	r4, r6
    4220:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4222:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4226:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    422a:	2000      	movs	r0, #0
}
    422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    422e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4232:	e7f0      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4234:	4b13      	ldr	r3, [pc, #76]	; (4284 <uarte_nrfx_configure+0x158>)
    4236:	e7ee      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4238:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    423c:	e7eb      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    423e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4242:	e7e8      	b.n	4216 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    4244:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4248:	e7e5      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    424a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    424e:	e7e2      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4250:	4b0d      	ldr	r3, [pc, #52]	; (4288 <uarte_nrfx_configure+0x15c>)
    4252:	e7e0      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4254:	4b0d      	ldr	r3, [pc, #52]	; (428c <uarte_nrfx_configure+0x160>)
    4256:	e7de      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4258:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    425c:	e7db      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    425e:	4b0c      	ldr	r3, [pc, #48]	; (4290 <uarte_nrfx_configure+0x164>)
    4260:	e7d9      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4262:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4266:	e7d6      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4268:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    426c:	e7d3      	b.n	4216 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    426e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4272:	e7d0      	b.n	4216 <uarte_nrfx_configure+0xea>
    4274:	0013b000 	.word	0x0013b000
    4278:	004ea000 	.word	0x004ea000
    427c:	0003d090 	.word	0x0003d090
    4280:	000f4240 	.word	0x000f4240
    4284:	00275000 	.word	0x00275000
    4288:	0075c000 	.word	0x0075c000
    428c:	003af000 	.word	0x003af000
    4290:	013a9000 	.word	0x013a9000

00004294 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    4294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return config->uarte_regs;
    4296:	6842      	ldr	r2, [r0, #4]
    p_reg->OUTSET = set_mask;
    4298:	4b13      	ldr	r3, [pc, #76]	; (42e8 <uarte_1_init+0x54>)
    429a:	6814      	ldr	r4, [r2, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    429c:	68c5      	ldr	r5, [r0, #12]
    429e:	2204      	movs	r2, #4
    42a0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    42a4:	2203      	movs	r2, #3
    42a6:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
    42aa:	2200      	movs	r2, #0
    42ac:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
    42b0:	2322      	movs	r3, #34	; 0x22
    42b2:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    42b6:	2321      	movs	r3, #33	; 0x21
    42b8:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    42bc:	4629      	mov	r1, r5
    42be:	f7ff ff35 	bl	412c <uarte_nrfx_configure>
	if (err) {
    42c2:	b978      	cbnz	r0, 42e4 <uarte_1_init+0x50>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    42c4:	2308      	movs	r3, #8
    42c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42ca:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    42ce:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    42d2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    42d4:	9b01      	ldr	r3, [sp, #4]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    42d6:	350c      	adds	r5, #12
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    42d8:	2301      	movs	r3, #1
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    42da:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    42de:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42e2:	6023      	str	r3, [r4, #0]
UART_NRF_UARTE_DEVICE(1);
    42e4:	b003      	add	sp, #12
    42e6:	bd30      	pop	{r4, r5, pc}
    42e8:	50000300 	.word	0x50000300

000042ec <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    42ec:	b508      	push	{r3, lr}
	z_impl_log_panic();
    42ee:	f7fd ff95 	bl	221c <z_impl_log_panic>
    42f2:	4b06      	ldr	r3, [pc, #24]	; (430c <k_sys_fatal_error_handler+0x20>)
    42f4:	4906      	ldr	r1, [pc, #24]	; (4310 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    42f6:	4807      	ldr	r0, [pc, #28]	; (4314 <k_sys_fatal_error_handler+0x28>)
    42f8:	1ac9      	subs	r1, r1, r3
    42fa:	08c9      	lsrs	r1, r1, #3
    42fc:	0189      	lsls	r1, r1, #6
    42fe:	f041 0101 	orr.w	r1, r1, #1
    4302:	f010 f9c4 	bl	1468e <log_0>
	sys_arch_reboot(0);
    4306:	2000      	movs	r0, #0
    4308:	f7ff fab2 	bl	3870 <sys_arch_reboot>

	CODE_UNREACHABLE;
    430c:	0001ebc8 	.word	0x0001ebc8
    4310:	0001ebd0 	.word	0x0001ebd0
    4314:	0002663a 	.word	0x0002663a

00004318 <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4318:	4b0a      	ldr	r3, [pc, #40]	; (4344 <nrf52_errata_136+0x2c>)
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    431e:	bf05      	ittet	eq
    4320:	4b09      	ldreq	r3, [pc, #36]	; (4348 <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4322:	4a0a      	ldreq	r2, [pc, #40]	; (434c <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    4324:	4a0a      	ldrne	r2, [pc, #40]	; (4350 <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4326:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4328:	bf0a      	itet	eq
    432a:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    432c:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    432e:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4332:	2b08      	cmp	r3, #8
    4334:	d104      	bne.n	4340 <nrf52_errata_136+0x28>
            {
                switch(var2)
    4336:	2803      	cmp	r0, #3
    4338:	bf8c      	ite	hi
    433a:	2000      	movhi	r0, #0
    433c:	2001      	movls	r0, #1
    433e:	4770      	bx	lr
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
    4340:	2000      	movs	r0, #0
    #endif
}
    4342:	4770      	bx	lr
    4344:	10000130 	.word	0x10000130
    4348:	f0000fe0 	.word	0xf0000fe0
    434c:	f0000fe8 	.word	0xf0000fe8
    4350:	10000134 	.word	0x10000134

00004354 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4354:	4b06      	ldr	r3, [pc, #24]	; (4370 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	2b08      	cmp	r3, #8
    435a:	d106      	bne.n	436a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    435c:	4b05      	ldr	r3, [pc, #20]	; (4374 <nrf52_errata_103+0x20>)
    435e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4360:	2b03      	cmp	r3, #3
    4362:	d802      	bhi.n	436a <nrf52_errata_103+0x16>
    4364:	4a04      	ldr	r2, [pc, #16]	; (4378 <nrf52_errata_103+0x24>)
    4366:	5cd0      	ldrb	r0, [r2, r3]
    4368:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    436a:	2000      	movs	r0, #0
    #endif
}
    436c:	4770      	bx	lr
    436e:	bf00      	nop
    4370:	10000130 	.word	0x10000130
    4374:	10000134 	.word	0x10000134
    4378:	00026662 	.word	0x00026662

0000437c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    437c:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    437e:	f7ff ffcb 	bl	4318 <nrf52_errata_136>
    4382:	b140      	cbz	r0, 4396 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
    4384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4388:	2200      	movs	r2, #0
    438a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    438e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    4392:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    4396:	f7ff ffbf 	bl	4318 <nrf52_errata_136>
    439a:	2800      	cmp	r0, #0
    439c:	d046      	beq.n	442c <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    43a2:	4b5e      	ldr	r3, [pc, #376]	; (451c <SystemInit+0x1a0>)
    43a4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    43a8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    43ac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    43b0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    43b4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    43b8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    43bc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    43c0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    43c4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    43c8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    43cc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    43d0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    43d4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    43d8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    43dc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    43e0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    43e4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    43e8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    43ec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    43f0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    43f4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    43f8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    43fc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4400:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4404:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4408:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    440c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4410:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4414:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4418:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    441c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4420:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4424:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4428:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
    442c:	f7ff ff92 	bl	4354 <nrf52_errata_103>
    4430:	b110      	cbz	r0, 4438 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4432:	4b3b      	ldr	r3, [pc, #236]	; (4520 <SystemInit+0x1a4>)
    4434:	4a3b      	ldr	r2, [pc, #236]	; (4524 <SystemInit+0x1a8>)
    4436:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
    4438:	f7ff ff8c 	bl	4354 <nrf52_errata_103>
    443c:	b118      	cbz	r0, 4446 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    443e:	4b3a      	ldr	r3, [pc, #232]	; (4528 <SystemInit+0x1ac>)
    4440:	22fb      	movs	r2, #251	; 0xfb
    4442:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
    4446:	f7ff ff85 	bl	4354 <nrf52_errata_103>
    444a:	b148      	cbz	r0, 4460 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
    444c:	4937      	ldr	r1, [pc, #220]	; (452c <SystemInit+0x1b0>)
    444e:	4b38      	ldr	r3, [pc, #224]	; (4530 <SystemInit+0x1b4>)
    4450:	680a      	ldr	r2, [r1, #0]
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	f022 020f 	bic.w	r2, r2, #15
    4458:	f003 030f 	and.w	r3, r3, #15
    445c:	4313      	orrs	r3, r2
    445e:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
    4460:	f7ff ff78 	bl	4354 <nrf52_errata_103>
    4464:	b118      	cbz	r0, 446e <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4466:	4b33      	ldr	r3, [pc, #204]	; (4534 <SystemInit+0x1b8>)
    4468:	f44f 7200 	mov.w	r2, #512	; 0x200
    446c:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    446e:	f7ff ff53 	bl	4318 <nrf52_errata_136>
    4472:	b148      	cbz	r0, 4488 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4478:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    447c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    447e:	bf44      	itt	mi
    4480:	f06f 0201 	mvnmi.w	r2, #1
    4484:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4488:	4a2b      	ldr	r2, [pc, #172]	; (4538 <SystemInit+0x1bc>)
    448a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    448e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    4492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    4496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    449a:	f3bf 8f6f 	isb	sy

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    449e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    44a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    44a6:	2a00      	cmp	r2, #0
    44a8:	db03      	blt.n	44b2 <SystemInit+0x136>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    44aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    44ae:	2b00      	cmp	r3, #0
    44b0:	da2f      	bge.n	4512 <SystemInit+0x196>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    44b2:	4b22      	ldr	r3, [pc, #136]	; (453c <SystemInit+0x1c0>)
    44b4:	2201      	movs	r2, #1
    44b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    44be:	2a00      	cmp	r2, #0
    44c0:	d0fb      	beq.n	44ba <SystemInit+0x13e>
            NRF_UICR->PSELRESET[0] = 18;
    44c2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    44c6:	2112      	movs	r1, #18
    44c8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    44d0:	2a00      	cmp	r2, #0
    44d2:	d0fb      	beq.n	44cc <SystemInit+0x150>
            NRF_UICR->PSELRESET[1] = 18;
    44d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    44d8:	2212      	movs	r2, #18
    44da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44de:	4b17      	ldr	r3, [pc, #92]	; (453c <SystemInit+0x1c0>)
    44e0:	461a      	mov	r2, r3
    44e2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    44e6:	2900      	cmp	r1, #0
    44e8:	d0fb      	beq.n	44e2 <SystemInit+0x166>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    44ea:	2100      	movs	r1, #0
    44ec:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44f0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    44f4:	2b00      	cmp	r3, #0
    44f6:	d0fb      	beq.n	44f0 <SystemInit+0x174>
  __ASM volatile ("dsb 0xF":::"memory");
    44f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    44fc:	490e      	ldr	r1, [pc, #56]	; (4538 <SystemInit+0x1bc>)
    44fe:	4b10      	ldr	r3, [pc, #64]	; (4540 <SystemInit+0x1c4>)
    4500:	68ca      	ldr	r2, [r1, #12]
    4502:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4506:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4508:	60cb      	str	r3, [r1, #12]
    450a:	f3bf 8f4f 	dsb	sy
    __NOP();
    450e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4510:	e7fd      	b.n	450e <SystemInit+0x192>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4512:	4b0c      	ldr	r3, [pc, #48]	; (4544 <SystemInit+0x1c8>)
    4514:	4a0c      	ldr	r2, [pc, #48]	; (4548 <SystemInit+0x1cc>)
    4516:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4518:	bd08      	pop	{r3, pc}
    451a:	bf00      	nop
    451c:	4000c000 	.word	0x4000c000
    4520:	4000568c 	.word	0x4000568c
    4524:	00038148 	.word	0x00038148
    4528:	4000f000 	.word	0x4000f000
    452c:	40000ee4 	.word	0x40000ee4
    4530:	10000258 	.word	0x10000258
    4534:	40029640 	.word	0x40029640
    4538:	e000ed00 	.word	0xe000ed00
    453c:	4001e000 	.word	0x4001e000
    4540:	05fa0004 	.word	0x05fa0004
    4544:	2000005c 	.word	0x2000005c
    4548:	03d09000 	.word	0x03d09000

0000454c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4550:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4552:	4d4c      	ldr	r5, [pc, #304]	; (4684 <nrfx_pwm_init+0x138>)
{
    4554:	4604      	mov	r4, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4556:	200c      	movs	r0, #12
    4558:	4370      	muls	r0, r6
    455a:	182f      	adds	r7, r5, r0
{
    455c:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    455e:	f897 c008 	ldrb.w	ip, [r7, #8]
    4562:	f1bc 0f00 	cmp.w	ip, #0
    4566:	f040 808a 	bne.w	467e <nrfx_pwm_init+0x132>
        return NRF_P1;
    456a:	f8df e124 	ldr.w	lr, [pc, #292]	; 4690 <nrfx_pwm_init+0x144>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    456e:	502a      	str	r2, [r5, r0]
    p_cb->p_context = p_context;
    4570:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4572:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4576:	4668      	mov	r0, sp
    4578:	f101 0a03 	add.w	sl, r1, #3
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    457c:	f04f 0b03 	mov.w	fp, #3
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4580:	f04f 0801 	mov.w	r8, #1
        uint8_t output_pin = p_config->output_pins[i];
    4584:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    4588:	2aff      	cmp	r2, #255	; 0xff
    458a:	d074      	beq.n	4676 <nrfx_pwm_init+0x12a>
            if (!p_config->skip_gpio_cfg)
    458c:	7b0f      	ldrb	r7, [r1, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    458e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    4592:	6003      	str	r3, [r0, #0]
            if (!p_config->skip_gpio_cfg)
    4594:	b9c7      	cbnz	r7, 45c8 <nrfx_pwm_init+0x7c>
                if (inverted)
    4596:	0617      	lsls	r7, r2, #24
    4598:	d560      	bpl.n	465c <nrfx_pwm_init+0x110>
    if (*p_pin < P0_PIN_NUM)
    459a:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    459c:	bf87      	ittee	hi
    459e:	f002 071f 	andhi.w	r7, r2, #31
        return NRF_P1;
    45a2:	46f1      	movhi	r9, lr
    45a4:	461f      	movls	r7, r3
        return NRF_P0;
    45a6:	f04f 49a0 	movls.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    45aa:	fa08 f707 	lsl.w	r7, r8, r7
    p_reg->OUTSET = set_mask;
    45ae:	f8c9 7508 	str.w	r7, [r9, #1288]	; 0x508
    if (*p_pin < P0_PIN_NUM)
    45b2:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    45b4:	bf8a      	itet	hi
    45b6:	f002 031f 	andhi.w	r3, r2, #31
        return NRF_P0;
    45ba:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000
        return NRF_P1;
    45be:	4672      	movhi	r2, lr
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    45c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45c4:	f842 b023 	str.w	fp, [r2, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    45c8:	45d4      	cmp	ip, sl
    45ca:	f100 0004 	add.w	r0, r0, #4
    45ce:	d1d9      	bne.n	4584 <nrfx_pwm_init+0x38>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    45d0:	6820      	ldr	r0, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    45d2:	9b00      	ldr	r3, [sp, #0]
    45d4:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    45de:	9b02      	ldr	r3, [sp, #8]
    45e0:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    45e4:	9b03      	ldr	r3, [sp, #12]
    45e6:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    45ea:	2301      	movs	r3, #1
    45ec:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    45f0:	798a      	ldrb	r2, [r1, #6]
    45f2:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    45f4:	794f      	ldrb	r7, [r1, #5]
    45f6:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    45fa:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    45fe:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4602:	894b      	ldrh	r3, [r1, #10]
    4604:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    4608:	2300      	movs	r3, #0
    460a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    460e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    4612:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    4616:	f010 fde3 	bl	151e0 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    461a:	6820      	ldr	r0, [r4, #0]
    461c:	f44f 7188 	mov.w	r1, #272	; 0x110
    4620:	f010 fdde 	bl	151e0 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    4624:	6820      	ldr	r0, [r4, #0]
    4626:	f44f 718a 	mov.w	r1, #276	; 0x114
    462a:	f010 fdd9 	bl	151e0 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    462e:	6820      	ldr	r0, [r4, #0]
    4630:	f44f 7182 	mov.w	r1, #260	; 0x104
    4634:	f010 fdd4 	bl	151e0 <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    4638:	230c      	movs	r3, #12
    463a:	4373      	muls	r3, r6
    463c:	58eb      	ldr	r3, [r5, r3]
    463e:	b123      	cbz	r3, 464a <nrfx_pwm_init+0xfe>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4640:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4642:	f340 3007 	sbfx	r0, r0, #12, #8
    4646:	f7fe fc65 	bl	2f14 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    464a:	230c      	movs	r3, #12
    464c:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4650:	480d      	ldr	r0, [pc, #52]	; (4688 <nrfx_pwm_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4652:	2301      	movs	r3, #1
    4654:	722b      	strb	r3, [r5, #8]
}
    4656:	b005      	add	sp, #20
    4658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*p_pin < P0_PIN_NUM)
    465c:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    465e:	bf87      	ittee	hi
    4660:	f002 071f 	andhi.w	r7, r2, #31
        return NRF_P1;
    4664:	46f1      	movhi	r9, lr
    4666:	461f      	movls	r7, r3
        return NRF_P0;
    4668:	f04f 49a0 	movls.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    466c:	fa08 f707 	lsl.w	r7, r8, r7
    p_reg->OUTCLR = clr_mask;
    4670:	f8c9 750c 	str.w	r7, [r9, #1292]	; 0x50c
    4674:	e79d      	b.n	45b2 <nrfx_pwm_init+0x66>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    467a:	6003      	str	r3, [r0, #0]
    467c:	e7a4      	b.n	45c8 <nrfx_pwm_init+0x7c>
        return err_code;
    467e:	4803      	ldr	r0, [pc, #12]	; (468c <nrfx_pwm_init+0x140>)
    4680:	e7e9      	b.n	4656 <nrfx_pwm_init+0x10a>
    4682:	bf00      	nop
    4684:	20009cec 	.word	0x20009cec
    4688:	0bad0000 	.word	0x0bad0000
    468c:	0bad0005 	.word	0x0bad0005
    4690:	50000300 	.word	0x50000300

00004694 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4694:	b5f0      	push	{r4, r5, r6, r7, lr}
    4696:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4698:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    469a:	6804      	ldr	r4, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    469c:	f8d6 e000 	ldr.w	lr, [r6]
    p_reg->SEQ[seq_id].CNT = length;
    46a0:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    46a4:	68b7      	ldr	r7, [r6, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    46a6:	f8c4 e520 	str.w	lr, [r4, #1312]	; 0x520
{
    46aa:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    46ac:	4b18      	ldr	r3, [pc, #96]	; (4710 <nrfx_pwm_simple_playback+0x7c>)
    p_reg->SEQ[seq_id].CNT = length;
    46ae:	f8c4 c524 	str.w	ip, [r4, #1316]	; 0x524
    46b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    46b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    46ba:	68f3      	ldr	r3, [r6, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    46bc:	f8c4 7528 	str.w	r7, [r4, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    46c0:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    46c4:	f8c4 e540 	str.w	lr, [r4, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    46c8:	f8c4 c544 	str.w	ip, [r4, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    46cc:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    46d0:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    46d4:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    46d8:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    46dc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    46e0:	07ea      	lsls	r2, r5, #31
    46e2:	d412      	bmi.n	470a <nrfx_pwm_simple_playback+0x76>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    46e4:	f015 0202 	ands.w	r2, r5, #2
    46e8:	d003      	beq.n	46f2 <nrfx_pwm_simple_playback+0x5e>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    46ea:	2b00      	cmp	r3, #0
    46ec:	bf14      	ite	ne
    46ee:	2208      	movne	r2, #8
    46f0:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    46f2:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    46f4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    46f8:	bf18      	it	ne
    46fa:	230c      	movne	r3, #12
    46fc:	b2ea      	uxtb	r2, r5
    46fe:	bf08      	it	eq
    4700:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    4702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return start_playback(p_instance, p_cb, flags,
    4706:	f010 bd73 	b.w	151f0 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    470a:	2210      	movs	r2, #16
    470c:	e7f1      	b.n	46f2 <nrfx_pwm_simple_playback+0x5e>
    470e:	bf00      	nop
    4710:	20009cec 	.word	0x20009cec

00004714 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4714:	4b08      	ldr	r3, [pc, #32]	; (4738 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4716:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4718:	210c      	movs	r1, #12
    471a:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    471e:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4720:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4722:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    4726:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4728:	b919      	cbnz	r1, 4732 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    472a:	1e98      	subs	r0, r3, #2
    472c:	bf18      	it	ne
    472e:	2001      	movne	r0, #1
    4730:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4732:	2001      	movs	r0, #1
    4734:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4736:	4770      	bx	lr
    4738:	20009cec 	.word	0x20009cec

0000473c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    473e:	4b09      	ldr	r3, [pc, #36]	; (4764 <z_sys_init_run_level+0x28>)
    4740:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4744:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    4746:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4748:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    474c:	42a6      	cmp	r6, r4
    474e:	d800      	bhi.n	4752 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    4750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    4752:	e9d4 3500 	ldrd	r3, r5, [r4]
    4756:	4628      	mov	r0, r5
    4758:	4798      	blx	r3
		if (retval != 0) {
    475a:	b108      	cbz	r0, 4760 <z_sys_init_run_level+0x24>
			if (dev) {
    475c:	b105      	cbz	r5, 4760 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    475e:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4760:	3408      	adds	r4, #8
    4762:	e7f3      	b.n	474c <z_sys_init_run_level+0x10>
    4764:	000256a0 	.word	0x000256a0

00004768 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    4768:	4b0f      	ldr	r3, [pc, #60]	; (47a8 <z_impl_device_get_binding+0x40>)
{
    476a:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    476c:	4c0f      	ldr	r4, [pc, #60]	; (47ac <z_impl_device_get_binding+0x44>)
{
    476e:	4605      	mov	r5, r0
    4770:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    4772:	429c      	cmp	r4, r3
    4774:	d104      	bne.n	4780 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    4776:	4c0d      	ldr	r4, [pc, #52]	; (47ac <z_impl_device_get_binding+0x44>)
    4778:	42b4      	cmp	r4, r6
    477a:	d108      	bne.n	478e <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    477c:	2400      	movs	r4, #0
    477e:	e010      	b.n	47a2 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    4780:	68a2      	ldr	r2, [r4, #8]
    4782:	b112      	cbz	r2, 478a <z_impl_device_get_binding+0x22>
    4784:	6822      	ldr	r2, [r4, #0]
    4786:	42aa      	cmp	r2, r5
    4788:	d00b      	beq.n	47a2 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    478a:	3410      	adds	r4, #16
    478c:	e7f1      	b.n	4772 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    478e:	68a3      	ldr	r3, [r4, #8]
    4790:	b90b      	cbnz	r3, 4796 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4792:	3410      	adds	r4, #16
    4794:	e7f0      	b.n	4778 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    4796:	6821      	ldr	r1, [r4, #0]
    4798:	4628      	mov	r0, r5
    479a:	f7fc fe25 	bl	13e8 <strcmp>
		if ((dev->driver_api != NULL) &&
    479e:	2800      	cmp	r0, #0
    47a0:	d1f7      	bne.n	4792 <z_impl_device_get_binding+0x2a>
}
    47a2:	4620      	mov	r0, r4
    47a4:	bd70      	pop	{r4, r5, r6, pc}
    47a6:	bf00      	nop
    47a8:	20000810 	.word	0x20000810
    47ac:	20000790 	.word	0x20000790

000047b0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    47b0:	4b01      	ldr	r3, [pc, #4]	; (47b8 <z_impl_z_errno+0x8>)
    47b2:	6898      	ldr	r0, [r3, #8]
}
    47b4:	305c      	adds	r0, #92	; 0x5c
    47b6:	4770      	bx	lr
    47b8:	20009de0 	.word	0x20009de0

000047bc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    47bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    47c0:	4605      	mov	r5, r0
    47c2:	460f      	mov	r7, r1
	__asm__ volatile(
    47c4:	f04f 0320 	mov.w	r3, #32
    47c8:	f3ef 8811 	mrs	r8, BASEPRI
    47cc:	f383 8811 	msr	BASEPRI, r3
    47d0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    47d4:	f000 fdc6 	bl	5364 <z_impl_k_current_get>
    47d8:	4c21      	ldr	r4, [pc, #132]	; (4860 <z_fatal_error+0xa4>)
    47da:	4b22      	ldr	r3, [pc, #136]	; (4864 <z_fatal_error+0xa8>)
    47dc:	1ae4      	subs	r4, r4, r3
    47de:	2d04      	cmp	r5, #4
    47e0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    47e4:	bf96      	itet	ls
    47e6:	4a20      	ldrls	r2, [pc, #128]	; (4868 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    47e8:	4a20      	ldrhi	r2, [pc, #128]	; (486c <z_fatal_error+0xb0>)
    47ea:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    47ee:	01a4      	lsls	r4, r4, #6
    47f0:	f044 0301 	orr.w	r3, r4, #1
    47f4:	4606      	mov	r6, r0
    47f6:	f8ad 3000 	strh.w	r3, [sp]
    47fa:	481d      	ldr	r0, [pc, #116]	; (4870 <z_fatal_error+0xb4>)
    47fc:	2300      	movs	r3, #0
    47fe:	4629      	mov	r1, r5
    4800:	f00f ff84 	bl	1470c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4804:	b147      	cbz	r7, 4818 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4806:	69fb      	ldr	r3, [r7, #28]
    4808:	f3c3 0308 	ubfx	r3, r3, #0, #9
    480c:	b123      	cbz	r3, 4818 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    480e:	4819      	ldr	r0, [pc, #100]	; (4874 <z_fatal_error+0xb8>)
    4810:	f044 0101 	orr.w	r1, r4, #1
    4814:	f00f ff3b 	bl	1468e <log_0>
	const char *thread_name = k_thread_name_get(thread);
    4818:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    481a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
    481e:	f010 fe49 	bl	154b4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    4822:	b1d0      	cbz	r0, 485a <z_fatal_error+0x9e>
    4824:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    4826:	4b14      	ldr	r3, [pc, #80]	; (4878 <z_fatal_error+0xbc>)
    4828:	2a00      	cmp	r2, #0
    482a:	bf08      	it	eq
    482c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    482e:	f7fd fb73 	bl	1f18 <log_strdup>
    4832:	4623      	mov	r3, r4
    4834:	4602      	mov	r2, r0
    4836:	4631      	mov	r1, r6
    4838:	4810      	ldr	r0, [pc, #64]	; (487c <z_fatal_error+0xc0>)
    483a:	f00f ff4e 	bl	146da <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    483e:	4639      	mov	r1, r7
    4840:	4628      	mov	r0, r5
    4842:	f7ff fd53 	bl	42ec <k_sys_fatal_error_handler>
	__asm__ volatile(
    4846:	f388 8811 	msr	BASEPRI, r8
    484a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    484e:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4850:	b002      	add	sp, #8
    4852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4856:	f7fe beab 	b.w	35b0 <z_impl_k_thread_abort>
		thread_name = "unknown";
    485a:	4807      	ldr	r0, [pc, #28]	; (4878 <z_fatal_error+0xbc>)
    485c:	e7e7      	b.n	482e <z_fatal_error+0x72>
    485e:	bf00      	nop
    4860:	0001ebe8 	.word	0x0001ebe8
    4864:	0001ebc8 	.word	0x0001ebc8
    4868:	000256b8 	.word	0x000256b8
    486c:	00026666 	.word	0x00026666
    4870:	0002667c 	.word	0x0002667c
    4874:	000266a4 	.word	0x000266a4
    4878:	00026674 	.word	0x00026674
    487c:	000266c5 	.word	0x000266c5

00004880 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    4880:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    4882:	4d0b      	ldr	r5, [pc, #44]	; (48b0 <idle+0x30>)
	__asm__ volatile(
    4884:	f04f 0220 	mov.w	r2, #32
    4888:	f3ef 8311 	mrs	r3, BASEPRI
    488c:	f382 8811 	msr	BASEPRI, r2
    4890:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    4894:	f010 fe26 	bl	154e4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    4898:	2101      	movs	r1, #1
    489a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    489c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    489e:	bfd8      	it	le
    48a0:	4608      	movle	r0, r1
    48a2:	f010 fe2f 	bl	15504 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    48a6:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    48a8:	f7fe fb9a 	bl	2fe0 <arch_cpu_idle>
}
    48ac:	e7ea      	b.n	4884 <idle+0x4>
    48ae:	bf00      	nop
    48b0:	20009de0 	.word	0x20009de0

000048b4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    48b4:	4802      	ldr	r0, [pc, #8]	; (48c0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    48b6:	4a03      	ldr	r2, [pc, #12]	; (48c4 <z_bss_zero+0x10>)
    48b8:	2100      	movs	r1, #0
    48ba:	1a12      	subs	r2, r2, r0
    48bc:	f019 bebd 	b.w	1e63a <memset>
    48c0:	200008c0 	.word	0x200008c0
    48c4:	2000eae0 	.word	0x2000eae0

000048c8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    48c8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    48ca:	4806      	ldr	r0, [pc, #24]	; (48e4 <z_data_copy+0x1c>)
    48cc:	4a06      	ldr	r2, [pc, #24]	; (48e8 <z_data_copy+0x20>)
    48ce:	4907      	ldr	r1, [pc, #28]	; (48ec <z_data_copy+0x24>)
    48d0:	1a12      	subs	r2, r2, r0
    48d2:	f019 fea4 	bl	1e61e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    48d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48da:	4a05      	ldr	r2, [pc, #20]	; (48f0 <z_data_copy+0x28>)
    48dc:	4905      	ldr	r1, [pc, #20]	; (48f4 <z_data_copy+0x2c>)
    48de:	4806      	ldr	r0, [pc, #24]	; (48f8 <z_data_copy+0x30>)
    48e0:	f019 be9d 	b.w	1e61e <memcpy>
    48e4:	20000000 	.word	0x20000000
    48e8:	200008c0 	.word	0x200008c0
    48ec:	0002955c 	.word	0x0002955c
    48f0:	00000000 	.word	0x00000000
    48f4:	0002955c 	.word	0x0002955c
    48f8:	20000000 	.word	0x20000000

000048fc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    48fc:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    48fe:	4b0e      	ldr	r3, [pc, #56]	; (4938 <bg_thread_main+0x3c>)
    4900:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4902:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4904:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4906:	f7ff ff19 	bl	473c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    490a:	4a0c      	ldr	r2, [pc, #48]	; (493c <bg_thread_main+0x40>)
    490c:	490c      	ldr	r1, [pc, #48]	; (4940 <bg_thread_main+0x44>)
    490e:	480d      	ldr	r0, [pc, #52]	; (4944 <bg_thread_main+0x48>)
    4910:	f00f fdb7 	bl	14482 <printk>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
    4914:	f7fd ffb8 	bl	2888 <__do_global_ctors_aux>
	__do_init_array_aux();
    4918:	f7fd ffa8 	bl	286c <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    491c:	2003      	movs	r0, #3
    491e:	f7ff ff0d 	bl	473c <z_sys_init_run_level>

	z_init_static_threads();
    4922:	f000 fdc1 	bl	54a8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4926:	f00f fd73 	bl	14410 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    492a:	4a07      	ldr	r2, [pc, #28]	; (4948 <bg_thread_main+0x4c>)
    492c:	7b13      	ldrb	r3, [r2, #12]
    492e:	f023 0301 	bic.w	r3, r3, #1
    4932:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4934:	bd08      	pop	{r3, pc}
    4936:	bf00      	nop
    4938:	2000eacb 	.word	0x2000eacb
    493c:	0002604b 	.word	0x0002604b
    4940:	00026727 	.word	0x00026727
    4944:	00026737 	.word	0x00026737
    4948:	20009d6c 	.word	0x20009d6c

0000494c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    494c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    4950:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4952:	f7fd fa29 	bl	1da8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    4956:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4a4c <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    495a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    495e:	4d34      	ldr	r5, [pc, #208]	; (4a30 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    4960:	4e34      	ldr	r6, [pc, #208]	; (4a34 <z_cstart+0xe8>)
    4962:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
    4964:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4a50 <z_cstart+0x104>
    4968:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 4a54 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
    496c:	4f32      	ldr	r7, [pc, #200]	; (4a38 <z_cstart+0xec>)
    496e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4972:	2400      	movs	r4, #0
    4974:	616b      	str	r3, [r5, #20]
    4976:	23e0      	movs	r3, #224	; 0xe0
    4978:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    497c:	77ec      	strb	r4, [r5, #31]
    497e:	762c      	strb	r4, [r5, #24]
    4980:	766c      	strb	r4, [r5, #25]
    4982:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4986:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    498a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    498c:	f7fe fdee 	bl	356c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4990:	f7fe fb20 	bl	2fd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4998:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    499a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    499c:	4d27      	ldr	r5, [pc, #156]	; (4a3c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    499e:	f240 1301 	movw	r3, #257	; 0x101
    49a2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    49a6:	ab07      	add	r3, sp, #28
    49a8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    49aa:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    49ac:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    49b0:	f7ff fec4 	bl	473c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    49b4:	2001      	movs	r0, #1
    49b6:	f7ff fec1 	bl	473c <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    49ba:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    49be:	f000 fc57 	bl	5270 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    49c2:	4b1f      	ldr	r3, [pc, #124]	; (4a40 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    49c4:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    49c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    49ca:	4641      	mov	r1, r8
    49cc:	9305      	str	r3, [sp, #20]
    49ce:	4630      	mov	r0, r6
    49d0:	4653      	mov	r3, sl
    49d2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    49d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    49da:	9400      	str	r4, [sp, #0]
    49dc:	f000 fd12 	bl	5404 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    49e0:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    49e2:	4630      	mov	r0, r6
    49e4:	f023 0304 	bic.w	r3, r3, #4
    49e8:	7373      	strb	r3, [r6, #13]
    49ea:	f010 fcb5 	bl	15358 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    49ee:	230f      	movs	r3, #15
    49f0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    49f4:	4913      	ldr	r1, [pc, #76]	; (4a44 <z_cstart+0xf8>)
    49f6:	4b14      	ldr	r3, [pc, #80]	; (4a48 <z_cstart+0xfc>)
    49f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    49fc:	4638      	mov	r0, r7
    49fe:	e9cd b404 	strd	fp, r4, [sp, #16]
    4a02:	e9cd 4400 	strd	r4, r4, [sp]
    4a06:	f000 fcfd 	bl	5404 <z_setup_new_thread>
    4a0a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4a0c:	60ef      	str	r7, [r5, #12]
    4a0e:	f023 0304 	bic.w	r3, r3, #4
    4a12:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4a14:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    4a18:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    4a1c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    4a1e:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    4a22:	4653      	mov	r3, sl
    4a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    4a28:	4641      	mov	r1, r8
    4a2a:	4630      	mov	r0, r6
    4a2c:	f7fe fab4 	bl	2f98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4a30:	e000ed00 	.word	0xe000ed00
    4a34:	20009d6c 	.word	0x20009d6c
    4a38:	20009cf8 	.word	0x20009cf8
    4a3c:	20009de0 	.word	0x20009de0
    4a40:	0002675e 	.word	0x0002675e
    4a44:	20010de0 	.word	0x20010de0
    4a48:	00004881 	.word	0x00004881
    4a4c:	20011720 	.word	0x20011720
    4a50:	000048fd 	.word	0x000048fd
    4a54:	2000ede0 	.word	0x2000ede0

00004a58 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    4a58:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a5a:	4b0e      	ldr	r3, [pc, #56]	; (4a94 <init_mem_slab_module+0x3c>)
    4a5c:	4c0e      	ldr	r4, [pc, #56]	; (4a98 <init_mem_slab_module+0x40>)
    4a5e:	42a3      	cmp	r3, r4
    4a60:	d301      	bcc.n	4a66 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    4a62:	2000      	movs	r0, #0
	return rc;
}
    4a64:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4a66:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4a6a:	ea41 0200 	orr.w	r2, r1, r0
    4a6e:	f012 0203 	ands.w	r2, r2, #3
    4a72:	d10b      	bne.n	4a8c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4a74:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4a76:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a78:	42aa      	cmp	r2, r5
    4a7a:	d101      	bne.n	4a80 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a7c:	331c      	adds	r3, #28
    4a7e:	e7ee      	b.n	4a5e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4a80:	695e      	ldr	r6, [r3, #20]
    4a82:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a84:	3201      	adds	r2, #1
		slab->free_list = p;
    4a86:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4a88:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4a8a:	e7f5      	b.n	4a78 <init_mem_slab_module+0x20>
		return -EINVAL;
    4a8c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4a90:	e7e8      	b.n	4a64 <init_mem_slab_module+0xc>
    4a92:	bf00      	nop
    4a94:	20000810 	.word	0x20000810
    4a98:	20000810 	.word	0x20000810

00004a9c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4a9c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4a9e:	460c      	mov	r4, r1
    4aa0:	4616      	mov	r6, r2
    4aa2:	461f      	mov	r7, r3
    4aa4:	f04f 0320 	mov.w	r3, #32
    4aa8:	f3ef 8111 	mrs	r1, BASEPRI
    4aac:	f383 8811 	msr	BASEPRI, r3
    4ab0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    4ab4:	6943      	ldr	r3, [r0, #20]
    4ab6:	b15b      	cbz	r3, 4ad0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    4ab8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4aba:	681b      	ldr	r3, [r3, #0]
    4abc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4abe:	6983      	ldr	r3, [r0, #24]
    4ac0:	3301      	adds	r3, #1
    4ac2:	6183      	str	r3, [r0, #24]
		result = 0;
    4ac4:	2000      	movs	r0, #0
	__asm__ volatile(
    4ac6:	f381 8811 	msr	BASEPRI, r1
    4aca:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    4ace:	e011      	b.n	4af4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4ad0:	ea56 0207 	orrs.w	r2, r6, r7
    4ad4:	d103      	bne.n	4ade <k_mem_slab_alloc+0x42>
		*mem = NULL;
    4ad6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4ad8:	f06f 000b 	mvn.w	r0, #11
    4adc:	e7f3      	b.n	4ac6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    4ade:	4602      	mov	r2, r0
    4ae0:	e9cd 6700 	strd	r6, r7, [sp]
    4ae4:	4804      	ldr	r0, [pc, #16]	; (4af8 <k_mem_slab_alloc+0x5c>)
    4ae6:	f000 fb6b 	bl	51c0 <z_pend_curr>
		if (result == 0) {
    4aea:	b918      	cbnz	r0, 4af4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    4aec:	4b03      	ldr	r3, [pc, #12]	; (4afc <k_mem_slab_alloc+0x60>)
    4aee:	689b      	ldr	r3, [r3, #8]
    4af0:	695b      	ldr	r3, [r3, #20]
    4af2:	6023      	str	r3, [r4, #0]
}
    4af4:	b002      	add	sp, #8
    4af6:	bdd0      	pop	{r4, r6, r7, pc}
    4af8:	2000eacc 	.word	0x2000eacc
    4afc:	20009de0 	.word	0x20009de0

00004b00 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4b00:	b570      	push	{r4, r5, r6, lr}
    4b02:	4604      	mov	r4, r0
    4b04:	460d      	mov	r5, r1
	__asm__ volatile(
    4b06:	f04f 0320 	mov.w	r3, #32
    4b0a:	f3ef 8611 	mrs	r6, BASEPRI
    4b0e:	f383 8811 	msr	BASEPRI, r3
    4b12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4b16:	f010 fc95 	bl	15444 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    4b1a:	b158      	cbz	r0, 4b34 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4b1c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4b1e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4b20:	2100      	movs	r1, #0
    4b22:	6701      	str	r1, [r0, #112]	; 0x70
		z_ready_thread(pending_thread);
    4b24:	f010 fc18 	bl	15358 <z_ready_thread>
		z_reschedule(&lock, key);
    4b28:	4631      	mov	r1, r6
    4b2a:	4809      	ldr	r0, [pc, #36]	; (4b50 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    4b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    4b30:	f010 bbe7 	b.w	15302 <z_reschedule>
		**(char ***)mem = slab->free_list;
    4b34:	682b      	ldr	r3, [r5, #0]
    4b36:	6962      	ldr	r2, [r4, #20]
    4b38:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    4b3a:	682b      	ldr	r3, [r5, #0]
    4b3c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    4b3e:	69a3      	ldr	r3, [r4, #24]
    4b40:	3b01      	subs	r3, #1
    4b42:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4b44:	f386 8811 	msr	BASEPRI, r6
    4b48:	f3bf 8f6f 	isb	sy
}
    4b4c:	bd70      	pop	{r4, r5, r6, pc}
    4b4e:	bf00      	nop
    4b50:	2000eacc 	.word	0x2000eacc

00004b54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b58:	4604      	mov	r4, r0
    4b5a:	4616      	mov	r6, r2
    4b5c:	461f      	mov	r7, r3
	__asm__ volatile(
    4b5e:	f04f 0320 	mov.w	r3, #32
    4b62:	f3ef 8811 	mrs	r8, BASEPRI
    4b66:	f383 8811 	msr	BASEPRI, r3
    4b6a:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4b6e:	68c3      	ldr	r3, [r0, #12]
    4b70:	4a32      	ldr	r2, [pc, #200]	; (4c3c <z_impl_k_mutex_lock+0xe8>)
    4b72:	b16b      	cbz	r3, 4b90 <z_impl_k_mutex_lock+0x3c>
    4b74:	6880      	ldr	r0, [r0, #8]
    4b76:	6891      	ldr	r1, [r2, #8]
    4b78:	4288      	cmp	r0, r1
    4b7a:	d019      	beq.n	4bb0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4b7c:	ea56 0307 	orrs.w	r3, r6, r7
    4b80:	d118      	bne.n	4bb4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4b82:	f388 8811 	msr	BASEPRI, r8
    4b86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    4b8a:	f06f 000f 	mvn.w	r0, #15
    4b8e:	e00c      	b.n	4baa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4b90:	6891      	ldr	r1, [r2, #8]
    4b92:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4b96:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4b98:	3301      	adds	r3, #1
    4b9a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4b9c:	6893      	ldr	r3, [r2, #8]
    4b9e:	60a3      	str	r3, [r4, #8]
    4ba0:	f388 8811 	msr	BASEPRI, r8
    4ba4:	f3bf 8f6f 	isb	sy
		return 0;
    4ba8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    4baa:	b002      	add	sp, #8
    4bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4bb0:	6921      	ldr	r1, [r4, #16]
    4bb2:	e7f0      	b.n	4b96 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4bb4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4bb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4bbc:	4299      	cmp	r1, r3
    4bbe:	bfa8      	it	ge
    4bc0:	4619      	movge	r1, r3
    4bc2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4bc6:	428b      	cmp	r3, r1
    4bc8:	dd2c      	ble.n	4c24 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    4bca:	f000 fb0d 	bl	51e8 <z_set_prio>
    4bce:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4bd0:	e9cd 6700 	strd	r6, r7, [sp]
    4bd4:	481a      	ldr	r0, [pc, #104]	; (4c40 <z_impl_k_mutex_lock+0xec>)
    4bd6:	4622      	mov	r2, r4
    4bd8:	4641      	mov	r1, r8
    4bda:	f000 faf1 	bl	51c0 <z_pend_curr>
	if (got_mutex == 0) {
    4bde:	2800      	cmp	r0, #0
    4be0:	d0e3      	beq.n	4baa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4be2:	f04f 0320 	mov.w	r3, #32
    4be6:	f3ef 8611 	mrs	r6, BASEPRI
    4bea:	f383 8811 	msr	BASEPRI, r3
    4bee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4bf2:	6823      	ldr	r3, [r4, #0]
    4bf4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bf6:	429c      	cmp	r4, r3
    4bf8:	d007      	beq.n	4c0a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4bfa:	b133      	cbz	r3, 4c0a <z_impl_k_mutex_lock+0xb6>
    4bfc:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4c00:	4299      	cmp	r1, r3
    4c02:	bfa8      	it	ge
    4c04:	4619      	movge	r1, r3
    4c06:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4c0a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4c0c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c10:	4299      	cmp	r1, r3
    4c12:	d109      	bne.n	4c28 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    4c14:	b16d      	cbz	r5, 4c32 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4c16:	480a      	ldr	r0, [pc, #40]	; (4c40 <z_impl_k_mutex_lock+0xec>)
    4c18:	4631      	mov	r1, r6
    4c1a:	f010 fb72 	bl	15302 <z_reschedule>
	return -EAGAIN;
    4c1e:	f06f 000a 	mvn.w	r0, #10
    4c22:	e7c2      	b.n	4baa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4c24:	2500      	movs	r5, #0
    4c26:	e7d3      	b.n	4bd0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    4c28:	f000 fade 	bl	51e8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4c2c:	2800      	cmp	r0, #0
    4c2e:	d1f2      	bne.n	4c16 <z_impl_k_mutex_lock+0xc2>
    4c30:	e7f0      	b.n	4c14 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    4c32:	f386 8811 	msr	BASEPRI, r6
    4c36:	f3bf 8f6f 	isb	sy
    4c3a:	e7f0      	b.n	4c1e <z_impl_k_mutex_lock+0xca>
    4c3c:	20009de0 	.word	0x20009de0
    4c40:	2000eacd 	.word	0x2000eacd

00004c44 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4c44:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    4c46:	6883      	ldr	r3, [r0, #8]
{
    4c48:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d036      	beq.n	4cbc <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4c4e:	4a1e      	ldr	r2, [pc, #120]	; (4cc8 <z_impl_k_mutex_unlock+0x84>)
    4c50:	6892      	ldr	r2, [r2, #8]
    4c52:	4293      	cmp	r3, r2
    4c54:	d135      	bne.n	4cc2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    4c56:	7bda      	ldrb	r2, [r3, #15]
    4c58:	3a01      	subs	r2, #1
    4c5a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4c5c:	68c3      	ldr	r3, [r0, #12]
    4c5e:	2b01      	cmp	r3, #1
    4c60:	d005      	beq.n	4c6e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4c62:	3b01      	subs	r3, #1
    4c64:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4c66:	f000 f8c3 	bl	4df0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    4c6a:	2000      	movs	r0, #0
}
    4c6c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c6e:	f04f 0320 	mov.w	r3, #32
    4c72:	f3ef 8511 	mrs	r5, BASEPRI
    4c76:	f383 8811 	msr	BASEPRI, r3
    4c7a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c7e:	6901      	ldr	r1, [r0, #16]
    4c80:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4c82:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c86:	4299      	cmp	r1, r3
    4c88:	d001      	beq.n	4c8e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    4c8a:	f000 faad 	bl	51e8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c8e:	4620      	mov	r0, r4
    4c90:	f010 fbd8 	bl	15444 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c94:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c96:	b158      	cbz	r0, 4cb0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c98:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c9c:	6122      	str	r2, [r4, #16]
    4c9e:	2200      	movs	r2, #0
    4ca0:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    4ca2:	f010 fb59 	bl	15358 <z_ready_thread>
		z_reschedule(&lock, key);
    4ca6:	4809      	ldr	r0, [pc, #36]	; (4ccc <z_impl_k_mutex_unlock+0x88>)
    4ca8:	4629      	mov	r1, r5
    4caa:	f010 fb2a 	bl	15302 <z_reschedule>
    4cae:	e7da      	b.n	4c66 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4cb0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4cb2:	f385 8811 	msr	BASEPRI, r5
    4cb6:	f3bf 8f6f 	isb	sy
    4cba:	e7d4      	b.n	4c66 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4cbc:	f06f 0015 	mvn.w	r0, #21
    4cc0:	e7d4      	b.n	4c6c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    4cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cc6:	e7d1      	b.n	4c6c <z_impl_k_mutex_unlock+0x28>
    4cc8:	20009de0 	.word	0x20009de0
    4ccc:	2000eacd 	.word	0x2000eacd

00004cd0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4cd0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4cd2:	4c08      	ldr	r4, [pc, #32]	; (4cf4 <z_reset_time_slice+0x24>)
    4cd4:	6823      	ldr	r3, [r4, #0]
    4cd6:	b15b      	cbz	r3, 4cf0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4cd8:	f7fd ff46 	bl	2b68 <z_clock_elapsed>
    4cdc:	6822      	ldr	r2, [r4, #0]
    4cde:	4906      	ldr	r1, [pc, #24]	; (4cf8 <z_reset_time_slice+0x28>)
    4ce0:	4410      	add	r0, r2
    4ce2:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    4ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    4ce8:	2100      	movs	r1, #0
    4cea:	4610      	mov	r0, r2
    4cec:	f010 bc0a 	b.w	15504 <z_set_timeout_expiry>
}
    4cf0:	bd10      	pop	{r4, pc}
    4cf2:	bf00      	nop
    4cf4:	20009e18 	.word	0x20009e18
    4cf8:	20009de0 	.word	0x20009de0

00004cfc <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    4cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cfe:	460c      	mov	r4, r1
	__asm__ volatile(
    4d00:	f04f 0320 	mov.w	r3, #32
    4d04:	f3ef 8511 	mrs	r5, BASEPRI
    4d08:	f383 8811 	msr	BASEPRI, r3
    4d0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4d10:	4b0d      	ldr	r3, [pc, #52]	; (4d48 <k_sched_time_slice_set+0x4c>)
			return (u32_t)((t * to_hz + off) / from_hz);
    4d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4d16:	f240 36e7 	movw	r6, #999	; 0x3e7
    4d1a:	2700      	movs	r7, #0
    4d1c:	fbe1 6700 	umlal	r6, r7, r1, r0
    4d20:	2200      	movs	r2, #0
    4d22:	611a      	str	r2, [r3, #16]
    4d24:	4630      	mov	r0, r6
    4d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4d2a:	2300      	movs	r3, #0
    4d2c:	4639      	mov	r1, r7
    4d2e:	f7fb fa37 	bl	1a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4d32:	4b06      	ldr	r3, [pc, #24]	; (4d4c <k_sched_time_slice_set+0x50>)
    4d34:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4d36:	4b06      	ldr	r3, [pc, #24]	; (4d50 <k_sched_time_slice_set+0x54>)
    4d38:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    4d3a:	f7ff ffc9 	bl	4cd0 <z_reset_time_slice>
	__asm__ volatile(
    4d3e:	f385 8811 	msr	BASEPRI, r5
    4d42:	f3bf 8f6f 	isb	sy
	}
}
    4d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d48:	20009de0 	.word	0x20009de0
    4d4c:	20009e18 	.word	0x20009e18
    4d50:	20009e14 	.word	0x20009e14

00004d54 <k_sched_lock>:
	__asm__ volatile(
    4d54:	f04f 0320 	mov.w	r3, #32
    4d58:	f3ef 8111 	mrs	r1, BASEPRI
    4d5c:	f383 8811 	msr	BASEPRI, r3
    4d60:	f3bf 8f6f 	isb	sy
    4d64:	4b04      	ldr	r3, [pc, #16]	; (4d78 <k_sched_lock+0x24>)
    4d66:	689a      	ldr	r2, [r3, #8]
    4d68:	7bd3      	ldrb	r3, [r2, #15]
    4d6a:	3b01      	subs	r3, #1
    4d6c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4d6e:	f381 8811 	msr	BASEPRI, r1
    4d72:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4d76:	4770      	bx	lr
    4d78:	20009de0 	.word	0x20009de0

00004d7c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4d7c:	4b09      	ldr	r3, [pc, #36]	; (4da4 <z_priq_dumb_remove+0x28>)
    4d7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4d82:	4282      	cmp	r2, r0
    4d84:	d105      	bne.n	4d92 <z_priq_dumb_remove+0x16>
    4d86:	689b      	ldr	r3, [r3, #8]
    4d88:	428b      	cmp	r3, r1
    4d8a:	d102      	bne.n	4d92 <z_priq_dumb_remove+0x16>
    4d8c:	7b4b      	ldrb	r3, [r1, #13]
    4d8e:	06db      	lsls	r3, r3, #27
    4d90:	d106      	bne.n	4da0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4d92:	e9d1 3200 	ldrd	r3, r2, [r1]
    4d96:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4d98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4d9a:	2300      	movs	r3, #0
	node->prev = NULL;
    4d9c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4da0:	4770      	bx	lr
    4da2:	bf00      	nop
    4da4:	20009de0 	.word	0x20009de0

00004da8 <update_cache>:
{
    4da8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4daa:	4c10      	ldr	r4, [pc, #64]	; (4dec <update_cache+0x44>)
{
    4dac:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4dae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4db2:	f010 fac7 	bl	15344 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4db6:	68a3      	ldr	r3, [r4, #8]
    4db8:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4dba:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4dbc:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    4dbe:	bf44      	itt	mi
    4dc0:	f041 0108 	orrmi.w	r1, r1, #8
    4dc4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4dc6:	b905      	cbnz	r5, 4dca <update_cache+0x22>
    4dc8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    4dca:	b94e      	cbnz	r6, 4de0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    4dcc:	7b5a      	ldrb	r2, [r3, #13]
    4dce:	06d2      	lsls	r2, r2, #27
    4dd0:	d106      	bne.n	4de0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4dd2:	69aa      	ldr	r2, [r5, #24]
    4dd4:	b922      	cbnz	r2, 4de0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    4dd6:	89da      	ldrh	r2, [r3, #14]
    4dd8:	2a7f      	cmp	r2, #127	; 0x7f
    4dda:	d901      	bls.n	4de0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    4ddc:	6263      	str	r3, [r4, #36]	; 0x24
}
    4dde:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    4de0:	42ab      	cmp	r3, r5
    4de2:	d001      	beq.n	4de8 <update_cache+0x40>
			z_reset_time_slice();
    4de4:	f7ff ff74 	bl	4cd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4de8:	6265      	str	r5, [r4, #36]	; 0x24
}
    4dea:	e7f8      	b.n	4dde <update_cache+0x36>
    4dec:	20009de0 	.word	0x20009de0

00004df0 <k_sched_unlock>:
{
    4df0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4df2:	f04f 0320 	mov.w	r3, #32
    4df6:	f3ef 8411 	mrs	r4, BASEPRI
    4dfa:	f383 8811 	msr	BASEPRI, r3
    4dfe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4e02:	4b08      	ldr	r3, [pc, #32]	; (4e24 <k_sched_unlock+0x34>)
    4e04:	689a      	ldr	r2, [r3, #8]
    4e06:	7bd3      	ldrb	r3, [r2, #15]
    4e08:	3301      	adds	r3, #1
    4e0a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4e0c:	2000      	movs	r0, #0
    4e0e:	f7ff ffcb 	bl	4da8 <update_cache>
	__asm__ volatile(
    4e12:	f384 8811 	msr	BASEPRI, r4
    4e16:	f3bf 8f6f 	isb	sy
}
    4e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4e1e:	f010 ba87 	b.w	15330 <z_reschedule_unlocked>
    4e22:	bf00      	nop
    4e24:	20009de0 	.word	0x20009de0

00004e28 <ready_thread>:
{
    4e28:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4e2a:	7b43      	ldrb	r3, [r0, #13]
    4e2c:	06db      	lsls	r3, r3, #27
    4e2e:	d12a      	bne.n	4e86 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4e30:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    4e32:	bb43      	cbnz	r3, 4e86 <ready_thread+0x5e>
	return list->head == list;
    4e34:	4a15      	ldr	r2, [pc, #84]	; (4e8c <ready_thread+0x64>)
    4e36:	4611      	mov	r1, r2
    4e38:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e3c:	428c      	cmp	r4, r1
    4e3e:	bf18      	it	ne
    4e40:	4623      	movne	r3, r4
    4e42:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4e44:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    4e46:	bf38      	it	cc
    4e48:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e4a:	b1b3      	cbz	r3, 4e7a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    4e4c:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4e50:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4e54:	42ae      	cmp	r6, r5
    4e56:	db03      	blt.n	4e60 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    4e58:	42a3      	cmp	r3, r4
    4e5a:	d00e      	beq.n	4e7a <ready_thread+0x52>
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	e7f4      	b.n	4e4a <ready_thread+0x22>
	node->prev = successor->prev;
    4e60:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4e62:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    4e66:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4e68:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    4e6a:	7b43      	ldrb	r3, [r0, #13]
    4e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4e70:	7343      	strb	r3, [r0, #13]
}
    4e72:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4e74:	2000      	movs	r0, #0
    4e76:	f7ff bf97 	b.w	4da8 <update_cache>
	node->prev = list->tail;
    4e7a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    4e7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4e80:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4e82:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    4e84:	e7f1      	b.n	4e6a <ready_thread+0x42>
}
    4e86:	bc70      	pop	{r4, r5, r6}
    4e88:	4770      	bx	lr
    4e8a:	bf00      	nop
    4e8c:	20009de0 	.word	0x20009de0

00004e90 <z_sched_start>:
{
    4e90:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e92:	f04f 0220 	mov.w	r2, #32
    4e96:	f3ef 8411 	mrs	r4, BASEPRI
    4e9a:	f382 8811 	msr	BASEPRI, r2
    4e9e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4ea2:	7b42      	ldrb	r2, [r0, #13]
    4ea4:	0751      	lsls	r1, r2, #29
    4ea6:	d404      	bmi.n	4eb2 <z_sched_start+0x22>
	__asm__ volatile(
    4ea8:	f384 8811 	msr	BASEPRI, r4
    4eac:	f3bf 8f6f 	isb	sy
}
    4eb0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4eb2:	f022 0204 	bic.w	r2, r2, #4
    4eb6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4eb8:	f7ff ffb6 	bl	4e28 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4ebc:	4621      	mov	r1, r4
    4ebe:	4802      	ldr	r0, [pc, #8]	; (4ec8 <z_sched_start+0x38>)
}
    4ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4ec4:	f010 ba1d 	b.w	15302 <z_reschedule>
    4ec8:	2000eace 	.word	0x2000eace

00004ecc <z_move_thread_to_end_of_prio_q>:
{
    4ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ece:	4601      	mov	r1, r0
	__asm__ volatile(
    4ed0:	f04f 0320 	mov.w	r3, #32
    4ed4:	f3ef 8411 	mrs	r4, BASEPRI
    4ed8:	f383 8811 	msr	BASEPRI, r3
    4edc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4ee0:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	da02      	bge.n	4eee <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4ee8:	4819      	ldr	r0, [pc, #100]	; (4f50 <z_move_thread_to_end_of_prio_q+0x84>)
    4eea:	f7ff ff47 	bl	4d7c <z_priq_dumb_remove>
	return list->head == list;
    4eee:	4a19      	ldr	r2, [pc, #100]	; (4f54 <z_move_thread_to_end_of_prio_q+0x88>)
    4ef0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ef2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    4ef4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ef8:	4283      	cmp	r3, r0
    4efa:	bf08      	it	eq
    4efc:	2300      	moveq	r3, #0
    4efe:	2b00      	cmp	r3, #0
    4f00:	bf38      	it	cc
    4f02:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f04:	b1eb      	cbz	r3, 4f42 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    4f06:	f991 700e 	ldrsb.w	r7, [r1, #14]
    4f0a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4f0e:	42b7      	cmp	r7, r6
    4f10:	db03      	blt.n	4f1a <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4f12:	429d      	cmp	r5, r3
    4f14:	d015      	beq.n	4f42 <z_move_thread_to_end_of_prio_q+0x76>
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	e7f4      	b.n	4f04 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    4f1a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    4f1c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    4f20:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4f22:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4f24:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    4f26:	6890      	ldr	r0, [r2, #8]
    4f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f2c:	734b      	strb	r3, [r1, #13]
    4f2e:	1a43      	subs	r3, r0, r1
    4f30:	4258      	negs	r0, r3
    4f32:	4158      	adcs	r0, r3
    4f34:	f7ff ff38 	bl	4da8 <update_cache>
	__asm__ volatile(
    4f38:	f384 8811 	msr	BASEPRI, r4
    4f3c:	f3bf 8f6f 	isb	sy
}
    4f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    4f42:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    4f46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4f48:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4f4a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    4f4c:	e7ea      	b.n	4f24 <z_move_thread_to_end_of_prio_q+0x58>
    4f4e:	bf00      	nop
    4f50:	20009e08 	.word	0x20009e08
    4f54:	20009de0 	.word	0x20009de0

00004f58 <z_time_slice>:
{
    4f58:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    4f5a:	4a15      	ldr	r2, [pc, #84]	; (4fb0 <z_time_slice+0x58>)
    4f5c:	4b15      	ldr	r3, [pc, #84]	; (4fb4 <z_time_slice+0x5c>)
    4f5e:	6814      	ldr	r4, [r2, #0]
{
    4f60:	4601      	mov	r1, r0
	if (pending_current == _current) {
    4f62:	6898      	ldr	r0, [r3, #8]
    4f64:	42a0      	cmp	r0, r4
    4f66:	461c      	mov	r4, r3
    4f68:	d103      	bne.n	4f72 <z_time_slice+0x1a>
}
    4f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    4f6e:	f7ff beaf 	b.w	4cd0 <z_reset_time_slice>
	pending_current = NULL;
    4f72:	2500      	movs	r5, #0
    4f74:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4f76:	4a10      	ldr	r2, [pc, #64]	; (4fb8 <z_time_slice+0x60>)
    4f78:	6812      	ldr	r2, [r2, #0]
    4f7a:	b1b2      	cbz	r2, 4faa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4f7c:	89c2      	ldrh	r2, [r0, #14]
    4f7e:	2a7f      	cmp	r2, #127	; 0x7f
    4f80:	d813      	bhi.n	4faa <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4f82:	4a0e      	ldr	r2, [pc, #56]	; (4fbc <z_time_slice+0x64>)
    4f84:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4f88:	6812      	ldr	r2, [r2, #0]
    4f8a:	4295      	cmp	r5, r2
    4f8c:	db0d      	blt.n	4faa <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    4f8e:	4a0c      	ldr	r2, [pc, #48]	; (4fc0 <z_time_slice+0x68>)
    4f90:	4290      	cmp	r0, r2
    4f92:	d00a      	beq.n	4faa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4f94:	6982      	ldr	r2, [r0, #24]
    4f96:	b942      	cbnz	r2, 4faa <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    4f98:	691a      	ldr	r2, [r3, #16]
    4f9a:	428a      	cmp	r2, r1
    4f9c:	dc02      	bgt.n	4fa4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    4f9e:	f7ff ff95 	bl	4ecc <z_move_thread_to_end_of_prio_q>
    4fa2:	e7e2      	b.n	4f6a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    4fa4:	1a52      	subs	r2, r2, r1
    4fa6:	611a      	str	r2, [r3, #16]
}
    4fa8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    4faa:	2300      	movs	r3, #0
    4fac:	6123      	str	r3, [r4, #16]
    4fae:	e7fb      	b.n	4fa8 <z_time_slice+0x50>
    4fb0:	20009e10 	.word	0x20009e10
    4fb4:	20009de0 	.word	0x20009de0
    4fb8:	20009e18 	.word	0x20009e18
    4fbc:	20009e14 	.word	0x20009e14
    4fc0:	20009cf8 	.word	0x20009cf8

00004fc4 <z_impl_k_thread_suspend>:
{
    4fc4:	b570      	push	{r4, r5, r6, lr}
    4fc6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4fc8:	3018      	adds	r0, #24
    4fca:	f010 fa75 	bl	154b8 <z_abort_timeout>
	__asm__ volatile(
    4fce:	f04f 0320 	mov.w	r3, #32
    4fd2:	f3ef 8611 	mrs	r6, BASEPRI
    4fd6:	f383 8811 	msr	BASEPRI, r3
    4fda:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4fde:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	da07      	bge.n	4ff6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4fe6:	480f      	ldr	r0, [pc, #60]	; (5024 <z_impl_k_thread_suspend+0x60>)
    4fe8:	4621      	mov	r1, r4
    4fea:	f7ff fec7 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4fee:	7b63      	ldrb	r3, [r4, #13]
    4ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ff4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4ff6:	4d0c      	ldr	r5, [pc, #48]	; (5028 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ff8:	7b63      	ldrb	r3, [r4, #13]
    4ffa:	68a8      	ldr	r0, [r5, #8]
    4ffc:	f043 0310 	orr.w	r3, r3, #16
    5000:	7363      	strb	r3, [r4, #13]
    5002:	1b03      	subs	r3, r0, r4
    5004:	4258      	negs	r0, r3
    5006:	4158      	adcs	r0, r3
    5008:	f7ff fece 	bl	4da8 <update_cache>
	__asm__ volatile(
    500c:	f386 8811 	msr	BASEPRI, r6
    5010:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5014:	68ab      	ldr	r3, [r5, #8]
    5016:	42a3      	cmp	r3, r4
    5018:	d103      	bne.n	5022 <z_impl_k_thread_suspend+0x5e>
}
    501a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    501e:	f010 b987 	b.w	15330 <z_reschedule_unlocked>
}
    5022:	bd70      	pop	{r4, r5, r6, pc}
    5024:	20009e08 	.word	0x20009e08
    5028:	20009de0 	.word	0x20009de0

0000502c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    502c:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5032:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    5034:	b103      	cbz	r3, 5038 <z_thread_single_abort+0xc>
		thread->fn_abort();
    5036:	4798      	blx	r3
    5038:	f104 0018 	add.w	r0, r4, #24
    503c:	f010 fa3c 	bl	154b8 <z_abort_timeout>
	__asm__ volatile(
    5040:	f04f 0320 	mov.w	r3, #32
    5044:	f3ef 8611 	mrs	r6, BASEPRI
    5048:	f383 8811 	msr	BASEPRI, r3
    504c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5050:	7b63      	ldrb	r3, [r4, #13]
    5052:	06d8      	lsls	r0, r3, #27
    5054:	d123      	bne.n	509e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    5056:	69a2      	ldr	r2, [r4, #24]
    5058:	bb0a      	cbnz	r2, 509e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    505a:	0619      	lsls	r1, r3, #24
    505c:	d507      	bpl.n	506e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    505e:	481f      	ldr	r0, [pc, #124]	; (50dc <z_thread_single_abort+0xb0>)
    5060:	4621      	mov	r1, r4
    5062:	f7ff fe8b 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5066:	7b63      	ldrb	r3, [r4, #13]
    5068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    506c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    506e:	4b1c      	ldr	r3, [pc, #112]	; (50e0 <z_thread_single_abort+0xb4>)
    5070:	6898      	ldr	r0, [r3, #8]
    5072:	1b02      	subs	r2, r0, r4
    5074:	4250      	negs	r0, r2
    5076:	4150      	adcs	r0, r2
    5078:	f7ff fe96 	bl	4da8 <update_cache>
		thread->base.thread_state |= mask;
    507c:	7b63      	ldrb	r3, [r4, #13]
    507e:	f043 0308 	orr.w	r3, r3, #8
    5082:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5084:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
    5088:	2700      	movs	r7, #0
	return list->head == list;
    508a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    508c:	4545      	cmp	r5, r8
    508e:	d000      	beq.n	5092 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    5090:	b995      	cbnz	r5, 50b8 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    5092:	f386 8811 	msr	BASEPRI, r6
    5096:	f3bf 8f6f 	isb	sy
}
    509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    509e:	079b      	lsls	r3, r3, #30
    50a0:	d5ec      	bpl.n	507c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    50a2:	68a0      	ldr	r0, [r4, #8]
    50a4:	4621      	mov	r1, r4
    50a6:	f7ff fe69 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    50aa:	7b63      	ldrb	r3, [r4, #13]
    50ac:	f023 0302 	bic.w	r3, r3, #2
    50b0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    50b2:	2300      	movs	r3, #0
    50b4:	60a3      	str	r3, [r4, #8]
    50b6:	e7e1      	b.n	507c <z_thread_single_abort+0x50>
    50b8:	f105 0018 	add.w	r0, r5, #24
    50bc:	f010 f9fc 	bl	154b8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    50c0:	68a8      	ldr	r0, [r5, #8]
    50c2:	4629      	mov	r1, r5
    50c4:	f7ff fe5a 	bl	4d7c <z_priq_dumb_remove>
    50c8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    50ca:	60af      	str	r7, [r5, #8]
    50cc:	f023 0302 	bic.w	r3, r3, #2
    50d0:	736b      	strb	r3, [r5, #13]
    50d2:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    50d4:	4628      	mov	r0, r5
    50d6:	f7ff fea7 	bl	4e28 <ready_thread>
    50da:	e7d6      	b.n	508a <z_thread_single_abort+0x5e>
    50dc:	20009e08 	.word	0x20009e08
    50e0:	20009de0 	.word	0x20009de0

000050e4 <unready_thread>:
{
    50e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    50e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    50ea:	2b00      	cmp	r3, #0
{
    50ec:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    50ee:	da06      	bge.n	50fe <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    50f0:	4807      	ldr	r0, [pc, #28]	; (5110 <unready_thread+0x2c>)
    50f2:	f7ff fe43 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    50f6:	7b4b      	ldrb	r3, [r1, #13]
    50f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50fc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    50fe:	4b05      	ldr	r3, [pc, #20]	; (5114 <unready_thread+0x30>)
    5100:	6898      	ldr	r0, [r3, #8]
    5102:	1a43      	subs	r3, r0, r1
    5104:	4258      	negs	r0, r3
    5106:	4158      	adcs	r0, r3
}
    5108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    510c:	f7ff be4c 	b.w	4da8 <update_cache>
    5110:	20009e08 	.word	0x20009e08
    5114:	20009de0 	.word	0x20009de0

00005118 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    5118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    511a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    511c:	f010 fa0d 	bl	1553a <z_tick_get_32>
    5120:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    5122:	f04f 0320 	mov.w	r3, #32
    5126:	f3ef 8711 	mrs	r7, BASEPRI
    512a:	f383 8811 	msr	BASEPRI, r3
    512e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5132:	4e0d      	ldr	r6, [pc, #52]	; (5168 <z_tick_sleep.part.0+0x50>)
    5134:	4b0d      	ldr	r3, [pc, #52]	; (516c <z_tick_sleep.part.0+0x54>)
    5136:	68b0      	ldr	r0, [r6, #8]
    5138:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    513a:	f010 f948 	bl	153ce <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    513e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5140:	490b      	ldr	r1, [pc, #44]	; (5170 <z_tick_sleep.part.0+0x58>)
    5142:	462a      	mov	r2, r5
    5144:	17eb      	asrs	r3, r5, #31
    5146:	3018      	adds	r0, #24
    5148:	f000 fa4a 	bl	55e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    514c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    514e:	7b53      	ldrb	r3, [r2, #13]
    5150:	f043 0310 	orr.w	r3, r3, #16
    5154:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
    5156:	4638      	mov	r0, r7
    5158:	f7fd fe8e 	bl	2e78 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    515c:	f010 f9ed 	bl	1553a <z_tick_get_32>
    5160:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    5162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5168:	20009de0 	.word	0x20009de0
    516c:	20009e10 	.word	0x20009e10
    5170:	00015379 	.word	0x00015379

00005174 <pend>:
{
    5174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5178:	4606      	mov	r6, r0
    517a:	4614      	mov	r4, r2
    517c:	461d      	mov	r5, r3
    517e:	f04f 0320 	mov.w	r3, #32
    5182:	f3ef 8711 	mrs	r7, BASEPRI
    5186:	f383 8811 	msr	BASEPRI, r3
    518a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    518e:	f010 f92e 	bl	153ee <add_to_waitq_locked>
	__asm__ volatile(
    5192:	f387 8811 	msr	BASEPRI, r7
    5196:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    519a:	1c6b      	adds	r3, r5, #1
    519c:	bf08      	it	eq
    519e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    51a2:	d008      	beq.n	51b6 <pend+0x42>
    51a4:	4622      	mov	r2, r4
    51a6:	462b      	mov	r3, r5
    51a8:	f106 0018 	add.w	r0, r6, #24
    51ac:	4903      	ldr	r1, [pc, #12]	; (51bc <pend+0x48>)
}
    51ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    51b2:	f000 ba15 	b.w	55e0 <z_add_timeout>
    51b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51ba:	bf00      	nop
    51bc:	00015379 	.word	0x00015379

000051c0 <z_pend_curr>:
{
    51c0:	b510      	push	{r4, lr}
	pending_current = _current;
    51c2:	4b07      	ldr	r3, [pc, #28]	; (51e0 <z_pend_curr+0x20>)
    51c4:	6898      	ldr	r0, [r3, #8]
    51c6:	4b07      	ldr	r3, [pc, #28]	; (51e4 <z_pend_curr+0x24>)
{
    51c8:	460c      	mov	r4, r1
	pending_current = _current;
    51ca:	6018      	str	r0, [r3, #0]
{
    51cc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    51ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    51d2:	f7ff ffcf 	bl	5174 <pend>
    51d6:	4620      	mov	r0, r4
}
    51d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51dc:	f7fd be4c 	b.w	2e78 <arch_swap>
    51e0:	20009de0 	.word	0x20009de0
    51e4:	20009e10 	.word	0x20009e10

000051e8 <z_set_prio>:
{
    51e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51ec:	4604      	mov	r4, r0
	__asm__ volatile(
    51ee:	f04f 0320 	mov.w	r3, #32
    51f2:	f3ef 8811 	mrs	r8, BASEPRI
    51f6:	f383 8811 	msr	BASEPRI, r3
    51fa:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    51fe:	7b43      	ldrb	r3, [r0, #13]
    5200:	06db      	lsls	r3, r3, #27
    5202:	b24e      	sxtb	r6, r1
    5204:	d12e      	bne.n	5264 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    5206:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    5208:	bb65      	cbnz	r5, 5264 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    520a:	4f18      	ldr	r7, [pc, #96]	; (526c <z_set_prio+0x84>)
    520c:	4621      	mov	r1, r4
    520e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    5212:	f7ff fdb3 	bl	4d7c <z_priq_dumb_remove>
	return list->head == list;
    5216:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
    521a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    521c:	4283      	cmp	r3, r0
    521e:	bf18      	it	ne
    5220:	461d      	movne	r5, r3
    5222:	2d00      	cmp	r5, #0
    5224:	bf38      	it	cc
    5226:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5228:	b1b5      	cbz	r5, 5258 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    522a:	f995 100e 	ldrsb.w	r1, [r5, #14]
    522e:	42b1      	cmp	r1, r6
    5230:	dc03      	bgt.n	523a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    5232:	42aa      	cmp	r2, r5
    5234:	d010      	beq.n	5258 <z_set_prio+0x70>
    5236:	682d      	ldr	r5, [r5, #0]
    5238:	e7f6      	b.n	5228 <z_set_prio+0x40>
	node->prev = successor->prev;
    523a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    523c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    5240:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5242:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5244:	2001      	movs	r0, #1
    5246:	f7ff fdaf 	bl	4da8 <update_cache>
    524a:	2001      	movs	r0, #1
	__asm__ volatile(
    524c:	f388 8811 	msr	BASEPRI, r8
    5250:	f3bf 8f6f 	isb	sy
}
    5254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    5258:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    525e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5260:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    5262:	e7ef      	b.n	5244 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5264:	73a6      	strb	r6, [r4, #14]
    5266:	2000      	movs	r0, #0
    5268:	e7f0      	b.n	524c <z_set_prio+0x64>
    526a:	bf00      	nop
    526c:	20009de0 	.word	0x20009de0

00005270 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5270:	4b04      	ldr	r3, [pc, #16]	; (5284 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5272:	2100      	movs	r1, #0
    5274:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    5278:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    527c:	4608      	mov	r0, r1
    527e:	f7ff bd3d 	b.w	4cfc <k_sched_time_slice_set>
    5282:	bf00      	nop
    5284:	20009de0 	.word	0x20009de0

00005288 <z_impl_k_yield>:
{
    5288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    528a:	4c24      	ldr	r4, [pc, #144]	; (531c <z_impl_k_yield+0x94>)
    528c:	4b24      	ldr	r3, [pc, #144]	; (5320 <z_impl_k_yield+0x98>)
    528e:	68a2      	ldr	r2, [r4, #8]
    5290:	429a      	cmp	r2, r3
    5292:	d030      	beq.n	52f6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    5294:	f04f 0320 	mov.w	r3, #32
    5298:	f3ef 8511 	mrs	r5, BASEPRI
    529c:	f383 8811 	msr	BASEPRI, r3
    52a0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    52a4:	68a1      	ldr	r1, [r4, #8]
    52a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    52aa:	f7ff fd67 	bl	4d7c <z_priq_dumb_remove>
	return list->head == list;
    52ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    52b0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    52b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52b4:	4283      	cmp	r3, r0
    52b6:	bf08      	it	eq
    52b8:	2300      	moveq	r3, #0
    52ba:	2b00      	cmp	r3, #0
    52bc:	bf38      	it	cc
    52be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52c0:	b32b      	cbz	r3, 530e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    52c2:	f992 700e 	ldrsb.w	r7, [r2, #14]
    52c6:	f993 600e 	ldrsb.w	r6, [r3, #14]
    52ca:	42b7      	cmp	r7, r6
    52cc:	db03      	blt.n	52d6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    52ce:	428b      	cmp	r3, r1
    52d0:	d01d      	beq.n	530e <z_impl_k_yield+0x86>
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	e7f4      	b.n	52c0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    52d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    52d8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    52dc:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    52de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    52e0:	7b53      	ldrb	r3, [r2, #13]
    52e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52e6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    52e8:	2001      	movs	r0, #1
    52ea:	f7ff fd5d 	bl	4da8 <update_cache>
	__asm__ volatile(
    52ee:	f385 8811 	msr	BASEPRI, r5
    52f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    52f6:	f04f 0320 	mov.w	r3, #32
    52fa:	f3ef 8011 	mrs	r0, BASEPRI
    52fe:	f383 8811 	msr	BASEPRI, r3
    5302:	f3bf 8f6f 	isb	sy
}
    5306:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    530a:	f7fd bdb5 	b.w	2e78 <arch_swap>
	node->prev = list->tail;
    530e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    5312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5314:	601a      	str	r2, [r3, #0]
	list->tail = node;
    5316:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    5318:	e7e2      	b.n	52e0 <z_impl_k_yield+0x58>
    531a:	bf00      	nop
    531c:	20009de0 	.word	0x20009de0
    5320:	20009cf8 	.word	0x20009cf8

00005324 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5324:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5326:	3301      	adds	r3, #1
    5328:	bf08      	it	eq
    532a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    532e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5330:	d106      	bne.n	5340 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5332:	4b0b      	ldr	r3, [pc, #44]	; (5360 <z_impl_k_sleep+0x3c>)
    5334:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5336:	f7ff fe45 	bl	4fc4 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    533a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    533e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    5340:	4604      	mov	r4, r0
	if (ticks == 0) {
    5342:	b948      	cbnz	r0, 5358 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    5344:	f7ff ffa0 	bl	5288 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
    5348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    534c:	fb84 3400 	smull	r3, r4, r4, r0
    5350:	0bd8      	lsrs	r0, r3, #15
    5352:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    5356:	e7f2      	b.n	533e <z_impl_k_sleep+0x1a>
    5358:	f7ff fede 	bl	5118 <z_tick_sleep.part.0>
    535c:	4604      	mov	r4, r0
    535e:	e7f3      	b.n	5348 <z_impl_k_sleep+0x24>
    5360:	20009de0 	.word	0x20009de0

00005364 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5364:	4b01      	ldr	r3, [pc, #4]	; (536c <z_impl_k_current_get+0x8>)
    5366:	6898      	ldr	r0, [r3, #8]
    5368:	4770      	bx	lr
    536a:	bf00      	nop
    536c:	20009de0 	.word	0x20009de0

00005370 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5370:	b538      	push	{r3, r4, r5, lr}
    5372:	4604      	mov	r4, r0
    5374:	f04f 0320 	mov.w	r3, #32
    5378:	f3ef 8511 	mrs	r5, BASEPRI
    537c:	f383 8811 	msr	BASEPRI, r3
    5380:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    5384:	f010 f85e 	bl	15444 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    5388:	b148      	cbz	r0, 539e <z_impl_k_sem_give+0x2e>
    538a:	2200      	movs	r2, #0
    538c:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    538e:	f00f ffe3 	bl	15358 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    5392:	4629      	mov	r1, r5
    5394:	4805      	ldr	r0, [pc, #20]	; (53ac <z_impl_k_sem_give+0x3c>)
}
    5396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    539a:	f00f bfb2 	b.w	15302 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    539e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    53a2:	429a      	cmp	r2, r3
    53a4:	bf18      	it	ne
    53a6:	3301      	addne	r3, #1
    53a8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    53aa:	e7f2      	b.n	5392 <z_impl_k_sem_give+0x22>
    53ac:	2000eacf 	.word	0x2000eacf

000053b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    53b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    53b2:	4614      	mov	r4, r2
    53b4:	461d      	mov	r5, r3
    53b6:	f04f 0320 	mov.w	r3, #32
    53ba:	f3ef 8111 	mrs	r1, BASEPRI
    53be:	f383 8811 	msr	BASEPRI, r3
    53c2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    53c6:	6883      	ldr	r3, [r0, #8]
    53c8:	b143      	cbz	r3, 53dc <z_impl_k_sem_take+0x2c>
		sem->count--;
    53ca:	3b01      	subs	r3, #1
    53cc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    53ce:	f381 8811 	msr	BASEPRI, r1
    53d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    53d6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    53d8:	b003      	add	sp, #12
    53da:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    53dc:	ea54 0305 	orrs.w	r3, r4, r5
    53e0:	d106      	bne.n	53f0 <z_impl_k_sem_take+0x40>
    53e2:	f381 8811 	msr	BASEPRI, r1
    53e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    53ea:	f06f 000f 	mvn.w	r0, #15
    53ee:	e7f3      	b.n	53d8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    53f0:	4602      	mov	r2, r0
    53f2:	e9cd 4500 	strd	r4, r5, [sp]
    53f6:	4802      	ldr	r0, [pc, #8]	; (5400 <z_impl_k_sem_take+0x50>)
    53f8:	f7ff fee2 	bl	51c0 <z_pend_curr>
	return ret;
    53fc:	e7ec      	b.n	53d8 <z_impl_k_sem_take+0x28>
    53fe:	bf00      	nop
    5400:	2000eacf 	.word	0x2000eacf

00005404 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    5404:	b5f0      	push	{r4, r5, r6, r7, lr}
    5406:	b087      	sub	sp, #28
    5408:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
    540c:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5410:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    5414:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5416:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5418:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    541a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
    541e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5420:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
    5422:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5424:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
    5426:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
    5428:	2500      	movs	r5, #0
	node->prev = NULL;
    542a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
    542e:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
    5430:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5432:	9600      	str	r6, [sp, #0]
{
    5434:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5436:	f7fd fd95 	bl	2f64 <arch_new_thread>
	if (!_current) {
    543a:	4b04      	ldr	r3, [pc, #16]	; (544c <z_setup_new_thread+0x48>)
    543c:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    543e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    5442:	b103      	cbz	r3, 5446 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    5444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5446:	66a3      	str	r3, [r4, #104]	; 0x68
}
    5448:	b007      	add	sp, #28
    544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    544c:	20009de0 	.word	0x20009de0

00005450 <z_impl_k_thread_create>:
{
    5450:	b5f0      	push	{r4, r5, r6, r7, lr}
    5452:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5454:	2500      	movs	r5, #0
    5456:	9505      	str	r5, [sp, #20]
    5458:	9d10      	ldr	r5, [sp, #64]	; 0x40
    545a:	9504      	str	r5, [sp, #16]
    545c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    545e:	9503      	str	r5, [sp, #12]
    5460:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5462:	9502      	str	r5, [sp, #8]
{
    5464:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5468:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    546a:	9501      	str	r5, [sp, #4]
    546c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    546e:	9500      	str	r5, [sp, #0]
{
    5470:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5472:	f7ff ffc7 	bl	5404 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5476:	1c7b      	adds	r3, r7, #1
    5478:	bf08      	it	eq
    547a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    547e:	d005      	beq.n	548c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5480:	ea56 0307 	orrs.w	r3, r6, r7
    5484:	d105      	bne.n	5492 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    5486:	4620      	mov	r0, r4
    5488:	f7ff fd02 	bl	4e90 <z_sched_start>
}
    548c:	4620      	mov	r0, r4
    548e:	b007      	add	sp, #28
    5490:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5492:	4904      	ldr	r1, [pc, #16]	; (54a4 <z_impl_k_thread_create+0x54>)
    5494:	4632      	mov	r2, r6
    5496:	463b      	mov	r3, r7
    5498:	f104 0018 	add.w	r0, r4, #24
    549c:	f000 f8a0 	bl	55e0 <z_add_timeout>
    54a0:	e7f4      	b.n	548c <z_impl_k_thread_create+0x3c>
    54a2:	bf00      	nop
    54a4:	00015379 	.word	0x00015379

000054a8 <z_init_static_threads>:
{
    54a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    54ac:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5564 <z_init_static_threads+0xbc>
    54b0:	4d2b      	ldr	r5, [pc, #172]	; (5560 <z_init_static_threads+0xb8>)
{
    54b2:	b087      	sub	sp, #28
    54b4:	46c8      	mov	r8, r9
	_FOREACH_STATIC_THREAD(thread_data) {
    54b6:	454d      	cmp	r5, r9
    54b8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    54bc:	d30d      	bcc.n	54da <z_init_static_threads+0x32>
	k_sched_lock();
    54be:	f7ff fc49 	bl	4d54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    54c2:	4c27      	ldr	r4, [pc, #156]	; (5560 <z_init_static_threads+0xb8>)
    54c4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 5568 <z_init_static_threads+0xc0>
			return (u32_t)((t * to_hz + off) / from_hz);
    54c8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    54cc:	4544      	cmp	r4, r8
    54ce:	d321      	bcc.n	5514 <z_init_static_threads+0x6c>
}
    54d0:	b007      	add	sp, #28
    54d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    54d6:	f7ff bc8b 	b.w	4df0 <k_sched_unlock>
		z_setup_new_thread(
    54da:	f854 3c04 	ldr.w	r3, [r4, #-4]
    54de:	9305      	str	r3, [sp, #20]
    54e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    54e4:	9304      	str	r3, [sp, #16]
    54e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    54ea:	9303      	str	r3, [sp, #12]
    54ec:	f854 3c18 	ldr.w	r3, [r4, #-24]
    54f0:	9302      	str	r3, [sp, #8]
    54f2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    54f6:	9301      	str	r3, [sp, #4]
    54f8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    54fc:	9300      	str	r3, [sp, #0]
    54fe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5502:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5506:	f7ff ff7d 	bl	5404 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    550a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    550e:	655d      	str	r5, [r3, #84]	; 0x54
    5510:	4625      	mov	r5, r4
    5512:	e7d0      	b.n	54b6 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5514:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5516:	1c4b      	adds	r3, r1, #1
    5518:	d017      	beq.n	554a <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
    551a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    551e:	f240 3be7 	movw	fp, #999	; 0x3e7
    5522:	f04f 0c00 	mov.w	ip, #0
    5526:	fbc9 bc01 	smlal	fp, ip, r9, r1
    552a:	2300      	movs	r3, #0
    552c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5530:	4658      	mov	r0, fp
    5532:	4661      	mov	r1, ip
    5534:	f7fa fe34 	bl	1a0 <__aeabi_uldivmod>
    5538:	2700      	movs	r7, #0
    553a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    553c:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    5540:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5542:	d104      	bne.n	554e <z_init_static_threads+0xa6>
	z_sched_start(thread);
    5544:	4628      	mov	r0, r5
    5546:	f7ff fca3 	bl	4e90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    554a:	3430      	adds	r4, #48	; 0x30
    554c:	e7be      	b.n	54cc <z_init_static_threads+0x24>
    554e:	4602      	mov	r2, r0
    5550:	463b      	mov	r3, r7
    5552:	4651      	mov	r1, sl
    5554:	f105 0018 	add.w	r0, r5, #24
    5558:	f000 f842 	bl	55e0 <z_add_timeout>
    555c:	e7f5      	b.n	554a <z_init_static_threads+0xa2>
    555e:	bf00      	nop
    5560:	20000810 	.word	0x20000810
    5564:	20000810 	.word	0x20000810
    5568:	00015379 	.word	0x00015379

0000556c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    556c:	4b03      	ldr	r3, [pc, #12]	; (557c <elapsed+0x10>)
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	b90b      	cbnz	r3, 5576 <elapsed+0xa>
    5572:	f7fd baf9 	b.w	2b68 <z_clock_elapsed>
}
    5576:	2000      	movs	r0, #0
    5578:	4770      	bx	lr
    557a:	bf00      	nop
    557c:	20009e1c 	.word	0x20009e1c

00005580 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5580:	6803      	ldr	r3, [r0, #0]
    5582:	b140      	cbz	r0, 5596 <remove_timeout+0x16>
    5584:	4a07      	ldr	r2, [pc, #28]	; (55a4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    5586:	6852      	ldr	r2, [r2, #4]
    5588:	4290      	cmp	r0, r2
    558a:	d004      	beq.n	5596 <remove_timeout+0x16>
	if (next(t) != NULL) {
    558c:	b11b      	cbz	r3, 5596 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    558e:	689a      	ldr	r2, [r3, #8]
    5590:	6881      	ldr	r1, [r0, #8]
    5592:	440a      	add	r2, r1
    5594:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    5596:	6842      	ldr	r2, [r0, #4]
    5598:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    559a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    559c:	2300      	movs	r3, #0
	node->prev = NULL;
    559e:	e9c0 3300 	strd	r3, r3, [r0]
}
    55a2:	4770      	bx	lr
    55a4:	20000060 	.word	0x20000060

000055a8 <next_timeout>:
	return list->head == list;
    55a8:	4b0b      	ldr	r3, [pc, #44]	; (55d8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    55aa:	b510      	push	{r4, lr}
    55ac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55ae:	429c      	cmp	r4, r3
    55b0:	bf08      	it	eq
    55b2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    55b4:	f7ff ffda 	bl	556c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    55b8:	b154      	cbz	r4, 55d0 <next_timeout+0x28>
    55ba:	68a3      	ldr	r3, [r4, #8]
    55bc:	1a18      	subs	r0, r3, r0
    55be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    55c2:	4b06      	ldr	r3, [pc, #24]	; (55dc <next_timeout+0x34>)
    55c4:	691b      	ldr	r3, [r3, #16]
    55c6:	b113      	cbz	r3, 55ce <next_timeout+0x26>
    55c8:	4298      	cmp	r0, r3
    55ca:	bfa8      	it	ge
    55cc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    55ce:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    55d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    55d4:	e7f5      	b.n	55c2 <next_timeout+0x1a>
    55d6:	bf00      	nop
    55d8:	20000060 	.word	0x20000060
    55dc:	20009de0 	.word	0x20009de0

000055e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    55e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55e4:	9101      	str	r1, [sp, #4]
    55e6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55e8:	1c4b      	adds	r3, r1, #1
    55ea:	bf08      	it	eq
    55ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    55f0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55f2:	d061      	beq.n	56b8 <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    55f4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    55f6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    55fa:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    55fe:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    5602:	ebb3 0804 	subs.w	r8, r3, r4
    5606:	eb6b 0905 	sbc.w	r9, fp, r5
    560a:	f1b8 0f00 	cmp.w	r8, #0
    560e:	f179 0300 	sbcs.w	r3, r9, #0
    5612:	db0f      	blt.n	5634 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    5614:	f7ff ffaa 	bl	556c <elapsed>
    5618:	4a2c      	ldr	r2, [pc, #176]	; (56cc <z_add_timeout+0xec>)
    561a:	e9d2 1c00 	ldrd	r1, ip, [r2]
    561e:	f06f 0301 	mvn.w	r3, #1
    5622:	1a5b      	subs	r3, r3, r1
    5624:	eb6b 020c 	sbc.w	r2, fp, ip
    5628:	1b1e      	subs	r6, r3, r4
    562a:	eb62 0705 	sbc.w	r7, r2, r5
    562e:	1a34      	subs	r4, r6, r0
    5630:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5634:	9b01      	ldr	r3, [sp, #4]
    5636:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    563a:	f04f 0320 	mov.w	r3, #32
    563e:	f3ef 8611 	mrs	r6, BASEPRI
    5642:	f383 8811 	msr	BASEPRI, r3
    5646:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    564a:	f7ff ff8f 	bl	556c <elapsed>
	ticks = MAX(1, ticks);
    564e:	2c01      	cmp	r4, #1
    5650:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    5654:	4b1e      	ldr	r3, [pc, #120]	; (56d0 <z_add_timeout+0xf0>)
    5656:	681a      	ldr	r2, [r3, #0]
    5658:	bfb8      	it	lt
    565a:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
    565c:	4420      	add	r0, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    565e:	429a      	cmp	r2, r3
    5660:	f8ca 0008 	str.w	r0, [sl, #8]
    5664:	d001      	beq.n	566a <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5666:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5668:	b952      	cbnz	r2, 5680 <z_add_timeout+0xa0>
	node->prev = list->tail;
    566a:	685a      	ldr	r2, [r3, #4]
    566c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    5670:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    5672:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    5676:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    567a:	f8c3 a004 	str.w	sl, [r3, #4]
}
    567e:	e00d      	b.n	569c <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    5680:	6890      	ldr	r0, [r2, #8]
    5682:	f8da 1008 	ldr.w	r1, [sl, #8]
    5686:	4288      	cmp	r0, r1
    5688:	dd19      	ble.n	56be <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    568a:	1a41      	subs	r1, r0, r1
    568c:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    568e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5690:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5694:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5698:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    569c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    569e:	429a      	cmp	r2, r3
    56a0:	d006      	beq.n	56b0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    56a2:	4592      	cmp	sl, r2
    56a4:	d104      	bne.n	56b0 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    56a6:	f7ff ff7f 	bl	55a8 <next_timeout>
    56aa:	2100      	movs	r1, #0
    56ac:	f7fd f9fe 	bl	2aac <z_clock_set_timeout>
	__asm__ volatile(
    56b0:	f386 8811 	msr	BASEPRI, r6
    56b4:	f3bf 8f6f 	isb	sy
		}
	}
}
    56b8:	b003      	add	sp, #12
    56ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    56be:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    56c0:	4294      	cmp	r4, r2
    56c2:	f8ca 1008 	str.w	r1, [sl, #8]
    56c6:	d0d0      	beq.n	566a <z_add_timeout+0x8a>
    56c8:	6812      	ldr	r2, [r2, #0]
    56ca:	e7cd      	b.n	5668 <z_add_timeout+0x88>
    56cc:	200082a8 	.word	0x200082a8
    56d0:	20000060 	.word	0x20000060

000056d4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    56d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56d8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    56da:	f7ff fc3d 	bl	4f58 <z_time_slice>
	__asm__ volatile(
    56de:	f04f 0320 	mov.w	r3, #32
    56e2:	f3ef 8411 	mrs	r4, BASEPRI
    56e6:	f383 8811 	msr	BASEPRI, r3
    56ea:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    56ee:	4d20      	ldr	r5, [pc, #128]	; (5770 <z_clock_announce+0x9c>)
    56f0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5774 <z_clock_announce+0xa0>
	return list->head == list;
    56f4:	f8df a080 	ldr.w	sl, [pc, #128]	; 5778 <z_clock_announce+0xa4>
    56f8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    56fa:	46c1      	mov	r9, r8
    56fc:	f8da 0000 	ldr.w	r0, [sl]
    5700:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5702:	4550      	cmp	r0, sl
    5704:	e9d8 6700 	ldrd	r6, r7, [r8]
    5708:	d005      	beq.n	5716 <z_clock_announce+0x42>
    570a:	b120      	cbz	r0, 5716 <z_clock_announce+0x42>
    570c:	6883      	ldr	r3, [r0, #8]
    570e:	4293      	cmp	r3, r2
    5710:	dd13      	ble.n	573a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5712:	1a9b      	subs	r3, r3, r2
    5714:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    5716:	18b6      	adds	r6, r6, r2
    5718:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    571c:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    5720:	2600      	movs	r6, #0
    5722:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    5724:	f7ff ff40 	bl	55a8 <next_timeout>
    5728:	4631      	mov	r1, r6
    572a:	f7fd f9bf 	bl	2aac <z_clock_set_timeout>
	__asm__ volatile(
    572e:	f384 8811 	msr	BASEPRI, r4
    5732:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    573a:	18f6      	adds	r6, r6, r3
    573c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    5740:	1ad3      	subs	r3, r2, r3
    5742:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    5744:	2300      	movs	r3, #0
    5746:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    5748:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    574c:	f7ff ff18 	bl	5580 <remove_timeout>
    5750:	f384 8811 	msr	BASEPRI, r4
    5754:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5758:	68c3      	ldr	r3, [r0, #12]
    575a:	4798      	blx	r3
	__asm__ volatile(
    575c:	f04f 0320 	mov.w	r3, #32
    5760:	f3ef 8411 	mrs	r4, BASEPRI
    5764:	f383 8811 	msr	BASEPRI, r3
    5768:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    576c:	e7c6      	b.n	56fc <z_clock_announce+0x28>
    576e:	bf00      	nop
    5770:	20009e1c 	.word	0x20009e1c
    5774:	200082a8 	.word	0x200082a8
    5778:	20000060 	.word	0x20000060

0000577c <z_tick_get>:

s64_t z_tick_get(void)
{
    577c:	b510      	push	{r4, lr}
    577e:	f04f 0320 	mov.w	r3, #32
    5782:	f3ef 8411 	mrs	r4, BASEPRI
    5786:	f383 8811 	msr	BASEPRI, r3
    578a:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    578e:	f7fd f9eb 	bl	2b68 <z_clock_elapsed>
    5792:	4b06      	ldr	r3, [pc, #24]	; (57ac <z_tick_get+0x30>)
    5794:	e9d3 2300 	ldrd	r2, r3, [r3]
    5798:	1812      	adds	r2, r2, r0
    579a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    579e:	f384 8811 	msr	BASEPRI, r4
    57a2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    57a6:	4610      	mov	r0, r2
    57a8:	4619      	mov	r1, r3
    57aa:	bd10      	pop	{r4, pc}
    57ac:	200082a8 	.word	0x200082a8

000057b0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    57b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    57b2:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    57b6:	1c56      	adds	r6, r2, #1
    57b8:	f143 0700 	adc.w	r7, r3, #0
    57bc:	2f00      	cmp	r7, #0
    57be:	bf08      	it	eq
    57c0:	2e02      	cmpeq	r6, #2
{
    57c2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    57c4:	d302      	bcc.n	57cc <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    57c6:	490c      	ldr	r1, [pc, #48]	; (57f8 <z_timer_expiration_handler+0x48>)
    57c8:	f7ff ff0a 	bl	55e0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    57cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57ce:	3301      	adds	r3, #1
    57d0:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    57d2:	69a3      	ldr	r3, [r4, #24]
    57d4:	b10b      	cbz	r3, 57da <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    57d6:	4620      	mov	r0, r4
    57d8:	4798      	blx	r3
	return list->head == list;
    57da:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57de:	42a5      	cmp	r5, r4
    57e0:	d008      	beq.n	57f4 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    57e2:	b13d      	cbz	r5, 57f4 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    57e4:	4628      	mov	r0, r5
    57e6:	f00f fd73 	bl	152d0 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    57ea:	4628      	mov	r0, r5
    57ec:	f00f fdb4 	bl	15358 <z_ready_thread>
    57f0:	2300      	movs	r3, #0
    57f2:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
    57f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57f6:	bf00      	nop
    57f8:	000057b1 	.word	0x000057b1

000057fc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    57fc:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    5800:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    5804:	ea54 0105 	orrs.w	r1, r4, r5
{
    5808:	4680      	mov	r8, r0
    580a:	4616      	mov	r6, r2
    580c:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    580e:	d016      	beq.n	583e <z_impl_k_timer_start+0x42>
    5810:	f06f 0101 	mvn.w	r1, #1
    5814:	ebb1 0a04 	subs.w	sl, r1, r4
    5818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    581c:	eb61 0b05 	sbc.w	fp, r1, r5
    5820:	f1ba 0f00 	cmp.w	sl, #0
    5824:	f17b 0100 	sbcs.w	r1, fp, #0
    5828:	da09      	bge.n	583e <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    582a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    582e:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    5832:	2c01      	cmp	r4, #1
    5834:	f175 0100 	sbcs.w	r1, r5, #0
    5838:	bfbc      	itt	lt
    583a:	2401      	movlt	r4, #1
    583c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    583e:	f06f 0101 	mvn.w	r1, #1
    5842:	1a89      	subs	r1, r1, r2
    5844:	9100      	str	r1, [sp, #0]
    5846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    584a:	eb61 0103 	sbc.w	r1, r1, r3
    584e:	9101      	str	r1, [sp, #4]
    5850:	e9dd 0100 	ldrd	r0, r1, [sp]
    5854:	2800      	cmp	r0, #0
    5856:	f171 0100 	sbcs.w	r1, r1, #0
    585a:	da09      	bge.n	5870 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    585c:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
    5860:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
    5864:	2e00      	cmp	r6, #0
    5866:	f177 0300 	sbcs.w	r3, r7, #0
    586a:	bfbc      	itt	lt
    586c:	2600      	movlt	r6, #0
    586e:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    5870:	4640      	mov	r0, r8
    5872:	f00f fe21 	bl	154b8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5876:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5878:	4906      	ldr	r1, [pc, #24]	; (5894 <z_impl_k_timer_start+0x98>)
	timer->status = 0U;
    587a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    587e:	4632      	mov	r2, r6
    5880:	463b      	mov	r3, r7
    5882:	4640      	mov	r0, r8
	timer->period = period;
    5884:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    5888:	b002      	add	sp, #8
    588a:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    588e:	f7ff bea7 	b.w	55e0 <z_add_timeout>
    5892:	bf00      	nop
    5894:	000057b1 	.word	0x000057b1

00005898 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    5898:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    589a:	4c06      	ldr	r4, [pc, #24]	; (58b4 <statics_init+0x1c>)
    589c:	4d06      	ldr	r5, [pc, #24]	; (58b8 <statics_init+0x20>)
    589e:	42ac      	cmp	r4, r5
    58a0:	d301      	bcc.n	58a6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    58a2:	2000      	movs	r0, #0
    58a4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    58a6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    58aa:	4620      	mov	r0, r4
    58ac:	f00f fe79 	bl	155a2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    58b0:	3418      	adds	r4, #24
    58b2:	e7f4      	b.n	589e <statics_init+0x6>
    58b4:	20000810 	.word	0x20000810
    58b8:	20000828 	.word	0x20000828

000058bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
    58bc:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
    58be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58c2:	4605      	mov	r5, r0
    58c4:	4688      	mov	r8, r1
    58c6:	4614      	mov	r4, r2
    58c8:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
    58ca:	d10a      	bne.n	58e2 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x26>
      if (error_reporter_ != nullptr) {
    58cc:	f241 238c 	movw	r3, #4748	; 0x128c
    58d0:	58c0      	ldr	r0, [r0, r3]
    58d2:	b910      	cbnz	r0, 58da <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    58d4:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
    58d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
    58da:	4922      	ldr	r1, [pc, #136]	; (5964 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa8>)
    58dc:	f018 fcf0 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    58e0:	e7f8      	b.n	58d4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (FindOp(op) != nullptr) {
    58e2:	6803      	ldr	r3, [r0, #0]
    58e4:	691b      	ldr	r3, [r3, #16]
    58e6:	4798      	blx	r3
    58e8:	4607      	mov	r7, r0
    58ea:	b148      	cbz	r0, 5900 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x44>
      if (error_reporter_ != nullptr) {
    58ec:	f241 238c 	movw	r3, #4748	; 0x128c
    58f0:	58e8      	ldr	r0, [r5, r3]
    58f2:	2800      	cmp	r0, #0
    58f4:	d0ee      	beq.n	58d4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
    58f6:	491c      	ldr	r1, [pc, #112]	; (5968 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xac>)
    58f8:	4642      	mov	r2, r8
    58fa:	f018 fce1 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    58fe:	e7e9      	b.n	58d4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (registrations_len_ >= tOpCount) {
    5900:	f241 0e04 	movw	lr, #4100	; 0x1004
    5904:	f855 c00e 	ldr.w	ip, [r5, lr]
    5908:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    590c:	d90a      	bls.n	5924 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_) {
    590e:	f241 238c 	movw	r3, #4748	; 0x128c
    5912:	58e8      	ldr	r0, [r5, r3]
    5914:	2800      	cmp	r0, #0
    5916:	d0dd      	beq.n	58d4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
    5918:	4914      	ldr	r1, [pc, #80]	; (596c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xb0>)
    591a:	2380      	movs	r3, #128	; 0x80
    591c:	4642      	mov	r2, r8
    591e:	f018 fccf 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5922:	e7d7      	b.n	58d4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    registrations_[registrations_len_] = registration;
    5924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5926:	eb05 1a4c 	add.w	sl, r5, ip, lsl #5
    592a:	f10a 0604 	add.w	r6, sl, #4
    592e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5934:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    registrations_len_++;
    5938:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
    593c:	f8ca 8018 	str.w	r8, [sl, #24]
    registrations_len_++;
    5940:	f845 300e 	str.w	r3, [r5, lr]
    builtin_codes_[num_buitin_ops_] = op;
    5944:	f241 2388 	movw	r3, #4744	; 0x1288
    5948:	f241 0108 	movw	r1, #4104	; 0x1008
    594c:	58ea      	ldr	r2, [r5, r3]
    594e:	18a8      	adds	r0, r5, r2
    5950:	f800 8001 	strb.w	r8, [r0, r1]
    builtin_parsers_[num_buitin_ops_] = parser;
    5954:	f202 4122 	addw	r1, r2, #1058	; 0x422
    num_buitin_ops_++;
    5958:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
    595a:	f845 9021 	str.w	r9, [r5, r1, lsl #2]
    return kTfLiteOk;
    595e:	4638      	mov	r0, r7
    num_buitin_ops_++;
    5960:	50ea      	str	r2, [r5, r3]
    return kTfLiteOk;
    5962:	e7b8      	b.n	58d6 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1a>
    5964:	00026766 	.word	0x00026766
    5968:	000267ab 	.word	0x000267ab
    596c:	000267fa 	.word	0x000267fa

00005970 <_ZN6tflite14AllOpsResolverC1Ev>:
const char* GetString_ETHOSU();
}  // namespace custom
}  // namespace micro
}  // namespace ops

AllOpsResolver::AllOpsResolver() {
    5970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : error_reporter_(error_reporter) {}
    5974:	f241 2388 	movw	r3, #4744	; 0x1288
    5978:	f241 0604 	movw	r6, #4100	; 0x1004
    597c:	2500      	movs	r5, #0
    597e:	f241 278c 	movw	r7, #4748	; 0x128c
    5982:	5185      	str	r5, [r0, r6]
    5984:	50c5      	str	r5, [r0, r3]
    5986:	4bdc      	ldr	r3, [pc, #880]	; (5cf8 <_ZN6tflite14AllOpsResolverC1Ev+0x388>)
    5988:	51c5      	str	r5, [r0, r7]
    598a:	6003      	str	r3, [r0, #0]
    598c:	4604      	mov	r4, r0
    return AddBuiltin(BuiltinOperator_ABS, *tflite::ops::micro::Register_ABS(),
    598e:	f005 f9d3 	bl	ad38 <_ZN6tflite3ops5micro12Register_ABSEv>
                      ParseOpData);
    5992:	4bda      	ldr	r3, [pc, #872]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_ABS, *tflite::ops::micro::Register_ABS(),
    5994:	4602      	mov	r2, r0
                      ParseOpData);
    5996:	2165      	movs	r1, #101	; 0x65
    5998:	4620      	mov	r0, r4
    599a:	f7ff ff8f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_ADD, *tflite::ops::micro::Register_ADD(),
    599e:	f001 fce5 	bl	736c <_ZN6tflite3ops5micro12Register_ADDEv>
                      ParseOpData);
    59a2:	4629      	mov	r1, r5
    return AddBuiltin(BuiltinOperator_ADD, *tflite::ops::micro::Register_ADD(),
    59a4:	4602      	mov	r2, r0
                      ParseOpData);
    59a6:	4bd5      	ldr	r3, [pc, #852]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59a8:	4620      	mov	r0, r4
    59aa:	f7ff ff87 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ARG_MAX(), ParseOpData);
    59ae:	f001 fdbb 	bl	7528 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
    59b2:	4bd2      	ldr	r3, [pc, #840]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59b4:	4602      	mov	r2, r0
    59b6:	2138      	movs	r1, #56	; 0x38
    59b8:	4620      	mov	r0, r4
    59ba:	f7ff ff7f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ARG_MIN(), ParseOpData);
    59be:	f001 fdb7 	bl	7530 <_ZN6tflite3ops5micro16Register_ARG_MINEv>
    59c2:	4bce      	ldr	r3, [pc, #824]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59c4:	4602      	mov	r2, r0
    59c6:	214f      	movs	r1, #79	; 0x4f
    59c8:	4620      	mov	r0, r4
    59ca:	f7ff ff77 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_AVERAGE_POOL_2D(),
    59ce:	f007 fa7b 	bl	cec8 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParseOpData);
    59d2:	4bca      	ldr	r3, [pc, #808]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_AVERAGE_POOL_2D(),
    59d4:	4602      	mov	r2, r0
                      ParseOpData);
    59d6:	2101      	movs	r1, #1
    59d8:	4620      	mov	r0, r4
    59da:	f7ff ff6f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CEIL(), ParseOpData);
    59de:	f001 fef9 	bl	77d4 <_ZN6tflite3ops5micro13Register_CEILEv>
    59e2:	4bc6      	ldr	r3, [pc, #792]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    59e4:	4602      	mov	r2, r0
    59e6:	2168      	movs	r1, #104	; 0x68
    59e8:	4620      	mov	r0, r4
    59ea:	f7ff ff67 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CONCATENATION(),
    59ee:	f003 ff1f 	bl	9830 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>
                      ParseOpData);
    59f2:	4bc2      	ldr	r3, [pc, #776]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_CONCATENATION(),
    59f4:	4602      	mov	r2, r0
                      ParseOpData);
    59f6:	2102      	movs	r1, #2
    59f8:	4620      	mov	r0, r4
    59fa:	f7ff ff5f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
    59fe:	f004 fb0b 	bl	a018 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
    5a02:	4bbf      	ldr	r3, [pc, #764]	; (5d00 <_ZN6tflite14AllOpsResolverC1Ev+0x390>)
    5a04:	4602      	mov	r2, r0
    5a06:	2103      	movs	r1, #3
    5a08:	4620      	mov	r0, r4
    5a0a:	f7ff ff57 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_COS, *tflite::ops::micro::Register_COS(),
    5a0e:	f005 f99b 	bl	ad48 <_ZN6tflite3ops5micro12Register_COSEv>
                      ParseOpData);
    5a12:	4bba      	ldr	r3, [pc, #744]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_COS, *tflite::ops::micro::Register_COS(),
    5a14:	4602      	mov	r2, r0
                      ParseOpData);
    5a16:	216c      	movs	r1, #108	; 0x6c
    5a18:	4620      	mov	r0, r4
    5a1a:	f7ff ff4f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
    5a1e:	f004 fd4b 	bl	a4b8 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
    5a22:	4bb8      	ldr	r3, [pc, #736]	; (5d04 <_ZN6tflite14AllOpsResolverC1Ev+0x394>)
                      *tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
    5a24:	4602      	mov	r2, r0
                      ParseDepthwiseConv2D);
    5a26:	2104      	movs	r1, #4
    5a28:	4620      	mov	r0, r4
    5a2a:	f7ff ff47 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_DEQUANTIZE(),
    5a2e:	f005 f835 	bl	aa9c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
                      ParseDequantize);
    5a32:	4bb5      	ldr	r3, [pc, #724]	; (5d08 <_ZN6tflite14AllOpsResolverC1Ev+0x398>)
                      *tflite::ops::micro::Register_DEQUANTIZE(),
    5a34:	4602      	mov	r2, r0
                      ParseDequantize);
    5a36:	2106      	movs	r1, #6
    5a38:	4620      	mov	r0, r4
    5a3a:	f7ff ff3f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_EQUAL(), ParseOpData);
    5a3e:	f001 fecd 	bl	77dc <_ZN6tflite3ops5micro14Register_EQUALEv>
    5a42:	4bae      	ldr	r3, [pc, #696]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a44:	4602      	mov	r2, r0
    5a46:	2147      	movs	r1, #71	; 0x47
    5a48:	4620      	mov	r0, r4
    5a4a:	f7ff ff37 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_FLOOR(), ParseOpData);
    5a4e:	f005 fa09 	bl	ae64 <_ZN6tflite3ops5micro14Register_FLOOREv>
    5a52:	4baa      	ldr	r3, [pc, #680]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a54:	4602      	mov	r2, r0
    5a56:	2108      	movs	r1, #8
    5a58:	4620      	mov	r0, r4
    5a5a:	f7ff ff2f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
    5a5e:	f005 fca5 	bl	b3ac <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
    5a62:	4baa      	ldr	r3, [pc, #680]	; (5d0c <_ZN6tflite14AllOpsResolverC1Ev+0x39c>)
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
    5a64:	4602      	mov	r2, r0
                      ParseFullyConnected);
    5a66:	2109      	movs	r1, #9
    5a68:	4620      	mov	r0, r4
    5a6a:	f7ff ff27 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_GREATER(), ParseOpData);
    5a6e:	f001 febd 	bl	77ec <_ZN6tflite3ops5micro16Register_GREATEREv>
    5a72:	4ba2      	ldr	r3, [pc, #648]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5a74:	4602      	mov	r2, r0
    5a76:	213d      	movs	r1, #61	; 0x3d
    5a78:	4620      	mov	r0, r4
    5a7a:	f7ff ff1f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_GREATER_EQUAL(),
    5a7e:	f001 feb9 	bl	77f4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
                      ParseOpData);
    5a82:	4b9e      	ldr	r3, [pc, #632]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_GREATER_EQUAL(),
    5a84:	4602      	mov	r2, r0
                      ParseOpData);
    5a86:	213e      	movs	r1, #62	; 0x3e
    5a88:	4620      	mov	r0, r4
    5a8a:	f7ff ff17 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_L2_NORMALIZATION(),
    5a8e:	f005 fcbb 	bl	b408 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>
                      ParseOpData);
    5a92:	4b9a      	ldr	r3, [pc, #616]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_L2_NORMALIZATION(),
    5a94:	4602      	mov	r2, r0
                      ParseOpData);
    5a96:	210b      	movs	r1, #11
    5a98:	4620      	mov	r0, r4
    5a9a:	f7ff ff0f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LESS(), ParseOpData);
    5a9e:	f001 fead 	bl	77fc <_ZN6tflite3ops5micro13Register_LESSEv>
    5aa2:	4b96      	ldr	r3, [pc, #600]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5aa4:	4602      	mov	r2, r0
    5aa6:	213a      	movs	r1, #58	; 0x3a
    5aa8:	4620      	mov	r0, r4
    5aaa:	f7ff ff07 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LESS_EQUAL(), ParseOpData);
    5aae:	f001 fea9 	bl	7804 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
    5ab2:	4b92      	ldr	r3, [pc, #584]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ab4:	4602      	mov	r2, r0
    5ab6:	213f      	movs	r1, #63	; 0x3f
    5ab8:	4620      	mov	r0, r4
    5aba:	f7ff feff 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LOG, *tflite::ops::micro::Register_LOG(),
    5abe:	f005 f947 	bl	ad50 <_ZN6tflite3ops5micro12Register_LOGEv>
                      ParseOpData);
    5ac2:	4b8e      	ldr	r3, [pc, #568]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_LOG, *tflite::ops::micro::Register_LOG(),
    5ac4:	4602      	mov	r2, r0
                      ParseOpData);
    5ac6:	2149      	movs	r1, #73	; 0x49
    5ac8:	4620      	mov	r0, r4
    5aca:	f7ff fef7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_AND(), ParseOpData);
    5ace:	f005 fe39 	bl	b744 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
    5ad2:	4b8a      	ldr	r3, [pc, #552]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ad4:	4602      	mov	r2, r0
    5ad6:	2156      	movs	r1, #86	; 0x56
    5ad8:	4620      	mov	r0, r4
    5ada:	f7ff feef 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_NOT(), ParseOpData);
    5ade:	f005 f947 	bl	ad70 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
    5ae2:	4b86      	ldr	r3, [pc, #536]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ae4:	4602      	mov	r2, r0
    5ae6:	2157      	movs	r1, #87	; 0x57
    5ae8:	4620      	mov	r0, r4
    5aea:	f7ff fee7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGICAL_OR(), ParseOpData);
    5aee:	f005 fe25 	bl	b73c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
    5af2:	4b82      	ldr	r3, [pc, #520]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5af4:	4602      	mov	r2, r0
    5af6:	2154      	movs	r1, #84	; 0x54
    5af8:	4620      	mov	r0, r4
    5afa:	f7ff fedf 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_LOGISTIC(), ParseOpData);
    5afe:	f005 fe8f 	bl	b820 <_ZN6tflite3ops5micro17Register_LOGISTICEv>
    5b02:	4b7e      	ldr	r3, [pc, #504]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b04:	4602      	mov	r2, r0
    5b06:	210e      	movs	r1, #14
    5b08:	4620      	mov	r0, r4
    5b0a:	f7ff fed7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MAXIMUM(), ParseOpData);
    5b0e:	f006 f8c7 	bl	bca0 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
    5b12:	4b7a      	ldr	r3, [pc, #488]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b14:	4602      	mov	r2, r0
    5b16:	2137      	movs	r1, #55	; 0x37
    5b18:	4620      	mov	r0, r4
    5b1a:	f7ff fecf 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MAX_POOL_2D(), ParseOpData);
    5b1e:	f007 f9d7 	bl	ced0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    5b22:	4b76      	ldr	r3, [pc, #472]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b24:	4602      	mov	r2, r0
    5b26:	2111      	movs	r1, #17
    5b28:	4620      	mov	r0, r4
    5b2a:	f7ff fec7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MEAN(), ParseOpData);
    5b2e:	f007 fe49 	bl	d7c4 <_ZN6tflite3ops5micro13Register_MEANEv>
    5b32:	4b72      	ldr	r3, [pc, #456]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b34:	4602      	mov	r2, r0
    5b36:	2128      	movs	r1, #40	; 0x28
    5b38:	4620      	mov	r0, r4
    5b3a:	f7ff febf 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_MINIMUM(), ParseOpData);
    5b3e:	f006 f8b3 	bl	bca8 <_ZN6tflite3ops5micro16Register_MINIMUMEv>
    5b42:	4b6e      	ldr	r3, [pc, #440]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b44:	4602      	mov	r2, r0
    5b46:	2139      	movs	r1, #57	; 0x39
    5b48:	4620      	mov	r0, r4
    5b4a:	f7ff feb7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MUL, *tflite::ops::micro::Register_MUL(),
    5b4e:	f006 faf5 	bl	c13c <_ZN6tflite3ops5micro12Register_MULEv>
                      ParseOpData);
    5b52:	4b6a      	ldr	r3, [pc, #424]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_MUL, *tflite::ops::micro::Register_MUL(),
    5b54:	4602      	mov	r2, r0
                      ParseOpData);
    5b56:	2112      	movs	r1, #18
    5b58:	4620      	mov	r0, r4
    5b5a:	f7ff feaf 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_NEG, *tflite::ops::micro::Register_NEG(),
    5b5e:	f006 fc3d 	bl	c3dc <_ZN6tflite3ops5micro12Register_NEGEv>
                      ParseOpData);
    5b62:	4b66      	ldr	r3, [pc, #408]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_NEG, *tflite::ops::micro::Register_NEG(),
    5b64:	4602      	mov	r2, r0
                      ParseOpData);
    5b66:	213b      	movs	r1, #59	; 0x3b
    5b68:	4620      	mov	r0, r4
    5b6a:	f7ff fea7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_NOT_EQUAL(), ParseOpData);
    5b6e:	f001 fe39 	bl	77e4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
    5b72:	4b62      	ldr	r3, [pc, #392]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b74:	4602      	mov	r2, r0
    5b76:	2148      	movs	r1, #72	; 0x48
    5b78:	4620      	mov	r0, r4
    5b7a:	f7ff fe9f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PACK(), ParseOpData);
    5b7e:	f006 fe67 	bl	c850 <_ZN6tflite3ops5micro13Register_PACKEv>
    5b82:	4b5e      	ldr	r3, [pc, #376]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5b84:	4602      	mov	r2, r0
    5b86:	2153      	movs	r1, #83	; 0x53
    5b88:	4620      	mov	r0, r4
    5b8a:	f7ff fe97 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PAD, *tflite::ops::micro::Register_PAD(),
    5b8e:	f006 ff3d 	bl	ca0c <_ZN6tflite3ops5micro12Register_PADEv>
                      ParseOpData);
    5b92:	4b5a      	ldr	r3, [pc, #360]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_PAD, *tflite::ops::micro::Register_PAD(),
    5b94:	4602      	mov	r2, r0
                      ParseOpData);
    5b96:	2122      	movs	r1, #34	; 0x22
    5b98:	4620      	mov	r0, r4
    5b9a:	f7ff fe8f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PADV2(), ParseOpData);
    5b9e:	f006 ff39 	bl	ca14 <_ZN6tflite3ops5micro14Register_PADV2Ev>
    5ba2:	4b56      	ldr	r3, [pc, #344]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5ba4:	4602      	mov	r2, r0
    5ba6:	213c      	movs	r1, #60	; 0x3c
    5ba8:	4620      	mov	r0, r4
    5baa:	f7ff fe87 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_PRELU(), ParseOpData);
    5bae:	f007 fafd 	bl	d1ac <_ZN6tflite3ops5micro14Register_PRELUEv>
    5bb2:	4b52      	ldr	r3, [pc, #328]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5bb4:	4602      	mov	r2, r0
    5bb6:	2136      	movs	r1, #54	; 0x36
    5bb8:	4620      	mov	r0, r4
    5bba:	f7ff fe7f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_QUANTIZE(), ParseQuantize);
    5bbe:	f007 fda9 	bl	d714 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
    5bc2:	4b53      	ldr	r3, [pc, #332]	; (5d10 <_ZN6tflite14AllOpsResolverC1Ev+0x3a0>)
    5bc4:	4602      	mov	r2, r0
    5bc6:	2172      	movs	r1, #114	; 0x72
    5bc8:	4620      	mov	r0, r4
    5bca:	f7ff fe77 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RELU(), ParseOpData);
    5bce:	f001 fae3 	bl	7198 <_ZN6tflite3ops5micro13Register_RELUEv>
    5bd2:	4b4a      	ldr	r3, [pc, #296]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5bd4:	4602      	mov	r2, r0
    5bd6:	2113      	movs	r1, #19
    5bd8:	4620      	mov	r0, r4
    5bda:	f7ff fe6f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RELU6(), ParseOpData);
    5bde:	f001 fadf 	bl	71a0 <_ZN6tflite3ops5micro14Register_RELU6Ev>
    5be2:	4b46      	ldr	r3, [pc, #280]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5be4:	4602      	mov	r2, r0
    5be6:	2115      	movs	r1, #21
    5be8:	4620      	mov	r0, r4
    5bea:	f7ff fe67 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    5bee:	f008 f8ff 	bl	ddf0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    5bf2:	4b48      	ldr	r3, [pc, #288]	; (5d14 <_ZN6tflite14AllOpsResolverC1Ev+0x3a4>)
    5bf4:	4602      	mov	r2, r0
    5bf6:	2116      	movs	r1, #22
    5bf8:	4620      	mov	r0, r4
    5bfa:	f7ff fe5f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
    5bfe:	f008 f953 	bl	dea8 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>
                      ParseOpData);
    5c02:	4b3e      	ldr	r3, [pc, #248]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
    5c04:	4602      	mov	r2, r0
                      ParseOpData);
    5c06:	2161      	movs	r1, #97	; 0x61
    5c08:	4620      	mov	r0, r4
    5c0a:	f7ff fe57 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_ROUND(), ParseOpData);
    5c0e:	f008 fa8f 	bl	e130 <_ZN6tflite3ops5micro14Register_ROUNDEv>
    5c12:	4b3a      	ldr	r3, [pc, #232]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c14:	4602      	mov	r2, r0
    5c16:	2174      	movs	r1, #116	; 0x74
    5c18:	4620      	mov	r0, r4
    5c1a:	f7ff fe4f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_RSQRT(), ParseOpData);
    5c1e:	f005 f89f 	bl	ad60 <_ZN6tflite3ops5micro14Register_RSQRTEv>
    5c22:	4b36      	ldr	r3, [pc, #216]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c24:	4602      	mov	r2, r0
    5c26:	214c      	movs	r1, #76	; 0x4c
    5c28:	4620      	mov	r0, r4
    5c2a:	f7ff fe47 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SIN, *tflite::ops::micro::Register_SIN(),
    5c2e:	f005 f887 	bl	ad40 <_ZN6tflite3ops5micro12Register_SINEv>
                      ParseOpData);
    5c32:	4b32      	ldr	r3, [pc, #200]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_SIN, *tflite::ops::micro::Register_SIN(),
    5c34:	4602      	mov	r2, r0
                      ParseOpData);
    5c36:	2142      	movs	r1, #66	; 0x42
    5c38:	4620      	mov	r0, r4
    5c3a:	f7ff fe3f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
    5c3e:	f008 fb47 	bl	e2d0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
    5c42:	4b35      	ldr	r3, [pc, #212]	; (5d18 <_ZN6tflite14AllOpsResolverC1Ev+0x3a8>)
    5c44:	4602      	mov	r2, r0
    5c46:	2119      	movs	r1, #25
    5c48:	4620      	mov	r0, r4
    5c4a:	f7ff fe37 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SPLIT(), ParseOpData);
    5c4e:	f008 fd9f 	bl	e790 <_ZN6tflite3ops5micro14Register_SPLITEv>
    5c52:	4b2a      	ldr	r3, [pc, #168]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c54:	4602      	mov	r2, r0
    5c56:	2131      	movs	r1, #49	; 0x31
    5c58:	4620      	mov	r0, r4
    5c5a:	f7ff fe2f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SQRT(), ParseOpData);
    5c5e:	f005 f87b 	bl	ad58 <_ZN6tflite3ops5micro13Register_SQRTEv>
    5c62:	4b26      	ldr	r3, [pc, #152]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c64:	4602      	mov	r2, r0
    5c66:	214b      	movs	r1, #75	; 0x4b
    5c68:	4620      	mov	r0, r4
    5c6a:	f7ff fe27 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SQUARE(), ParseOpData);
    5c6e:	f005 f87b 	bl	ad68 <_ZN6tflite3ops5micro15Register_SQUAREEv>
    5c72:	4b22      	ldr	r3, [pc, #136]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5c74:	4602      	mov	r2, r0
    5c76:	215c      	movs	r1, #92	; 0x5c
    5c78:	4620      	mov	r0, r4
    5c7a:	f7ff fe1f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_STRIDED_SLICE(),
    5c7e:	f008 feb5 	bl	e9ec <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
                      ParseOpData);
    5c82:	4b1e      	ldr	r3, [pc, #120]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
                      *tflite::ops::micro::Register_STRIDED_SLICE(),
    5c84:	4602      	mov	r2, r0
                      ParseOpData);
    5c86:	212d      	movs	r1, #45	; 0x2d
    5c88:	4620      	mov	r0, r4
    5c8a:	f7ff fe17 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SUB, *tflite::ops::micro::Register_SUB(),
    5c8e:	f008 ff95 	bl	ebbc <_ZN6tflite3ops5micro12Register_SUBEv>
                      ParseOpData);
    5c92:	4b1a      	ldr	r3, [pc, #104]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    return AddBuiltin(BuiltinOperator_SUB, *tflite::ops::micro::Register_SUB(),
    5c94:	4602      	mov	r2, r0
                      ParseOpData);
    5c96:	2129      	movs	r1, #41	; 0x29
    5c98:	4620      	mov	r0, r4
    5c9a:	f7ff fe0f 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_SVDF(), ParseSvdf);
    5c9e:	f009 fe81 	bl	f9a4 <_ZN6tflite3ops5micro13Register_SVDFEv>
    5ca2:	4b1e      	ldr	r3, [pc, #120]	; (5d1c <_ZN6tflite14AllOpsResolverC1Ev+0x3ac>)
    5ca4:	4602      	mov	r2, r0
    5ca6:	211b      	movs	r1, #27
    5ca8:	4620      	mov	r0, r4
    5caa:	f7ff fe07 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_TANH(), ParseOpData);
    5cae:	f009 fe7d 	bl	f9ac <_ZN6tflite3ops5micro13Register_TANHEv>
    5cb2:	4b12      	ldr	r3, [pc, #72]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5cb4:	4602      	mov	r2, r0
    5cb6:	211c      	movs	r1, #28
    5cb8:	4620      	mov	r0, r4
    5cba:	f7ff fdff 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      *tflite::ops::micro::Register_UNPACK(), ParseOpData);
    5cbe:	f00a f99f 	bl	10000 <_ZN6tflite3ops5micro15Register_UNPACKEv>
    5cc2:	4b0e      	ldr	r3, [pc, #56]	; (5cfc <_ZN6tflite14AllOpsResolverC1Ev+0x38c>)
    5cc4:	4602      	mov	r2, r0
    5cc6:	2158      	movs	r1, #88	; 0x58
    5cc8:	4620      	mov	r0, r4
    5cca:	f7ff fdf7 	bl	58bc <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  AddTanh();
  AddUnpack();

  // TODO(b/159644355): Figure out if custom Ops belong in AllOpsResolver.
  TfLiteRegistration* registration =
      tflite::ops::micro::custom::Register_ETHOSU();
    5cce:	f013 ff73 	bl	19bb8 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>
  if (registration) {
    5cd2:	4605      	mov	r5, r0
    5cd4:	b160      	cbz	r0, 5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    AddCustom(tflite::ops::micro::custom::GetString_ETHOSU(), registration);
    5cd6:	f005 f84f 	bl	ad78 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>
    if (registrations_len_ >= tOpCount) {
    5cda:	59a3      	ldr	r3, [r4, r6]
    5cdc:	2b7f      	cmp	r3, #127	; 0x7f
    5cde:	4680      	mov	r8, r0
    5ce0:	d920      	bls.n	5d24 <_ZN6tflite14AllOpsResolverC1Ev+0x3b4>
      if (error_reporter_) {
    5ce2:	59e0      	ldr	r0, [r4, r7]
    5ce4:	b120      	cbz	r0, 5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
        TF_LITE_REPORT_ERROR(
    5ce6:	490e      	ldr	r1, [pc, #56]	; (5d20 <_ZN6tflite14AllOpsResolverC1Ev+0x3b0>)
    5ce8:	2380      	movs	r3, #128	; 0x80
    5cea:	4642      	mov	r2, r8
    5cec:	f018 fae8 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
}
    5cf0:	4620      	mov	r0, r4
    5cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cf6:	bf00      	nop
    5cf8:	000256d4 	.word	0x000256d4
    5cfc:	00010591 	.word	0x00010591
    5d00:	00010229 	.word	0x00010229
    5d04:	000102e5 	.word	0x000102e5
    5d08:	0001e339 	.word	0x0001e339
    5d0c:	000103ad 	.word	0x000103ad
    5d10:	0001e33d 	.word	0x0001e33d
    5d14:	00010185 	.word	0x00010185
    5d18:	00010519 	.word	0x00010519
    5d1c:	0001047d 	.word	0x0001047d
    5d20:	0002683d 	.word	0x0002683d
    if (FindOp(name) != nullptr) {
    5d24:	4601      	mov	r1, r0
    5d26:	4620      	mov	r0, r4
    5d28:	f00f fc7c 	bl	15624 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>
    5d2c:	b138      	cbz	r0, 5d3e <_ZN6tflite14AllOpsResolverC1Ev+0x3ce>
      if (error_reporter_ != nullptr) {
    5d2e:	59e0      	ldr	r0, [r4, r7]
    5d30:	2800      	cmp	r0, #0
    5d32:	d0dd      	beq.n	5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
        TF_LITE_REPORT_ERROR(error_reporter_,
    5d34:	490a      	ldr	r1, [pc, #40]	; (5d60 <_ZN6tflite14AllOpsResolverC1Ev+0x3f0>)
    5d36:	4642      	mov	r2, r8
    5d38:	f018 fac2 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5d3c:	e7d8      	b.n	5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
    5d3e:	59a7      	ldr	r7, [r4, r6]
    registrations_len_ += 1;
    5d40:	1c7b      	adds	r3, r7, #1
    5d42:	51a3      	str	r3, [r4, r6]
    *new_registration = *registration;
    5d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d46:	eb04 1747 	add.w	r7, r4, r7, lsl #5
    5d4a:	1d3e      	adds	r6, r7, #4
    5d4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5d4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d52:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    new_registration->builtin_code = BuiltinOperator_CUSTOM;
    5d56:	2320      	movs	r3, #32
    new_registration->custom_name = name;
    5d58:	e9c7 3806 	strd	r3, r8, [r7, #24]
    5d5c:	e7c8      	b.n	5cf0 <_ZN6tflite14AllOpsResolverC1Ev+0x380>
    5d5e:	bf00      	nop
    5d60:	0002687f 	.word	0x0002687f

00005d64 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
    5d64:	b538      	push	{r3, r4, r5, lr}
    5d66:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
    5d68:	4604      	mov	r4, r0
    5d6a:	b908      	cbnz	r0, 5d70 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
    5d6c:	f018 fc42 	bl	1e5f4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    5d70:	2900      	cmp	r1, #0
    5d72:	d0fb      	beq.n	5d6c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
    5d74:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    5d76:	2204      	movs	r2, #4
    5d78:	68db      	ldr	r3, [r3, #12]
    5d7a:	2118      	movs	r1, #24
    5d7c:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    5d7e:	b138      	cbz	r0, 5d90 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
    5d80:	4b04      	ldr	r3, [pc, #16]	; (5d94 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
    5d82:	6085      	str	r5, [r0, #8]
    5d84:	e9c0 3400 	strd	r3, r4, [r0]
    5d88:	2300      	movs	r3, #0
    5d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    5d8e:	7303      	strb	r3, [r0, #12]
  return allocator;
}
    5d90:	bd38      	pop	{r3, r4, r5, pc}
    5d92:	bf00      	nop
    5d94:	00025914 	.word	0x00025914

00005d98 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    5d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d9a:	460f      	mov	r7, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5d9c:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
    5d9e:	4604      	mov	r4, r0
    5da0:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5da2:	f018 fb77 	bl	1e494 <_ZN6tflite14AlignPointerUpEPhj>
  if (aligned_arena != tensor_arena) {
    5da6:	4284      	cmp	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    5da8:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
    5daa:	d004      	beq.n	5db6 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
    5dac:	1b02      	subs	r2, r0, r4
    5dae:	4907      	ldr	r1, [pc, #28]	; (5dcc <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
    5db0:	4630      	mov	r0, r6
    5db2:	f018 fa85 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    5db6:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    5db8:	4629      	mov	r1, r5
    5dba:	1b52      	subs	r2, r2, r5
    5dbc:	4630      	mov	r0, r6
    5dbe:	f001 f8a3 	bl	6f08 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
    5dc2:	4631      	mov	r1, r6
}
    5dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    5dc8:	f7ff bfcc 	b.w	5d64 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
    5dcc:	000268cb 	.word	0x000268cb

00005dd0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
    5dd0:	b570      	push	{r4, r5, r6, lr}
    5dd2:	4604      	mov	r4, r0
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5dd4:	6840      	ldr	r0, [r0, #4]
    5dd6:	6803      	ldr	r3, [r0, #0]
                                                      void** ptr) {
    5dd8:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5dda:	68db      	ldr	r3, [r3, #12]
    5ddc:	2210      	movs	r2, #16
                                                      void** ptr) {
    5dde:	460e      	mov	r6, r1
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    5de0:	4798      	blx	r3
  if (data == nullptr) {
    5de2:	b930      	cbnz	r0, 5df2 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5de4:	4904      	ldr	r1, [pc, #16]	; (5df8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
    5de6:	68a0      	ldr	r0, [r4, #8]
    5de8:	4632      	mov	r2, r6
    5dea:	f018 fa69 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
    5dee:	2001      	movs	r0, #1
  }
  (*ptr) = data;
  return kTfLiteOk;
}
    5df0:	bd70      	pop	{r4, r5, r6, pc}
  (*ptr) = data;
    5df2:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    5df4:	2000      	movs	r0, #0
    5df6:	e7fb      	b.n	5df0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x20>
    5df8:	00026936 	.word	0x00026936

00005dfc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
    5dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
    5e00:	6905      	ldr	r5, [r0, #16]
                                                         int* buffer_idx) {
    5e02:	4604      	mov	r4, r0
    5e04:	460e      	mov	r6, r1
    5e06:	4690      	mov	r8, r2
    5e08:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
    5e0a:	b15d      	cbz	r5, 5e24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
          memory_allocator_->GetTail()) {
    5e0c:	6840      	ldr	r0, [r0, #4]
    5e0e:	f00f fd4b 	bl	158a8 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
  if (scratch_buffer_handles_ != nullptr &&
    5e12:	4285      	cmp	r5, r0
    5e14:	d006      	beq.n	5e24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e16:	4910      	ldr	r1, [pc, #64]	; (5e58 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x5c>)
    5e18:	68a0      	ldr	r0, [r4, #8]
    5e1a:	f018 fa51 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
    5e1e:	2001      	movs	r0, #1
  scratch_buffer_count_ += 1;
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
  return kTfLiteOk;
}
    5e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
    5e24:	6860      	ldr	r0, [r4, #4]
              alignof(internal::ScratchBufferHandle)));
    5e26:	6803      	ldr	r3, [r0, #0]
          memory_allocator_->AllocateFromTail(
    5e28:	2204      	movs	r2, #4
    5e2a:	68db      	ldr	r3, [r3, #12]
    5e2c:	210c      	movs	r1, #12
    5e2e:	4798      	blx	r3
  if (handle == nullptr) {
    5e30:	b928      	cbnz	r0, 5e3e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e32:	490a      	ldr	r1, [pc, #40]	; (5e5c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x60>)
    5e34:	68a0      	ldr	r0, [r4, #8]
    5e36:	4632      	mov	r2, r6
    5e38:	f018 fa42 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5e3c:	e7ef      	b.n	5e1e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x22>
  *buffer_idx = scratch_buffer_count_;
    5e3e:	6963      	ldr	r3, [r4, #20]
  handle->node_idx = node_id;
    5e40:	6086      	str	r6, [r0, #8]
  *handle = {};
    5e42:	2500      	movs	r5, #0
  handle->bytes = bytes;
    5e44:	e9c0 5800 	strd	r5, r8, [r0]
  *buffer_idx = scratch_buffer_count_;
    5e48:	603b      	str	r3, [r7, #0]
  scratch_buffer_count_ += 1;
    5e4a:	6963      	ldr	r3, [r4, #20]
    5e4c:	3301      	adds	r3, #1
  scratch_buffer_handles_ = handle;
    5e4e:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return kTfLiteOk;
    5e52:	4628      	mov	r0, r5
    5e54:	e7e4      	b.n	5e20 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x24>
    5e56:	bf00      	nop
    5e58:	00026966 	.word	0x00026966
    5e5c:	000269c8 	.word	0x000269c8

00005e60 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    5e60:	b508      	push	{r3, lr}
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    5e62:	6943      	ldr	r3, [r0, #20]
    5e64:	428b      	cmp	r3, r1
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    5e66:	460a      	mov	r2, r1
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    5e68:	d805      	bhi.n	5e76 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5e6a:	4907      	ldr	r1, [pc, #28]	; (5e88 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
    5e6c:	6880      	ldr	r0, [r0, #8]
    5e6e:	f018 fa27 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
    5e72:	2000      	movs	r0, #0
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
}
    5e74:	bd08      	pop	{r3, pc}
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
    5e76:	1a59      	subs	r1, r3, r1
    5e78:	6903      	ldr	r3, [r0, #16]
    5e7a:	220c      	movs	r2, #12
    5e7c:	fb02 3101 	mla	r1, r2, r1, r3
    5e80:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    5e84:	e7f6      	b.n	5e74 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x14>
    5e86:	bf00      	nop
    5e88:	000269fd 	.word	0x000269fd

00005e8c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:
  TF_LITE_ENSURE_STATUS(
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  return kTfLiteOk;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
    5e8c:	b538      	push	{r3, r4, r5, lr}
    5e8e:	460c      	mov	r4, r1
    5e90:	4605      	mov	r5, r0
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    5e92:	2108      	movs	r1, #8
    5e94:	4620      	mov	r0, r4
    5e96:	f00f fbf7 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e9a:	b178      	cbz	r0, 5ebc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x30>
    5e9c:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
    5e9e:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5ea0:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
    5ea2:	588a      	ldr	r2, [r1, r2]
    5ea4:	2a01      	cmp	r2, #1
    5ea6:	d005      	beq.n	5eb4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5ea8:	4905      	ldr	r1, [pc, #20]	; (5ec0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x34>)
    5eaa:	68a8      	ldr	r0, [r5, #8]
    5eac:	f018 fa08 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5eb0:	2000      	movs	r0, #0
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
    5eb2:	bd38      	pop	{r3, r4, r5, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5eb4:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    5eb6:	685b      	ldr	r3, [r3, #4]
    5eb8:	4418      	add	r0, r3
  return (*subgraphs)[0];
    5eba:	e7fa      	b.n	5eb2 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x26>
  if (subgraphs->size() != 1) {
    5ebc:	6803      	ldr	r3, [r0, #0]
    5ebe:	deff      	udf	#255	; 0xff
    5ec0:	00026a28 	.word	0x00026a28

00005ec4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
    5ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5ecc:	4604      	mov	r4, r0
    5ece:	4691      	mov	r9, r2
    5ed0:	461f      	mov	r7, r3
  TFLITE_DCHECK(model != nullptr);
    5ed2:	460e      	mov	r6, r1
    5ed4:	b909      	cbnz	r1, 5eda <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x16>
    5ed6:	f018 fb8d 	bl	1e5f4 <abort>
  TFLITE_DCHECK(context != nullptr);
    5eda:	2a00      	cmp	r2, #0
    5edc:	d0fb      	beq.n	5ed6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  if (model_is_allocating_) {
    5ede:	7b03      	ldrb	r3, [r0, #12]
    5ee0:	b133      	cbz	r3, 5ef0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5ee2:	4916      	ldr	r1, [pc, #88]	; (5f3c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x78>)
    5ee4:	6880      	ldr	r0, [r0, #8]
    5ee6:	f018 f9eb 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5eea:	2001      	movs	r0, #1
}
    5eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    5ef0:	f7ff ffcc 	bl	5e8c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
    5ef4:	4605      	mov	r5, r0
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d0ed      	beq.n	5ed6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  model_is_allocating_ = true;
    5efa:	2301      	movs	r3, #1
    5efc:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(
    5efe:	464a      	mov	r2, r9
    5f00:	4603      	mov	r3, r0
    5f02:	4631      	mov	r1, r6
    5f04:	4620      	mov	r0, r4
    5f06:	f00f fbe9 	bl	156dc <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>
    5f0a:	2800      	cmp	r0, #0
    5f0c:	d1ee      	bne.n	5eec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
    5f0e:	6823      	ldr	r3, [r4, #0]
    5f10:	4642      	mov	r2, r8
    5f12:	691b      	ldr	r3, [r3, #16]
    5f14:	4629      	mov	r1, r5
    5f16:	4620      	mov	r0, r4
    5f18:	4798      	blx	r3
    5f1a:	2800      	cmp	r0, #0
    5f1c:	d1e6      	bne.n	5eec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    5f1e:	6823      	ldr	r3, [r4, #0]
    5f20:	f8d8 2000 	ldr.w	r2, [r8]
    5f24:	9208      	str	r2, [sp, #32]
    5f26:	f8d3 e014 	ldr.w	lr, [r3, #20]
    5f2a:	462a      	mov	r2, r5
    5f2c:	463b      	mov	r3, r7
    5f2e:	4631      	mov	r1, r6
    5f30:	4620      	mov	r0, r4
    5f32:	46f4      	mov	ip, lr
}
    5f34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    5f38:	4760      	bx	ip
    5f3a:	bf00      	nop
    5f3c:	00026a51 	.word	0x00026a51

00005f40 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
  if (!model_is_allocating_) {
    5f40:	7b03      	ldrb	r3, [r0, #12]
                                                   TfLiteContext* context) {
    5f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f46:	4604      	mov	r4, r0
    5f48:	460f      	mov	r7, r1
    5f4a:	4616      	mov	r6, r2
  if (!model_is_allocating_) {
    5f4c:	b933      	cbnz	r3, 5f5c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5f4e:	4910      	ldr	r1, [pc, #64]	; (5f90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x50>)
    5f50:	6880      	ldr	r0, [r0, #8]
    5f52:	f018 f9b5 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5f56:	2001      	movs	r0, #1
}
    5f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    5f5c:	f7ff ff96 	bl	5e8c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
    5f60:	4605      	mov	r5, r0
    5f62:	b908      	cbnz	r0, 5f68 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x28>
    5f64:	f018 fb46 	bl	1e5f4 <abort>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
    5f68:	6823      	ldr	r3, [r4, #0]
    5f6a:	4632      	mov	r2, r6
    5f6c:	f8d3 801c 	ldr.w	r8, [r3, #28]
    5f70:	4639      	mov	r1, r7
    5f72:	4603      	mov	r3, r0
    5f74:	4620      	mov	r0, r4
    5f76:	47c0      	blx	r8
    5f78:	2800      	cmp	r0, #0
    5f7a:	d1ed      	bne.n	5f58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
    5f7c:	6823      	ldr	r3, [r4, #0]
    5f7e:	462a      	mov	r2, r5
    5f80:	699b      	ldr	r3, [r3, #24]
    5f82:	4631      	mov	r1, r6
    5f84:	4620      	mov	r0, r4
    5f86:	4798      	blx	r3
    5f88:	2800      	cmp	r0, #0
    5f8a:	d1e5      	bne.n	5f58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  model_is_allocating_ = false;
    5f8c:	7320      	strb	r0, [r4, #12]
  return kTfLiteOk;
    5f8e:	e7e3      	b.n	5f58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
    5f90:	00026aa6 	.word	0x00026aa6

00005f94 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
    5f94:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5f96:	6803      	ldr	r3, [r0, #0]
    5f98:	4299      	cmp	r1, r3
    5f9a:	d306      	bcc.n	5faa <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
    5f9c:	4b05      	ldr	r3, [pc, #20]	; (5fb4 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
    5f9e:	4a06      	ldr	r2, [pc, #24]	; (5fb8 <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
    5fa0:	4806      	ldr	r0, [pc, #24]	; (5fbc <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
    5fa2:	f240 1101 	movw	r1, #257	; 0x101
    5fa6:	f00e fa48 	bl	1443a <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    5faa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  }
    5fae:	e9d1 0101 	ldrd	r0, r1, [r1, #4]
    5fb2:	bd08      	pop	{r3, pc}
    5fb4:	00026af1 	.word	0x00026af1
    5fb8:	00026afc 	.word	0x00026afc
    5fbc:	00026bcf 	.word	0x00026bcf

00005fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
    5fc0:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5fc2:	6803      	ldr	r3, [r0, #0]
    5fc4:	4299      	cmp	r1, r3
    5fc6:	d306      	bcc.n	5fd6 <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
    5fc8:	4b05      	ldr	r3, [pc, #20]	; (5fe0 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
    5fca:	4a06      	ldr	r2, [pc, #24]	; (5fe4 <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
    5fcc:	4806      	ldr	r0, [pc, #24]	; (5fe8 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
    5fce:	f240 1101 	movw	r1, #257	; 0x101
    5fd2:	f00e fa32 	bl	1443a <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    5fd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  }
    5fda:	6848      	ldr	r0, [r1, #4]
    5fdc:	bd08      	pop	{r3, pc}
    5fde:	bf00      	nop
    5fe0:	00026af1 	.word	0x00026af1
    5fe4:	00026c28 	.word	0x00026c28
    5fe8:	00026bcf 	.word	0x00026bcf

00005fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    5fec:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5fee:	6803      	ldr	r3, [r0, #0]
    5ff0:	4299      	cmp	r1, r3
    5ff2:	d306      	bcc.n	6002 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
    5ff4:	4b06      	ldr	r3, [pc, #24]	; (6010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
    5ff6:	4a07      	ldr	r2, [pc, #28]	; (6014 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
    5ff8:	4807      	ldr	r0, [pc, #28]	; (6018 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
    5ffa:	f240 1101 	movw	r1, #257	; 0x101
    5ffe:	f00e fa1c 	bl	1443a <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6002:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6004:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6008:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    600c:	4410      	add	r0, r2
    600e:	bd08      	pop	{r3, pc}
    6010:	00026af1 	.word	0x00026af1
    6014:	00026ce7 	.word	0x00026ce7
    6018:	00026bcf 	.word	0x00026bcf

0000601c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    601c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    601e:	6803      	ldr	r3, [r0, #0]
    6020:	4299      	cmp	r1, r3
    6022:	d306      	bcc.n	6032 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x16>
    6024:	4b06      	ldr	r3, [pc, #24]	; (6040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x24>)
    6026:	4a07      	ldr	r2, [pc, #28]	; (6044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x28>)
    6028:	4807      	ldr	r0, [pc, #28]	; (6048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x2c>)
    602a:	f240 1101 	movw	r1, #257	; 0x101
    602e:	f00e fa04 	bl	1443a <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6032:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6034:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6038:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    603c:	4410      	add	r0, r2
    603e:	bd08      	pop	{r3, pc}
    6040:	00026af1 	.word	0x00026af1
    6044:	00026dd8 	.word	0x00026dd8
    6048:	00026bcf 	.word	0x00026bcf

0000604c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    604c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    604e:	6803      	ldr	r3, [r0, #0]
    6050:	4299      	cmp	r1, r3
    6052:	d306      	bcc.n	6062 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
    6054:	4b06      	ldr	r3, [pc, #24]	; (6070 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
    6056:	4a07      	ldr	r2, [pc, #28]	; (6074 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
    6058:	4807      	ldr	r0, [pc, #28]	; (6078 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
    605a:	f240 1101 	movw	r1, #257	; 0x101
    605e:	f00e f9ec 	bl	1443a <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6062:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6064:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6068:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    606c:	4410      	add	r0, r2
    606e:	bd08      	pop	{r3, pc}
    6070:	00026af1 	.word	0x00026af1
    6074:	00026ecd 	.word	0x00026ecd
    6078:	00026bcf 	.word	0x00026bcf

0000607c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    607c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6080:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    6082:	460d      	mov	r5, r1
    6084:	4607      	mov	r7, r0
  *result = {};
    6086:	2100      	movs	r1, #0
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    6088:	4691      	mov	r9, r2
  *result = {};
    608a:	4620      	mov	r0, r4
    608c:	2240      	movs	r2, #64	; 0x40
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    608e:	4698      	mov	r8, r3
  *result = {};
    6090:	f018 fad3 	bl	1e63a <memset>
    auto field_offset = GetOptionalFieldOffset(field);
    6094:	2106      	movs	r1, #6
    6096:	4628      	mov	r0, r5
    6098:	f00f faf6 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    609c:	b100      	cbz	r0, 60a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24>
    609e:	5628      	ldrsb	r0, [r5, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    60a0:	4642      	mov	r2, r8
    60a2:	4621      	mov	r1, r4
    60a4:	b2c0      	uxtb	r0, r0
    60a6:	f00a f83b 	bl	10120 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    60aa:	4606      	mov	r6, r0
    60ac:	2800      	cmp	r0, #0
    60ae:	d161      	bne.n	6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  result->is_variable = flatbuffer_tensor.is_variable();
    60b0:	4628      	mov	r0, r5
    60b2:	f00f fb05 	bl	156c0 <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
    60b6:	2108      	movs	r1, #8
    60b8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    60bc:	4628      	mov	r0, r5
    60be:	f00f fae3 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    60c2:	2800      	cmp	r0, #0
    60c4:	d05a      	beq.n	617c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    60c6:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    60c8:	4648      	mov	r0, r9
    60ca:	f7ff ffbf 	bl	604c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    60ce:	b148      	cbz	r0, 60e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    60d0:	2104      	movs	r1, #4
    60d2:	f00f fb1b 	bl	1570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
    if (auto* array = buffer->data()) {
    60d6:	b128      	cbz	r0, 60e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
      if (array->size()) {
    60d8:	6803      	ldr	r3, [r0, #0]
    60da:	b11b      	cbz	r3, 60e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    60dc:	3004      	adds	r0, #4
        result->allocation_type = kTfLiteMmapRo;
    60de:	2301      	movs	r3, #1
        result->data.data =
    60e0:	6060      	str	r0, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
    60e2:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
    60e4:	6863      	ldr	r3, [r4, #4]
    60e6:	b90b      	cbnz	r3, 60ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x70>
    result->allocation_type = kTfLiteArenaRw;
    60e8:	2302      	movs	r3, #2
    60ea:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    60ec:	4643      	mov	r3, r8
    60ee:	aa01      	add	r2, sp, #4
    60f0:	f104 0118 	add.w	r1, r4, #24
    60f4:	4628      	mov	r0, r5
    60f6:	f018 f9df 	bl	1e4b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    60fa:	4606      	mov	r6, r0
    60fc:	2800      	cmp	r0, #0
    60fe:	d139      	bne.n	6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6100:	2104      	movs	r1, #4
    6102:	4628      	mov	r0, r5
    6104:	f00f fb0b 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    6108:	2800      	cmp	r0, #0
    610a:	d139      	bne.n	6180 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    610c:	4b3c      	ldr	r3, [pc, #240]	; (6200 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x184>)
    610e:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
    6110:	210c      	movs	r1, #12
    6112:	4628      	mov	r0, r5
    6114:	f00f fab8 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6118:	b360      	cbz	r0, 6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    auto p = data_ + field_offset;
    611a:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    611c:	582d      	ldr	r5, [r5, r0]
      src_quantization->zero_point() &&
    611e:	1955      	adds	r5, r2, r5
    6120:	d028      	beq.n	6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  if (src_quantization && src_quantization->scale() &&
    6122:	4628      	mov	r0, r5
    6124:	f00f fab8 	bl	15698 <_ZNK6tflite22QuantizationParameters5scaleEv>
    6128:	4681      	mov	r9, r0
    612a:	b318      	cbz	r0, 6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    612c:	6803      	ldr	r3, [r0, #0]
    612e:	b30b      	cbz	r3, 6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
    6130:	4628      	mov	r0, r5
    6132:	f00f fabb 	bl	156ac <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
    6136:	b1e8      	cbz	r0, 6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
    6138:	6803      	ldr	r3, [r0, #0]
    613a:	b1db      	cbz	r3, 6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    613c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    result->params.scale = src_quantization->scale()->Get(0);
    6140:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    6142:	4628      	mov	r0, r5
    6144:	f00f fab2 	bl	156ac <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    6148:	2100      	movs	r1, #0
    614a:	f7ff ff23 	bl	5f94 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
    614e:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
    6150:	4628      	mov	r0, r5
    6152:	f00f faa1 	bl	15698 <_ZNK6tflite22QuantizationParameters5scaleEv>
                                        alignof(TfLiteAffineQuantization)));
    6156:	683b      	ldr	r3, [r7, #0]
    int channels = src_quantization->scale()->size();
    6158:	f8d0 a000 	ldr.w	sl, [r0]
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
    615c:	68db      	ldr	r3, [r3, #12]
    615e:	2204      	movs	r2, #4
    6160:	210c      	movs	r1, #12
    6162:	4638      	mov	r0, r7
    6164:	4798      	blx	r3
    if (quantization == nullptr) {
    6166:	4681      	mov	r9, r0
    6168:	b988      	cbnz	r0, 618e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x112>
      TF_LITE_REPORT_ERROR(error_reporter,
    616a:	4926      	ldr	r1, [pc, #152]	; (6204 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>)
      TF_LITE_REPORT_ERROR(error_reporter,
    616c:	4640      	mov	r0, r8
    616e:	f018 f8a7 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6172:	2601      	movs	r6, #1
}
    6174:	4630      	mov	r0, r6
    6176:	b003      	add	sp, #12
    6178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    617c:	4601      	mov	r1, r0
    617e:	e7a3      	b.n	60c8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4c>
  TFLITE_DCHECK(error_reporter != nullptr);
    6180:	f1b8 0f00 	cmp.w	r8, #0
    6184:	d101      	bne.n	618a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
    6186:	f018 fa35 	bl	1e5f4 <abort>
    *result = const_cast<kTfLiteArrayType*>(
    618a:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    618c:	e7c0      	b.n	6110 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x94>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    618e:	683b      	ldr	r3, [r7, #0]
    6190:	4650      	mov	r0, sl
    6192:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    6196:	f7fa f97f 	bl	498 <TfLiteIntArrayGetSizeInBytes>
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    619a:	2204      	movs	r2, #4
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    619c:	4601      	mov	r1, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    619e:	4638      	mov	r0, r7
    61a0:	47d8      	blx	fp
    61a2:	4607      	mov	r7, r0
    quantization->zero_point =
    61a4:	f8c9 0004 	str.w	r0, [r9, #4]
    if (quantization->zero_point == nullptr) {
    61a8:	b908      	cbnz	r0, 61ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter,
    61aa:	4917      	ldr	r1, [pc, #92]	; (6208 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>)
    61ac:	e7de      	b.n	616c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    61ae:	4628      	mov	r0, r5
    61b0:	f00f fa72 	bl	15698 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
    61b4:	f1b8 0f00 	cmp.w	r8, #0
    61b8:	d0e5      	beq.n	6186 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    61ba:	2800      	cmp	r0, #0
    61bc:	d0e3      	beq.n	6186 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
    *result = const_cast<kTfLiteArrayType*>(
    61be:	f8c9 0000 	str.w	r0, [r9]
    for (int i = 0; i < channels; i++) {
    61c2:	f04f 0800 	mov.w	r8, #0
    quantization->zero_point->size = channels;
    61c6:	f8c7 a000 	str.w	sl, [r7]
    for (int i = 0; i < channels; i++) {
    61ca:	45c2      	cmp	sl, r8
    61cc:	dd0a      	ble.n	61e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x168>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    61ce:	4628      	mov	r0, r5
    61d0:	f00f fa6c 	bl	156ac <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    61d4:	4641      	mov	r1, r8
    61d6:	f7ff fedd 	bl	5f94 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
    61da:	f108 0801 	add.w	r8, r8, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    61de:	f847 0f04 	str.w	r0, [r7, #4]!
    for (int i = 0; i < channels; i++) {
    61e2:	e7f2      	b.n	61ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x14e>
    auto field_offset = GetOptionalFieldOffset(field);
    61e4:	2110      	movs	r1, #16
    61e6:	4628      	mov	r0, r5
    61e8:	f00f fa4e 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    61ec:	b100      	cbz	r0, 61f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x174>
    61ee:	5828      	ldr	r0, [r5, r0]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    61f0:	f8c9 0008 	str.w	r0, [r9, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    61f4:	2301      	movs	r3, #1
    61f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    61fa:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    61fe:	e7b9      	b.n	6174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    6200:	000258f0 	.word	0x000258f0
    6204:	00026fbe 	.word	0x00026fbe
    6208:	00026fec 	.word	0x00026fec

0000620c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
    620c:	e92d 4fe3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, sl, fp, lr}
    6210:	4606      	mov	r6, r0
    6212:	460f      	mov	r7, r1
    6214:	4690      	mov	r8, r2
    6216:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6218:	2500      	movs	r5, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    621a:	2104      	movs	r1, #4
    621c:	4648      	mov	r0, r9
    621e:	f00f fa87 	bl	15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    6222:	6803      	ldr	r3, [r0, #0]
    6224:	429d      	cmp	r5, r3
    6226:	d224      	bcs.n	6272 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66>
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
    6228:	4629      	mov	r1, r5
    622a:	f7ff fedf 	bl	5fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    622e:	210c      	movs	r1, #12
    6230:	4682      	mov	sl, r0
    6232:	4638      	mov	r0, r7
    6234:	f00f fa28 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    6238:	f8d6 b004 	ldr.w	fp, [r6, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    623c:	4602      	mov	r2, r0
    623e:	b110      	cbz	r0, 6246 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a>
    6240:	58ba      	ldr	r2, [r7, r2]
    auto p = data_ + field_offset;
    6242:	1838      	adds	r0, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6244:	4402      	add	r2, r0
    6246:	f8d8 3008 	ldr.w	r3, [r8, #8]
    624a:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    624e:	9300      	str	r3, [sp, #0]
    6250:	4651      	mov	r1, sl
    6252:	68b3      	ldr	r3, [r6, #8]
    6254:	4658      	mov	r0, fp
    6256:	f7ff ff11 	bl	607c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    if (status != kTfLiteOk) {
    625a:	b140      	cbz	r0, 626e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x62>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    625c:	4906      	ldr	r1, [pc, #24]	; (6278 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6c>)
    625e:	68b0      	ldr	r0, [r6, #8]
    6260:	462a      	mov	r2, r5
    6262:	f018 f82d 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6266:	2001      	movs	r0, #1
}
    6268:	b002      	add	sp, #8
    626a:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    626e:	3501      	adds	r5, #1
    6270:	e7d3      	b.n	621a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe>
  return kTfLiteOk;
    6272:	2000      	movs	r0, #0
    6274:	e7f8      	b.n	6268 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    6276:	bf00      	nop
    6278:	0002701a 	.word	0x0002701a

0000627c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
                                               const SubGraph* subgraph) {
    627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6280:	4606      	mov	r6, r0
    6282:	460c      	mov	r4, r1
    6284:	4691      	mov	r9, r2
  for (size_t i = 0; i < context->tensors_size; ++i) {
    6286:	2500      	movs	r5, #0
    6288:	6823      	ldr	r3, [r4, #0]
    628a:	42ab      	cmp	r3, r5
    628c:	d926      	bls.n	62dc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x60>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    628e:	2104      	movs	r1, #4
    6290:	4648      	mov	r0, r9
    6292:	f00f fa4d 	bl	15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    if (subgraph->tensors()->Get(i)->is_variable()) {
    6296:	4629      	mov	r1, r5
    6298:	f7ff fea8 	bl	5fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    629c:	f00f fa10 	bl	156c0 <_ZNK6tflite6Tensor11is_variableEv>
    62a0:	ea4f 1885 	mov.w	r8, r5, lsl #6
    62a4:	b1a0      	cbz	r0, 62d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
    62a6:	68a7      	ldr	r7, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    62a8:	6870      	ldr	r0, [r6, #4]
    62aa:	4447      	add	r7, r8
          context->tensors[i].bytes, kBufferAlignment);
    62ac:	6803      	ldr	r3, [r0, #0]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    62ae:	69b9      	ldr	r1, [r7, #24]
    62b0:	68db      	ldr	r3, [r3, #12]
    62b2:	2210      	movs	r2, #16
    62b4:	4798      	blx	r3
      if (context->tensors[i].data.data == nullptr) {
    62b6:	68a3      	ldr	r3, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    62b8:	6078      	str	r0, [r7, #4]
      if (context->tensors[i].data.data == nullptr) {
    62ba:	4443      	add	r3, r8
    62bc:	685a      	ldr	r2, [r3, #4]
    62be:	b93a      	cbnz	r2, 62d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
        TF_LITE_REPORT_ERROR(error_reporter_,
    62c0:	699a      	ldr	r2, [r3, #24]
    62c2:	4907      	ldr	r1, [pc, #28]	; (62e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x64>)
    62c4:	68b0      	ldr	r0, [r6, #8]
    62c6:	f017 fffb 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    62ca:	2001      	movs	r0, #1
}
    62cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tflite::ResetVariableTensor(&(context->tensors[i]));
    62d0:	68a0      	ldr	r0, [r4, #8]
    62d2:	4440      	add	r0, r8
    62d4:	f018 f866 	bl	1e3a4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
    62d8:	3501      	adds	r5, #1
    62da:	e7d5      	b.n	6288 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc>
  return kTfLiteOk;
    62dc:	2000      	movs	r0, #0
    62de:	e7f5      	b.n	62cc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x50>
    62e0:	00027039 	.word	0x00027039

000062e4 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
    62e4:	b538      	push	{r3, r4, r5, lr}
    62e6:	460c      	mov	r4, r1
    62e8:	4605      	mov	r5, r0
    62ea:	2104      	movs	r1, #4
    62ec:	4610      	mov	r0, r2
    62ee:	f00f fa1f 	bl	15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  context->tensors_size = subgraph->tensors()->size();
    62f2:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    62f4:	6868      	ldr	r0, [r5, #4]
  context->tensors_size = subgraph->tensors()->size();
    62f6:	6021      	str	r1, [r4, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
    62f8:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    62fa:	2204      	movs	r2, #4
    62fc:	68db      	ldr	r3, [r3, #12]
    62fe:	0189      	lsls	r1, r1, #6
    6300:	4798      	blx	r3
  context->tensors =
    6302:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
    6304:	b938      	cbnz	r0, 6316 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    TF_LITE_REPORT_ERROR(
    6306:	6822      	ldr	r2, [r4, #0]
    6308:	4904      	ldr	r1, [pc, #16]	; (631c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x38>)
    630a:	68a8      	ldr	r0, [r5, #8]
    630c:	0192      	lsls	r2, r2, #6
    630e:	f017 ffd7 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    6312:	2001      	movs	r0, #1
}
    6314:	bd38      	pop	{r3, r4, r5, pc}
  return kTfLiteOk;
    6316:	2000      	movs	r0, #0
    6318:	e7fc      	b.n	6314 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x30>
    631a:	bf00      	nop
    631c:	00027067 	.word	0x00027067

00006320 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
    6320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6324:	ed2d 8b02 	vpush	{d8}
    6328:	460c      	mov	r4, r1
    632a:	b089      	sub	sp, #36	; 0x24
    632c:	4605      	mov	r5, r0
    auto field_offset = GetOptionalFieldOffset(field);
    632e:	2106      	movs	r1, #6
    6330:	4620      	mov	r0, r4
    6332:	ee08 2a90 	vmov	s17, r2
    6336:	4698      	mov	r8, r3
    6338:	f00f f9a6 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    633c:	b340      	cbz	r0, 6390 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
    633e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6340:	5820      	ldr	r0, [r4, r0]
    6342:	4403      	add	r3, r0
    6344:	9303      	str	r3, [sp, #12]
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
    6346:	686b      	ldr	r3, [r5, #4]
      : memory_allocator_(memory_allocator) {}
    6348:	4a5d      	ldr	r2, [pc, #372]	; (64c0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a0>)
    634a:	9c14      	ldr	r4, [sp, #80]	; 0x50
    634c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    6350:	f04f 0b00 	mov.w	fp, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6354:	ee18 0a90 	vmov	r0, s17
    6358:	210a      	movs	r1, #10
    635a:	f00f f9f2 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    635e:	6803      	ldr	r3, [r0, #0]
    6360:	459b      	cmp	fp, r3
    6362:	f080 80a9 	bcs.w	64b8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x198>
    const auto* op = subgraph->operators()->Get(i);
    6366:	4659      	mov	r1, fp
    6368:	f7ff fe58 	bl	601c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    636c:	2104      	movs	r1, #4
    636e:	4607      	mov	r7, r0
    6370:	f00f f98a 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6374:	b170      	cbz	r0, 6394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x74>
    6376:	583e      	ldr	r6, [r7, r0]
    if (index >= opcodes->size()) {
    6378:	9b03      	ldr	r3, [sp, #12]
    637a:	68a8      	ldr	r0, [r5, #8]
    637c:	681b      	ldr	r3, [r3, #0]
    637e:	42b3      	cmp	r3, r6
    6380:	d80a      	bhi.n	6398 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x78>
      TF_LITE_REPORT_ERROR(error_reporter_,
    6382:	4950      	ldr	r1, [pc, #320]	; (64c4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a4>)
    6384:	4632      	mov	r2, r6
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    6386:	f017 ff9b 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    638a:	f04f 0a01 	mov.w	sl, #1
    638e:	e028      	b.n	63e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6390:	9003      	str	r0, [sp, #12]
    6392:	e7d8      	b.n	6346 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6394:	4606      	mov	r6, r0
    6396:	e7ef      	b.n	6378 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6398:	9b03      	ldr	r3, [sp, #12]
    639a:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    639c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    63a0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    63a4:	4499      	add	r9, r3
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
    63a6:	4602      	mov	r2, r0
    63a8:	f104 0324 	add.w	r3, r4, #36	; 0x24
    63ac:	4641      	mov	r1, r8
    63ae:	4648      	mov	r0, r9
    63b0:	f00b f964 	bl	1167c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
    63b4:	ee08 4a10 	vmov	s16, r4
    if (status != kTfLiteOk) {
    63b8:	4682      	mov	sl, r0
    63ba:	b1c0      	cbz	r0, 63ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
    63bc:	2104      	movs	r1, #4
    63be:	4648      	mov	r0, r9
      TF_LITE_REPORT_ERROR(error_reporter_,
    63c0:	68ac      	ldr	r4, [r5, #8]
    63c2:	f00f f961 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    63c6:	b108      	cbz	r0, 63cc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
    63c8:	f919 0000 	ldrsb.w	r0, [r9, r0]
    63cc:	493e      	ldr	r1, [pc, #248]	; (64c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a8>)
    VT_BUILTIN_CODE = 4,
    VT_CUSTOM_CODE = 6,
    VT_VERSION = 8
  };
  tflite::BuiltinOperator builtin_code() const {
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    63ce:	b2c0      	uxtb	r0, r0
  return (v < low) || (high < v);
    63d0:	287e      	cmp	r0, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    63d2:	bf96      	itet	ls
    63d4:	4b3d      	ldrls	r3, [pc, #244]	; (64cc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    63d6:	4a3e      	ldrhi	r2, [pc, #248]	; (64d0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
  return EnumNamesBuiltinOperator()[index];
    63d8:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
    63dc:	4620      	mov	r0, r4
    63de:	f017 ff6f 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    63e2:	4650      	mov	r0, sl
    63e4:	b009      	add	sp, #36	; 0x24
    63e6:	ecbd 8b02 	vpop	{d8}
    63ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* registration = node_and_registrations[i].registration;
    63ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
    63f0:	b91b      	cbnz	r3, 63fa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
    63f2:	4938      	ldr	r1, [pc, #224]	; (64d4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b4>)
    63f4:	68a8      	ldr	r0, [r5, #8]
    63f6:	4632      	mov	r2, r6
    63f8:	e7c5      	b.n	6386 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
    BuiltinOperator op_type =
    63fa:	7d1e      	ldrb	r6, [r3, #20]
    unsigned char* builtin_data = nullptr;
    63fc:	9005      	str	r0, [sp, #20]
    if (op_type == BuiltinOperator_CUSTOM) {
    63fe:	2e20      	cmp	r6, #32
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6400:	f04f 010e 	mov.w	r1, #14
    6404:	4638      	mov	r0, r7
    6406:	d113      	bne.n	6430 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x110>
    6408:	f00f f980 	bl	1570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
    640c:	b960      	cbnz	r0, 6428 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    size_t custom_data_size = 0;
    640e:	f04f 0a00 	mov.w	sl, #0
    const char* custom_data = nullptr;
    6412:	4656      	mov	r6, sl
    6414:	2106      	movs	r1, #6
    6416:	4638      	mov	r0, r7
    6418:	f00f f981 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  TFLITE_DCHECK(error_reporter != nullptr);
    641c:	68ab      	ldr	r3, [r5, #8]
    641e:	4681      	mov	r9, r0
    6420:	2b00      	cmp	r3, #0
    6422:	d12f      	bne.n	6484 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x164>
    6424:	f018 f8e6 	bl	1e5f4 <abort>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6428:	4606      	mov	r6, r0
        custom_data_size = op->custom_options()->size();
    642a:	f856 ab04 	ldr.w	sl, [r6], #4
    642e:	e7f1      	b.n	6414 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf4>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6430:	f00f f96c 	bl	1570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
    6434:	b148      	cbz	r0, 644a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x12a>
  return (v < low) || (high < v);
    6436:	2e7e      	cmp	r6, #126	; 0x7e
    6438:	bf98      	it	ls
    643a:	4b24      	ldrls	r3, [pc, #144]	; (64cc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(
    643c:	68a8      	ldr	r0, [r5, #8]
    643e:	bf94      	ite	ls
    6440:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    6444:	4a22      	ldrhi	r2, [pc, #136]	; (64d0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
    6446:	4924      	ldr	r1, [pc, #144]	; (64d8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b8>)
    6448:	e79d      	b.n	6386 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
          op_resolver.GetOpDataParser(op_type);
    644a:	f8d8 3000 	ldr.w	r3, [r8]
    644e:	4631      	mov	r1, r6
    6450:	699b      	ldr	r3, [r3, #24]
    6452:	4640      	mov	r0, r8
    6454:	4798      	blx	r3
      if (parser == nullptr) {
    6456:	4681      	mov	r9, r0
    6458:	b948      	cbnz	r0, 646e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x14e>
    645a:	2e7e      	cmp	r6, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    645c:	bf98      	it	ls
    645e:	4b1b      	ldrls	r3, [pc, #108]	; (64cc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    6460:	68a8      	ldr	r0, [r5, #8]
    6462:	bf94      	ite	ls
    6464:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    6468:	4a19      	ldrhi	r2, [pc, #100]	; (64d0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
    646a:	491c      	ldr	r1, [pc, #112]	; (64dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1bc>)
    646c:	e78b      	b.n	6386 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
    646e:	ab05      	add	r3, sp, #20
    6470:	9300      	str	r3, [sp, #0]
    6472:	68aa      	ldr	r2, [r5, #8]
    6474:	ab06      	add	r3, sp, #24
    6476:	4631      	mov	r1, r6
    6478:	4638      	mov	r0, r7
    647a:	47c8      	blx	r9
    647c:	4682      	mov	sl, r0
    647e:	2800      	cmp	r0, #0
    6480:	d0c5      	beq.n	640e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xee>
    6482:	e7ae      	b.n	63e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    6484:	2800      	cmp	r0, #0
    6486:	d0cd      	beq.n	6424 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x104>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6488:	4638      	mov	r0, r7
    648a:	2108      	movs	r1, #8
    648c:	f00f f947 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    6490:	3428      	adds	r4, #40	; 0x28
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    6492:	4607      	mov	r7, r0
    6494:	2800      	cmp	r0, #0
    6496:	d0c5      	beq.n	6424 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x104>
    *node = {};
    6498:	ee18 0a10 	vmov	r0, s16
    649c:	2224      	movs	r2, #36	; 0x24
    649e:	2100      	movs	r1, #0
    64a0:	f018 f8cb 	bl	1e63a <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
    64a4:	9b05      	ldr	r3, [sp, #20]
    node->custom_initial_data_size = custom_data_size;
    64a6:	f844 ac0c 	str.w	sl, [r4, #-12]
    node->outputs = outputs_array;
    64aa:	e944 970a 	strd	r9, r7, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
    64ae:	e944 3605 	strd	r3, r6, [r4, #-20]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    64b2:	f10b 0b01 	add.w	fp, fp, #1
    64b6:	e74d      	b.n	6354 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
  return kTfLiteOk;
    64b8:	f04f 0a00 	mov.w	sl, #0
    64bc:	e791      	b.n	63e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    64be:	bf00      	nop
    64c0:	000258fc 	.word	0x000258fc
    64c4:	000270a9 	.word	0x000270a9
    64c8:	000270d3 	.word	0x000270d3
    64cc:	000256f0 	.word	0x000256f0
    64d0:	0002604b 	.word	0x0002604b
    64d4:	00027100 	.word	0x00027100
    64d8:	00027121 	.word	0x00027121
    64dc:	00027167 	.word	0x00027167

000064e0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
    64e0:	b570      	push	{r4, r5, r6, lr}
    64e2:	4604      	mov	r4, r0
    64e4:	4608      	mov	r0, r1
    64e6:	210a      	movs	r1, #10
    64e8:	4615      	mov	r5, r2
    64ea:	f00f f92a 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
      memory_allocator_->AllocateFromTail(
    64ee:	6866      	ldr	r6, [r4, #4]
    64f0:	6801      	ldr	r1, [r0, #0]
          alignof(NodeAndRegistration)));
    64f2:	6833      	ldr	r3, [r6, #0]
      memory_allocator_->AllocateFromTail(
    64f4:	2028      	movs	r0, #40	; 0x28
    64f6:	4341      	muls	r1, r0
    64f8:	68db      	ldr	r3, [r3, #12]
    64fa:	2204      	movs	r2, #4
    64fc:	4630      	mov	r0, r6
    64fe:	4798      	blx	r3
  if (output == nullptr) {
    6500:	b928      	cbnz	r0, 650e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2e>
    TF_LITE_REPORT_ERROR(
    6502:	4904      	ldr	r1, [pc, #16]	; (6514 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>)
    6504:	68a0      	ldr	r0, [r4, #8]
    6506:	f017 fedb 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    650a:	2001      	movs	r0, #1
}
    650c:	bd70      	pop	{r4, r5, r6, pc}
  *node_and_registrations = output;
    650e:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    6510:	2000      	movs	r0, #0
    6512:	e7fb      	b.n	650c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2c>
    6514:	00027184 	.word	0x00027184

00006518 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
    6518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    651c:	ed2d 8b02 	vpush	{d8}
    6520:	b099      	sub	sp, #100	; 0x64
    6522:	4605      	mov	r5, r0
    6524:	460e      	mov	r6, r1
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
    6526:	6881      	ldr	r1, [r0, #8]
    6528:	6840      	ldr	r0, [r0, #4]
                                                    const SubGraph* subgraph) {
    652a:	9204      	str	r2, [sp, #16]
    652c:	469a      	mov	sl, r3
                                        memory_allocator_->GetTail());
    652e:	9103      	str	r1, [sp, #12]
    6530:	f00f f9b8 	bl	158a4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
    6534:	9002      	str	r0, [sp, #8]
    6536:	6868      	ldr	r0, [r5, #4]
    6538:	f00f f9b6 	bl	158a8 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
    653c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    6540:	4603      	mov	r3, r0
    6542:	a807      	add	r0, sp, #28
    6544:	f000 fcd4 	bl	6ef0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
    6548:	68ab      	ldr	r3, [r5, #8]
    654a:	2104      	movs	r1, #4
    654c:	4650      	mov	r0, sl
    654e:	ee08 3a10 	vmov	s16, r3
    6552:	f00f f8ed 	bl	15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    TF_LITE_ENSURE_STATUS(
    6556:	6803      	ldr	r3, [r0, #0]
    6558:	9302      	str	r3, [sp, #8]
  size_t Size() const { return tensor_count_ + buffer_count_; }
    655a:	9a02      	ldr	r2, [sp, #8]
    655c:	696b      	ldr	r3, [r5, #20]
    655e:	18d3      	adds	r3, r2, r3
    6560:	9303      	str	r3, [sp, #12]
  size_t bytes = sizeof(AllocationInfo) * Size();
    6562:	9a03      	ldr	r2, [sp, #12]
    6564:	2318      	movs	r3, #24
    6566:	4353      	muls	r3, r2
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    6568:	4619      	mov	r1, r3
    656a:	2204      	movs	r2, #4
    656c:	a807      	add	r0, sp, #28
  size_t bytes = sizeof(AllocationInfo) * Size();
    656e:	ee08 3a90 	vmov	s17, r3
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    6572:	f000 fca3 	bl	6ebc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  if (info_ == nullptr) {
    6576:	4604      	mov	r4, r0
    6578:	2800      	cmp	r0, #0
    657a:	d03c      	beq.n	65f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xde>
    auto field_offset = GetOptionalFieldOffset(field);
    657c:	2110      	movs	r1, #16
    657e:	4630      	mov	r0, r6
    6580:	f00f f882 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6584:	2800      	cmp	r0, #0
    6586:	d142      	bne.n	660e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf6>
    6588:	4607      	mov	r7, r0
  for (size_t i = 0; i < tensor_count_; ++i) {
    658a:	9b04      	ldr	r3, [sp, #16]
    658c:	689b      	ldr	r3, [r3, #8]
    658e:	46a0      	mov	r8, r4
    6590:	f103 0b04 	add.w	fp, r3, #4
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
    TF_LITE_ENSURE_STATUS(
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    6594:	46a1      	mov	r9, r4
  for (size_t i = 0; i < tensor_count_; ++i) {
    6596:	2600      	movs	r6, #0
    current->first_created = -1;
    6598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < tensor_count_; ++i) {
    659c:	9a02      	ldr	r2, [sp, #8]
    659e:	42b2      	cmp	r2, r6
    65a0:	f000 8094 	beq.w	66cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1b4>
    current->bytes = runtime_tensors[i].bytes;
    65a4:	f8db 2014 	ldr.w	r2, [fp, #20]
    current->output_ptr = &(runtime_tensors[i].data.data);
    65a8:	f8c9 b004 	str.w	fp, [r9, #4]
    current->bytes = runtime_tensors[i].bytes;
    65ac:	f8c9 2000 	str.w	r2, [r9]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    65b0:	f8db 2000 	ldr.w	r2, [fp]
    current->last_used = -1;
    65b4:	e9c9 3302 	strd	r3, r3, [r9, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    65b8:	2a00      	cmp	r2, #0
    65ba:	f040 8082 	bne.w	66c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    65be:	2104      	movs	r1, #4
    65c0:	4650      	mov	r0, sl
    65c2:	f00f f8b5 	bl	15730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
                                (!subgraph->tensors()->Get(i)->is_variable());
    65c6:	4631      	mov	r1, r6
    65c8:	f7ff fd10 	bl	5fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    65cc:	f00f f878 	bl	156c0 <_ZNK6tflite6Tensor11is_variableEv>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    65d0:	f080 0001 	eor.w	r0, r0, #1
    65d4:	b2c0      	uxtb	r0, r0
    65d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65da:	f889 0014 	strb.w	r0, [r9, #20]
    if (offline_offsets) {
    65de:	2f00      	cmp	r7, #0
    65e0:	d071      	beq.n	66c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
      current->offline_offset = offline_offsets[i];
    65e2:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    65e6:	f8c9 2010 	str.w	r2, [r9, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    65ea:	3601      	adds	r6, #1
    65ec:	f109 0918 	add.w	r9, r9, #24
    65f0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    65f4:	e7d2      	b.n	659c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x84>
    TF_LITE_REPORT_ERROR(
    65f6:	ee18 2a90 	vmov	r2, s17
    65fa:	49ab      	ldr	r1, [pc, #684]	; (68a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x390>)
    65fc:	ee18 0a10 	vmov	r0, s16
    6600:	f017 fe5e 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    6604:	2601      	movs	r6, #1
                                        memory_allocator_->GetTail());
    6606:	a807      	add	r0, sp, #28
    6608:	f00f f945 	bl	15896 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    660c:	e183      	b.n	6916 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    660e:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
    6610:	1833      	adds	r3, r6, r0
  if (model->metadata()) {
    6612:	19df      	adds	r7, r3, r7
    6614:	d0b9      	beq.n	658a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    const int32_t* offline_planner_offsets = nullptr;
    6616:	2700      	movs	r7, #0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    6618:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 68c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    661c:	46b9      	mov	r9, r7
    auto field_offset = GetOptionalFieldOffset(field);
    661e:	2110      	movs	r1, #16
    6620:	4630      	mov	r0, r6
    6622:	f00f f831 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6626:	2800      	cmp	r0, #0
    6628:	f000 81a9 	beq.w	697e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x466>
    662c:	5832      	ldr	r2, [r6, r0]
    auto p = data_ + field_offset;
    662e:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6630:	188b      	adds	r3, r1, r2
    6632:	588a      	ldr	r2, [r1, r2]
    6634:	454a      	cmp	r2, r9
    6636:	d9a8      	bls.n	658a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6638:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    663a:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    663e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    6642:	4498      	add	r8, r3
    auto field_offset = GetOptionalFieldOffset(field);
    6644:	2104      	movs	r1, #4
    6646:	4640      	mov	r0, r8
    6648:	f00f f81e 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    664c:	b380      	cbz	r0, 66b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    auto p = data_ + field_offset;
    664e:	eb08 0300 	add.w	r3, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6652:	f858 0000 	ldr.w	r0, [r8, r0]
    6656:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    6658:	4658      	mov	r0, fp
    665a:	9305      	str	r3, [sp, #20]
    665c:	f7fa fece 	bl	13fc <strlen>
    6660:	9b05      	ldr	r3, [sp, #20]
    6662:	4602      	mov	r2, r0
    6664:	4659      	mov	r1, fp
    6666:	1d18      	adds	r0, r3, #4
    6668:	f018 f8b7 	bl	1e7da <strncmp>
    666c:	bb30      	cbnz	r0, 66bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
    auto field_offset = GetOptionalFieldOffset(field);
    666e:	210c      	movs	r1, #12
    6670:	4630      	mov	r0, r6
    6672:	f00f f809 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6676:	b1e8      	cbz	r0, 66b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x19c>
    6678:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
    667a:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    667c:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
    667e:	2106      	movs	r1, #6
    6680:	4640      	mov	r0, r8
    6682:	f00f f801 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6686:	b1b8      	cbz	r0, 66b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a0>
    6688:	f858 1000 	ldr.w	r1, [r8, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    668c:	4638      	mov	r0, r7
    668e:	f7ff fcdd 	bl	604c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6692:	2104      	movs	r1, #4
    6694:	f00f f83a 	bl	1570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
        if (tensor_count_ != nbr_tensors) {
    6698:	9b02      	ldr	r3, [sp, #8]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    669a:	68c2      	ldr	r2, [r0, #12]
        if (tensor_count_ != nbr_tensors) {
    669c:	4293      	cmp	r3, r2
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    669e:	f100 0710 	add.w	r7, r0, #16
        if (tensor_count_ != nbr_tensors) {
    66a2:	d00b      	beq.n	66bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
          TF_LITE_REPORT_ERROR(reporter_,
    66a4:	4981      	ldr	r1, [pc, #516]	; (68ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x394>)
    66a6:	ee18 0a10 	vmov	r0, s16
    66aa:	f017 fe09 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(
    66ae:	e7a9      	b.n	6604 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66b0:	4603      	mov	r3, r0
    66b2:	e7d1      	b.n	6658 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x140>
    66b4:	4607      	mov	r7, r0
    66b6:	e7e2      	b.n	667e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x166>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    66b8:	4601      	mov	r1, r0
    66ba:	e7e7      	b.n	668c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x174>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    66bc:	f109 0901 	add.w	r9, r9, #1
    66c0:	e7ad      	b.n	661e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x106>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    66c2:	2000      	movs	r0, #0
    66c4:	e789      	b.n	65da <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xc2>
      current->offline_offset = kOnlinePlannedBuffer;
    66c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66ca:	e78c      	b.n	65e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66cc:	f04f 0b00 	mov.w	fp, #0
    current->first_created = 0;
    66d0:	f04f 0918 	mov.w	r9, #24
    66d4:	465f      	mov	r7, fp
    return const_cast<Table *>(this)->GetPointer<P>(field);
    66d6:	2106      	movs	r1, #6
    66d8:	4650      	mov	r0, sl
    66da:	f00f f820 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66de:	6803      	ldr	r3, [r0, #0]
    66e0:	455b      	cmp	r3, fp
    66e2:	d908      	bls.n	66f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1de>
    const int tensor_index = subgraph->inputs()->Get(i);
    66e4:	4659      	mov	r1, fp
    66e6:	f7ff fc6b 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
    66ea:	fb09 4000 	mla	r0, r9, r0, r4
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66ee:	f10b 0b01 	add.w	fp, fp, #1
    current->first_created = 0;
    66f2:	6087      	str	r7, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    66f4:	e7ef      	b.n	66d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1be>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    66f6:	f04f 0b00 	mov.w	fp, #0
    current->last_used = subgraph->operators()->size() - 1;
    66fa:	f04f 0918 	mov.w	r9, #24
    66fe:	2108      	movs	r1, #8
    6700:	4650      	mov	r0, sl
    6702:	f00f f80c 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    6706:	210a      	movs	r1, #10
    6708:	9002      	str	r0, [sp, #8]
    670a:	4650      	mov	r0, sl
    670c:	f00f f819 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    6710:	9b02      	ldr	r3, [sp, #8]
    6712:	681a      	ldr	r2, [r3, #0]
    6714:	455a      	cmp	r2, fp
    6716:	4607      	mov	r7, r0
    6718:	d90b      	bls.n	6732 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21a>
    const int tensor_index = subgraph->outputs()->Get(i);
    671a:	4659      	mov	r1, fp
    671c:	4618      	mov	r0, r3
    671e:	f7ff fc4f 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = subgraph->operators()->size() - 1;
    6722:	683b      	ldr	r3, [r7, #0]
    6724:	fb09 4000 	mla	r0, r9, r0, r4
    6728:	3b01      	subs	r3, #1
    672a:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    672c:	f10b 0b01 	add.w	fp, fp, #1
    6730:	e7e5      	b.n	66fe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    6732:	6807      	ldr	r7, [r0, #0]
    6734:	3f01      	subs	r7, #1
    6736:	2f00      	cmp	r7, #0
    6738:	db37      	blt.n	67aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x292>
    673a:	210a      	movs	r1, #10
    673c:	4650      	mov	r0, sl
    673e:	f00f f800 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    const auto* op = subgraph->operators()->Get(i);
    6742:	4639      	mov	r1, r7
    6744:	f7ff fc6a 	bl	601c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6748:	f04f 0b00 	mov.w	fp, #0
    const auto* op = subgraph->operators()->Get(i);
    674c:	4681      	mov	r9, r0
    674e:	2106      	movs	r1, #6
    6750:	4648      	mov	r0, r9
    6752:	f00e ffe4 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6756:	6802      	ldr	r2, [r0, #0]
    6758:	455a      	cmp	r2, fp
    675a:	d90e      	bls.n	677a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x262>
      const int tensor_index = op->inputs()->Get(n);
    675c:	4659      	mov	r1, fp
    675e:	f7ff fc2f 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6762:	2318      	movs	r3, #24
    6764:	fb03 4000 	mla	r0, r3, r0, r4
      if (((current->last_used == -1) || (current->last_used < i))) {
    6768:	68c2      	ldr	r2, [r0, #12]
    676a:	1c51      	adds	r1, r2, #1
    676c:	d001      	beq.n	6772 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25a>
    676e:	4297      	cmp	r7, r2
    6770:	dd00      	ble.n	6774 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25c>
        current->last_used = i;
    6772:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6774:	f10b 0b01 	add.w	fp, fp, #1
    6778:	e7e9      	b.n	674e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    677a:	f04f 0b00 	mov.w	fp, #0
    677e:	2108      	movs	r1, #8
    6780:	4648      	mov	r0, r9
    6782:	f00e ffcc 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    6786:	6802      	ldr	r2, [r0, #0]
    6788:	455a      	cmp	r2, fp
    678a:	d9d3      	bls.n	6734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
      const int tensor_index = op->outputs()->Get(n);
    678c:	4659      	mov	r1, fp
    678e:	f7ff fc17 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6792:	2318      	movs	r3, #24
    6794:	fb03 4000 	mla	r0, r3, r0, r4
      if ((current->first_created == -1) || (current->first_created > i)) {
    6798:	6882      	ldr	r2, [r0, #8]
    679a:	1c53      	adds	r3, r2, #1
    679c:	d001      	beq.n	67a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28a>
    679e:	4297      	cmp	r7, r2
    67a0:	da00      	bge.n	67a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28c>
        current->first_created = i;
    67a2:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    67a4:	f10b 0b01 	add.w	fp, fp, #1
    67a8:	e7e9      	b.n	677e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
  for (size_t i = 0; i < tensor_count_; ++i) {
    67aa:	2200      	movs	r2, #0
    67ac:	4621      	mov	r1, r4
      current->needs_allocating = false;
    67ae:	4617      	mov	r7, r2
  for (size_t i = 0; i < tensor_count_; ++i) {
    67b0:	4296      	cmp	r6, r2
    67b2:	d018      	beq.n	67e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ce>
    const bool is_read_only =
    67b4:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
        (current->first_created == -1) && (current->last_used != -1);
    67b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    67bc:	d105      	bne.n	67ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b2>
    67be:	3001      	adds	r0, #1
    67c0:	d005      	beq.n	67ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b6>
      current->needs_allocating = false;
    67c2:	750f      	strb	r7, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
    67c4:	3201      	adds	r2, #1
    67c6:	3118      	adds	r1, #24
    67c8:	e7f2      	b.n	67b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
        ((current->first_created == -1) || (current->last_used == -1));
    67ca:	3001      	adds	r0, #1
    67cc:	d1fa      	bne.n	67c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
    if (has_partial_lifetime && current->needs_allocating) {
    67ce:	7d08      	ldrb	r0, [r1, #20]
    67d0:	2800      	cmp	r0, #0
    67d2:	d0f7      	beq.n	67c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
      TF_LITE_REPORT_ERROR(
    67d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    67d8:	9100      	str	r1, [sp, #0]
    67da:	ee18 0a10 	vmov	r0, s16
    67de:	4934      	ldr	r1, [pc, #208]	; (68b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x398>)
    67e0:	f017 fd6e 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    67e4:	e70e      	b.n	6604 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    67e6:	2318      	movs	r3, #24
    67e8:	692a      	ldr	r2, [r5, #16]
    67ea:	fb03 4306 	mla	r3, r3, r6, r4
    current->needs_allocating = true;
    67ee:	2701      	movs	r7, #1
    current->offline_offset = kOnlinePlannedBuffer;
    67f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    67f4:	9903      	ldr	r1, [sp, #12]
    67f6:	42b1      	cmp	r1, r6
    67f8:	f103 0318 	add.w	r3, r3, #24
    67fc:	d90e      	bls.n	681c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x304>
    current->bytes = handle->bytes;
    67fe:	6851      	ldr	r1, [r2, #4]
    6800:	f843 1c18 	str.w	r1, [r3, #-24]
    current->first_created = handle->node_idx;
    6804:	6891      	ldr	r1, [r2, #8]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
    6806:	f843 2c14 	str.w	r2, [r3, #-20]
    current->last_used = handle->node_idx;
    680a:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
    680e:	f803 7c04 	strb.w	r7, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
    6812:	f843 0c08 	str.w	r0, [r3, #-8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    6816:	3601      	adds	r6, #1
    6818:	320c      	adds	r2, #12
    681a:	e7eb      	b.n	67f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    681c:	a807      	add	r0, sp, #28
    681e:	f00f f845 	bl	158ac <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    6822:	2201      	movs	r2, #1
    6824:	4601      	mov	r1, r0
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    6826:	4606      	mov	r6, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    6828:	a807      	add	r0, sp, #28
    682a:	f000 fb2d 	bl	6e88 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    682e:	4601      	mov	r1, r0
    6830:	b958      	cbnz	r0, 684a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x332>
    6832:	68a9      	ldr	r1, [r5, #8]
    6834:	4b1f      	ldr	r3, [pc, #124]	; (68b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>)
    6836:	9301      	str	r3, [sp, #4]
    6838:	f240 339a 	movw	r3, #922	; 0x39a
    683c:	9300      	str	r3, [sp, #0]
    683e:	4a1e      	ldr	r2, [pc, #120]	; (68b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a0>)
    6840:	4b1e      	ldr	r3, [pc, #120]	; (68bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a4>)
    6842:	4608      	mov	r0, r1
    6844:	f017 fd4a 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    6848:	e6dc      	b.n	6604 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    684a:	4632      	mov	r2, r6
    684c:	a80d      	add	r0, sp, #52	; 0x34
    684e:	f009 fbfd 	bl	1004c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
    6852:	ee18 3a90 	vmov	r3, s17
    6856:	68af      	ldr	r7, [r5, #8]
TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
    6858:	4423      	add	r3, r4
    685a:	4699      	mov	r9, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
    685c:	454c      	cmp	r4, r9
    685e:	d078      	beq.n	6952 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x43a>
    if (current->needs_allocating) {
    6860:	7d23      	ldrb	r3, [r4, #20]
    6862:	b90b      	cbnz	r3, 6868 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x350>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    6864:	3418      	adds	r4, #24
    6866:	e7f9      	b.n	685c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x344>
          AlignSizeUp(current->bytes, kBufferAlignment);
    6868:	2110      	movs	r1, #16
    686a:	6820      	ldr	r0, [r4, #0]
    686c:	f017 fe1d 	bl	1e4aa <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
    6870:	6923      	ldr	r3, [r4, #16]
    6872:	1c59      	adds	r1, r3, #1
          AlignSizeUp(current->bytes, kBufferAlignment);
    6874:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    6876:	d10d      	bne.n	6894 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37c>
        TF_LITE_ENSURE_STATUS(
    6878:	68e3      	ldr	r3, [r4, #12]
    687a:	9300      	str	r3, [sp, #0]
    687c:	68a3      	ldr	r3, [r4, #8]
    687e:	4639      	mov	r1, r7
    6880:	a80d      	add	r0, sp, #52	; 0x34
    6882:	f009 fbc1 	bl	10008 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    6886:	4606      	mov	r6, r0
    6888:	2800      	cmp	r0, #0
    688a:	d0eb      	beq.n	6864 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34c>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    688c:	a80d      	add	r0, sp, #52	; 0x34
    688e:	f017 fbdc 	bl	1e04a <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    6892:	e6b8      	b.n	6606 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xee>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    6894:	9301      	str	r3, [sp, #4]
    6896:	68e3      	ldr	r3, [r4, #12]
    6898:	9300      	str	r3, [sp, #0]
    689a:	68a3      	ldr	r3, [r4, #8]
    689c:	4639      	mov	r1, r7
    689e:	a80d      	add	r0, sp, #52	; 0x34
    68a0:	f017 fbf9 	bl	1e096 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    68a4:	e7ef      	b.n	6886 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36e>
    68a6:	bf00      	nop
    68a8:	000271ba 	.word	0x000271ba
    68ac:	000271fb 	.word	0x000271fb
    68b0:	00027246 	.word	0x00027246
    68b4:	000272e9 	.word	0x000272e9
    68b8:	000272d2 	.word	0x000272d2
    68bc:	000272a9 	.word	0x000272a9
    68c0:	00027856 	.word	0x00027856
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    68c4:	6868      	ldr	r0, [r5, #4]
    68c6:	f00e ffed 	bl	158a4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
  int planner_index = 0;
    68ca:	f04f 0b00 	mov.w	fp, #0
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    68ce:	4607      	mov	r7, r0
      int offset = -1;
    68d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
    68d4:	4544      	cmp	r4, r8
    68d6:	d024      	beq.n	6922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x40a>
    if (current->needs_allocating) {
    68d8:	f898 3014 	ldrb.w	r3, [r8, #20]
    68dc:	b18b      	cbz	r3, 6902 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ea>
      TF_LITE_ENSURE_STATUS(
    68de:	ab06      	add	r3, sp, #24
    68e0:	465a      	mov	r2, fp
    68e2:	4649      	mov	r1, r9
    68e4:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
    68e6:	f8cd a018 	str.w	sl, [sp, #24]
      TF_LITE_ENSURE_STATUS(
    68ea:	f009 fbcd 	bl	10088 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
    68ee:	4606      	mov	r6, r0
    68f0:	2800      	cmp	r0, #0
    68f2:	d1cb      	bne.n	688c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x374>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    68f4:	9b06      	ldr	r3, [sp, #24]
    68f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    68fa:	443b      	add	r3, r7
    68fc:	6013      	str	r3, [r2, #0]
      ++planner_index;
    68fe:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
    6902:	f108 0818 	add.w	r8, r8, #24
    6906:	e7e5      	b.n	68d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3bc>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    6908:	a80d      	add	r0, sp, #52	; 0x34
    690a:	f017 fb9e 	bl	1e04a <_ZN6tflite19GreedyMemoryPlannerD1Ev>
                                        memory_allocator_->GetTail());
    690e:	a807      	add	r0, sp, #28
    6910:	f00e ffc1 	bl	15896 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
    6914:	2600      	movs	r6, #0
}
    6916:	4630      	mov	r0, r6
    6918:	b019      	add	sp, #100	; 0x64
    691a:	ecbd 8b02 	vpop	{d8}
    691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    6922:	686c      	ldr	r4, [r5, #4]
                                            /*alignment=*/1);
    6924:	6823      	ldr	r3, [r4, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    6926:	a80d      	add	r0, sp, #52	; 0x34
                                            /*alignment=*/1);
    6928:	689e      	ldr	r6, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    692a:	f017 fcac 	bl	1e286 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    692e:	2201      	movs	r2, #1
    6930:	4601      	mov	r1, r0
    6932:	4620      	mov	r0, r4
    6934:	47b0      	blx	r6
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    6936:	2800      	cmp	r0, #0
    6938:	d1e6      	bne.n	6908 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f0>
    693a:	68a9      	ldr	r1, [r5, #8]
    693c:	4b11      	ldr	r3, [pc, #68]	; (6984 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x46c>)
    693e:	9301      	str	r3, [sp, #4]
    6940:	f240 33b3 	movw	r3, #947	; 0x3b3
    6944:	9300      	str	r3, [sp, #0]
    6946:	4a10      	ldr	r2, [pc, #64]	; (6988 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x470>)
    6948:	4b10      	ldr	r3, [pc, #64]	; (698c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x474>)
    694a:	4608      	mov	r0, r1
    694c:	f017 fcc6 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    6950:	e013      	b.n	697a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x462>
        memory_allocator_->GetAvailableMemory();
    6952:	6868      	ldr	r0, [r5, #4]
    6954:	f00e ffaa 	bl	158ac <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
    6958:	4606      	mov	r6, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    695a:	a80d      	add	r0, sp, #52	; 0x34
    695c:	f017 fc93 	bl	1e286 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    6960:	42b0      	cmp	r0, r6
    6962:	f8d5 9008 	ldr.w	r9, [r5, #8]
    6966:	d9ad      	bls.n	68c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ac>
      TF_LITE_REPORT_ERROR(
    6968:	a80d      	add	r0, sp, #52	; 0x34
    696a:	f017 fc8c 	bl	1e286 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    696e:	4908      	ldr	r1, [pc, #32]	; (6990 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x478>)
    6970:	4602      	mov	r2, r0
    6972:	4633      	mov	r3, r6
    6974:	4648      	mov	r0, r9
    6976:	f017 fca3 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    697a:	2601      	movs	r6, #1
    697c:	e786      	b.n	688c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x374>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    697e:	6803      	ldr	r3, [r0, #0]
    6980:	deff      	udf	#255	; 0xff
    6982:	bf00      	nop
    6984:	00027357 	.word	0x00027357
    6988:	000272d2 	.word	0x000272d2
    698c:	000272a9 	.word	0x000272a9
    6990:	00027302 	.word	0x00027302

00006994 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
    6994:	b500      	push	{lr}
    6996:	b0c1      	sub	sp, #260	; 0x104
    6998:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    699a:	4668      	mov	r0, sp
    699c:	460a      	mov	r2, r1
    699e:	f44f 7180 	mov.w	r1, #256	; 0x100
    69a2:	f000 f96d 	bl	6c80 <MicroVsnprintf>
  DebugLog(log_buffer);
    69a6:	4668      	mov	r0, sp
    69a8:	f00b f8f2 	bl	11b90 <DebugLog>
  DebugLog("\r\n");
    69ac:	4803      	ldr	r0, [pc, #12]	; (69bc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
    69ae:	f00b f8ef 	bl	11b90 <DebugLog>
#endif
  return 0;
}
    69b2:	2000      	movs	r0, #0
    69b4:	b041      	add	sp, #260	; 0x104
    69b6:	f85d fb04 	ldr.w	pc, [sp], #4
    69ba:	bf00      	nop
    69bc:	00026049 	.word	0x00026049

000069c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    69c0:	6943      	ldr	r3, [r0, #20]
    69c2:	2b20      	cmp	r3, #32
    69c4:	d101      	bne.n	69ca <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
    69c6:	6980      	ldr	r0, [r0, #24]
    69c8:	4770      	bx	lr
  return (v < low) || (high < v);
    69ca:	b2db      	uxtb	r3, r3
    69cc:	2b7e      	cmp	r3, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    69ce:	bf9a      	itte	ls
    69d0:	4a02      	ldrls	r2, [pc, #8]	; (69dc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    69d2:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    69d6:	4802      	ldrhi	r0, [pc, #8]	; (69e0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    69d8:	4770      	bx	lr
    69da:	bf00      	nop
    69dc:	000256f0 	.word	0x000256f0
    69e0:	0002604b 	.word	0x0002604b

000069e4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
    69e4:	b570      	push	{r4, r5, r6, lr}
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    69e6:	6846      	ldr	r6, [r0, #4]
    69e8:	4604      	mov	r4, r0
    69ea:	460d      	mov	r5, r1
    auto field_offset = GetOptionalFieldOffset(field);
    69ec:	4630      	mov	r0, r6
    69ee:	2108      	movs	r1, #8
    69f0:	f00e fe4a 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69f4:	b1d0      	cbz	r0, 6a2c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x48>
    69f6:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
    69f8:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69fa:	18d1      	adds	r1, r2, r3
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
  if (subgraphs->size() != 1) {
    69fc:	58d2      	ldr	r2, [r2, r3]
    69fe:	2a01      	cmp	r2, #1
    6a00:	d007      	beq.n	6a12 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a02:	490b      	ldr	r1, [pc, #44]	; (6a30 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x4c>)
    6a04:	68e0      	ldr	r0, [r4, #12]
    6a06:	f017 fc5b 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
    6a0a:	2301      	movs	r3, #1
  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.recommended_num_threads = 1;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
    6a0c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
    6a10:	bd70      	pop	{r4, r5, r6, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a12:	1d0b      	adds	r3, r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a14:	6849      	ldr	r1, [r1, #4]
  context_.recommended_num_threads = 1;
    6a16:	6362      	str	r2, [r4, #52]	; 0x34
    6a18:	440b      	add	r3, r1
  subgraph_ = (*subgraphs)[0];
    6a1a:	66a3      	str	r3, [r4, #104]	; 0x68
  context_.impl_ = static_cast<void*>(&context_helper_);
    6a1c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    6a20:	61e3      	str	r3, [r4, #28]
  context_.ReportError = context_helper_.ReportOpError;
    6a22:	4b04      	ldr	r3, [pc, #16]	; (6a34 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x50>)
    6a24:	6263      	str	r3, [r4, #36]	; 0x24
  context_.profiler = profiler;
    6a26:	6465      	str	r5, [r4, #68]	; 0x44
  initialization_status_ = kTfLiteOk;
    6a28:	2300      	movs	r3, #0
    6a2a:	e7ef      	b.n	6a0c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x28>
  if (subgraphs->size() != 1) {
    6a2c:	6803      	ldr	r3, [r0, #0]
    6a2e:	deff      	udf	#255	; 0xff
    6a30:	00026a28 	.word	0x00026a28
    6a34:	00015773 	.word	0x00015773

00006a38 <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
    6a38:	b513      	push	{r0, r1, r4, lr}
    6a3a:	4604      	mov	r4, r0
    6a3c:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6a3e:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6a40:	2106      	movs	r1, #6
    6a42:	f00e fe6c 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
    6a46:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
    6a48:	6803      	ldr	r3, [r0, #0]
    6a4a:	429a      	cmp	r2, r3
    6a4c:	d306      	bcc.n	6a5c <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a4e:	4907      	ldr	r1, [pc, #28]	; (6a6c <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
    6a50:	68e0      	ldr	r0, [r4, #12]
    6a52:	f017 fc35 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
    6a56:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs().Get(index)]);
}
    6a58:	b002      	add	sp, #8
    6a5a:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs().Get(index)]);
    6a5c:	4611      	mov	r1, r2
    6a5e:	f7ff faaf 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    6a62:	69a3      	ldr	r3, [r4, #24]
    6a64:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6a68:	e7f6      	b.n	6a58 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
    6a6a:	bf00      	nop
    6a6c:	0002786e 	.word	0x0002786e

00006a70 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6a70:	b513      	push	{r0, r1, r4, lr}
    6a72:	4604      	mov	r4, r0
    6a74:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6a76:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6a78:	2108      	movs	r1, #8
    6a7a:	f00e fe50 	bl	1571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
    6a7e:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
    6a80:	6803      	ldr	r3, [r0, #0]
    6a82:	429a      	cmp	r2, r3
    6a84:	d306      	bcc.n	6a94 <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a86:	4907      	ldr	r1, [pc, #28]	; (6aa4 <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
    6a88:	68e0      	ldr	r0, [r4, #12]
    6a8a:	f017 fc19 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
    6a8e:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs().Get(index)]);
}
    6a90:	b002      	add	sp, #8
    6a92:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs().Get(index)]);
    6a94:	4611      	mov	r1, r2
    6a96:	f7ff fa93 	bl	5fc0 <_ZNK11flatbuffers6VectorIiE3GetEj>
    6a9a:	69a3      	ldr	r3, [r4, #24]
    6a9c:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6aa0:	e7f6      	b.n	6a90 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
    6aa2:	bf00      	nop
    6aa4:	00027899 	.word	0x00027899

00006aa8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    6aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    6aac:	f100 0710 	add.w	r7, r0, #16
    6ab0:	9000      	str	r0, [sp, #0]
    6ab2:	6883      	ldr	r3, [r0, #8]
    6ab4:	6841      	ldr	r1, [r0, #4]
TfLiteStatus MicroInterpreter::AllocateTensors() {
    6ab6:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    6ab8:	463a      	mov	r2, r7
    6aba:	6e00      	ldr	r0, [r0, #96]	; 0x60
    6abc:	f7ff fa02 	bl	5ec4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
    6ac0:	b148      	cbz	r0, 6ad6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6ac2:	4933      	ldr	r1, [pc, #204]	; (6b90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>)
    6ac4:	68e0      	ldr	r0, [r4, #12]
    6ac6:	f017 fbfb 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    6aca:	2001      	movs	r0, #1
    6acc:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
}
    6ad0:	b002      	add	sp, #8
    6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  context_.GetScratchBuffer = nullptr;
    6ad6:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
    6ada:	4b2e      	ldr	r3, [pc, #184]	; (6b94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>)
    6adc:	64a3      	str	r3, [r4, #72]	; 0x48
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6ade:	4605      	mov	r5, r0
    auto* node = &(node_and_registrations_[i].node);
    6ae0:	f04f 0828 	mov.w	r8, #40	; 0x28
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6ae4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6ae6:	210a      	movs	r1, #10
    6ae8:	f00e fe2b 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6aec:	6803      	ldr	r3, [r0, #0]
    6aee:	429d      	cmp	r5, r3
    6af0:	d212      	bcs.n	6b18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x70>
    auto* node = &(node_and_registrations_[i].node);
    6af2:	6826      	ldr	r6, [r4, #0]
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
    6af4:	6765      	str	r5, [r4, #116]	; 0x74
    6af6:	fb08 6605 	mla	r6, r8, r5, r6
    auto* registration = node_and_registrations_[i].registration;
    6afa:	6a73      	ldr	r3, [r6, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->builtin_data);
    6afc:	6971      	ldr	r1, [r6, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6afe:	695a      	ldr	r2, [r3, #20]
    if (registration->init) {
    6b00:	681b      	ldr	r3, [r3, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6b02:	2a20      	cmp	r2, #32
      init_data_size = node->custom_initial_data_size;
    6b04:	bf0c      	ite	eq
    6b06:	e9d6 1206 	ldrdeq	r1, r2, [r6, #24]
      init_data_size = 0;
    6b0a:	2200      	movne	r2, #0
    if (registration->init) {
    6b0c:	b113      	cbz	r3, 6b14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
          registration->init(&context_, init_data, init_data_size);
    6b0e:	4638      	mov	r0, r7
    6b10:	4798      	blx	r3
      node->user_data =
    6b12:	6130      	str	r0, [r6, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b14:	3501      	adds	r5, #1
    6b16:	e7e5      	b.n	6ae4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
    6b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b1c:	6763      	str	r3, [r4, #116]	; 0x74
  context_.RequestScratchBufferInArena =
    6b1e:	4b1e      	ldr	r3, [pc, #120]	; (6b98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>)
    6b20:	6523      	str	r3, [r4, #80]	; 0x50
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b22:	2500      	movs	r5, #0
    auto* node = &(node_and_registrations_[i].node);
    6b24:	2628      	movs	r6, #40	; 0x28
    6b26:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6b28:	210a      	movs	r1, #10
    6b2a:	f00e fe0a 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b2e:	6803      	ldr	r3, [r0, #0]
    6b30:	429d      	cmp	r5, r3
    6b32:	d21a      	bcs.n	6b6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    auto* node = &(node_and_registrations_[i].node);
    6b34:	6821      	ldr	r1, [r4, #0]
    6b36:	6765      	str	r5, [r4, #116]	; 0x74
    6b38:	fb06 1105 	mla	r1, r6, r5, r1
    auto* registration = node_and_registrations_[i].registration;
    6b3c:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
    if (registration->prepare) {
    6b40:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6b44:	b17b      	cbz	r3, 6b66 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
    6b46:	4638      	mov	r0, r7
    6b48:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
    6b4a:	4601      	mov	r1, r0
    6b4c:	b158      	cbz	r0, 6b66 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
        TF_LITE_REPORT_ERROR(
    6b4e:	4640      	mov	r0, r8
    6b50:	f7ff ff36 	bl	69c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b54:	462b      	mov	r3, r5
    6b56:	4602      	mov	r2, r0
    6b58:	9100      	str	r1, [sp, #0]
    6b5a:	68e0      	ldr	r0, [r4, #12]
    6b5c:	490f      	ldr	r1, [pc, #60]	; (6b9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>)
    6b5e:	f017 fbaf 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    6b62:	2001      	movs	r0, #1
    6b64:	e7b4      	b.n	6ad0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6b66:	3501      	adds	r5, #1
    6b68:	e7dd      	b.n	6b26 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x7e>
    6b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b6e:	6763      	str	r3, [r4, #116]	; 0x74
  context_.AllocatePersistentBuffer = nullptr;
    6b70:	2300      	movs	r3, #0
    6b72:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    6b74:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    6b76:	4b0a      	ldr	r3, [pc, #40]	; (6ba0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>)
  TF_LITE_ENSURE_OK(&context_,
    6b78:	6861      	ldr	r1, [r4, #4]
    6b7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    6b7c:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
    6b7e:	463a      	mov	r2, r7
    6b80:	f7ff f9de 	bl	5f40 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
    6b84:	2800      	cmp	r0, #0
    6b86:	d1a3      	bne.n	6ad0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    6b88:	2301      	movs	r3, #1
    6b8a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return kTfLiteOk;
    6b8e:	e79f      	b.n	6ad0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    6b90:	000278c5 	.word	0x000278c5
    6b94:	00015755 	.word	0x00015755
    6b98:	0001575d 	.word	0x0001575d
    6b9c:	000278e8 	.word	0x000278e8
    6ba0:	0001576b 	.word	0x0001576b

00006ba4 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    6ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
    6ba8:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
TfLiteStatus MicroInterpreter::Invoke() {
    6bac:	b087      	sub	sp, #28
    6bae:	4605      	mov	r5, r0
  if (initialization_status_ != kTfLiteOk) {
    6bb0:	b143      	cbz	r3, 6bc4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6bb2:	4931      	ldr	r1, [pc, #196]	; (6c78 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>)
    6bb4:	68c0      	ldr	r0, [r0, #12]
    6bb6:	f017 fb83 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    6bba:	2401      	movs	r4, #1
}
    6bbc:	4620      	mov	r0, r4
    6bbe:	b007      	add	sp, #28
    6bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
    6bc4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d044      	beq.n	6c56 <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
TfLiteStatus MicroInterpreter::Invoke() {
    6bcc:	f04f 0800 	mov.w	r8, #0
    auto* node = &(node_and_registrations_[i].node);
    6bd0:	f04f 0a28 	mov.w	sl, #40	; 0x28
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6bd4:	2600      	movs	r6, #0
    6bd6:	2700      	movs	r7, #0
    6bd8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    6bda:	210a      	movs	r1, #10
    6bdc:	f00e fdb1 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6be0:	6803      	ldr	r3, [r0, #0]
    6be2:	4598      	cmp	r8, r3
    6be4:	d245      	bcs.n	6c72 <_ZN6tflite16MicroInterpreter6InvokeEv+0xce>
    auto* node = &(node_and_registrations_[i].node);
    6be6:	682c      	ldr	r4, [r5, #0]
    6be8:	fb0a 4408 	mla	r4, sl, r8, r4
    auto* registration = node_and_registrations_[i].registration;
    6bec:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    if (registration->invoke) {
    6bf0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d039      	beq.n	6c6c <_ZN6tflite16MicroInterpreter6InvokeEv+0xc8>
          profiler, OpNameFromRegistration(registration), i);
    6bf8:	4648      	mov	r0, r9
    6bfa:	f7ff fee1 	bl	69c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
      tflite::Profiler* profiler =
    6bfe:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    6c02:	f8cd b010 	str.w	fp, [sp, #16]
    6c06:	2300      	movs	r3, #0
          profiler, OpNameFromRegistration(registration), i);
    6c08:	4601      	mov	r1, r0
    6c0a:	9305      	str	r3, [sp, #20]
    if (profiler) {
    6c0c:	f1bb 0f00 	cmp.w	fp, #0
    6c10:	d00a      	beq.n	6c28 <_ZN6tflite16MicroInterpreter6InvokeEv+0x84>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6c12:	f8db 2000 	ldr.w	r2, [fp]
    6c16:	e9cd 6702 	strd	r6, r7, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
    6c1a:	e9cd 8300 	strd	r8, r3, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    6c1e:	4658      	mov	r0, fp
    6c20:	6893      	ldr	r3, [r2, #8]
    6c22:	2202      	movs	r2, #2
    6c24:	4798      	blx	r3
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
    6c26:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
    6c28:	4621      	mov	r1, r4
    6c2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
    6c2e:	f105 0010 	add.w	r0, r5, #16
    6c32:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
    6c34:	2801      	cmp	r0, #1
      invoke_status = registration->invoke(&context_, node);
    6c36:	4604      	mov	r4, r0
      if (invoke_status == kTfLiteError) {
    6c38:	d113      	bne.n	6c62 <_ZN6tflite16MicroInterpreter6InvokeEv+0xbe>
        TF_LITE_REPORT_ERROR(
    6c3a:	4648      	mov	r0, r9
    6c3c:	f7ff fec0 	bl	69c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6c40:	490e      	ldr	r1, [pc, #56]	; (6c7c <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>)
    6c42:	9400      	str	r4, [sp, #0]
    6c44:	4602      	mov	r2, r0
    6c46:	4643      	mov	r3, r8
    6c48:	68e8      	ldr	r0, [r5, #12]
    6c4a:	f017 fb39 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class ScopedOperatorProfile : public ScopedProfile {
    6c4e:	a804      	add	r0, sp, #16
    6c50:	f00e fd9f 	bl	15792 <_ZN6tflite13ScopedProfileD1Ev>
    6c54:	e7b2      	b.n	6bbc <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    6c56:	f7ff ff27 	bl	6aa8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    6c5a:	4604      	mov	r4, r0
    6c5c:	2800      	cmp	r0, #0
    6c5e:	d0b5      	beq.n	6bcc <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
    6c60:	e7ac      	b.n	6bbc <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
      } else if (invoke_status != kTfLiteOk) {
    6c62:	2800      	cmp	r0, #0
    6c64:	d1f3      	bne.n	6c4e <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
    6c66:	a804      	add	r0, sp, #16
    6c68:	f00e fd93 	bl	15792 <_ZN6tflite13ScopedProfileD1Ev>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    6c6c:	f108 0801 	add.w	r8, r8, #1
    6c70:	e7b2      	b.n	6bd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>
  return kTfLiteOk;
    6c72:	2400      	movs	r4, #0
    6c74:	e7a2      	b.n	6bbc <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    6c76:	bf00      	nop
    6c78:	0002791e 	.word	0x0002791e
    6c7c:	0002794b 	.word	0x0002794b

00006c80 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    6c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c84:	b095      	sub	sp, #84	; 0x54
    6c86:	4617      	mov	r7, r2
    6c88:	9001      	str	r0, [sp, #4]
    6c8a:	461c      	mov	r4, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    6c8c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
  int output_index = 0;
    6c90:	2500      	movs	r5, #0
  while (*current != '\0' && output_index < usable_length) {
    6c92:	9a01      	ldr	r2, [sp, #4]
    6c94:	783b      	ldrb	r3, [r7, #0]
    6c96:	4629      	mov	r1, r5
    6c98:	1956      	adds	r6, r2, r5
    6c9a:	b33b      	cbz	r3, 6cec <MicroVsnprintf+0x6c>
    6c9c:	4545      	cmp	r5, r8
    6c9e:	da25      	bge.n	6cec <MicroVsnprintf+0x6c>
    if (*current == '%') {
    6ca0:	2b25      	cmp	r3, #37	; 0x25
    6ca2:	f107 0201 	add.w	r2, r7, #1
    6ca6:	f040 80d1 	bne.w	6e4c <MicroVsnprintf+0x1cc>
      current++;
      switch (*current) {
    6caa:	787b      	ldrb	r3, [r7, #1]
    6cac:	2b73      	cmp	r3, #115	; 0x73
    6cae:	f000 80d0 	beq.w	6e52 <MicroVsnprintf+0x1d2>
    6cb2:	d808      	bhi.n	6cc6 <MicroVsnprintf+0x46>
    6cb4:	2b64      	cmp	r3, #100	; 0x64
    6cb6:	d015      	beq.n	6ce4 <MicroVsnprintf+0x64>
    6cb8:	2b66      	cmp	r3, #102	; 0x66
    6cba:	d041      	beq.n	6d40 <MicroVsnprintf+0xc0>
    6cbc:	2b25      	cmp	r3, #37	; 0x25
    6cbe:	f000 80c4 	beq.w	6e4a <MicroVsnprintf+0x1ca>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6cc2:	4617      	mov	r7, r2
    6cc4:	e7e5      	b.n	6c92 <MicroVsnprintf+0x12>
      switch (*current) {
    6cc6:	2b75      	cmp	r3, #117	; 0x75
    6cc8:	d021      	beq.n	6d0e <MicroVsnprintf+0x8e>
    6cca:	2b78      	cmp	r3, #120	; 0x78
    6ccc:	d1f9      	bne.n	6cc2 <MicroVsnprintf+0x42>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6cce:	eba8 0205 	sub.w	r2, r8, r5
    6cd2:	2a09      	cmp	r2, #9
    6cd4:	f105 0001 	add.w	r0, r5, #1
    6cd8:	dc22      	bgt.n	6d20 <MicroVsnprintf+0xa0>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
    6cda:	2300      	movs	r3, #0
    6cdc:	7033      	strb	r3, [r6, #0]
  return output_index;
}
    6cde:	b015      	add	sp, #84	; 0x54
    6ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6ce4:	eba8 0305 	sub.w	r3, r8, r5
    6ce8:	2b0a      	cmp	r3, #10
    6cea:	dc01      	bgt.n	6cf0 <MicroVsnprintf+0x70>
  output[output_index++] = '\0';
    6cec:	1c68      	adds	r0, r5, #1
    6cee:	e7f4      	b.n	6cda <MicroVsnprintf+0x5a>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6cf0:	f854 0b04 	ldr.w	r0, [r4], #4
    *buffer++ = '-';
    6cf4:	4631      	mov	r1, r6
  if (i < 0) {
    6cf6:	2800      	cmp	r0, #0
    *buffer++ = '-';
    6cf8:	bfbe      	ittt	lt
    6cfa:	232d      	movlt	r3, #45	; 0x2d
    6cfc:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
    6d00:	4240      	neglt	r0, r0
  return FastUInt32ToBufferLeft(u, buffer, 10);
    6d02:	220a      	movs	r2, #10
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    6d04:	f00e fda6 	bl	15854 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    6d08:	1b80      	subs	r0, r0, r6
          output_index +=
    6d0a:	4405      	add	r5, r0
          current++;
    6d0c:	e016      	b.n	6d3c <MicroVsnprintf+0xbc>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6d0e:	eba8 0305 	sub.w	r3, r8, r5
    6d12:	2b0a      	cmp	r3, #10
    6d14:	ddea      	ble.n	6cec <MicroVsnprintf+0x6c>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    6d16:	f854 0b04 	ldr.w	r0, [r4], #4
    6d1a:	220a      	movs	r2, #10
    6d1c:	4631      	mov	r1, r6
    6d1e:	e7f1      	b.n	6d04 <MicroVsnprintf+0x84>
          output[output_index++] = '0';
    6d20:	2230      	movs	r2, #48	; 0x30
    6d22:	7032      	strb	r2, [r6, #0]
          output[output_index++] = 'x';
    6d24:	9a01      	ldr	r2, [sp, #4]
    6d26:	1cae      	adds	r6, r5, #2
    6d28:	5413      	strb	r3, [r2, r0]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6d2a:	1995      	adds	r5, r2, r6
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    6d2c:	4629      	mov	r1, r5
    6d2e:	f854 0b04 	ldr.w	r0, [r4], #4
    6d32:	2210      	movs	r2, #16
    6d34:	f00e fd8e 	bl	15854 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    6d38:	1b45      	subs	r5, r0, r5
          output_index +=
    6d3a:	4435      	add	r5, r6
          current++;
    6d3c:	1cba      	adds	r2, r7, #2
    6d3e:	e7c0      	b.n	6cc2 <MicroVsnprintf+0x42>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6d40:	eba8 0305 	sub.w	r3, r8, r5
    6d44:	ee07 3a90 	vmov	s15, r3
    6d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6d4c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    6d50:	eef4 7ac7 	vcmpe.f32	s15, s14
    6d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d58:	d4c8      	bmi.n	6cec <MicroVsnprintf+0x6c>
              FormatFloat(&output[output_index], va_arg(args, double));
    6d5a:	3407      	adds	r4, #7
    6d5c:	f024 0407 	bic.w	r4, r4, #7
    6d60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    6d64:	f7fa fa9a 	bl	129c <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    6d68:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
    6d6c:	2800      	cmp	r0, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    6d6e:	f1a3 097f 	sub.w	r9, r3, #127	; 0x7f
    6d72:	9302      	str	r3, [sp, #8]
    *current = '-';
    6d74:	4633      	mov	r3, r6
    6d76:	bfbc      	itt	lt
    6d78:	222d      	movlt	r2, #45	; 0x2d
    6d7a:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
    6d7e:	2200      	movs	r2, #0
  if (exponent == 128) {
    6d80:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  char* current_end = buffer + (kFastToBufferSize - 1);
    6d84:	f106 0b2f 	add.w	fp, r6, #47	; 0x2f
  const uint32_t fraction = (u & fraction_mask);
    6d88:	f3c0 0a16 	ubfx	sl, r0, #0, #23
  *current = 0;
    6d8c:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
    6d8e:	d10b      	bne.n	6da8 <MicroVsnprintf+0x128>
    if (fraction == 0) {
    6d90:	ebab 0103 	sub.w	r1, fp, r3
    6d94:	f1ba 0f00 	cmp.w	sl, #0
    6d98:	d104      	bne.n	6da4 <MicroVsnprintf+0x124>
      current = StrCatStr(current, (current_end - current), "Inf");
    6d9a:	4a36      	ldr	r2, [pc, #216]	; (6e74 <MicroVsnprintf+0x1f4>)
      current = StrCatStr(current, (current_end - current), "NaN");
    6d9c:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
    6d9e:	f00e fd43 	bl	15828 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  return current;
    6da2:	e7b1      	b.n	6d08 <MicroVsnprintf+0x88>
      current = StrCatStr(current, (current_end - current), "NaN");
    6da4:	4a34      	ldr	r2, [pc, #208]	; (6e78 <MicroVsnprintf+0x1f8>)
    6da6:	e7f9      	b.n	6d9c <MicroVsnprintf+0x11c>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    6da8:	4a34      	ldr	r2, [pc, #208]	; (6e7c <MicroVsnprintf+0x1fc>)
    6daa:	f10d 0c10 	add.w	ip, sp, #16
    6dae:	6851      	ldr	r1, [r2, #4]
    6db0:	6810      	ldr	r0, [r2, #0]
    6db2:	46e6      	mov	lr, ip
    6db4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    6db8:	4931      	ldr	r1, [pc, #196]	; (6e80 <MicroVsnprintf+0x200>)
    6dba:	3208      	adds	r2, #8
    6dbc:	428a      	cmp	r2, r1
    6dbe:	46f4      	mov	ip, lr
    6dc0:	d1f5      	bne.n	6dae <MicroVsnprintf+0x12e>
    6dc2:	6810      	ldr	r0, [r2, #0]
    6dc4:	7912      	ldrb	r2, [r2, #4]
    6dc6:	f8ce 0000 	str.w	r0, [lr]
    6dca:	f88e 2004 	strb.w	r2, [lr, #4]
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dce:	f10d 0c10 	add.w	ip, sp, #16
  uint32_t scaled_fraction = fraction;
    6dd2:	4650      	mov	r0, sl
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dd4:	2200      	movs	r2, #0
    scaled_fraction += (fraction >> scale_shifts[i]);
    6dd6:	f91c 1b01 	ldrsb.w	r1, [ip], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6dda:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
    6ddc:	fa2a f101 	lsr.w	r1, sl, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6de0:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
    6de2:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    6de4:	d1f7      	bne.n	6dd6 <MicroVsnprintf+0x156>
  *current = '1';
    6de6:	2231      	movs	r2, #49	; 0x31
    6de8:	701a      	strb	r2, [r3, #0]
  *current = '.';
    6dea:	222e      	movs	r2, #46	; 0x2e
    6dec:	705a      	strb	r2, [r3, #1]
  current += 1;
    6dee:	f103 0a02 	add.w	sl, r3, #2
  *current = 0;
    6df2:	2200      	movs	r2, #0
    6df4:	709a      	strb	r2, [r3, #2]
  FastUInt32ToBufferLeft(number, number_string, base);
    6df6:	a908      	add	r1, sp, #32
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6df8:	ebab 030a 	sub.w	r3, fp, sl
  FastUInt32ToBufferLeft(number, number_string, base);
    6dfc:	220a      	movs	r2, #10
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6dfe:	9303      	str	r3, [sp, #12]
  FastUInt32ToBufferLeft(number, number_string, base);
    6e00:	f00e fd28 	bl	15854 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    6e04:	9b03      	ldr	r3, [sp, #12]
    6e06:	aa08      	add	r2, sp, #32
    6e08:	4619      	mov	r1, r3
    6e0a:	4650      	mov	r0, sl
    6e0c:	f00e fd0c 	bl	15828 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatStr(current, (current_end - current), "*2^");
    6e10:	4a1c      	ldr	r2, [pc, #112]	; (6e84 <MicroVsnprintf+0x204>)
    6e12:	ebab 0100 	sub.w	r1, fp, r0
    6e16:	f00e fd07 	bl	15828 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  if (i < 0) {
    6e1a:	f1b9 0f00 	cmp.w	r9, #0
    *buffer++ = '-';
    6e1e:	bfbf      	itttt	lt
    6e20:	232d      	movlt	r3, #45	; 0x2d
    6e22:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
    6e26:	9b02      	ldrlt	r3, [sp, #8]
    6e28:	f1c3 097f 	rsblt	r9, r3, #127	; 0x7f
  current = StrCatStr(current, (current_end - current), "*2^");
    6e2c:	4682      	mov	sl, r0
  current = StrCatInt32(current, (current_end - current), exponent);
    6e2e:	ebab 0b00 	sub.w	fp, fp, r0
    *buffer++ = '-';
    6e32:	bfb4      	ite	lt
    6e34:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
    6e38:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
    6e3a:	220a      	movs	r2, #10
    6e3c:	4648      	mov	r0, r9
    6e3e:	f00e fd09 	bl	15854 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    6e42:	aa08      	add	r2, sp, #32
    6e44:	4659      	mov	r1, fp
    6e46:	4650      	mov	r0, sl
    6e48:	e7a9      	b.n	6d9e <MicroVsnprintf+0x11e>
          output[output_index++] = *current++;
    6e4a:	1cba      	adds	r2, r7, #2
      output[output_index++] = *current++;
    6e4c:	3501      	adds	r5, #1
    6e4e:	7033      	strb	r3, [r6, #0]
    6e50:	e737      	b.n	6cc2 <MicroVsnprintf+0x42>
          while (string_idx + output_index < usable_length &&
    6e52:	f854 2b04 	ldr.w	r2, [r4], #4
    6e56:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
    6e58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	f43f af6d 	beq.w	6d3c <MicroVsnprintf+0xbc>
            output[output_index++] = string[string_idx++];
    6e62:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
    6e64:	4541      	cmp	r1, r8
            output[output_index++] = string[string_idx++];
    6e66:	f806 3b01 	strb.w	r3, [r6], #1
    6e6a:	f105 0501 	add.w	r5, r5, #1
          while (string_idx + output_index < usable_length &&
    6e6e:	dbf3      	blt.n	6e58 <MicroVsnprintf+0x1d8>
    6e70:	e764      	b.n	6d3c <MicroVsnprintf+0xbc>
    6e72:	bf00      	nop
    6e74:	0002797f 	.word	0x0002797f
    6e78:	00027983 	.word	0x00027983
    6e7c:	0002798b 	.word	0x0002798b
    6e80:	00027993 	.word	0x00027993
    6e84:	00027987 	.word	0x00027987

00006e88 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
    6e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6e8a:	4605      	mov	r5, r0
    6e8c:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
    6e8e:	6900      	ldr	r0, [r0, #16]
    6e90:	4611      	mov	r1, r2
    6e92:	f017 faff 	bl	1e494 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6e96:	696b      	ldr	r3, [r5, #20]
    6e98:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    6e9a:	42a3      	cmp	r3, r4
    6e9c:	d209      	bcs.n	6eb2 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2a>
    TF_LITE_REPORT_ERROR(
    6e9e:	1ae2      	subs	r2, r4, r3
    6ea0:	9200      	str	r2, [sp, #0]
    6ea2:	4905      	ldr	r1, [pc, #20]	; (6eb8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x30>)
    6ea4:	6868      	ldr	r0, [r5, #4]
    6ea6:	4622      	mov	r2, r4
    6ea8:	f017 fa0a 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
    6eac:	2000      	movs	r0, #0
  }
  head_ = aligned_result + size;
  return aligned_result;
}
    6eae:	b003      	add	sp, #12
    6eb0:	bd30      	pop	{r4, r5, pc}
  head_ = aligned_result + size;
    6eb2:	4404      	add	r4, r0
    6eb4:	612c      	str	r4, [r5, #16]
  return aligned_result;
    6eb6:	e7fa      	b.n	6eae <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x26>
    6eb8:	00027999 	.word	0x00027999

00006ebc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
    6ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6ebe:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    6ec0:	6940      	ldr	r0, [r0, #20]
                                                 size_t alignment) {
    6ec2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    6ec4:	1b40      	subs	r0, r0, r5
    6ec6:	4611      	mov	r1, r2
    6ec8:	f017 faeb 	bl	1e4a2 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    6ecc:	6923      	ldr	r3, [r4, #16]
    6ece:	4283      	cmp	r3, r0
    6ed0:	d90a      	bls.n	6ee8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
    6ed2:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
    6ed4:	9300      	str	r3, [sp, #0]
    6ed6:	4905      	ldr	r1, [pc, #20]	; (6eec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
    6ed8:	6860      	ldr	r0, [r4, #4]
    6eda:	1aeb      	subs	r3, r5, r3
    6edc:	462a      	mov	r2, r5
    6ede:	f017 f9ef 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
    6ee2:	2000      	movs	r0, #0
  }
  tail_ = aligned_result;
  return aligned_result;
}
    6ee4:	b003      	add	sp, #12
    6ee6:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
    6ee8:	6160      	str	r0, [r4, #20]
  return aligned_result;
    6eea:	e7fb      	b.n	6ee4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
    6eec:	00027999 	.word	0x00027999

00006ef0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    6ef0:	b530      	push	{r4, r5, lr}
      tail_(buffer_tail) {}
    6ef2:	4d04      	ldr	r5, [pc, #16]	; (6f04 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
    6ef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
    6ef8:	e9c0 5100 	strd	r5, r1, [r0]
    6efc:	e9c0 2304 	strd	r2, r3, [r0, #16]
    6f00:	bd30      	pop	{r4, r5, pc}
    6f02:	bf00      	nop
    6f04:	00025950 	.word	0x00025950

00006f08 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6f08:	b510      	push	{r4, lr}
    6f0a:	b086      	sub	sp, #24
  TFLITE_DCHECK(error_reporter != nullptr);
    6f0c:	b908      	cbnz	r0, 6f12 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
    6f0e:	f017 fb71 	bl	1e5f4 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    6f12:	2900      	cmp	r1, #0
    6f14:	d0fb      	beq.n	6f0e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
      tail_(buffer_tail) {}
    6f16:	4c0d      	ldr	r4, [pc, #52]	; (6f4c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x44>)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    6f18:	440a      	add	r2, r1
      tail_(buffer_tail) {}
    6f1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    6f1e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    6f22:	e9cd 4000 	strd	r4, r0, [sp]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6f26:	2204      	movs	r2, #4
    6f28:	2118      	movs	r1, #24
    6f2a:	4668      	mov	r0, sp
    6f2c:	f7ff ffc6 	bl	6ebc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6f30:	b150      	cbz	r0, 6f48 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6f32:	9b01      	ldr	r3, [sp, #4]
    6f34:	6043      	str	r3, [r0, #4]
    6f36:	9b02      	ldr	r3, [sp, #8]
    6f38:	6083      	str	r3, [r0, #8]
    6f3a:	9b03      	ldr	r3, [sp, #12]
    6f3c:	60c3      	str	r3, [r0, #12]
    6f3e:	9b04      	ldr	r3, [sp, #16]
    6f40:	6103      	str	r3, [r0, #16]
    6f42:	9b05      	ldr	r3, [sp, #20]
    6f44:	6004      	str	r4, [r0, #0]
    6f46:	6143      	str	r3, [r0, #20]
}
    6f48:	b006      	add	sp, #24
    6f4a:	bd10      	pop	{r4, pc}
    6f4c:	00025950 	.word	0x00025950

00006f50 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
    6f50:	680a      	ldr	r2, [r1, #0]
TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    6f52:	6883      	ldr	r3, [r0, #8]
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
  return &context->tensors[node->outputs->data[index]];
    6f54:	6849      	ldr	r1, [r1, #4]
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
    6f56:	b570      	push	{r4, r5, r6, lr}
  return &context->tensors[node->inputs->data[index]];
    6f58:	6855      	ldr	r5, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    6f5a:	684c      	ldr	r4, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    6f5c:	01aa      	lsls	r2, r5, #6
    6f5e:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    6f60:	5c98      	ldrb	r0, [r3, r2]
    6f62:	2803      	cmp	r0, #3
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
    6f64:	b08c      	sub	sp, #48	; 0x30
    6f66:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    6f6a:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
    6f6e:	d03f      	beq.n	6ff0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xa0>
    6f70:	2809      	cmp	r0, #9
    6f72:	d023      	beq.n	6fbc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    6f74:	2801      	cmp	r0, #1
    6f76:	d15e      	bne.n	7036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    case kTfLiteFloat32: {
      ReluFloat(GetTensorShape(input), GetTensorData<float>(input),
    6f78:	4629      	mov	r1, r5
    6f7a:	4668      	mov	r0, sp
    6f7c:	f00e fceb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                GetTensorShape(output), GetTensorData<float>(output));
    6f80:	4621      	mov	r1, r4
    6f82:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6f84:	686d      	ldr	r5, [r5, #4]
    6f86:	f00e fce6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6f8a:	b104      	cbz	r4, 6f8e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3e>
    6f8c:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    6f8e:	a906      	add	r1, sp, #24
    6f90:	4668      	mov	r0, sp
    6f92:	f00e fcb7 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    output_data[i] = clamped;
    6f96:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    6f9a:	462b      	mov	r3, r5
  for (int i = 0; i < flat_size; ++i) {
    6f9c:	2200      	movs	r2, #0
    6f9e:	4290      	cmp	r0, r2
    6fa0:	dd40      	ble.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    const float val = input_data[i];
    6fa2:	ecf3 7a01 	vldmia	r3!, {s15}
    output_data[i] = clamped;
    6fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fae:	bfb8      	it	lt
    6fb0:	eef0 7a47 	vmovlt.f32	s15, s14
    6fb4:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    6fb8:	3201      	adds	r2, #1
    6fba:	e7f0      	b.n	6f9e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x4e>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(input->params.zero_point, GetTensorShape(input),
    6fbc:	4629      	mov	r1, r5
    6fbe:	4668      	mov	r0, sp
    6fc0:	692e      	ldr	r6, [r5, #16]
    6fc2:	f00e fcc8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorData<int8_t>(input),
                            GetTensorShape(output),
    6fc6:	4621      	mov	r1, r4
    6fc8:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6fca:	686d      	ldr	r5, [r5, #4]
    6fcc:	f00e fcc3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6fd0:	b104      	cbz	r4, 6fd4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x84>
    6fd2:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    6fd4:	a906      	add	r1, sp, #24
    6fd6:	4668      	mov	r0, sp
    6fd8:	f00e fc94 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    6fdc:	2300      	movs	r3, #0
    6fde:	4298      	cmp	r0, r3
    6fe0:	dd20      	ble.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    const Q clamped = val < lower ? lower : val;
    6fe2:	56ea      	ldrsb	r2, [r5, r3]
    6fe4:	42b2      	cmp	r2, r6
    6fe6:	bfb8      	it	lt
    6fe8:	4632      	movlt	r2, r6
    6fea:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    6fec:	3301      	adds	r3, #1
    6fee:	e7f6      	b.n	6fde <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x8e>
                            GetTensorData<int8_t>(output));
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
    6ff0:	4629      	mov	r1, r5
    6ff2:	4668      	mov	r0, sp
    6ff4:	692e      	ldr	r6, [r5, #16]
    6ff6:	f00e fcae 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                             GetTensorData<uint8_t>(input),
                             GetTensorShape(output),
    6ffa:	4621      	mov	r1, r4
    6ffc:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6ffe:	686d      	ldr	r5, [r5, #4]
    7000:	f00e fca9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7004:	b104      	cbz	r4, 7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    7006:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    7008:	a906      	add	r1, sp, #24
    700a:	4668      	mov	r0, sp
    700c:	f00e fc7a 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    7010:	2300      	movs	r3, #0
    7012:	4298      	cmp	r0, r3
    7014:	dd06      	ble.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    const Q clamped = val < lower ? lower : val;
    7016:	5cea      	ldrb	r2, [r5, r3]
    7018:	42b2      	cmp	r2, r6
    701a:	bfb8      	it	lt
    701c:	4632      	movlt	r2, r6
    701e:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    7020:	3301      	adds	r3, #1
    7022:	e7f6      	b.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
                             GetTensorShape(output),
    7024:	a806      	add	r0, sp, #24
    7026:	f00e fc51 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
    702a:	4668      	mov	r0, sp
    702c:	f00e fc4e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                             GetTensorData<uint8_t>(output));
      return kTfLiteOk;
    7030:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
    7032:	b00c      	add	sp, #48	; 0x30
    7034:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    7036:	6974      	ldr	r4, [r6, #20]
    7038:	f7f9 fc3b 	bl	8b2 <TfLiteTypeGetName>
    703c:	4903      	ldr	r1, [pc, #12]	; (704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    703e:	4602      	mov	r2, r0
    7040:	4630      	mov	r0, r6
    7042:	47a0      	blx	r4
      return kTfLiteError;
    7044:	2001      	movs	r0, #1
    7046:	e7f4      	b.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7048:	00000000 	.word	0x00000000
    704c:	000279dd 	.word	0x000279dd

00007050 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    7050:	680a      	ldr	r2, [r1, #0]
TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7052:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    7054:	6849      	ldr	r1, [r1, #4]
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
    7056:	b5f0      	push	{r4, r5, r6, r7, lr}
  return &context->tensors[node->inputs->data[index]];
    7058:	6855      	ldr	r5, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    705a:	684c      	ldr	r4, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    705c:	01aa      	lsls	r2, r5, #6
    705e:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    7060:	5c98      	ldrb	r0, [r3, r2]
    7062:	2803      	cmp	r0, #3
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
    7064:	b08d      	sub	sp, #52	; 0x34
    7066:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    706a:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
    706e:	d056      	beq.n	711e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xce>
    7070:	2809      	cmp	r0, #9
    7072:	d02d      	beq.n	70d0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x80>
    7074:	2801      	cmp	r0, #1
    7076:	f040 8081 	bne.w	717c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    case kTfLiteFloat32: {
      Relu6Float(GetTensorShape(input), GetTensorData<float>(input),
    707a:	4629      	mov	r1, r5
    707c:	4668      	mov	r0, sp
    707e:	f00e fc6a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                 GetTensorShape(output), GetTensorData<float>(output));
    7082:	4621      	mov	r1, r4
    7084:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7086:	686d      	ldr	r5, [r5, #4]
    7088:	f00e fc65 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    708c:	b104      	cbz	r4, 7090 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x40>
    708e:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    7090:	a906      	add	r1, sp, #24
    7092:	4668      	mov	r0, sp
    7094:	f00e fc36 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    output_data[i] = clamped;
    7098:	eddf 6a3d 	vldr	s13, [pc, #244]	; 7190 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x140>
    709c:	462b      	mov	r3, r5
  for (int i = 0; i < flat_size; ++i) {
    709e:	2200      	movs	r2, #0
    output_data[i] = clamped;
    70a0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
  for (int i = 0; i < flat_size; ++i) {
    70a4:	4290      	cmp	r0, r2
    70a6:	dd60      	ble.n	716a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const float val = input_data[i];
    70a8:	ecf3 7a01 	vldmia	r3!, {s15}
    output_data[i] = clamped;
    70ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    70b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70b4:	bfb8      	it	lt
    70b6:	eef0 7a66 	vmovlt.f32	s15, s13
    70ba:	eef4 7ac7 	vcmpe.f32	s15, s14
    70be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70c2:	bf88      	it	hi
    70c4:	eef0 7a47 	vmovhi.f32	s15, s14
    70c8:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    70cc:	3201      	adds	r2, #1
    70ce:	e7e9      	b.n	70a4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      const int8_t six = FloatToAsymmetricQuantizedInt8(
    70d0:	edd5 0a03 	vldr	s1, [r5, #12]
    70d4:	6928      	ldr	r0, [r5, #16]
    70d6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    70da:	f017 fa4e 	bl	1e57a <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const int8_t zero = input->params.zero_point;
      Relu6Quantized<int8_t>(
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70de:	4629      	mov	r1, r5
      const int8_t six = FloatToAsymmetricQuantizedInt8(
    70e0:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70e2:	4668      	mov	r0, sp
      const int8_t zero = input->params.zero_point;
    70e4:	f995 7010 	ldrsb.w	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
    70e8:	f00e fc35 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<int8_t>(output));
    70ec:	4621      	mov	r1, r4
    70ee:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    70f0:	686d      	ldr	r5, [r5, #4]
    70f2:	f00e fc30 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    70f6:	b104      	cbz	r4, 70fa <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    70f8:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    70fa:	a906      	add	r1, sp, #24
    70fc:	4668      	mov	r0, sp
    70fe:	f00e fc01 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    7102:	2300      	movs	r3, #0
    7104:	4298      	cmp	r0, r3
    7106:	dd30      	ble.n	716a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const Q val = input_data[i];
    7108:	56ea      	ldrsb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    710a:	4296      	cmp	r6, r2
    710c:	db05      	blt.n	711a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xca>
    710e:	42ba      	cmp	r2, r7
    7110:	bfb8      	it	lt
    7112:	463a      	movlt	r2, r7
    output_data[i] = clamped;
    7114:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    7116:	3301      	adds	r3, #1
    7118:	e7f4      	b.n	7104 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    711a:	4632      	mov	r2, r6
    711c:	e7fa      	b.n	7114 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc4>
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
    711e:	edd5 0a03 	vldr	s1, [r5, #12]
    7122:	6928      	ldr	r0, [r5, #16]
    7124:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    7128:	f017 fa10 	bl	1e54c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const uint8_t zero = input->params.zero_point;
      Relu6Quantized<uint8_t>(
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    712c:	4629      	mov	r1, r5
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
    712e:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7130:	4668      	mov	r0, sp
      const uint8_t zero = input->params.zero_point;
    7132:	7c2f      	ldrb	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7134:	f00e fc0f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    7138:	4621      	mov	r1, r4
    713a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    713c:	686d      	ldr	r5, [r5, #4]
    713e:	f00e fc0a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7142:	b104      	cbz	r4, 7146 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xf6>
    7144:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    7146:	a906      	add	r1, sp, #24
    7148:	4668      	mov	r0, sp
    714a:	f00e fbdb 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
    714e:	2300      	movs	r3, #0
    7150:	4298      	cmp	r0, r3
    7152:	dd0a      	ble.n	716a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x11a>
    const Q val = input_data[i];
    7154:	5cea      	ldrb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    7156:	4296      	cmp	r6, r2
    7158:	d305      	bcc.n	7166 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x116>
    715a:	42ba      	cmp	r2, r7
    715c:	bf38      	it	cc
    715e:	463a      	movcc	r2, r7
    output_data[i] = clamped;
    7160:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
    7162:	3301      	adds	r3, #1
    7164:	e7f4      	b.n	7150 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x100>
    7166:	4632      	mov	r2, r6
    7168:	e7fa      	b.n	7160 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x110>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    716a:	a806      	add	r0, sp, #24
    716c:	f00e fbae 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
    7170:	4668      	mov	r0, sp
    7172:	f00e fbab 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    7176:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
    7178:	b00d      	add	sp, #52	; 0x34
    717a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    717c:	6974      	ldr	r4, [r6, #20]
    717e:	f7f9 fb98 	bl	8b2 <TfLiteTypeGetName>
    7182:	4904      	ldr	r1, [pc, #16]	; (7194 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x144>)
    7184:	4602      	mov	r2, r0
    7186:	4630      	mov	r0, r6
    7188:	47a0      	blx	r4
      return kTfLiteError;
    718a:	2001      	movs	r0, #1
    718c:	e7f4      	b.n	7178 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x128>
    718e:	bf00      	nop
    7190:	00000000 	.word	0x00000000
    7194:	000279dd 	.word	0x000279dd

00007198 <_ZN6tflite3ops5micro13Register_RELUEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7198:	4800      	ldr	r0, [pc, #0]	; (719c <_ZN6tflite3ops5micro13Register_RELUEv+0x4>)
    719a:	4770      	bx	lr
    719c:	20000068 	.word	0x20000068

000071a0 <_ZN6tflite3ops5micro14Register_RELU6Ev>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    71a0:	4800      	ldr	r0, [pc, #0]	; (71a4 <_ZN6tflite3ops5micro14Register_RELU6Ev+0x4>)
    71a2:	4770      	bx	lr
    71a4:	20000088 	.word	0x20000088

000071a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    71a8:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
    71aa:	b570      	push	{r4, r5, r6, lr}
    71ac:	d128      	bne.n	7200 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x58>
    71ae:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    71b2:	425e      	negs	r6, r3
    71b4:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
    71b6:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    71ba:	2c00      	cmp	r4, #0
    71bc:	f175 0300 	sbcs.w	r3, r5, #0
    71c0:	4b1c      	ldr	r3, [pc, #112]	; (7234 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x8c>)
    71c2:	bfa8      	it	ge
    71c4:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    71c8:	b9e6      	cbnz	r6, 7204 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x5c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    71ca:	18e4      	adds	r4, r4, r3
    71cc:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
    71d0:	2c00      	cmp	r4, #0
    71d2:	f175 0300 	sbcs.w	r3, r5, #0
    71d6:	da06      	bge.n	71e6 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x3e>
    71d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    71dc:	18e4      	adds	r4, r4, r3
    71de:	f04f 0300 	mov.w	r3, #0
    71e2:	eb43 0505 	adc.w	r5, r3, r5
    71e6:	0fe0      	lsrs	r0, r4, #31
    71e8:	ea40 0145 	orr.w	r1, r0, r5, lsl #1
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
    71ec:	4252      	negs	r2, r2

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    71ee:	2a00      	cmp	r2, #0
    71f0:	da0b      	bge.n	720a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x62>
    71f2:	4b11      	ldr	r3, [pc, #68]	; (7238 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x90>)
    71f4:	4a11      	ldr	r2, [pc, #68]	; (723c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
    71f6:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    71fa:	4811      	ldr	r0, [pc, #68]	; (7240 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x98>)
    71fc:	f00d f91d 	bl	1443a <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7200:	2600      	movs	r6, #0
    7202:	e7d8      	b.n	71b6 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0xe>
    7204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7208:	e7f0      	b.n	71ec <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x44>
  assert(exponent <= 31);
    720a:	2a1f      	cmp	r2, #31
    720c:	dd04      	ble.n	7218 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x70>
    720e:	4b0d      	ldr	r3, [pc, #52]	; (7244 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x9c>)
    7210:	4a0a      	ldr	r2, [pc, #40]	; (723c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
    7212:	f240 1167 	movw	r1, #359	; 0x167
    7216:	e7f0      	b.n	71fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x52>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    7218:	2301      	movs	r3, #1
    721a:	4093      	lsls	r3, r2
    721c:	3b01      	subs	r3, #1
  return a & b;
    721e:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
    7222:	105b      	asrs	r3, r3, #1
  return a + b;
    7224:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
    7228:	4111      	asrs	r1, r2
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
    722a:	4298      	cmp	r0, r3
    722c:	bfd4      	ite	le
    722e:	4608      	movle	r0, r1
    7230:	1c48      	addgt	r0, r1, #1
    7232:	bd70      	pop	{r4, r5, r6, pc}
    7234:	c0000001 	.word	0xc0000001
    7238:	00027a09 	.word	0x00027a09
    723c:	00027a17 	.word	0x00027a17
    7240:	00027a6c 	.word	0x00027a6c
    7244:	00027ab8 	.word	0x00027ab8

00007248 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
    7248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    724c:	ed2d 8b06 	vpush	{d8-d10}
    7250:	b081      	sub	sp, #4
    7252:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
    7256:	4682      	mov	sl, r0
    7258:	468b      	mov	fp, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    725a:	4610      	mov	r0, r2
    725c:	4619      	mov	r1, r3
                             OpData* data) {
    725e:	461e      	mov	r6, r3
    7260:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    7262:	f017 f90e 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    7266:	782b      	ldrb	r3, [r5, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    7268:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    726c:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    726e:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    7270:	d001      	beq.n	7276 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
    7272:	2b09      	cmp	r3, #9
    7274:	d172      	bne.n	735c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x114>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
    7276:	693b      	ldr	r3, [r7, #16]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    7278:	ed97 aa03 	vldr	s20, [r7, #12]
    727c:	ed96 8a03 	vldr	s16, [r6, #12]
    7280:	425b      	negs	r3, r3
    7282:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
    7284:	6933      	ldr	r3, [r6, #16]
    7286:	425b      	negs	r3, r3
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const double twice_max_input_scale =
        2 * static_cast<double>(
    7288:	eeb4 aac8 	vcmpe.f32	s20, s16
    data->input2_offset = -input2->params.zero_point;
    728c:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
    728e:	692b      	ldr	r3, [r5, #16]
    7290:	6323      	str	r3, [r4, #48]	; 0x30
        2 * static_cast<double>(
    7292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    data->left_shift = 20;
    7296:	f04f 0314 	mov.w	r3, #20
        2 * static_cast<double>(
    729a:	bfb4      	ite	lt
    729c:	ee18 0a10 	vmovlt	r0, s16
    72a0:	ee1a 0a10 	vmovge	r0, s20
    data->left_shift = 20;
    72a4:	6263      	str	r3, [r4, #36]	; 0x24
        2 * static_cast<double>(
    72a6:	f7f9 fcdf 	bl	c68 <__aeabi_f2d>
    72aa:	4602      	mov	r2, r0
    72ac:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
    72ae:	f7f9 fb7d 	bl	9ac <__adddf3>
    72b2:	4606      	mov	r6, r0
    72b4:	460f      	mov	r7, r1
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
    72b6:	ee18 0a10 	vmov	r0, s16
    72ba:	f7f9 fcd5 	bl	c68 <__aeabi_f2d>
    const double real_input2_multiplier =
    72be:	4632      	mov	r2, r6
    72c0:	463b      	mov	r3, r7
    72c2:	f7f9 fe53 	bl	f6c <__aeabi_ddiv>
    const double real_output_multiplier =
    72c6:	4b28      	ldr	r3, [pc, #160]	; (7368 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x120>)
    const double real_input2_multiplier =
    72c8:	ec41 0b19 	vmov	d9, r0, r1
    const double real_output_multiplier =
    72cc:	2200      	movs	r2, #0
    72ce:	4630      	mov	r0, r6
    72d0:	4639      	mov	r1, r7
    72d2:	f7f9 fd21 	bl	d18 <__aeabi_dmul>
    72d6:	4680      	mov	r8, r0
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
    72d8:	68e8      	ldr	r0, [r5, #12]
    const double real_output_multiplier =
    72da:	4689      	mov	r9, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
    72dc:	f7f9 fcc4 	bl	c68 <__aeabi_f2d>
    72e0:	4602      	mov	r2, r0
    72e2:	460b      	mov	r3, r1
    const double real_output_multiplier =
    72e4:	4640      	mov	r0, r8
    72e6:	4649      	mov	r1, r9
    72e8:	f7f9 fe40 	bl	f6c <__aeabi_ddiv>
    72ec:	ec41 0b18 	vmov	d8, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
    72f0:	ee1a 0a10 	vmov	r0, s20
    72f4:	f7f9 fcb8 	bl	c68 <__aeabi_f2d>
    const double real_input1_multiplier =
    72f8:	4632      	mov	r2, r6
    72fa:	463b      	mov	r3, r7
    72fc:	f7f9 fe36 	bl	f6c <__aeabi_ddiv>

    QuantizeMultiplierSmallerThanOneExp(
    7300:	f104 0904 	add.w	r9, r4, #4
    7304:	f104 0814 	add.w	r8, r4, #20
    const double real_input1_multiplier =
    7308:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    730c:	4649      	mov	r1, r9
    730e:	4640      	mov	r0, r8
    7310:	f00a fa6e 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
    7314:	eeb0 0a49 	vmov.f32	s0, s18
    7318:	eef0 0a69 	vmov.f32	s1, s19
    731c:	f104 0108 	add.w	r1, r4, #8
    7320:	f104 0018 	add.w	r0, r4, #24
    7324:	f00a fa64 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
    7328:	eeb0 0a48 	vmov.f32	s0, s16
    732c:	eef0 0a68 	vmov.f32	s1, s17
    7330:	f104 0120 	add.w	r1, r4, #32
    7334:	f104 001c 	add.w	r0, r4, #28
    7338:	f00a fa5a 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    733c:	f104 0310 	add.w	r3, r4, #16
    7340:	f89b 1000 	ldrb.w	r1, [fp]
    7344:	9310      	str	r3, [sp, #64]	; 0x40
    7346:	462a      	mov	r2, r5
    7348:	f104 030c 	add.w	r3, r4, #12
    734c:	4650      	mov	r0, sl
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
    734e:	b001      	add	sp, #4
    7350:	ecbd 8b06 	vpop	{d8-d10}
    7354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    7358:	f00a baa2 	b.w	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
    735c:	2000      	movs	r0, #0
    735e:	b001      	add	sp, #4
    7360:	ecbd 8b06 	vpop	{d8-d10}
    7364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7368:	3eb00000 	.word	0x3eb00000

0000736c <_ZN6tflite3ops5micro12Register_ADDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    736c:	4800      	ldr	r0, [pc, #0]	; (7370 <_ZN6tflite3ops5micro12Register_ADDEv+0x4>)
    736e:	4770      	bx	lr
    7370:	200000a8 	.word	0x200000a8

00007374 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
    7374:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
    7376:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
    7378:	b0ab      	sub	sp, #172	; 0xac
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    737a:	2a01      	cmp	r2, #1
    737c:	e9dd 6530 	ldrd	r6, r5, [sp, #192]	; 0xc0
    7380:	9c32      	ldr	r4, [sp, #200]	; 0xc8
    7382:	d03d      	beq.n	7400 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    7384:	2a03      	cmp	r2, #3
    7386:	d040      	beq.n	740a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x96>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
    7388:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 7478 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    738c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 747c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
    7390:	2a02      	cmp	r2, #2
    7392:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7396:	bf18      	it	ne
    7398:	eef0 7a47 	vmovne.f32	s15, s14
    739c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    73a0:	bf18      	it	ne
    73a2:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
    73a6:	781b      	ldrb	r3, [r3, #0]
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
    73a8:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
    73ac:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    73b0:	af10      	add	r7, sp, #64	; 0x40
    TF_LITE_ADD(BroadcastAdd4DSlow);
    73b2:	4631      	mov	r1, r6
    73b4:	a804      	add	r0, sp, #16
  if (data->requires_broadcast) {
    73b6:	b35b      	cbz	r3, 7410 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x9c>
    TF_LITE_ADD(BroadcastAdd4DSlow);
    73b8:	f00e facd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    73bc:	b106      	cbz	r6, 73c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x4c>
    73be:	6876      	ldr	r6, [r6, #4]
    73c0:	4629      	mov	r1, r5
    73c2:	a80a      	add	r0, sp, #40	; 0x28
    73c4:	f00e fac7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    73c8:	b105      	cbz	r5, 73cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
    73ca:	686d      	ldr	r5, [r5, #4]
    73cc:	4621      	mov	r1, r4
    73ce:	4638      	mov	r0, r7
    73d0:	f00e fac1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    73d4:	b104      	cbz	r4, 73d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
    73d6:	6864      	ldr	r4, [r4, #4]
    73d8:	9500      	str	r5, [sp, #0]
    73da:	e9cd 7401 	strd	r7, r4, [sp, #4]
    73de:	ab0a      	add	r3, sp, #40	; 0x28
    73e0:	4632      	mov	r2, r6
    73e2:	a904      	add	r1, sp, #16
    73e4:	a816      	add	r0, sp, #88	; 0x58
    73e6:	f00e fd5e 	bl	15ea6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
    73ea:	4638      	mov	r0, r7
    73ec:	f00e fa6e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    73f0:	a80a      	add	r0, sp, #40	; 0x28
    73f2:	f00e fa6b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    73f6:	a804      	add	r0, sp, #16
    73f8:	f00e fa68 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
    73fc:	b02b      	add	sp, #172	; 0xac
    73fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
    7400:	eddf 7a1d 	vldr	s15, [pc, #116]	; 7478 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    *activation_min = 0;
    7404:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 7480 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10c>
    7408:	e7cd      	b.n	73a6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x32>
    *activation_max = 6;
    740a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    740e:	e7f9      	b.n	7404 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x90>
    TF_LITE_ADD(Add);
    7410:	f00e faa1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7414:	b106      	cbz	r6, 7418 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa4>
    7416:	6876      	ldr	r6, [r6, #4]
    7418:	4629      	mov	r1, r5
    741a:	a80a      	add	r0, sp, #40	; 0x28
    741c:	f00e fa9b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7420:	b105      	cbz	r5, 7424 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb0>
    7422:	686d      	ldr	r5, [r5, #4]
    7424:	4621      	mov	r1, r4
    7426:	4638      	mov	r0, r7
    7428:	f00e fa95 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    742c:	b104      	cbz	r4, 7430 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xbc>
    742e:	6864      	ldr	r4, [r4, #4]
inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
    7430:	463a      	mov	r2, r7
    7432:	a90a      	add	r1, sp, #40	; 0x28
    7434:	a804      	add	r0, sp, #16
    7436:	f00e fb38 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; i++) {
    743a:	2300      	movs	r3, #0
    743c:	4298      	cmp	r0, r3
    743e:	ddd4      	ble.n	73ea <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x76>
    auto x = input1_data[i] + input2_data[i];
    7440:	ecb5 7a01 	vldmia	r5!, {s14}
    7444:	ecf6 7a01 	vldmia	r6!, {s15}
    7448:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[i] = ActivationFunctionWithMinMax(
    744c:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
    7450:	eef4 7ac7 	vcmpe.f32	s15, s14
    7454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7458:	bfb8      	it	lt
    745a:	eef0 7a47 	vmovlt.f32	s15, s14
    745e:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
    7462:	eef4 7ac7 	vcmpe.f32	s15, s14
    7466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    746a:	bf88      	it	hi
    746c:	eef0 7a47 	vmovhi.f32	s15, s14
    7470:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
    7474:	3301      	adds	r3, #1
    7476:	e7e1      	b.n	743c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
    7478:	7f7fffff 	.word	0x7f7fffff
    747c:	ff7fffff 	.word	0xff7fffff
    7480:	00000000 	.word	0x00000000

00007484 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    7484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7488:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    748a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    748e:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
    7490:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    7492:	685a      	ldr	r2, [r3, #4]
    7494:	689b      	ldr	r3, [r3, #8]
    7496:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
    749a:	6872      	ldr	r2, [r6, #4]
    749c:	6857      	ldr	r7, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    749e:	b095      	sub	sp, #84	; 0x54
    74a0:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
    74a4:	f10d 0a1c 	add.w	sl, sp, #28
    74a8:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    74ac:	eb08 1383 	add.w	r3, r8, r3, lsl #6
    74b0:	e9cd 7a00 	strd	r7, sl, [sp]
    74b4:	464a      	mov	r2, r9
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    74b6:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
    74b8:	9305      	str	r3, [sp, #20]
    74ba:	9104      	str	r1, [sp, #16]
    74bc:	f7ff fec4 	bl	7248 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
    74c0:	4604      	mov	r4, r0
    74c2:	b978      	cbnz	r0, 74e4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
    74c4:	f818 000b 	ldrb.w	r0, [r8, fp]
    74c8:	2801      	cmp	r0, #1
    74ca:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    74ce:	d10d      	bne.n	74ec <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
    74d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    74d4:	460a      	mov	r2, r1
    74d6:	f8cd 9000 	str.w	r9, [sp]
    74da:	4653      	mov	r3, sl
    74dc:	4631      	mov	r1, r6
    74de:	4628      	mov	r0, r5
    74e0:	f7ff ff48 	bl	7374 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
    74e4:	4620      	mov	r0, r4
    74e6:	b015      	add	sp, #84	; 0x54
    74e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    74ec:	2803      	cmp	r0, #3
    74ee:	d001      	beq.n	74f4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    74f0:	2809      	cmp	r0, #9
    74f2:	d10b      	bne.n	750c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
    74f4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    74f8:	460a      	mov	r2, r1
    74fa:	f8cd 9000 	str.w	r9, [sp]
    74fe:	4653      	mov	r3, sl
    7500:	4631      	mov	r1, r6
    7502:	4628      	mov	r0, r5
    7504:	f00e ff04 	bl	16310 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
    7508:	4604      	mov	r4, r0
    750a:	e7eb      	b.n	74e4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    750c:	696c      	ldr	r4, [r5, #20]
    750e:	f7f9 f9d0 	bl	8b2 <TfLiteTypeGetName>
    7512:	f818 300b 	ldrb.w	r3, [r8, fp]
    7516:	4903      	ldr	r1, [pc, #12]	; (7524 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
    7518:	4602      	mov	r2, r0
    751a:	4628      	mov	r0, r5
    751c:	47a0      	blx	r4
    return kTfLiteError;
    751e:	2401      	movs	r4, #1
    7520:	e7e0      	b.n	74e4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    7522:	bf00      	nop
    7524:	00027ac7 	.word	0x00027ac7

00007528 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7528:	4800      	ldr	r0, [pc, #0]	; (752c <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x4>)
    752a:	4770      	bx	lr
    752c:	200000c8 	.word	0x200000c8

00007530 <_ZN6tflite3ops5micro16Register_ARG_MINEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7530:	4800      	ldr	r0, [pc, #0]	; (7534 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x4>)
    7532:	4770      	bx	lr
    7534:	200000e8 	.word	0x200000e8

00007538 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
    7538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    753c:	4690      	mov	r8, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    753e:	680a      	ldr	r2, [r1, #0]
    7540:	6883      	ldr	r3, [r0, #8]
    7542:	6897      	ldr	r7, [r2, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
    7544:	4604      	mov	r4, r0
    7546:	01b8      	lsls	r0, r7, #6
    7548:	b092      	sub	sp, #72	; 0x48
  if (axis->type == kTfLiteInt32) {
    754a:	5c18      	ldrb	r0, [r3, r0]
    754c:	2802      	cmp	r0, #2
    754e:	eb03 1787 	add.w	r7, r3, r7, lsl #6
    7552:	d178      	bne.n	7646 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->outputs->data[index]];
    7554:	6849      	ldr	r1, [r1, #4]
    7556:	684d      	ldr	r5, [r1, #4]
    7558:	01a9      	lsls	r1, r5, #6
    755a:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    if (output->type == kTfLiteInt32) {
    755e:	5c58      	ldrb	r0, [r3, r1]
    7560:	2802      	cmp	r0, #2
    7562:	d170      	bne.n	7646 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->inputs->data[index]];
    7564:	6856      	ldr	r6, [r2, #4]
    7566:	01b2      	lsls	r2, r6, #6
    7568:	eb03 1686 	add.w	r6, r3, r6, lsl #6
      switch (input->type) {
    756c:	5c98      	ldrb	r0, [r3, r2]
    756e:	2803      	cmp	r0, #3
    7570:	d028      	beq.n	75c4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x8c>
    7572:	2809      	cmp	r0, #9
    7574:	d042      	beq.n	75fc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xc4>
    7576:	2801      	cmp	r0, #1
    7578:	d15c      	bne.n	7634 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xfc>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
    757a:	4631      	mov	r1, r6
    757c:	a806      	add	r0, sp, #24
    757e:	f00e f9ea 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7582:	687a      	ldr	r2, [r7, #4]
    7584:	6874      	ldr	r4, [r6, #4]
    7586:	9203      	str	r2, [sp, #12]
    7588:	4629      	mov	r1, r5
    758a:	a80c      	add	r0, sp, #48	; 0x30
    758c:	f00e f9e3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7590:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    7592:	9a03      	ldr	r2, [sp, #12]
    7594:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7596:	e9cd 3100 	strd	r3, r1, [sp]
    759a:	a806      	add	r0, sp, #24
    759c:	ab0c      	add	r3, sp, #48	; 0x30
    759e:	4621      	mov	r1, r4
  if (is_arg_max) {
    75a0:	f1b8 0f00 	cmp.w	r8, #0
    75a4:	d00b      	beq.n	75be <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x86>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75a6:	f00e fec1 	bl	1632c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
    75aa:	a80c      	add	r0, sp, #48	; 0x30
    75ac:	f00e f98e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    75b0:	a806      	add	r0, sp, #24
    75b2:	f00e f98b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    75b6:	2000      	movs	r0, #0
}
    75b8:	b012      	add	sp, #72	; 0x48
    75ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75be:	f00e ff35 	bl	1642c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75c2:	e7f2      	b.n	75aa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
    75c4:	4631      	mov	r1, r6
    75c6:	a806      	add	r0, sp, #24
    75c8:	f00e f9c5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    75cc:	687a      	ldr	r2, [r7, #4]
    75ce:	6874      	ldr	r4, [r6, #4]
    75d0:	9203      	str	r2, [sp, #12]
    75d2:	4629      	mov	r1, r5
    75d4:	a80c      	add	r0, sp, #48	; 0x30
    75d6:	f00e f9be 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    75da:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    75dc:	9a03      	ldr	r2, [sp, #12]
    75de:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75e0:	e9cd 3100 	strd	r3, r1, [sp]
    75e4:	a806      	add	r0, sp, #24
    75e6:	ab0c      	add	r3, sp, #48	; 0x30
    75e8:	4621      	mov	r1, r4
  if (is_arg_max) {
    75ea:	f1b8 0f00 	cmp.w	r8, #0
    75ee:	d002      	beq.n	75f6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xbe>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75f0:	f00e ff9c 	bl	1652c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75f4:	e7d9      	b.n	75aa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    75f6:	f00f f80d 	bl	16614 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    75fa:	e7d6      	b.n	75aa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
    75fc:	4631      	mov	r1, r6
    75fe:	a806      	add	r0, sp, #24
    7600:	f00e f9a9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7604:	687a      	ldr	r2, [r7, #4]
    7606:	6874      	ldr	r4, [r6, #4]
    7608:	9203      	str	r2, [sp, #12]
    760a:	4629      	mov	r1, r5
    760c:	a80c      	add	r0, sp, #48	; 0x30
    760e:	f00e f9a2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7612:	686b      	ldr	r3, [r5, #4]
  if (is_arg_max) {
    7614:	9a03      	ldr	r2, [sp, #12]
    7616:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7618:	e9cd 3100 	strd	r3, r1, [sp]
    761c:	a806      	add	r0, sp, #24
    761e:	ab0c      	add	r3, sp, #48	; 0x30
    7620:	4621      	mov	r1, r4
  if (is_arg_max) {
    7622:	f1b8 0f00 	cmp.w	r8, #0
    7626:	d002      	beq.n	762e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf6>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    7628:	f00f f868 	bl	166fc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    762c:	e7bd      	b.n	75aa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
    762e:	f00f f8d9 	bl	167e4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
    7632:	e7ba      	b.n	75aa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_KERNEL_LOG(context,
    7634:	6965      	ldr	r5, [r4, #20]
    7636:	f7f9 f93c 	bl	8b2 <TfLiteTypeGetName>
    763a:	4906      	ldr	r1, [pc, #24]	; (7654 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x11c>)
    763c:	4602      	mov	r2, r0
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
    763e:	4620      	mov	r0, r4
    7640:	47a8      	blx	r5
    return kTfLiteError;
    7642:	2001      	movs	r0, #1
    7644:	e7b8      	b.n	75b8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x80>
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
    7646:	6965      	ldr	r5, [r4, #20]
    7648:	f7f9 f933 	bl	8b2 <TfLiteTypeGetName>
    764c:	4902      	ldr	r1, [pc, #8]	; (7658 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x120>)
    764e:	4602      	mov	r2, r0
    7650:	e7f5      	b.n	763e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x106>
    7652:	bf00      	nop
    7654:	00027ae3 	.word	0x00027ae3
    7658:	00027b21 	.word	0x00027b21

0000765c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    765c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7660:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    7662:	681e      	ldr	r6, [r3, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    7664:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7666:	b085      	sub	sp, #20
    7668:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    766a:	d00c      	beq.n	7686 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    766c:	2401      	movs	r4, #1
    766e:	4b4a      	ldr	r3, [pc, #296]	; (7798 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    7670:	9301      	str	r3, [sp, #4]
    7672:	e9cd 6402 	strd	r6, r4, [sp, #8]
    7676:	4b49      	ldr	r3, [pc, #292]	; (779c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    7678:	9300      	str	r3, [sp, #0]
    767a:	6945      	ldr	r5, [r0, #20]
    767c:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    767e:	4a48      	ldr	r2, [pc, #288]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    7680:	4948      	ldr	r1, [pc, #288]	; (77a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    7682:	47a8      	blx	r5
    7684:	e00f      	b.n	76a6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    7686:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    7688:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    768a:	2c01      	cmp	r4, #1
    768c:	d00f      	beq.n	76ae <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
    768e:	e9cd 4602 	strd	r4, r6, [sp, #8]
    7692:	4b41      	ldr	r3, [pc, #260]	; (7798 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    7694:	9301      	str	r3, [sp, #4]
    7696:	4b44      	ldr	r3, [pc, #272]	; (77a8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    7698:	9300      	str	r3, [sp, #0]
    769a:	6944      	ldr	r4, [r0, #20]
    769c:	4a40      	ldr	r2, [pc, #256]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    769e:	4941      	ldr	r1, [pc, #260]	; (77a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    76a0:	2322      	movs	r3, #34	; 0x22
    76a2:	47a0      	blx	r4
    76a4:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
    76a6:	4620      	mov	r0, r4
    76a8:	b005      	add	sp, #20
    76aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
    76ae:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    76b0:	6886      	ldr	r6, [r0, #8]
    76b2:	ea4f 1883 	mov.w	r8, r3, lsl #6
    76b6:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    76ba:	f816 7008 	ldrb.w	r7, [r6, r8]
    76be:	2f01      	cmp	r7, #1
    76c0:	d014      	beq.n	76ec <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    76c2:	f8d0 8014 	ldr.w	r8, [r0, #20]
    76c6:	4638      	mov	r0, r7
    76c8:	f7f9 f8f3 	bl	8b2 <TfLiteTypeGetName>
    76cc:	4606      	mov	r6, r0
    76ce:	4620      	mov	r0, r4
    76d0:	f7f9 f8ef 	bl	8b2 <TfLiteTypeGetName>
    76d4:	4b35      	ldr	r3, [pc, #212]	; (77ac <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    76d6:	9301      	str	r3, [sp, #4]
    76d8:	4b35      	ldr	r3, [pc, #212]	; (77b0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    76da:	9300      	str	r3, [sp, #0]
    76dc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    76e0:	4a2f      	ldr	r2, [pc, #188]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    76e2:	4934      	ldr	r1, [pc, #208]	; (77b4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    76e4:	2323      	movs	r3, #35	; 0x23
    76e6:	4628      	mov	r0, r5
    76e8:	47c0      	blx	r8
    76ea:	e7dc      	b.n	76a6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
    76ec:	6852      	ldr	r2, [r2, #4]
    76ee:	0191      	lsls	r1, r2, #6
    76f0:	eb06 1282 	add.w	r2, r6, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
    76f4:	5c74      	ldrb	r4, [r6, r1]
    76f6:	2c01      	cmp	r4, #1
    76f8:	d016      	beq.n	7728 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    76fa:	f8d0 9014 	ldr.w	r9, [r0, #20]
    76fe:	4620      	mov	r0, r4
    7700:	f7f9 f8d7 	bl	8b2 <TfLiteTypeGetName>
    7704:	4604      	mov	r4, r0
    7706:	f816 0008 	ldrb.w	r0, [r6, r8]
    770a:	f7f9 f8d2 	bl	8b2 <TfLiteTypeGetName>
    770e:	4b28      	ldr	r3, [pc, #160]	; (77b0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    7710:	9301      	str	r3, [sp, #4]
    7712:	4b29      	ldr	r3, [pc, #164]	; (77b8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    7714:	9300      	str	r3, [sp, #0]
    7716:	e9cd 4002 	strd	r4, r0, [sp, #8]
    771a:	4a21      	ldr	r2, [pc, #132]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    771c:	4925      	ldr	r1, [pc, #148]	; (77b4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    771e:	2324      	movs	r3, #36	; 0x24
    7720:	4628      	mov	r0, r5
    7722:	47c8      	blx	r9
    7724:	463c      	mov	r4, r7
    7726:	e7be      	b.n	76a6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
    7728:	6991      	ldr	r1, [r2, #24]
    772a:	699e      	ldr	r6, [r3, #24]
    772c:	42b1      	cmp	r1, r6
    772e:	d008      	beq.n	7742 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    7730:	4b22      	ldr	r3, [pc, #136]	; (77bc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    7732:	9301      	str	r3, [sp, #4]
    7734:	e9cd 1602 	strd	r1, r6, [sp, #8]
    7738:	4b21      	ldr	r3, [pc, #132]	; (77c0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    773a:	9300      	str	r3, [sp, #0]
    773c:	6945      	ldr	r5, [r0, #20]
    773e:	2325      	movs	r3, #37	; 0x25
    7740:	e79d      	b.n	767e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    7742:	6897      	ldr	r7, [r2, #8]
    7744:	689a      	ldr	r2, [r3, #8]
    7746:	6839      	ldr	r1, [r7, #0]
    7748:	6813      	ldr	r3, [r2, #0]
    774a:	4299      	cmp	r1, r3
    774c:	d008      	beq.n	7760 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    774e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    7752:	4b1c      	ldr	r3, [pc, #112]	; (77c4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    7754:	9301      	str	r3, [sp, #4]
    7756:	4b1c      	ldr	r3, [pc, #112]	; (77c8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    7758:	9300      	str	r3, [sp, #0]
    775a:	6945      	ldr	r5, [r0, #20]
    775c:	2326      	movs	r3, #38	; 0x26
    775e:	e78e      	b.n	767e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7760:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    7762:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
    7764:	1e58      	subs	r0, r3, #1
    7766:	4281      	cmp	r1, r0
    7768:	dd13      	ble.n	7792 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    776a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    776e:	3301      	adds	r3, #1
    7770:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    7774:	42b0      	cmp	r0, r6
    7776:	d0f5      	beq.n	7764 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
    7778:	e9cd 0602 	strd	r0, r6, [sp, #8]
    777c:	4b13      	ldr	r3, [pc, #76]	; (77cc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    777e:	9301      	str	r3, [sp, #4]
    7780:	4b13      	ldr	r3, [pc, #76]	; (77d0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    7782:	9300      	str	r3, [sp, #0]
    7784:	696e      	ldr	r6, [r5, #20]
    7786:	4a06      	ldr	r2, [pc, #24]	; (77a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    7788:	4906      	ldr	r1, [pc, #24]	; (77a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    778a:	2328      	movs	r3, #40	; 0x28
    778c:	4628      	mov	r0, r5
    778e:	47b0      	blx	r6
    7790:	e789      	b.n	76a6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
    7792:	2400      	movs	r4, #0
    7794:	e787      	b.n	76a6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    7796:	bf00      	nop
    7798:	0002880d 	.word	0x0002880d
    779c:	00027b8d 	.word	0x00027b8d
    77a0:	00027b4d 	.word	0x00027b4d
    77a4:	00027b73 	.word	0x00027b73
    77a8:	00027b9d 	.word	0x00027b9d
    77ac:	00027bc8 	.word	0x00027bc8
    77b0:	00028398 	.word	0x00028398
    77b4:	00027bae 	.word	0x00027bae
    77b8:	00028380 	.word	0x00028380
    77bc:	00027bd7 	.word	0x00027bd7
    77c0:	00027be4 	.word	0x00027be4
    77c4:	00027bf2 	.word	0x00027bf2
    77c8:	00027c04 	.word	0x00027c04
    77cc:	00027c17 	.word	0x00027c17
    77d0:	00027c2c 	.word	0x00027c2c

000077d4 <_ZN6tflite3ops5micro13Register_CEILEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77d4:	4800      	ldr	r0, [pc, #0]	; (77d8 <_ZN6tflite3ops5micro13Register_CEILEv+0x4>)
    77d6:	4770      	bx	lr
    77d8:	20000108 	.word	0x20000108

000077dc <_ZN6tflite3ops5micro14Register_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77dc:	4800      	ldr	r0, [pc, #0]	; (77e0 <_ZN6tflite3ops5micro14Register_EQUALEv+0x4>)
    77de:	4770      	bx	lr
    77e0:	20000148 	.word	0x20000148

000077e4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77e4:	4800      	ldr	r0, [pc, #0]	; (77e8 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x4>)
    77e6:	4770      	bx	lr
    77e8:	20000188 	.word	0x20000188

000077ec <_ZN6tflite3ops5micro16Register_GREATEREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77ec:	4800      	ldr	r0, [pc, #0]	; (77f0 <_ZN6tflite3ops5micro16Register_GREATEREv+0x4>)
    77ee:	4770      	bx	lr
    77f0:	20000168 	.word	0x20000168

000077f4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77f4:	4800      	ldr	r0, [pc, #0]	; (77f8 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x4>)
    77f6:	4770      	bx	lr
    77f8:	200001c8 	.word	0x200001c8

000077fc <_ZN6tflite3ops5micro13Register_LESSEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    77fc:	4800      	ldr	r0, [pc, #0]	; (7800 <_ZN6tflite3ops5micro13Register_LESSEv+0x4>)
    77fe:	4770      	bx	lr
    7800:	20000128 	.word	0x20000128

00007804 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    7804:	4800      	ldr	r0, [pc, #0]	; (7808 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x4>)
    7806:	4770      	bx	lr
    7808:	200001a8 	.word	0x200001a8

0000780c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
    780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    7810:	680b      	ldr	r3, [r1, #0]
    7812:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    7816:	685e      	ldr	r6, [r3, #4]
    7818:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    781a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
    781c:	ed2d 8b02 	vpush	{d8}
    7820:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    7822:	ea4f 1986 	mov.w	r9, r6, lsl #6
    7826:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    782a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    782e:	b0ab      	sub	sp, #172	; 0xac
    7830:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    7832:	4621      	mov	r1, r4
    7834:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    7836:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    783a:	f016 fe22 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    783e:	f080 0001 	eor.w	r0, r0, #1
    7842:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    7844:	f818 0009 	ldrb.w	r0, [r8, r9]
    7848:	1e43      	subs	r3, r0, #1
    784a:	2b08      	cmp	r3, #8
    784c:	f200 82a0 	bhi.w	7d90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x584>
    7850:	e8df f013 	tbh	[pc, r3, lsl #1]
    7854:	00b80060 	.word	0x00b80060
    7858:	01060169 	.word	0x01060169
    785c:	0009029e 	.word	0x0009029e
    7860:	029e029e 	.word	0x029e029e
    7864:	0203      	.short	0x0203
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
    7866:	ad1c      	add	r5, sp, #112	; 0x70
    7868:	4631      	mov	r1, r6
    786a:	b31f      	cbz	r7, 78b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    786c:	a810      	add	r0, sp, #64	; 0x40
    786e:	f00e f872 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7872:	4621      	mov	r1, r4
    7874:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7876:	6876      	ldr	r6, [r6, #4]
    7878:	f00e f86d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    787c:	b104      	cbz	r4, 7880 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    787e:	6864      	ldr	r4, [r4, #4]
    7880:	4651      	mov	r1, sl
    7882:	4628      	mov	r0, r5
    7884:	f00e f867 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7888:	f1ba 0f00 	cmp.w	sl, #0
    788c:	d001      	beq.n	7892 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    788e:	f8da a004 	ldr.w	sl, [sl, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
    7892:	9400      	str	r4, [sp, #0]
    7894:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7898:	ab16      	add	r3, sp, #88	; 0x58
    789a:	4632      	mov	r2, r6
    789c:	a910      	add	r1, sp, #64	; 0x40
    789e:	a822      	add	r0, sp, #136	; 0x88
    78a0:	f00f fb6e 	bl	16f80 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Equal);
    78a4:	4628      	mov	r0, r5
    78a6:	f00e f811 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    78aa:	a816      	add	r0, sp, #88	; 0x58
    78ac:	f00e f80e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    78b0:	a810      	add	r0, sp, #64	; 0x40
    78b2:	e130      	b.n	7b16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x30a>
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
    78b4:	a816      	add	r0, sp, #88	; 0x58
    78b6:	f00e f84e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    78ba:	4621      	mov	r1, r4
    78bc:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    78be:	6876      	ldr	r6, [r6, #4]
    78c0:	f00e f849 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    78c4:	b104      	cbz	r4, 78c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    78c6:	6864      	ldr	r4, [r4, #4]
    78c8:	4651      	mov	r1, sl
    78ca:	a822      	add	r0, sp, #136	; 0x88
    78cc:	f00e f843 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    78d0:	f1ba 0f00 	cmp.w	sl, #0
    78d4:	d001      	beq.n	78da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
    78d6:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    78da:	aa22      	add	r2, sp, #136	; 0x88
    78dc:	4629      	mov	r1, r5
    78de:	a816      	add	r0, sp, #88	; 0x58
    78e0:	f00f f87d 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    78e4:	2200      	movs	r2, #0
  const int64_t flatsize =
    78e6:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    78e8:	2300      	movs	r3, #0
    78ea:	4282      	cmp	r2, r0
    78ec:	eb73 0701 	sbcs.w	r7, r3, r1
    78f0:	f280 810a 	bge.w	7b08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    78f4:	f816 c002 	ldrb.w	ip, [r6, r2]
    78f8:	f814 e002 	ldrb.w	lr, [r4, r2]
    78fc:	ebac 0e0e 	sub.w	lr, ip, lr
    7900:	f1de 0c00 	rsbs	ip, lr, #0
    7904:	eb4c 0c0e 	adc.w	ip, ip, lr
    7908:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    790c:	3201      	adds	r2, #1
    790e:	f143 0300 	adc.w	r3, r3, #0
    7912:	e7ea      	b.n	78ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
    7914:	ad1c      	add	r5, sp, #112	; 0x70
    7916:	4631      	mov	r1, r6
    7918:	b1e7      	cbz	r7, 7954 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x148>
    791a:	a810      	add	r0, sp, #64	; 0x40
    791c:	f00e f81b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7920:	4621      	mov	r1, r4
    7922:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7924:	6876      	ldr	r6, [r6, #4]
    7926:	f00e f816 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    792a:	b104      	cbz	r4, 792e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x122>
    792c:	6864      	ldr	r4, [r4, #4]
    792e:	4651      	mov	r1, sl
    7930:	4628      	mov	r0, r5
    7932:	f00e f810 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7936:	f1ba 0f00 	cmp.w	sl, #0
    793a:	d001      	beq.n	7940 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x134>
    793c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7940:	9400      	str	r4, [sp, #0]
    7942:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7946:	ab16      	add	r3, sp, #88	; 0x58
    7948:	4632      	mov	r2, r6
    794a:	a910      	add	r1, sp, #64	; 0x40
    794c:	a822      	add	r0, sp, #136	; 0x88
    794e:	f00f f8ef 	bl	16b30 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7952:	e7a7      	b.n	78a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7954:	a816      	add	r0, sp, #88	; 0x58
    7956:	f00d fffe 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    795a:	4621      	mov	r1, r4
    795c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    795e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7962:	f00d fff8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7966:	b104      	cbz	r4, 796a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
    7968:	6864      	ldr	r4, [r4, #4]
    796a:	4651      	mov	r1, sl
    796c:	a822      	add	r0, sp, #136	; 0x88
    796e:	f00d fff2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7972:	f1ba 0f00 	cmp.w	sl, #0
    7976:	d001      	beq.n	797c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x170>
    7978:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    797c:	aa22      	add	r2, sp, #136	; 0x88
    797e:	4629      	mov	r1, r5
    7980:	a816      	add	r0, sp, #88	; 0x58
    7982:	f00f f82c 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7986:	4641      	mov	r1, r8
  const int64_t flatsize =
    7988:	4606      	mov	r6, r0
    798a:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    798c:	2200      	movs	r2, #0
    798e:	2300      	movs	r3, #0
    7990:	42b2      	cmp	r2, r6
    7992:	eb73 0007 	sbcs.w	r0, r3, r7
    7996:	f280 80b7 	bge.w	7b08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    output_data[i] = F(input1_data[i], input2_data[i]);
    799a:	ecb1 7a01 	vldmia	r1!, {s14}
    799e:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs == rhs;
    79a2:	eeb4 7a67 	vcmp.f32	s14, s15
    79a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    79aa:	eb0a 0002 	add.w	r0, sl, r2
  return lhs == rhs;
    79ae:	bf0c      	ite	eq
    79b0:	f04f 0c01 	moveq.w	ip, #1
    79b4:	f04f 0c00 	movne.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    79b8:	3201      	adds	r2, #1
  return lhs == rhs;
    79ba:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    79be:	f143 0300 	adc.w	r3, r3, #0
    79c2:	e7e5      	b.n	7990 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x184>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
    79c4:	ad1c      	add	r5, sp, #112	; 0x70
    79c6:	4631      	mov	r1, r6
    79c8:	b1e7      	cbz	r7, 7a04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    79ca:	a810      	add	r0, sp, #64	; 0x40
    79cc:	f00d ffc3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79d0:	4621      	mov	r1, r4
    79d2:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    79d4:	6876      	ldr	r6, [r6, #4]
    79d6:	f00d ffbe 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    79da:	b104      	cbz	r4, 79de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    79dc:	6864      	ldr	r4, [r4, #4]
    79de:	4651      	mov	r1, sl
    79e0:	4628      	mov	r0, r5
    79e2:	f00d ffb8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    79e6:	f1ba 0f00 	cmp.w	sl, #0
    79ea:	d001      	beq.n	79f0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
    79ec:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    79f0:	9400      	str	r4, [sp, #0]
    79f2:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    79f6:	ab16      	add	r3, sp, #88	; 0x58
    79f8:	4632      	mov	r2, r6
    79fa:	a910      	add	r1, sp, #64	; 0x40
    79fc:	a822      	add	r0, sp, #136	; 0x88
    79fe:	f00f fb13 	bl	17028 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7a02:	e74f      	b.n	78a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7a04:	a816      	add	r0, sp, #88	; 0x58
    7a06:	f00d ffa6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a0a:	4621      	mov	r1, r4
    7a0c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7a0e:	6876      	ldr	r6, [r6, #4]
    7a10:	f00d ffa1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a14:	b104      	cbz	r4, 7a18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x20c>
    7a16:	6864      	ldr	r4, [r4, #4]
    7a18:	4651      	mov	r1, sl
    7a1a:	a822      	add	r0, sp, #136	; 0x88
    7a1c:	f00d ff9b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a20:	f1ba 0f00 	cmp.w	sl, #0
    7a24:	d001      	beq.n	7a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x21e>
    7a26:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7a2a:	aa22      	add	r2, sp, #136	; 0x88
    7a2c:	4629      	mov	r1, r5
    7a2e:	a816      	add	r0, sp, #88	; 0x58
    7a30:	f00e ffd5 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7a34:	2200      	movs	r2, #0
  const int64_t flatsize =
    7a36:	4680      	mov	r8, r0
    7a38:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7a3c:	2300      	movs	r3, #0
    7a3e:	4542      	cmp	r2, r8
    7a40:	eb73 0109 	sbcs.w	r1, r3, r9
    7a44:	da60      	bge.n	7b08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    7a46:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    7a4a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    7a4e:	1a08      	subs	r0, r1, r0
    7a50:	4241      	negs	r1, r0
    7a52:	4141      	adcs	r1, r0
    7a54:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7a58:	3201      	adds	r2, #1
    7a5a:	f143 0300 	adc.w	r3, r3, #0
    7a5e:	e7ee      	b.n	7a3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
    7a60:	ad1c      	add	r5, sp, #112	; 0x70
    7a62:	4631      	mov	r1, r6
    7a64:	b1e7      	cbz	r7, 7aa0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x294>
    7a66:	a810      	add	r0, sp, #64	; 0x40
    7a68:	f00d ff75 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a6c:	4621      	mov	r1, r4
    7a6e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7a70:	6876      	ldr	r6, [r6, #4]
    7a72:	f00d ff70 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7a76:	b104      	cbz	r4, 7a7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x26e>
    7a78:	6864      	ldr	r4, [r4, #4]
    7a7a:	4651      	mov	r1, sl
    7a7c:	4628      	mov	r0, r5
    7a7e:	f00d ff6a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a82:	f1ba 0f00 	cmp.w	sl, #0
    7a86:	d001      	beq.n	7a8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x280>
    7a88:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7a8c:	9400      	str	r4, [sp, #0]
    7a8e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7a92:	ab16      	add	r3, sp, #88	; 0x58
    7a94:	4632      	mov	r2, r6
    7a96:	a910      	add	r1, sp, #64	; 0x40
    7a98:	a822      	add	r0, sp, #136	; 0x88
    7a9a:	f00f fb19 	bl	170d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7a9e:	e701      	b.n	78a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7aa0:	a816      	add	r0, sp, #88	; 0x58
    7aa2:	f00d ff58 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7aa6:	4621      	mov	r1, r4
    7aa8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7aaa:	6876      	ldr	r6, [r6, #4]
    7aac:	f00d ff53 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ab0:	b104      	cbz	r4, 7ab4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    7ab2:	6864      	ldr	r4, [r4, #4]
    7ab4:	4651      	mov	r1, sl
    7ab6:	a822      	add	r0, sp, #136	; 0x88
    7ab8:	f00d ff4d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7abc:	f1ba 0f00 	cmp.w	sl, #0
    7ac0:	d001      	beq.n	7ac6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    7ac2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7ac6:	aa22      	add	r2, sp, #136	; 0x88
    7ac8:	4629      	mov	r1, r5
    7aca:	a816      	add	r0, sp, #88	; 0x58
    7acc:	f00e ff87 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7ad0:	3c08      	subs	r4, #8
  const int64_t flatsize =
    7ad2:	17c1      	asrs	r1, r0, #31
    7ad4:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    7ad8:	2200      	movs	r2, #0
    7ada:	2300      	movs	r3, #0
    7adc:	4282      	cmp	r2, r0
    7ade:	eb73 0601 	sbcs.w	r6, r3, r1
    7ae2:	da11      	bge.n	7b08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
  return lhs == rhs;
    7ae4:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    7ae8:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    7aec:	45b9      	cmp	r9, r7
    7aee:	bf08      	it	eq
    7af0:	45b0      	cmpeq	r8, r6
    output_data[i] = F(input1_data[i], input2_data[i]);
    7af2:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs == rhs;
    7af6:	bf0c      	ite	eq
    7af8:	2601      	moveq	r6, #1
    7afa:	2600      	movne	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    7afc:	3201      	adds	r2, #1
  return lhs == rhs;
    7afe:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    7b02:	f143 0300 	adc.w	r3, r3, #0
    7b06:	e7e9      	b.n	7adc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2d0>
    7b08:	a822      	add	r0, sp, #136	; 0x88
    7b0a:	f00d fedf 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    7b0e:	4628      	mov	r0, r5
    7b10:	f00d fedc 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    7b14:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Equal);
    7b16:	f00d fed9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    7b1a:	2000      	movs	r0, #0
}
    7b1c:	b02b      	add	sp, #172	; 0xac
    7b1e:	ecbd 8b02 	vpop	{d8}
    7b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Equal);
    7b26:	6933      	ldr	r3, [r6, #16]
    7b28:	68f0      	ldr	r0, [r6, #12]
    7b2a:	6925      	ldr	r5, [r4, #16]
    7b2c:	f1c3 0800 	rsb	r8, r3, #0
    7b30:	f7f9 f89a 	bl	c68 <__aeabi_f2d>
    7b34:	ec41 0b10 	vmov	d0, r0, r1
    7b38:	a90d      	add	r1, sp, #52	; 0x34
    7b3a:	a80c      	add	r0, sp, #48	; 0x30
    7b3c:	f009 fe58 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7b40:	68e0      	ldr	r0, [r4, #12]
    7b42:	f7f9 f891 	bl	c68 <__aeabi_f2d>
    7b46:	ec41 0b10 	vmov	d0, r0, r1
    7b4a:	a90f      	add	r1, sp, #60	; 0x3c
    7b4c:	a80e      	add	r0, sp, #56	; 0x38
    7b4e:	f009 fe4f 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7b52:	2308      	movs	r3, #8
    7b54:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    7b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b5a:	9324      	str	r3, [sp, #144]	; 0x90
    7b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b5e:	426d      	negs	r5, r5
    7b60:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    7b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b66:	9327      	str	r3, [sp, #156]	; 0x9c
    7b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b6a:	9328      	str	r3, [sp, #160]	; 0xa0
    7b6c:	ad1c      	add	r5, sp, #112	; 0x70
    7b6e:	4631      	mov	r1, r6
    7b70:	a810      	add	r0, sp, #64	; 0x40
    7b72:	b1df      	cbz	r7, 7bac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
    7b74:	f00d feef 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7b78:	6872      	ldr	r2, [r6, #4]
    7b7a:	9204      	str	r2, [sp, #16]
    7b7c:	4621      	mov	r1, r4
    7b7e:	a816      	add	r0, sp, #88	; 0x58
    7b80:	f00d fee9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7b84:	4651      	mov	r1, sl
    7b86:	4628      	mov	r0, r5
    7b88:	6864      	ldr	r4, [r4, #4]
    7b8a:	f00d fee4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7b8e:	9a04      	ldr	r2, [sp, #16]
    7b90:	f1ba 0f00 	cmp.w	sl, #0
    7b94:	d001      	beq.n	7b9a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x38e>
    7b96:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7b9a:	9400      	str	r4, [sp, #0]
    7b9c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7ba0:	ab16      	add	r3, sp, #88	; 0x58
    7ba2:	a910      	add	r1, sp, #64	; 0x40
    7ba4:	a822      	add	r0, sp, #136	; 0x88
    7ba6:	f00f febb 	bl	17920 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7baa:	e67b      	b.n	78a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7bac:	f00d fed3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7bb0:	6873      	ldr	r3, [r6, #4]
    7bb2:	9304      	str	r3, [sp, #16]
    7bb4:	4621      	mov	r1, r4
    7bb6:	a816      	add	r0, sp, #88	; 0x58
    7bb8:	f00d fecd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7bbc:	6863      	ldr	r3, [r4, #4]
    7bbe:	9305      	str	r3, [sp, #20]
    7bc0:	4651      	mov	r1, sl
    7bc2:	4628      	mov	r0, r5
    7bc4:	f00d fec7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7bc8:	f1ba 0f00 	cmp.w	sl, #0
    7bcc:	d001      	beq.n	7bd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    7bce:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    7bd2:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    7bd6:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    7bd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7bda:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    7bde:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7be2:	aa1c      	add	r2, sp, #112	; 0x70
    7be4:	a916      	add	r1, sp, #88	; 0x58
    7be6:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    7be8:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7bea:	f00e fef8 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    7bee:	4602      	mov	r2, r0
    7bf0:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    7bf2:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    7bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    7bfa:	f04f 0800 	mov.w	r8, #0
    7bfe:	f04f 0900 	mov.w	r9, #0
    7c02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7c06:	4590      	cmp	r8, r2
    7c08:	eb79 0303 	sbcs.w	r3, r9, r3
    7c0c:	f280 80be 	bge.w	7d8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x580>
    const int32 input2_val = input2_offset + input2_data[i];
    7c10:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    7c12:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    7c14:	f812 5008 	ldrb.w	r5, [r2, r8]
    7c18:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    7c1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    7c1e:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    7c20:	9a04      	ldr	r2, [sp, #16]
    7c22:	f812 0008 	ldrb.w	r0, [r2, r8]
    7c26:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c28:	ee18 1a10 	vmov	r1, s16
    7c2c:	465a      	mov	r2, fp
    7c2e:	40b0      	lsls	r0, r6
    7c30:	f7ff faba 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    7c34:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c36:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7c38:	4622      	mov	r2, r4
    7c3a:	4639      	mov	r1, r7
    7c3c:	4628      	mov	r0, r5
    7c3e:	f7ff fab3 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
    7c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7c44:	1a1a      	subs	r2, r3, r0
    7c46:	4250      	negs	r0, r2
    7c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c4a:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
    7c4c:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
    7c50:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    7c54:	f149 0900 	adc.w	r9, r9, #0
    7c58:	e7d3      	b.n	7c02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3f6>
    7c5a:	6933      	ldr	r3, [r6, #16]
    7c5c:	68f0      	ldr	r0, [r6, #12]
    7c5e:	6925      	ldr	r5, [r4, #16]
    7c60:	f1c3 0800 	rsb	r8, r3, #0
    7c64:	f7f9 f800 	bl	c68 <__aeabi_f2d>
    7c68:	ec41 0b10 	vmov	d0, r0, r1
    7c6c:	a90d      	add	r1, sp, #52	; 0x34
    7c6e:	a80c      	add	r0, sp, #48	; 0x30
    7c70:	f009 fdbe 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7c74:	68e0      	ldr	r0, [r4, #12]
    7c76:	f7f8 fff7 	bl	c68 <__aeabi_f2d>
    7c7a:	ec41 0b10 	vmov	d0, r0, r1
    7c7e:	a90f      	add	r1, sp, #60	; 0x3c
    7c80:	a80e      	add	r0, sp, #56	; 0x38
    7c82:	f009 fdb5 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    7c86:	2308      	movs	r3, #8
    7c88:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    7c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c8e:	9324      	str	r3, [sp, #144]	; 0x90
    7c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c92:	426d      	negs	r5, r5
    7c94:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    7c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c9a:	9327      	str	r3, [sp, #156]	; 0x9c
    7c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7c9e:	9328      	str	r3, [sp, #160]	; 0xa0
    7ca0:	ad1c      	add	r5, sp, #112	; 0x70
    7ca2:	4631      	mov	r1, r6
    7ca4:	a810      	add	r0, sp, #64	; 0x40
    7ca6:	b1df      	cbz	r7, 7ce0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4d4>
    7ca8:	f00d fe55 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7cac:	6872      	ldr	r2, [r6, #4]
    7cae:	9204      	str	r2, [sp, #16]
    7cb0:	4621      	mov	r1, r4
    7cb2:	a816      	add	r0, sp, #88	; 0x58
    7cb4:	f00d fe4f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7cb8:	4651      	mov	r1, sl
    7cba:	4628      	mov	r0, r5
    7cbc:	6864      	ldr	r4, [r4, #4]
    7cbe:	f00d fe4a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7cc2:	9a04      	ldr	r2, [sp, #16]
    7cc4:	f1ba 0f00 	cmp.w	sl, #0
    7cc8:	d001      	beq.n	7cce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4c2>
    7cca:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
    7cce:	9400      	str	r4, [sp, #0]
    7cd0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7cd4:	ab16      	add	r3, sp, #88	; 0x58
    7cd6:	a910      	add	r1, sp, #64	; 0x40
    7cd8:	a822      	add	r0, sp, #136	; 0x88
    7cda:	f00f fead 	bl	17a38 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7cde:	e5e1      	b.n	78a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7ce0:	f00d fe39 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7ce4:	6873      	ldr	r3, [r6, #4]
    7ce6:	9304      	str	r3, [sp, #16]
    7ce8:	4621      	mov	r1, r4
    7cea:	a816      	add	r0, sp, #88	; 0x58
    7cec:	f00d fe33 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7cf0:	6863      	ldr	r3, [r4, #4]
    7cf2:	9305      	str	r3, [sp, #20]
    7cf4:	4651      	mov	r1, sl
    7cf6:	4628      	mov	r0, r5
    7cf8:	f00d fe2d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7cfc:	f1ba 0f00 	cmp.w	sl, #0
    7d00:	d001      	beq.n	7d06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4fa>
    7d02:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    7d06:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    7d0a:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    7d0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7d0e:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    7d12:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7d16:	aa1c      	add	r2, sp, #112	; 0x70
    7d18:	a916      	add	r1, sp, #88	; 0x58
    7d1a:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    7d1c:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7d1e:	f00e fe5e 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    7d22:	4602      	mov	r2, r0
    7d24:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    7d26:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    7d2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    7d2e:	f04f 0800 	mov.w	r8, #0
    7d32:	f04f 0900 	mov.w	r9, #0
    7d36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7d3a:	4590      	cmp	r8, r2
    7d3c:	eb79 0303 	sbcs.w	r3, r9, r3
    7d40:	da24      	bge.n	7d8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x580>
    const int32 input2_val = input2_offset + input2_data[i];
    7d42:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    7d44:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    7d46:	f912 5008 	ldrsb.w	r5, [r2, r8]
    7d4a:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    7d4c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    7d50:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    7d52:	9a04      	ldr	r2, [sp, #16]
    7d54:	f912 0008 	ldrsb.w	r0, [r2, r8]
    7d58:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d5a:	ee18 1a10 	vmov	r1, s16
    7d5e:	465a      	mov	r2, fp
    7d60:	40b0      	lsls	r0, r6
    7d62:	f7ff fa21 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    7d66:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d68:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    7d6a:	4622      	mov	r2, r4
    7d6c:	4639      	mov	r1, r7
    7d6e:	4628      	mov	r0, r5
    7d70:	f7ff fa1a 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
    7d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7d76:	1a1b      	subs	r3, r3, r0
    7d78:	4258      	negs	r0, r3
    7d7a:	4158      	adcs	r0, r3
    7d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
    7d7e:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
    7d82:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    7d86:	f149 0900 	adc.w	r9, r9, #0
    7d8a:	e7d4      	b.n	7d36 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x52a>
    7d8c:	a81c      	add	r0, sp, #112	; 0x70
    7d8e:	e58a      	b.n	78a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    7d90:	696c      	ldr	r4, [r5, #20]
    7d92:	f7f8 fd8e 	bl	8b2 <TfLiteTypeGetName>
    7d96:	f818 3009 	ldrb.w	r3, [r8, r9]
    7d9a:	4903      	ldr	r1, [pc, #12]	; (7da8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x59c>)
    7d9c:	4602      	mov	r2, r0
    7d9e:	4628      	mov	r0, r5
    7da0:	47a0      	blx	r4
      return kTfLiteError;
    7da2:	2001      	movs	r0, #1
    7da4:	e6ba      	b.n	7b1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x310>
    7da6:	bf00      	nop
    7da8:	00027ac7 	.word	0x00027ac7

00007dac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
    7dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    7db0:	680b      	ldr	r3, [r1, #0]
    7db2:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    7db6:	685e      	ldr	r6, [r3, #4]
    7db8:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    7dba:	684b      	ldr	r3, [r1, #4]
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
    7dbc:	ed2d 8b02 	vpush	{d8}
    7dc0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    7dc2:	ea4f 1986 	mov.w	r9, r6, lsl #6
    7dc6:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    7dca:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    7dce:	b0ab      	sub	sp, #172	; 0xac
    7dd0:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    7dd2:	4621      	mov	r1, r4
    7dd4:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    7dd6:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    7dda:	f016 fb52 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    7dde:	f080 0001 	eor.w	r0, r0, #1
    7de2:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    7de4:	f818 0009 	ldrb.w	r0, [r8, r9]
    7de8:	1e43      	subs	r3, r0, #1
    7dea:	2b08      	cmp	r3, #8
    7dec:	f200 829c 	bhi.w	8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>
    7df0:	e8df f013 	tbh	[pc, r3, lsl #1]
    7df4:	00b4005c 	.word	0x00b4005c
    7df8:	01020165 	.word	0x01020165
    7dfc:	0009029a 	.word	0x0009029a
    7e00:	029a029a 	.word	0x029a029a
    7e04:	01ff      	.short	0x01ff
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
    7e06:	ad1c      	add	r5, sp, #112	; 0x70
    7e08:	4631      	mov	r1, r6
    7e0a:	b31f      	cbz	r7, 7e54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    7e0c:	a810      	add	r0, sp, #64	; 0x40
    7e0e:	f00d fda2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e12:	4621      	mov	r1, r4
    7e14:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7e16:	6876      	ldr	r6, [r6, #4]
    7e18:	f00d fd9d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e1c:	b104      	cbz	r4, 7e20 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    7e1e:	6864      	ldr	r4, [r4, #4]
    7e20:	4651      	mov	r1, sl
    7e22:	4628      	mov	r0, r5
    7e24:	f00d fd97 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7e28:	f1ba 0f00 	cmp.w	sl, #0
    7e2c:	d001      	beq.n	7e32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    7e2e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7e32:	9400      	str	r4, [sp, #0]
    7e34:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7e38:	ab16      	add	r3, sp, #88	; 0x58
    7e3a:	4632      	mov	r2, r6
    7e3c:	a910      	add	r1, sp, #64	; 0x40
    7e3e:	a822      	add	r0, sp, #136	; 0x88
    7e40:	f00f f9a3 	bl	1718a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    7e44:	4628      	mov	r0, r5
    7e46:	f00d fd41 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    7e4a:	a816      	add	r0, sp, #88	; 0x58
    7e4c:	f00d fd3e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    7e50:	a810      	add	r0, sp, #64	; 0x40
    7e52:	e12c      	b.n	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
    7e54:	a816      	add	r0, sp, #88	; 0x58
    7e56:	f00d fd7e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e5a:	4621      	mov	r1, r4
    7e5c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7e5e:	6876      	ldr	r6, [r6, #4]
    7e60:	f00d fd79 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7e64:	b104      	cbz	r4, 7e68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    7e66:	6864      	ldr	r4, [r4, #4]
    7e68:	4651      	mov	r1, sl
    7e6a:	a822      	add	r0, sp, #136	; 0x88
    7e6c:	f00d fd73 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7e70:	f1ba 0f00 	cmp.w	sl, #0
    7e74:	d001      	beq.n	7e7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
    7e76:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7e7a:	aa22      	add	r2, sp, #136	; 0x88
    7e7c:	4629      	mov	r1, r5
    7e7e:	a816      	add	r0, sp, #88	; 0x58
    7e80:	f00e fdad 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7e84:	2200      	movs	r2, #0
  const int64_t flatsize =
    7e86:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7e88:	2300      	movs	r3, #0
    7e8a:	4282      	cmp	r2, r0
    7e8c:	eb73 0701 	sbcs.w	r7, r3, r1
    7e90:	f280 8106 	bge.w	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
  return lhs != rhs;
    7e94:	f816 c002 	ldrb.w	ip, [r6, r2]
    7e98:	f814 e002 	ldrb.w	lr, [r4, r2]
    7e9c:	ea8c 0c0e 	eor.w	ip, ip, lr
    output_data[i] = F(input1_data[i], input2_data[i]);
    7ea0:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7ea4:	3201      	adds	r2, #1
    7ea6:	f143 0300 	adc.w	r3, r3, #0
    7eaa:	e7ee      	b.n	7e8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
    7eac:	ad1c      	add	r5, sp, #112	; 0x70
    7eae:	4631      	mov	r1, r6
    7eb0:	b1e7      	cbz	r7, 7eec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x140>
    7eb2:	a810      	add	r0, sp, #64	; 0x40
    7eb4:	f00d fd4f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7eb8:	4621      	mov	r1, r4
    7eba:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7ebc:	6876      	ldr	r6, [r6, #4]
    7ebe:	f00d fd4a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ec2:	b104      	cbz	r4, 7ec6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    7ec4:	6864      	ldr	r4, [r4, #4]
    7ec6:	4651      	mov	r1, sl
    7ec8:	4628      	mov	r0, r5
    7eca:	f00d fd44 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7ece:	f1ba 0f00 	cmp.w	sl, #0
    7ed2:	d001      	beq.n	7ed8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    7ed4:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7ed8:	9400      	str	r4, [sp, #0]
    7eda:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7ede:	ab16      	add	r3, sp, #88	; 0x58
    7ee0:	4632      	mov	r2, r6
    7ee2:	a910      	add	r1, sp, #64	; 0x40
    7ee4:	a822      	add	r0, sp, #136	; 0x88
    7ee6:	f00e fe7f 	bl	16be8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7eea:	e7ab      	b.n	7e44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7eec:	a816      	add	r0, sp, #88	; 0x58
    7eee:	f00d fd32 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7ef2:	4621      	mov	r1, r4
    7ef4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7ef6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7efa:	f00d fd2c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7efe:	b104      	cbz	r4, 7f02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x156>
    7f00:	6864      	ldr	r4, [r4, #4]
    7f02:	4651      	mov	r1, sl
    7f04:	a822      	add	r0, sp, #136	; 0x88
    7f06:	f00d fd26 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7f0a:	f1ba 0f00 	cmp.w	sl, #0
    7f0e:	d001      	beq.n	7f14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x168>
    7f10:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7f14:	aa22      	add	r2, sp, #136	; 0x88
    7f16:	4629      	mov	r1, r5
    7f18:	a816      	add	r0, sp, #88	; 0x58
    7f1a:	f00e fd60 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    7f1e:	4641      	mov	r1, r8
  const int64_t flatsize =
    7f20:	4606      	mov	r6, r0
    7f22:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7f24:	2200      	movs	r2, #0
    7f26:	2300      	movs	r3, #0
    7f28:	42b2      	cmp	r2, r6
    7f2a:	eb73 0007 	sbcs.w	r0, r3, r7
    7f2e:	f280 80b7 	bge.w	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    output_data[i] = F(input1_data[i], input2_data[i]);
    7f32:	ecb1 7a01 	vldmia	r1!, {s14}
    7f36:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs != rhs;
    7f3a:	eeb4 7a67 	vcmp.f32	s14, s15
    7f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    7f42:	eb0a 0002 	add.w	r0, sl, r2
  return lhs != rhs;
    7f46:	bf14      	ite	ne
    7f48:	f04f 0c01 	movne.w	ip, #1
    7f4c:	f04f 0c00 	moveq.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    7f50:	3201      	adds	r2, #1
  return lhs != rhs;
    7f52:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    7f56:	f143 0300 	adc.w	r3, r3, #0
    7f5a:	e7e5      	b.n	7f28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
    7f5c:	ad1c      	add	r5, sp, #112	; 0x70
    7f5e:	4631      	mov	r1, r6
    7f60:	b1e7      	cbz	r7, 7f9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    7f62:	a810      	add	r0, sp, #64	; 0x40
    7f64:	f00d fcf7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f68:	4621      	mov	r1, r4
    7f6a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7f6c:	6876      	ldr	r6, [r6, #4]
    7f6e:	f00d fcf2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7f72:	b104      	cbz	r4, 7f76 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    7f74:	6864      	ldr	r4, [r4, #4]
    7f76:	4651      	mov	r1, sl
    7f78:	4628      	mov	r0, r5
    7f7a:	f00d fcec 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7f7e:	f1ba 0f00 	cmp.w	sl, #0
    7f82:	d001      	beq.n	7f88 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    7f84:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    7f88:	9400      	str	r4, [sp, #0]
    7f8a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    7f8e:	ab16      	add	r3, sp, #88	; 0x58
    7f90:	4632      	mov	r2, r6
    7f92:	a910      	add	r1, sp, #64	; 0x40
    7f94:	a822      	add	r0, sp, #136	; 0x88
    7f96:	f00f f94a 	bl	1722e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    7f9a:	e753      	b.n	7e44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    7f9c:	a816      	add	r0, sp, #88	; 0x58
    7f9e:	f00d fcda 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7fa2:	4621      	mov	r1, r4
    7fa4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7fa6:	6876      	ldr	r6, [r6, #4]
    7fa8:	f00d fcd5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    7fac:	b104      	cbz	r4, 7fb0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
    7fae:	6864      	ldr	r4, [r4, #4]
    7fb0:	4651      	mov	r1, sl
    7fb2:	a822      	add	r0, sp, #136	; 0x88
    7fb4:	f00d fccf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7fb8:	f1ba 0f00 	cmp.w	sl, #0
    7fbc:	d001      	beq.n	7fc2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x216>
    7fbe:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    7fc2:	aa22      	add	r2, sp, #136	; 0x88
    7fc4:	4629      	mov	r1, r5
    7fc6:	a816      	add	r0, sp, #88	; 0x58
    7fc8:	f00e fd09 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    7fcc:	2200      	movs	r2, #0
  const int64_t flatsize =
    7fce:	4680      	mov	r8, r0
    7fd0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    7fd4:	2300      	movs	r3, #0
    7fd6:	4542      	cmp	r2, r8
    7fd8:	eb73 0109 	sbcs.w	r1, r3, r9
    7fdc:	da60      	bge.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
  return lhs != rhs;
    7fde:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    7fe2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    7fe6:	1a09      	subs	r1, r1, r0
    7fe8:	bf18      	it	ne
    7fea:	2101      	movne	r1, #1
    7fec:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    7ff0:	3201      	adds	r2, #1
    7ff2:	f143 0300 	adc.w	r3, r3, #0
    7ff6:	e7ee      	b.n	7fd6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
    7ff8:	ad1c      	add	r5, sp, #112	; 0x70
    7ffa:	4631      	mov	r1, r6
    7ffc:	b1e7      	cbz	r7, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    7ffe:	a810      	add	r0, sp, #64	; 0x40
    8000:	f00d fca9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8004:	4621      	mov	r1, r4
    8006:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8008:	6876      	ldr	r6, [r6, #4]
    800a:	f00d fca4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    800e:	b104      	cbz	r4, 8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    8010:	6864      	ldr	r4, [r4, #4]
    8012:	4651      	mov	r1, sl
    8014:	4628      	mov	r0, r5
    8016:	f00d fc9e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    801a:	f1ba 0f00 	cmp.w	sl, #0
    801e:	d001      	beq.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
    8020:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8024:	9400      	str	r4, [sp, #0]
    8026:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    802a:	ab16      	add	r3, sp, #88	; 0x58
    802c:	4632      	mov	r2, r6
    802e:	a910      	add	r1, sp, #64	; 0x40
    8030:	a822      	add	r0, sp, #136	; 0x88
    8032:	f00f f950 	bl	172d6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8036:	e705      	b.n	7e44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8038:	a816      	add	r0, sp, #88	; 0x58
    803a:	f00d fc8c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    803e:	4621      	mov	r1, r4
    8040:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8042:	6876      	ldr	r6, [r6, #4]
    8044:	f00d fc87 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8048:	b104      	cbz	r4, 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    804a:	6864      	ldr	r4, [r4, #4]
    804c:	4651      	mov	r1, sl
    804e:	a822      	add	r0, sp, #136	; 0x88
    8050:	f00d fc81 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8054:	f1ba 0f00 	cmp.w	sl, #0
    8058:	d001      	beq.n	805e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e>
    805a:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    805e:	aa22      	add	r2, sp, #136	; 0x88
    8060:	4629      	mov	r1, r5
    8062:	a816      	add	r0, sp, #88	; 0x58
    8064:	f00e fcbb 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8068:	3c08      	subs	r4, #8
  const int64_t flatsize =
    806a:	17c1      	asrs	r1, r0, #31
    806c:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8070:	2200      	movs	r2, #0
    8072:	2300      	movs	r3, #0
    8074:	4282      	cmp	r2, r0
    8076:	eb73 0601 	sbcs.w	r6, r3, r1
    807a:	da11      	bge.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
  return lhs != rhs;
    807c:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8080:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8084:	45b9      	cmp	r9, r7
    8086:	bf08      	it	eq
    8088:	45b0      	cmpeq	r8, r6
    output_data[i] = F(input1_data[i], input2_data[i]);
    808a:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs != rhs;
    808e:	bf14      	ite	ne
    8090:	2601      	movne	r6, #1
    8092:	2600      	moveq	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8094:	3201      	adds	r2, #1
  return lhs != rhs;
    8096:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    809a:	f143 0300 	adc.w	r3, r3, #0
    809e:	e7e9      	b.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
    80a0:	a822      	add	r0, sp, #136	; 0x88
    80a2:	f00d fc13 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    80a6:	4628      	mov	r0, r5
    80a8:	f00d fc10 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    80ac:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    80ae:	f00d fc0d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    80b2:	2000      	movs	r0, #0
}
    80b4:	b02b      	add	sp, #172	; 0xac
    80b6:	ecbd 8b02 	vpop	{d8}
    80ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
    80be:	6933      	ldr	r3, [r6, #16]
    80c0:	68f0      	ldr	r0, [r6, #12]
    80c2:	6925      	ldr	r5, [r4, #16]
    80c4:	f1c3 0800 	rsb	r8, r3, #0
    80c8:	f7f8 fdce 	bl	c68 <__aeabi_f2d>
    80cc:	ec41 0b10 	vmov	d0, r0, r1
    80d0:	a90d      	add	r1, sp, #52	; 0x34
    80d2:	a80c      	add	r0, sp, #48	; 0x30
    80d4:	f009 fb8c 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    80d8:	68e0      	ldr	r0, [r4, #12]
    80da:	f7f8 fdc5 	bl	c68 <__aeabi_f2d>
    80de:	ec41 0b10 	vmov	d0, r0, r1
    80e2:	a90f      	add	r1, sp, #60	; 0x3c
    80e4:	a80e      	add	r0, sp, #56	; 0x38
    80e6:	f009 fb83 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    80ea:	2308      	movs	r3, #8
    80ec:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    80f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80f2:	9324      	str	r3, [sp, #144]	; 0x90
    80f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80f6:	426d      	negs	r5, r5
    80f8:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    80fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80fe:	9327      	str	r3, [sp, #156]	; 0x9c
    8100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8102:	9328      	str	r3, [sp, #160]	; 0xa0
    8104:	ad1c      	add	r5, sp, #112	; 0x70
    8106:	4631      	mov	r1, r6
    8108:	a810      	add	r0, sp, #64	; 0x40
    810a:	b1df      	cbz	r7, 8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    810c:	f00d fc23 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8110:	6872      	ldr	r2, [r6, #4]
    8112:	9204      	str	r2, [sp, #16]
    8114:	4621      	mov	r1, r4
    8116:	a816      	add	r0, sp, #88	; 0x58
    8118:	f00d fc1d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    811c:	4651      	mov	r1, sl
    811e:	4628      	mov	r0, r5
    8120:	6864      	ldr	r4, [r4, #4]
    8122:	f00d fc18 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8126:	9a04      	ldr	r2, [sp, #16]
    8128:	f1ba 0f00 	cmp.w	sl, #0
    812c:	d001      	beq.n	8132 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132>
    812e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8132:	9400      	str	r4, [sp, #0]
    8134:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8138:	ab16      	add	r3, sp, #88	; 0x58
    813a:	a910      	add	r1, sp, #64	; 0x40
    813c:	a822      	add	r0, sp, #136	; 0x88
    813e:	f00f fd07 	bl	17b50 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8142:	e67f      	b.n	7e44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8144:	f00d fc07 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8148:	6873      	ldr	r3, [r6, #4]
    814a:	9304      	str	r3, [sp, #16]
    814c:	4621      	mov	r1, r4
    814e:	a816      	add	r0, sp, #88	; 0x58
    8150:	f00d fc01 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8154:	6863      	ldr	r3, [r4, #4]
    8156:	9305      	str	r3, [sp, #20]
    8158:	4651      	mov	r1, sl
    815a:	4628      	mov	r0, r5
    815c:	f00d fbfb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8160:	f1ba 0f00 	cmp.w	sl, #0
    8164:	d001      	beq.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    8166:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    816a:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    816e:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8170:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8172:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8176:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    817a:	aa1c      	add	r2, sp, #112	; 0x70
    817c:	a916      	add	r1, sp, #88	; 0x58
    817e:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8180:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8182:	f00e fc2c 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8186:	4602      	mov	r2, r0
    8188:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    818a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    818e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8192:	f04f 0800 	mov.w	r8, #0
    8196:	f04f 0900 	mov.w	r9, #0
    819a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    819e:	4590      	cmp	r8, r2
    81a0:	eb79 0303 	sbcs.w	r3, r9, r3
    81a4:	f280 80be 	bge.w	8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>
    const int32 input2_val = input2_offset + input2_data[i];
    81a8:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    81aa:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    81ac:	f812 5008 	ldrb.w	r5, [r2, r8]
    81b0:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    81b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    81b6:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    81b8:	9a04      	ldr	r2, [sp, #16]
    81ba:	f812 0008 	ldrb.w	r0, [r2, r8]
    81be:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81c0:	ee18 1a10 	vmov	r1, s16
    81c4:	465a      	mov	r2, fp
    81c6:	40b0      	lsls	r0, r6
    81c8:	f7fe ffee 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    81cc:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81ce:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    81d0:	4622      	mov	r2, r4
    81d2:	4639      	mov	r1, r7
    81d4:	4628      	mov	r0, r5
    81d6:	f7fe ffe7 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
    81da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81dc:	1a18      	subs	r0, r3, r0
    81de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    81e0:	bf18      	it	ne
    81e2:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    81e4:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
    81e8:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    81ec:	f149 0900 	adc.w	r9, r9, #0
    81f0:	e7d3      	b.n	819a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a>
    81f2:	6933      	ldr	r3, [r6, #16]
    81f4:	68f0      	ldr	r0, [r6, #12]
    81f6:	6925      	ldr	r5, [r4, #16]
    81f8:	f1c3 0800 	rsb	r8, r3, #0
    81fc:	f7f8 fd34 	bl	c68 <__aeabi_f2d>
    8200:	ec41 0b10 	vmov	d0, r0, r1
    8204:	a90d      	add	r1, sp, #52	; 0x34
    8206:	a80c      	add	r0, sp, #48	; 0x30
    8208:	f009 faf2 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    820c:	68e0      	ldr	r0, [r4, #12]
    820e:	f7f8 fd2b 	bl	c68 <__aeabi_f2d>
    8212:	ec41 0b10 	vmov	d0, r0, r1
    8216:	a90f      	add	r1, sp, #60	; 0x3c
    8218:	a80e      	add	r0, sp, #56	; 0x38
    821a:	f009 fae9 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    821e:	2308      	movs	r3, #8
    8220:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8226:	9324      	str	r3, [sp, #144]	; 0x90
    8228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    822a:	426d      	negs	r5, r5
    822c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8232:	9327      	str	r3, [sp, #156]	; 0x9c
    8234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8236:	9328      	str	r3, [sp, #160]	; 0xa0
    8238:	ad1c      	add	r5, sp, #112	; 0x70
    823a:	4631      	mov	r1, r6
    823c:	a810      	add	r0, sp, #64	; 0x40
    823e:	b1df      	cbz	r7, 8278 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x278>
    8240:	f00d fb89 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8244:	6872      	ldr	r2, [r6, #4]
    8246:	9204      	str	r2, [sp, #16]
    8248:	4621      	mov	r1, r4
    824a:	a816      	add	r0, sp, #88	; 0x58
    824c:	f00d fb83 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8250:	4651      	mov	r1, sl
    8252:	4628      	mov	r0, r5
    8254:	6864      	ldr	r4, [r4, #4]
    8256:	f00d fb7e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    825a:	9a04      	ldr	r2, [sp, #16]
    825c:	f1ba 0f00 	cmp.w	sl, #0
    8260:	d001      	beq.n	8266 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x266>
    8262:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
    8266:	9400      	str	r4, [sp, #0]
    8268:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    826c:	ab16      	add	r3, sp, #88	; 0x58
    826e:	a910      	add	r1, sp, #64	; 0x40
    8270:	a822      	add	r0, sp, #136	; 0x88
    8272:	f00f fcf8 	bl	17c66 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8276:	e5e5      	b.n	7e44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8278:	f00d fb6d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    827c:	6873      	ldr	r3, [r6, #4]
    827e:	9304      	str	r3, [sp, #16]
    8280:	4621      	mov	r1, r4
    8282:	a816      	add	r0, sp, #88	; 0x58
    8284:	f00d fb67 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8288:	6863      	ldr	r3, [r4, #4]
    828a:	9305      	str	r3, [sp, #20]
    828c:	4651      	mov	r1, sl
    828e:	4628      	mov	r0, r5
    8290:	f00d fb61 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8294:	f1ba 0f00 	cmp.w	sl, #0
    8298:	d001      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    829a:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    829e:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    82a2:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    82a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    82a6:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    82aa:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    82ae:	aa1c      	add	r2, sp, #112	; 0x70
    82b0:	a916      	add	r1, sp, #88	; 0x58
    82b2:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    82b4:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    82b6:	f00e fb92 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    82ba:	4602      	mov	r2, r0
    82bc:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    82be:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    82c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    82c6:	f04f 0800 	mov.w	r8, #0
    82ca:	f04f 0900 	mov.w	r9, #0
    82ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    82d2:	4590      	cmp	r8, r2
    82d4:	eb79 0303 	sbcs.w	r3, r9, r3
    82d8:	da24      	bge.n	8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>
    const int32 input2_val = input2_offset + input2_data[i];
    82da:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    82dc:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    82de:	f912 5008 	ldrsb.w	r5, [r2, r8]
    82e2:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    82e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    82e8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    82ea:	9a04      	ldr	r2, [sp, #16]
    82ec:	f912 0008 	ldrsb.w	r0, [r2, r8]
    82f0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    82f2:	ee18 1a10 	vmov	r1, s16
    82f6:	465a      	mov	r2, fp
    82f8:	40b0      	lsls	r0, r6
    82fa:	f7fe ff55 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    82fe:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8300:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8302:	4622      	mov	r2, r4
    8304:	4639      	mov	r1, r7
    8306:	4628      	mov	r0, r5
    8308:	f7fe ff4e 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
    830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    830e:	1a18      	subs	r0, r3, r0
    8310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8312:	bf18      	it	ne
    8314:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    8316:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
    831a:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    831e:	f149 0900 	adc.w	r9, r9, #0
    8322:	e7d4      	b.n	82ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ce>
    8324:	a81c      	add	r0, sp, #112	; 0x70
    8326:	e58e      	b.n	7e46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8328:	696c      	ldr	r4, [r5, #20]
    832a:	f7f8 fac2 	bl	8b2 <TfLiteTypeGetName>
    832e:	f818 3009 	ldrb.w	r3, [r8, r9]
    8332:	4903      	ldr	r1, [pc, #12]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    8334:	4602      	mov	r2, r0
    8336:	4628      	mov	r0, r5
    8338:	47a0      	blx	r4
      return kTfLiteError;
    833a:	2001      	movs	r0, #1
    833c:	e6ba      	b.n	80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    833e:	bf00      	nop
    8340:	00027ac7 	.word	0x00027ac7

00008344 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
    8344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    8348:	680b      	ldr	r3, [r1, #0]
    834a:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    834e:	685e      	ldr	r6, [r3, #4]
    8350:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8352:	684b      	ldr	r3, [r1, #4]
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
    8354:	ed2d 8b02 	vpush	{d8}
    8358:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    835a:	ea4f 1986 	mov.w	r9, r6, lsl #6
    835e:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8362:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    8366:	b0ab      	sub	sp, #172	; 0xac
    8368:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    836a:	4621      	mov	r1, r4
    836c:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    836e:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8372:	f016 f886 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    8376:	f080 0001 	eor.w	r0, r0, #1
    837a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    837c:	f818 0009 	ldrb.w	r0, [r8, r9]
    8380:	1e43      	subs	r3, r0, #1
    8382:	2b08      	cmp	r3, #8
    8384:	f200 8253 	bhi.w	882e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    8388:	e8df f013 	tbh	[pc, r3, lsl #1]
    838c:	00680009 	.word	0x00680009
    8390:	00b7011a 	.word	0x00b7011a
    8394:	02510251 	.word	0x02510251
    8398:	02510251 	.word	0x02510251
    839c:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
    839e:	ad1c      	add	r5, sp, #112	; 0x70
    83a0:	4631      	mov	r1, r6
    83a2:	b31f      	cbz	r7, 83ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    83a4:	a810      	add	r0, sp, #64	; 0x40
    83a6:	f00d fad6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83aa:	4621      	mov	r1, r4
    83ac:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    83ae:	6876      	ldr	r6, [r6, #4]
    83b0:	f00d fad1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83b4:	b104      	cbz	r4, 83b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x74>
    83b6:	6864      	ldr	r4, [r4, #4]
    83b8:	4651      	mov	r1, sl
    83ba:	4628      	mov	r0, r5
    83bc:	f00d facb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    83c0:	f1ba 0f00 	cmp.w	sl, #0
    83c4:	d001      	beq.n	83ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x86>
    83c6:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    83ca:	9400      	str	r4, [sp, #0]
    83cc:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    83d0:	ab16      	add	r3, sp, #88	; 0x58
    83d2:	4632      	mov	r2, r6
    83d4:	a910      	add	r1, sp, #64	; 0x40
    83d6:	a822      	add	r0, sp, #136	; 0x88
    83d8:	f00e fc62 	bl	16ca0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Greater);
    83dc:	4628      	mov	r0, r5
    83de:	f00d fa75 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    83e2:	a816      	add	r0, sp, #88	; 0x58
    83e4:	f00d fa72 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    83e8:	a810      	add	r0, sp, #64	; 0x40
    83ea:	e0e1      	b.n	85b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
    83ec:	a816      	add	r0, sp, #88	; 0x58
    83ee:	f00d fab2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83f2:	4621      	mov	r1, r4
    83f4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    83f6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    83fa:	f00d faac 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    83fe:	b104      	cbz	r4, 8402 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    8400:	6864      	ldr	r4, [r4, #4]
    8402:	4651      	mov	r1, sl
    8404:	a822      	add	r0, sp, #136	; 0x88
    8406:	f00d faa6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    840a:	f1ba 0f00 	cmp.w	sl, #0
    840e:	d001      	beq.n	8414 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    8410:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8414:	aa22      	add	r2, sp, #136	; 0x88
    8416:	4629      	mov	r1, r5
    8418:	a816      	add	r0, sp, #88	; 0x58
    841a:	f00e fae0 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    841e:	4641      	mov	r1, r8
  const int64_t flatsize =
    8420:	4606      	mov	r6, r0
    8422:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8424:	2200      	movs	r2, #0
    8426:	2300      	movs	r3, #0
    8428:	42b2      	cmp	r2, r6
    842a:	eb73 0007 	sbcs.w	r0, r3, r7
    842e:	f280 80b8 	bge.w	85a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8432:	ecb1 7a01 	vldmia	r1!, {s14}
    8436:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs > rhs;
    843a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8442:	eb0a 0002 	add.w	r0, sl, r2
  return lhs > rhs;
    8446:	bfcc      	ite	gt
    8448:	f04f 0c01 	movgt.w	ip, #1
    844c:	f04f 0c00 	movle.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8450:	3201      	adds	r2, #1
  return lhs > rhs;
    8452:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    8456:	f143 0300 	adc.w	r3, r3, #0
    845a:	e7e5      	b.n	8428 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
    845c:	ad1c      	add	r5, sp, #112	; 0x70
    845e:	4631      	mov	r1, r6
    8460:	b1e7      	cbz	r7, 849c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8462:	a810      	add	r0, sp, #64	; 0x40
    8464:	f00d fa77 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8468:	4621      	mov	r1, r4
    846a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    846c:	6876      	ldr	r6, [r6, #4]
    846e:	f00d fa72 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8472:	b104      	cbz	r4, 8476 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8474:	6864      	ldr	r4, [r4, #4]
    8476:	4651      	mov	r1, sl
    8478:	4628      	mov	r0, r5
    847a:	f00d fa6c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    847e:	f1ba 0f00 	cmp.w	sl, #0
    8482:	d001      	beq.n	8488 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8484:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8488:	9400      	str	r4, [sp, #0]
    848a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    848e:	ab16      	add	r3, sp, #88	; 0x58
    8490:	4632      	mov	r2, r6
    8492:	a910      	add	r1, sp, #64	; 0x40
    8494:	a822      	add	r0, sp, #136	; 0x88
    8496:	f00e ff7b 	bl	17390 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    849a:	e79f      	b.n	83dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    849c:	a816      	add	r0, sp, #88	; 0x58
    849e:	f00d fa5a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    84a2:	4621      	mov	r1, r4
    84a4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    84a6:	6876      	ldr	r6, [r6, #4]
    84a8:	f00d fa55 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    84ac:	b104      	cbz	r4, 84b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    84ae:	6864      	ldr	r4, [r4, #4]
    84b0:	4651      	mov	r1, sl
    84b2:	a822      	add	r0, sp, #136	; 0x88
    84b4:	f00d fa4f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    84b8:	f1ba 0f00 	cmp.w	sl, #0
    84bc:	d001      	beq.n	84c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    84be:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    84c2:	aa22      	add	r2, sp, #136	; 0x88
    84c4:	4629      	mov	r1, r5
    84c6:	a816      	add	r0, sp, #88	; 0x58
    84c8:	f00e fa89 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    84cc:	2200      	movs	r2, #0
  const int64_t flatsize =
    84ce:	4680      	mov	r8, r0
    84d0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    84d4:	2300      	movs	r3, #0
    84d6:	4542      	cmp	r2, r8
    84d8:	eb73 0109 	sbcs.w	r1, r3, r9
    84dc:	da61      	bge.n	85a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
    84de:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    84e2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    84e6:	4281      	cmp	r1, r0
    84e8:	bfd4      	ite	le
    84ea:	2100      	movle	r1, #0
    84ec:	2101      	movgt	r1, #1
    84ee:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    84f2:	3201      	adds	r2, #1
    84f4:	f143 0300 	adc.w	r3, r3, #0
    84f8:	e7ed      	b.n	84d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
    84fa:	ad1c      	add	r5, sp, #112	; 0x70
    84fc:	4631      	mov	r1, r6
    84fe:	b1e7      	cbz	r7, 853a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    8500:	a810      	add	r0, sp, #64	; 0x40
    8502:	f00d fa28 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8506:	4621      	mov	r1, r4
    8508:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    850a:	6876      	ldr	r6, [r6, #4]
    850c:	f00d fa23 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8510:	b104      	cbz	r4, 8514 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    8512:	6864      	ldr	r4, [r4, #4]
    8514:	4651      	mov	r1, sl
    8516:	4628      	mov	r0, r5
    8518:	f00d fa1d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    851c:	f1ba 0f00 	cmp.w	sl, #0
    8520:	d001      	beq.n	8526 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8522:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8526:	9400      	str	r4, [sp, #0]
    8528:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    852c:	ab16      	add	r3, sp, #88	; 0x58
    852e:	4632      	mov	r2, r6
    8530:	a910      	add	r1, sp, #64	; 0x40
    8532:	a822      	add	r0, sp, #136	; 0x88
    8534:	f00e ff81 	bl	1743a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8538:	e750      	b.n	83dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    853a:	a816      	add	r0, sp, #88	; 0x58
    853c:	f00d fa0b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8540:	4621      	mov	r1, r4
    8542:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8544:	6876      	ldr	r6, [r6, #4]
    8546:	f00d fa06 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    854a:	b104      	cbz	r4, 854e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    854c:	6864      	ldr	r4, [r4, #4]
    854e:	4651      	mov	r1, sl
    8550:	a822      	add	r0, sp, #136	; 0x88
    8552:	f00d fa00 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8556:	f1ba 0f00 	cmp.w	sl, #0
    855a:	d001      	beq.n	8560 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    855c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8560:	aa22      	add	r2, sp, #136	; 0x88
    8562:	4629      	mov	r1, r5
    8564:	a816      	add	r0, sp, #88	; 0x58
    8566:	f00e fa3a 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    856a:	3c08      	subs	r4, #8
  const int64_t flatsize =
    856c:	17c1      	asrs	r1, r0, #31
    856e:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8572:	2200      	movs	r2, #0
    8574:	2300      	movs	r3, #0
    8576:	4282      	cmp	r2, r0
    8578:	eb73 0601 	sbcs.w	r6, r3, r1
    857c:	da11      	bge.n	85a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
    857e:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
    8582:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
    8586:	45b0      	cmp	r8, r6
    8588:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    858c:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs > rhs;
    8590:	bfb4      	ite	lt
    8592:	2601      	movlt	r6, #1
    8594:	2600      	movge	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8596:	3201      	adds	r2, #1
  return lhs > rhs;
    8598:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    859c:	f143 0300 	adc.w	r3, r3, #0
    85a0:	e7e9      	b.n	8576 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x232>
    85a2:	a822      	add	r0, sp, #136	; 0x88
    85a4:	f00d f992 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    85a8:	4628      	mov	r0, r5
    85aa:	f00d f98f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    85ae:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Greater);
    85b0:	f00d f98c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    85b4:	2000      	movs	r0, #0
}
    85b6:	b02b      	add	sp, #172	; 0xac
    85b8:	ecbd 8b02 	vpop	{d8}
    85bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Greater);
    85c0:	6933      	ldr	r3, [r6, #16]
    85c2:	68f0      	ldr	r0, [r6, #12]
    85c4:	6925      	ldr	r5, [r4, #16]
    85c6:	f1c3 0800 	rsb	r8, r3, #0
    85ca:	f7f8 fb4d 	bl	c68 <__aeabi_f2d>
    85ce:	ec41 0b10 	vmov	d0, r0, r1
    85d2:	a90d      	add	r1, sp, #52	; 0x34
    85d4:	a80c      	add	r0, sp, #48	; 0x30
    85d6:	f009 f90b 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    85da:	68e0      	ldr	r0, [r4, #12]
    85dc:	f7f8 fb44 	bl	c68 <__aeabi_f2d>
    85e0:	ec41 0b10 	vmov	d0, r0, r1
    85e4:	a90f      	add	r1, sp, #60	; 0x3c
    85e6:	a80e      	add	r0, sp, #56	; 0x38
    85e8:	f009 f902 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    85ec:	2308      	movs	r3, #8
    85ee:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    85f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85f4:	9324      	str	r3, [sp, #144]	; 0x90
    85f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    85f8:	426d      	negs	r5, r5
    85fa:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    85fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8600:	9327      	str	r3, [sp, #156]	; 0x9c
    8602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8604:	9328      	str	r3, [sp, #160]	; 0xa0
    8606:	ad1c      	add	r5, sp, #112	; 0x70
    8608:	4631      	mov	r1, r6
    860a:	a810      	add	r0, sp, #64	; 0x40
    860c:	b1df      	cbz	r7, 8646 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x302>
    860e:	f00d f9a2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8612:	6872      	ldr	r2, [r6, #4]
    8614:	9204      	str	r2, [sp, #16]
    8616:	4621      	mov	r1, r4
    8618:	a816      	add	r0, sp, #88	; 0x58
    861a:	f00d f99c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    861e:	4651      	mov	r1, sl
    8620:	4628      	mov	r0, r5
    8622:	6864      	ldr	r4, [r4, #4]
    8624:	f00d f997 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8628:	9a04      	ldr	r2, [sp, #16]
    862a:	f1ba 0f00 	cmp.w	sl, #0
    862e:	d001      	beq.n	8634 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    8630:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    8634:	9400      	str	r4, [sp, #0]
    8636:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    863a:	ab16      	add	r3, sp, #88	; 0x58
    863c:	a910      	add	r1, sp, #64	; 0x40
    863e:	a822      	add	r0, sp, #136	; 0x88
    8640:	f00f fb9c 	bl	17d7c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8644:	e6ca      	b.n	83dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8646:	f00d f986 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    864a:	6873      	ldr	r3, [r6, #4]
    864c:	9304      	str	r3, [sp, #16]
    864e:	4621      	mov	r1, r4
    8650:	a816      	add	r0, sp, #88	; 0x58
    8652:	f00d f980 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8656:	6863      	ldr	r3, [r4, #4]
    8658:	9305      	str	r3, [sp, #20]
    865a:	4651      	mov	r1, sl
    865c:	4628      	mov	r0, r5
    865e:	f00d f97a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8662:	f1ba 0f00 	cmp.w	sl, #0
    8666:	d001      	beq.n	866c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x328>
    8668:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    866c:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8670:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8672:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8674:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8678:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    867c:	aa1c      	add	r2, sp, #112	; 0x70
    867e:	a916      	add	r1, sp, #88	; 0x58
    8680:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8682:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8684:	f00e f9ab 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8688:	4602      	mov	r2, r0
    868a:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    868c:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8690:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8694:	f04f 0800 	mov.w	r8, #0
    8698:	f04f 0900 	mov.w	r9, #0
    869c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    86a0:	4590      	cmp	r8, r2
    86a2:	eb79 0303 	sbcs.w	r3, r9, r3
    86a6:	f280 80c0 	bge.w	882a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    86aa:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    86ac:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    86ae:	f812 5008 	ldrb.w	r5, [r2, r8]
    86b2:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    86b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    86b8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    86ba:	9a04      	ldr	r2, [sp, #16]
    86bc:	f812 0008 	ldrb.w	r0, [r2, r8]
    86c0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86c2:	ee18 1a10 	vmov	r1, s16
    86c6:	465a      	mov	r2, fp
    86c8:	40b0      	lsls	r0, r6
    86ca:	f7fe fd6d 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    86ce:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86d0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    86d2:	4622      	mov	r2, r4
    86d4:	4639      	mov	r1, r7
    86d6:	4628      	mov	r0, r5
    86d8:	f7fe fd66 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
    86dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    86de:	4283      	cmp	r3, r0
    86e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86e2:	bfd4      	ite	le
    86e4:	2000      	movle	r0, #0
    86e6:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    86e8:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
    86ec:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    86f0:	f149 0900 	adc.w	r9, r9, #0
    86f4:	e7d2      	b.n	869c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x358>
    86f6:	6933      	ldr	r3, [r6, #16]
    86f8:	68f0      	ldr	r0, [r6, #12]
    86fa:	6925      	ldr	r5, [r4, #16]
    86fc:	f1c3 0800 	rsb	r8, r3, #0
    8700:	f7f8 fab2 	bl	c68 <__aeabi_f2d>
    8704:	ec41 0b10 	vmov	d0, r0, r1
    8708:	a90d      	add	r1, sp, #52	; 0x34
    870a:	a80c      	add	r0, sp, #48	; 0x30
    870c:	f009 f870 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8710:	68e0      	ldr	r0, [r4, #12]
    8712:	f7f8 faa9 	bl	c68 <__aeabi_f2d>
    8716:	ec41 0b10 	vmov	d0, r0, r1
    871a:	a90f      	add	r1, sp, #60	; 0x3c
    871c:	a80e      	add	r0, sp, #56	; 0x38
    871e:	f009 f867 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8722:	2308      	movs	r3, #8
    8724:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    872a:	9324      	str	r3, [sp, #144]	; 0x90
    872c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    872e:	426d      	negs	r5, r5
    8730:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8736:	9327      	str	r3, [sp, #156]	; 0x9c
    8738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    873a:	9328      	str	r3, [sp, #160]	; 0xa0
    873c:	ad1c      	add	r5, sp, #112	; 0x70
    873e:	4631      	mov	r1, r6
    8740:	a810      	add	r0, sp, #64	; 0x40
    8742:	b1df      	cbz	r7, 877c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x438>
    8744:	f00d f907 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8748:	6872      	ldr	r2, [r6, #4]
    874a:	9204      	str	r2, [sp, #16]
    874c:	4621      	mov	r1, r4
    874e:	a816      	add	r0, sp, #88	; 0x58
    8750:	f00d f901 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8754:	4651      	mov	r1, sl
    8756:	4628      	mov	r0, r5
    8758:	6864      	ldr	r4, [r4, #4]
    875a:	f00d f8fc 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    875e:	9a04      	ldr	r2, [sp, #16]
    8760:	f1ba 0f00 	cmp.w	sl, #0
    8764:	d001      	beq.n	876a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x426>
    8766:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
    876a:	9400      	str	r4, [sp, #0]
    876c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8770:	ab16      	add	r3, sp, #88	; 0x58
    8772:	a910      	add	r1, sp, #64	; 0x40
    8774:	a822      	add	r0, sp, #136	; 0x88
    8776:	f00f fb8d 	bl	17e94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    877a:	e62f      	b.n	83dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
    877c:	f00d f8eb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8780:	6873      	ldr	r3, [r6, #4]
    8782:	9304      	str	r3, [sp, #16]
    8784:	4621      	mov	r1, r4
    8786:	a816      	add	r0, sp, #88	; 0x58
    8788:	f00d f8e5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    878c:	6863      	ldr	r3, [r4, #4]
    878e:	9305      	str	r3, [sp, #20]
    8790:	4651      	mov	r1, sl
    8792:	4628      	mov	r0, r5
    8794:	f00d f8df 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8798:	f1ba 0f00 	cmp.w	sl, #0
    879c:	d001      	beq.n	87a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    879e:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    87a2:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    87a6:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    87a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    87aa:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    87ae:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    87b2:	aa1c      	add	r2, sp, #112	; 0x70
    87b4:	a916      	add	r1, sp, #88	; 0x58
    87b6:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    87b8:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    87ba:	f00e f910 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    87be:	4602      	mov	r2, r0
    87c0:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    87c2:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    87c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    87ca:	f04f 0800 	mov.w	r8, #0
    87ce:	f04f 0900 	mov.w	r9, #0
    87d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    87d6:	4590      	cmp	r8, r2
    87d8:	eb79 0303 	sbcs.w	r3, r9, r3
    87dc:	da25      	bge.n	882a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    87de:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    87e0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    87e2:	f912 5008 	ldrsb.w	r5, [r2, r8]
    87e6:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    87e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    87ec:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    87ee:	9a04      	ldr	r2, [sp, #16]
    87f0:	f912 0008 	ldrsb.w	r0, [r2, r8]
    87f4:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    87f6:	ee18 1a10 	vmov	r1, s16
    87fa:	465a      	mov	r2, fp
    87fc:	40b0      	lsls	r0, r6
    87fe:	f7fe fcd3 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    8802:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8804:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8806:	4622      	mov	r2, r4
    8808:	4639      	mov	r1, r7
    880a:	4628      	mov	r0, r5
    880c:	f7fe fccc 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
    8810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8812:	4283      	cmp	r3, r0
    8814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8816:	bfd4      	ite	le
    8818:	2000      	movle	r0, #0
    881a:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    881c:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
    8820:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8824:	f149 0900 	adc.w	r9, r9, #0
    8828:	e7d3      	b.n	87d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    882a:	a81c      	add	r0, sp, #112	; 0x70
    882c:	e5d7      	b.n	83de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    882e:	696c      	ldr	r4, [r5, #20]
    8830:	f7f8 f83f 	bl	8b2 <TfLiteTypeGetName>
    8834:	f818 3009 	ldrb.w	r3, [r8, r9]
    8838:	4902      	ldr	r1, [pc, #8]	; (8844 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    883a:	4602      	mov	r2, r0
    883c:	4628      	mov	r0, r5
    883e:	47a0      	blx	r4
      return kTfLiteError;
    8840:	2001      	movs	r0, #1
    8842:	e6b8      	b.n	85b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x272>
    8844:	00027ac7 	.word	0x00027ac7

00008848 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
    8848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    884c:	680b      	ldr	r3, [r1, #0]
    884e:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    8852:	685e      	ldr	r6, [r3, #4]
    8854:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8856:	684b      	ldr	r3, [r1, #4]
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
    8858:	ed2d 8b02 	vpush	{d8}
    885c:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    885e:	ea4f 1986 	mov.w	r9, r6, lsl #6
    8862:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8866:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    886a:	b0ab      	sub	sp, #172	; 0xac
    886c:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    886e:	4621      	mov	r1, r4
    8870:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    8872:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8876:	f015 fe04 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    887a:	f080 0001 	eor.w	r0, r0, #1
    887e:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    8880:	f818 0009 	ldrb.w	r0, [r8, r9]
    8884:	1e43      	subs	r3, r0, #1
    8886:	2b08      	cmp	r3, #8
    8888:	f200 8253 	bhi.w	8d32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    888c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8890:	00680009 	.word	0x00680009
    8894:	00b7011a 	.word	0x00b7011a
    8898:	02510251 	.word	0x02510251
    889c:	02510251 	.word	0x02510251
    88a0:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
    88a2:	ad1c      	add	r5, sp, #112	; 0x70
    88a4:	4631      	mov	r1, r6
    88a6:	b31f      	cbz	r7, 88f0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    88a8:	a810      	add	r0, sp, #64	; 0x40
    88aa:	f00d f854 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    88ae:	4621      	mov	r1, r4
    88b0:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    88b2:	6876      	ldr	r6, [r6, #4]
    88b4:	f00d f84f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    88b8:	b104      	cbz	r4, 88bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    88ba:	6864      	ldr	r4, [r4, #4]
    88bc:	4651      	mov	r1, sl
    88be:	4628      	mov	r0, r5
    88c0:	f00d f849 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    88c4:	f1ba 0f00 	cmp.w	sl, #0
    88c8:	d001      	beq.n	88ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    88ca:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    88ce:	9400      	str	r4, [sp, #0]
    88d0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    88d4:	ab16      	add	r3, sp, #88	; 0x58
    88d6:	4632      	mov	r2, r6
    88d8:	a910      	add	r1, sp, #64	; 0x40
    88da:	a822      	add	r0, sp, #136	; 0x88
    88dc:	f00e fa3c 	bl	16d58 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    88e0:	4628      	mov	r0, r5
    88e2:	f00c fff3 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    88e6:	a816      	add	r0, sp, #88	; 0x58
    88e8:	f00c fff0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    88ec:	a810      	add	r0, sp, #64	; 0x40
    88ee:	e0e1      	b.n	8ab4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
    88f0:	a816      	add	r0, sp, #88	; 0x58
    88f2:	f00d f830 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    88f6:	4621      	mov	r1, r4
    88f8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    88fa:	f8d6 8004 	ldr.w	r8, [r6, #4]
    88fe:	f00d f82a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8902:	b104      	cbz	r4, 8906 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    8904:	6864      	ldr	r4, [r4, #4]
    8906:	4651      	mov	r1, sl
    8908:	a822      	add	r0, sp, #136	; 0x88
    890a:	f00d f824 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    890e:	f1ba 0f00 	cmp.w	sl, #0
    8912:	d001      	beq.n	8918 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    8914:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8918:	aa22      	add	r2, sp, #136	; 0x88
    891a:	4629      	mov	r1, r5
    891c:	a816      	add	r0, sp, #88	; 0x58
    891e:	f00e f85e 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8922:	4641      	mov	r1, r8
  const int64_t flatsize =
    8924:	4606      	mov	r6, r0
    8926:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8928:	2200      	movs	r2, #0
    892a:	2300      	movs	r3, #0
    892c:	42b2      	cmp	r2, r6
    892e:	eb73 0007 	sbcs.w	r0, r3, r7
    8932:	f280 80b8 	bge.w	8aa6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8936:	ecb1 7a01 	vldmia	r1!, {s14}
    893a:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs >= rhs;
    893e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8946:	eb0a 0002 	add.w	r0, sl, r2
  return lhs >= rhs;
    894a:	bfac      	ite	ge
    894c:	f04f 0c01 	movge.w	ip, #1
    8950:	f04f 0c00 	movlt.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8954:	3201      	adds	r2, #1
  return lhs >= rhs;
    8956:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    895a:	f143 0300 	adc.w	r3, r3, #0
    895e:	e7e5      	b.n	892c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
    8960:	ad1c      	add	r5, sp, #112	; 0x70
    8962:	4631      	mov	r1, r6
    8964:	b1e7      	cbz	r7, 89a0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8966:	a810      	add	r0, sp, #64	; 0x40
    8968:	f00c fff5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    896c:	4621      	mov	r1, r4
    896e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8970:	6876      	ldr	r6, [r6, #4]
    8972:	f00c fff0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8976:	b104      	cbz	r4, 897a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8978:	6864      	ldr	r4, [r4, #4]
    897a:	4651      	mov	r1, sl
    897c:	4628      	mov	r0, r5
    897e:	f00c ffea 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8982:	f1ba 0f00 	cmp.w	sl, #0
    8986:	d001      	beq.n	898c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8988:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    898c:	9400      	str	r4, [sp, #0]
    898e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8992:	ab16      	add	r3, sp, #88	; 0x58
    8994:	4632      	mov	r2, r6
    8996:	a910      	add	r1, sp, #64	; 0x40
    8998:	a822      	add	r0, sp, #136	; 0x88
    899a:	f00e fdab 	bl	174f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    899e:	e79f      	b.n	88e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    89a0:	a816      	add	r0, sp, #88	; 0x58
    89a2:	f00c ffd8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    89a6:	4621      	mov	r1, r4
    89a8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    89aa:	6876      	ldr	r6, [r6, #4]
    89ac:	f00c ffd3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    89b0:	b104      	cbz	r4, 89b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    89b2:	6864      	ldr	r4, [r4, #4]
    89b4:	4651      	mov	r1, sl
    89b6:	a822      	add	r0, sp, #136	; 0x88
    89b8:	f00c ffcd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    89bc:	f1ba 0f00 	cmp.w	sl, #0
    89c0:	d001      	beq.n	89c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    89c2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    89c6:	aa22      	add	r2, sp, #136	; 0x88
    89c8:	4629      	mov	r1, r5
    89ca:	a816      	add	r0, sp, #88	; 0x58
    89cc:	f00e f807 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    89d0:	2200      	movs	r2, #0
  const int64_t flatsize =
    89d2:	4680      	mov	r8, r0
    89d4:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    89d8:	2300      	movs	r3, #0
    89da:	4542      	cmp	r2, r8
    89dc:	eb73 0109 	sbcs.w	r1, r3, r9
    89e0:	da61      	bge.n	8aa6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
    89e2:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    89e6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    89ea:	4281      	cmp	r1, r0
    89ec:	bfb4      	ite	lt
    89ee:	2100      	movlt	r1, #0
    89f0:	2101      	movge	r1, #1
    89f2:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    89f6:	3201      	adds	r2, #1
    89f8:	f143 0300 	adc.w	r3, r3, #0
    89fc:	e7ed      	b.n	89da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
    89fe:	ad1c      	add	r5, sp, #112	; 0x70
    8a00:	4631      	mov	r1, r6
    8a02:	b1e7      	cbz	r7, 8a3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    8a04:	a810      	add	r0, sp, #64	; 0x40
    8a06:	f00c ffa6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a0a:	4621      	mov	r1, r4
    8a0c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8a0e:	6876      	ldr	r6, [r6, #4]
    8a10:	f00c ffa1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a14:	b104      	cbz	r4, 8a18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    8a16:	6864      	ldr	r4, [r4, #4]
    8a18:	4651      	mov	r1, sl
    8a1a:	4628      	mov	r0, r5
    8a1c:	f00c ff9b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8a20:	f1ba 0f00 	cmp.w	sl, #0
    8a24:	d001      	beq.n	8a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8a26:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8a2a:	9400      	str	r4, [sp, #0]
    8a2c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8a30:	ab16      	add	r3, sp, #88	; 0x58
    8a32:	4632      	mov	r2, r6
    8a34:	a910      	add	r1, sp, #64	; 0x40
    8a36:	a822      	add	r0, sp, #136	; 0x88
    8a38:	f00e fdb1 	bl	1759e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8a3c:	e750      	b.n	88e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8a3e:	a816      	add	r0, sp, #88	; 0x58
    8a40:	f00c ff89 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a44:	4621      	mov	r1, r4
    8a46:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8a48:	6876      	ldr	r6, [r6, #4]
    8a4a:	f00c ff84 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8a4e:	b104      	cbz	r4, 8a52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    8a50:	6864      	ldr	r4, [r4, #4]
    8a52:	4651      	mov	r1, sl
    8a54:	a822      	add	r0, sp, #136	; 0x88
    8a56:	f00c ff7e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8a5a:	f1ba 0f00 	cmp.w	sl, #0
    8a5e:	d001      	beq.n	8a64 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    8a60:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8a64:	aa22      	add	r2, sp, #136	; 0x88
    8a66:	4629      	mov	r1, r5
    8a68:	a816      	add	r0, sp, #88	; 0x58
    8a6a:	f00d ffb8 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8a6e:	3c08      	subs	r4, #8
  const int64_t flatsize =
    8a70:	17c1      	asrs	r1, r0, #31
    8a72:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8a76:	2200      	movs	r2, #0
    8a78:	2300      	movs	r3, #0
    8a7a:	4282      	cmp	r2, r0
    8a7c:	eb73 0601 	sbcs.w	r6, r3, r1
    8a80:	da11      	bge.n	8aa6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
    8a82:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8a86:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8a8a:	45b0      	cmp	r8, r6
    8a8c:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    8a90:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs >= rhs;
    8a94:	bfac      	ite	ge
    8a96:	2601      	movge	r6, #1
    8a98:	2600      	movlt	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8a9a:	3201      	adds	r2, #1
  return lhs >= rhs;
    8a9c:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    8aa0:	f143 0300 	adc.w	r3, r3, #0
    8aa4:	e7e9      	b.n	8a7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
    8aa6:	a822      	add	r0, sp, #136	; 0x88
    8aa8:	f00c ff10 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8aac:	4628      	mov	r0, r5
    8aae:	f00c ff0d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8ab2:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    8ab4:	f00c ff0a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8ab8:	2000      	movs	r0, #0
}
    8aba:	b02b      	add	sp, #172	; 0xac
    8abc:	ecbd 8b02 	vpop	{d8}
    8ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
    8ac4:	6933      	ldr	r3, [r6, #16]
    8ac6:	68f0      	ldr	r0, [r6, #12]
    8ac8:	6925      	ldr	r5, [r4, #16]
    8aca:	f1c3 0800 	rsb	r8, r3, #0
    8ace:	f7f8 f8cb 	bl	c68 <__aeabi_f2d>
    8ad2:	ec41 0b10 	vmov	d0, r0, r1
    8ad6:	a90d      	add	r1, sp, #52	; 0x34
    8ad8:	a80c      	add	r0, sp, #48	; 0x30
    8ada:	f008 fe89 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8ade:	68e0      	ldr	r0, [r4, #12]
    8ae0:	f7f8 f8c2 	bl	c68 <__aeabi_f2d>
    8ae4:	ec41 0b10 	vmov	d0, r0, r1
    8ae8:	a90f      	add	r1, sp, #60	; 0x3c
    8aea:	a80e      	add	r0, sp, #56	; 0x38
    8aec:	f008 fe80 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8af0:	2308      	movs	r3, #8
    8af2:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8af8:	9324      	str	r3, [sp, #144]	; 0x90
    8afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8afc:	426d      	negs	r5, r5
    8afe:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b04:	9327      	str	r3, [sp, #156]	; 0x9c
    8b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b08:	9328      	str	r3, [sp, #160]	; 0xa0
    8b0a:	ad1c      	add	r5, sp, #112	; 0x70
    8b0c:	4631      	mov	r1, r6
    8b0e:	a810      	add	r0, sp, #64	; 0x40
    8b10:	b1df      	cbz	r7, 8b4a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x302>
    8b12:	f00c ff20 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8b16:	6872      	ldr	r2, [r6, #4]
    8b18:	9204      	str	r2, [sp, #16]
    8b1a:	4621      	mov	r1, r4
    8b1c:	a816      	add	r0, sp, #88	; 0x58
    8b1e:	f00c ff1a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8b22:	4651      	mov	r1, sl
    8b24:	4628      	mov	r0, r5
    8b26:	6864      	ldr	r4, [r4, #4]
    8b28:	f00c ff15 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8b2c:	9a04      	ldr	r2, [sp, #16]
    8b2e:	f1ba 0f00 	cmp.w	sl, #0
    8b32:	d001      	beq.n	8b38 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    8b34:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8b38:	9400      	str	r4, [sp, #0]
    8b3a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8b3e:	ab16      	add	r3, sp, #88	; 0x58
    8b40:	a910      	add	r1, sp, #64	; 0x40
    8b42:	a822      	add	r0, sp, #136	; 0x88
    8b44:	f00f fa32 	bl	17fac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8b48:	e6ca      	b.n	88e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8b4a:	f00c ff04 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8b4e:	6873      	ldr	r3, [r6, #4]
    8b50:	9304      	str	r3, [sp, #16]
    8b52:	4621      	mov	r1, r4
    8b54:	a816      	add	r0, sp, #88	; 0x58
    8b56:	f00c fefe 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8b5a:	6863      	ldr	r3, [r4, #4]
    8b5c:	9305      	str	r3, [sp, #20]
    8b5e:	4651      	mov	r1, sl
    8b60:	4628      	mov	r0, r5
    8b62:	f00c fef8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8b66:	f1ba 0f00 	cmp.w	sl, #0
    8b6a:	d001      	beq.n	8b70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x328>
    8b6c:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    8b70:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8b74:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8b76:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8b78:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8b7c:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8b80:	aa1c      	add	r2, sp, #112	; 0x70
    8b82:	a916      	add	r1, sp, #88	; 0x58
    8b84:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8b86:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8b88:	f00d ff29 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8b8c:	4602      	mov	r2, r0
    8b8e:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    8b90:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8b94:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8b98:	f04f 0800 	mov.w	r8, #0
    8b9c:	f04f 0900 	mov.w	r9, #0
    8ba0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    8ba4:	4590      	cmp	r8, r2
    8ba6:	eb79 0303 	sbcs.w	r3, r9, r3
    8baa:	f280 80c0 	bge.w	8d2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    8bae:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    8bb0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    8bb2:	f812 5008 	ldrb.w	r5, [r2, r8]
    8bb6:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8bb8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8bbc:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    8bbe:	9a04      	ldr	r2, [sp, #16]
    8bc0:	f812 0008 	ldrb.w	r0, [r2, r8]
    8bc4:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8bc6:	ee18 1a10 	vmov	r1, s16
    8bca:	465a      	mov	r2, fp
    8bcc:	40b0      	lsls	r0, r6
    8bce:	f7fe faeb 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    8bd2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8bd4:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8bd6:	4622      	mov	r2, r4
    8bd8:	4639      	mov	r1, r7
    8bda:	4628      	mov	r0, r5
    8bdc:	f7fe fae4 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
    8be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8be2:	4283      	cmp	r3, r0
    8be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8be6:	bfb4      	ite	lt
    8be8:	2000      	movlt	r0, #0
    8bea:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    8bec:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
    8bf0:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8bf4:	f149 0900 	adc.w	r9, r9, #0
    8bf8:	e7d2      	b.n	8ba0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x358>
    8bfa:	6933      	ldr	r3, [r6, #16]
    8bfc:	68f0      	ldr	r0, [r6, #12]
    8bfe:	6925      	ldr	r5, [r4, #16]
    8c00:	f1c3 0800 	rsb	r8, r3, #0
    8c04:	f7f8 f830 	bl	c68 <__aeabi_f2d>
    8c08:	ec41 0b10 	vmov	d0, r0, r1
    8c0c:	a90d      	add	r1, sp, #52	; 0x34
    8c0e:	a80c      	add	r0, sp, #48	; 0x30
    8c10:	f008 fdee 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8c14:	68e0      	ldr	r0, [r4, #12]
    8c16:	f7f8 f827 	bl	c68 <__aeabi_f2d>
    8c1a:	ec41 0b10 	vmov	d0, r0, r1
    8c1e:	a90f      	add	r1, sp, #60	; 0x3c
    8c20:	a80e      	add	r0, sp, #56	; 0x38
    8c22:	f008 fde5 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8c26:	2308      	movs	r3, #8
    8c28:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c2e:	9324      	str	r3, [sp, #144]	; 0x90
    8c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c32:	426d      	negs	r5, r5
    8c34:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    8c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c3a:	9327      	str	r3, [sp, #156]	; 0x9c
    8c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c3e:	9328      	str	r3, [sp, #160]	; 0xa0
    8c40:	ad1c      	add	r5, sp, #112	; 0x70
    8c42:	4631      	mov	r1, r6
    8c44:	a810      	add	r0, sp, #64	; 0x40
    8c46:	b1df      	cbz	r7, 8c80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    8c48:	f00c fe85 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8c4c:	6872      	ldr	r2, [r6, #4]
    8c4e:	9204      	str	r2, [sp, #16]
    8c50:	4621      	mov	r1, r4
    8c52:	a816      	add	r0, sp, #88	; 0x58
    8c54:	f00c fe7f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8c58:	4651      	mov	r1, sl
    8c5a:	4628      	mov	r0, r5
    8c5c:	6864      	ldr	r4, [r4, #4]
    8c5e:	f00c fe7a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8c62:	9a04      	ldr	r2, [sp, #16]
    8c64:	f1ba 0f00 	cmp.w	sl, #0
    8c68:	d001      	beq.n	8c6e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x426>
    8c6a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
    8c6e:	9400      	str	r4, [sp, #0]
    8c70:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8c74:	ab16      	add	r3, sp, #88	; 0x58
    8c76:	a910      	add	r1, sp, #64	; 0x40
    8c78:	a822      	add	r0, sp, #136	; 0x88
    8c7a:	f00f fa23 	bl	180c4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8c7e:	e62f      	b.n	88e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8c80:	f00c fe69 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8c84:	6873      	ldr	r3, [r6, #4]
    8c86:	9304      	str	r3, [sp, #16]
    8c88:	4621      	mov	r1, r4
    8c8a:	a816      	add	r0, sp, #88	; 0x58
    8c8c:	f00c fe63 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8c90:	6863      	ldr	r3, [r4, #4]
    8c92:	9305      	str	r3, [sp, #20]
    8c94:	4651      	mov	r1, sl
    8c96:	4628      	mov	r0, r5
    8c98:	f00c fe5d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8c9c:	f1ba 0f00 	cmp.w	sl, #0
    8ca0:	d001      	beq.n	8ca6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    8ca2:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    8ca6:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    8caa:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    8cac:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8cae:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    8cb2:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8cb6:	aa1c      	add	r2, sp, #112	; 0x70
    8cb8:	a916      	add	r1, sp, #88	; 0x58
    8cba:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    8cbc:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8cbe:	f00d fe8e 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    8cc2:	4602      	mov	r2, r0
    8cc4:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    8cc6:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    8cca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    8cce:	f04f 0800 	mov.w	r8, #0
    8cd2:	f04f 0900 	mov.w	r9, #0
    8cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    8cda:	4590      	cmp	r8, r2
    8cdc:	eb79 0303 	sbcs.w	r3, r9, r3
    8ce0:	da25      	bge.n	8d2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    8ce2:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    8ce4:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    8ce6:	f912 5008 	ldrsb.w	r5, [r2, r8]
    8cea:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    8cec:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    8cf0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    8cf2:	9a04      	ldr	r2, [sp, #16]
    8cf4:	f912 0008 	ldrsb.w	r0, [r2, r8]
    8cf8:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8cfa:	ee18 1a10 	vmov	r1, s16
    8cfe:	465a      	mov	r2, fp
    8d00:	40b0      	lsls	r0, r6
    8d02:	f7fe fa51 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    8d06:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8d08:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    8d0a:	4622      	mov	r2, r4
    8d0c:	4639      	mov	r1, r7
    8d0e:	4628      	mov	r0, r5
    8d10:	f7fe fa4a 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
    8d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d16:	4283      	cmp	r3, r0
    8d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d1a:	bfb4      	ite	lt
    8d1c:	2000      	movlt	r0, #0
    8d1e:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    8d20:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
    8d24:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    8d28:	f149 0900 	adc.w	r9, r9, #0
    8d2c:	e7d3      	b.n	8cd6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    8d2e:	a81c      	add	r0, sp, #112	; 0x70
    8d30:	e5d7      	b.n	88e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8d32:	696c      	ldr	r4, [r5, #20]
    8d34:	f7f7 fdbd 	bl	8b2 <TfLiteTypeGetName>
    8d38:	f818 3009 	ldrb.w	r3, [r8, r9]
    8d3c:	4902      	ldr	r1, [pc, #8]	; (8d48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    8d3e:	4602      	mov	r2, r0
    8d40:	4628      	mov	r0, r5
    8d42:	47a0      	blx	r4
      return kTfLiteError;
    8d44:	2001      	movs	r0, #1
    8d46:	e6b8      	b.n	8aba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
    8d48:	00027ac7 	.word	0x00027ac7

00008d4c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
    8d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    8d50:	680b      	ldr	r3, [r1, #0]
    8d52:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    8d56:	685e      	ldr	r6, [r3, #4]
    8d58:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    8d5a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
    8d5c:	ed2d 8b02 	vpush	{d8}
    8d60:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    8d62:	ea4f 1986 	mov.w	r9, r6, lsl #6
    8d66:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    8d6a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    8d6e:	b0ab      	sub	sp, #172	; 0xac
    8d70:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    8d72:	4621      	mov	r1, r4
    8d74:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    8d76:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    8d7a:	f015 fb82 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    8d7e:	f080 0001 	eor.w	r0, r0, #1
    8d82:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    8d84:	f818 0009 	ldrb.w	r0, [r8, r9]
    8d88:	1e43      	subs	r3, r0, #1
    8d8a:	2b08      	cmp	r3, #8
    8d8c:	f200 8253 	bhi.w	9236 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    8d90:	e8df f013 	tbh	[pc, r3, lsl #1]
    8d94:	00680009 	.word	0x00680009
    8d98:	00b7011a 	.word	0x00b7011a
    8d9c:	02510251 	.word	0x02510251
    8da0:	02510251 	.word	0x02510251
    8da4:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
    8da6:	ad1c      	add	r5, sp, #112	; 0x70
    8da8:	4631      	mov	r1, r6
    8daa:	b31f      	cbz	r7, 8df4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    8dac:	a810      	add	r0, sp, #64	; 0x40
    8dae:	f00c fdd2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8db2:	4621      	mov	r1, r4
    8db4:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8db6:	6876      	ldr	r6, [r6, #4]
    8db8:	f00c fdcd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8dbc:	b104      	cbz	r4, 8dc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x74>
    8dbe:	6864      	ldr	r4, [r4, #4]
    8dc0:	4651      	mov	r1, sl
    8dc2:	4628      	mov	r0, r5
    8dc4:	f00c fdc7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8dc8:	f1ba 0f00 	cmp.w	sl, #0
    8dcc:	d001      	beq.n	8dd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x86>
    8dce:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8dd2:	9400      	str	r4, [sp, #0]
    8dd4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8dd8:	ab16      	add	r3, sp, #88	; 0x58
    8dda:	4632      	mov	r2, r6
    8ddc:	a910      	add	r1, sp, #64	; 0x40
    8dde:	a822      	add	r0, sp, #136	; 0x88
    8de0:	f00e f816 	bl	16e10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Less);
    8de4:	4628      	mov	r0, r5
    8de6:	f00c fd71 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8dea:	a816      	add	r0, sp, #88	; 0x58
    8dec:	f00c fd6e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8df0:	a810      	add	r0, sp, #64	; 0x40
    8df2:	e0e1      	b.n	8fb8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
    8df4:	a816      	add	r0, sp, #88	; 0x58
    8df6:	f00c fdae 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8dfa:	4621      	mov	r1, r4
    8dfc:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8dfe:	f8d6 8004 	ldr.w	r8, [r6, #4]
    8e02:	f00c fda8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e06:	b104      	cbz	r4, 8e0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    8e08:	6864      	ldr	r4, [r4, #4]
    8e0a:	4651      	mov	r1, sl
    8e0c:	a822      	add	r0, sp, #136	; 0x88
    8e0e:	f00c fda2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8e12:	f1ba 0f00 	cmp.w	sl, #0
    8e16:	d001      	beq.n	8e1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    8e18:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8e1c:	aa22      	add	r2, sp, #136	; 0x88
    8e1e:	4629      	mov	r1, r5
    8e20:	a816      	add	r0, sp, #88	; 0x58
    8e22:	f00d fddc 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8e26:	4641      	mov	r1, r8
  const int64_t flatsize =
    8e28:	4606      	mov	r6, r0
    8e2a:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8e2c:	2200      	movs	r2, #0
    8e2e:	2300      	movs	r3, #0
    8e30:	42b2      	cmp	r2, r6
    8e32:	eb73 0007 	sbcs.w	r0, r3, r7
    8e36:	f280 80b8 	bge.w	8faa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    8e3a:	ecb1 7a01 	vldmia	r1!, {s14}
    8e3e:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs < rhs;
    8e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    8e4a:	eb0a 0002 	add.w	r0, sl, r2
  return lhs < rhs;
    8e4e:	bf4c      	ite	mi
    8e50:	f04f 0c01 	movmi.w	ip, #1
    8e54:	f04f 0c00 	movpl.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8e58:	3201      	adds	r2, #1
  return lhs < rhs;
    8e5a:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    8e5e:	f143 0300 	adc.w	r3, r3, #0
    8e62:	e7e5      	b.n	8e30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
    8e64:	ad1c      	add	r5, sp, #112	; 0x70
    8e66:	4631      	mov	r1, r6
    8e68:	b1e7      	cbz	r7, 8ea4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x158>
    8e6a:	a810      	add	r0, sp, #64	; 0x40
    8e6c:	f00c fd73 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e70:	4621      	mov	r1, r4
    8e72:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8e74:	6876      	ldr	r6, [r6, #4]
    8e76:	f00c fd6e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8e7a:	b104      	cbz	r4, 8e7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x132>
    8e7c:	6864      	ldr	r4, [r4, #4]
    8e7e:	4651      	mov	r1, sl
    8e80:	4628      	mov	r0, r5
    8e82:	f00c fd68 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8e86:	f1ba 0f00 	cmp.w	sl, #0
    8e8a:	d001      	beq.n	8e90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x144>
    8e8c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8e90:	9400      	str	r4, [sp, #0]
    8e92:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8e96:	ab16      	add	r3, sp, #88	; 0x58
    8e98:	4632      	mov	r2, r6
    8e9a:	a910      	add	r1, sp, #64	; 0x40
    8e9c:	a822      	add	r0, sp, #136	; 0x88
    8e9e:	f00e fbdb 	bl	17658 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8ea2:	e79f      	b.n	8de4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8ea4:	a816      	add	r0, sp, #88	; 0x58
    8ea6:	f00c fd56 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8eaa:	4621      	mov	r1, r4
    8eac:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8eae:	6876      	ldr	r6, [r6, #4]
    8eb0:	f00c fd51 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8eb4:	b104      	cbz	r4, 8eb8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    8eb6:	6864      	ldr	r4, [r4, #4]
    8eb8:	4651      	mov	r1, sl
    8eba:	a822      	add	r0, sp, #136	; 0x88
    8ebc:	f00c fd4b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8ec0:	f1ba 0f00 	cmp.w	sl, #0
    8ec4:	d001      	beq.n	8eca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    8ec6:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8eca:	aa22      	add	r2, sp, #136	; 0x88
    8ecc:	4629      	mov	r1, r5
    8ece:	a816      	add	r0, sp, #88	; 0x58
    8ed0:	f00d fd85 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    8ed4:	2200      	movs	r2, #0
  const int64_t flatsize =
    8ed6:	4680      	mov	r8, r0
    8ed8:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    8edc:	2300      	movs	r3, #0
    8ede:	4542      	cmp	r2, r8
    8ee0:	eb73 0109 	sbcs.w	r1, r3, r9
    8ee4:	da61      	bge.n	8faa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
    8ee6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    8eea:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8eee:	4281      	cmp	r1, r0
    8ef0:	bfac      	ite	ge
    8ef2:	2100      	movge	r1, #0
    8ef4:	2101      	movlt	r1, #1
    8ef6:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    8efa:	3201      	adds	r2, #1
    8efc:	f143 0300 	adc.w	r3, r3, #0
    8f00:	e7ed      	b.n	8ede <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
    8f02:	ad1c      	add	r5, sp, #112	; 0x70
    8f04:	4631      	mov	r1, r6
    8f06:	b1e7      	cbz	r7, 8f42 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    8f08:	a810      	add	r0, sp, #64	; 0x40
    8f0a:	f00c fd24 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f0e:	4621      	mov	r1, r4
    8f10:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8f12:	6876      	ldr	r6, [r6, #4]
    8f14:	f00c fd1f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f18:	b104      	cbz	r4, 8f1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    8f1a:	6864      	ldr	r4, [r4, #4]
    8f1c:	4651      	mov	r1, sl
    8f1e:	4628      	mov	r0, r5
    8f20:	f00c fd19 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8f24:	f1ba 0f00 	cmp.w	sl, #0
    8f28:	d001      	beq.n	8f2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    8f2a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    8f2e:	9400      	str	r4, [sp, #0]
    8f30:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    8f34:	ab16      	add	r3, sp, #88	; 0x58
    8f36:	4632      	mov	r2, r6
    8f38:	a910      	add	r1, sp, #64	; 0x40
    8f3a:	a822      	add	r0, sp, #136	; 0x88
    8f3c:	f00e fbe1 	bl	17702 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    8f40:	e750      	b.n	8de4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    8f42:	a816      	add	r0, sp, #88	; 0x58
    8f44:	f00c fd07 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f48:	4621      	mov	r1, r4
    8f4a:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    8f4c:	6876      	ldr	r6, [r6, #4]
    8f4e:	f00c fd02 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    8f52:	b104      	cbz	r4, 8f56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    8f54:	6864      	ldr	r4, [r4, #4]
    8f56:	4651      	mov	r1, sl
    8f58:	a822      	add	r0, sp, #136	; 0x88
    8f5a:	f00c fcfc 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8f5e:	f1ba 0f00 	cmp.w	sl, #0
    8f62:	d001      	beq.n	8f68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    8f64:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    8f68:	aa22      	add	r2, sp, #136	; 0x88
    8f6a:	4629      	mov	r1, r5
    8f6c:	a816      	add	r0, sp, #88	; 0x58
    8f6e:	f00d fd36 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    8f72:	3c08      	subs	r4, #8
  const int64_t flatsize =
    8f74:	17c1      	asrs	r1, r0, #31
    8f76:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    8f7a:	2200      	movs	r2, #0
    8f7c:	2300      	movs	r3, #0
    8f7e:	4282      	cmp	r2, r0
    8f80:	eb73 0601 	sbcs.w	r6, r3, r1
    8f84:	da11      	bge.n	8faa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
    8f86:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
    8f8a:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
    8f8e:	45b0      	cmp	r8, r6
    8f90:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    8f94:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs < rhs;
    8f98:	bfb4      	ite	lt
    8f9a:	2601      	movlt	r6, #1
    8f9c:	2600      	movge	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    8f9e:	3201      	adds	r2, #1
  return lhs < rhs;
    8fa0:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    8fa4:	f143 0300 	adc.w	r3, r3, #0
    8fa8:	e7e9      	b.n	8f7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x232>
    8faa:	a822      	add	r0, sp, #136	; 0x88
    8fac:	f00c fc8e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8fb0:	4628      	mov	r0, r5
    8fb2:	f00c fc8b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    8fb6:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Less);
    8fb8:	f00c fc88 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    8fbc:	2000      	movs	r0, #0
}
    8fbe:	b02b      	add	sp, #172	; 0xac
    8fc0:	ecbd 8b02 	vpop	{d8}
    8fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Less);
    8fc8:	6933      	ldr	r3, [r6, #16]
    8fca:	68f0      	ldr	r0, [r6, #12]
    8fcc:	6925      	ldr	r5, [r4, #16]
    8fce:	f1c3 0800 	rsb	r8, r3, #0
    8fd2:	f7f7 fe49 	bl	c68 <__aeabi_f2d>
    8fd6:	ec41 0b10 	vmov	d0, r0, r1
    8fda:	a90d      	add	r1, sp, #52	; 0x34
    8fdc:	a80c      	add	r0, sp, #48	; 0x30
    8fde:	f008 fc07 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8fe2:	68e0      	ldr	r0, [r4, #12]
    8fe4:	f7f7 fe40 	bl	c68 <__aeabi_f2d>
    8fe8:	ec41 0b10 	vmov	d0, r0, r1
    8fec:	a90f      	add	r1, sp, #60	; 0x3c
    8fee:	a80e      	add	r0, sp, #56	; 0x38
    8ff0:	f008 fbfe 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    8ff4:	2308      	movs	r3, #8
    8ff6:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    8ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ffc:	9324      	str	r3, [sp, #144]	; 0x90
    8ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9000:	426d      	negs	r5, r5
    9002:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    9006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9008:	9327      	str	r3, [sp, #156]	; 0x9c
    900a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    900c:	9328      	str	r3, [sp, #160]	; 0xa0
    900e:	ad1c      	add	r5, sp, #112	; 0x70
    9010:	4631      	mov	r1, r6
    9012:	a810      	add	r0, sp, #64	; 0x40
    9014:	b1df      	cbz	r7, 904e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x302>
    9016:	f00c fc9e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    901a:	6872      	ldr	r2, [r6, #4]
    901c:	9204      	str	r2, [sp, #16]
    901e:	4621      	mov	r1, r4
    9020:	a816      	add	r0, sp, #88	; 0x58
    9022:	f00c fc98 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9026:	4651      	mov	r1, sl
    9028:	4628      	mov	r0, r5
    902a:	6864      	ldr	r4, [r4, #4]
    902c:	f00c fc93 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9030:	9a04      	ldr	r2, [sp, #16]
    9032:	f1ba 0f00 	cmp.w	sl, #0
    9036:	d001      	beq.n	903c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    9038:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    903c:	9400      	str	r4, [sp, #0]
    903e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9042:	ab16      	add	r3, sp, #88	; 0x58
    9044:	a910      	add	r1, sp, #64	; 0x40
    9046:	a822      	add	r0, sp, #136	; 0x88
    9048:	f00f f8c8 	bl	181dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    904c:	e6ca      	b.n	8de4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    904e:	f00c fc82 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9052:	6873      	ldr	r3, [r6, #4]
    9054:	9304      	str	r3, [sp, #16]
    9056:	4621      	mov	r1, r4
    9058:	a816      	add	r0, sp, #88	; 0x58
    905a:	f00c fc7c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    905e:	6863      	ldr	r3, [r4, #4]
    9060:	9305      	str	r3, [sp, #20]
    9062:	4651      	mov	r1, sl
    9064:	4628      	mov	r0, r5
    9066:	f00c fc76 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    906a:	f1ba 0f00 	cmp.w	sl, #0
    906e:	d001      	beq.n	9074 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x328>
    9070:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    9074:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    9078:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    907a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    907c:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    9080:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9084:	aa1c      	add	r2, sp, #112	; 0x70
    9086:	a916      	add	r1, sp, #88	; 0x58
    9088:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    908a:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    908c:	f00d fca7 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    9090:	4602      	mov	r2, r0
    9092:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    9094:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    9098:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    909c:	f04f 0800 	mov.w	r8, #0
    90a0:	f04f 0900 	mov.w	r9, #0
    90a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    90a8:	4590      	cmp	r8, r2
    90aa:	eb79 0303 	sbcs.w	r3, r9, r3
    90ae:	f280 80c0 	bge.w	9232 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    90b2:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    90b4:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    90b6:	f812 5008 	ldrb.w	r5, [r2, r8]
    90ba:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    90bc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    90c0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    90c2:	9a04      	ldr	r2, [sp, #16]
    90c4:	f812 0008 	ldrb.w	r0, [r2, r8]
    90c8:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90ca:	ee18 1a10 	vmov	r1, s16
    90ce:	465a      	mov	r2, fp
    90d0:	40b0      	lsls	r0, r6
    90d2:	f7fe f869 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    90d6:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90d8:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    90da:	4622      	mov	r2, r4
    90dc:	4639      	mov	r1, r7
    90de:	4628      	mov	r0, r5
    90e0:	f7fe f862 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
    90e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    90e6:	4283      	cmp	r3, r0
    90e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    90ea:	bfac      	ite	ge
    90ec:	2000      	movge	r0, #0
    90ee:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    90f0:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
    90f4:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    90f8:	f149 0900 	adc.w	r9, r9, #0
    90fc:	e7d2      	b.n	90a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x358>
    90fe:	6933      	ldr	r3, [r6, #16]
    9100:	68f0      	ldr	r0, [r6, #12]
    9102:	6925      	ldr	r5, [r4, #16]
    9104:	f1c3 0800 	rsb	r8, r3, #0
    9108:	f7f7 fdae 	bl	c68 <__aeabi_f2d>
    910c:	ec41 0b10 	vmov	d0, r0, r1
    9110:	a90d      	add	r1, sp, #52	; 0x34
    9112:	a80c      	add	r0, sp, #48	; 0x30
    9114:	f008 fb6c 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    9118:	68e0      	ldr	r0, [r4, #12]
    911a:	f7f7 fda5 	bl	c68 <__aeabi_f2d>
    911e:	ec41 0b10 	vmov	d0, r0, r1
    9122:	a90f      	add	r1, sp, #60	; 0x3c
    9124:	a80e      	add	r0, sp, #56	; 0x38
    9126:	f008 fb63 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    912a:	2308      	movs	r3, #8
    912c:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    9130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9132:	9324      	str	r3, [sp, #144]	; 0x90
    9134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9136:	426d      	negs	r5, r5
    9138:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    913c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    913e:	9327      	str	r3, [sp, #156]	; 0x9c
    9140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9142:	9328      	str	r3, [sp, #160]	; 0xa0
    9144:	ad1c      	add	r5, sp, #112	; 0x70
    9146:	4631      	mov	r1, r6
    9148:	a810      	add	r0, sp, #64	; 0x40
    914a:	b1df      	cbz	r7, 9184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x438>
    914c:	f00c fc03 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9150:	6872      	ldr	r2, [r6, #4]
    9152:	9204      	str	r2, [sp, #16]
    9154:	4621      	mov	r1, r4
    9156:	a816      	add	r0, sp, #88	; 0x58
    9158:	f00c fbfd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    915c:	4651      	mov	r1, sl
    915e:	4628      	mov	r0, r5
    9160:	6864      	ldr	r4, [r4, #4]
    9162:	f00c fbf8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9166:	9a04      	ldr	r2, [sp, #16]
    9168:	f1ba 0f00 	cmp.w	sl, #0
    916c:	d001      	beq.n	9172 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x426>
    916e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
    9172:	9400      	str	r4, [sp, #0]
    9174:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9178:	ab16      	add	r3, sp, #88	; 0x58
    917a:	a910      	add	r1, sp, #64	; 0x40
    917c:	a822      	add	r0, sp, #136	; 0x88
    917e:	f00f f8b9 	bl	182f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9182:	e62f      	b.n	8de4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9184:	f00c fbe7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9188:	6873      	ldr	r3, [r6, #4]
    918a:	9304      	str	r3, [sp, #16]
    918c:	4621      	mov	r1, r4
    918e:	a816      	add	r0, sp, #88	; 0x58
    9190:	f00c fbe1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9194:	6863      	ldr	r3, [r4, #4]
    9196:	9305      	str	r3, [sp, #20]
    9198:	4651      	mov	r1, sl
    919a:	4628      	mov	r0, r5
    919c:	f00c fbdb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    91a0:	f1ba 0f00 	cmp.w	sl, #0
    91a4:	d001      	beq.n	91aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    91a6:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    91aa:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    91ae:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    91b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    91b2:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    91b6:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    91ba:	aa1c      	add	r2, sp, #112	; 0x70
    91bc:	a916      	add	r1, sp, #88	; 0x58
    91be:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    91c0:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    91c2:	f00d fc0c 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    91c6:	4602      	mov	r2, r0
    91c8:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    91ca:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    91ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    91d2:	f04f 0800 	mov.w	r8, #0
    91d6:	f04f 0900 	mov.w	r9, #0
    91da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    91de:	4590      	cmp	r8, r2
    91e0:	eb79 0303 	sbcs.w	r3, r9, r3
    91e4:	da25      	bge.n	9232 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    91e6:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    91e8:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    91ea:	f912 5008 	ldrsb.w	r5, [r2, r8]
    91ee:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    91f0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    91f4:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    91f6:	9a04      	ldr	r2, [sp, #16]
    91f8:	f912 0008 	ldrsb.w	r0, [r2, r8]
    91fc:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    91fe:	ee18 1a10 	vmov	r1, s16
    9202:	465a      	mov	r2, fp
    9204:	40b0      	lsls	r0, r6
    9206:	f7fd ffcf 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    920a:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    920c:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    920e:	4622      	mov	r2, r4
    9210:	4639      	mov	r1, r7
    9212:	4628      	mov	r0, r5
    9214:	f7fd ffc8 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
    9218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    921a:	4283      	cmp	r3, r0
    921c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    921e:	bfac      	ite	ge
    9220:	2000      	movge	r0, #0
    9222:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    9224:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
    9228:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    922c:	f149 0900 	adc.w	r9, r9, #0
    9230:	e7d3      	b.n	91da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    9232:	a81c      	add	r0, sp, #112	; 0x70
    9234:	e5d7      	b.n	8de6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    9236:	696c      	ldr	r4, [r5, #20]
    9238:	f7f7 fb3b 	bl	8b2 <TfLiteTypeGetName>
    923c:	f818 3009 	ldrb.w	r3, [r8, r9]
    9240:	4902      	ldr	r1, [pc, #8]	; (924c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    9242:	4602      	mov	r2, r0
    9244:	4628      	mov	r0, r5
    9246:	47a0      	blx	r4
      return kTfLiteError;
    9248:	2001      	movs	r0, #1
    924a:	e6b8      	b.n	8fbe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x272>
    924c:	00027ac7 	.word	0x00027ac7

00009250 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
    9250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    9254:	680b      	ldr	r3, [r1, #0]
    9256:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    925a:	685e      	ldr	r6, [r3, #4]
    925c:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    925e:	684b      	ldr	r3, [r1, #4]
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
    9260:	ed2d 8b02 	vpush	{d8}
    9264:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    9266:	ea4f 1986 	mov.w	r9, r6, lsl #6
    926a:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    926e:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    9272:	b0ab      	sub	sp, #172	; 0xac
    9274:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
    9276:	4621      	mov	r1, r4
    9278:	4630      	mov	r0, r6
  return &context->tensors[node->outputs->data[index]];
    927a:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
    927e:	f015 f900 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
    9282:	f080 0001 	eor.w	r0, r0, #1
    9286:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
    9288:	f818 0009 	ldrb.w	r0, [r8, r9]
    928c:	1e43      	subs	r3, r0, #1
    928e:	2b08      	cmp	r3, #8
    9290:	f200 8253 	bhi.w	973a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
    9294:	e8df f013 	tbh	[pc, r3, lsl #1]
    9298:	00680009 	.word	0x00680009
    929c:	00b7011a 	.word	0x00b7011a
    92a0:	02510251 	.word	0x02510251
    92a4:	02510251 	.word	0x02510251
    92a8:	01b5      	.short	0x01b5
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
    92aa:	ad1c      	add	r5, sp, #112	; 0x70
    92ac:	4631      	mov	r1, r6
    92ae:	b31f      	cbz	r7, 92f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    92b0:	a810      	add	r0, sp, #64	; 0x40
    92b2:	f00c fb50 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92b6:	4621      	mov	r1, r4
    92b8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    92ba:	6876      	ldr	r6, [r6, #4]
    92bc:	f00c fb4b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92c0:	b104      	cbz	r4, 92c4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
    92c2:	6864      	ldr	r4, [r4, #4]
    92c4:	4651      	mov	r1, sl
    92c6:	4628      	mov	r0, r5
    92c8:	f00c fb45 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    92cc:	f1ba 0f00 	cmp.w	sl, #0
    92d0:	d001      	beq.n	92d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
    92d2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    92d6:	9400      	str	r4, [sp, #0]
    92d8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    92dc:	ab16      	add	r3, sp, #88	; 0x58
    92de:	4632      	mov	r2, r6
    92e0:	a910      	add	r1, sp, #64	; 0x40
    92e2:	a822      	add	r0, sp, #136	; 0x88
    92e4:	f00d fdf0 	bl	16ec8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    92e8:	4628      	mov	r0, r5
    92ea:	f00c faef 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    92ee:	a816      	add	r0, sp, #88	; 0x58
    92f0:	f00c faec 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    92f4:	a810      	add	r0, sp, #64	; 0x40
    92f6:	e0e1      	b.n	94bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
    92f8:	a816      	add	r0, sp, #88	; 0x58
    92fa:	f00c fb2c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    92fe:	4621      	mov	r1, r4
    9300:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9302:	f8d6 8004 	ldr.w	r8, [r6, #4]
    9306:	f00c fb26 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    930a:	b104      	cbz	r4, 930e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    930c:	6864      	ldr	r4, [r4, #4]
    930e:	4651      	mov	r1, sl
    9310:	a822      	add	r0, sp, #136	; 0x88
    9312:	f00c fb20 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9316:	f1ba 0f00 	cmp.w	sl, #0
    931a:	d001      	beq.n	9320 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    931c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9320:	aa22      	add	r2, sp, #136	; 0x88
    9322:	4629      	mov	r1, r5
    9324:	a816      	add	r0, sp, #88	; 0x58
    9326:	f00d fb5a 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    932a:	4641      	mov	r1, r8
  const int64_t flatsize =
    932c:	4606      	mov	r6, r0
    932e:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
    9330:	2200      	movs	r2, #0
    9332:	2300      	movs	r3, #0
    9334:	42b2      	cmp	r2, r6
    9336:	eb73 0007 	sbcs.w	r0, r3, r7
    933a:	f280 80b8 	bge.w	94ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
    933e:	ecb1 7a01 	vldmia	r1!, {s14}
    9342:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs <= rhs;
    9346:	eeb4 7ae7 	vcmpe.f32	s14, s15
    934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_data[i] = F(input1_data[i], input2_data[i]);
    934e:	eb0a 0002 	add.w	r0, sl, r2
  return lhs <= rhs;
    9352:	bf94      	ite	ls
    9354:	f04f 0c01 	movls.w	ip, #1
    9358:	f04f 0c00 	movhi.w	ip, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    935c:	3201      	adds	r2, #1
  return lhs <= rhs;
    935e:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
    9362:	f143 0300 	adc.w	r3, r3, #0
    9366:	e7e5      	b.n	9334 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
    9368:	ad1c      	add	r5, sp, #112	; 0x70
    936a:	4631      	mov	r1, r6
    936c:	b1e7      	cbz	r7, 93a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
    936e:	a810      	add	r0, sp, #64	; 0x40
    9370:	f00c faf1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9374:	4621      	mov	r1, r4
    9376:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9378:	6876      	ldr	r6, [r6, #4]
    937a:	f00c faec 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    937e:	b104      	cbz	r4, 9382 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
    9380:	6864      	ldr	r4, [r4, #4]
    9382:	4651      	mov	r1, sl
    9384:	4628      	mov	r0, r5
    9386:	f00c fae6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    938a:	f1ba 0f00 	cmp.w	sl, #0
    938e:	d001      	beq.n	9394 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
    9390:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9394:	9400      	str	r4, [sp, #0]
    9396:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    939a:	ab16      	add	r3, sp, #88	; 0x58
    939c:	4632      	mov	r2, r6
    939e:	a910      	add	r1, sp, #64	; 0x40
    93a0:	a822      	add	r0, sp, #136	; 0x88
    93a2:	f00e fa0b 	bl	177bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    93a6:	e79f      	b.n	92e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    93a8:	a816      	add	r0, sp, #88	; 0x58
    93aa:	f00c fad4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    93ae:	4621      	mov	r1, r4
    93b0:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    93b2:	6876      	ldr	r6, [r6, #4]
    93b4:	f00c facf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    93b8:	b104      	cbz	r4, 93bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    93ba:	6864      	ldr	r4, [r4, #4]
    93bc:	4651      	mov	r1, sl
    93be:	a822      	add	r0, sp, #136	; 0x88
    93c0:	f00c fac9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    93c4:	f1ba 0f00 	cmp.w	sl, #0
    93c8:	d001      	beq.n	93ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    93ca:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    93ce:	aa22      	add	r2, sp, #136	; 0x88
    93d0:	4629      	mov	r1, r5
    93d2:	a816      	add	r0, sp, #88	; 0x58
    93d4:	f00d fb03 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
    93d8:	2200      	movs	r2, #0
  const int64_t flatsize =
    93da:	4680      	mov	r8, r0
    93dc:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
    93e0:	2300      	movs	r3, #0
    93e2:	4542      	cmp	r2, r8
    93e4:	eb73 0109 	sbcs.w	r1, r3, r9
    93e8:	da61      	bge.n	94ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
    93ea:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    93ee:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    93f2:	4281      	cmp	r1, r0
    93f4:	bfcc      	ite	gt
    93f6:	2100      	movgt	r1, #0
    93f8:	2101      	movle	r1, #1
    93fa:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
    93fe:	3201      	adds	r2, #1
    9400:	f143 0300 	adc.w	r3, r3, #0
    9404:	e7ed      	b.n	93e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
    9406:	ad1c      	add	r5, sp, #112	; 0x70
    9408:	4631      	mov	r1, r6
    940a:	b1e7      	cbz	r7, 9446 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    940c:	a810      	add	r0, sp, #64	; 0x40
    940e:	f00c faa2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9412:	4621      	mov	r1, r4
    9414:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9416:	6876      	ldr	r6, [r6, #4]
    9418:	f00c fa9d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    941c:	b104      	cbz	r4, 9420 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    941e:	6864      	ldr	r4, [r4, #4]
    9420:	4651      	mov	r1, sl
    9422:	4628      	mov	r0, r5
    9424:	f00c fa97 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9428:	f1ba 0f00 	cmp.w	sl, #0
    942c:	d001      	beq.n	9432 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    942e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9432:	9400      	str	r4, [sp, #0]
    9434:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9438:	ab16      	add	r3, sp, #88	; 0x58
    943a:	4632      	mov	r2, r6
    943c:	a910      	add	r1, sp, #64	; 0x40
    943e:	a822      	add	r0, sp, #136	; 0x88
    9440:	f00e fa11 	bl	17866 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9444:	e750      	b.n	92e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9446:	a816      	add	r0, sp, #88	; 0x58
    9448:	f00c fa85 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    944c:	4621      	mov	r1, r4
    944e:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9450:	6876      	ldr	r6, [r6, #4]
    9452:	f00c fa80 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9456:	b104      	cbz	r4, 945a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
    9458:	6864      	ldr	r4, [r4, #4]
    945a:	4651      	mov	r1, sl
    945c:	a822      	add	r0, sp, #136	; 0x88
    945e:	f00c fa7a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9462:	f1ba 0f00 	cmp.w	sl, #0
    9466:	d001      	beq.n	946c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    9468:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    946c:	aa22      	add	r2, sp, #136	; 0x88
    946e:	4629      	mov	r1, r5
    9470:	a816      	add	r0, sp, #88	; 0x58
    9472:	f00d fab4 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
    9476:	3c08      	subs	r4, #8
  const int64_t flatsize =
    9478:	17c1      	asrs	r1, r0, #31
    947a:	f1a6 0c08 	sub.w	ip, r6, #8
  for (int64_t i = 0; i < flatsize; ++i) {
    947e:	2200      	movs	r2, #0
    9480:	2300      	movs	r3, #0
    9482:	4282      	cmp	r2, r0
    9484:	eb73 0601 	sbcs.w	r6, r3, r1
    9488:	da11      	bge.n	94ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
    948a:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
    948e:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
    9492:	45b0      	cmp	r8, r6
    9494:	eb79 0607 	sbcs.w	r6, r9, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
    9498:	eb0a 0e02 	add.w	lr, sl, r2
  return lhs <= rhs;
    949c:	bfac      	ite	ge
    949e:	2601      	movge	r6, #1
    94a0:	2600      	movlt	r6, #0
  for (int64_t i = 0; i < flatsize; ++i) {
    94a2:	3201      	adds	r2, #1
  return lhs <= rhs;
    94a4:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
    94a8:	f143 0300 	adc.w	r3, r3, #0
    94ac:	e7e9      	b.n	9482 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
    94ae:	a822      	add	r0, sp, #136	; 0x88
    94b0:	f00c fa0c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    94b4:	4628      	mov	r0, r5
    94b6:	f00c fa09 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    94ba:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    94bc:	f00c fa06 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    94c0:	2000      	movs	r0, #0
}
    94c2:	b02b      	add	sp, #172	; 0xac
    94c4:	ecbd 8b02 	vpop	{d8}
    94c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
    94cc:	6933      	ldr	r3, [r6, #16]
    94ce:	68f0      	ldr	r0, [r6, #12]
    94d0:	6925      	ldr	r5, [r4, #16]
    94d2:	f1c3 0800 	rsb	r8, r3, #0
    94d6:	f7f7 fbc7 	bl	c68 <__aeabi_f2d>
    94da:	ec41 0b10 	vmov	d0, r0, r1
    94de:	a90d      	add	r1, sp, #52	; 0x34
    94e0:	a80c      	add	r0, sp, #48	; 0x30
    94e2:	f008 f985 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    94e6:	68e0      	ldr	r0, [r4, #12]
    94e8:	f7f7 fbbe 	bl	c68 <__aeabi_f2d>
    94ec:	ec41 0b10 	vmov	d0, r0, r1
    94f0:	a90f      	add	r1, sp, #60	; 0x3c
    94f2:	a80e      	add	r0, sp, #56	; 0x38
    94f4:	f008 f97c 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    94f8:	2308      	movs	r3, #8
    94fa:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    94fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9500:	9324      	str	r3, [sp, #144]	; 0x90
    9502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9504:	426d      	negs	r5, r5
    9506:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    950a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    950c:	9327      	str	r3, [sp, #156]	; 0x9c
    950e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9510:	9328      	str	r3, [sp, #160]	; 0xa0
    9512:	ad1c      	add	r5, sp, #112	; 0x70
    9514:	4631      	mov	r1, r6
    9516:	a810      	add	r0, sp, #64	; 0x40
    9518:	b1df      	cbz	r7, 9552 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x302>
    951a:	f00c fa1c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    951e:	6872      	ldr	r2, [r6, #4]
    9520:	9204      	str	r2, [sp, #16]
    9522:	4621      	mov	r1, r4
    9524:	a816      	add	r0, sp, #88	; 0x58
    9526:	f00c fa16 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    952a:	4651      	mov	r1, sl
    952c:	4628      	mov	r0, r5
    952e:	6864      	ldr	r4, [r4, #4]
    9530:	f00c fa11 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9534:	9a04      	ldr	r2, [sp, #16]
    9536:	f1ba 0f00 	cmp.w	sl, #0
    953a:	d001      	beq.n	9540 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    953c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9540:	9400      	str	r4, [sp, #0]
    9542:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    9546:	ab16      	add	r3, sp, #88	; 0x58
    9548:	a910      	add	r1, sp, #64	; 0x40
    954a:	a822      	add	r0, sp, #136	; 0x88
    954c:	f00e ff5e 	bl	1840c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9550:	e6ca      	b.n	92e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9552:	f00c fa00 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9556:	6873      	ldr	r3, [r6, #4]
    9558:	9304      	str	r3, [sp, #16]
    955a:	4621      	mov	r1, r4
    955c:	a816      	add	r0, sp, #88	; 0x58
    955e:	f00c f9fa 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9562:	6863      	ldr	r3, [r4, #4]
    9564:	9305      	str	r3, [sp, #20]
    9566:	4651      	mov	r1, sl
    9568:	4628      	mov	r0, r5
    956a:	f00c f9f4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    956e:	f1ba 0f00 	cmp.w	sl, #0
    9572:	d001      	beq.n	9578 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x328>
    9574:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    9578:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    957c:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    957e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9580:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    9584:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9588:	aa1c      	add	r2, sp, #112	; 0x70
    958a:	a916      	add	r1, sp, #88	; 0x58
    958c:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    958e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    9590:	f00d fa25 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    9594:	4602      	mov	r2, r0
    9596:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    9598:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    959c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    95a0:	f04f 0800 	mov.w	r8, #0
    95a4:	f04f 0900 	mov.w	r9, #0
    95a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    95ac:	4590      	cmp	r8, r2
    95ae:	eb79 0303 	sbcs.w	r3, r9, r3
    95b2:	f280 80c0 	bge.w	9736 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    95b6:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    95b8:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    95ba:	f812 5008 	ldrb.w	r5, [r2, r8]
    95be:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    95c0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    95c4:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    95c6:	9a04      	ldr	r2, [sp, #16]
    95c8:	f812 0008 	ldrb.w	r0, [r2, r8]
    95cc:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95ce:	ee18 1a10 	vmov	r1, s16
    95d2:	465a      	mov	r2, fp
    95d4:	40b0      	lsls	r0, r6
    95d6:	f7fd fde7 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    95da:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95dc:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    95de:	4622      	mov	r2, r4
    95e0:	4639      	mov	r1, r7
    95e2:	4628      	mov	r0, r5
    95e4:	f7fd fde0 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
    95e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95ea:	4283      	cmp	r3, r0
    95ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    95ee:	bfcc      	ite	gt
    95f0:	2000      	movgt	r0, #0
    95f2:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    95f4:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
    95f8:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    95fc:	f149 0900 	adc.w	r9, r9, #0
    9600:	e7d2      	b.n	95a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x358>
    9602:	6933      	ldr	r3, [r6, #16]
    9604:	68f0      	ldr	r0, [r6, #12]
    9606:	6925      	ldr	r5, [r4, #16]
    9608:	f1c3 0800 	rsb	r8, r3, #0
    960c:	f7f7 fb2c 	bl	c68 <__aeabi_f2d>
    9610:	ec41 0b10 	vmov	d0, r0, r1
    9614:	a90d      	add	r1, sp, #52	; 0x34
    9616:	a80c      	add	r0, sp, #48	; 0x30
    9618:	f008 f8ea 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    961c:	68e0      	ldr	r0, [r4, #12]
    961e:	f7f7 fb23 	bl	c68 <__aeabi_f2d>
    9622:	ec41 0b10 	vmov	d0, r0, r1
    9626:	a90f      	add	r1, sp, #60	; 0x3c
    9628:	a80e      	add	r0, sp, #56	; 0x38
    962a:	f008 f8e1 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    962e:	2308      	movs	r3, #8
    9630:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    9634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9636:	9324      	str	r3, [sp, #144]	; 0x90
    9638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    963a:	426d      	negs	r5, r5
    963c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
    9640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9642:	9327      	str	r3, [sp, #156]	; 0x9c
    9644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9646:	9328      	str	r3, [sp, #160]	; 0xa0
    9648:	ad1c      	add	r5, sp, #112	; 0x70
    964a:	4631      	mov	r1, r6
    964c:	a810      	add	r0, sp, #64	; 0x40
    964e:	b1df      	cbz	r7, 9688 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    9650:	f00c f981 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9654:	6872      	ldr	r2, [r6, #4]
    9656:	9204      	str	r2, [sp, #16]
    9658:	4621      	mov	r1, r4
    965a:	a816      	add	r0, sp, #88	; 0x58
    965c:	f00c f97b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9660:	4651      	mov	r1, sl
    9662:	4628      	mov	r0, r5
    9664:	6864      	ldr	r4, [r4, #4]
    9666:	f00c f976 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    966a:	9a04      	ldr	r2, [sp, #16]
    966c:	f1ba 0f00 	cmp.w	sl, #0
    9670:	d001      	beq.n	9676 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x426>
    9672:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
    9676:	9400      	str	r4, [sp, #0]
    9678:	e9cd 5a01 	strd	r5, sl, [sp, #4]
    967c:	ab16      	add	r3, sp, #88	; 0x58
    967e:	a910      	add	r1, sp, #64	; 0x40
    9680:	a822      	add	r0, sp, #136	; 0x88
    9682:	f00e ff4f 	bl	18524 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
    9686:	e62f      	b.n	92e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
    9688:	f00c f965 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    968c:	6873      	ldr	r3, [r6, #4]
    968e:	9304      	str	r3, [sp, #16]
    9690:	4621      	mov	r1, r4
    9692:	a816      	add	r0, sp, #88	; 0x58
    9694:	f00c f95f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9698:	6863      	ldr	r3, [r4, #4]
    969a:	9305      	str	r3, [sp, #20]
    969c:	4651      	mov	r1, sl
    969e:	4628      	mov	r0, r5
    96a0:	f00c f959 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    96a4:	f1ba 0f00 	cmp.w	sl, #0
    96a8:	d001      	beq.n	96ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    96aa:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
    96ae:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
    96b2:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
    96b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    96b6:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
    96ba:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    96be:	aa1c      	add	r2, sp, #112	; 0x70
    96c0:	a916      	add	r1, sp, #88	; 0x58
    96c2:	a810      	add	r0, sp, #64	; 0x40
  int32 input2_offset = op_params.input2_offset;
    96c4:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    96c6:	f00d f98a 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
    96ca:	4602      	mov	r2, r0
    96cc:	17c3      	asrs	r3, r0, #31
  int input2_shift = op_params.input2_shift;
    96ce:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  const int64_t flatsize =
    96d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
    96d6:	f04f 0800 	mov.w	r8, #0
    96da:	f04f 0900 	mov.w	r9, #0
    96de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    96e2:	4590      	cmp	r8, r2
    96e4:	eb79 0303 	sbcs.w	r3, r9, r3
    96e8:	da25      	bge.n	9736 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32 input2_val = input2_offset + input2_data[i];
    96ea:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
    96ec:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
    96ee:	f912 5008 	ldrsb.w	r5, [r2, r8]
    96f2:	9a07      	ldr	r2, [sp, #28]
    const int32 input1_val = input1_offset + input1_data[i];
    96f4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    const int32 input2_val = input2_offset + input2_data[i];
    96f8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
    96fa:	9a04      	ldr	r2, [sp, #16]
    96fc:	f912 0008 	ldrsb.w	r0, [r2, r8]
    9700:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    9702:	ee18 1a10 	vmov	r1, s16
    9706:	465a      	mov	r2, fp
    9708:	40b0      	lsls	r0, r6
    970a:	f7fd fd4d 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
    970e:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    9710:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
    9712:	4622      	mov	r2, r4
    9714:	4639      	mov	r1, r7
    9716:	4628      	mov	r0, r5
    9718:	f7fd fd46 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
    971c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    971e:	4283      	cmp	r3, r0
    9720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9722:	bfcc      	ite	gt
    9724:	2000      	movgt	r0, #0
    9726:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
    9728:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
    972c:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
    9730:	f149 0900 	adc.w	r9, r9, #0
    9734:	e7d3      	b.n	96de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    9736:	a81c      	add	r0, sp, #112	; 0x70
    9738:	e5d7      	b.n	92ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    973a:	696c      	ldr	r4, [r5, #20]
    973c:	f7f7 f8b9 	bl	8b2 <TfLiteTypeGetName>
    9740:	f818 3009 	ldrb.w	r3, [r8, r9]
    9744:	4902      	ldr	r1, [pc, #8]	; (9750 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x500>)
    9746:	4602      	mov	r2, r0
    9748:	4628      	mov	r0, r5
    974a:	47a0      	blx	r4
      return kTfLiteError;
    974c:	2001      	movs	r0, #1
    974e:	e6b8      	b.n	94c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
    9750:	00027ac7 	.word	0x00027ac7

00009754 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace concatenation {

constexpr int kMaxInputNum = 10;  // Maximum number of input tensors
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9754:	b5f0      	push	{r4, r5, r6, r7, lr}

  TfLiteType input_type = GetInput(context, node, 0)->type;
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;

  // Check activation and input type
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
    9756:	694b      	ldr	r3, [r1, #20]
    9758:	791b      	ldrb	r3, [r3, #4]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    975a:	b085      	sub	sp, #20
    975c:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
    975e:	b17b      	cbz	r3, 9780 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
    9760:	2200      	movs	r2, #0
    9762:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9766:	4b28      	ldr	r3, [pc, #160]	; (9808 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
    9768:	9301      	str	r3, [sp, #4]
    976a:	4b28      	ldr	r3, [pc, #160]	; (980c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
    976c:	9300      	str	r3, [sp, #0]
    976e:	6944      	ldr	r4, [r0, #20]
    9770:	4a27      	ldr	r2, [pc, #156]	; (9810 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    9772:	4928      	ldr	r1, [pc, #160]	; (9814 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
    9774:	232c      	movs	r3, #44	; 0x2c
    9776:	47a0      	blx	r4
  TF_LITE_ENSURE(context,
    9778:	2301      	movs	r3, #1
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    977a:	4618      	mov	r0, r3
    977c:	b005      	add	sp, #20
    977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteType input_type = GetInput(context, node, 0)->type;
    9780:	680a      	ldr	r2, [r1, #0]
    9782:	6886      	ldr	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    9784:	6855      	ldr	r5, [r2, #4]
    9786:	01ad      	lsls	r5, r5, #6
    9788:	5d75      	ldrb	r5, [r6, r5]
  TF_LITE_ENSURE(context,
    978a:	1e6f      	subs	r7, r5, #1
    978c:	2f03      	cmp	r7, #3
    978e:	d909      	bls.n	97a4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
    9790:	2d09      	cmp	r5, #9
    9792:	d007      	beq.n	97a4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
    9794:	4b20      	ldr	r3, [pc, #128]	; (9818 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
    9796:	9300      	str	r3, [sp, #0]
    9798:	6944      	ldr	r4, [r0, #20]
    979a:	4a1d      	ldr	r2, [pc, #116]	; (9810 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    979c:	491f      	ldr	r1, [pc, #124]	; (981c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
    979e:	232d      	movs	r3, #45	; 0x2d
    97a0:	47a0      	blx	r4
    97a2:	e7e9      	b.n	9778 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return &context->tensors[node->outputs->data[index]];
    97a4:	6849      	ldr	r1, [r1, #4]
    97a6:	6849      	ldr	r1, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    97a8:	0189      	lsls	r1, r1, #6
    97aa:	5c71      	ldrb	r1, [r6, r1]
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
    97ac:	428d      	cmp	r5, r1
    97ae:	d00c      	beq.n	97ca <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    97b0:	e9cd 1502 	strd	r1, r5, [sp, #8]
    97b4:	4b1a      	ldr	r3, [pc, #104]	; (9820 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
    97b6:	9301      	str	r3, [sp, #4]
    97b8:	4b1a      	ldr	r3, [pc, #104]	; (9824 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
    97ba:	9300      	str	r3, [sp, #0]
    97bc:	6965      	ldr	r5, [r4, #20]
    97be:	4a14      	ldr	r2, [pc, #80]	; (9810 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    97c0:	4914      	ldr	r1, [pc, #80]	; (9814 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
    97c2:	2333      	movs	r3, #51	; 0x33
    97c4:	4620      	mov	r0, r4
    97c6:	47a8      	blx	r5
    97c8:	e7d6      	b.n	9778 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    97ca:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
    97cc:	2d0a      	cmp	r5, #10
    97ce:	dc10      	bgt.n	97f2 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x9e>
    97d0:	1d11      	adds	r1, r2, #4
  for (int i = 0; i < num_inputs; ++i) {
    97d2:	2000      	movs	r0, #0
    97d4:	42a8      	cmp	r0, r5
    97d6:	dad0      	bge.n	977a <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  return &context->tensors[node->inputs->data[index]];
    97d8:	f851 2b04 	ldr.w	r2, [r1], #4
    int num_dimensions = NumDimensions(input);
    97dc:	eb06 1282 	add.w	r2, r6, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    97e0:	6892      	ldr	r2, [r2, #8]
    97e2:	6812      	ldr	r2, [r2, #0]
    if (num_dimensions > 4) {
    97e4:	2a04      	cmp	r2, #4
    97e6:	dd0d      	ble.n	9804 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_KERNEL_LOG(
    97e8:	6963      	ldr	r3, [r4, #20]
    97ea:	490f      	ldr	r1, [pc, #60]	; (9828 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
    97ec:	4620      	mov	r0, r4
    97ee:	4798      	blx	r3
      return kTfLiteError;
    97f0:	e7c2      	b.n	9778 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
    97f2:	4b0e      	ldr	r3, [pc, #56]	; (982c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
    97f4:	9300      	str	r3, [sp, #0]
    97f6:	6965      	ldr	r5, [r4, #20]
    97f8:	4a05      	ldr	r2, [pc, #20]	; (9810 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
    97fa:	4908      	ldr	r1, [pc, #32]	; (981c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
    97fc:	2337      	movs	r3, #55	; 0x37
    97fe:	4620      	mov	r0, r4
    9800:	47a8      	blx	r5
    9802:	e7b9      	b.n	9778 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  for (int i = 0; i < num_inputs; ++i) {
    9804:	3001      	adds	r0, #1
    9806:	e7e5      	b.n	97d4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    9808:	00027c71 	.word	0x00027c71
    980c:	00027c80 	.word	0x00027c80
    9810:	00027c42 	.word	0x00027c42
    9814:	00027b73 	.word	0x00027b73
    9818:	00027c93 	.word	0x00027c93
    981c:	000272d2 	.word	0x000272d2
    9820:	00027d27 	.word	0x00027d27
    9824:	00027d32 	.word	0x00027d32
    9828:	00027d59 	.word	0x00027d59
    982c:	00027d3e 	.word	0x00027d3e

00009830 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    9830:	4800      	ldr	r0, [pc, #0]	; (9834 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv+0x4>)
    9832:	4770      	bx	lr
    9834:	200001e8 	.word	0x200001e8

00009838 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9838:	b538      	push	{r3, r4, r5, lr}
  return &context->tensors[node->outputs->data[index]];
    983a:	684b      	ldr	r3, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    983c:	6882      	ldr	r2, [r0, #8]
    983e:	685b      	ldr	r3, [r3, #4]
    9840:	019b      	lsls	r3, r3, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9842:	4604      	mov	r4, r0
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
    9844:	5cd0      	ldrb	r0, [r2, r3]
  switch (output_type) {  // Already know in/outtypes are same.
    9846:	1e43      	subs	r3, r0, #1
    9848:	2b08      	cmp	r3, #8
    984a:	d81b      	bhi.n	9884 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    984c:	e8df f003 	tbb	[pc, r3]
    9850:	160e0a05 	.word	0x160e0a05
    9854:	1a1a1a1a 	.word	0x1a1a1a1a
    9858:	12          	.byte	0x12
    9859:	00          	.byte	0x00
      EvalUnquantized<float>(context, node);
    985a:	4620      	mov	r0, r4
    985c:	f00f f91e 	bl	18a9c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
  return kTfLiteOk;
    9860:	2000      	movs	r0, #0
}
    9862:	bd38      	pop	{r3, r4, r5, pc}
      EvalUnquantized<int32_t>(context, node);
    9864:	4620      	mov	r0, r4
    9866:	f00f f9fc 	bl	18c62 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>
    986a:	e7f9      	b.n	9860 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalQuantizedUInt8(context, node);
    986c:	4620      	mov	r0, r4
    986e:	f00f f817 	bl	188a0 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>
      break;
    9872:	e7f5      	b.n	9860 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int8_t>(context, node);
    9874:	4620      	mov	r0, r4
    9876:	f00f fad5 	bl	18e24 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
      break;
    987a:	e7f1      	b.n	9860 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int64_t>(context, node);
    987c:	4620      	mov	r0, r4
    987e:	f00f fbb4 	bl	18fea <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
      break;
    9882:	e7ed      	b.n	9860 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      TF_LITE_KERNEL_LOG(
    9884:	6965      	ldr	r5, [r4, #20]
    9886:	f7f7 f814 	bl	8b2 <TfLiteTypeGetName>
    988a:	4903      	ldr	r1, [pc, #12]	; (9898 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x60>)
    988c:	4602      	mov	r2, r0
    988e:	4620      	mov	r0, r4
    9890:	47a8      	blx	r5
      return kTfLiteError;
    9892:	2001      	movs	r0, #1
    9894:	e7e5      	b.n	9862 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
    9896:	bf00      	nop
    9898:	00027db1 	.word	0x00027db1

0000989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
    989c:	b570      	push	{r4, r5, r6, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    989e:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    98a2:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    98a4:	fa00 f004 	lsl.w	r0, r0, r4
  int right_shift = shift > 0 ? 0 : -shift;
    98a8:	bfd4      	ite	le
    98aa:	4252      	negle	r2, r2
    98ac:	2200      	movgt	r2, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    98ae:	4288      	cmp	r0, r1
    98b0:	d127      	bne.n	9902 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x66>
    98b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    98b6:	425e      	negs	r6, r3
    98b8:	415e      	adcs	r6, r3
  std::int64_t ab_64 = a_64 * b_64;
    98ba:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    98be:	2c00      	cmp	r4, #0
    98c0:	f175 0300 	sbcs.w	r3, r5, #0
    98c4:	4b1c      	ldr	r3, [pc, #112]	; (9938 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x9c>)
    98c6:	bfa8      	it	ge
    98c8:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    98cc:	b9de      	cbnz	r6, 9906 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x6a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    98ce:	18e4      	adds	r4, r4, r3
    98d0:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
    98d4:	2c00      	cmp	r4, #0
    98d6:	f175 0300 	sbcs.w	r3, r5, #0
    98da:	da06      	bge.n	98ea <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x4e>
    98dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    98e0:	18e4      	adds	r4, r4, r3
    98e2:	f04f 0300 	mov.w	r3, #0
    98e6:	eb43 0505 	adc.w	r5, r3, r5
    98ea:	0fe1      	lsrs	r1, r4, #31
    98ec:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  assert(exponent >= 0);
    98f0:	2a00      	cmp	r2, #0
    98f2:	da0b      	bge.n	990c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x70>
    98f4:	4b11      	ldr	r3, [pc, #68]	; (993c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa0>)
    98f6:	4a12      	ldr	r2, [pc, #72]	; (9940 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
    98f8:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    98fc:	4811      	ldr	r0, [pc, #68]	; (9944 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa8>)
    98fe:	f00a fd9c 	bl	1443a <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    9902:	2600      	movs	r6, #0
    9904:	e7d9      	b.n	98ba <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x1e>
    9906:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    990a:	e7f1      	b.n	98f0 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x54>
  assert(exponent <= 31);
    990c:	2a1f      	cmp	r2, #31
    990e:	dd04      	ble.n	991a <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x7e>
    9910:	4b0d      	ldr	r3, [pc, #52]	; (9948 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xac>)
    9912:	4a0b      	ldr	r2, [pc, #44]	; (9940 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
    9914:	f240 1167 	movw	r1, #359	; 0x167
    9918:	e7f0      	b.n	98fc <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x60>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    991a:	2301      	movs	r3, #1
    991c:	4093      	lsls	r3, r2
    991e:	3b01      	subs	r3, #1
  return a & b;
    9920:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
    9924:	105b      	asrs	r3, r3, #1
  return a + b;
    9926:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
    992a:	fa41 f202 	asr.w	r2, r1, r2
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
    992e:	4298      	cmp	r0, r3
    9930:	bfd4      	ite	le
    9932:	4610      	movle	r0, r2
    9934:	1c50      	addgt	r0, r2, #1
    9936:	bd70      	pop	{r4, r5, r6, pc}
    9938:	c0000001 	.word	0xc0000001
    993c:	00027a09 	.word	0x00027a09
    9940:	00027a17 	.word	0x00027a17
    9944:	00027a6c 	.word	0x00027a6c
    9948:	00027ab8 	.word	0x00027ab8

0000994c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
    994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9950:	ed2d 8b04 	vpush	{d8-d9}
    9954:	b09b      	sub	sp, #108	; 0x6c
    9956:	461c      	mov	r4, r3
  const int stride_width = params.stride_width;
    9958:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    995c:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_height = params.stride_height;
    995e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    9962:	930b      	str	r3, [sp, #44]	; 0x2c
  const int dilation_width_factor = params.dilation_width_factor;
    9964:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    9968:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_height_factor = params.dilation_height_factor;
    996a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    996e:	930d      	str	r3, [sp, #52]	; 0x34
  const int pad_width = params.padding_values.width;
    9970:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    9974:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
    9976:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    997a:	9310      	str	r3, [sp, #64]	; 0x40
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    997c:	680b      	ldr	r3, [r1, #0]
                 float* im2col_data) {
    997e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const float output_activation_min = params.float_activation_min;
    9980:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    9984:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
                 float* im2col_data) {
    9988:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    998a:	2b04      	cmp	r3, #4
                 float* im2col_data) {
    998c:	4688      	mov	r8, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    998e:	d001      	beq.n	9994 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48>
    9990:	f014 fe30 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    9994:	6823      	ldr	r3, [r4, #0]
    9996:	2b04      	cmp	r3, #4
    9998:	d1fa      	bne.n	9990 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    999a:	6833      	ldr	r3, [r6, #0]
    999c:	2b04      	cmp	r3, #4
    999e:	d1f7      	bne.n	9990 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    99a0:	2300      	movs	r3, #0
    99a2:	4619      	mov	r1, r3
    99a4:	4632      	mov	r2, r6
    99a6:	4640      	mov	r0, r8
    99a8:	f00e fe48 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    99ac:	2303      	movs	r3, #3
    99ae:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    99b0:	9011      	str	r0, [sp, #68]	; 0x44
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    99b2:	4622      	mov	r2, r4
    99b4:	4640      	mov	r0, r8
    99b6:	f00e fe41 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    99ba:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    99bc:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    99be:	4632      	mov	r2, r6
    99c0:	2100      	movs	r1, #0
    99c2:	4620      	mov	r0, r4
    99c4:	f00e fe3a 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    99c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    99ca:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
    99cc:	b12b      	cbz	r3, 99da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    99ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
    99d0:	f00c f80c 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    99d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99d6:	4298      	cmp	r0, r3
    99d8:	d1da      	bne.n	9990 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  }
  const int input_height = input_shape.Dims(1);
    99da:	2101      	movs	r1, #1
    99dc:	4640      	mov	r0, r8
    99de:	f00b ff80 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    99e2:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    99e4:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
    99e6:	4640      	mov	r0, r8
    99e8:	f00b ff7b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    99ec:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    99ee:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
    99f0:	4620      	mov	r0, r4
    99f2:	f00b ff76 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    99f6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    99f8:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
    99fa:	4620      	mov	r0, r4
    99fc:	f00b ff71 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    9a00:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    9a02:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
    9a04:	4630      	mov	r0, r6
    9a06:	f00b ff6c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    9a0a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    9a0c:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
    9a0e:	4630      	mov	r0, r6
    9a10:	f00b ff67 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
                  total += (input_value * filter_value);
                }
              }
            }
          }
          float bias_value = 0.0f;
    9a14:	eddf 9a55 	vldr	s19, [pc, #340]	; 9b6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
  const int output_width = output_shape.Dims(2);
    9a18:	9018      	str	r0, [sp, #96]	; 0x60
  for (int batch = 0; batch < batches; ++batch) {
    9a1a:	f04f 0900 	mov.w	r9, #0
    9a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9a20:	4599      	cmp	r9, r3
    9a22:	f280 809e 	bge.w	9b62 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x216>
    9a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a28:	425b      	negs	r3, r3
    9a2a:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    9a2c:	2300      	movs	r3, #0
    9a2e:	9304      	str	r3, [sp, #16]
    9a30:	9b04      	ldr	r3, [sp, #16]
    9a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a34:	4293      	cmp	r3, r2
    9a36:	f280 8091 	bge.w	9b5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x210>
    9a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9a3c:	425b      	negs	r3, r3
    9a3e:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    9a40:	2300      	movs	r3, #0
    9a42:	9305      	str	r3, [sp, #20]
    9a44:	9b05      	ldr	r3, [sp, #20]
    9a46:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9a48:	4293      	cmp	r3, r2
    9a4a:	da7f      	bge.n	9b4c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9a4c:	2500      	movs	r5, #0
    9a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a50:	429d      	cmp	r5, r3
    9a52:	da73      	bge.n	9b3c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9a54:	2300      	movs	r3, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9a56:	f8dd a020 	ldr.w	sl, [sp, #32]
          float total = 0.f;
    9a5a:	ed9f 8a44 	vldr	s16, [pc, #272]	; 9b6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9a5e:	9306      	str	r3, [sp, #24]
    9a60:	9b06      	ldr	r3, [sp, #24]
    9a62:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9a64:	4293      	cmp	r3, r2
    9a66:	da42      	bge.n	9aee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a2>
                const int in_y =
    9a68:	9f07      	ldr	r7, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    9a6a:	f04f 0b00 	mov.w	fp, #0
    9a6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a70:	459b      	cmp	fp, r3
    9a72:	da36      	bge.n	9ae2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    9a74:	2300      	movs	r3, #0
    9a76:	9303      	str	r3, [sp, #12]
    9a78:	9b03      	ldr	r3, [sp, #12]
    9a7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9a7c:	4293      	cmp	r3, r2
    9a7e:	da2b      	bge.n	9ad8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18c>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    9a80:	2f00      	cmp	r7, #0
    9a82:	db26      	blt.n	9ad2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9a86:	42bb      	cmp	r3, r7
    9a88:	dd23      	ble.n	9ad2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a8a:	f1ba 0f00 	cmp.w	sl, #0
    9a8e:	db20      	blt.n	9ad2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
    9a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9a92:	4553      	cmp	r3, sl
    9a94:	dd1d      	ble.n	9ad2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
                  float input_value = input_data[Offset(
    9a96:	9b03      	ldr	r3, [sp, #12]
    9a98:	9300      	str	r3, [sp, #0]
    9a9a:	4652      	mov	r2, sl
    9a9c:	463b      	mov	r3, r7
    9a9e:	4649      	mov	r1, r9
    9aa0:	4640      	mov	r0, r8
    9aa2:	f00b ffe0 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
    9aa6:	9b03      	ldr	r3, [sp, #12]
    9aa8:	9a06      	ldr	r2, [sp, #24]
                  float input_value = input_data[Offset(
    9aaa:	900e      	str	r0, [sp, #56]	; 0x38
                      filter_data[Offset(filter_shape, out_channel, filter_y,
    9aac:	9300      	str	r3, [sp, #0]
    9aae:	4629      	mov	r1, r5
    9ab0:	465b      	mov	r3, fp
    9ab2:	4620      	mov	r0, r4
    9ab4:	f00b ffd7 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
    9ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9aba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9abc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
    9ac0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
    9ac2:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
    9ac6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
    9aca:	edd0 7a00 	vldr	s15, [r0]
    9ace:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    9ad2:	9b03      	ldr	r3, [sp, #12]
    9ad4:	3301      	adds	r3, #1
    9ad6:	e7ce      	b.n	9a76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    9ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ada:	f10b 0b01 	add.w	fp, fp, #1
    9ade:	441f      	add	r7, r3
    9ae0:	e7c5      	b.n	9a6e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    9ae2:	9b06      	ldr	r3, [sp, #24]
    9ae4:	3301      	adds	r3, #1
    9ae6:	9306      	str	r3, [sp, #24]
    9ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9aea:	449a      	add	sl, r3
    9aec:	e7b8      	b.n	9a60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
          if (bias_data) {
    9aee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    9af0:	b30b      	cbz	r3, 9b36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ea>
            bias_value = bias_data[out_channel];
    9af2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9af6:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    9afa:	9500      	str	r5, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
    9afc:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    9b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b04:	4649      	mov	r1, r9
    9b06:	4630      	mov	r0, r6
    9b08:	f00b ffad 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    9b0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
    9b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b14:	bfb8      	it	lt
    9b16:	eeb0 8a68 	vmovlt.f32	s16, s17
    9b1a:	eeb4 8ac9 	vcmpe.f32	s16, s18
    9b1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9b28:	bf88      	it	hi
    9b2a:	eeb0 8a49 	vmovhi.f32	s16, s18
    9b2e:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    9b32:	3501      	adds	r5, #1
    9b34:	e78b      	b.n	9a4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
    9b36:	eef0 7a69 	vmov.f32	s15, s19
    9b3a:	e7de      	b.n	9afa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ae>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    9b3c:	9b05      	ldr	r3, [sp, #20]
    9b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b40:	3301      	adds	r3, #1
    9b42:	9305      	str	r3, [sp, #20]
    9b44:	9b07      	ldr	r3, [sp, #28]
    9b46:	4413      	add	r3, r2
    9b48:	9307      	str	r3, [sp, #28]
    9b4a:	e77b      	b.n	9a44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    9b4c:	9b04      	ldr	r3, [sp, #16]
    9b4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9b50:	3301      	adds	r3, #1
    9b52:	9304      	str	r3, [sp, #16]
    9b54:	9b08      	ldr	r3, [sp, #32]
    9b56:	4413      	add	r3, r2
    9b58:	9308      	str	r3, [sp, #32]
    9b5a:	e769      	b.n	9a30 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
    9b5c:	f109 0901 	add.w	r9, r9, #1
    9b60:	e75d      	b.n	9a1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd2>
                                           output_activation_max);
        }
      }
    }
  }
}
    9b62:	b01b      	add	sp, #108	; 0x6c
    9b64:	ecbd 8b04 	vpop	{d8-d9}
    9b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b6c:	00000000 	.word	0x00000000

00009b70 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
    9b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool has_bias = node->inputs->size == 3;
    9b74:	f8d1 8000 	ldr.w	r8, [r1]
                             const TfLiteType data_type, OpData* data) {
    9b78:	b091      	sub	sp, #68	; 0x44
    9b7a:	461f      	mov	r7, r3
  bool has_bias = node->inputs->size == 3;
    9b7c:	f8d8 3000 	ldr.w	r3, [r8]
    9b80:	930b      	str	r3, [sp, #44]	; 0x2c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    9b82:	3b02      	subs	r3, #2
    9b84:	2b01      	cmp	r3, #1
                             const TfLiteType data_type, OpData* data) {
    9b86:	9c20      	ldr	r4, [sp, #128]	; 0x80
    9b88:	4606      	mov	r6, r0
    9b8a:	4615      	mov	r5, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    9b8c:	d90a      	bls.n	9ba4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
    9b8e:	4b49      	ldr	r3, [pc, #292]	; (9cb4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>)
    9b90:	9300      	str	r3, [sp, #0]
    9b92:	6944      	ldr	r4, [r0, #20]
    9b94:	4a48      	ldr	r2, [pc, #288]	; (9cb8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
    9b96:	4949      	ldr	r1, [pc, #292]	; (9cbc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>)
    9b98:	234f      	movs	r3, #79	; 0x4f
    9b9a:	47a0      	blx	r4
    9b9c:	2001      	movs	r0, #1
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
}
    9b9e:	b011      	add	sp, #68	; 0x44
    9ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    9ba4:	684b      	ldr	r3, [r1, #4]
    9ba6:	930c      	str	r3, [sp, #48]	; 0x30
    9ba8:	681b      	ldr	r3, [r3, #0]
    9baa:	2b01      	cmp	r3, #1
    9bac:	d00c      	beq.n	9bc8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x58>
    9bae:	2401      	movs	r4, #1
    9bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    9bb4:	4b42      	ldr	r3, [pc, #264]	; (9cc0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>)
    9bb6:	9301      	str	r3, [sp, #4]
    9bb8:	4b42      	ldr	r3, [pc, #264]	; (9cc4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
    9bba:	9300      	str	r3, [sp, #0]
    9bbc:	6945      	ldr	r5, [r0, #20]
    9bbe:	4a3e      	ldr	r2, [pc, #248]	; (9cb8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
    9bc0:	4941      	ldr	r1, [pc, #260]	; (9cc8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
    9bc2:	2350      	movs	r3, #80	; 0x50
    9bc4:	47a8      	blx	r5
    9bc6:	e7e9      	b.n	9b9c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2c>
      params->stride_height, params->stride_width,
    9bc8:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]
  auto padding = params->padding;
    9bcc:	f892 b000 	ldrb.w	fp, [r2]
      params->dilation_height_factor, params->dilation_width_factor, height,
    9bd0:	6953      	ldr	r3, [r2, #20]
    9bd2:	930d      	str	r3, [sp, #52]	; 0x34
    9bd4:	6913      	ldr	r3, [r2, #16]
    9bd6:	930e      	str	r3, [sp, #56]	; 0x38

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    9bd8:	4639      	mov	r1, r7
    9bda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9bdc:	9300      	str	r3, [sp, #0]
    9bde:	4658      	mov	r0, fp
    9be0:	464b      	mov	r3, r9
    9be2:	f00f fc8a 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    9be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9be8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9bea:	991a      	ldr	r1, [sp, #104]	; 0x68
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    9bec:	900f      	str	r0, [sp, #60]	; 0x3c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    9bee:	9300      	str	r3, [sp, #0]
    9bf0:	4658      	mov	r0, fp
    9bf2:	4653      	mov	r3, sl
    9bf4:	f00f fc81 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9bf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  int total_padding =
    9bfa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9bfc:	990d      	ldr	r1, [sp, #52]	; 0x34
    9bfe:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9c02:	3b01      	subs	r3, #1
  int total_padding =
    9c04:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    9c08:	3801      	subs	r0, #1
  int total_padding =
    9c0a:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    9c0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9c10:	1e5a      	subs	r2, r3, #1
  int total_padding =
    9c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c14:	f1c7 0701 	rsb	r7, r7, #1
    9c18:	fb03 7702 	mla	r7, r3, r2, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
    9c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c1e:	1e58      	subs	r0, r3, #1
  int total_padding =
    9c20:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    9c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    9c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    9c2c:	ea4f 0369 	mov.w	r3, r9, asr #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    9c30:	6023      	str	r3, [r4, #0]
    9c32:	ea4f 036a 	mov.w	r3, sl, asr #1
    9c36:	6063      	str	r3, [r4, #4]
  if (data_type != kTfLiteFloat32) {
    9c38:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
  *offset = total_padding % 2;
    9c3c:	f009 0701 	and.w	r7, r9, #1
    9c40:	f00a 0001 	and.w	r0, sl, #1
    9c44:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    9c46:	60a7      	str	r7, [r4, #8]
    9c48:	60e0      	str	r0, [r4, #12]
  if (data_type != kTfLiteFloat32) {
    9c4a:	d030      	beq.n	9cae <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13e>
  const bool use_tensor = index < node->inputs->size &&
    9c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9c4e:	68b0      	ldr	r0, [r6, #8]
  return &context->tensors[node->inputs->data[index]];
    9c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9c54:	f8d8 2008 	ldr.w	r2, [r8, #8]
  const bool use_tensor = index < node->inputs->size &&
    9c58:	2b03      	cmp	r3, #3
  return &context->tensors[node->inputs->data[index]];
    9c5a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    9c5e:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9c62:	d122      	bne.n	9caa <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    9c64:	f8d8 300c 	ldr.w	r3, [r8, #12]
  const bool use_tensor = index < node->inputs->size &&
    9c68:	1c5f      	adds	r7, r3, #1
    9c6a:	d01e      	beq.n	9caa <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
    return &context->tensors[node->inputs->data[index]];
    9c6c:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    9c70:	6897      	ldr	r7, [r2, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    9c72:	687f      	ldr	r7, [r7, #4]
    9c74:	9708      	str	r7, [sp, #32]
    9c76:	69e7      	ldr	r7, [r4, #28]
    9c78:	9707      	str	r7, [sp, #28]
    9c7a:	69a7      	ldr	r7, [r4, #24]
    9c7c:	9706      	str	r7, [sp, #24]
    9c7e:	f104 0724 	add.w	r7, r4, #36	; 0x24
    9c82:	9705      	str	r7, [sp, #20]
    9c84:	f104 0720 	add.w	r7, r4, #32
    9c88:	9704      	str	r7, [sp, #16]
    9c8a:	f104 0714 	add.w	r7, r4, #20
    9c8e:	3410      	adds	r4, #16
    9c90:	9402      	str	r4, [sp, #8]
    9c92:	350c      	adds	r5, #12
  return &context->tensors[node->outputs->data[index]];
    9c94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9c96:	9703      	str	r7, [sp, #12]
    9c98:	9501      	str	r5, [sp, #4]
    9c9a:	6864      	ldr	r4, [r4, #4]
    9c9c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
    9ca0:	9000      	str	r0, [sp, #0]
    9ca2:	4630      	mov	r0, r6
    9ca4:	f007 fe5c 	bl	11960 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    9ca8:	e779      	b.n	9b9e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
  return nullptr;
    9caa:	2300      	movs	r3, #0
    9cac:	e7e0      	b.n	9c70 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x100>
  return kTfLiteOk;
    9cae:	2000      	movs	r0, #0
    9cb0:	e775      	b.n	9b9e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
    9cb2:	bf00      	nop
    9cb4:	00027e0e 	.word	0x00027e0e
    9cb8:	00027de8 	.word	0x00027de8
    9cbc:	000272d2 	.word	0x000272d2
    9cc0:	0002880d 	.word	0x0002880d
    9cc4:	00027e32 	.word	0x00027e32
    9cc8:	00027b73 	.word	0x00027b73

00009ccc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    9cd0:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9cd2:	b091      	sub	sp, #68	; 0x44
    9cd4:	4604      	mov	r4, r0
    9cd6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    9cd8:	b90f      	cbnz	r7, 9cde <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    9cda:	f014 fc8b 	bl	1e5f4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9cde:	f8d1 8014 	ldr.w	r8, [r1, #20]
    9ce2:	f1b8 0f00 	cmp.w	r8, #0
    9ce6:	d0f8      	beq.n	9cda <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9ce8:	680a      	ldr	r2, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    9cea:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    9cee:	6853      	ldr	r3, [r2, #4]
    9cf0:	6896      	ldr	r6, [r2, #8]
    9cf2:	0199      	lsls	r1, r3, #6
    9cf4:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
    9cf8:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
    9cfc:	689b      	ldr	r3, [r3, #8]
    9cfe:	910e      	str	r1, [sp, #56]	; 0x38
  int input_height = input->dims->data[1];
    9d00:	e9d3 3902 	ldrd	r3, r9, [r3, #8]
    9d04:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
    9d06:	68b3      	ldr	r3, [r6, #8]
    9d08:	68da      	ldr	r2, [r3, #12]
    9d0a:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
    9d0c:	689a      	ldr	r2, [r3, #8]
    9d0e:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
    9d10:	686a      	ldr	r2, [r5, #4]
    9d12:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
    9d14:	eb0a 1282 	add.w	r2, sl, r2, lsl #6
    9d18:	6892      	ldr	r2, [r2, #8]
    9d1a:	68d1      	ldr	r1, [r2, #12]
    9d1c:	910c      	str	r1, [sp, #48]	; 0x30
  int output_height = output->dims->data[1];

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9d1e:	6859      	ldr	r1, [r3, #4]
  int output_height = output->dims->data[1];
    9d20:	6892      	ldr	r2, [r2, #8]
    9d22:	920d      	str	r2, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9d24:	0089      	lsls	r1, r1, #2
    9d26:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9d28:	910f      	str	r1, [sp, #60]	; 0x3c
    9d2a:	f107 0218 	add.w	r2, r7, #24
    9d2e:	4798      	blx	r3
    9d30:	4683      	mov	fp, r0
    9d32:	b9f8      	cbnz	r0, 9d74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    9d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9d36:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9d38:	f107 021c 	add.w	r2, r7, #28
    9d3c:	4620      	mov	r0, r4
    9d3e:	4798      	blx	r3
    9d40:	4683      	mov	fp, r0
    9d42:	b9b8      	cbnz	r0, 9d74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    9d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d46:	f81a 2003 	ldrb.w	r2, [sl, r3]
    9d4a:	2a09      	cmp	r2, #9
    9d4c:	d14b      	bne.n	9de6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    9d4e:	f896 b030 	ldrb.w	fp, [r6, #48]	; 0x30
    9d52:	f1bb 0f01 	cmp.w	fp, #1
    9d56:	d011      	beq.n	9d7c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    9d58:	4b2d      	ldr	r3, [pc, #180]	; (9e10 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    9d5a:	9301      	str	r3, [sp, #4]
    9d5c:	2501      	movs	r5, #1
    9d5e:	4b2d      	ldr	r3, [pc, #180]	; (9e14 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    9d60:	9300      	str	r3, [sp, #0]
    9d62:	e9cd b502 	strd	fp, r5, [sp, #8]
    9d66:	6966      	ldr	r6, [r4, #20]
    9d68:	4a2b      	ldr	r2, [pc, #172]	; (9e18 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9d6a:	492c      	ldr	r1, [pc, #176]	; (9e1c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    9d6c:	2395      	movs	r3, #149	; 0x95
    9d6e:	4620      	mov	r0, r4
    9d70:	47b0      	blx	r6
    9d72:	46ab      	mov	fp, r5
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
    9d74:	4658      	mov	r0, fp
    9d76:	b011      	add	sp, #68	; 0x44
    9d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* affine_quantization =
    9d7c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    9d7e:	b943      	cbnz	r3, 9d92 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
    9d80:	4b27      	ldr	r3, [pc, #156]	; (9e20 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    9d82:	6965      	ldr	r5, [r4, #20]
    9d84:	9300      	str	r3, [sp, #0]
    9d86:	239a      	movs	r3, #154	; 0x9a
    TF_LITE_ENSURE(context, affine_quantization->scale);
    9d88:	4a23      	ldr	r2, [pc, #140]	; (9e18 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9d8a:	4926      	ldr	r1, [pc, #152]	; (9e24 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    9d8c:	4620      	mov	r0, r4
    9d8e:	47a8      	blx	r5
    9d90:	e7f0      	b.n	9d74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    9d92:	6818      	ldr	r0, [r3, #0]
    9d94:	b920      	cbnz	r0, 9da0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
    9d96:	4b24      	ldr	r3, [pc, #144]	; (9e28 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    9d98:	9300      	str	r3, [sp, #0]
    9d9a:	6965      	ldr	r5, [r4, #20]
    9d9c:	239b      	movs	r3, #155	; 0x9b
    9d9e:	e7f3      	b.n	9d88 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    9da0:	6859      	ldr	r1, [r3, #4]
    9da2:	b921      	cbnz	r1, 9dae <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    9da4:	4b21      	ldr	r3, [pc, #132]	; (9e2c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    9da6:	9300      	str	r3, [sp, #0]
    9da8:	6965      	ldr	r5, [r4, #20]
    9daa:	239c      	movs	r3, #156	; 0x9c
    9dac:	e7ec      	b.n	9d88 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context,
    9dae:	6803      	ldr	r3, [r0, #0]
    9db0:	2b01      	cmp	r3, #1
    9db2:	d008      	beq.n	9dc6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    9db4:	68b0      	ldr	r0, [r6, #8]
    9db6:	6840      	ldr	r0, [r0, #4]
    9db8:	4283      	cmp	r3, r0
    9dba:	d004      	beq.n	9dc6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    9dbc:	4b1c      	ldr	r3, [pc, #112]	; (9e30 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    9dbe:	9300      	str	r3, [sp, #0]
    9dc0:	6965      	ldr	r5, [r4, #20]
    9dc2:	239e      	movs	r3, #158	; 0x9e
    9dc4:	e7e0      	b.n	9d88 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    9dc6:	6809      	ldr	r1, [r1, #0]
    9dc8:	428b      	cmp	r3, r1
    9dca:	d00c      	beq.n	9de6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    9dcc:	e9cd 3102 	strd	r3, r1, [sp, #8]
    9dd0:	4b18      	ldr	r3, [pc, #96]	; (9e34 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    9dd2:	9301      	str	r3, [sp, #4]
    9dd4:	4b18      	ldr	r3, [pc, #96]	; (9e38 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    9dd6:	9300      	str	r3, [sp, #0]
    9dd8:	6965      	ldr	r5, [r4, #20]
    9dda:	4a0f      	ldr	r2, [pc, #60]	; (9e18 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    9ddc:	490f      	ldr	r1, [pc, #60]	; (9e1c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    9dde:	23a2      	movs	r3, #162	; 0xa2
    9de0:	4620      	mov	r0, r4
    9de2:	47a8      	blx	r5
    9de4:	e7c6      	b.n	9d74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  return CalculateOpData(context, node, params, input_width, input_height,
    9de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9de8:	9304      	str	r3, [sp, #16]
    9dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9dec:	9303      	str	r3, [sp, #12]
    9dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9df0:	9302      	str	r3, [sp, #8]
    9df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9df4:	9301      	str	r3, [sp, #4]
    9df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9df8:	9300      	str	r3, [sp, #0]
    9dfa:	e9cd 2705 	strd	r2, r7, [sp, #20]
    9dfe:	464b      	mov	r3, r9
    9e00:	4642      	mov	r2, r8
    9e02:	4629      	mov	r1, r5
    9e04:	4620      	mov	r0, r4
    9e06:	f7ff feb3 	bl	9b70 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
    9e0a:	4683      	mov	fp, r0
                         output_height, input->type, data);
    9e0c:	e7b2      	b.n	9d74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    9e0e:	bf00      	nop
    9e10:	00027e46 	.word	0x00027e46
    9e14:	00027e60 	.word	0x00027e60
    9e18:	00027de8 	.word	0x00027de8
    9e1c:	00027b73 	.word	0x00027b73
    9e20:	00027e7a 	.word	0x00027e7a
    9e24:	000272d2 	.word	0x000272d2
    9e28:	00027e8e 	.word	0x00027e8e
    9e2c:	00027ea9 	.word	0x00027ea9
    9e30:	00027ec9 	.word	0x00027ec9
    9e34:	00027f42 	.word	0x00027f42
    9e38:	00027f68 	.word	0x00027f68

00009e3c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    9e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
    9e40:	7b11      	ldrb	r1, [r2, #12]
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    9e42:	b0b5      	sub	sp, #212	; 0xd4
  if (activation == kTfLiteActRelu) {
    9e44:	2901      	cmp	r1, #1
    9e46:	e9dd 453e 	ldrd	r4, r5, [sp, #248]	; 0xf8
    9e4a:	e9dd 6840 	ldrd	r6, r8, [sp, #256]	; 0x100
    9e4e:	9f43      	ldr	r7, [sp, #268]	; 0x10c
    9e50:	d074      	beq.n	9f3c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x100>
  } else if (activation == kTfLiteActRelu6) {
    9e52:	2903      	cmp	r1, #3
    9e54:	d077      	beq.n	9f46 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10a>
    *activation_max = std::numeric_limits<T>::max();
    9e56:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 9f4c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
    9e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 9f50 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
    9e5e:	2902      	cmp	r1, #2
    9e60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9e64:	bf18      	it	ne
    9e66:	eef0 7a47 	vmovne.f32	s15, s14
    9e6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    9e6e:	bf18      	it	ne
    9e70:	eeb0 7a66 	vmovne.f32	s14, s13
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
    9e74:	7811      	ldrb	r1, [r2, #0]
  switch (padding) {
    9e76:	2901      	cmp	r1, #1
    9e78:	d002      	beq.n	9e80 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x44>
      return PaddingType::kNone;
    9e7a:	2902      	cmp	r1, #2
    9e7c:	bf18      	it	ne
    9e7e:	2100      	movne	r1, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
    9e80:	f88d 1098 	strb.w	r1, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
    9e84:	6819      	ldr	r1, [r3, #0]
  op_params.padding_values.height = data.padding.height;
    9e86:	685b      	ldr	r3, [r3, #4]
    9e88:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
    9e8c:	6853      	ldr	r3, [r2, #4]
    9e8e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
    9e92:	6893      	ldr	r3, [r2, #8]
    9e94:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
    9e98:	6913      	ldr	r3, [r2, #16]
  op_params.padding_values.width = data.padding.width;
    9e9a:	f8ad 109a 	strh.w	r1, [sp, #154]	; 0x9a
  op_params.dilation_width_factor = params->dilation_width_factor;
    9e9e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
    9ea2:	4621      	mov	r1, r4
  op_params.dilation_height_factor = params->dilation_height_factor;
    9ea4:	6953      	ldr	r3, [r2, #20]
    9ea6:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  reference_ops::Conv(op_params, GetTensorShape(input),
    9eaa:	a808      	add	r0, sp, #32
  op_params.float_activation_min = output_activation_min;
    9eac:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
  op_params.float_activation_max = output_activation_max;
    9eb0:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
  reference_ops::Conv(op_params, GetTensorShape(input),
    9eb4:	f00b fd4f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    9eb8:	b104      	cbz	r4, 9ebc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x80>
    9eba:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<float>(input), GetTensorShape(filter),
    9ebc:	4629      	mov	r1, r5
    9ebe:	a80e      	add	r0, sp, #56	; 0x38
    9ec0:	f00b fd49 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9ec4:	b105      	cbz	r5, 9ec8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x8c>
    9ec6:	686d      	ldr	r5, [r5, #4]
                      GetTensorData<float>(filter), GetTensorShape(bias),
    9ec8:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    9ecc:	4631      	mov	r1, r6
    9ece:	4648      	mov	r0, r9
    9ed0:	f00b fd41 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9ed4:	b106      	cbz	r6, 9ed8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x9c>
    9ed6:	6876      	ldr	r6, [r6, #4]
                      GetTensorData<float>(bias), GetTensorShape(output),
    9ed8:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
    9edc:	4639      	mov	r1, r7
    9ede:	4650      	mov	r0, sl
    9ee0:	f00b fd39 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    9ee4:	b107      	cbz	r7, 9ee8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xac>
    9ee6:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<float>(output), GetTensorShape(im2col),
    9ee8:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
    9eec:	4641      	mov	r1, r8
    9eee:	4658      	mov	r0, fp
    9ef0:	f00b fd31 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    9ef4:	f1b8 0f00 	cmp.w	r8, #0
    9ef8:	d001      	beq.n	9efe <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xc2>
    9efa:	f8d8 8004 	ldr.w	r8, [r8, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
    9efe:	9500      	str	r5, [sp, #0]
    9f00:	ab0e      	add	r3, sp, #56	; 0x38
    9f02:	4622      	mov	r2, r4
    9f04:	a908      	add	r1, sp, #32
    9f06:	a826      	add	r0, sp, #152	; 0x98
    9f08:	e9cd b805 	strd	fp, r8, [sp, #20]
    9f0c:	e9cd a703 	strd	sl, r7, [sp, #12]
    9f10:	e9cd 9601 	strd	r9, r6, [sp, #4]
    9f14:	f7ff fd1a 	bl	994c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
    9f18:	4658      	mov	r0, fp
    9f1a:	f00b fcd7 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
    9f1e:	4650      	mov	r0, sl
    9f20:	f00b fcd4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
    9f24:	4648      	mov	r0, r9
    9f26:	f00b fcd1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
    9f2a:	a80e      	add	r0, sp, #56	; 0x38
    9f2c:	f00b fcce 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
    9f30:	a808      	add	r0, sp, #32
    9f32:	f00b fccb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
    9f36:	b035      	add	sp, #212	; 0xd4
    9f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
    9f3c:	eddf 7a03 	vldr	s15, [pc, #12]	; 9f4c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
    *activation_min = 0;
    9f40:	ed9f 7a04 	vldr	s14, [pc, #16]	; 9f54 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x118>
    9f44:	e796      	b.n	9e74 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38>
    *activation_max = 6;
    9f46:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    9f4a:	e7f9      	b.n	9f40 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x104>
    9f4c:	7f7fffff 	.word	0x7f7fffff
    9f50:	ff7fffff 	.word	0xff7fffff
    9f54:	00000000 	.word	0x00000000

00009f58 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
    9f58:	684b      	ldr	r3, [r1, #4]

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    9f5a:	694a      	ldr	r2, [r1, #20]
    9f5c:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    9f62:	6884      	ldr	r4, [r0, #8]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9f64:	680e      	ldr	r6, [r1, #0]
    9f66:	eb04 1c83 	add.w	ip, r4, r3, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9f6a:	6833      	ldr	r3, [r6, #0]
  return &context->tensors[node->inputs->data[index]];
    9f6c:	6877      	ldr	r7, [r6, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9f6e:	4605      	mov	r5, r0
    9f70:	68b0      	ldr	r0, [r6, #8]
  const bool use_tensor = index < node->inputs->size &&
    9f72:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    9f74:	ea4f 1887 	mov.w	r8, r7, lsl #6
    9f78:	b086      	sub	sp, #24
    9f7a:	eb04 1787 	add.w	r7, r4, r7, lsl #6
    9f7e:	eb04 1080 	add.w	r0, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    9f82:	dd08      	ble.n	9f96 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    9f84:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
    9f86:	1c73      	adds	r3, r6, #1
    9f88:	d005      	beq.n	9f96 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    return &context->tensors[node->inputs->data[index]];
    9f8a:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    9f8e:	690b      	ldr	r3, [r1, #16]
    9f90:	b91b      	cbnz	r3, 9f9a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
    9f92:	f014 fb2f 	bl	1e5f4 <abort>
  return nullptr;
    9f96:	2600      	movs	r6, #0
    9f98:	e7f9      	b.n	9f8e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x36>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
    9f9a:	f814 e008 	ldrb.w	lr, [r4, r8]
    9f9e:	f1be 0f03 	cmp.w	lr, #3
    9fa2:	d01e      	beq.n	9fe2 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    9fa4:	f1be 0f09 	cmp.w	lr, #9
    9fa8:	d011      	beq.n	9fce <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x76>
    9faa:	f1be 0f01 	cmp.w	lr, #1
    9fae:	d124      	bne.n	9ffa <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
    9fb0:	2400      	movs	r4, #0
    9fb2:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9fb6:	e9cd 4403 	strd	r4, r4, [sp, #12]
    9fba:	f8cd c014 	str.w	ip, [sp, #20]
    9fbe:	9700      	str	r7, [sp, #0]
    9fc0:	4628      	mov	r0, r5
    9fc2:	f7ff ff3b 	bl	9e3c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    9fc6:	4620      	mov	r0, r4
    9fc8:	b006      	add	sp, #24
    9fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
    9fce:	2400      	movs	r4, #0
    9fd0:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9fd4:	e9cd c403 	strd	ip, r4, [sp, #12]
    9fd8:	9700      	str	r7, [sp, #0]
    9fda:	4628      	mov	r0, r5
    9fdc:	f00f fb1a 	bl	19614 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
      break;
    9fe0:	e7f1      	b.n	9fc6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
    9fe2:	2400      	movs	r4, #0
    9fe4:	e9cd 0601 	strd	r0, r6, [sp, #4]
    9fe8:	e9cd 4403 	strd	r4, r4, [sp, #12]
    9fec:	f8cd c014 	str.w	ip, [sp, #20]
    9ff0:	9700      	str	r7, [sp, #0]
    9ff2:	4628      	mov	r0, r5
    9ff4:	f00f fa93 	bl	1951e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      break;
    9ff8:	e7e5      	b.n	9fc6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    9ffa:	4670      	mov	r0, lr
    9ffc:	696e      	ldr	r6, [r5, #20]
    9ffe:	f7f6 fc58 	bl	8b2 <TfLiteTypeGetName>
    a002:	f814 3008 	ldrb.w	r3, [r4, r8]
    a006:	4903      	ldr	r1, [pc, #12]	; (a014 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    a008:	4602      	mov	r2, r0
    a00a:	4628      	mov	r0, r5
    a00c:	47b0      	blx	r6
      return kTfLiteError;
    a00e:	2401      	movs	r4, #1
    a010:	e7d9      	b.n	9fc6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    a012:	bf00      	nop
    a014:	00027ac7 	.word	0x00027ac7

0000a018 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    a018:	4800      	ldr	r0, [pc, #0]	; (a01c <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x4>)
    a01a:	4770      	bx	lr
    a01c:	20000208 	.word	0x20000208

0000a020 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
    a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a024:	ed2d 8b04 	vpush	{d8-d9}
    a028:	b09b      	sub	sp, #108	; 0x6c
    a02a:	469a      	mov	sl, r3
  const int stride_width = params.stride_width;
    a02c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    a030:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
    a032:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    a036:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
    a038:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    a03c:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
    a03e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    a042:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
    a044:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    a048:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
    a04a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    a04e:	9311      	str	r3, [sp, #68]	; 0x44
  const int depth_multiplier = params.depth_multiplier;
    a050:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    a054:	9307      	str	r3, [sp, #28]
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a056:	680b      	ldr	r3, [r1, #0]
    float* output_data) {
    a058:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const float output_activation_min = params.float_activation_min;
    a05a:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    a05e:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
    float* output_data) {
    a062:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a064:	2b04      	cmp	r3, #4
    float* output_data) {
    a066:	460c      	mov	r4, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a068:	d001      	beq.n	a06e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
    a06a:	f014 fac3 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a06e:	f8da 3000 	ldr.w	r3, [sl]
    a072:	2b04      	cmp	r3, #4
    a074:	d1f9      	bne.n	a06a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a076:	683b      	ldr	r3, [r7, #0]
    a078:	2b04      	cmp	r3, #4
    a07a:	d1f6      	bne.n	a06a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    a07c:	2300      	movs	r3, #0
    a07e:	4619      	mov	r1, r3
    a080:	463a      	mov	r2, r7
    a082:	4620      	mov	r0, r4
    a084:	f00e fada 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a088:	2303      	movs	r3, #3
    a08a:	4619      	mov	r1, r3
    a08c:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    a08e:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a090:	4650      	mov	r0, sl
    a092:	f00e fad3 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    a096:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    a098:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
    a09a:	4620      	mov	r0, r4
    a09c:	f00b fc21 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    a0a0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    a0a2:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
    a0a4:	4620      	mov	r0, r4
    a0a6:	f00b fc1c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
    a0aa:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
    a0ac:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
    a0ae:	4620      	mov	r0, r4
    a0b0:	f00b fc17 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    a0b4:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
    a0b6:	900a      	str	r0, [sp, #40]	; 0x28
  const int filter_height = filter_shape.Dims(1);
    a0b8:	4650      	mov	r0, sl
    a0ba:	f00b fc12 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    a0be:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    a0c0:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
    a0c2:	4650      	mov	r0, sl
    a0c4:	f00b fc0d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    a0c8:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    a0ca:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
    a0cc:	4638      	mov	r0, r7
    a0ce:	f00b fc08 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    a0d2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    a0d4:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
    a0d6:	4638      	mov	r0, r7
    a0d8:	f00b fc03 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    a0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0de:	9a07      	ldr	r2, [sp, #28]
  const int output_width = output_shape.Dims(2);
    a0e0:	9018      	str	r0, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    a0e2:	fb03 f602 	mul.w	r6, r3, r2
    a0e6:	42ae      	cmp	r6, r5
    a0e8:	d1bf      	bne.n	a06a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a0ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
    a0ec:	f00b fc7e 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    a0f0:	42b0      	cmp	r0, r6
    a0f2:	d1ba      	bne.n	a06a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
    a0f4:	eddf 9a59 	vldr	s19, [pc, #356]	; a25c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
  for (int b = 0; b < batches; ++b) {
    a0f8:	f04f 0900 	mov.w	r9, #0
    a0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0fe:	4599      	cmp	r9, r3
    a100:	f280 80a6 	bge.w	a250 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    a104:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a106:	425b      	negs	r3, r3
    a108:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a10a:	2300      	movs	r3, #0
    a10c:	9302      	str	r3, [sp, #8]
    a10e:	9b02      	ldr	r3, [sp, #8]
    a110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a112:	4293      	cmp	r3, r2
    a114:	f280 8099 	bge.w	a24a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
    a118:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a11a:	425b      	negs	r3, r3
    a11c:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a11e:	2300      	movs	r3, #0
    a120:	9303      	str	r3, [sp, #12]
    a122:	9b03      	ldr	r3, [sp, #12]
    a124:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a126:	4293      	cmp	r3, r2
    a128:	f280 8087 	bge.w	a23a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    a12c:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
    a12e:	9604      	str	r6, [sp, #16]
    a130:	9b04      	ldr	r3, [sp, #16]
    a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a134:	4293      	cmp	r3, r2
    a136:	da78      	bge.n	a22a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
    a138:	4635      	mov	r5, r6
          for (int m = 0; m < depth_multiplier; m++) {
    a13a:	9a07      	ldr	r2, [sp, #28]
    a13c:	1bab      	subs	r3, r5, r6
    a13e:	429a      	cmp	r2, r3
    a140:	dd6d      	ble.n	a21e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a142:	2300      	movs	r3, #0
            const int oc = m + ic * depth_multiplier;
    a144:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
            float total = 0.f;
    a148:	ed9f 8a44 	vldr	s16, [pc, #272]	; a25c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a14c:	9305      	str	r3, [sp, #20]
    a14e:	9b05      	ldr	r3, [sp, #20]
    a150:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a152:	4293      	cmp	r3, r2
    a154:	da3c      	bge.n	a1d0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a156:	2300      	movs	r3, #0
                const int in_y =
    a158:	f8dd 8020 	ldr.w	r8, [sp, #32]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a15c:	9306      	str	r3, [sp, #24]
    a15e:	9b06      	ldr	r3, [sp, #24]
    a160:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a162:	4293      	cmp	r3, r2
    a164:	da2e      	bge.n	a1c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a4>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    a166:	f1b8 0f00 	cmp.w	r8, #0
    a16a:	db25      	blt.n	a1b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a16c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a16e:	4543      	cmp	r3, r8
    a170:	dd22      	ble.n	a1b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a172:	f1bb 0f00 	cmp.w	fp, #0
    a176:	db1f      	blt.n	a1b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
    a178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a17a:	455b      	cmp	r3, fp
    a17c:	dd1c      	ble.n	a1b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a17e:	9b04      	ldr	r3, [sp, #16]
    a180:	9300      	str	r3, [sp, #0]
    a182:	465a      	mov	r2, fp
    a184:	4643      	mov	r3, r8
    a186:	4649      	mov	r1, r9
    a188:	4620      	mov	r0, r4
    a18a:	f00b fc6c 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
    a18e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a192:	900f      	str	r0, [sp, #60]	; 0x3c
                  float filter_value = filter_data[Offset(
    a194:	9500      	str	r5, [sp, #0]
    a196:	2100      	movs	r1, #0
    a198:	4650      	mov	r0, sl
    a19a:	f00b fc64 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    a19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a1a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
    a1a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
    a1a8:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
    a1ac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
    a1b0:	edd0 7a00 	vldr	s15, [r0]
    a1b4:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a1b8:	9b06      	ldr	r3, [sp, #24]
    a1ba:	3301      	adds	r3, #1
    a1bc:	9306      	str	r3, [sp, #24]
    a1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a1c0:	4498      	add	r8, r3
    a1c2:	e7cc      	b.n	a15e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a1c4:	9b05      	ldr	r3, [sp, #20]
    a1c6:	3301      	adds	r3, #1
    a1c8:	9305      	str	r3, [sp, #20]
    a1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1cc:	449b      	add	fp, r3
    a1ce:	e7be      	b.n	a14e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12e>
            if (bias_data) {
    a1d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    a1d2:	b30b      	cbz	r3, a218 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
              bias_value = bias_data[oc];
    a1d4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a1d8:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    a1dc:	9500      	str	r5, [sp, #0]
                ActivationFunctionWithMinMax(total + bias_value,
    a1de:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    a1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a1e6:	4649      	mov	r1, r9
    a1e8:	4638      	mov	r0, r7
    a1ea:	f00b fc3c 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    a1ee:	eeb4 8ae8 	vcmpe.f32	s16, s17
    a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1f6:	bfb8      	it	lt
    a1f8:	eeb0 8a68 	vmovlt.f32	s16, s17
    a1fc:	eeb4 8ac9 	vcmpe.f32	s16, s18
    a200:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a20a:	bf88      	it	hi
    a20c:	eeb0 8a49 	vmovhi.f32	s16, s18
    a210:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
    a214:	3501      	adds	r5, #1
    a216:	e790      	b.n	a13a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
            float bias_value = 0.0f;
    a218:	eef0 7a69 	vmov.f32	s15, s19
    a21c:	e7de      	b.n	a1dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
        for (int ic = 0; ic < input_depth; ++ic) {
    a21e:	9b04      	ldr	r3, [sp, #16]
    a220:	3301      	adds	r3, #1
    a222:	9304      	str	r3, [sp, #16]
    a224:	9b07      	ldr	r3, [sp, #28]
    a226:	441e      	add	r6, r3
    a228:	e782      	b.n	a130 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a22a:	9b03      	ldr	r3, [sp, #12]
    a22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a22e:	3301      	adds	r3, #1
    a230:	9303      	str	r3, [sp, #12]
    a232:	9b08      	ldr	r3, [sp, #32]
    a234:	4413      	add	r3, r2
    a236:	9308      	str	r3, [sp, #32]
    a238:	e773      	b.n	a122 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a23a:	9b02      	ldr	r3, [sp, #8]
    a23c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a23e:	3301      	adds	r3, #1
    a240:	9302      	str	r3, [sp, #8]
    a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a244:	4413      	add	r3, r2
    a246:	9309      	str	r3, [sp, #36]	; 0x24
    a248:	e761      	b.n	a10e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xee>
  for (int b = 0; b < batches; ++b) {
    a24a:	f109 0901 	add.w	r9, r9, #1
    a24e:	e755      	b.n	a0fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xdc>
          }
        }
      }
    }
  }
}
    a250:	b01b      	add	sp, #108	; 0x6c
    a252:	ecbd 8b04 	vpop	{d8-d9}
    a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a25a:	bf00      	nop
    a25c:	00000000 	.word	0x00000000

0000a260 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a264:	690d      	ldr	r5, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a266:	b093      	sub	sp, #76	; 0x4c
    a268:	4604      	mov	r4, r0
    a26a:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    a26c:	b90d      	cbnz	r5, a272 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    a26e:	f014 f9c1 	bl	1e5f4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a272:	694e      	ldr	r6, [r1, #20]
    a274:	2e00      	cmp	r6, #0
    a276:	d0fa      	beq.n	a26e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  auto* params =
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a278:	680a      	ldr	r2, [r1, #0]
    a27a:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    a27e:	6853      	ldr	r3, [r2, #4]
    a280:	6897      	ldr	r7, [r2, #8]
    a282:	ea4f 1983 	mov.w	r9, r3, lsl #6
    a286:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
    a28a:	f81a 2009 	ldrb.w	r2, [sl, r9]
  int width = SizeOfDimension(input, 2);
    a28e:	689b      	ldr	r3, [r3, #8]
  const TfLiteType data_type = input->type;
    a290:	9210      	str	r2, [sp, #64]	; 0x40
    a292:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
  return t->dims->data[dim];
    a296:	68da      	ldr	r2, [r3, #12]
    a298:	689b      	ldr	r3, [r3, #8]
    a29a:	930a      	str	r3, [sp, #40]	; 0x28
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
    a29c:	68bb      	ldr	r3, [r7, #8]
    a29e:	920d      	str	r2, [sp, #52]	; 0x34

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    a2a0:	6919      	ldr	r1, [r3, #16]
    a2a2:	68da      	ldr	r2, [r3, #12]
    a2a4:	920b      	str	r2, [sp, #44]	; 0x2c
    a2a6:	689a      	ldr	r2, [r3, #8]
    a2a8:	920c      	str	r2, [sp, #48]	; 0x30
    a2aa:	0089      	lsls	r1, r1, #2
    a2ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a2ae:	910e      	str	r1, [sp, #56]	; 0x38
    a2b0:	f105 0218 	add.w	r2, r5, #24
    a2b4:	4798      	blx	r3
    a2b6:	4683      	mov	fp, r0
    a2b8:	bb48      	cbnz	r0, a30e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    a2ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a2bc:	990e      	ldr	r1, [sp, #56]	; 0x38
    a2be:	f105 021c 	add.w	r2, r5, #28
    a2c2:	4620      	mov	r0, r4
    a2c4:	4798      	blx	r3
    a2c6:	2800      	cmp	r0, #0
    a2c8:	f040 80d3 	bne.w	a472 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x212>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    a2cc:	f81a 3009 	ldrb.w	r3, [sl, r9]
    a2d0:	2b09      	cmp	r3, #9
    a2d2:	d14a      	bne.n	a36a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    a2d4:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
    a2d8:	f1bb 0f01 	cmp.w	fp, #1
    a2dc:	d00d      	beq.n	a2fa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
    a2de:	2501      	movs	r5, #1
    a2e0:	4b67      	ldr	r3, [pc, #412]	; (a480 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
    a2e2:	9301      	str	r3, [sp, #4]
    a2e4:	e9cd b502 	strd	fp, r5, [sp, #8]
    a2e8:	4b66      	ldr	r3, [pc, #408]	; (a484 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
    a2ea:	6966      	ldr	r6, [r4, #20]
    a2ec:	9300      	str	r3, [sp, #0]
    a2ee:	2388      	movs	r3, #136	; 0x88
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    a2f0:	4a65      	ldr	r2, [pc, #404]	; (a488 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a2f2:	4966      	ldr	r1, [pc, #408]	; (a48c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
    a2f4:	4620      	mov	r0, r4
    a2f6:	47b0      	blx	r6
    a2f8:	e046      	b.n	a388 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
    a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    a2fc:	b95b      	cbnz	r3, a316 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
    a2fe:	4b64      	ldr	r3, [pc, #400]	; (a490 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
    a300:	6965      	ldr	r5, [r4, #20]
    a302:	9300      	str	r3, [sp, #0]
    a304:	238e      	movs	r3, #142	; 0x8e
    TF_LITE_ENSURE(context, affine_quantization->scale);
    a306:	4a60      	ldr	r2, [pc, #384]	; (a488 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a308:	4962      	ldr	r1, [pc, #392]	; (a494 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    a30a:	4620      	mov	r0, r4
    a30c:	47a8      	blx	r5
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
    a30e:	4658      	mov	r0, fp
    a310:	b013      	add	sp, #76	; 0x4c
    a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
    a316:	6819      	ldr	r1, [r3, #0]
    a318:	b921      	cbnz	r1, a324 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
    a31a:	4b5f      	ldr	r3, [pc, #380]	; (a498 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    a31c:	9300      	str	r3, [sp, #0]
    a31e:	6965      	ldr	r5, [r4, #20]
    a320:	238f      	movs	r3, #143	; 0x8f
    a322:	e7f0      	b.n	a306 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    a324:	685a      	ldr	r2, [r3, #4]
    a326:	b922      	cbnz	r2, a332 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
    a328:	4b5c      	ldr	r3, [pc, #368]	; (a49c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    a32a:	9300      	str	r3, [sp, #0]
    a32c:	6965      	ldr	r5, [r4, #20]
    a32e:	2390      	movs	r3, #144	; 0x90
    a330:	e7e9      	b.n	a306 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(
    a332:	680b      	ldr	r3, [r1, #0]
    a334:	2b01      	cmp	r3, #1
    a336:	d008      	beq.n	a34a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
    a338:	68b9      	ldr	r1, [r7, #8]
    a33a:	6909      	ldr	r1, [r1, #16]
    a33c:	428b      	cmp	r3, r1
    a33e:	d004      	beq.n	a34a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
    a340:	4b57      	ldr	r3, [pc, #348]	; (a4a0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
    a342:	9300      	str	r3, [sp, #0]
    a344:	6965      	ldr	r5, [r4, #20]
    a346:	2391      	movs	r3, #145	; 0x91
    a348:	e7dd      	b.n	a306 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    a34a:	6812      	ldr	r2, [r2, #0]
    a34c:	4293      	cmp	r3, r2
    a34e:	d00c      	beq.n	a36a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    a350:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a354:	4b53      	ldr	r3, [pc, #332]	; (a4a4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    a356:	9301      	str	r3, [sp, #4]
    a358:	4b53      	ldr	r3, [pc, #332]	; (a4a8 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	6965      	ldr	r5, [r4, #20]
    a35e:	4a4a      	ldr	r2, [pc, #296]	; (a488 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a360:	494a      	ldr	r1, [pc, #296]	; (a48c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
    a362:	2395      	movs	r3, #149	; 0x95
    a364:	4620      	mov	r0, r4
    a366:	47a8      	blx	r5
    a368:	e7d1      	b.n	a30e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  bool has_bias = node->inputs->size == 3;
    a36a:	f8d8 7000 	ldr.w	r7, [r8]
    a36e:	683b      	ldr	r3, [r7, #0]
    a370:	930e      	str	r3, [sp, #56]	; 0x38
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    a372:	3b02      	subs	r3, #2
    a374:	2b01      	cmp	r3, #1
    a376:	d90a      	bls.n	a38e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    a378:	4b4c      	ldr	r3, [pc, #304]	; (a4ac <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
    a37a:	9300      	str	r3, [sp, #0]
    a37c:	6965      	ldr	r5, [r4, #20]
    a37e:	4a42      	ldr	r2, [pc, #264]	; (a488 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    a380:	4944      	ldr	r1, [pc, #272]	; (a494 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    a382:	2341      	movs	r3, #65	; 0x41
    a384:	4620      	mov	r0, r4
    a386:	47a8      	blx	r5
    a388:	f04f 0b01 	mov.w	fp, #1
    a38c:	e7bf      	b.n	a30e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    a38e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a392:	930f      	str	r3, [sp, #60]	; 0x3c
    a394:	f8d3 8000 	ldr.w	r8, [r3]
    a398:	f1b8 0f01 	cmp.w	r8, #1
    a39c:	d009      	beq.n	a3b2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
    a39e:	4b44      	ldr	r3, [pc, #272]	; (a4b0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
    a3a0:	9301      	str	r3, [sp, #4]
    a3a2:	2501      	movs	r5, #1
    a3a4:	4b43      	ldr	r3, [pc, #268]	; (a4b4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    a3a6:	9300      	str	r3, [sp, #0]
    a3a8:	e9cd 8502 	strd	r8, r5, [sp, #8]
    a3ac:	6966      	ldr	r6, [r4, #20]
    a3ae:	2342      	movs	r3, #66	; 0x42
    a3b0:	e79e      	b.n	a2f0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
      &unused_output_width);
    a3b2:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
    a3b6:	f896 b000 	ldrb.w	fp, [r6]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    a3ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a3bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    a3be:	f8cd 8000 	str.w	r8, [sp]
    a3c2:	464b      	mov	r3, r9
    a3c4:	4658      	mov	r0, fp
    a3c6:	f00f f898 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    a3ca:	4653      	mov	r3, sl
    a3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    a3ce:	9011      	str	r0, [sp, #68]	; 0x44
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    a3d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3d2:	f8cd 8000 	str.w	r8, [sp]
    a3d6:	4658      	mov	r0, fp
    a3d8:	f00f f88f 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
    a3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3e0:	3801      	subs	r0, #1
  int total_padding =
    a3e2:	1a9b      	subs	r3, r3, r2
    a3e4:	fb0a 3a00 	mla	sl, sl, r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  int total_padding =
    a3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    a3ec:	1e58      	subs	r0, r3, #1
  int total_padding =
    a3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3f0:	1a9b      	subs	r3, r3, r2
    a3f2:	fb09 3900 	mla	r9, r9, r0, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    a3f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    a3fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    a3fe:	ea4f 0369 	mov.w	r3, r9, asr #1
    a402:	602b      	str	r3, [r5, #0]
    a404:	ea4f 036a 	mov.w	r3, sl, asr #1
    a408:	606b      	str	r3, [r5, #4]
  *offset = total_padding % 2;
    a40a:	f009 0301 	and.w	r3, r9, #1
    a40e:	60ab      	str	r3, [r5, #8]
  if (data_type != kTfLiteFloat32) {
    a410:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a412:	f00a 0001 	and.w	r0, sl, #1
    a416:	2b01      	cmp	r3, #1
      &unused_output_width);
    a418:	60e8      	str	r0, [r5, #12]
  if (data_type != kTfLiteFloat32) {
    a41a:	d02e      	beq.n	a47a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
  const bool use_tensor = index < node->inputs->size &&
    a41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a41e:	68a0      	ldr	r0, [r4, #8]
  return &context->tensors[node->inputs->data[index]];
    a420:	6879      	ldr	r1, [r7, #4]
    a422:	68ba      	ldr	r2, [r7, #8]
  const bool use_tensor = index < node->inputs->size &&
    a424:	2b03      	cmp	r3, #3
  return &context->tensors[node->inputs->data[index]];
    a426:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    a42a:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    a42e:	d122      	bne.n	a476 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    a430:	68fb      	ldr	r3, [r7, #12]
  const bool use_tensor = index < node->inputs->size &&
    a432:	1c5f      	adds	r7, r3, #1
    a434:	d01f      	beq.n	a476 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
    return &context->tensors[node->inputs->data[index]];
    a436:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    a43a:	6897      	ldr	r7, [r2, #8]
    return tflite::PopulateConvolutionQuantizationParams(
    a43c:	693f      	ldr	r7, [r7, #16]
    a43e:	9708      	str	r7, [sp, #32]
    a440:	69ef      	ldr	r7, [r5, #28]
    a442:	9707      	str	r7, [sp, #28]
    a444:	69af      	ldr	r7, [r5, #24]
    a446:	9706      	str	r7, [sp, #24]
    a448:	f105 0724 	add.w	r7, r5, #36	; 0x24
    a44c:	9705      	str	r7, [sp, #20]
    a44e:	f105 0720 	add.w	r7, r5, #32
    a452:	9704      	str	r7, [sp, #16]
    a454:	f105 0714 	add.w	r7, r5, #20
    a458:	3510      	adds	r5, #16
    a45a:	9502      	str	r5, [sp, #8]
        context, input, filter, bias, output, params->activation,
    a45c:	3610      	adds	r6, #16
  return &context->tensors[node->outputs->data[index]];
    a45e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return tflite::PopulateConvolutionQuantizationParams(
    a460:	9703      	str	r7, [sp, #12]
    a462:	9601      	str	r6, [sp, #4]
    a464:	686d      	ldr	r5, [r5, #4]
    a466:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    a46a:	9000      	str	r0, [sp, #0]
    a46c:	4620      	mov	r0, r4
    a46e:	f007 fa77 	bl	11960 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    a472:	4683      	mov	fp, r0
    a474:	e74b      	b.n	a30e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  return nullptr;
    a476:	2300      	movs	r3, #0
    a478:	e7df      	b.n	a43a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  return kTfLiteOk;
    a47a:	f04f 0b00 	mov.w	fp, #0
    a47e:	e746      	b.n	a30e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    a480:	00027e46 	.word	0x00027e46
    a484:	00027e60 	.word	0x00027e60
    a488:	00027f89 	.word	0x00027f89
    a48c:	00027b73 	.word	0x00027b73
    a490:	00027e7a 	.word	0x00027e7a
    a494:	000272d2 	.word	0x000272d2
    a498:	00027e8e 	.word	0x00027e8e
    a49c:	00027ea9 	.word	0x00027ea9
    a4a0:	00027fb9 	.word	0x00027fb9
    a4a4:	00027f42 	.word	0x00027f42
    a4a8:	00027f68 	.word	0x00027f68
    a4ac:	00027e0e 	.word	0x00027e0e
    a4b0:	0002880d 	.word	0x0002880d
    a4b4:	00027e32 	.word	0x00027e32

0000a4b8 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    a4b8:	4800      	ldr	r0, [pc, #0]	; (a4bc <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x4>)
    a4ba:	4770      	bx	lr
    a4bc:	20000228 	.word	0x20000228

0000a4c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a4c4:	690a      	ldr	r2, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a4c6:	b0b3      	sub	sp, #204	; 0xcc
    a4c8:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a4ca:	b90a      	cbnz	r2, a4d0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10>
    a4cc:	f014 f892 	bl	1e5f4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a4d0:	694b      	ldr	r3, [r1, #20]
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d0fa      	beq.n	a4cc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    a4d6:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    a4d8:	6848      	ldr	r0, [r1, #4]
    a4da:	6840      	ldr	r0, [r0, #4]
    a4dc:	eb07 1b80 	add.w	fp, r7, r0, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    a4e0:	6808      	ldr	r0, [r1, #0]
  return &context->tensors[node->inputs->data[index]];
    a4e2:	6846      	ldr	r6, [r0, #4]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
    a4e4:	6801      	ldr	r1, [r0, #0]
    a4e6:	6885      	ldr	r5, [r0, #8]
    a4e8:	ea4f 1986 	mov.w	r9, r6, lsl #6
    a4ec:	2903      	cmp	r1, #3
    a4ee:	bf08      	it	eq
    a4f0:	68c4      	ldreq	r4, [r0, #12]
  switch (input->type) {  // Already know in/out types are same.
    a4f2:	f817 0009 	ldrb.w	r0, [r7, r9]
    a4f6:	bf0c      	ite	eq
    a4f8:	eb07 1484 	addeq.w	r4, r7, r4, lsl #6
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
    a4fc:	2400      	movne	r4, #0
  switch (input->type) {  // Already know in/out types are same.
    a4fe:	2803      	cmp	r0, #3
    a500:	eb07 1686 	add.w	r6, r7, r6, lsl #6
    a504:	eb07 1585 	add.w	r5, r7, r5, lsl #6
    a508:	f000 80ce 	beq.w	a6a8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
    a50c:	2809      	cmp	r0, #9
    a50e:	d06a      	beq.n	a5e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    a510:	2801      	cmp	r0, #1
    a512:	f040 811e 	bne.w	a752 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x292>
  CalculateActivationRange(params->activation, &output_activation_min,
    a516:	7c19      	ldrb	r1, [r3, #16]
  if (activation == kTfLiteActRelu) {
    a518:	2901      	cmp	r1, #1
    a51a:	d05c      	beq.n	a5d6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116>
  } else if (activation == kTfLiteActRelu6) {
    a51c:	2903      	cmp	r1, #3
    a51e:	d05f      	beq.n	a5e0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x120>
    *activation_max = std::numeric_limits<T>::max();
    a520:	ed9f 7a92 	vldr	s14, [pc, #584]	; a76c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    a524:	eddf 6a92 	vldr	s13, [pc, #584]	; a770 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
    a528:	2902      	cmp	r1, #2
    a52a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a52e:	bf18      	it	ne
    a530:	eef0 7a47 	vmovne.f32	s15, s14
    a534:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    a538:	bf18      	it	ne
    a53a:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.padding_type = PaddingType::kSame;
    a53e:	2101      	movs	r1, #1
    a540:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a544:	6811      	ldr	r1, [r2, #0]
  op_params.padding_values.height = data->padding.height;
    a546:	6852      	ldr	r2, [r2, #4]
    a548:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a54c:	685a      	ldr	r2, [r3, #4]
    a54e:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a552:	689a      	ldr	r2, [r3, #8]
    a554:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a558:	695a      	ldr	r2, [r3, #20]
  op_params.padding_values.width = data->padding.width;
    a55a:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.dilation_width_factor = params->dilation_width_factor;
    a55e:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a562:	4631      	mov	r1, r6
  op_params.dilation_height_factor = params->dilation_height_factor;
    a564:	699a      	ldr	r2, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a566:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a568:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a56c:	a80a      	add	r0, sp, #40	; 0x28
  op_params.depth_multiplier = params->depth_multiplier;
    a56e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.float_activation_min = output_activation_min;
    a572:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
  op_params.float_activation_max = output_activation_max;
    a576:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    a57a:	f00b f9ec 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
    a57e:	4629      	mov	r1, r5
    a580:	a810      	add	r0, sp, #64	; 0x40
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    a582:	f8d6 8004 	ldr.w	r8, [r6, #4]
    a586:	f00b f9e6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a58a:	b105      	cbz	r5, a58e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xce>
    a58c:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    a58e:	ae16      	add	r6, sp, #88	; 0x58
    a590:	4621      	mov	r1, r4
    a592:	4630      	mov	r0, r6
    a594:	f00b f9df 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a598:	b104      	cbz	r4, a59c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xdc>
    a59a:	6864      	ldr	r4, [r4, #4]
    a59c:	af1c      	add	r7, sp, #112	; 0x70
    a59e:	4659      	mov	r1, fp
    a5a0:	4638      	mov	r0, r7
    a5a2:	f00b f9d8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    a5a6:	f1bb 0f00 	cmp.w	fp, #0
    a5aa:	d001      	beq.n	a5b0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    a5ac:	f8db b004 	ldr.w	fp, [fp, #4]
  tflite::reference_ops::DepthwiseConv(
    a5b0:	9500      	str	r5, [sp, #0]
    a5b2:	ab10      	add	r3, sp, #64	; 0x40
    a5b4:	4642      	mov	r2, r8
    a5b6:	a90a      	add	r1, sp, #40	; 0x28
    a5b8:	a822      	add	r0, sp, #136	; 0x88
    a5ba:	e9cd 7b03 	strd	r7, fp, [sp, #12]
    a5be:	e9cd 6401 	strd	r6, r4, [sp, #4]
    a5c2:	f7ff fd2d 	bl	a020 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    a5c6:	4638      	mov	r0, r7
    a5c8:	f00b f980 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    a5cc:	4630      	mov	r0, r6
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a5ce:	f00b f97d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
    a5d2:	a810      	add	r0, sp, #64	; 0x40
    a5d4:	e05f      	b.n	a696 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
    *activation_max = std::numeric_limits<T>::max();
    a5d6:	eddf 7a65 	vldr	s15, [pc, #404]	; a76c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    *activation_min = 0;
    a5da:	ed9f 7a66 	vldr	s14, [pc, #408]	; a774 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    a5de:	e7ae      	b.n	a53e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    *activation_max = 6;
    a5e0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    a5e4:	e7f9      	b.n	a5da <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11a>
  op_params.padding_type = PaddingType::kSame;
    a5e6:	2101      	movs	r1, #1
    a5e8:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a5ec:	6811      	ldr	r1, [r2, #0]
    a5ee:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
    a5f2:	6851      	ldr	r1, [r2, #4]
    a5f4:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a5f8:	6859      	ldr	r1, [r3, #4]
    a5fa:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a5fe:	6899      	ldr	r1, [r3, #8]
    a600:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a604:	6959      	ldr	r1, [r3, #20]
    a606:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
    a60a:	6999      	ldr	r1, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a60c:	68db      	ldr	r3, [r3, #12]
    a60e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.input_offset = -input->params.zero_point;
    a612:	6933      	ldr	r3, [r6, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a614:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.input_offset = -input->params.zero_point;
    a618:	425b      	negs	r3, r3
    a61a:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.weights_offset = 0;
    a61c:	2300      	movs	r3, #0
    a61e:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.output_offset = output->params.zero_point;
    a620:	f8db 3010 	ldr.w	r3, [fp, #16]
    a624:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
    a626:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a62a:	237f      	movs	r3, #127	; 0x7f
    a62c:	e9cd 132c 	strd	r1, r3, [sp, #176]	; 0xb0
      data->per_channel_output_shift, GetTensorShape(input),
    a630:	a80a      	add	r0, sp, #40	; 0x28
    a632:	4631      	mov	r1, r6
    a634:	e9d2 9a06 	ldrd	r9, sl, [r2, #24]
    a638:	f00b f98d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    a63c:	6873      	ldr	r3, [r6, #4]
    a63e:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
    a640:	ae10      	add	r6, sp, #64	; 0x40
    a642:	4629      	mov	r1, r5
    a644:	4630      	mov	r0, r6
    a646:	f00b f986 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a64a:	b105      	cbz	r5, a64e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18e>
    a64c:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
    a64e:	af16      	add	r7, sp, #88	; 0x58
    a650:	4621      	mov	r1, r4
    a652:	4638      	mov	r0, r7
    a654:	f00b f97f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a658:	b104      	cbz	r4, a65c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    a65a:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
    a65c:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    a660:	4659      	mov	r1, fp
    a662:	4640      	mov	r0, r8
    a664:	f00b f977 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
    a668:	f8db 3004 	ldr.w	r3, [fp, #4]
    a66c:	e9cd 8305 	strd	r8, r3, [sp, #20]
    a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a672:	9300      	str	r3, [sp, #0]
    a674:	4652      	mov	r2, sl
    a676:	ab0a      	add	r3, sp, #40	; 0x28
    a678:	4649      	mov	r1, r9
    a67a:	a822      	add	r0, sp, #136	; 0x88
    a67c:	e9cd 7403 	strd	r7, r4, [sp, #12]
    a680:	e9cd 6501 	strd	r6, r5, [sp, #4]
    a684:	f00f f834 	bl	196f0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
    a688:	4640      	mov	r0, r8
    a68a:	f00b f91f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
    a68e:	4638      	mov	r0, r7
    a690:	f00b f91c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
    a694:	4630      	mov	r0, r6
    a696:	f00b f919 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
    a69a:	a80a      	add	r0, sp, #40	; 0x28
    a69c:	f00b f916 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    a6a0:	2000      	movs	r0, #0
}
    a6a2:	b033      	add	sp, #204	; 0xcc
    a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.padding_type = PaddingType::kSame;
    a6a8:	2001      	movs	r0, #1
  const int32_t filter_offset = -filter->params.zero_point;
    a6aa:	6929      	ldr	r1, [r5, #16]
  const int32_t input_offset = -input->params.zero_point;
    a6ac:	6937      	ldr	r7, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
    a6ae:	f8db c010 	ldr.w	ip, [fp, #16]
  op_params.padding_type = PaddingType::kSame;
    a6b2:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
    a6b6:	6810      	ldr	r0, [r2, #0]
    a6b8:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
    a6bc:	6850      	ldr	r0, [r2, #4]
    a6be:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
    a6c2:	6858      	ldr	r0, [r3, #4]
    a6c4:	f8ad 0092 	strh.w	r0, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
    a6c8:	6898      	ldr	r0, [r3, #8]
    a6ca:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
    a6ce:	6958      	ldr	r0, [r3, #20]
    a6d0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
    a6d4:	6998      	ldr	r0, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    a6d6:	68db      	ldr	r3, [r3, #12]
    a6d8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.quantized_activation_min = data->output_activation_min;
    a6dc:	6a13      	ldr	r3, [r2, #32]
    a6de:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data->output_activation_max;
    a6e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a6e2:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_multiplier = data->output_multiplier;
    a6e4:	6913      	ldr	r3, [r2, #16]
    a6e6:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.output_shift = -data->output_shift;
    a6e8:	6953      	ldr	r3, [r2, #20]
  op_params.dilation_height_factor = params->dilation_height_factor;
    a6ea:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  const int32_t input_offset = -input->params.zero_point;
    a6ee:	427f      	negs	r7, r7
  const int32_t filter_offset = -filter->params.zero_point;
    a6f0:	4249      	negs	r1, r1
  op_params.weights_offset = filter_offset;
    a6f2:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
  op_params.output_shift = -data->output_shift;
    a6f6:	425b      	negs	r3, r3
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a6f8:	4631      	mov	r1, r6
    a6fa:	a80a      	add	r0, sp, #40	; 0x28
  op_params.output_offset = output_offset;
    a6fc:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
  op_params.output_shift = -data->output_shift;
    a700:	932b      	str	r3, [sp, #172]	; 0xac
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a702:	f00b f928 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
    a706:	4629      	mov	r1, r5
    a708:	a810      	add	r0, sp, #64	; 0x40
    a70a:	6877      	ldr	r7, [r6, #4]
    a70c:	f00b f923 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a710:	f8d5 8004 	ldr.w	r8, [r5, #4]
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a714:	ad16      	add	r5, sp, #88	; 0x58
    a716:	4621      	mov	r1, r4
    a718:	4628      	mov	r0, r5
    a71a:	f00b f91c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a71e:	b104      	cbz	r4, a722 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    a720:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
    a722:	ae1c      	add	r6, sp, #112	; 0x70
    a724:	4659      	mov	r1, fp
    a726:	4630      	mov	r0, r6
    a728:	f00b f915 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
    a72c:	f8db 3004 	ldr.w	r3, [fp, #4]
    a730:	f8cd 8000 	str.w	r8, [sp]
    a734:	e9cd 6303 	strd	r6, r3, [sp, #12]
    a738:	463a      	mov	r2, r7
    a73a:	ab10      	add	r3, sp, #64	; 0x40
    a73c:	a90a      	add	r1, sp, #40	; 0x28
    a73e:	a822      	add	r0, sp, #136	; 0x88
    a740:	e9cd 5401 	strd	r5, r4, [sp, #4]
    a744:	f00f f8ee 	bl	19924 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>
    a748:	4630      	mov	r0, r6
    a74a:	f00b f8bf 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    a74e:	4628      	mov	r0, r5
    a750:	e73d      	b.n	a5ce <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    a752:	f8d8 4014 	ldr.w	r4, [r8, #20]
    a756:	f7f6 f8ac 	bl	8b2 <TfLiteTypeGetName>
    a75a:	f817 3009 	ldrb.w	r3, [r7, r9]
    a75e:	4906      	ldr	r1, [pc, #24]	; (a778 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    a760:	4602      	mov	r2, r0
    a762:	4640      	mov	r0, r8
    a764:	47a0      	blx	r4
      return kTfLiteError;
    a766:	2001      	movs	r0, #1
    a768:	e79b      	b.n	a6a2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    a76a:	bf00      	nop
    a76c:	7f7fffff 	.word	0x7f7fffff
    a770:	ff7fffff 	.word	0xff7fffff
    a774:	00000000 	.word	0x00000000
    a778:	00027ac7 	.word	0x00027ac7

0000a77c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a77c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a780:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a782:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a784:	b90f      	cbnz	r7, a78a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    a786:	f013 ff35 	bl	1e5f4 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    a78a:	f8d1 c000 	ldr.w	ip, [r1]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    a78e:	f8dc 6000 	ldr.w	r6, [ip]
    a792:	2e01      	cmp	r6, #1
    a794:	d00f      	beq.n	a7b6 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    a796:	2401      	movs	r4, #1
    a798:	4b31      	ldr	r3, [pc, #196]	; (a860 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    a79a:	9301      	str	r3, [sp, #4]
    a79c:	e9cd 6402 	strd	r6, r4, [sp, #8]
    a7a0:	4b30      	ldr	r3, [pc, #192]	; (a864 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
    a7a2:	9300      	str	r3, [sp, #0]
    a7a4:	6945      	ldr	r5, [r0, #20]
    a7a6:	4a30      	ldr	r2, [pc, #192]	; (a868 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a7a8:	4930      	ldr	r1, [pc, #192]	; (a86c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
    a7aa:	2334      	movs	r3, #52	; 0x34
    a7ac:	47a8      	blx	r5
  TfLiteTensor* output = GetOutput(context, node, 0);

  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
                              input->type == kTfLiteInt8 ||
                              input->type == kTfLiteInt16);
  TF_LITE_ENSURE(
    a7ae:	2001      	movs	r0, #1
        static_cast<double>(output->params.scale);
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
    a7b0:	b004      	add	sp, #16
    a7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    a7b6:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    a7b8:	6814      	ldr	r4, [r2, #0]
    a7ba:	2c01      	cmp	r4, #1
    a7bc:	d00b      	beq.n	a7d6 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    a7be:	e9cd 4602 	strd	r4, r6, [sp, #8]
    a7c2:	4b27      	ldr	r3, [pc, #156]	; (a860 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    a7c4:	9301      	str	r3, [sp, #4]
    a7c6:	4b2a      	ldr	r3, [pc, #168]	; (a870 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    a7c8:	9300      	str	r3, [sp, #0]
    a7ca:	6944      	ldr	r4, [r0, #20]
    a7cc:	4a26      	ldr	r2, [pc, #152]	; (a868 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a7ce:	4927      	ldr	r1, [pc, #156]	; (a86c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
    a7d0:	2335      	movs	r3, #53	; 0x35
    a7d2:	47a0      	blx	r4
    a7d4:	e7eb      	b.n	a7ae <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
    a7d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    a7da:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    a7dc:	6856      	ldr	r6, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
    a7de:	ea4f 1e81 	mov.w	lr, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a7e2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
    a7e6:	f813 200e 	ldrb.w	r2, [r3, lr]
    a7ea:	f002 0efb 	and.w	lr, r2, #251	; 0xfb
    a7ee:	f1be 0f03 	cmp.w	lr, #3
  return &context->tensors[node->inputs->data[index]];
    a7f2:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a7f6:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    a7fa:	d009      	beq.n	a810 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
    a7fc:	2a09      	cmp	r2, #9
    a7fe:	d007      	beq.n	a810 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
    a800:	4b1c      	ldr	r3, [pc, #112]	; (a874 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    a802:	9300      	str	r3, [sp, #0]
    a804:	6945      	ldr	r5, [r0, #20]
    a806:	4a18      	ldr	r2, [pc, #96]	; (a868 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a808:	491b      	ldr	r1, [pc, #108]	; (a878 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    a80a:	233b      	movs	r3, #59	; 0x3b
    a80c:	47a8      	blx	r5
    a80e:	e7ce      	b.n	a7ae <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE(
    a810:	f813 300c 	ldrb.w	r3, [r3, ip]
    a814:	1e5a      	subs	r2, r3, #1
    a816:	2a01      	cmp	r2, #1
    a818:	d908      	bls.n	a82c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    a81a:	4b18      	ldr	r3, [pc, #96]	; (a87c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    a81c:	9300      	str	r3, [sp, #0]
    a81e:	696c      	ldr	r4, [r5, #20]
    a820:	4a11      	ldr	r2, [pc, #68]	; (a868 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    a822:	4915      	ldr	r1, [pc, #84]	; (a878 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    a824:	233e      	movs	r3, #62	; 0x3e
    a826:	4628      	mov	r0, r5
    a828:	47a0      	blx	r4
    a82a:	e7c0      	b.n	a7ae <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  if (output->type == kTfLiteInt32) {
    a82c:	2b02      	cmp	r3, #2
    a82e:	d115      	bne.n	a85c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
        static_cast<double>(input->params.scale) /
    a830:	68c8      	ldr	r0, [r1, #12]
    a832:	f7f6 fa19 	bl	c68 <__aeabi_f2d>
    a836:	4604      	mov	r4, r0
        static_cast<double>(output->params.scale);
    a838:	68f0      	ldr	r0, [r6, #12]
        static_cast<double>(input->params.scale) /
    a83a:	460d      	mov	r5, r1
        static_cast<double>(output->params.scale);
    a83c:	f7f6 fa14 	bl	c68 <__aeabi_f2d>
    a840:	4602      	mov	r2, r0
    a842:	460b      	mov	r3, r1
    const double effective_output_scale =
    a844:	4620      	mov	r0, r4
    a846:	4629      	mov	r1, r5
    a848:	f7f6 fb90 	bl	f6c <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    a84c:	f107 0804 	add.w	r8, r7, #4
    const double effective_output_scale =
    a850:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    a854:	4641      	mov	r1, r8
    a856:	4638      	mov	r0, r7
    a858:	f006 ff6a 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
    a85c:	2000      	movs	r0, #0
    a85e:	e7a7      	b.n	a7b0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
    a860:	0002880d 	.word	0x0002880d
    a864:	00027b8d 	.word	0x00027b8d
    a868:	0002803b 	.word	0x0002803b
    a86c:	00027b73 	.word	0x00027b73
    a870:	00027b9d 	.word	0x00027b9d
    a874:	00028067 	.word	0x00028067
    a878:	000272d2 	.word	0x000272d2
    a87c:	000280c0 	.word	0x000280c0

0000a880 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    a884:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    a888:	b08f      	sub	sp, #60	; 0x3c
    a88a:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    a88c:	f1b8 0f00 	cmp.w	r8, #0
    a890:	d101      	bne.n	a896 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16>
    a892:	f013 feaf 	bl	1e5f4 <abort>
  return &context->tensors[node->inputs->data[index]];
    a896:	680a      	ldr	r2, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
    a898:	6849      	ldr	r1, [r1, #4]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
    a89a:	f8d0 b008 	ldr.w	fp, [r0, #8]
    a89e:	684d      	ldr	r5, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    a8a0:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    a8a2:	ea4f 1a85 	mov.w	sl, r5, lsl #6
  return &context->tensors[node->inputs->data[index]];
    a8a6:	01a2      	lsls	r2, r4, #6
  TfLiteTensor* output = GetOutput(context, node, 0);

  if (output->type == kTfLiteFloat32) {
    a8a8:	f81b 700a 	ldrb.w	r7, [fp, sl]
    a8ac:	2f01      	cmp	r7, #1
    a8ae:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    a8b2:	eb0b 1585 	add.w	r5, fp, r5, lsl #6
    a8b6:	f040 808e 	bne.w	a9d6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x156>
    tflite::DequantizationParams op_params;
    op_params.zero_point = input->params.zero_point;
    a8ba:	6923      	ldr	r3, [r4, #16]
    op_params.scale = static_cast<double>(input->params.scale);
    a8bc:	68e0      	ldr	r0, [r4, #12]
    a8be:	9201      	str	r2, [sp, #4]
    op_params.zero_point = input->params.zero_point;
    a8c0:	9300      	str	r3, [sp, #0]
    op_params.scale = static_cast<double>(input->params.scale);
    a8c2:	f7f6 f9d1 	bl	c68 <__aeabi_f2d>
    switch (input->type) {
    a8c6:	9a01      	ldr	r2, [sp, #4]
    op_params.scale = static_cast<double>(input->params.scale);
    a8c8:	4680      	mov	r8, r0
    switch (input->type) {
    a8ca:	f81b 0002 	ldrb.w	r0, [fp, r2]
    a8ce:	2807      	cmp	r0, #7
    op_params.scale = static_cast<double>(input->params.scale);
    a8d0:	4689      	mov	r9, r1
    switch (input->type) {
    a8d2:	d045      	beq.n	a960 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
    a8d4:	2809      	cmp	r0, #9
    a8d6:	d022      	beq.n	a91e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    a8d8:	2803      	cmp	r0, #3
    a8da:	d16b      	bne.n	a9b4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x134>
      case kTfLiteUInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    a8dc:	4621      	mov	r1, r4
    a8de:	a802      	add	r0, sp, #8
    a8e0:	f00b f839 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a8e4:	4629      	mov	r1, r5
    a8e6:	a808      	add	r0, sp, #32
    a8e8:	6867      	ldr	r7, [r4, #4]
    a8ea:	f00b f834 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a8ee:	a908      	add	r1, sp, #32
    a8f0:	a802      	add	r0, sp, #8
    a8f2:	f00b f807 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a8f6:	686d      	ldr	r5, [r5, #4]
    a8f8:	4606      	mov	r6, r0

  for (int i = 0; i < flat_size; i++) {
    a8fa:	2400      	movs	r4, #0
    a8fc:	42a6      	cmp	r6, r4
    a8fe:	dd51      	ble.n	a9a4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a900:	5d38      	ldrb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a902:	9b00      	ldr	r3, [sp, #0]
    a904:	1ac0      	subs	r0, r0, r3
    a906:	f7f6 f99d 	bl	c44 <__aeabi_i2d>
    a90a:	4642      	mov	r2, r8
    a90c:	464b      	mov	r3, r9
    a90e:	f7f6 fa03 	bl	d18 <__aeabi_dmul>
    a912:	f7f6 fcc3 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a916:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a918:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a91c:	e7ee      	b.n	a8fc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        break;
      case kTfLiteInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    a91e:	4621      	mov	r1, r4
    a920:	a802      	add	r0, sp, #8
    a922:	f00b f818 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a926:	4629      	mov	r1, r5
    a928:	a808      	add	r0, sp, #32
    a92a:	6867      	ldr	r7, [r4, #4]
    a92c:	f00b f813 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a930:	a908      	add	r1, sp, #32
    a932:	a802      	add	r0, sp, #8
    a934:	f00a ffe6 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a938:	686d      	ldr	r5, [r5, #4]
    a93a:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    a93c:	2400      	movs	r4, #0
    a93e:	42a6      	cmp	r6, r4
    a940:	dd30      	ble.n	a9a4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a942:	5738      	ldrsb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a944:	9b00      	ldr	r3, [sp, #0]
    a946:	1ac0      	subs	r0, r0, r3
    a948:	f7f6 f97c 	bl	c44 <__aeabi_i2d>
    a94c:	4642      	mov	r2, r8
    a94e:	464b      	mov	r3, r9
    a950:	f7f6 f9e2 	bl	d18 <__aeabi_dmul>
    a954:	f7f6 fca2 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a958:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a95a:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a95e:	e7ee      	b.n	a93e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        break;
      case kTfLiteInt16:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
    a960:	4621      	mov	r1, r4
    a962:	a802      	add	r0, sp, #8
    a964:	f00a fff7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
    a968:	4629      	mov	r1, r5
    a96a:	a808      	add	r0, sp, #32
    a96c:	6867      	ldr	r7, [r4, #4]
    a96e:	f00a fff2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    a972:	a908      	add	r1, sp, #32
    a974:	a802      	add	r0, sp, #8
    a976:	f00a ffc5 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a97a:	686d      	ldr	r5, [r5, #4]
    a97c:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    a97e:	2400      	movs	r4, #0
    a980:	42a6      	cmp	r6, r4
    a982:	dd0f      	ble.n	a9a4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
    a984:	f937 0014 	ldrsh.w	r0, [r7, r4, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a988:	9b00      	ldr	r3, [sp, #0]
    a98a:	1ac0      	subs	r0, r0, r3
    a98c:	f7f6 f95a 	bl	c44 <__aeabi_i2d>
    a990:	4642      	mov	r2, r8
    a992:	464b      	mov	r3, r9
    a994:	f7f6 f9c0 	bl	d18 <__aeabi_dmul>
    a998:	f7f6 fc80 	bl	129c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
    a99c:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    a99e:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
    a9a2:	e7ed      	b.n	a980 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x100>
    a9a4:	a808      	add	r0, sp, #32
    a9a6:	f00a ff91 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
    a9aa:	a802      	add	r0, sp, #8
    a9ac:	f00a ff8e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    a9b0:	2700      	movs	r7, #0
    a9b2:	e00c      	b.n	a9ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a9b4:	6974      	ldr	r4, [r6, #20]
    a9b6:	f7f5 ff7c 	bl	8b2 <TfLiteTypeGetName>
    a9ba:	9000      	str	r0, [sp, #0]
    a9bc:	f81b 000a 	ldrb.w	r0, [fp, sl]
    a9c0:	f7f5 ff77 	bl	8b2 <TfLiteTypeGetName>
    a9c4:	9a00      	ldr	r2, [sp, #0]
    a9c6:	4934      	ldr	r1, [pc, #208]	; (aa98 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    a9c8:	4603      	mov	r3, r0
    a9ca:	4630      	mov	r0, r6
    a9cc:	47a0      	blx	r4
}
    a9ce:	4638      	mov	r0, r7
    a9d0:	b00f      	add	sp, #60	; 0x3c
    a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt32) {
    a9d6:	2f02      	cmp	r7, #2
    a9d8:	d159      	bne.n	aa8e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
        MatchingFlatSize(GetTensorShape(input), GetTensorShape(output));
    a9da:	4621      	mov	r1, r4
    a9dc:	a802      	add	r0, sp, #8
    a9de:	9200      	str	r2, [sp, #0]
    a9e0:	f00a ffb9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a9e4:	4629      	mov	r1, r5
    a9e6:	a808      	add	r0, sp, #32
    a9e8:	f00a ffb5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    a9ec:	a908      	add	r1, sp, #32
    a9ee:	a802      	add	r0, sp, #8
    a9f0:	f00a ff88 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    a9f4:	4607      	mov	r7, r0
    a9f6:	a808      	add	r0, sp, #32
    a9f8:	f00a ff68 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    a9fc:	a802      	add	r0, sp, #8
    a9fe:	f00a ff65 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    switch (input->type) {
    aa02:	9a00      	ldr	r2, [sp, #0]
    aa04:	f81b 0002 	ldrb.w	r0, [fp, r2]
    aa08:	2807      	cmp	r0, #7
    aa0a:	d010      	beq.n	aa2e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
    aa0c:	2809      	cmp	r0, #9
    aa0e:	d026      	beq.n	aa5e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    aa10:	6974      	ldr	r4, [r6, #20]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    aa12:	f7f5 ff4e 	bl	8b2 <TfLiteTypeGetName>
    aa16:	9000      	str	r0, [sp, #0]
    aa18:	f81b 000a 	ldrb.w	r0, [fp, sl]
    aa1c:	f7f5 ff49 	bl	8b2 <TfLiteTypeGetName>
    aa20:	9a00      	ldr	r2, [sp, #0]
    aa22:	491d      	ldr	r1, [pc, #116]	; (aa98 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    aa24:	4603      	mov	r3, r0
    aa26:	4630      	mov	r0, r6
    aa28:	47a0      	blx	r4
    return kTfLiteError;
    aa2a:	2701      	movs	r7, #1
    aa2c:	e7cf      	b.n	a9ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        reference_ops::Requantize(
    aa2e:	692e      	ldr	r6, [r5, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa30:	686d      	ldr	r5, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    aa32:	f8d4 9004 	ldr.w	r9, [r4, #4]
    aa36:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
    aa3a:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa3e:	2400      	movs	r4, #0
      }
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
    aa40:	42a7      	cmp	r7, r4
    aa42:	ddb5      	ble.n	a9b0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
    aa44:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    aa48:	465a      	mov	r2, fp
    aa4a:	4651      	mov	r1, sl
    aa4c:	eba0 0008 	sub.w	r0, r0, r8
    aa50:	f7fe ff24 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    aa54:	4430      	add	r0, r6
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
    aa56:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
    aa5a:	3401      	adds	r4, #1
    aa5c:	e7f0      	b.n	aa40 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
        reference_ops::Requantize(
    aa5e:	692e      	ldr	r6, [r5, #16]
    aa60:	686d      	ldr	r5, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    aa62:	f8d4 9004 	ldr.w	r9, [r4, #4]
    aa66:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
    aa6a:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    aa6e:	2400      	movs	r4, #0
    aa70:	42a7      	cmp	r7, r4
    aa72:	dd9d      	ble.n	a9b0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
    aa74:	f919 0004 	ldrsb.w	r0, [r9, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    aa78:	465a      	mov	r2, fp
    aa7a:	4651      	mov	r1, sl
    aa7c:	eba0 0008 	sub.w	r0, r0, r8
    aa80:	f7fe ff0c 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    aa84:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
    aa86:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
    aa8a:	3401      	adds	r4, #1
    aa8c:	e7f0      	b.n	aa70 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    aa8e:	6944      	ldr	r4, [r0, #20]
    aa90:	f81b 0002 	ldrb.w	r0, [fp, r2]
    aa94:	e7bd      	b.n	aa12 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x192>
    aa96:	bf00      	nop
    aa98:	000280ff 	.word	0x000280ff

0000aa9c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    aa9c:	4800      	ldr	r0, [pc, #0]	; (aaa0 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x4>)
    aa9e:	4770      	bx	lr
    aaa0:	20000248 	.word	0x20000248

0000aaa4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
  return type == kTfLiteBool;
}

typedef bool (*IsSupportedType)(TfLiteType);
template <IsSupportedType>
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
    aaa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    aaa8:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    aaaa:	6816      	ldr	r6, [r2, #0]
    aaac:	2e01      	cmp	r6, #1
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
    aaae:	b085      	sub	sp, #20
    aab0:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    aab2:	d00f      	beq.n	aad4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x30>
    aab4:	2401      	movs	r4, #1
    aab6:	4b27      	ldr	r3, [pc, #156]	; (ab54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
    aab8:	9301      	str	r3, [sp, #4]
    aaba:	e9cd 6402 	strd	r6, r4, [sp, #8]
    aabe:	4b26      	ldr	r3, [pc, #152]	; (ab58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb4>)
    aac0:	9300      	str	r3, [sp, #0]
    aac2:	6945      	ldr	r5, [r0, #20]
    aac4:	4a25      	ldr	r2, [pc, #148]	; (ab5c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    aac6:	4926      	ldr	r1, [pc, #152]	; (ab60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
    aac8:	2327      	movs	r3, #39	; 0x27
    aaca:	47a8      	blx	r5
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
                       TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
  }
  return kTfLiteOk;
}
    aacc:	4620      	mov	r0, r4
    aace:	b005      	add	sp, #20
    aad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    aad4:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    aad6:	681c      	ldr	r4, [r3, #0]
    aad8:	2c01      	cmp	r4, #1
    aada:	d00c      	beq.n	aaf6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x52>
    aadc:	e9cd 4602 	strd	r4, r6, [sp, #8]
    aae0:	4b1c      	ldr	r3, [pc, #112]	; (ab54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
    aae2:	9301      	str	r3, [sp, #4]
    aae4:	4b1f      	ldr	r3, [pc, #124]	; (ab64 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc0>)
    aae6:	9300      	str	r3, [sp, #0]
    aae8:	6944      	ldr	r4, [r0, #20]
    aaea:	4a1c      	ldr	r2, [pc, #112]	; (ab5c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    aaec:	491c      	ldr	r1, [pc, #112]	; (ab60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
    aaee:	2328      	movs	r3, #40	; 0x28
    aaf0:	47a0      	blx	r4
    aaf2:	4634      	mov	r4, r6
    aaf4:	e7ea      	b.n	aacc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return &context->tensors[node->outputs->data[index]];
    aaf6:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    aaf8:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    aafa:	6887      	ldr	r7, [r0, #8]
    aafc:	01b6      	lsls	r6, r6, #6
  return &context->tensors[node->outputs->data[index]];
    aafe:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    ab02:	5db8      	ldrb	r0, [r7, r6]
    ab04:	f817 3008 	ldrb.w	r3, [r7, r8]
    ab08:	4283      	cmp	r3, r0
    ab0a:	d014      	beq.n	ab36 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x92>
    ab0c:	f8d5 9014 	ldr.w	r9, [r5, #20]
    ab10:	f7f5 fecf 	bl	8b2 <TfLiteTypeGetName>
    ab14:	4606      	mov	r6, r0
    ab16:	f817 0008 	ldrb.w	r0, [r7, r8]
    ab1a:	f7f5 feca 	bl	8b2 <TfLiteTypeGetName>
    ab1e:	4b12      	ldr	r3, [pc, #72]	; (ab68 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
    ab20:	9301      	str	r3, [sp, #4]
    ab22:	4b12      	ldr	r3, [pc, #72]	; (ab6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc8>)
    ab24:	9300      	str	r3, [sp, #0]
    ab26:	e9cd 6002 	strd	r6, r0, [sp, #8]
    ab2a:	4a0c      	ldr	r2, [pc, #48]	; (ab5c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
    ab2c:	4910      	ldr	r1, [pc, #64]	; (ab70 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
    ab2e:	232b      	movs	r3, #43	; 0x2b
    ab30:	4628      	mov	r0, r5
    ab32:	47c8      	blx	r9
    ab34:	e7ca      	b.n	aacc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  if (!IsSupportedType(input->type)) {
    ab36:	b953      	cbnz	r3, ab4e <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
    ab38:	4618      	mov	r0, r3
    ab3a:	f8d5 8014 	ldr.w	r8, [r5, #20]
    ab3e:	f7f5 feb8 	bl	8b2 <TfLiteTypeGetName>
    ab42:	5dbb      	ldrb	r3, [r7, r6]
    ab44:	490b      	ldr	r1, [pc, #44]	; (ab74 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd0>)
    ab46:	4602      	mov	r2, r0
    ab48:	4628      	mov	r0, r5
    ab4a:	47c0      	blx	r8
    return kTfLiteError;
    ab4c:	e7be      	b.n	aacc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return kTfLiteOk;
    ab4e:	2400      	movs	r4, #0
    ab50:	e7bc      	b.n	aacc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
    ab52:	bf00      	nop
    ab54:	0002880d 	.word	0x0002880d
    ab58:	00027b8d 	.word	0x00027b8d
    ab5c:	00028122 	.word	0x00028122
    ab60:	00027b73 	.word	0x00027b73
    ab64:	00027b9d 	.word	0x00027b9d
    ab68:	00028380 	.word	0x00028380
    ab6c:	00028398 	.word	0x00028398
    ab70:	00027bae 	.word	0x00027bae
    ab74:	0002814f 	.word	0x0002814f

0000ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>:

template <typename T>
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
    ab78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ab7c:	4692      	mov	sl, r2
  return &context->tensors[node->inputs->data[index]];
    ab7e:	680a      	ldr	r2, [r1, #0]
                             T func(T), TfLiteType expected_type) {
  const TfLiteTensor* input = GetInput(context, node, 0);
    ab80:	6883      	ldr	r3, [r0, #8]
    ab82:	6854      	ldr	r4, [r2, #4]
    ab84:	01a2      	lsls	r2, r4, #6
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
    ab86:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
    ab88:	5c98      	ldrb	r0, [r3, r2]
    ab8a:	2801      	cmp	r0, #1
    ab8c:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    ab90:	d015      	beq.n	abbe <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x46>
    ab92:	696e      	ldr	r6, [r5, #20]
    ab94:	f7f5 fe8d 	bl	8b2 <TfLiteTypeGetName>
    ab98:	4604      	mov	r4, r0
    ab9a:	2001      	movs	r0, #1
    ab9c:	f7f5 fe89 	bl	8b2 <TfLiteTypeGetName>
    aba0:	4b1f      	ldr	r3, [pc, #124]	; (ac20 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa8>)
    aba2:	9301      	str	r3, [sp, #4]
    aba4:	4b1f      	ldr	r3, [pc, #124]	; (ac24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xac>)
    aba6:	9300      	str	r3, [sp, #0]
    aba8:	e9cd 4002 	strd	r4, r0, [sp, #8]
    abac:	4a1e      	ldr	r2, [pc, #120]	; (ac28 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb0>)
    abae:	491f      	ldr	r1, [pc, #124]	; (ac2c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb4>)
    abb0:	4628      	mov	r0, r5
    abb2:	2339      	movs	r3, #57	; 0x39
    abb4:	47b0      	blx	r6
    abb6:	2001      	movs	r0, #1
  T* out_data = GetTensorData<T>(output);
  for (int64_t i = 0; i < num_elements; ++i) {
    out_data[i] = func(in_data[i]);
  }
  return kTfLiteOk;
}
    abb8:	b004      	add	sp, #16
    abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
    abbe:	68a2      	ldr	r2, [r4, #8]
    abc0:	f852 eb04 	ldr.w	lr, [r2], #4
    abc4:	2000      	movs	r0, #0
  int64_t count = 1;
    abc6:	f04f 0801 	mov.w	r8, #1
    abca:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < dims->size; ++i) {
    abce:	4586      	cmp	lr, r0
    abd0:	dd0c      	ble.n	abec <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x74>
    count *= dims->data[i];
    abd2:	f852 cb04 	ldr.w	ip, [r2], #4
    abd6:	4666      	mov	r6, ip
    abd8:	17f7      	asrs	r7, r6, #31
    abda:	fb08 f507 	mul.w	r5, r8, r7
    abde:	fb0c 5509 	mla	r5, ip, r9, r5
    abe2:	fba8 890c 	umull	r8, r9, r8, ip
    abe6:	44a9      	add	r9, r5
  for (int i = 0; i < dims->size; ++i) {
    abe8:	3001      	adds	r0, #1
    abea:	e7f0      	b.n	abce <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x56>
  return &context->tensors[node->outputs->data[index]];
    abec:	684a      	ldr	r2, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    abee:	6865      	ldr	r5, [r4, #4]
    abf0:	6852      	ldr	r2, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    abf2:	eb13 1482 	adds.w	r4, r3, r2, lsl #6
  for (int64_t i = 0; i < num_elements; ++i) {
    abf6:	f04f 0600 	mov.w	r6, #0
    abfa:	bf18      	it	ne
    abfc:	6864      	ldrne	r4, [r4, #4]
    abfe:	2700      	movs	r7, #0
    ac00:	4546      	cmp	r6, r8
    ac02:	eb77 0309 	sbcs.w	r3, r7, r9
    ac06:	da08      	bge.n	ac1a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa2>
    out_data[i] = func(in_data[i]);
    ac08:	ecb5 0a01 	vldmia	r5!, {s0}
    ac0c:	47d0      	blx	sl
  for (int64_t i = 0; i < num_elements; ++i) {
    ac0e:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
    ac10:	eca4 0a01 	vstmia	r4!, {s0}
  for (int64_t i = 0; i < num_elements; ++i) {
    ac14:	f147 0700 	adc.w	r7, r7, #0
    ac18:	e7f2      	b.n	ac00 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x88>
  return kTfLiteOk;
    ac1a:	2000      	movs	r0, #0
    ac1c:	e7cc      	b.n	abb8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x40>
    ac1e:	bf00      	nop
    ac20:	00028179 	.word	0x00028179
    ac24:	00028398 	.word	0x00028398
    ac28:	00028122 	.word	0x00028122
    ac2c:	00027bae 	.word	0x00027bae

0000ac30 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:

inline TfLiteStatus EvalNumeric(TfLiteContext* context, TfLiteNode* node,
                                float float_func(float)) {
  return EvalImpl<float>(context, node, float_func, kTfLiteFloat32);
    ac30:	4a01      	ldr	r2, [pc, #4]	; (ac38 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac32:	f7ff bfa1 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac36:	bf00      	nop
    ac38:	00019b8f 	.word	0x00019b8f

0000ac3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
    ac3c:	4a01      	ldr	r2, [pc, #4]	; (ac44 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac3e:	f7ff bf9b 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac42:	bf00      	nop
    ac44:	00019b89 	.word	0x00019b89

0000ac48 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
    ac48:	4a01      	ldr	r2, [pc, #4]	; (ac50 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac4a:	f7ff bf95 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac4e:	bf00      	nop
    ac50:	00019b99 	.word	0x00019b99

0000ac54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
    ac54:	4a01      	ldr	r2, [pc, #4]	; (ac5c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac56:	f7ff bf8f 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac5a:	bf00      	nop
    ac5c:	00019b9d 	.word	0x00019b9d

0000ac60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
    ac60:	4a01      	ldr	r2, [pc, #4]	; (ac68 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac62:	f7ff bf89 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac66:	bf00      	nop
    ac68:	00019bab 	.word	0x00019bab

0000ac6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
    ac6c:	4a01      	ldr	r2, [pc, #4]	; (ac74 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac6e:	f7ff bf83 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac72:	bf00      	nop
    ac74:	00019ba1 	.word	0x00019ba1

0000ac78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
    ac78:	4a01      	ldr	r2, [pc, #4]	; (ac80 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    ac7a:	f7ff bf7d 	b.w	ab78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
    ac7e:	bf00      	nop
    ac80:	00019ba5 	.word	0x00019ba5

0000ac84 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
    ac84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
    ac88:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, 0);
    ac8a:	6883      	ldr	r3, [r0, #8]
    ac8c:	6852      	ldr	r2, [r2, #4]
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
    ac8e:	4604      	mov	r4, r0
    ac90:	0190      	lsls	r0, r2, #6
    ac92:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
    ac96:	5c18      	ldrb	r0, [r3, r0]
    ac98:	2806      	cmp	r0, #6
    ac9a:	d015      	beq.n	acc8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
    ac9c:	6966      	ldr	r6, [r4, #20]
    ac9e:	f7f5 fe08 	bl	8b2 <TfLiteTypeGetName>
    aca2:	4605      	mov	r5, r0
    aca4:	2006      	movs	r0, #6
    aca6:	f7f5 fe04 	bl	8b2 <TfLiteTypeGetName>
    acaa:	4b1f      	ldr	r3, [pc, #124]	; (ad28 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa4>)
    acac:	9301      	str	r3, [sp, #4]
    acae:	4b1f      	ldr	r3, [pc, #124]	; (ad2c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    acb0:	9300      	str	r3, [sp, #0]
    acb2:	e9cd 5002 	strd	r5, r0, [sp, #8]
    acb6:	4a1e      	ldr	r2, [pc, #120]	; (ad30 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    acb8:	491e      	ldr	r1, [pc, #120]	; (ad34 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    acba:	4620      	mov	r0, r4
    acbc:	2339      	movs	r3, #57	; 0x39
    acbe:	47b0      	blx	r6
    acc0:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
    acc2:	b004      	add	sp, #16
    acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < dims->size; ++i) {
    acc8:	6890      	ldr	r0, [r2, #8]
    acca:	f850 8b04 	ldr.w	r8, [r0], #4
    acce:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    acd2:	2401      	movs	r4, #1
    acd4:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
    acd6:	45e0      	cmp	r8, ip
    acd8:	dd0d      	ble.n	acf6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x72>
    count *= dims->data[i];
    acda:	f850 eb04 	ldr.w	lr, [r0], #4
    acde:	4676      	mov	r6, lr
    ace0:	17f7      	asrs	r7, r6, #31
    ace2:	fb04 f607 	mul.w	r6, r4, r7
    ace6:	fb0e 6605 	mla	r6, lr, r5, r6
    acea:	fba4 450e 	umull	r4, r5, r4, lr
    acee:	4435      	add	r5, r6
  for (int i = 0; i < dims->size; ++i) {
    acf0:	f10c 0c01 	add.w	ip, ip, #1
    acf4:	e7ef      	b.n	acd6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x52>
  return &context->tensors[node->outputs->data[index]];
    acf6:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    acf8:	6857      	ldr	r7, [r2, #4]
    acfa:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    acfc:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int64_t i = 0; i < num_elements; ++i) {
    ad00:	f04f 0200 	mov.w	r2, #0
    ad04:	bf18      	it	ne
    ad06:	6849      	ldrne	r1, [r1, #4]
    ad08:	2300      	movs	r3, #0
    ad0a:	42a2      	cmp	r2, r4
    ad0c:	eb73 0005 	sbcs.w	r0, r3, r5
    ad10:	da07      	bge.n	ad22 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return EvalLogical(context, node, [](bool v) { return !v; });
    ad12:	5cb8      	ldrb	r0, [r7, r2]
    ad14:	f080 0001 	eor.w	r0, r0, #1
    out_data[i] = func(in_data[i]);
    ad18:	5488      	strb	r0, [r1, r2]
  for (int64_t i = 0; i < num_elements; ++i) {
    ad1a:	3201      	adds	r2, #1
    ad1c:	f143 0300 	adc.w	r3, r3, #0
    ad20:	e7f3      	b.n	ad0a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
    ad22:	2000      	movs	r0, #0
    ad24:	e7cd      	b.n	acc2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x3e>
    ad26:	bf00      	nop
    ad28:	00028179 	.word	0x00028179
    ad2c:	00028398 	.word	0x00028398
    ad30:	00028122 	.word	0x00028122
    ad34:	00027bae 	.word	0x00027bae

0000ad38 <_ZN6tflite3ops5micro12Register_ABSEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad38:	4800      	ldr	r0, [pc, #0]	; (ad3c <_ZN6tflite3ops5micro12Register_ABSEv+0x4>)
    ad3a:	4770      	bx	lr
    ad3c:	20000268 	.word	0x20000268

0000ad40 <_ZN6tflite3ops5micro12Register_SINEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad40:	4800      	ldr	r0, [pc, #0]	; (ad44 <_ZN6tflite3ops5micro12Register_SINEv+0x4>)
    ad42:	4770      	bx	lr
    ad44:	200002c8 	.word	0x200002c8

0000ad48 <_ZN6tflite3ops5micro12Register_COSEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad48:	4800      	ldr	r0, [pc, #0]	; (ad4c <_ZN6tflite3ops5micro12Register_COSEv+0x4>)
    ad4a:	4770      	bx	lr
    ad4c:	20000288 	.word	0x20000288

0000ad50 <_ZN6tflite3ops5micro12Register_LOGEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad50:	4800      	ldr	r0, [pc, #0]	; (ad54 <_ZN6tflite3ops5micro12Register_LOGEv+0x4>)
    ad52:	4770      	bx	lr
    ad54:	200002a8 	.word	0x200002a8

0000ad58 <_ZN6tflite3ops5micro13Register_SQRTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad58:	4800      	ldr	r0, [pc, #0]	; (ad5c <_ZN6tflite3ops5micro13Register_SQRTEv+0x4>)
    ad5a:	4770      	bx	lr
    ad5c:	200002e8 	.word	0x200002e8

0000ad60 <_ZN6tflite3ops5micro14Register_RSQRTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad60:	4800      	ldr	r0, [pc, #0]	; (ad64 <_ZN6tflite3ops5micro14Register_RSQRTEv+0x4>)
    ad62:	4770      	bx	lr
    ad64:	20000308 	.word	0x20000308

0000ad68 <_ZN6tflite3ops5micro15Register_SQUAREEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad68:	4800      	ldr	r0, [pc, #0]	; (ad6c <_ZN6tflite3ops5micro15Register_SQUAREEv+0x4>)
    ad6a:	4770      	bx	lr
    ad6c:	20000328 	.word	0x20000328

0000ad70 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    ad70:	4800      	ldr	r0, [pc, #0]	; (ad74 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x4>)
    ad72:	4770      	bx	lr
    ad74:	20000348 	.word	0x20000348

0000ad78 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>:
namespace ops {
namespace micro {
namespace custom {
TfLiteRegistration* Register_ETHOSU() { return nullptr; }

const char* GetString_ETHOSU() { return ""; }
    ad78:	4800      	ldr	r0, [pc, #0]	; (ad7c <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv+0x4>)
    ad7a:	4770      	bx	lr
    ad7c:	0002604b 	.word	0x0002604b

0000ad80 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    ad80:	680b      	ldr	r3, [r1, #0]
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad86:	685d      	ldr	r5, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ad88:	6884      	ldr	r4, [r0, #8]
    ad8a:	01ab      	lsls	r3, r5, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad8c:	4606      	mov	r6, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    ad8e:	5ce0      	ldrb	r0, [r4, r3]
    ad90:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ad92:	b090      	sub	sp, #64	; 0x40
    ad94:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    ad98:	d015      	beq.n	adc6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    ad9a:	6975      	ldr	r5, [r6, #20]
    ad9c:	f7f5 fd89 	bl	8b2 <TfLiteTypeGetName>
    ada0:	4604      	mov	r4, r0
    ada2:	2001      	movs	r0, #1
    ada4:	f7f5 fd85 	bl	8b2 <TfLiteTypeGetName>
    ada8:	4b2a      	ldr	r3, [pc, #168]	; (ae54 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
    adaa:	9301      	str	r3, [sp, #4]
    adac:	4b2a      	ldr	r3, [pc, #168]	; (ae58 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
    adae:	9300      	str	r3, [sp, #0]
    adb0:	e9cd 4002 	strd	r4, r0, [sp, #8]
    adb4:	4a29      	ldr	r2, [pc, #164]	; (ae5c <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
    adb6:	492a      	ldr	r1, [pc, #168]	; (ae60 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
    adb8:	4630      	mov	r0, r6
    adba:	2320      	movs	r3, #32
    adbc:	47a8      	blx	r5
    adbe:	2001      	movs	r0, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
    adc0:	b010      	add	sp, #64	; 0x40
    adc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
    adc6:	684b      	ldr	r3, [r1, #4]
    adc8:	685b      	ldr	r3, [r3, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
    adca:	4629      	mov	r1, r5
    adcc:	eb04 1483 	add.w	r4, r4, r3, lsl #6
    add0:	a804      	add	r0, sp, #16
    add2:	f00a fdc0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
    add6:	4621      	mov	r1, r4
    add8:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    adda:	f8d5 8004 	ldr.w	r8, [r5, #4]
    adde:	f00a fdba 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ade2:	b104      	cbz	r4, ade6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
    ade4:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    ade6:	9e04      	ldr	r6, [sp, #16]
    ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adea:	429e      	cmp	r6, r3
    adec:	d001      	beq.n	adf2 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x72>
    adee:	f013 fc01 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
    adf2:	2500      	movs	r5, #0
    adf4:	42ae      	cmp	r6, r5
    adf6:	dd0c      	ble.n	ae12 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    adf8:	4629      	mov	r1, r5
    adfa:	a804      	add	r0, sp, #16
    adfc:	f00a fd71 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    ae00:	4629      	mov	r1, r5
    ae02:	4607      	mov	r7, r0
    ae04:	a80a      	add	r0, sp, #40	; 0x28
    ae06:	f00a fd6c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    ae0a:	4287      	cmp	r7, r0
    ae0c:	d1ef      	bne.n	adee <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  for (int i = 0; i < dims_count; ++i) {
    ae0e:	3501      	adds	r5, #1
    ae10:	e7f0      	b.n	adf4 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ae12:	2e05      	cmp	r6, #5
    ae14:	bfcc      	ite	gt
    ae16:	9a05      	ldrgt	r2, [sp, #20]
    ae18:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
    ae1a:	2300      	movs	r3, #0
    int buffer_size = 1;
    ae1c:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
    ae1e:	429e      	cmp	r6, r3
    ae20:	dc0a      	bgt.n	ae38 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xb8>

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    ae22:	2600      	movs	r6, #0
    ae24:	42be      	cmp	r6, r7
    ae26:	da0c      	bge.n	ae42 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
    ae28:	ecb8 0a01 	vldmia	r8!, {s0}
    ae2c:	f007 f986 	bl	1213c <floorf>
    ae30:	3601      	adds	r6, #1
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
    ae32:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    ae36:	e7f5      	b.n	ae24 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
      buffer_size *= dims_data[i];
    ae38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    ae3c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    ae3e:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
    ae40:	e7ed      	b.n	ae1e <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    ae42:	a80a      	add	r0, sp, #40	; 0x28
    ae44:	f00a fd42 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
    ae48:	a804      	add	r0, sp, #16
    ae4a:	f00a fd3f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    ae4e:	2000      	movs	r0, #0
    ae50:	e7b6      	b.n	adc0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    ae52:	bf00      	nop
    ae54:	00027bc8 	.word	0x00027bc8
    ae58:	00028398 	.word	0x00028398
    ae5c:	00028187 	.word	0x00028187
    ae60:	00027bae 	.word	0x00027bae

0000ae64 <_ZN6tflite3ops5micro14Register_FLOOREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ae64:	4800      	ldr	r0, [pc, #0]	; (ae68 <_ZN6tflite3ops5micro14Register_FLOOREv+0x4>)
    ae66:	4770      	bx	lr
    ae68:	20000368 	.word	0x20000368

0000ae6c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ae6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    ae70:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ae72:	b089      	sub	sp, #36	; 0x24
    ae74:	4604      	mov	r4, r0
    ae76:	460a      	mov	r2, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    ae78:	b90f      	cbnz	r7, ae7e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    ae7a:	f013 fbbb 	bl	1e5f4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ae7e:	f8d1 9014 	ldr.w	r9, [r1, #20]
    ae82:	f1b9 0f00 	cmp.w	r9, #0
    ae86:	d0f8      	beq.n	ae7a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ae88:	f8d1 e000 	ldr.w	lr, [r1]
    ae8c:	6885      	ldr	r5, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
    ae8e:	f8de 3000 	ldr.w	r3, [lr]
  return &context->tensors[node->inputs->data[index]];
    ae92:	f8de 1004 	ldr.w	r1, [lr, #4]
  const bool use_tensor = index < node->inputs->size &&
    ae96:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    ae98:	ea4f 1081 	mov.w	r0, r1, lsl #6
    ae9c:	eb05 1181 	add.w	r1, r5, r1, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    aea0:	dd27      	ble.n	aef2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    aea2:	f8de 300c 	ldr.w	r3, [lr, #12]
  const bool use_tensor = index < node->inputs->size &&
    aea6:	1c5e      	adds	r6, r3, #1
    aea8:	d023      	beq.n	aef2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    return &context->tensors[node->inputs->data[index]];
    aeaa:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    aeae:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    aeb0:	5c28      	ldrb	r0, [r5, r0]
    aeb2:	6856      	ldr	r6, [r2, #4]
    aeb4:	ea4f 1886 	mov.w	r8, r6, lsl #6
    aeb8:	eb05 1686 	add.w	r6, r5, r6, lsl #6
    aebc:	f815 c008 	ldrb.w	ip, [r5, r8]
    aec0:	4584      	cmp	ip, r0
    aec2:	d018      	beq.n	aef6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    aec4:	6967      	ldr	r7, [r4, #20]
    aec6:	f7f5 fcf4 	bl	8b2 <TfLiteTypeGetName>
    aeca:	4606      	mov	r6, r0
    aecc:	f815 0008 	ldrb.w	r0, [r5, r8]
    aed0:	f7f5 fcef 	bl	8b2 <TfLiteTypeGetName>
    aed4:	4b22      	ldr	r3, [pc, #136]	; (af60 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    aed6:	9301      	str	r3, [sp, #4]
    aed8:	4b22      	ldr	r3, [pc, #136]	; (af64 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    aeda:	9300      	str	r3, [sp, #0]
    aedc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    aee0:	4a21      	ldr	r2, [pc, #132]	; (af68 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    aee2:	4922      	ldr	r1, [pc, #136]	; (af6c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    aee4:	2360      	movs	r3, #96	; 0x60
    aee6:	4620      	mov	r0, r4
    aee8:	47b8      	blx	r7
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    aeea:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
    aeec:	b009      	add	sp, #36	; 0x24
    aeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
    aef2:	2300      	movs	r3, #0
    aef4:	e7db      	b.n	aeae <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
    aef6:	f8de 2008 	ldr.w	r2, [lr, #8]
    aefa:	0190      	lsls	r0, r2, #6
    aefc:	eb05 1282 	add.w	r2, r5, r2, lsl #6
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    af00:	5c28      	ldrb	r0, [r5, r0]
    af02:	4560      	cmp	r0, ip
    af04:	d004      	beq.n	af10 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
    af06:	6963      	ldr	r3, [r4, #20]
    af08:	4919      	ldr	r1, [pc, #100]	; (af70 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    af0a:	4620      	mov	r0, r4
    af0c:	4798      	blx	r3
    af0e:	e7ec      	b.n	aeea <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  if (data_type != kTfLiteFloat32) {
    af10:	2801      	cmp	r0, #1
    af12:	d023      	beq.n	af5c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af14:	a806      	add	r0, sp, #24
  return CalculateOpData(context, params->activation, input->type, input,
    af16:	f899 5000 	ldrb.w	r5, [r9]
    double real_multiplier = 0.0;
    af1a:	f04f 0800 	mov.w	r8, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af1e:	e9cd 6000 	strd	r6, r0, [sp]
    double real_multiplier = 0.0;
    af22:	f04f 0900 	mov.w	r9, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af26:	4620      	mov	r0, r4
    double real_multiplier = 0.0;
    af28:	e9cd 8906 	strd	r8, r9, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    af2c:	f7f6 faac 	bl	1488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    af30:	2800      	cmp	r0, #0
    af32:	d1db      	bne.n	aeec <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
    af34:	a905      	add	r1, sp, #20
    af36:	4638      	mov	r0, r7
    af38:	ed9d 0b06 	vldr	d0, [sp, #24]
    af3c:	f006 fbf8 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->output_shift = -exponent;
    af40:	9b05      	ldr	r3, [sp, #20]
    af42:	425b      	negs	r3, r3
    af44:	607b      	str	r3, [r7, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    af46:	f107 030c 	add.w	r3, r7, #12
    af4a:	9300      	str	r3, [sp, #0]
    af4c:	4632      	mov	r2, r6
    af4e:	f107 0308 	add.w	r3, r7, #8
    af52:	4629      	mov	r1, r5
    af54:	4620      	mov	r0, r4
    af56:	f006 fca3 	bl	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    af5a:	e7c7      	b.n	aeec <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return status;
    af5c:	2000      	movs	r0, #0
    af5e:	e7c5      	b.n	aeec <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    af60:	00028380 	.word	0x00028380
    af64:	00028398 	.word	0x00028398
    af68:	000281ae 	.word	0x000281ae
    af6c:	00027bae 	.word	0x00027bae
    af70:	000281df 	.word	0x000281df

0000af74 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
    af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af78:	ed2d 8b02 	vpush	{d8}
    af7c:	b09d      	sub	sp, #116	; 0x74
  if (activation == kTfLiteActRelu) {
    af7e:	2a01      	cmp	r2, #1
    af80:	e9dd 8528 	ldrd	r8, r5, [sp, #160]	; 0xa0
    af84:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
    af88:	461c      	mov	r4, r3
    af8a:	d069      	beq.n	b060 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xec>
  } else if (activation == kTfLiteActRelu6) {
    af8c:	2a03      	cmp	r2, #3
    af8e:	d06c      	beq.n	b06a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf6>
    *activation_max = std::numeric_limits<T>::max();
    af90:	eddf 7a53 	vldr	s15, [pc, #332]	; b0e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    af94:	2a02      	cmp	r2, #2
    af96:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    af9a:	bf18      	it	ne
    af9c:	eef0 8a67 	vmovne.f32	s17, s15
    afa0:	eddf 7a50 	vldr	s15, [pc, #320]	; b0e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x170>
    afa4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    afa8:	bf18      	it	ne
    afaa:	eeb0 8a67 	vmovne.f32	s16, s15
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    afae:	4621      	mov	r1, r4
    afb0:	a804      	add	r0, sp, #16
    afb2:	f00a fcd0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    afb6:	b104      	cbz	r4, afba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x46>
    afb8:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(filter), GetTensorData<float>(filter),
    afba:	4641      	mov	r1, r8
    afbc:	a80a      	add	r0, sp, #40	; 0x28
    afbe:	f00a fcca 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    afc2:	f1b8 0f00 	cmp.w	r8, #0
    afc6:	d001      	beq.n	afcc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x58>
    afc8:	f8d8 8004 	ldr.w	r8, [r8, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
    afcc:	4629      	mov	r1, r5
    afce:	a810      	add	r0, sp, #64	; 0x40
    afd0:	f00a fcc1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    afd4:	b105      	cbz	r5, afd8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x64>
    afd6:	686d      	ldr	r5, [r5, #4]
    afd8:	4649      	mov	r1, r9
    afda:	a816      	add	r0, sp, #88	; 0x58
    afdc:	f00a fcbb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    afe0:	f1b9 0f00 	cmp.w	r9, #0
    afe4:	d001      	beq.n	afea <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x76>
    afe6:	f8d9 9004 	ldr.w	r9, [r9, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    afea:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const int weights_dims_count = weights_shape.DimensionsCount();
    afec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    afee:	3b01      	subs	r3, #1
    aff0:	4619      	mov	r1, r3
    aff2:	a816      	add	r0, sp, #88	; 0x58
    aff4:	9300      	str	r3, [sp, #0]
    aff6:	f00e fdf1 	bl	19bdc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    affa:	9b00      	ldr	r3, [sp, #0]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    affc:	9002      	str	r0, [sp, #8]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    affe:	1eb1      	subs	r1, r6, #2
    b000:	aa16      	add	r2, sp, #88	; 0x58
    b002:	a80a      	add	r0, sp, #40	; 0x28
    b004:	f00d fb1a 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    b008:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    b00a:	4683      	mov	fp, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    b00c:	a80a      	add	r0, sp, #40	; 0x28
    b00e:	f00a fc68 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    b012:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    b014:	eddf 6a34 	vldr	s13, [pc, #208]	; b0e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    b018:	9300      	str	r3, [sp, #0]
  for (int b = 0; b < batches; ++b) {
    b01a:	461e      	mov	r6, r3
    b01c:	9a02      	ldr	r2, [sp, #8]
    b01e:	42b2      	cmp	r2, r6
    b020:	dd4b      	ble.n	b0ba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x146>
    b022:	9a00      	ldr	r2, [sp, #0]
    b024:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    b028:	9201      	str	r2, [sp, #4]
    b02a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    b02e:	9203      	str	r2, [sp, #12]
    b030:	2200      	movs	r2, #0
    b032:	462f      	mov	r7, r5
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b034:	4694      	mov	ip, r2
    b036:	45e3      	cmp	fp, ip
    b038:	dd39      	ble.n	b0ae <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x13a>
    b03a:	f8dd a00c 	ldr.w	sl, [sp, #12]
      float total = 0.f;
    b03e:	eddf 7a2a 	vldr	s15, [pc, #168]	; b0e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
    b042:	eb08 0182 	add.w	r1, r8, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
    b046:	f04f 0e00 	mov.w	lr, #0
    b04a:	4570      	cmp	r0, lr
    b04c:	dd10      	ble.n	b070 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfc>
        total += input_data[b * accum_depth + d] *
    b04e:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
    b052:	ecb1 7a01 	vldmia	r1!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
    b056:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
    b05a:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
    b05e:	e7f4      	b.n	b04a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd6>
    *activation_max = std::numeric_limits<T>::max();
    b060:	eddf 8a1f 	vldr	s17, [pc, #124]	; b0e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    *activation_min = 0;
    b064:	ed9f 8a20 	vldr	s16, [pc, #128]	; b0e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x174>
    b068:	e7a1      	b.n	afae <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x3a>
    *activation_max = 6;
    b06a:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
    b06e:	e7f9      	b.n	b064 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf0>
      if (bias_data) {
    b070:	b1d5      	cbz	r5, b0a8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x134>
        bias_value = bias_data[out_c];
    b072:	ed97 7a00 	vldr	s14, [r7]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    b076:	9901      	ldr	r1, [sp, #4]
    b078:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b07c:	f10c 0c01 	add.w	ip, ip, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    b080:	eef4 7ac8 	vcmpe.f32	s15, s16
    b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b088:	bfb8      	it	lt
    b08a:	eef0 7a48 	vmovlt.f32	s15, s16
    b08e:	eef4 7ae8 	vcmpe.f32	s15, s17
    b092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b096:	bf88      	it	hi
    b098:	eef0 7a68 	vmovhi.f32	s15, s17
    b09c:	ece1 7a01 	vstmia	r1!, {s15}
    b0a0:	9101      	str	r1, [sp, #4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b0a2:	3704      	adds	r7, #4
    b0a4:	4402      	add	r2, r0
    b0a6:	e7c6      	b.n	b036 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xc2>
      float bias_value = 0.0f;
    b0a8:	eeb0 7a66 	vmov.f32	s14, s13
    b0ac:	e7e3      	b.n	b076 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x102>
  for (int b = 0; b < batches; ++b) {
    b0ae:	9a00      	ldr	r2, [sp, #0]
    b0b0:	445a      	add	r2, fp
    b0b2:	3601      	adds	r6, #1
    b0b4:	9200      	str	r2, [sp, #0]
    b0b6:	4403      	add	r3, r0
    b0b8:	e7b0      	b.n	b01c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa8>
    b0ba:	a816      	add	r0, sp, #88	; 0x58
    b0bc:	f00a fc06 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b0c0:	a810      	add	r0, sp, #64	; 0x40
    b0c2:	f00a fc03 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
    b0c6:	a80a      	add	r0, sp, #40	; 0x28
    b0c8:	f00a fc00 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    b0cc:	a804      	add	r0, sp, #16
    b0ce:	f00a fbfd 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
}
    b0d2:	2000      	movs	r0, #0
    b0d4:	b01d      	add	sp, #116	; 0x74
    b0d6:	ecbd 8b02 	vpop	{d8}
    b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0de:	bf00      	nop
    b0e0:	7f7fffff 	.word	0x7f7fffff
    b0e4:	ff7fffff 	.word	0xff7fffff
    b0e8:	00000000 	.word	0x00000000

0000b0ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0f0:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b0f4:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b0f6:	b0b5      	sub	sp, #212	; 0xd4
    b0f8:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b0fa:	b90a      	cbnz	r2, b100 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14>
    b0fc:	f013 fa7a 	bl	1e5f4 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    b100:	f8d0 9008 	ldr.w	r9, [r0, #8]
    b104:	6808      	ldr	r0, [r1, #0]
  const bool use_tensor = index < node->inputs->size &&
    b106:	6803      	ldr	r3, [r0, #0]
  return &context->tensors[node->inputs->data[index]];
    b108:	6846      	ldr	r6, [r0, #4]
    b10a:	6887      	ldr	r7, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
    b10c:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
    b10e:	ea4f 1b86 	mov.w	fp, r6, lsl #6
    b112:	eb09 1787 	add.w	r7, r9, r7, lsl #6
    b116:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    b11a:	dd23      	ble.n	b164 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    b11c:	68c4      	ldr	r4, [r0, #12]
  const bool use_tensor = index < node->inputs->size &&
    b11e:	1c63      	adds	r3, r4, #1
    b120:	d020      	beq.n	b164 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
    b122:	eb09 1484 	add.w	r4, r9, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    b126:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    b128:	6908      	ldr	r0, [r1, #16]
    b12a:	685d      	ldr	r5, [r3, #4]
    b12c:	ea4f 1a85 	mov.w	sl, r5, lsl #6
    b130:	eb09 1585 	add.w	r5, r9, r5, lsl #6
    b134:	2800      	cmp	r0, #0
    b136:	d0e1      	beq.n	b0fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    b138:	f819 300b 	ldrb.w	r3, [r9, fp]
    b13c:	2b03      	cmp	r3, #3
    b13e:	d057      	beq.n	b1f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    b140:	2b09      	cmp	r3, #9
    b142:	d011      	beq.n	b168 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    b144:	2b01      	cmp	r3, #1
    b146:	f040 8126 	bne.w	b396 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
    b14a:	7812      	ldrb	r2, [r2, #0]
    b14c:	9700      	str	r7, [sp, #0]
    b14e:	e9cd 4501 	strd	r4, r5, [sp, #4]
    b152:	4633      	mov	r3, r6
    b154:	4640      	mov	r0, r8
    b156:	f7ff ff0d 	bl	af74 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    b15a:	b035      	add	sp, #212	; 0xd4
    b15c:	ecbd 8b02 	vpop	{d8}
    b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
    b164:	2400      	movs	r4, #0
    b166:	e7de      	b.n	b126 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  op_params.input_offset = -input->params.zero_point;
    b168:	6933      	ldr	r3, [r6, #16]
    b16a:	425b      	negs	r3, r3
    b16c:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.weights_offset = -filter->params.zero_point;
    b16e:	693b      	ldr	r3, [r7, #16]
    b170:	425b      	negs	r3, r3
    b172:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.output_offset = output->params.zero_point;
    b174:	692b      	ldr	r3, [r5, #16]
    b176:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
    b178:	6803      	ldr	r3, [r0, #0]
    b17a:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
    b17c:	6843      	ldr	r3, [r0, #4]
    b17e:	425b      	negs	r3, r3
    b180:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
    b182:	6883      	ldr	r3, [r0, #8]
    b184:	932f      	str	r3, [sp, #188]	; 0xbc
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    b186:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data.output_activation_max;
    b188:	68c3      	ldr	r3, [r0, #12]
    b18a:	9330      	str	r3, [sp, #192]	; 0xc0
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    b18c:	a812      	add	r0, sp, #72	; 0x48
    b18e:	f00a fbe2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b192:	f8d6 8004 	ldr.w	r8, [r6, #4]
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
    b196:	4639      	mov	r1, r7
    b198:	a818      	add	r0, sp, #96	; 0x60
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    b19a:	ae1e      	add	r6, sp, #120	; 0x78
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
    b19c:	f00a fbdb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
    b1a0:	4621      	mov	r1, r4
    b1a2:	4630      	mov	r0, r6
    b1a4:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b1a8:	f00a fbd5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b1ac:	b104      	cbz	r4, b1b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    b1ae:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
    b1b0:	af24      	add	r7, sp, #144	; 0x90
    b1b2:	4629      	mov	r1, r5
    b1b4:	4638      	mov	r0, r7
    b1b6:	f00a fbce 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
    b1ba:	686b      	ldr	r3, [r5, #4]
    b1bc:	f8cd 9000 	str.w	r9, [sp]
    b1c0:	e9cd 7303 	strd	r7, r3, [sp, #12]
    b1c4:	e9cd 6401 	strd	r6, r4, [sp, #4]
    b1c8:	ab18      	add	r3, sp, #96	; 0x60
    b1ca:	4642      	mov	r2, r8
    b1cc:	a912      	add	r1, sp, #72	; 0x48
    b1ce:	a82a      	add	r0, sp, #168	; 0xa8
    b1d0:	f00e fda2 	bl	19d18 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
      TF_LITE_FULLY_CONNECTED(uint8_t);
    b1d4:	4638      	mov	r0, r7
    b1d6:	f00a fb79 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b1da:	4630      	mov	r0, r6
      TF_LITE_FULLY_CONNECTED(int16_t);
    b1dc:	f00a fb76 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b1e0:	a818      	add	r0, sp, #96	; 0x60
    b1e2:	f00a fb73 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b1e6:	a812      	add	r0, sp, #72	; 0x48
    b1e8:	f00a fb70 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    b1ec:	2000      	movs	r0, #0
      break;
    b1ee:	e7b4      	b.n	b15a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  const int32_t filter_offset = -filter->params.zero_point;
    b1f0:	693b      	ldr	r3, [r7, #16]
  const int32_t input_offset = -input->params.zero_point;
    b1f2:	6932      	ldr	r2, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
    b1f4:	6929      	ldr	r1, [r5, #16]
  op_params.output_offset = output_offset;
    b1f6:	912c      	str	r1, [sp, #176]	; 0xb0
  const int32_t filter_offset = -filter->params.zero_point;
    b1f8:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
    b1fa:	4252      	negs	r2, r2
  op_params.weights_offset = filter_offset;
    b1fc:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
    b200:	6803      	ldr	r3, [r0, #0]
    b202:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
    b204:	6843      	ldr	r3, [r0, #4]
    b206:	425b      	negs	r3, r3
    b208:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
    b20a:	6883      	ldr	r3, [r0, #8]
    b20c:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
    b20e:	68c3      	ldr	r3, [r0, #12]
  switch (output->type) {
    b210:	f819 000a 	ldrb.w	r0, [r9, sl]
  op_params.quantized_activation_max = data.output_activation_max;
    b214:	9330      	str	r3, [sp, #192]	; 0xc0
  switch (output->type) {
    b216:	2803      	cmp	r0, #3
    b218:	d00d      	beq.n	b236 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    b21a:	2807      	cmp	r0, #7
    b21c:	d031      	beq.n	b282 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x196>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b21e:	f8d8 4014 	ldr.w	r4, [r8, #20]
    b222:	f7f5 fb46 	bl	8b2 <TfLiteTypeGetName>
    b226:	f819 300a 	ldrb.w	r3, [r9, sl]
    b22a:	4602      	mov	r2, r0
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b22c:	4640      	mov	r0, r8
    b22e:	495e      	ldr	r1, [pc, #376]	; (b3a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    b230:	47a0      	blx	r4
      return kTfLiteError;
    b232:	2001      	movs	r0, #1
    b234:	e791      	b.n	b15a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_FULLY_CONNECTED(uint8_t);
    b236:	4631      	mov	r1, r6
    b238:	a812      	add	r0, sp, #72	; 0x48
    b23a:	f00a fb8c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b23e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    b242:	4639      	mov	r1, r7
    b244:	a818      	add	r0, sp, #96	; 0x60
    b246:	ae1e      	add	r6, sp, #120	; 0x78
    b248:	f00a fb85 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b24c:	4621      	mov	r1, r4
    b24e:	4630      	mov	r0, r6
    b250:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b254:	f00a fb7f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b258:	b104      	cbz	r4, b25c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x170>
    b25a:	6864      	ldr	r4, [r4, #4]
    b25c:	af24      	add	r7, sp, #144	; 0x90
    b25e:	4629      	mov	r1, r5
    b260:	4638      	mov	r0, r7
    b262:	f00a fb78 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b266:	686b      	ldr	r3, [r5, #4]
    b268:	f8cd 9000 	str.w	r9, [sp]
    b26c:	e9cd 7303 	strd	r7, r3, [sp, #12]
    b270:	e9cd 6401 	strd	r6, r4, [sp, #4]
    b274:	ab18      	add	r3, sp, #96	; 0x60
    b276:	4642      	mov	r2, r8
    b278:	a912      	add	r1, sp, #72	; 0x48
    b27a:	a82a      	add	r0, sp, #168	; 0xa8
    b27c:	f00e fcc9 	bl	19c12 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
    b280:	e7a8      	b.n	b1d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_FULLY_CONNECTED(int16_t);
    b282:	4631      	mov	r1, r6
    b284:	a812      	add	r0, sp, #72	; 0x48
    b286:	f00a fb66 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b28a:	6873      	ldr	r3, [r6, #4]
    b28c:	930a      	str	r3, [sp, #40]	; 0x28
    b28e:	4639      	mov	r1, r7
    b290:	a818      	add	r0, sp, #96	; 0x60
    b292:	f00a fb60 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b296:	687b      	ldr	r3, [r7, #4]
    b298:	930b      	str	r3, [sp, #44]	; 0x2c
    b29a:	4621      	mov	r1, r4
    b29c:	a81e      	add	r0, sp, #120	; 0x78
    b29e:	f00a fb5a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b2a2:	b104      	cbz	r4, b2a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    b2a4:	6864      	ldr	r4, [r4, #4]
    b2a6:	4629      	mov	r1, r5
    b2a8:	a824      	add	r0, sp, #144	; 0x90
    b2aa:	f00a fb54 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    b2ae:	686b      	ldr	r3, [r5, #4]
    b2b0:	930c      	str	r3, [sp, #48]	; 0x30
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
  const int32 input_offset = params.input_offset;
    b2b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b2b4:	930d      	str	r3, [sp, #52]	; 0x34
  const int32 filter_offset = params.weights_offset;
    b2b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    b2b8:	930e      	str	r3, [sp, #56]	; 0x38
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
    b2ba:	e9dd 532c 	ldrd	r5, r3, [sp, #176]	; 0xb0
    b2be:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
    b2c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    b2c4:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
    b2c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    b2ca:	9307      	str	r3, [sp, #28]
  const int32 output_activation_max = params.quantized_activation_max;
    b2cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    b2ce:	9308      	str	r3, [sp, #32]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b2d0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    b2d4:	4293      	cmp	r3, r2
    b2d6:	f73f af11 	bgt.w	b0fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  TFLITE_DCHECK_EQ(output_offset, 0);
    b2da:	2d00      	cmp	r5, #0
    b2dc:	f47f af0e 	bne.w	b0fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  const int filter_dim_count = filter_shape.DimensionsCount();
    b2e2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2e4:	3b01      	subs	r3, #1
    b2e6:	4619      	mov	r1, r3
    b2e8:	a824      	add	r0, sp, #144	; 0x90
    b2ea:	9309      	str	r3, [sp, #36]	; 0x24
    b2ec:	f00e fc76 	bl	19bdc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    b2f2:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b2f4:	1eb1      	subs	r1, r6, #2
    b2f6:	aa24      	add	r2, sp, #144	; 0x90
    b2f8:	a818      	add	r0, sp, #96	; 0x60
    b2fa:	f00d f99f 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    b2fe:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    b300:	9009      	str	r0, [sp, #36]	; 0x24
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    b302:	a818      	add	r0, sp, #96	; 0x60
    b304:	f00a faed 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    b308:	46a8      	mov	r8, r5
    b30a:	4606      	mov	r6, r0
    b30c:	46a9      	mov	r9, r5
  for (int b = 0; b < batches; ++b) {
    b30e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b310:	42ab      	cmp	r3, r5
    b312:	dd3b      	ble.n	b38c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    b314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b316:	2700      	movs	r7, #0
    b318:	eb03 0b49 	add.w	fp, r3, r9, lsl #1
  for (int b = 0; b < batches; ++b) {
    b31c:	46ba      	mov	sl, r7
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b320:	42bb      	cmp	r3, r7
    b322:	dd2e      	ble.n	b382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x296>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
    b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b326:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
    b32a:	eb03 0e08 	add.w	lr, r3, r8
    b32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b330:	eb03 0c0a 	add.w	ip, r3, sl
    b334:	2300      	movs	r3, #0
    b336:	429e      	cmp	r6, r3
    b338:	dd10      	ble.n	b35c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x270>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b33a:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    b33e:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b342:	9210      	str	r2, [sp, #64]	; 0x40
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    b344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b346:	188a      	adds	r2, r1, r2
    b348:	9211      	str	r2, [sp, #68]	; 0x44
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    b34a:	9910      	ldr	r1, [sp, #64]	; 0x40
    b34c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b34e:	4411      	add	r1, r2
    b350:	460a      	mov	r2, r1
        accum += filter_val * input_val;
    b352:	9911      	ldr	r1, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    b354:	3301      	adds	r3, #1
        accum += filter_val * input_val;
    b356:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
    b35a:	e7ec      	b.n	b336 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
    b35c:	ee18 2a90 	vmov	r2, s17
    b360:	ee18 1a10 	vmov	r1, s16
    b364:	f7fe fa9a 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
    b368:	9b07      	ldr	r3, [sp, #28]
    b36a:	4298      	cmp	r0, r3
    b36c:	bfb8      	it	lt
    b36e:	4618      	movlt	r0, r3
    b370:	9b08      	ldr	r3, [sp, #32]
    b372:	4298      	cmp	r0, r3
    b374:	bfa8      	it	ge
    b376:	4618      	movge	r0, r3
    b378:	f82b 0b02 	strh.w	r0, [fp], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    b37c:	3701      	adds	r7, #1
    b37e:	44b2      	add	sl, r6
    b380:	e7cd      	b.n	b31e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x232>
  for (int b = 0; b < batches; ++b) {
    b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b384:	3501      	adds	r5, #1
    b386:	4499      	add	r9, r3
    b388:	44b0      	add	r8, r6
    b38a:	e7c0      	b.n	b30e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x222>
    b38c:	a824      	add	r0, sp, #144	; 0x90
    b38e:	f00a fa9d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b392:	a81e      	add	r0, sp, #120	; 0x78
    b394:	e722      	b.n	b1dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b396:	4618      	mov	r0, r3
    b398:	f8d8 4014 	ldr.w	r4, [r8, #20]
    b39c:	f7f5 fa89 	bl	8b2 <TfLiteTypeGetName>
    b3a0:	f819 300b 	ldrb.w	r3, [r9, fp]
    b3a4:	4602      	mov	r2, r0
    b3a6:	e741      	b.n	b22c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x140>
    b3a8:	00027ac7 	.word	0x00027ac7

0000b3ac <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b3ac:	4800      	ldr	r0, [pc, #0]	; (b3b0 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x4>)
    b3ae:	4770      	bx	lr
    b3b0:	20000388 	.word	0x20000388

0000b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3b4:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    b3b6:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3b8:	d11f      	bne.n	b3fa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
    b3ba:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    b3be:	425c      	negs	r4, r3
    b3c0:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    b3c2:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b3c6:	2a00      	cmp	r2, #0
    b3c8:	f173 0100 	sbcs.w	r1, r3, #0
    b3cc:	490d      	ldr	r1, [pc, #52]	; (b404 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
    b3ce:	bfa8      	it	ge
    b3d0:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b3d4:	b99c      	cbnz	r4, b3fe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b3d6:	1852      	adds	r2, r2, r1
    b3d8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b3dc:	2a00      	cmp	r2, #0
    b3de:	f173 0100 	sbcs.w	r1, r3, #0
    b3e2:	da06      	bge.n	b3f2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
    b3e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b3e8:	1852      	adds	r2, r2, r1
    b3ea:	f04f 0100 	mov.w	r1, #0
    b3ee:	eb41 0303 	adc.w	r3, r1, r3
    b3f2:	0fd0      	lsrs	r0, r2, #31
    b3f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    b3f8:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3fa:	2400      	movs	r4, #0
    b3fc:	e7e1      	b.n	b3c2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    b3fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b402:	e7f9      	b.n	b3f8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
    b404:	c0000001 	.word	0xc0000001

0000b408 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>:
    b408:	4800      	ldr	r0, [pc, #0]	; (b40c <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv+0x4>)
    b40a:	4770      	bx	lr
    b40c:	200003a8 	.word	0x200003a8

0000b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    b410:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    b412:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    b414:	da06      	bge.n	b424 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    b416:	4b0d      	ldr	r3, [pc, #52]	; (b44c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    b418:	4a0d      	ldr	r2, [pc, #52]	; (b450 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    b41a:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    b41e:	480d      	ldr	r0, [pc, #52]	; (b454 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    b420:	f009 f80b 	bl	1443a <__assert_func>
    b424:	291f      	cmp	r1, #31
    b426:	dd04      	ble.n	b432 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    b428:	4b0b      	ldr	r3, [pc, #44]	; (b458 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    b42a:	4a09      	ldr	r2, [pc, #36]	; (b450 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    b42c:	f240 1167 	movw	r1, #359	; 0x167
    b430:	e7f5      	b.n	b41e <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b432:	2301      	movs	r3, #1
    b434:	408b      	lsls	r3, r1
    b436:	3b01      	subs	r3, #1
  return a & b;
    b438:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    b43c:	105b      	asrs	r3, r3, #1
  return a + b;
    b43e:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    b442:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    b444:	429a      	cmp	r2, r3
    b446:	bfc8      	it	gt
    b448:	3001      	addgt	r0, #1
    b44a:	bd08      	pop	{r3, pc}
    b44c:	00027a09 	.word	0x00027a09
    b450:	00027a17 	.word	0x00027a17
    b454:	00027a6c 	.word	0x00027a6c
    b458:	00027ab8 	.word	0x00027ab8

0000b45c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>:
  return shifted_scale.raw();
}

inline void GetInvSqrtQuantizedMultiplierExp(int32 input, int reverse_shift,
                                             int32* output_inv_sqrt,
                                             int* output_shift) {
    b45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GE(input, 0);
    b460:	2800      	cmp	r0, #0
                                             int* output_shift) {
    b462:	9101      	str	r1, [sp, #4]
    b464:	4616      	mov	r6, r2
    b466:	461d      	mov	r5, r3
  TFLITE_DCHECK_GE(input, 0);
    b468:	da01      	bge.n	b46e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x12>
    b46a:	f013 f8c3 	bl	1e5f4 <abort>
  if (input <= 1) {
    b46e:	2801      	cmp	r0, #1
    b470:	dc07      	bgt.n	b482 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x26>
    // Handle the input value 1 separately to avoid overflow in that case
    // in the general computation below (b/143972021). Also handle 0 as if it
    // were a 1. 0 is an invalid input here (divide by zero) and 1 is a valid
    // but rare/unrealistic input value. We can expect both to occur in some
    // incompletely trained models, but probably not in fully trained models.
    *output_inv_sqrt = std::numeric_limits<std::int32_t>::max();
    b472:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    b476:	6013      	str	r3, [r2, #0]
    *output_shift = 0;
    b478:	2300      	movs	r3, #0
    b47a:	602b      	str	r3, [r5, #0]
    *output_inv_sqrt <<= -*output_shift;
    *output_shift = 0;
  }
  // Convert right shift (right is positive) to left shift.
  *output_shift *= reverse_shift;
}
    b47c:	b003      	add	sp, #12
    b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *output_shift = 11;
    b482:	230b      	movs	r3, #11
    b484:	602b      	str	r3, [r5, #0]
  while (input >= (1 << 29)) {
    b486:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    b48a:	682a      	ldr	r2, [r5, #0]
    b48c:	db03      	blt.n	b496 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x3a>
    ++*output_shift;
    b48e:	3201      	adds	r2, #1
    input /= 4;
    b490:	1080      	asrs	r0, r0, #2
    ++*output_shift;
    b492:	602a      	str	r2, [r5, #0]
  while (input >= (1 << 29)) {
    b494:	e7f7      	b.n	b486 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x2a>
  return integer_input ? __builtin_clz(integer_input)
    b496:	fab0 f380 	clz	r3, r0
      CountLeadingZeros(static_cast<uint32>(input)) - 1;
    b49a:	3b01      	subs	r3, #1
  const unsigned max_left_shift_bit_pairs = max_left_shift_bits / 2;
    b49c:	085b      	lsrs	r3, r3, #1
  const unsigned left_shift_bit_pairs = max_left_shift_bit_pairs - 1;
    b49e:	3b01      	subs	r3, #1
  *output_shift -= left_shift_bit_pairs;
    b4a0:	1ad2      	subs	r2, r2, r3
  input <<= 2 * left_shift_bit_pairs;
    b4a2:	005b      	lsls	r3, r3, #1
    b4a4:	4098      	lsls	r0, r3
  TFLITE_DCHECK_GE(input, (1 << 27));
    b4a6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
    b4aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  *output_shift -= left_shift_bit_pairs;
    b4ae:	602a      	str	r2, [r5, #0]
  TFLITE_DCHECK_GE(input, (1 << 27));
    b4b0:	d2db      	bcs.n	b46a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xe>
};

template <int Exponent, typename IntegerType>
struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, -1> {
  static IntegerType eval(IntegerType x) {
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b4b2:	2101      	movs	r1, #1
    b4b4:	4108      	asrs	r0, r1
    b4b6:	f7ff ffab 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
    b4ba:	2705      	movs	r7, #5
    b4bc:	4682      	mov	sl, r0
  F3 x = F3::One();
    b4be:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
             : wide_shifted > max ? max
    b4c2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    b4c6:	f04f 0900 	mov.w	r9, #0
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b4ca:	4621      	mov	r1, r4
    b4cc:	4620      	mov	r0, r4
    b4ce:	f7ff ff71 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b4d2:	4621      	mov	r1, r4
    b4d4:	f7ff ff6e 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    b4d8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
    b4dc:	da71      	bge.n	b5c2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x166>
    b4de:	f1b0 4f7e 	cmp.w	r0, #4261412864	; 0xfe000000
    b4e2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    b4e6:	f04f 0100 	mov.w	r1, #0
    b4ea:	bfc8      	it	gt
    b4ec:	f04f 0e00 	movgt.w	lr, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b4f0:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    b4f4:	0182      	lsls	r2, r0, #6
    b4f6:	ea4f 138c 	mov.w	r3, ip, lsl #6
    b4fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
             ? min
    b4fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b502:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
    b506:	db61      	blt.n	b5cc <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x170>
             : wide_shifted > max ? max
    b508:	4590      	cmp	r8, r2
    b50a:	eb79 0003 	sbcs.w	r0, r9, r3
    b50e:	bfb8      	it	lt
    b510:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b514:	ea6f 0b01 	mvn.w	fp, r1
  return a & b;
    b518:	ea0b 0202 	and.w	r2, fp, r2
    b51c:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  return a ^ b;
    b520:	ea82 0b0b 	eor.w	fp, r2, fp
  return ~a;
    b524:	ea6f 020e 	mvn.w	r2, lr
  return a & b;
    b528:	ea0b 0b02 	and.w	fp, fp, r2
    b52c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b530:	4621      	mov	r1, r4
    b532:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
  return a ^ b;
    b536:	ea8b 0b0e 	eor.w	fp, fp, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b53a:	f7ff ff3b 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b53e:	4659      	mov	r1, fp
    b540:	4604      	mov	r4, r0
    b542:	4650      	mov	r0, sl
    b544:	f7ff ff36 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a - b;
    b548:	1a24      	subs	r4, r4, r0
  return a ? BitNot(zero) : zero;
    b54a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
    b54e:	da40      	bge.n	b5d2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x176>
    b550:	f1b4 4f70 	cmp.w	r4, #4026531840	; 0xf0000000
    b554:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b558:	f04f 0e00 	mov.w	lr, #0
    b55c:	bfc8      	it	gt
    b55e:	f04f 0c00 	movgt.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b562:	17e1      	asrs	r1, r4, #31
    b564:	00cb      	lsls	r3, r1, #3
    b566:	00e2      	lsls	r2, r4, #3
    b568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
             ? min
    b56c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b570:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
    b574:	db32      	blt.n	b5dc <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x180>
             : wide_shifted > max ? max
    b576:	4590      	cmp	r8, r2
    b578:	eb79 0103 	sbcs.w	r1, r9, r3
    b57c:	bfb8      	it	lt
    b57e:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b582:	ea6f 040e 	mvn.w	r4, lr
  return a & b;
    b586:	4022      	ands	r2, r4
    b588:	f02e 4400 	bic.w	r4, lr, #2147483648	; 0x80000000
  return a ^ b;
    b58c:	4054      	eors	r4, r2
  return ~a;
    b58e:	ea6f 020c 	mvn.w	r2, ip
  return a & b;
    b592:	4014      	ands	r4, r2
    b594:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  for (int i = 0; i < 5; i++) {
    b598:	3f01      	subs	r7, #1
  return a ^ b;
    b59a:	ea84 040c 	eor.w	r4, r4, ip
    b59e:	d194      	bne.n	b4ca <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x6e>
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b5a0:	4910      	ldr	r1, [pc, #64]	; (b5e4 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x188>)
    b5a2:	4620      	mov	r0, r4
    b5a4:	f7ff ff06 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  *output_inv_sqrt = x.raw();
    b5a8:	6030      	str	r0, [r6, #0]
  if (*output_shift < 0) {
    b5aa:	682b      	ldr	r3, [r5, #0]
    b5ac:	2b00      	cmp	r3, #0
    *output_inv_sqrt <<= -*output_shift;
    b5ae:	bfbf      	itttt	lt
    b5b0:	425b      	neglt	r3, r3
    b5b2:	4098      	lsllt	r0, r3
    b5b4:	6030      	strlt	r0, [r6, #0]
    *output_shift = 0;
    b5b6:	602f      	strlt	r7, [r5, #0]
  *output_shift *= reverse_shift;
    b5b8:	6829      	ldr	r1, [r5, #0]
    b5ba:	9b01      	ldr	r3, [sp, #4]
    b5bc:	434b      	muls	r3, r1
    b5be:	602b      	str	r3, [r5, #0]
    b5c0:	e75c      	b.n	b47c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x20>
  return a ? BitNot(zero) : zero;
    b5c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b5c6:	f04f 0e00 	mov.w	lr, #0
    b5ca:	e791      	b.n	b4f0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x94>
             ? min
    b5cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b5d0:	e7a0      	b.n	b514 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xb8>
  return a ? BitNot(zero) : zero;
    b5d2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    b5d6:	f04f 0c00 	mov.w	ip, #0
    b5da:	e7c2      	b.n	b562 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x106>
             ? min
    b5dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b5e0:	e7cf      	b.n	b582 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x126>
    b5e2:	bf00      	nop
    b5e4:	5a82799a 	.word	0x5a82799a

0000b5e8 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    b5e8:	680a      	ldr	r2, [r1, #0]

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    b5ea:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ee:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
    b5f0:	684a      	ldr	r2, [r1, #4]
    b5f2:	6855      	ldr	r5, [r2, #4]
    b5f4:	01aa      	lsls	r2, r5, #6
    b5f6:	4606      	mov	r6, r0
  // is just dominated by the zero point.
  // Also, GetInvSqrtQuantizedMultiplierExp handles the scenario where the sum
  // of input value squared is zero case well.
  // So we don't even need to do handle the epsilon for quantized kernel case.
  const float epsilon = 1e-6f;
  if (output->type == kTfLiteFloat32) {
    b5f8:	5c98      	ldrb	r0, [r3, r2]
    b5fa:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b5fc:	b093      	sub	sp, #76	; 0x4c
  return &context->tensors[node->inputs->data[index]];
    b5fe:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    b602:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  if (output->type == kTfLiteFloat32) {
    b606:	d14a      	bne.n	b69e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  op_params.input_zero_point = 0;                                            \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<float>(input), GetTensorShape(output), \
                        GetTensorData<float>(output), epsilon)

    TF_LITE_L2NORM(reference_ops);
    b608:	4621      	mov	r1, r4
    b60a:	a806      	add	r0, sp, #24
    b60c:	f00a f9a3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b610:	b104      	cbz	r4, b614 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
    b612:	6864      	ldr	r4, [r4, #4]
    b614:	4629      	mov	r1, r5
    b616:	a80c      	add	r0, sp, #48	; 0x30
    b618:	f00a f99d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const float* input_data,
                            const RuntimeShape& output_shape,
                            float* output_data, float epsilon = 1e-6) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    b61c:	9b06      	ldr	r3, [sp, #24]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    b61e:	686e      	ldr	r6, [r5, #4]
    b620:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b622:	4619      	mov	r1, r3
    b624:	aa0c      	add	r2, sp, #48	; 0x30
    b626:	a806      	add	r0, sp, #24
    b628:	9303      	str	r3, [sp, #12]
    b62a:	f00e fbfc 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b62e:	9b03      	ldr	r3, [sp, #12]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b630:	4605      	mov	r5, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b632:	4619      	mov	r1, r3
    b634:	aa0c      	add	r2, sp, #48	; 0x30
    b636:	a806      	add	r0, sp, #24
    b638:	f00d f800 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    b63c:	2300      	movs	r3, #0
    b63e:	eddf 6a3c 	vldr	s13, [pc, #240]	; b730 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x148>
  for (int i = 0; i < outer_size; ++i) {
    b642:	4619      	mov	r1, r3
    b644:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    b648:	428d      	cmp	r5, r1
    b64a:	dd3e      	ble.n	b6ca <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    b64c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    float squared_l2_norm = 0;
    b650:	ed9f 7a38 	vldr	s14, [pc, #224]	; b734 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    b654:	009a      	lsls	r2, r3, #2
  for (int i = 0; i < outer_size; ++i) {
    b656:	46e6      	mov	lr, ip
    for (int c = 0; c < depth; ++c) {
    b658:	2700      	movs	r7, #0
    b65a:	42b8      	cmp	r0, r7
    b65c:	dd05      	ble.n	b66a <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      const float val = input_data[depth * i + c];
    b65e:	ecfe 7a01 	vldmia	lr!, {s15}
    for (int c = 0; c < depth; ++c) {
    b662:	3701      	adds	r7, #1
      squared_l2_norm += val * val;
    b664:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (int c = 0; c < depth; ++c) {
    b668:	e7f7      	b.n	b65a <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    b66a:	eef1 7ac7 	vsqrt.f32	s15, s14
    }
    float l2_norm = std::sqrt(squared_l2_norm);
    l2_norm = std::max(l2_norm, epsilon);
    for (int c = 0; c < depth; ++c) {
    b66e:	4432      	add	r2, r6
    b670:	2700      	movs	r7, #0
    b672:	eef4 7ae6 	vcmpe.f32	s15, s13
    b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b67a:	bfb8      	it	lt
    b67c:	eef0 7a66 	vmovlt.f32	s15, s13
    b680:	ee86 7a27 	vdiv.f32	s14, s12, s15
    b684:	42b8      	cmp	r0, r7
    b686:	dd07      	ble.n	b698 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
    b688:	3701      	adds	r7, #1
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
    b68a:	ecfc 7a01 	vldmia	ip!, {s15}
    b68e:	ee67 7a27 	vmul.f32	s15, s14, s15
    b692:	ece2 7a01 	vstmia	r2!, {s15}
    for (int c = 0; c < depth; ++c) {
    b696:	e7f5      	b.n	b684 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  for (int i = 0; i < outer_size; ++i) {
    b698:	3101      	adds	r1, #1
    b69a:	4403      	add	r3, r0
    b69c:	e7d4      	b.n	b648 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x60>
#undef TF_LITE_L2NORM
  } else if (output->type == kTfLiteUInt8) {
    b69e:	2803      	cmp	r0, #3
    b6a0:	d11c      	bne.n	b6dc <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
  op_params.input_zero_point = input->params.zero_point;                     \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<uint8>(input), GetTensorShape(output), \
                        GetTensorData<uint8>(output))

    TF_LITE_L2NORM(reference_ops);
    b6a2:	6923      	ldr	r3, [r4, #16]
    b6a4:	9305      	str	r3, [sp, #20]
    b6a6:	4621      	mov	r1, r4
    b6a8:	a806      	add	r0, sp, #24
    b6aa:	f00a f954 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    b6ae:	6862      	ldr	r2, [r4, #4]
    b6b0:	9203      	str	r2, [sp, #12]
    b6b2:	4629      	mov	r1, r5
    b6b4:	a80c      	add	r0, sp, #48	; 0x30
    b6b6:	f00a f94e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    b6ba:	686b      	ldr	r3, [r5, #4]
    b6bc:	9300      	str	r3, [sp, #0]
    b6be:	9a03      	ldr	r2, [sp, #12]
    b6c0:	ab0c      	add	r3, sp, #48	; 0x30
    b6c2:	a906      	add	r1, sp, #24
    b6c4:	a805      	add	r0, sp, #20
    b6c6:	f00e fbe0 	bl	19e8a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    b6ca:	a80c      	add	r0, sp, #48	; 0x30
    b6cc:	f00a f8fe 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    b6d0:	a806      	add	r0, sp, #24
    b6d2:	f00a f8fb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    b6d6:	2000      	movs	r0, #0
}
    b6d8:	b013      	add	sp, #76	; 0x4c
    b6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteInt8) {
    b6dc:	2809      	cmp	r0, #9
    b6de:	d11e      	bne.n	b71e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x136>
    const auto input_shape = GetTensorShape(input);
    b6e0:	4621      	mov	r1, r4
    b6e2:	a806      	add	r0, sp, #24
    b6e4:	f00a f937 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const auto output_shape = GetTensorShape(output);
    b6e8:	4629      	mov	r1, r5
    b6ea:	a80c      	add	r0, sp, #48	; 0x30
    b6ec:	f00a f933 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int trailing_dim = input_shape.DimensionsCount() - 1;
    b6f0:	9906      	ldr	r1, [sp, #24]
    b6f2:	3901      	subs	r1, #1
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b6f4:	460b      	mov	r3, r1
    b6f6:	aa0c      	add	r2, sp, #48	; 0x30
    b6f8:	a806      	add	r0, sp, #24
    b6fa:	9103      	str	r1, [sp, #12]
    b6fc:	f00c ff9e 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b700:	9903      	ldr	r1, [sp, #12]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    b702:	4606      	mov	r6, r0
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b704:	aa0c      	add	r2, sp, #48	; 0x30
    b706:	a806      	add	r0, sp, #24
    b708:	f00e fb8d 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
    b70c:	686b      	ldr	r3, [r5, #4]
    b70e:	9300      	str	r3, [sp, #0]
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    b710:	4601      	mov	r1, r0
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
    b712:	6863      	ldr	r3, [r4, #4]
    b714:	6920      	ldr	r0, [r4, #16]
    b716:	4632      	mov	r2, r6
    b718:	f00e fc15 	bl	19f46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>
    b71c:	e7d5      	b.n	b6ca <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
    b71e:	6974      	ldr	r4, [r6, #20]
    b720:	f7f5 f8c7 	bl	8b2 <TfLiteTypeGetName>
    b724:	4904      	ldr	r1, [pc, #16]	; (b738 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
    b726:	4602      	mov	r2, r0
    b728:	4630      	mov	r0, r6
    b72a:	47a0      	blx	r4
    return kTfLiteError;
    b72c:	2001      	movs	r0, #1
    b72e:	e7d3      	b.n	b6d8 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    b730:	358637bd 	.word	0x358637bd
    b734:	00000000 	.word	0x00000000
    b738:	00028241 	.word	0x00028241

0000b73c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b73c:	4800      	ldr	r0, [pc, #0]	; (b740 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x4>)
    b73e:	4770      	bx	lr
    b740:	200003c8 	.word	0x200003c8

0000b744 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b744:	4800      	ldr	r0, [pc, #0]	; (b748 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x4>)
    b746:	4770      	bx	lr
    b748:	200003e8 	.word	0x200003e8

0000b74c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
    b74c:	4a01      	ldr	r2, [pc, #4]	; (b754 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    b74e:	f00e bd6c 	b.w	1a22a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
    b752:	bf00      	nop
    b754:	00019ffd 	.word	0x00019ffd

0000b758 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
    b758:	4a01      	ldr	r2, [pc, #4]	; (b760 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
    b75a:	f00e bd66 	b.w	1a22a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
    b75e:	bf00      	nop
    b760:	0001a005 	.word	0x0001a005

0000b764 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
    b764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    b768:	f8d0 8000 	ldr.w	r8, [r0]
    b76c:	461e      	mov	r6, r3
    b76e:	6813      	ldr	r3, [r2, #0]
    b770:	4598      	cmp	r8, r3
    b772:	ed2d 8b04 	vpush	{d8-d9}
    b776:	4604      	mov	r4, r0
    b778:	460f      	mov	r7, r1
    b77a:	4691      	mov	r9, r2
    b77c:	d001      	beq.n	b782 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
    b77e:	f012 ff39 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
    b782:	2500      	movs	r5, #0
    b784:	45a8      	cmp	r8, r5
    b786:	dd0c      	ble.n	b7a2 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    b788:	4629      	mov	r1, r5
    b78a:	4620      	mov	r0, r4
    b78c:	f00a f8a9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    b790:	4629      	mov	r1, r5
    b792:	4682      	mov	sl, r0
    b794:	4648      	mov	r0, r9
    b796:	f00a f8a4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    b79a:	4582      	cmp	sl, r0
    b79c:	d1ef      	bne.n	b77e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
    b79e:	3501      	adds	r5, #1
    b7a0:	e7f0      	b.n	b784 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b7a2:	f1b8 0f05 	cmp.w	r8, #5
    b7a6:	bfcc      	ite	gt
    b7a8:	6864      	ldrgt	r4, [r4, #4]
    b7aa:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
    b7ac:	2300      	movs	r3, #0
    int buffer_size = 1;
    b7ae:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
    b7b2:	4598      	cmp	r8, r3
    b7b4:	dc1b      	bgt.n	b7ee <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
  // optimized kernels. (check the definition of scalar_logistic_op<float>)

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result;
    if (val > cutoff_upper) {
    b7b6:	eddf 8a19 	vldr	s17, [pc, #100]	; b81c <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xb8>
    b7ba:	4634      	mov	r4, r6
      result = 1.0f;
    b7bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; i++) {
    b7c0:	2600      	movs	r6, #0
    } else if (val < cutoff_lower) {
    b7c2:	eeba 9a02 	vmov.f32	s18, #162	; 0xc1100000 -9.0
  for (int i = 0; i < flat_size; i++) {
    b7c6:	454e      	cmp	r6, r9
    b7c8:	da23      	bge.n	b812 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xae>
    float val = input_data[i];
    b7ca:	ecb7 0a01 	vldmia	r7!, {s0}
    if (val > cutoff_upper) {
    b7ce:	eeb4 0ae8 	vcmpe.f32	s0, s17
    b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7d6:	dc19      	bgt.n	b80c <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xa8>
    } else if (val < cutoff_lower) {
    b7d8:	eeb4 0ac9 	vcmpe.f32	s0, s18
    b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7e0:	d50b      	bpl.n	b7fa <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
  { return __builtin_expf(__x); }
    b7e2:	f006 fdbd 	bl	12360 <expf>
      result = std::exp(val);
    } else {
      result = 1.f / (1.f + std::exp(-val));
    }
    output_data[i] = result;
    b7e6:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    b7ea:	3601      	adds	r6, #1
    b7ec:	e7eb      	b.n	b7c6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x62>
      buffer_size *= dims_data[i];
    b7ee:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    b7f2:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    b7f4:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
    b7f8:	e7db      	b.n	b7b2 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
    b7fa:	eeb1 0a40 	vneg.f32	s0, s0
    b7fe:	f006 fdaf 	bl	12360 <expf>
      result = 1.f / (1.f + std::exp(-val));
    b802:	ee70 7a08 	vadd.f32	s15, s0, s16
    b806:	ee88 0a27 	vdiv.f32	s0, s16, s15
    b80a:	e7ec      	b.n	b7e6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x82>
      result = 1.0f;
    b80c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    b810:	e7e9      	b.n	b7e6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x82>
  }
}
    b812:	ecbd 8b04 	vpop	{d8-d9}
    b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b81a:	bf00      	nop
    b81c:	4184f3cf 	.word	0x4184f3cf

0000b820 <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    b820:	4800      	ldr	r0, [pc, #0]	; (b824 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x4>)
    b822:	4770      	bx	lr
    b824:	20000408 	.word	0x20000408

0000b828 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    b828:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b82c:	1812      	adds	r2, r2, r0
    b82e:	f04f 0300 	mov.w	r3, #0
    b832:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    b836:	1c59      	adds	r1, r3, #1
    b838:	bf06      	itte	eq
    b83a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b83e:	4611      	moveq	r1, r2
    b840:	2101      	movne	r1, #1

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    b842:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
    b846:	bf0c      	ite	eq
    b848:	4618      	moveq	r0, r3
    b84a:	2000      	movne	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    b84c:	1854      	adds	r4, r2, r1
    b84e:	eb43 0500 	adc.w	r5, r3, r0
    b852:	0feb      	lsrs	r3, r5, #31
    b854:	18e4      	adds	r4, r4, r3
    b856:	f145 0500 	adc.w	r5, r5, #0
    b85a:	ea4f 0854 	mov.w	r8, r4, lsr #1
    b85e:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b862:	493c      	ldr	r1, [pc, #240]	; (b954 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x12c>)
    b864:	4640      	mov	r0, r8
    b866:	f7ff fda5 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    b86a:	2503      	movs	r5, #3
    b86c:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    b870:	4621      	mov	r1, r4
    b872:	4640      	mov	r0, r8
    b874:	f7ff fd9e 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    b878:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    b87c:	4620      	mov	r0, r4
    b87e:	f7ff fd99 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    b882:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    b886:	da56      	bge.n	b936 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10e>
    b888:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    b88c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b890:	f04f 0c00 	mov.w	ip, #0
    b894:	bfc8      	it	gt
    b896:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b898:	ea4f 7be0 	mov.w	fp, r0, asr #31
    b89c:	0082      	lsls	r2, r0, #2
    b89e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    b8a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
    b8a6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b8aa:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
    b8ae:	db46      	blt.n	b93e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x116>
             : wide_shifted > max ? max
    b8b0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    b8b4:	4592      	cmp	sl, r2
    b8b6:	f04f 0b00 	mov.w	fp, #0
    b8ba:	eb7b 0003 	sbcs.w	r0, fp, r3
    b8be:	bfb8      	it	lt
    b8c0:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    b8c4:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
    b8c8:	401a      	ands	r2, r3
    b8ca:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return ~a;
    b8ce:	43cb      	mvns	r3, r1
  return a ^ b;
    b8d0:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
    b8d4:	401a      	ands	r2, r3
    b8d6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    b8da:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    b8dc:	3d01      	subs	r5, #1
  return a + b;
    b8de:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
    b8e0:	d1c6      	bne.n	b870 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x48>
  return a ? BitNot(zero) : zero;
    b8e2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    b8e6:	da2d      	bge.n	b944 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11c>
    b8e8:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    b8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b8f0:	462a      	mov	r2, r5
    b8f2:	bfc8      	it	gt
    b8f4:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    b8f6:	1926      	adds	r6, r4, r4
    b8f8:	ea4f 75e4 	mov.w	r5, r4, asr #31
    b8fc:	eb45 0705 	adc.w	r7, r5, r5
             ? min
    b900:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b904:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
    b908:	db20      	blt.n	b94c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x124>
             : wide_shifted > max ? max
    b90a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b90e:	2500      	movs	r5, #0
    b910:	42b4      	cmp	r4, r6
    b912:	eb75 0307 	sbcs.w	r3, r5, r7
    b916:	bfac      	ite	ge
    b918:	4633      	movge	r3, r6
    b91a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
    b91e:	43d6      	mvns	r6, r2
  return a & b;
    b920:	401e      	ands	r6, r3
    b922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return ~a;
    b926:	43c3      	mvns	r3, r0
  return a ^ b;
    b928:	4056      	eors	r6, r2
  return a & b;
    b92a:	401e      	ands	r6, r3
    b92c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    b930:	4070      	eors	r0, r6
    b932:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
    b936:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b93a:	2100      	movs	r1, #0
    b93c:	e7ac      	b.n	b898 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x70>
             ? min
    b93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b942:	e7bf      	b.n	b8c4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9c>
  return a ? BitNot(zero) : zero;
    b944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b948:	4628      	mov	r0, r5
    b94a:	e7d4      	b.n	b8f6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xce>
             ? min
    b94c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b950:	e7e5      	b.n	b91e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
    b952:	bf00      	nop
    b954:	c3c3c3c4 	.word	0xc3c3c3c4

0000b958 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b95c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    b95e:	4814      	ldr	r0, [pc, #80]	; (b9b0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    b960:	f00e fcbb 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b964:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    b966:	4813      	ldr	r0, [pc, #76]	; (b9b4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    b968:	f00e fcb7 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    b96c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    b970:	4680      	mov	r8, r0
  F x2 = x * x;
    b972:	4621      	mov	r1, r4
    b974:	4620      	mov	r0, r4
    b976:	f00e fcb5 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    b97a:	4621      	mov	r1, r4
  F x2 = x * x;
    b97c:	4605      	mov	r5, r0
  F x3 = x2 * x;
    b97e:	f00e fcb1 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    b982:	4629      	mov	r1, r5
  F x3 = x2 * x;
    b984:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    b986:	4628      	mov	r0, r5
    b988:	f00e fcac 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b98c:	2102      	movs	r1, #2
    b98e:	f7ff fd3f 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    b992:	4641      	mov	r1, r8
    b994:	4438      	add	r0, r7
    b996:	f00e fca5 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    b99a:	2101      	movs	r1, #1
    b99c:	4428      	add	r0, r5
    b99e:	f7ff fd37 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    b9a2:	1821      	adds	r1, r4, r0
    b9a4:	4630      	mov	r0, r6
    b9a6:	f00e fc9d 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    b9aa:	4430      	add	r0, r6
    b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9b0:	70f5a894 	.word	0x70f5a894
    b9b4:	2aaaaaab 	.word	0x2aaaaaab

0000b9b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    b9b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    b9bc:	f040 447e 	orr.w	r4, r0, #4261412864	; 0xfe000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    b9c0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    b9c2:	0120      	lsls	r0, r4, #4
    b9c4:	f7ff ffc8 	bl	b958 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    b9c8:	4682      	mov	sl, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    b9ca:	4838      	ldr	r0, [pc, #224]	; (baac <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf4>)
    b9cc:	f00e fc85 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b9d0:	4601      	mov	r1, r0
    b9d2:	4650      	mov	r0, sl
  return a - b;
    b9d4:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    b9d6:	f00e fc85 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    b9da:	f3c4 6940 	ubfx	r9, r4, #25, #1
    b9de:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
    b9e2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b9e6:	4007      	ands	r7, r0
    b9e8:	ea09 000a 	and.w	r0, r9, sl
  return a ^ b;
    b9ec:	ea87 0800 	eor.w	r8, r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    b9f0:	482f      	ldr	r0, [pc, #188]	; (bab0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf8>)
    b9f2:	f00e fc72 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    b9f6:	4601      	mov	r1, r0
    b9f8:	4640      	mov	r0, r8
    b9fa:	f00e fc73 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    b9fe:	f3c4 6780 	ubfx	r7, r4, #26, #1
    ba02:	427e      	negs	r6, r7
  return a & b;
    ba04:	3f01      	subs	r7, #1
    ba06:	4030      	ands	r0, r6
    ba08:	ea07 0708 	and.w	r7, r7, r8
  return a ^ b;
    ba0c:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    ba0e:	4829      	ldr	r0, [pc, #164]	; (bab4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
    ba10:	f00e fc63 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba14:	4601      	mov	r1, r0
    ba16:	4638      	mov	r0, r7
    ba18:	f00e fc64 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba1c:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    ba20:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    ba24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    ba28:	ea00 000a 	and.w	r0, r0, sl
    ba2c:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    ba30:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    ba34:	4820      	ldr	r0, [pc, #128]	; (bab8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
    ba36:	f00e fc50 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba3a:	4601      	mov	r1, r0
    ba3c:	4658      	mov	r0, fp
    ba3e:	f00e fc51 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba42:	f3c4 7900 	ubfx	r9, r4, #28, #1
    ba46:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    ba4a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ba4e:	ea00 0008 	and.w	r0, r0, r8
    ba52:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    ba56:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    ba5a:	4818      	ldr	r0, [pc, #96]	; (babc <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
    ba5c:	f00e fc3d 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba60:	4601      	mov	r1, r0
    ba62:	4648      	mov	r0, r9
    ba64:	f00e fc3e 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba68:	f3c4 7740 	ubfx	r7, r4, #29, #1
    ba6c:	427e      	negs	r6, r7
  return a & b;
    ba6e:	3f01      	subs	r7, #1
    ba70:	4030      	ands	r0, r6
    ba72:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    ba76:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    ba78:	4811      	ldr	r0, [pc, #68]	; (bac0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
    ba7a:	f00e fc2e 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    ba7e:	4601      	mov	r1, r0
    ba80:	4638      	mov	r0, r7
    ba82:	f00e fc2f 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    ba86:	f3c4 7480 	ubfx	r4, r4, #30, #1
    ba8a:	4263      	negs	r3, r4
  return a & b;
    ba8c:	4018      	ands	r0, r3
    ba8e:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    ba90:	fab5 f385 	clz	r3, r5
  return a & b;
    ba94:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    ba96:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    ba98:	4044      	eors	r4, r0
  return a & b;
    ba9a:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    ba9c:	425b      	negs	r3, r3
  return a & b;
    ba9e:	4020      	ands	r0, r4
    baa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    baa4:	4058      	eors	r0, r3
    baa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baaa:	bf00      	nop
    baac:	63afbe7b 	.word	0x63afbe7b
    bab0:	4da2cbf2 	.word	0x4da2cbf2
    bab4:	2f16ac6c 	.word	0x2f16ac6c
    bab8:	1152aaa4 	.word	0x1152aaa4
    babc:	02582ab7 	.word	0x02582ab7
    bac0:	000afe11 	.word	0x000afe11

0000bac4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    bac4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
    bac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baca:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    bacc:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    bace:	6885      	ldr	r5, [r0, #8]
    bad0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    bad2:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
    bad6:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    bada:	f815 200a 	ldrb.w	r2, [r5, sl]
    bade:	eb05 1983 	add.w	r9, r5, r3, lsl #6
    bae2:	f815 3008 	ldrb.w	r3, [r5, r8]
    bae6:	4293      	cmp	r3, r2
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
    bae8:	b097      	sub	sp, #92	; 0x5c
    baea:	4604      	mov	r4, r0
  return &context->tensors[node->inputs->data[index]];
    baec:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    baf0:	d034      	beq.n	bb5c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x98>
    baf2:	f8d0 b014 	ldr.w	fp, [r0, #20]
    baf6:	4610      	mov	r0, r2
    baf8:	f7f4 fedb 	bl	8b2 <TfLiteTypeGetName>
    bafc:	4606      	mov	r6, r0
    bafe:	f815 0008 	ldrb.w	r0, [r5, r8]
    bb02:	f7f4 fed6 	bl	8b2 <TfLiteTypeGetName>
    bb06:	4b5c      	ldr	r3, [pc, #368]	; (bc78 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
    bb08:	9301      	str	r3, [sp, #4]
    bb0a:	4b5c      	ldr	r3, [pc, #368]	; (bc7c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
    bb0c:	9300      	str	r3, [sp, #0]
    bb0e:	e9cd 6002 	strd	r6, r0, [sp, #8]
    bb12:	4a5b      	ldr	r2, [pc, #364]	; (bc80 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
    bb14:	495b      	ldr	r1, [pc, #364]	; (bc84 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
    bb16:	232f      	movs	r3, #47	; 0x2f
    bb18:	4620      	mov	r0, r4
    bb1a:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
    bb1c:	f815 600a 	ldrb.w	r6, [r5, sl]
    bb20:	2e01      	cmp	r6, #1
    bb22:	d164      	bne.n	bbee <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x12a>
    switch (output->type) {
    bb24:	f815 3008 	ldrb.w	r3, [r5, r8]
    bb28:	2b01      	cmp	r3, #1
    bb2a:	d14e      	bne.n	bbca <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x106>
            GetTensorShape(input), GetTensorData<float>(input),
    bb2c:	4639      	mov	r1, r7
    bb2e:	a80a      	add	r0, sp, #40	; 0x28
    bb30:	f009 ff11 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bb34:	687c      	ldr	r4, [r7, #4]
            GetTensorShape(output), GetTensorData<float>(output));
    bb36:	4649      	mov	r1, r9
    bb38:	a810      	add	r0, sp, #64	; 0x40
    bb3a:	f009 ff0c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Logistic(
    bb3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bb42:	aa10      	add	r2, sp, #64	; 0x40
    bb44:	4621      	mov	r1, r4
    bb46:	a80a      	add	r0, sp, #40	; 0x28
    bb48:	f7ff fe0c 	bl	b764 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
            GetTensorShape(output), GetTensorData<float>(output));
    bb4c:	a810      	add	r0, sp, #64	; 0x40
    bb4e:	f009 febd 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorShape(input), GetTensorData<float>(input),
    bb52:	a80a      	add	r0, sp, #40	; 0x28
    bb54:	f009 feba 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
    bb58:	2600      	movs	r6, #0
    bb5a:	e044      	b.n	bbe6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x122>
  if (input->type == kTfLiteInt8) {
    bb5c:	2b09      	cmp	r3, #9
    bb5e:	d1dd      	bne.n	bb1c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point,
    bb60:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bb64:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bb68:	d00d      	beq.n	bb86 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xc2>
    bb6a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    bb6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    bb72:	4b45      	ldr	r3, [pc, #276]	; (bc88 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
    bb74:	9301      	str	r3, [sp, #4]
    bb76:	4b45      	ldr	r3, [pc, #276]	; (bc8c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
    bb78:	9300      	str	r3, [sp, #0]
    bb7a:	6946      	ldr	r6, [r0, #20]
    bb7c:	4a40      	ldr	r2, [pc, #256]	; (bc80 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
    bb7e:	4944      	ldr	r1, [pc, #272]	; (bc90 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1cc>)
    bb80:	2331      	movs	r3, #49	; 0x31
    bb82:	47b0      	blx	r6
    bb84:	e7ca      	b.n	bb1c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
    bb86:	68f8      	ldr	r0, [r7, #12]
    bb88:	f7f5 f86e 	bl	c68 <__aeabi_f2d>
    const double input_real_multiplier =
    bb8c:	4b41      	ldr	r3, [pc, #260]	; (bc94 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d0>)
    bb8e:	2200      	movs	r2, #0
    bb90:	f7f5 f8c2 	bl	d18 <__aeabi_dmul>
    bb94:	ec41 0b10 	vmov	d0, r0, r1
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    bb98:	a809      	add	r0, sp, #36	; 0x24
    bb9a:	f006 f9bd 	bl	11f18 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bb9e:	4b3e      	ldr	r3, [pc, #248]	; (bc98 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
    bba0:	2200      	movs	r2, #0
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    bba2:	ec51 0b10 	vmov	r0, r1, d0
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bba6:	f7f5 f8b7 	bl	d18 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    bbaa:	ec41 0b10 	vmov	d0, r0, r1
    bbae:	f006 f9e9 	bl	11f84 <round>
    bbb2:	ec51 0b10 	vmov	r0, r1, d0
    bbb6:	f7f5 fb49 	bl	124c <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    bbba:	9909      	ldr	r1, [sp, #36]	; 0x24
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    bbbc:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    bbbe:	221f      	movs	r2, #31
    bbc0:	2004      	movs	r0, #4
    bbc2:	f012 fc02 	bl	1e3ca <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
    bbc6:	9007      	str	r0, [sp, #28]
    bbc8:	e7a8      	b.n	bb1c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    bbca:	4630      	mov	r0, r6
    bbcc:	6967      	ldr	r7, [r4, #20]
    bbce:	f7f4 fe70 	bl	8b2 <TfLiteTypeGetName>
    bbd2:	9004      	str	r0, [sp, #16]
    bbd4:	f815 0008 	ldrb.w	r0, [r5, r8]
    bbd8:	f7f4 fe6b 	bl	8b2 <TfLiteTypeGetName>
    bbdc:	9a04      	ldr	r2, [sp, #16]
    bbde:	492f      	ldr	r1, [pc, #188]	; (bc9c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
    bbe0:	4603      	mov	r3, r0
    bbe2:	4620      	mov	r0, r4
    bbe4:	47b8      	blx	r7
}
    bbe6:	4630      	mov	r0, r6
    bbe8:	b017      	add	sp, #92	; 0x5c
    bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
    bbee:	2e09      	cmp	r6, #9
    bbf0:	d131      	bne.n	bc56 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x192>
    switch (output->type) {
    bbf2:	f815 3008 	ldrb.w	r3, [r5, r8]
    bbf6:	2b09      	cmp	r3, #9
    bbf8:	d12d      	bne.n	bc56 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x192>
  for (int i = 0; i < dims->size; ++i) {
    bbfa:	68be      	ldr	r6, [r7, #8]
            input->params.zero_point, data.input_range_radius,
    bbfc:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Logistic(
    bbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc00:	f856 8b04 	ldr.w	r8, [r6], #4
  int64_t count = 1;
    bc04:	2401      	movs	r4, #1
    bc06:	2500      	movs	r5, #0
    bc08:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    bc0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
  for (int i = 0; i < dims->size; ++i) {
    bc10:	f04f 0c00 	mov.w	ip, #0
    bc14:	45e0      	cmp	r8, ip
    bc16:	dd14      	ble.n	bc42 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    count *= dims->data[i];
    bc18:	f856 eb04 	ldr.w	lr, [r6], #4
    bc1c:	9c04      	ldr	r4, [sp, #16]
    bc1e:	ea4f 7bee 	mov.w	fp, lr, asr #31
    bc22:	fb04 fa0b 	mul.w	sl, r4, fp
    bc26:	9c05      	ldr	r4, [sp, #20]
    bc28:	fb0e aa04 	mla	sl, lr, r4, sl
    bc2c:	9c04      	ldr	r4, [sp, #16]
    bc2e:	fba4 450e 	umull	r4, r5, r4, lr
    bc32:	e9cd 4504 	strd	r4, r5, [sp, #16]
    bc36:	9c05      	ldr	r4, [sp, #20]
    bc38:	4454      	add	r4, sl
    bc3a:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
    bc3c:	f10c 0c01 	add.w	ip, ip, #1
    bc40:	e7e8      	b.n	bc14 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x150>
    bc42:	f8d9 5004 	ldr.w	r5, [r9, #4]
    bc46:	9502      	str	r5, [sp, #8]
    bc48:	687d      	ldr	r5, [r7, #4]
    bc4a:	9c04      	ldr	r4, [sp, #16]
    bc4c:	9501      	str	r5, [sp, #4]
    bc4e:	9400      	str	r4, [sp, #0]
    bc50:	f00e fb4c 	bl	1a2ec <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>
    bc54:	e780      	b.n	bb58 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x94>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    bc56:	4630      	mov	r0, r6
    bc58:	6967      	ldr	r7, [r4, #20]
    bc5a:	f7f4 fe2a 	bl	8b2 <TfLiteTypeGetName>
    bc5e:	9004      	str	r0, [sp, #16]
    bc60:	f815 0008 	ldrb.w	r0, [r5, r8]
    bc64:	f7f4 fe25 	bl	8b2 <TfLiteTypeGetName>
    bc68:	9a04      	ldr	r2, [sp, #16]
    bc6a:	490c      	ldr	r1, [pc, #48]	; (bc9c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
    bc6c:	4603      	mov	r3, r0
    bc6e:	4620      	mov	r0, r4
    bc70:	47b8      	blx	r7
    return kTfLiteError;
    bc72:	2601      	movs	r6, #1
    bc74:	e7b7      	b.n	bbe6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x122>
    bc76:	bf00      	nop
    bc78:	00028380 	.word	0x00028380
    bc7c:	00028398 	.word	0x00028398
    bc80:	00028264 	.word	0x00028264
    bc84:	00027bae 	.word	0x00027bae
    bc88:	00028641 	.word	0x00028641
    bc8c:	0002858c 	.word	0x0002858c
    bc90:	00027b73 	.word	0x00027b73
    bc94:	41a00000 	.word	0x41a00000
    bc98:	41e00000 	.word	0x41e00000
    bc9c:	000280ff 	.word	0x000280ff

0000bca0 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    bca0:	4800      	ldr	r0, [pc, #0]	; (bca4 <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x4>)
    bca2:	4770      	bx	lr
    bca4:	20000428 	.word	0x20000428

0000bca8 <_ZN6tflite3ops5micro16Register_MINIMUMEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    bca8:	4800      	ldr	r0, [pc, #0]	; (bcac <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x4>)
    bcaa:	4770      	bx	lr
    bcac:	20000448 	.word	0x20000448

0000bcb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
    bcb0:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bcb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
    bcb6:	685c      	ldr	r4, [r3, #4]
    bcb8:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    bcba:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
    bcbc:	f8d0 8008 	ldr.w	r8, [r0, #8]
    bcc0:	685e      	ldr	r6, [r3, #4]
    bcc2:	ea4f 1986 	mov.w	r9, r6, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bcc6:	4607      	mov	r7, r0
    switch (op_context.output->type) {
    bcc8:	f818 0009 	ldrb.w	r0, [r8, r9]
    bccc:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bcce:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
    bcd0:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    bcd4:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    bcd8:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    bcdc:	2b08      	cmp	r3, #8
    bcde:	f200 80a4 	bhi.w	be2a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
    bce2:	e8df f003 	tbb	[pc, r3]
    bce6:	6805      	.short	0x6805
    bce8:	a2a2852e 	.word	0xa2a2852e
    bcec:	a2a2      	.short	0xa2a2
    bcee:	4b          	.byte	0x4b
    bcef:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
    bcf0:	4621      	mov	r1, r4
    bcf2:	a804      	add	r0, sp, #16
    bcf4:	f009 fe2f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bcf8:	b104      	cbz	r4, bcfc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
    bcfa:	6864      	ldr	r4, [r4, #4]
    bcfc:	4629      	mov	r1, r5
    bcfe:	a80a      	add	r0, sp, #40	; 0x28
    bd00:	f009 fe29 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd04:	b105      	cbz	r5, bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
    bd06:	686d      	ldr	r5, [r5, #4]
    bd08:	af10      	add	r7, sp, #64	; 0x40
    bd0a:	4631      	mov	r1, r6
    bd0c:	4638      	mov	r0, r7
    bd0e:	f009 fe22 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd12:	4b4b      	ldr	r3, [pc, #300]	; (be40 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
    bd14:	9302      	str	r3, [sp, #8]
    bd16:	6873      	ldr	r3, [r6, #4]
    bd18:	aa0a      	add	r2, sp, #40	; 0x28
    bd1a:	e9cd 7300 	strd	r7, r3, [sp]
    bd1e:	4621      	mov	r1, r4
    bd20:	462b      	mov	r3, r5
    bd22:	a804      	add	r0, sp, #16
    bd24:	f00e fc5a 	bl	1a5dc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
    bd28:	4638      	mov	r0, r7
    bd2a:	f009 fdcf 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
    bd2e:	a80a      	add	r0, sp, #40	; 0x28
    bd30:	f009 fdcc 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
    bd34:	a804      	add	r0, sp, #16
    bd36:	f009 fdc9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    bd3a:	2000      	movs	r0, #0
}
    bd3c:	b017      	add	sp, #92	; 0x5c
    bd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
    bd42:	4621      	mov	r1, r4
    bd44:	a804      	add	r0, sp, #16
    bd46:	f009 fe06 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd4a:	b104      	cbz	r4, bd4e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
    bd4c:	6864      	ldr	r4, [r4, #4]
    bd4e:	4629      	mov	r1, r5
    bd50:	a80a      	add	r0, sp, #40	; 0x28
    bd52:	f009 fe00 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd56:	b105      	cbz	r5, bd5a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    bd58:	686d      	ldr	r5, [r5, #4]
    bd5a:	af10      	add	r7, sp, #64	; 0x40
    bd5c:	4631      	mov	r1, r6
    bd5e:	4638      	mov	r0, r7
    bd60:	f009 fdf9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd64:	4b37      	ldr	r3, [pc, #220]	; (be44 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
    bd66:	9302      	str	r3, [sp, #8]
    bd68:	6873      	ldr	r3, [r6, #4]
    bd6a:	aa0a      	add	r2, sp, #40	; 0x28
    bd6c:	e9cd 7300 	strd	r7, r3, [sp]
    bd70:	4621      	mov	r1, r4
    bd72:	462b      	mov	r3, r5
    bd74:	a804      	add	r0, sp, #16
    bd76:	f00e fce5 	bl	1a744 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bd7a:	e7d5      	b.n	bd28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bd7c:	4621      	mov	r1, r4
    bd7e:	a804      	add	r0, sp, #16
    bd80:	f009 fde9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd84:	b104      	cbz	r4, bd88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
    bd86:	6864      	ldr	r4, [r4, #4]
    bd88:	4629      	mov	r1, r5
    bd8a:	a80a      	add	r0, sp, #40	; 0x28
    bd8c:	f009 fde3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd90:	b105      	cbz	r5, bd94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
    bd92:	686d      	ldr	r5, [r5, #4]
    bd94:	af10      	add	r7, sp, #64	; 0x40
    bd96:	4631      	mov	r1, r6
    bd98:	4638      	mov	r0, r7
    bd9a:	f009 fddc 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bd9e:	4b2a      	ldr	r3, [pc, #168]	; (be48 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
    bda0:	9302      	str	r3, [sp, #8]
    bda2:	6873      	ldr	r3, [r6, #4]
    bda4:	aa0a      	add	r2, sp, #40	; 0x28
    bda6:	e9cd 7300 	strd	r7, r3, [sp]
    bdaa:	4621      	mov	r1, r4
    bdac:	462b      	mov	r3, r5
    bdae:	a804      	add	r0, sp, #16
    bdb0:	f00e fd73 	bl	1a89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bdb4:	e7b8      	b.n	bd28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bdb6:	4621      	mov	r1, r4
    bdb8:	a804      	add	r0, sp, #16
    bdba:	f009 fdcc 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdbe:	b104      	cbz	r4, bdc2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
    bdc0:	6864      	ldr	r4, [r4, #4]
    bdc2:	4629      	mov	r1, r5
    bdc4:	a80a      	add	r0, sp, #40	; 0x28
    bdc6:	f009 fdc6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdca:	b105      	cbz	r5, bdce <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
    bdcc:	686d      	ldr	r5, [r5, #4]
    bdce:	af10      	add	r7, sp, #64	; 0x40
    bdd0:	4631      	mov	r1, r6
    bdd2:	4638      	mov	r0, r7
    bdd4:	f009 fdbf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdd8:	4b1c      	ldr	r3, [pc, #112]	; (be4c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
    bdda:	9302      	str	r3, [sp, #8]
    bddc:	6873      	ldr	r3, [r6, #4]
    bdde:	aa0a      	add	r2, sp, #40	; 0x28
    bde0:	e9cd 7300 	strd	r7, r3, [sp]
    bde4:	4621      	mov	r1, r4
    bde6:	462b      	mov	r3, r5
    bde8:	a804      	add	r0, sp, #16
    bdea:	f00e fe01 	bl	1a9f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bdee:	e79b      	b.n	bd28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bdf0:	4621      	mov	r1, r4
    bdf2:	a804      	add	r0, sp, #16
    bdf4:	f009 fdaf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bdf8:	b104      	cbz	r4, bdfc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
    bdfa:	6864      	ldr	r4, [r4, #4]
    bdfc:	4629      	mov	r1, r5
    bdfe:	a80a      	add	r0, sp, #40	; 0x28
    be00:	f009 fda9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    be04:	b105      	cbz	r5, be08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
    be06:	686d      	ldr	r5, [r5, #4]
    be08:	af10      	add	r7, sp, #64	; 0x40
    be0a:	4631      	mov	r1, r6
    be0c:	4638      	mov	r0, r7
    be0e:	f009 fda2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    be12:	4b0f      	ldr	r3, [pc, #60]	; (be50 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
    be14:	9302      	str	r3, [sp, #8]
    be16:	6873      	ldr	r3, [r6, #4]
    be18:	aa0a      	add	r2, sp, #40	; 0x28
    be1a:	e9cd 7300 	strd	r7, r3, [sp]
    be1e:	4621      	mov	r1, r4
    be20:	462b      	mov	r3, r5
    be22:	a804      	add	r0, sp, #16
    be24:	f00e fe97 	bl	1ab56 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    be28:	e77e      	b.n	bd28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
    be2a:	697c      	ldr	r4, [r7, #20]
    be2c:	f7f4 fd41 	bl	8b2 <TfLiteTypeGetName>
    be30:	f818 3009 	ldrb.w	r3, [r8, r9]
    be34:	4907      	ldr	r1, [pc, #28]	; (be54 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
    be36:	4602      	mov	r2, r0
    be38:	4638      	mov	r0, r7
    be3a:	47a0      	blx	r4
        return kTfLiteError;
    be3c:	2001      	movs	r0, #1
    be3e:	e77d      	b.n	bd3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
    be40:	0001a3c7 	.word	0x0001a3c7
    be44:	0001a3d7 	.word	0x0001a3d7
    be48:	0001a3df 	.word	0x0001a3df
    be4c:	0001a3e7 	.word	0x0001a3e7
    be50:	0001a3ef 	.word	0x0001a3ef
    be54:	0002828e 	.word	0x0002828e

0000be58 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
    be58:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
    be5e:	685c      	ldr	r4, [r3, #4]
    be60:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    be62:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
    be64:	f8d0 8008 	ldr.w	r8, [r0, #8]
    be68:	685e      	ldr	r6, [r3, #4]
    be6a:	ea4f 1986 	mov.w	r9, r6, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be6e:	4607      	mov	r7, r0
    switch (op_context.output->type) {
    be70:	f818 0009 	ldrb.w	r0, [r8, r9]
    be74:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be76:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
    be78:	eb08 1484 	add.w	r4, r8, r4, lsl #6
    be7c:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    be80:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    be84:	2b08      	cmp	r3, #8
    be86:	f200 80a4 	bhi.w	bfd2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
    be8a:	e8df f003 	tbb	[pc, r3]
    be8e:	6805      	.short	0x6805
    be90:	a2a2852e 	.word	0xa2a2852e
    be94:	a2a2      	.short	0xa2a2
    be96:	4b          	.byte	0x4b
    be97:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
    be98:	4621      	mov	r1, r4
    be9a:	a804      	add	r0, sp, #16
    be9c:	f009 fd5b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bea0:	b104      	cbz	r4, bea4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
    bea2:	6864      	ldr	r4, [r4, #4]
    bea4:	4629      	mov	r1, r5
    bea6:	a80a      	add	r0, sp, #40	; 0x28
    bea8:	f009 fd55 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    beac:	b105      	cbz	r5, beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
    beae:	686d      	ldr	r5, [r5, #4]
    beb0:	af10      	add	r7, sp, #64	; 0x40
    beb2:	4631      	mov	r1, r6
    beb4:	4638      	mov	r0, r7
    beb6:	f009 fd4e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    beba:	4b4b      	ldr	r3, [pc, #300]	; (bfe8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
    bebc:	9302      	str	r3, [sp, #8]
    bebe:	6873      	ldr	r3, [r6, #4]
    bec0:	aa0a      	add	r2, sp, #40	; 0x28
    bec2:	e9cd 7300 	strd	r7, r3, [sp]
    bec6:	4621      	mov	r1, r4
    bec8:	462b      	mov	r3, r5
    beca:	a804      	add	r0, sp, #16
    becc:	f00e fb86 	bl	1a5dc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
    bed0:	4638      	mov	r0, r7
    bed2:	f009 fcfb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
    bed6:	a80a      	add	r0, sp, #40	; 0x28
    bed8:	f009 fcf8 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
    bedc:	a804      	add	r0, sp, #16
    bede:	f009 fcf5 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    bee2:	2000      	movs	r0, #0
}
    bee4:	b017      	add	sp, #92	; 0x5c
    bee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
    beea:	4621      	mov	r1, r4
    beec:	a804      	add	r0, sp, #16
    beee:	f009 fd32 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bef2:	b104      	cbz	r4, bef6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
    bef4:	6864      	ldr	r4, [r4, #4]
    bef6:	4629      	mov	r1, r5
    bef8:	a80a      	add	r0, sp, #40	; 0x28
    befa:	f009 fd2c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    befe:	b105      	cbz	r5, bf02 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    bf00:	686d      	ldr	r5, [r5, #4]
    bf02:	af10      	add	r7, sp, #64	; 0x40
    bf04:	4631      	mov	r1, r6
    bf06:	4638      	mov	r0, r7
    bf08:	f009 fd25 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf0c:	4b37      	ldr	r3, [pc, #220]	; (bfec <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
    bf0e:	9302      	str	r3, [sp, #8]
    bf10:	6873      	ldr	r3, [r6, #4]
    bf12:	aa0a      	add	r2, sp, #40	; 0x28
    bf14:	e9cd 7300 	strd	r7, r3, [sp]
    bf18:	4621      	mov	r1, r4
    bf1a:	462b      	mov	r3, r5
    bf1c:	a804      	add	r0, sp, #16
    bf1e:	f00e fc11 	bl	1a744 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf22:	e7d5      	b.n	bed0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf24:	4621      	mov	r1, r4
    bf26:	a804      	add	r0, sp, #16
    bf28:	f009 fd15 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf2c:	b104      	cbz	r4, bf30 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
    bf2e:	6864      	ldr	r4, [r4, #4]
    bf30:	4629      	mov	r1, r5
    bf32:	a80a      	add	r0, sp, #40	; 0x28
    bf34:	f009 fd0f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf38:	b105      	cbz	r5, bf3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
    bf3a:	686d      	ldr	r5, [r5, #4]
    bf3c:	af10      	add	r7, sp, #64	; 0x40
    bf3e:	4631      	mov	r1, r6
    bf40:	4638      	mov	r0, r7
    bf42:	f009 fd08 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf46:	4b2a      	ldr	r3, [pc, #168]	; (bff0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
    bf48:	9302      	str	r3, [sp, #8]
    bf4a:	6873      	ldr	r3, [r6, #4]
    bf4c:	aa0a      	add	r2, sp, #40	; 0x28
    bf4e:	e9cd 7300 	strd	r7, r3, [sp]
    bf52:	4621      	mov	r1, r4
    bf54:	462b      	mov	r3, r5
    bf56:	a804      	add	r0, sp, #16
    bf58:	f00e fc9f 	bl	1a89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf5c:	e7b8      	b.n	bed0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf5e:	4621      	mov	r1, r4
    bf60:	a804      	add	r0, sp, #16
    bf62:	f009 fcf8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf66:	b104      	cbz	r4, bf6a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
    bf68:	6864      	ldr	r4, [r4, #4]
    bf6a:	4629      	mov	r1, r5
    bf6c:	a80a      	add	r0, sp, #40	; 0x28
    bf6e:	f009 fcf2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf72:	b105      	cbz	r5, bf76 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
    bf74:	686d      	ldr	r5, [r5, #4]
    bf76:	af10      	add	r7, sp, #64	; 0x40
    bf78:	4631      	mov	r1, r6
    bf7a:	4638      	mov	r0, r7
    bf7c:	f009 fceb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bf80:	4b1c      	ldr	r3, [pc, #112]	; (bff4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
    bf82:	9302      	str	r3, [sp, #8]
    bf84:	6873      	ldr	r3, [r6, #4]
    bf86:	aa0a      	add	r2, sp, #40	; 0x28
    bf88:	e9cd 7300 	strd	r7, r3, [sp]
    bf8c:	4621      	mov	r1, r4
    bf8e:	462b      	mov	r3, r5
    bf90:	a804      	add	r0, sp, #16
    bf92:	f00e fd2d 	bl	1a9f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bf96:	e79b      	b.n	bed0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
    bf98:	4621      	mov	r1, r4
    bf9a:	a804      	add	r0, sp, #16
    bf9c:	f009 fcdb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bfa0:	b104      	cbz	r4, bfa4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
    bfa2:	6864      	ldr	r4, [r4, #4]
    bfa4:	4629      	mov	r1, r5
    bfa6:	a80a      	add	r0, sp, #40	; 0x28
    bfa8:	f009 fcd5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bfac:	b105      	cbz	r5, bfb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
    bfae:	686d      	ldr	r5, [r5, #4]
    bfb0:	af10      	add	r7, sp, #64	; 0x40
    bfb2:	4631      	mov	r1, r6
    bfb4:	4638      	mov	r0, r7
    bfb6:	f009 fcce 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bfba:	4b0f      	ldr	r3, [pc, #60]	; (bff8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
    bfbc:	9302      	str	r3, [sp, #8]
    bfbe:	6873      	ldr	r3, [r6, #4]
    bfc0:	aa0a      	add	r2, sp, #40	; 0x28
    bfc2:	e9cd 7300 	strd	r7, r3, [sp]
    bfc6:	4621      	mov	r1, r4
    bfc8:	462b      	mov	r3, r5
    bfca:	a804      	add	r0, sp, #16
    bfcc:	f00e fdc3 	bl	1ab56 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
    bfd0:	e77e      	b.n	bed0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
    bfd2:	697c      	ldr	r4, [r7, #20]
    bfd4:	f7f4 fc6d 	bl	8b2 <TfLiteTypeGetName>
    bfd8:	f818 3009 	ldrb.w	r3, [r8, r9]
    bfdc:	4907      	ldr	r1, [pc, #28]	; (bffc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
    bfde:	4602      	mov	r2, r0
    bfe0:	4638      	mov	r0, r7
    bfe2:	47a0      	blx	r4
        return kTfLiteError;
    bfe4:	2001      	movs	r0, #1
    bfe6:	e77d      	b.n	bee4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
    bfe8:	0001a40b 	.word	0x0001a40b
    bfec:	0001a41b 	.word	0x0001a41b
    bff0:	0001a423 	.word	0x0001a423
    bff4:	0001a42b 	.word	0x0001a42b
    bff8:	0001a433 	.word	0x0001a433
    bffc:	0002828e 	.word	0x0002828e

0000c000 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>:
  int32_t output_multiplier;
  int output_shift;
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteMulParams* params, OpData* data) {
    c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c004:	4699      	mov	r9, r3
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c006:	680b      	ldr	r3, [r1, #0]
                             TfLiteMulParams* params, OpData* data) {
    c008:	4694      	mov	ip, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    c00a:	681a      	ldr	r2, [r3, #0]
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
    c00c:	2a02      	cmp	r2, #2
                             TfLiteMulParams* params, OpData* data) {
    c00e:	b085      	sub	sp, #20
    c010:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
    c012:	d010      	beq.n	c036 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x36>
    c014:	2302      	movs	r3, #2
    c016:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c01a:	4b3f      	ldr	r3, [pc, #252]	; (c118 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x118>)
    c01c:	9301      	str	r3, [sp, #4]
    c01e:	4b3f      	ldr	r3, [pc, #252]	; (c11c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
    c020:	9300      	str	r3, [sp, #0]
    c022:	6944      	ldr	r4, [r0, #20]
    c024:	2330      	movs	r3, #48	; 0x30
    c026:	4a3e      	ldr	r2, [pc, #248]	; (c120 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
    c028:	493e      	ldr	r1, [pc, #248]	; (c124 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x124>)
    c02a:	47a0      	blx	r4
    c02c:	2401      	movs	r4, #1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
                       &data->output_shift);
  }

  return kTfLiteOk;
}
    c02e:	4620      	mov	r0, r4
    c030:	b005      	add	sp, #20
    c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    c036:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    c038:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    c03a:	2c01      	cmp	r4, #1
    c03c:	d009      	beq.n	c052 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x52>
    c03e:	2501      	movs	r5, #1
    c040:	4b39      	ldr	r3, [pc, #228]	; (c128 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x128>)
    c042:	9301      	str	r3, [sp, #4]
    c044:	e9cd 4502 	strd	r4, r5, [sp, #8]
    c048:	4b38      	ldr	r3, [pc, #224]	; (c12c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x12c>)
    c04a:	9300      	str	r3, [sp, #0]
    c04c:	6944      	ldr	r4, [r0, #20]
    c04e:	2331      	movs	r3, #49	; 0x31
    c050:	e7e9      	b.n	c026 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x26>
  return &context->tensors[node->inputs->data[index]];
    c052:	6859      	ldr	r1, [r3, #4]
    c054:	689b      	ldr	r3, [r3, #8]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c056:	6885      	ldr	r5, [r0, #8]
    c058:	ea4f 1b83 	mov.w	fp, r3, lsl #6
    c05c:	0188      	lsls	r0, r1, #6
    c05e:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
    c062:	5c28      	ldrb	r0, [r5, r0]
    c064:	f815 300b 	ldrb.w	r3, [r5, fp]
    c068:	4283      	cmp	r3, r0
    c06a:	eb05 1881 	add.w	r8, r5, r1, lsl #6
    c06e:	d014      	beq.n	c09a <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x9a>
    c070:	f8d6 8014 	ldr.w	r8, [r6, #20]
    c074:	f7f4 fc1d 	bl	8b2 <TfLiteTypeGetName>
    c078:	4607      	mov	r7, r0
    c07a:	f815 000b 	ldrb.w	r0, [r5, fp]
    c07e:	f7f4 fc18 	bl	8b2 <TfLiteTypeGetName>
    c082:	4b2b      	ldr	r3, [pc, #172]	; (c130 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x130>)
    c084:	9301      	str	r3, [sp, #4]
    c086:	4b2b      	ldr	r3, [pc, #172]	; (c134 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x134>)
    c088:	9300      	str	r3, [sp, #0]
    c08a:	e9cd 7002 	strd	r7, r0, [sp, #8]
    c08e:	4a24      	ldr	r2, [pc, #144]	; (c120 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
    c090:	4929      	ldr	r1, [pc, #164]	; (c138 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x138>)
    c092:	2333      	movs	r3, #51	; 0x33
    c094:	4630      	mov	r0, r6
    c096:	47c0      	blx	r8
    c098:	e7c9      	b.n	c02e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return &context->tensors[node->outputs->data[index]];
    c09a:	6857      	ldr	r7, [r2, #4]
    c09c:	01bb      	lsls	r3, r7, #6
    c09e:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    c0a2:	5ceb      	ldrb	r3, [r5, r3]
    c0a4:	2b03      	cmp	r3, #3
    c0a6:	d001      	beq.n	c0ac <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xac>
    c0a8:	2b09      	cmp	r3, #9
    c0aa:	d132      	bne.n	c112 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x112>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    c0ac:	f109 0304 	add.w	r3, r9, #4
    c0b0:	9300      	str	r3, [sp, #0]
    c0b2:	f89c 1000 	ldrb.w	r1, [ip]
    c0b6:	464b      	mov	r3, r9
    c0b8:	463a      	mov	r2, r7
    c0ba:	4630      	mov	r0, r6
    c0bc:	f005 fbf0 	bl	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    c0c0:	4604      	mov	r4, r0
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d1b3      	bne.n	c02e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0c6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    c0ca:	f7f4 fdcd 	bl	c68 <__aeabi_f2d>
    c0ce:	4680      	mov	r8, r0
                             static_cast<double>(input2->params.scale) /
    c0d0:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    c0d4:	f109 060c 	add.w	r6, r9, #12
    c0d8:	f109 0508 	add.w	r5, r9, #8
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0dc:	4689      	mov	r9, r1
                             static_cast<double>(input2->params.scale) /
    c0de:	f7f4 fdc3 	bl	c68 <__aeabi_f2d>
    c0e2:	4602      	mov	r2, r0
    c0e4:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0e6:	4640      	mov	r0, r8
    c0e8:	4649      	mov	r1, r9
    c0ea:	f7f4 fe15 	bl	d18 <__aeabi_dmul>
    c0ee:	4680      	mov	r8, r0
                             static_cast<double>(output->params.scale);
    c0f0:	68f8      	ldr	r0, [r7, #12]
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0f2:	4689      	mov	r9, r1
                             static_cast<double>(output->params.scale);
    c0f4:	f7f4 fdb8 	bl	c68 <__aeabi_f2d>
    c0f8:	4602      	mov	r2, r0
    c0fa:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
    c0fc:	4640      	mov	r0, r8
    c0fe:	4649      	mov	r1, r9
    c100:	f7f4 ff34 	bl	f6c <__aeabi_ddiv>
    c104:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    c108:	4631      	mov	r1, r6
    c10a:	4628      	mov	r0, r5
    c10c:	f005 fb10 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    c110:	e78d      	b.n	c02e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return kTfLiteOk;
    c112:	2400      	movs	r4, #0
    c114:	e78b      	b.n	c02e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    c116:	bf00      	nop
    c118:	000283e5 	.word	0x000283e5
    c11c:	00027b8d 	.word	0x00027b8d
    c120:	000282c0 	.word	0x000282c0
    c124:	00027b73 	.word	0x00027b73
    c128:	0002880d 	.word	0x0002880d
    c12c:	00027b9d 	.word	0x00027b9d
    c130:	000282e5 	.word	0x000282e5
    c134:	000282f2 	.word	0x000282f2
    c138:	00027bae 	.word	0x00027bae

0000c13c <_ZN6tflite3ops5micro12Register_MULEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c13c:	4800      	ldr	r0, [pc, #0]	; (c140 <_ZN6tflite3ops5micro12Register_MULEv+0x4>)
    c13e:	4770      	bx	lr
    c140:	20000468 	.word	0x20000468

0000c144 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
               TfLiteTensor* output) {
    c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c148:	ed2d 8b02 	vpush	{d8}
  CalculateActivationRange(params->activation, &output_activation_min,
    c14c:	7813      	ldrb	r3, [r2, #0]
               TfLiteTensor* output) {
    c14e:	b0aa      	sub	sp, #168	; 0xa8
  if (activation == kTfLiteActRelu) {
    c150:	2b01      	cmp	r3, #1
    c152:	e9dd 5432 	ldrd	r5, r4, [sp, #200]	; 0xc8
    c156:	9e34      	ldr	r6, [sp, #208]	; 0xd0
    c158:	d055      	beq.n	c206 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc2>
  } else if (activation == kTfLiteActRelu6) {
    c15a:	2b03      	cmp	r3, #3
    c15c:	d058      	beq.n	c210 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xcc>
    *activation_max = std::numeric_limits<T>::max();
    c15e:	ed9f 7a48 	vldr	s14, [pc, #288]	; c280 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
    c162:	eddf 6a48 	vldr	s13, [pc, #288]	; c284 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x140>
    c166:	2b02      	cmp	r3, #2
    c168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c16c:	bf18      	it	ne
    c16e:	eef0 7a47 	vmovne.f32	s15, s14
    c172:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    c176:	bf18      	it	ne
    c178:	eeb0 7a66 	vmovne.f32	s14, s13
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
    c17c:	af10      	add	r7, sp, #64	; 0x40
    c17e:	4629      	mov	r1, r5
    c180:	a80a      	add	r0, sp, #40	; 0x28
  params->float_activation_min = min;
    c182:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
    c186:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    c18a:	f009 fbe4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c18e:	4621      	mov	r1, r4
    c190:	4638      	mov	r0, r7
    c192:	f009 fbe0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
    c196:	4639      	mov	r1, r7
    c198:	aa16      	add	r2, sp, #88	; 0x58
    c19a:	a80a      	add	r0, sp, #40	; 0x28
    c19c:	f009 fd52 	bl	15c44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
    c1a0:	4680      	mov	r8, r0
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
    c1a2:	4638      	mov	r0, r7
    c1a4:	f009 fb92 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    c1a8:	a80a      	add	r0, sp, #40	; 0x28
    c1aa:	f009 fb8f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_MUL(BroadcastMul4DSlow);
    c1ae:	4629      	mov	r1, r5
    c1b0:	a804      	add	r0, sp, #16
  if (need_broadcast) {
    c1b2:	f1b8 0f00 	cmp.w	r8, #0
    c1b6:	d02e      	beq.n	c216 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xd2>
    TF_LITE_MUL(BroadcastMul4DSlow);
    c1b8:	f009 fbcd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c1bc:	b105      	cbz	r5, c1c0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x7c>
    c1be:	686d      	ldr	r5, [r5, #4]
    c1c0:	4621      	mov	r1, r4
    c1c2:	a80a      	add	r0, sp, #40	; 0x28
    c1c4:	f009 fbc7 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c1c8:	b104      	cbz	r4, c1cc <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x88>
    c1ca:	6864      	ldr	r4, [r4, #4]
    c1cc:	4631      	mov	r1, r6
    c1ce:	4638      	mov	r0, r7
    c1d0:	f009 fbc1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c1d4:	b106      	cbz	r6, c1d8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x94>
    c1d6:	6876      	ldr	r6, [r6, #4]
    c1d8:	9400      	str	r4, [sp, #0]
    c1da:	e9cd 7601 	strd	r7, r6, [sp, #4]
    c1de:	ab0a      	add	r3, sp, #40	; 0x28
    c1e0:	462a      	mov	r2, r5
    c1e2:	a904      	add	r1, sp, #16
    c1e4:	a816      	add	r0, sp, #88	; 0x58
    c1e6:	f00e fd31 	bl	1ac4c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    TF_LITE_MUL(Mul);
    c1ea:	4638      	mov	r0, r7
    c1ec:	f009 fb6e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    c1f0:	a80a      	add	r0, sp, #40	; 0x28
    c1f2:	f009 fb6b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    c1f6:	a804      	add	r0, sp, #16
    c1f8:	f009 fb68 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
    c1fc:	b02a      	add	sp, #168	; 0xa8
    c1fe:	ecbd 8b02 	vpop	{d8}
    c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *activation_max = std::numeric_limits<T>::max();
    c206:	eddf 7a1e 	vldr	s15, [pc, #120]	; c280 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
    *activation_min = 0;
    c20a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c288 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x144>
    c20e:	e7b5      	b.n	c17c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x38>
    *activation_max = 6;
    c210:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    c214:	e7f9      	b.n	c20a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc6>
    TF_LITE_MUL(Mul);
    c216:	f009 fb9e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c21a:	b105      	cbz	r5, c21e <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xda>
    c21c:	686d      	ldr	r5, [r5, #4]
    c21e:	4621      	mov	r1, r4
    c220:	a80a      	add	r0, sp, #40	; 0x28
    c222:	f009 fb98 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c226:	b104      	cbz	r4, c22a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xe6>
    c228:	6864      	ldr	r4, [r4, #4]
    c22a:	4631      	mov	r1, r6
    c22c:	4638      	mov	r0, r7
    c22e:	f009 fb92 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c232:	b106      	cbz	r6, c236 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xf2>
    c234:	6876      	ldr	r6, [r6, #4]
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
    c236:	eddd 8a23 	vldr	s17, [sp, #140]	; 0x8c
  *max = params.float_activation_max;
    c23a:	ed9d 8a24 	vldr	s16, [sp, #144]	; 0x90
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
    c23e:	463a      	mov	r2, r7
    c240:	a90a      	add	r1, sp, #40	; 0x28
    c242:	a804      	add	r0, sp, #16
    c244:	f00a fbcb 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; ++i) {
    c248:	2300      	movs	r3, #0
    c24a:	4298      	cmp	r0, r3
    c24c:	ddcd      	ble.n	c1ea <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xa6>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] * input2_data[i], output_activation_min,
    c24e:	ecf5 7a01 	vldmia	r5!, {s15}
    c252:	ecb4 7a01 	vldmia	r4!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
    c256:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int i = 0; i < flat_size; ++i) {
    c25a:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
    c25c:	eef4 7ae8 	vcmpe.f32	s15, s17
    c260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c264:	bfb8      	it	lt
    c266:	eef0 7a68 	vmovlt.f32	s15, s17
    c26a:	eef4 7ac8 	vcmpe.f32	s15, s16
    c26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c272:	bf88      	it	hi
    c274:	eef0 7a48 	vmovhi.f32	s15, s16
    c278:	ece6 7a01 	vstmia	r6!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    c27c:	e7e5      	b.n	c24a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x106>
    c27e:	bf00      	nop
    c280:	7f7fffff 	.word	0x7f7fffff
    c284:	ff7fffff 	.word	0xff7fffff
    c288:	00000000 	.word	0x00000000

0000c28c <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c290:	680b      	ldr	r3, [r1, #0]
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);
    c292:	694a      	ldr	r2, [r1, #20]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
    c294:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    c296:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    c29a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c29c:	b08b      	sub	sp, #44	; 0x2c
    c29e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
    c2a2:	9205      	str	r2, [sp, #20]
    c2a4:	ab06      	add	r3, sp, #24
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c2a6:	4604      	mov	r4, r0
    c2a8:	460d      	mov	r5, r1
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
    c2aa:	f7ff fea9 	bl	c000 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>
    c2ae:	4606      	mov	r6, r0
    c2b0:	bb08      	cbnz	r0, c2f6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  return &context->tensors[node->inputs->data[index]];
    c2b2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
  switch (input1->type) {
    c2b6:	9a05      	ldr	r2, [sp, #20]
    c2b8:	f817 000b 	ldrb.w	r0, [r7, fp]
    c2bc:	2803      	cmp	r0, #3
    c2be:	eb07 1388 	add.w	r3, r7, r8, lsl #6
    c2c2:	eb07 1189 	add.w	r1, r7, r9, lsl #6
  return &context->tensors[node->outputs->data[index]];
    c2c6:	eb07 1a8a 	add.w	sl, r7, sl, lsl #6
    c2ca:	d00c      	beq.n	c2e6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    c2cc:	2809      	cmp	r0, #9
    c2ce:	d00a      	beq.n	c2e6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    c2d0:	2801      	cmp	r0, #1
    c2d2:	d114      	bne.n	c2fe <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      EvalFloat(context, node, params, &data, input1, input2, output);
    c2d4:	e9cd 1a01 	strd	r1, sl, [sp, #4]
    c2d8:	9300      	str	r3, [sp, #0]
    c2da:	4629      	mov	r1, r5
    c2dc:	ab06      	add	r3, sp, #24
    c2de:	4620      	mov	r0, r4
    c2e0:	f7ff ff30 	bl	c144 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
    c2e4:	e007      	b.n	c2f6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      EvalQuantized(context, node, params, &data, input1, input2, output);
    c2e6:	e9cd 1a01 	strd	r1, sl, [sp, #4]
    c2ea:	9300      	str	r3, [sp, #0]
    c2ec:	4629      	mov	r1, r5
    c2ee:	ab06      	add	r3, sp, #24
    c2f0:	4620      	mov	r0, r4
    c2f2:	f00e ff03 	bl	1b0fc <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
}
    c2f6:	4630      	mov	r0, r6
    c2f8:	b00b      	add	sp, #44	; 0x2c
    c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c2fe:	6965      	ldr	r5, [r4, #20]
    c300:	f7f4 fad7 	bl	8b2 <TfLiteTypeGetName>
    c304:	f817 300b 	ldrb.w	r3, [r7, fp]
    c308:	4902      	ldr	r1, [pc, #8]	; (c314 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
    c30a:	4602      	mov	r2, r0
    c30c:	4620      	mov	r0, r4
    c30e:	47a8      	blx	r5
      return kTfLiteError;
    c310:	2601      	movs	r6, #1
    c312:	e7f0      	b.n	c2f6 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    c314:	00027ac7 	.word	0x00027ac7

0000c318 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    c318:	680b      	ldr	r3, [r1, #0]
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c31e:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    c320:	6884      	ldr	r4, [r0, #8]
    c322:	01b7      	lsls	r7, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c324:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
    c326:	5de0      	ldrb	r0, [r4, r7]
    c328:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c32a:	b08c      	sub	sp, #48	; 0x30
    c32c:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  switch (input->type) {
    c330:	d147      	bne.n	c3c2 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  return &context->tensors[node->outputs->data[index]];
    c332:	684b      	ldr	r3, [r1, #4]
    c334:	685b      	ldr	r3, [r3, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
    c336:	4631      	mov	r1, r6
    c338:	eb04 1483 	add.w	r4, r4, r3, lsl #6
    c33c:	4668      	mov	r0, sp
    c33e:	f009 fb0a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
    c342:	4621      	mov	r1, r4
    c344:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c346:	6876      	ldr	r6, [r6, #4]
    c348:	f009 fb05 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c34c:	b104      	cbz	r4, c350 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    c34e:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    c350:	9f00      	ldr	r7, [sp, #0]
    c352:	9b06      	ldr	r3, [sp, #24]
    c354:	429f      	cmp	r7, r3
    c356:	d001      	beq.n	c35c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    c358:	f012 f94c 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
    c35c:	2500      	movs	r5, #0
    c35e:	42af      	cmp	r7, r5
    c360:	dd0c      	ble.n	c37c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    c362:	4629      	mov	r1, r5
    c364:	4668      	mov	r0, sp
    c366:	f009 fabc 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    c36a:	4629      	mov	r1, r5
    c36c:	4680      	mov	r8, r0
    c36e:	a806      	add	r0, sp, #24
    c370:	f009 fab7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    c374:	4580      	cmp	r8, r0
    c376:	d1ef      	bne.n	c358 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
    c378:	3501      	adds	r5, #1
    c37a:	e7f0      	b.n	c35e <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c37c:	2f05      	cmp	r7, #5
    c37e:	bfcc      	ite	gt
    c380:	9a01      	ldrgt	r2, [sp, #4]
    c382:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
    c384:	2300      	movs	r3, #0
    int buffer_size = 1;
    c386:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    c388:	429f      	cmp	r7, r3
    c38a:	dc0b      	bgt.n	c3a4 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
    c38c:	4633      	mov	r3, r6
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
    c38e:	2200      	movs	r2, #0
    c390:	428a      	cmp	r2, r1
    c392:	da0c      	bge.n	c3ae <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
    c394:	ecf3 7a01 	vldmia	r3!, {s15}
    c398:	eef1 7a67 	vneg.f32	s15, s15
    c39c:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    c3a0:	3201      	adds	r2, #1
    c3a2:	e7f5      	b.n	c390 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
    c3a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    c3a8:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    c3aa:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
    c3ac:	e7ec      	b.n	c388 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    c3ae:	a806      	add	r0, sp, #24
    c3b0:	f009 fa8c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
    c3b4:	4668      	mov	r0, sp
    c3b6:	f009 fa89 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
    c3ba:	2000      	movs	r0, #0
}
    c3bc:	b00c      	add	sp, #48	; 0x30
    c3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c3c2:	696e      	ldr	r6, [r5, #20]
    c3c4:	f7f4 fa75 	bl	8b2 <TfLiteTypeGetName>
    c3c8:	5de3      	ldrb	r3, [r4, r7]
    c3ca:	4903      	ldr	r1, [pc, #12]	; (c3d8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    c3cc:	4602      	mov	r2, r0
    c3ce:	4628      	mov	r0, r5
    c3d0:	47b0      	blx	r6
      return kTfLiteError;
    c3d2:	2001      	movs	r0, #1
    c3d4:	e7f2      	b.n	c3bc <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    c3d6:	bf00      	nop
    c3d8:	00027ac7 	.word	0x00027ac7

0000c3dc <_ZN6tflite3ops5micro12Register_NEGEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c3dc:	4800      	ldr	r0, [pc, #0]	; (c3e0 <_ZN6tflite3ops5micro12Register_NEGEv+0x4>)
    c3de:	4770      	bx	lr
    c3e0:	20000488 	.word	0x20000488

0000c3e4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3e8:	b085      	sub	sp, #20
  const TfLitePackParams* data =
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    c3ea:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c3ec:	9000      	str	r0, [sp, #0]
    c3ee:	6848      	ldr	r0, [r1, #4]
  const TfLitePackParams* data =
    c3f0:	694a      	ldr	r2, [r1, #20]
    c3f2:	6847      	ldr	r7, [r0, #4]
    c3f4:	01b8      	lsls	r0, r7, #6
    c3f6:	eb03 1787 	add.w	r7, r3, r7, lsl #6

  switch (output->type) {
    c3fa:	5c18      	ldrb	r0, [r3, r0]
    c3fc:	1e45      	subs	r5, r0, #1
    c3fe:	2d08      	cmp	r5, #8
    c400:	f200 821a 	bhi.w	c838 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
    c404:	e8df f015 	tbh	[pc, r5, lsl #1]
    c408:	01430009 	.word	0x01430009
    c40c:	01ab0075 	.word	0x01ab0075
    c410:	02180218 	.word	0x02180218
    c414:	02180218 	.word	0x02180218
    c418:	00db      	.short	0x00db
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c41a:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c41c:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
    c41e:	6841      	ldr	r1, [r0, #4]
    c420:	f8d5 e000 	ldr.w	lr, [r5]
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
    c424:	e9d2 9200 	ldrd	r9, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c428:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    c42c:	f105 0c04 	add.w	ip, r5, #4
  if (axis < 0) {
    c430:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c432:	688c      	ldr	r4, [r1, #8]
    axis += dimensions;
    c434:	bfb8      	it	lt
    c436:	4472      	addlt	r2, lr
    c438:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    c43a:	2100      	movs	r1, #0
  int outer_size = 1;
    c43c:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    c43e:	428a      	cmp	r2, r1
    c440:	dd05      	ble.n	c44e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    outer_size *= output_dims->data[i];
    c442:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    c446:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c448:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    c44c:	e7f7      	b.n	c43e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  for (int i = axis + 1; i < dimensions; ++i) {
    c44e:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c450:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c452:	458e      	cmp	lr, r1
    c454:	dc0c      	bgt.n	c470 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
  for (int i = 0; i < input_dims->size; ++i) {
    c456:	4621      	mov	r1, r4
    c458:	2600      	movs	r6, #0
    c45a:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c45e:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c460:	45b6      	cmp	lr, r6
    c462:	dd0a      	ble.n	c47a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
    input_size *= input_dims->data[i];
    c464:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c468:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
    c46a:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
    c46e:	e7f7      	b.n	c460 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    copy_size *= output_dims->data[i];
    c470:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c474:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c476:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    c478:	e7eb      	b.n	c452 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c47a:	fb02 f105 	mul.w	r1, r2, r5
    c47e:	428c      	cmp	r4, r1
    c480:	d001      	beq.n	c486 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    c482:	f012 f8b7 	bl	1e5f4 <abort>
    c486:	6879      	ldr	r1, [r7, #4]
    c488:	9101      	str	r1, [sp, #4]
    c48a:	1d01      	adds	r1, r0, #4
    c48c:	9100      	str	r1, [sp, #0]
    c48e:	2400      	movs	r4, #0
    c490:	fb02 f109 	mul.w	r1, r2, r9
    c494:	9102      	str	r1, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c496:	4627      	mov	r7, r4
    c498:	45b9      	cmp	r9, r7
    c49a:	dc03      	bgt.n	c4a4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return PackImpl<float>(context, node, output, data->values_count,
    c49c:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    c49e:	b005      	add	sp, #20
    c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4a4:	9800      	ldr	r0, [sp, #0]
    c4a6:	f850 1b04 	ldr.w	r1, [r0], #4
    c4aa:	9000      	str	r0, [sp, #0]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c4ac:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int i = 0; i < values_count; ++i) {
    c4b0:	f04f 0600 	mov.w	r6, #0
    c4b4:	bf18      	it	ne
    c4b6:	6849      	ldrne	r1, [r1, #4]
    c4b8:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    c4ba:	46b6      	mov	lr, r6
    c4bc:	4575      	cmp	r5, lr
    c4be:	dd15      	ble.n	c4ec <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
    c4c0:	9801      	ldr	r0, [sp, #4]
    c4c2:	eb01 0b86 	add.w	fp, r1, r6, lsl #2
    c4c6:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c4ca:	f04f 0800 	mov.w	r8, #0
    c4ce:	4542      	cmp	r2, r8
    c4d0:	dd06      	ble.n	c4e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    c4d2:	ecfb 7a01 	vldmia	fp!, {s15}
    c4d6:	f108 0801 	add.w	r8, r8, #1
    c4da:	ecea 7a01 	vstmia	sl!, {s15}
    c4de:	e7f6      	b.n	c4ce <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    for (int k = 0; k < outer_size; ++k) {
    c4e0:	9802      	ldr	r0, [sp, #8]
    c4e2:	f10e 0e01 	add.w	lr, lr, #1
    c4e6:	4416      	add	r6, r2
    c4e8:	4484      	add	ip, r0
    c4ea:	e7e7      	b.n	c4bc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
  for (int i = 0; i < values_count; ++i) {
    c4ec:	3701      	adds	r7, #1
    c4ee:	4414      	add	r4, r2
    c4f0:	e7d2      	b.n	c498 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    c4f2:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c4f4:	68be      	ldr	r6, [r7, #8]
    c4f6:	6840      	ldr	r0, [r0, #4]
    c4f8:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
    c4fc:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c500:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    c504:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
    c508:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c50a:	689d      	ldr	r5, [r3, #8]
    axis += dimensions;
    c50c:	bfb8      	it	lt
    c50e:	4472      	addlt	r2, lr
    c510:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    c512:	2300      	movs	r3, #0
  int outer_size = 1;
    c514:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    c516:	429a      	cmp	r2, r3
    c518:	dd05      	ble.n	c526 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
    outer_size *= output_dims->data[i];
    c51a:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    c51e:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
    c520:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    c524:	e7f7      	b.n	c516 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
  for (int i = axis + 1; i < dimensions; ++i) {
    c526:	3201      	adds	r2, #1
  int copy_size = 1;
    c528:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c52a:	4596      	cmp	lr, r2
    c52c:	dc0c      	bgt.n	c548 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x164>
  for (int i = 0; i < input_dims->size; ++i) {
    c52e:	462a      	mov	r2, r5
  int input_size = 1;
    c530:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c532:	f852 eb04 	ldr.w	lr, [r2], #4
    c536:	2500      	movs	r5, #0
    c538:	45ae      	cmp	lr, r5
    c53a:	dd0a      	ble.n	c552 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
    input_size *= input_dims->data[i];
    c53c:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c540:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c542:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
    c546:	e7f7      	b.n	c538 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x154>
    copy_size *= output_dims->data[i];
    c548:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c54c:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
    c54e:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    c550:	e7eb      	b.n	c52a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c552:	fb03 f206 	mul.w	r2, r3, r6
    c556:	4290      	cmp	r0, r2
    c558:	d193      	bne.n	c482 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c55a:	687a      	ldr	r2, [r7, #4]
    c55c:	9201      	str	r2, [sp, #4]
    c55e:	2000      	movs	r0, #0
    c560:	fb03 f20b 	mul.w	r2, r3, fp
    c564:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c566:	4605      	mov	r5, r0
    c568:	45ab      	cmp	fp, r5
    c56a:	dd97      	ble.n	c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c56c:	680a      	ldr	r2, [r1, #0]
    c56e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    c572:	4684      	mov	ip, r0
    c574:	6857      	ldr	r7, [r2, #4]
    c576:	9a00      	ldr	r2, [sp, #0]
    c578:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c57a:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    c57e:	f04f 0700 	mov.w	r7, #0
    c582:	bf18      	it	ne
    c584:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    c586:	46be      	mov	lr, r7
    c588:	4576      	cmp	r6, lr
    c58a:	dd15      	ble.n	c5b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    c58c:	9c01      	ldr	r4, [sp, #4]
    c58e:	eb02 0a07 	add.w	sl, r2, r7
    c592:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c596:	f04f 0800 	mov.w	r8, #0
    c59a:	4543      	cmp	r3, r8
    c59c:	dd06      	ble.n	c5ac <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
    c59e:	f81a 4b01 	ldrb.w	r4, [sl], #1
    c5a2:	f809 4b01 	strb.w	r4, [r9], #1
    c5a6:	f108 0801 	add.w	r8, r8, #1
    c5aa:	e7f6      	b.n	c59a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    for (int k = 0; k < outer_size; ++k) {
    c5ac:	9c02      	ldr	r4, [sp, #8]
    c5ae:	f10e 0e01 	add.w	lr, lr, #1
    c5b2:	441f      	add	r7, r3
    c5b4:	44a4      	add	ip, r4
    c5b6:	e7e7      	b.n	c588 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
  for (int i = 0; i < values_count; ++i) {
    c5b8:	3501      	adds	r5, #1
    c5ba:	4418      	add	r0, r3
    c5bc:	e7d4      	b.n	c568 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>
    c5be:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c5c0:	68be      	ldr	r6, [r7, #8]
    c5c2:	6840      	ldr	r0, [r0, #4]
    c5c4:	f8d6 e000 	ldr.w	lr, [r6]
                              data->axis);
    c5c8:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c5cc:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    c5d0:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
    c5d4:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c5d6:	689d      	ldr	r5, [r3, #8]
    axis += dimensions;
    c5d8:	bfb8      	it	lt
    c5da:	4472      	addlt	r2, lr
    c5dc:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    c5de:	2300      	movs	r3, #0
  int outer_size = 1;
    c5e0:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    c5e2:	429a      	cmp	r2, r3
    c5e4:	dd05      	ble.n	c5f2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    outer_size *= output_dims->data[i];
    c5e6:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    c5ea:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
    c5ec:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    c5f0:	e7f7      	b.n	c5e2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
  for (int i = axis + 1; i < dimensions; ++i) {
    c5f2:	3201      	adds	r2, #1
  int copy_size = 1;
    c5f4:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c5f6:	4596      	cmp	lr, r2
    c5f8:	dc0c      	bgt.n	c614 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  for (int i = 0; i < input_dims->size; ++i) {
    c5fa:	462a      	mov	r2, r5
  int input_size = 1;
    c5fc:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c5fe:	f852 eb04 	ldr.w	lr, [r2], #4
    c602:	2500      	movs	r5, #0
    c604:	45ae      	cmp	lr, r5
    c606:	dd0a      	ble.n	c61e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23a>
    input_size *= input_dims->data[i];
    c608:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c60c:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c60e:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
    c612:	e7f7      	b.n	c604 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>
    copy_size *= output_dims->data[i];
    c614:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c618:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
    c61a:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    c61c:	e7eb      	b.n	c5f6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c61e:	fb03 f206 	mul.w	r2, r3, r6
    c622:	4290      	cmp	r0, r2
    c624:	f47f af2d 	bne.w	c482 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c628:	687a      	ldr	r2, [r7, #4]
    c62a:	9201      	str	r2, [sp, #4]
    c62c:	2000      	movs	r0, #0
    c62e:	fb03 f20b 	mul.w	r2, r3, fp
    c632:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c634:	4605      	mov	r5, r0
    c636:	45ab      	cmp	fp, r5
    c638:	f77f af30 	ble.w	c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c63c:	680a      	ldr	r2, [r1, #0]
    c63e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    c642:	4684      	mov	ip, r0
    c644:	6857      	ldr	r7, [r2, #4]
    c646:	9a00      	ldr	r2, [sp, #0]
    c648:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c64a:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    c64e:	f04f 0700 	mov.w	r7, #0
    c652:	bf18      	it	ne
    c654:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    c656:	46be      	mov	lr, r7
    c658:	4576      	cmp	r6, lr
    c65a:	dd15      	ble.n	c688 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>
    c65c:	9c01      	ldr	r4, [sp, #4]
    c65e:	eb02 0a07 	add.w	sl, r2, r7
    c662:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c666:	f04f 0800 	mov.w	r8, #0
    c66a:	4543      	cmp	r3, r8
    c66c:	dd06      	ble.n	c67c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>
    c66e:	f91a 4b01 	ldrsb.w	r4, [sl], #1
    c672:	f809 4b01 	strb.w	r4, [r9], #1
    c676:	f108 0801 	add.w	r8, r8, #1
    c67a:	e7f6      	b.n	c66a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x286>
    for (int k = 0; k < outer_size; ++k) {
    c67c:	9c02      	ldr	r4, [sp, #8]
    c67e:	f10e 0e01 	add.w	lr, lr, #1
    c682:	441f      	add	r7, r3
    c684:	44a4      	add	ip, r4
    c686:	e7e7      	b.n	c658 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
  for (int i = 0; i < values_count; ++i) {
    c688:	3501      	adds	r5, #1
    c68a:	4418      	add	r0, r3
    c68c:	e7d3      	b.n	c636 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x252>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c68e:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
    c690:	68bd      	ldr	r5, [r7, #8]
    c692:	6841      	ldr	r1, [r0, #4]
    c694:	f8d5 e000 	ldr.w	lr, [r5]
                               data->axis);
    c698:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input0->dims;
    c69c:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    c6a0:	f105 0c04 	add.w	ip, r5, #4
  if (axis < 0) {
    c6a4:	2a00      	cmp	r2, #0
  const TfLiteIntArray* input_dims = input0->dims;
    c6a6:	688c      	ldr	r4, [r1, #8]
    axis += dimensions;
    c6a8:	bfb8      	it	lt
    c6aa:	4472      	addlt	r2, lr
    c6ac:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    c6ae:	2100      	movs	r1, #0
  int outer_size = 1;
    c6b0:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    c6b2:	428a      	cmp	r2, r1
    c6b4:	dd05      	ble.n	c6c2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2de>
    outer_size *= output_dims->data[i];
    c6b6:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    c6ba:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c6bc:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    c6c0:	e7f7      	b.n	c6b2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
  for (int i = axis + 1; i < dimensions; ++i) {
    c6c2:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c6c4:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c6c6:	458e      	cmp	lr, r1
    c6c8:	dc0c      	bgt.n	c6e4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
  for (int i = 0; i < input_dims->size; ++i) {
    c6ca:	4621      	mov	r1, r4
    c6cc:	2600      	movs	r6, #0
    c6ce:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c6d2:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c6d4:	45b6      	cmp	lr, r6
    c6d6:	dd0a      	ble.n	c6ee <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30a>
    input_size *= input_dims->data[i];
    c6d8:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c6dc:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
    c6de:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
    c6e2:	e7f7      	b.n	c6d4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
    copy_size *= output_dims->data[i];
    c6e4:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c6e8:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c6ea:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    c6ec:	e7eb      	b.n	c6c6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c6ee:	fb02 f105 	mul.w	r1, r2, r5
    c6f2:	428c      	cmp	r4, r1
    c6f4:	f47f aec5 	bne.w	c482 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c6f8:	6879      	ldr	r1, [r7, #4]
    c6fa:	9101      	str	r1, [sp, #4]
    c6fc:	1d01      	adds	r1, r0, #4
    c6fe:	9100      	str	r1, [sp, #0]
    c700:	2400      	movs	r4, #0
    c702:	fb02 f10b 	mul.w	r1, r2, fp
    c706:	9102      	str	r1, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
    c708:	4627      	mov	r7, r4
    c70a:	45bb      	cmp	fp, r7
    c70c:	f77f aec6 	ble.w	c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c710:	9800      	ldr	r0, [sp, #0]
    c712:	f850 1b04 	ldr.w	r1, [r0], #4
    c716:	9000      	str	r0, [sp, #0]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c718:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    c71c:	f04f 0600 	mov.w	r6, #0
    c720:	bf18      	it	ne
    c722:	6849      	ldrne	r1, [r1, #4]
    c724:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    c726:	46b6      	mov	lr, r6
    c728:	4575      	cmp	r5, lr
    c72a:	dd15      	ble.n	c758 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    c72c:	9801      	ldr	r0, [sp, #4]
    c72e:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
    c732:	eb00 098c 	add.w	r9, r0, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c736:	f04f 0800 	mov.w	r8, #0
    c73a:	4542      	cmp	r2, r8
    c73c:	dd06      	ble.n	c74c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>
    c73e:	f85a 0b04 	ldr.w	r0, [sl], #4
    c742:	f849 0b04 	str.w	r0, [r9], #4
    c746:	f108 0801 	add.w	r8, r8, #1
    c74a:	e7f6      	b.n	c73a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x356>
    for (int k = 0; k < outer_size; ++k) {
    c74c:	9802      	ldr	r0, [sp, #8]
    c74e:	f10e 0e01 	add.w	lr, lr, #1
    c752:	4416      	add	r6, r2
    c754:	4484      	add	ip, r0
    c756:	e7e7      	b.n	c728 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x344>
  for (int i = 0; i < values_count; ++i) {
    c758:	3701      	adds	r7, #1
    c75a:	4414      	add	r4, r2
    c75c:	e7d5      	b.n	c70a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x326>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
    c75e:	f8d1 c000 	ldr.w	ip, [r1]
  const int dimensions = output->dims->size;
    c762:	68be      	ldr	r6, [r7, #8]
    c764:	f8dc 1004 	ldr.w	r1, [ip, #4]
      return PackImpl<int64_t>(context, node, output, data->values_count,
    c768:	6810      	ldr	r0, [r2, #0]
                               data->axis);
    c76a:	6852      	ldr	r2, [r2, #4]
  const int dimensions = output->dims->size;
    c76c:	f8d6 e000 	ldr.w	lr, [r6]
      return PackImpl<int64_t>(context, node, output, data->values_count,
    c770:	9000      	str	r0, [sp, #0]
  const TfLiteIntArray* input_dims = input0->dims;
    c772:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  if (axis < 0) {
    c776:	2a00      	cmp	r2, #0
    c778:	f106 0604 	add.w	r6, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
    c77c:	6888      	ldr	r0, [r1, #8]
    axis += dimensions;
    c77e:	bfb8      	it	lt
    c780:	4472      	addlt	r2, lr
    c782:	4635      	mov	r5, r6
  for (int i = 0; i < axis; ++i) {
    c784:	2100      	movs	r1, #0
  int outer_size = 1;
    c786:	2401      	movs	r4, #1
  for (int i = 0; i < axis; ++i) {
    c788:	428a      	cmp	r2, r1
    c78a:	dd05      	ble.n	c798 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>
    outer_size *= output_dims->data[i];
    c78c:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
    c790:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
    c792:	fb08 f404 	mul.w	r4, r8, r4
  for (int i = 0; i < axis; ++i) {
    c796:	e7f7      	b.n	c788 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a4>
  for (int i = axis + 1; i < dimensions; ++i) {
    c798:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    c79a:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    c79c:	458e      	cmp	lr, r1
    c79e:	dc0b      	bgt.n	c7b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
  for (int i = 0; i < input_dims->size; ++i) {
    c7a0:	4601      	mov	r1, r0
    c7a2:	2500      	movs	r5, #0
    c7a4:	f851 eb04 	ldr.w	lr, [r1], #4
  int input_size = 1;
    c7a8:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
    c7aa:	45ae      	cmp	lr, r5
    c7ac:	dd09      	ble.n	c7c2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3de>
    input_size *= input_dims->data[i];
    c7ae:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
    c7b2:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
    c7b4:	4370      	muls	r0, r6
  for (int i = 0; i < input_dims->size; ++i) {
    c7b6:	e7f8      	b.n	c7aa <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    copy_size *= output_dims->data[i];
    c7b8:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    c7bc:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
    c7be:	436a      	muls	r2, r5
  for (int i = axis + 1; i < dimensions; ++i) {
    c7c0:	e7ec      	b.n	c79c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
    c7c2:	fb02 f104 	mul.w	r1, r2, r4
    c7c6:	4288      	cmp	r0, r1
    c7c8:	f47f ae5b 	bne.w	c482 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    c7cc:	6879      	ldr	r1, [r7, #4]
    c7ce:	9102      	str	r1, [sp, #8]
    c7d0:	f10c 0104 	add.w	r1, ip, #4
    c7d4:	9101      	str	r1, [sp, #4]
    c7d6:	9900      	ldr	r1, [sp, #0]
    c7d8:	2000      	movs	r0, #0
    c7da:	4351      	muls	r1, r2
    c7dc:	9103      	str	r1, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
    c7de:	4684      	mov	ip, r0
    c7e0:	9900      	ldr	r1, [sp, #0]
    c7e2:	4561      	cmp	r1, ip
    c7e4:	f77f ae5a 	ble.w	c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    c7e8:	9d01      	ldr	r5, [sp, #4]
    c7ea:	f855 1b04 	ldr.w	r1, [r5], #4
    c7ee:	9501      	str	r5, [sp, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    c7f0:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    c7f4:	f04f 0500 	mov.w	r5, #0
    c7f8:	bf18      	it	ne
    c7fa:	6849      	ldrne	r1, [r1, #4]
    c7fc:	4686      	mov	lr, r0
    for (int k = 0; k < outer_size; ++k) {
    c7fe:	46a8      	mov	r8, r5
    c800:	4544      	cmp	r4, r8
    c802:	dd15      	ble.n	c830 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>
    c804:	9f02      	ldr	r7, [sp, #8]
    c806:	eb01 0bc5 	add.w	fp, r1, r5, lsl #3
    c80a:	eb07 0ace 	add.w	sl, r7, lr, lsl #3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    c80e:	f04f 0900 	mov.w	r9, #0
    c812:	454a      	cmp	r2, r9
    c814:	dd06      	ble.n	c824 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
    c816:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    c81a:	f109 0901 	add.w	r9, r9, #1
    c81e:	e8ea 6702 	strd	r6, r7, [sl], #8
    c822:	e7f6      	b.n	c812 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42e>
    for (int k = 0; k < outer_size; ++k) {
    c824:	9f03      	ldr	r7, [sp, #12]
    c826:	f108 0801 	add.w	r8, r8, #1
    c82a:	4415      	add	r5, r2
    c82c:	44be      	add	lr, r7
    c82e:	e7e7      	b.n	c800 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  for (int i = 0; i < values_count; ++i) {
    c830:	f10c 0c01 	add.w	ip, ip, #1
    c834:	4410      	add	r0, r2
    c836:	e7d3      	b.n	c7e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by pack.",
    c838:	9b00      	ldr	r3, [sp, #0]
    c83a:	695d      	ldr	r5, [r3, #20]
    c83c:	f7f4 f839 	bl	8b2 <TfLiteTypeGetName>
    c840:	4902      	ldr	r1, [pc, #8]	; (c84c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x468>)
    c842:	4602      	mov	r2, r0
    c844:	9800      	ldr	r0, [sp, #0]
    c846:	47a8      	blx	r5
      return kTfLiteError;
    c848:	2001      	movs	r0, #1
    c84a:	e628      	b.n	c49e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    c84c:	000282ff 	.word	0x000282ff

0000c850 <_ZN6tflite3ops5micro13Register_PACKEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    c850:	4800      	ldr	r0, [pc, #0]	; (c854 <_ZN6tflite3ops5micro13Register_PACKEv+0x4>)
    c852:	4770      	bx	lr
    c854:	200004a8 	.word	0x200004a8

0000c858 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    c858:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output;
  int dims;
  ResizingCategory resizing_category;
};

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
    c85e:	681b      	ldr	r3, [r3, #0]
    c860:	3b02      	subs	r3, #2
    c862:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c864:	b090      	sub	sp, #64	; 0x40
    c866:	4604      	mov	r4, r0
    c868:	460a      	mov	r2, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
    c86a:	d90a      	bls.n	c882 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    c86c:	4b58      	ldr	r3, [pc, #352]	; (c9d0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    c86e:	9300      	str	r3, [sp, #0]
    c870:	6944      	ldr	r4, [r0, #20]
    c872:	4a58      	ldr	r2, [pc, #352]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c874:	4958      	ldr	r1, [pc, #352]	; (c9d8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    c876:	2347      	movs	r3, #71	; 0x47
    c878:	47a0      	blx	r4
  }

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(
      context, op_context.dims <= reference_ops::PadKernelMaxDimensionCount());
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
    c87a:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    c87c:	b010      	add	sp, #64	; 0x40
    c87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    c882:	684b      	ldr	r3, [r1, #4]
    c884:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    c886:	2d01      	cmp	r5, #1
    c888:	d00c      	beq.n	c8a4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    c88a:	2601      	movs	r6, #1
    c88c:	e9cd 5602 	strd	r5, r6, [sp, #8]
    c890:	4b52      	ldr	r3, [pc, #328]	; (c9dc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    c892:	9301      	str	r3, [sp, #4]
    c894:	4b52      	ldr	r3, [pc, #328]	; (c9e0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    c896:	9300      	str	r3, [sp, #0]
    c898:	6944      	ldr	r4, [r0, #20]
    c89a:	4a4e      	ldr	r2, [pc, #312]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c89c:	4951      	ldr	r1, [pc, #324]	; (c9e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c89e:	2348      	movs	r3, #72	; 0x48
    c8a0:	47a0      	blx	r4
    c8a2:	e7ea      	b.n	c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  PadContext op_context(context, node);
    c8a4:	4601      	mov	r1, r0
    c8a6:	a804      	add	r0, sp, #16
    c8a8:	f00e fc39 	bl	1b11e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);
    c8ac:	9b05      	ldr	r3, [sp, #20]
    c8ae:	9a07      	ldr	r2, [sp, #28]
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	7812      	ldrb	r2, [r2, #0]
    c8b4:	4293      	cmp	r3, r2
    c8b6:	d00c      	beq.n	c8d2 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
    c8b8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c8bc:	4b4a      	ldr	r3, [pc, #296]	; (c9e8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c8be:	9301      	str	r3, [sp, #4]
    c8c0:	4b4a      	ldr	r3, [pc, #296]	; (c9ec <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c8c2:	9300      	str	r3, [sp, #0]
    c8c4:	6966      	ldr	r6, [r4, #20]
    c8c6:	234b      	movs	r3, #75	; 0x4b
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
    c8c8:	4a42      	ldr	r2, [pc, #264]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c8ca:	4946      	ldr	r1, [pc, #280]	; (c9e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c8cc:	4620      	mov	r0, r4
    c8ce:	47b0      	blx	r6
    c8d0:	e7d3      	b.n	c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  if (op_context.constant_values != nullptr) {
    c8d2:	9a04      	ldr	r2, [sp, #16]
    c8d4:	b15a      	cbz	r2, c8ee <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
    c8d6:	7812      	ldrb	r2, [r2, #0]
    c8d8:	4293      	cmp	r3, r2
    c8da:	d008      	beq.n	c8ee <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    c8dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c8e0:	4b43      	ldr	r3, [pc, #268]	; (c9f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c8e2:	9301      	str	r3, [sp, #4]
    c8e4:	4b41      	ldr	r3, [pc, #260]	; (c9ec <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c8e6:	9300      	str	r3, [sp, #0]
    c8e8:	6966      	ldr	r6, [r4, #20]
    c8ea:	234d      	movs	r3, #77	; 0x4d
    c8ec:	e7ec      	b.n	c8c8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(op_context.paddings).FlatSize(),
    c8ee:	9906      	ldr	r1, [sp, #24]
    c8f0:	a80a      	add	r0, sp, #40	; 0x28
    c8f2:	f009 f830 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c8f6:	a80a      	add	r0, sp, #40	; 0x28
    c8f8:	f009 f878 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    c8fc:	9b07      	ldr	r3, [sp, #28]
    c8fe:	689b      	ldr	r3, [r3, #8]
    c900:	681d      	ldr	r5, [r3, #0]
    c902:	4606      	mov	r6, r0
    c904:	006d      	lsls	r5, r5, #1
    c906:	a80a      	add	r0, sp, #40	; 0x28
    c908:	f008 ffe0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    c90c:	42ae      	cmp	r6, r5
    c90e:	d01a      	beq.n	c946 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xee>
    c910:	9906      	ldr	r1, [sp, #24]
    c912:	6965      	ldr	r5, [r4, #20]
    c914:	a80a      	add	r0, sp, #40	; 0x28
    c916:	f009 f81e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    c91a:	a80a      	add	r0, sp, #40	; 0x28
    c91c:	f009 f866 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    c920:	9b07      	ldr	r3, [sp, #28]
    c922:	4a2c      	ldr	r2, [pc, #176]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c924:	689b      	ldr	r3, [r3, #8]
    c926:	492f      	ldr	r1, [pc, #188]	; (c9e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c928:	681b      	ldr	r3, [r3, #0]
    c92a:	005b      	lsls	r3, r3, #1
    c92c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    c930:	4b30      	ldr	r3, [pc, #192]	; (c9f4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    c932:	9301      	str	r3, [sp, #4]
    c934:	4b30      	ldr	r3, [pc, #192]	; (c9f8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    c936:	9300      	str	r3, [sp, #0]
    c938:	4620      	mov	r0, r4
    c93a:	2352      	movs	r3, #82	; 0x52
    c93c:	47a8      	blx	r5
    c93e:	a80a      	add	r0, sp, #40	; 0x28
    c940:	f008 ffc4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    c944:	e799      	b.n	c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
    c946:	9906      	ldr	r1, [sp, #24]
    c948:	b339      	cbz	r1, c99a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x142>
    c94a:	684d      	ldr	r5, [r1, #4]
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c94c:	9b07      	ldr	r3, [sp, #28]
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c94e:	f8dd e014 	ldr.w	lr, [sp, #20]
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c952:	6898      	ldr	r0, [r3, #8]
    c954:	f850 cb04 	ldr.w	ip, [r0], #4
    c958:	2300      	movs	r3, #0
                       paddings_data[i * 2 + 1];
    c95a:	f105 0804 	add.w	r8, r5, #4
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c95e:	459c      	cmp	ip, r3
    c960:	dd1f      	ble.n	c9a2 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c962:	f855 6033 	ldr.w	r6, [r5, r3, lsl #3]
    c966:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
    int output_dim = op_context.output->dims->data[i];
    c96a:	f850 7b04 	ldr.w	r7, [r0], #4
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
    c96e:	4432      	add	r2, r6
    c970:	f8de 6008 	ldr.w	r6, [lr, #8]
    c974:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    c978:	6876      	ldr	r6, [r6, #4]
    c97a:	4432      	add	r2, r6
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
    c97c:	4297      	cmp	r7, r2
    c97e:	d00e      	beq.n	c99e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
    c980:	e9cd 7202 	strd	r7, r2, [sp, #8]
    c984:	4b1d      	ldr	r3, [pc, #116]	; (c9fc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    c986:	9301      	str	r3, [sp, #4]
    c988:	4b1d      	ldr	r3, [pc, #116]	; (ca00 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    c98a:	9300      	str	r3, [sp, #0]
    c98c:	6965      	ldr	r5, [r4, #20]
    c98e:	4a11      	ldr	r2, [pc, #68]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c990:	4914      	ldr	r1, [pc, #80]	; (c9e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c992:	235b      	movs	r3, #91	; 0x5b
    c994:	4620      	mov	r0, r4
    c996:	47a8      	blx	r5
    c998:	e76f      	b.n	c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    c99a:	460d      	mov	r5, r1
    c99c:	e7d6      	b.n	c94c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  for (int i = 0; i < op_context.output->dims->size; i++) {
    c99e:	3301      	adds	r3, #1
    c9a0:	e7dd      	b.n	c95e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TF_LITE_ENSURE(
    c9a2:	9b08      	ldr	r3, [sp, #32]
    c9a4:	2b04      	cmp	r3, #4
    c9a6:	dd08      	ble.n	c9ba <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
    c9a8:	4b16      	ldr	r3, [pc, #88]	; (ca04 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    c9aa:	9300      	str	r3, [sp, #0]
    c9ac:	6965      	ldr	r5, [r4, #20]
    c9ae:	235f      	movs	r3, #95	; 0x5f
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
    c9b0:	4a08      	ldr	r2, [pc, #32]	; (c9d4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    c9b2:	4909      	ldr	r1, [pc, #36]	; (c9d8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    c9b4:	4620      	mov	r0, r4
    c9b6:	47a8      	blx	r5
    c9b8:	e75f      	b.n	c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    c9ba:	7d0b      	ldrb	r3, [r1, #20]
    c9bc:	2b01      	cmp	r3, #1
    c9be:	d004      	beq.n	c9ca <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
    c9c0:	4b11      	ldr	r3, [pc, #68]	; (ca08 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    c9c2:	9300      	str	r3, [sp, #0]
    c9c4:	6965      	ldr	r5, [r4, #20]
    c9c6:	2361      	movs	r3, #97	; 0x61
    c9c8:	e7f2      	b.n	c9b0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
  return kTfLiteOk;
    c9ca:	2000      	movs	r0, #0
    c9cc:	e756      	b.n	c87c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
    c9ce:	bf00      	nop
    c9d0:	00028348 	.word	0x00028348
    c9d4:	00028323 	.word	0x00028323
    c9d8:	000272d2 	.word	0x000272d2
    c9dc:	0002880d 	.word	0x0002880d
    c9e0:	00027b9d 	.word	0x00027b9d
    c9e4:	00027b73 	.word	0x00027b73
    c9e8:	00028375 	.word	0x00028375
    c9ec:	0002838d 	.word	0x0002838d
    c9f0:	000283a4 	.word	0x000283a4
    c9f4:	000283c5 	.word	0x000283c5
    c9f8:	000283e7 	.word	0x000283e7
    c9fc:	00028416 	.word	0x00028416
    ca00:	00028423 	.word	0x00028423
    ca04:	0002842e 	.word	0x0002842e
    ca08:	0002846d 	.word	0x0002846d

0000ca0c <_ZN6tflite3ops5micro12Register_PADEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ca0c:	4800      	ldr	r0, [pc, #0]	; (ca10 <_ZN6tflite3ops5micro12Register_PADEv+0x4>)
    ca0e:	4770      	bx	lr
    ca10:	200004c8 	.word	0x200004c8

0000ca14 <_ZN6tflite3ops5micro14Register_PADV2Ev>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ca14:	4800      	ldr	r0, [pc, #0]	; (ca18 <_ZN6tflite3ops5micro14Register_PADV2Ev+0x4>)
    ca16:	4770      	bx	lr
    ca18:	200004e8 	.word	0x200004e8

0000ca1c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ca1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca20:	ed2d 8b02 	vpush	{d8}
    ca24:	b0a5      	sub	sp, #148	; 0x94
    ca26:	460a      	mov	r2, r1
    ca28:	4604      	mov	r4, r0
  PadContext op_context(context, node);
    ca2a:	4601      	mov	r1, r0
    ca2c:	a807      	add	r0, sp, #28
    ca2e:	f00e fb76 	bl	1b11e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  if (op_context.constant_values != nullptr) {
    ca32:	9b07      	ldr	r3, [sp, #28]
    ca34:	b343      	cbz	r3, ca88 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  for (int i = 0; i < dims->size; ++i) {
    ca36:	6899      	ldr	r1, [r3, #8]
    ca38:	f851 7b04 	ldr.w	r7, [r1], #4
    ca3c:	2000      	movs	r0, #0
  int64_t count = 1;
    ca3e:	2201      	movs	r2, #1
    ca40:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    ca42:	4287      	cmp	r7, r0
    ca44:	dd0c      	ble.n	ca60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    count *= dims->data[i];
    ca46:	f851 6b04 	ldr.w	r6, [r1], #4
    ca4a:	ea4f 79e6 	mov.w	r9, r6, asr #31
    ca4e:	fb02 f509 	mul.w	r5, r2, r9
    ca52:	fb06 5503 	mla	r5, r6, r3, r5
    ca56:	fba2 2306 	umull	r2, r3, r2, r6
    ca5a:	442b      	add	r3, r5
  for (int i = 0; i < dims->size; ++i) {
    ca5c:	3001      	adds	r0, #1
    ca5e:	e7f0      	b.n	ca42 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x26>
    TF_LITE_ENSURE_EQ(context, NumElements(op_context.constant_values), 1);
    ca60:	2b00      	cmp	r3, #0
    ca62:	bf08      	it	eq
    ca64:	2a01      	cmpeq	r2, #1
    ca66:	d00f      	beq.n	ca88 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    ca68:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ca6c:	4b8a      	ldr	r3, [pc, #552]	; (cc98 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x27c>)
    ca6e:	9301      	str	r3, [sp, #4]
    ca70:	2501      	movs	r5, #1
    ca72:	4b8a      	ldr	r3, [pc, #552]	; (cc9c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x280>)
    ca74:	9300      	str	r3, [sp, #0]
    ca76:	9504      	str	r5, [sp, #16]
    ca78:	6966      	ldr	r6, [r4, #20]
    ca7a:	4a89      	ldr	r2, [pc, #548]	; (cca0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    ca7c:	4989      	ldr	r1, [pc, #548]	; (cca4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    ca7e:	236a      	movs	r3, #106	; 0x6a
    ca80:	4620      	mov	r0, r4
    ca82:	47b0      	blx	r6
      return kTfLiteError;
    ca84:	2001      	movs	r0, #1
    ca86:	e050      	b.n	cb2a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
    ca88:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ca8a:	b105      	cbz	r5, ca8e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x72>
    ca8c:	686d      	ldr	r5, [r5, #4]
  memset(&op_params, 0, sizeof(PadParams));
    ca8e:	222c      	movs	r2, #44	; 0x2c
    ca90:	2100      	movs	r1, #0
    ca92:	a819      	add	r0, sp, #100	; 0x64
    ca94:	f011 fdd1 	bl	1e63a <memset>
  op_params.left_padding_count = op_context.dims;
    ca98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca9a:	a919      	add	r1, sp, #100	; 0x64
    ca9c:	b25a      	sxtb	r2, r3
    ca9e:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  op_params.right_padding_count = op_context.dims;
    caa2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
    caa6:	1d28      	adds	r0, r5, #4
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
    caa8:	1e5a      	subs	r2, r3, #1
    caaa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    caae:	2a00      	cmp	r2, #0
    cab0:	db08      	blt.n	cac4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
    op_params.left_padding[idx] = paddings_data[idx * 2];
    cab2:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    cab6:	f843 1904 	str.w	r1, [r3], #-4
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
    caba:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
    cabe:	6199      	str	r1, [r3, #24]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
    cac0:	3a01      	subs	r2, #1
    cac2:	e7f4      	b.n	caae <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  switch (op_context.input->type) {
    cac4:	9908      	ldr	r1, [sp, #32]
    cac6:	7808      	ldrb	r0, [r1, #0]
    cac8:	1e43      	subs	r3, r0, #1
    caca:	2b08      	cmp	r3, #8
    cacc:	f200 811d 	bhi.w	cd0a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
    cad0:	e8df f013 	tbh	[pc, r3, lsl #1]
    cad4:	00fe0009 	.word	0x00fe0009
    cad8:	011b0032 	.word	0x011b0032
    cadc:	011b011b 	.word	0x011b011b
    cae0:	011b011b 	.word	0x011b011b
    cae4:	0096      	.short	0x0096
      float pad_value = op_context.constant_values == nullptr
    cae6:	9b07      	ldr	r3, [sp, #28]
                            ? 0.f
    cae8:	b323      	cbz	r3, cb34 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x118>
    caea:	685b      	ldr	r3, [r3, #4]
    caec:	681b      	ldr	r3, [r3, #0]
        TF_LITE_PAD(reference_ops, PadImageStyle, float, pad_value);
    caee:	9306      	str	r3, [sp, #24]
    caf0:	a80d      	add	r0, sp, #52	; 0x34
        TF_LITE_PAD(reference_ops, Pad, float, pad_value);
    caf2:	f008 ff30 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    caf6:	9c08      	ldr	r4, [sp, #32]
    caf8:	b104      	cbz	r4, cafc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
    cafa:	6864      	ldr	r4, [r4, #4]
    cafc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cafe:	a813      	add	r0, sp, #76	; 0x4c
    cb00:	f008 ff29 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cb06:	b103      	cbz	r3, cb0a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    cb08:	685b      	ldr	r3, [r3, #4]
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
    cb0a:	9301      	str	r3, [sp, #4]
    cb0c:	ab13      	add	r3, sp, #76	; 0x4c
    cb0e:	9300      	str	r3, [sp, #0]
    cb10:	4622      	mov	r2, r4
    cb12:	ab06      	add	r3, sp, #24
    cb14:	a90d      	add	r1, sp, #52	; 0x34
    cb16:	a819      	add	r0, sp, #100	; 0x64
    cb18:	f00e fbfb 	bl	1b312 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
    cb1c:	a813      	add	r0, sp, #76	; 0x4c
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
    cb1e:	f008 fed5 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    cb22:	a80d      	add	r0, sp, #52	; 0x34
    cb24:	f008 fed2 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    cb28:	2000      	movs	r0, #0
}
    cb2a:	b025      	add	sp, #148	; 0x94
    cb2c:	ecbd 8b02 	vpop	{d8}
    cb30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            ? 0.f
    cb34:	2300      	movs	r3, #0
    cb36:	e7da      	b.n	caee <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xd2>
      if (op_context.constant_values == nullptr) {
    cb38:	980a      	ldr	r0, [sp, #40]	; 0x28
    cb3a:	9a07      	ldr	r2, [sp, #28]
    cb3c:	6903      	ldr	r3, [r0, #16]
    cb3e:	2a00      	cmp	r2, #0
    cb40:	d12b      	bne.n	cb9a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x17e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
    cb42:	2b00      	cmp	r3, #0
    cb44:	da08      	bge.n	cb58 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    cb46:	4b58      	ldr	r3, [pc, #352]	; (cca8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    cb48:	9300      	str	r3, [sp, #0]
    cb4a:	6965      	ldr	r5, [r4, #20]
    cb4c:	2391      	movs	r3, #145	; 0x91
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
    cb4e:	4a54      	ldr	r2, [pc, #336]	; (cca0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cb50:	4956      	ldr	r1, [pc, #344]	; (ccac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x290>)
    cb52:	4620      	mov	r0, r4
    cb54:	47a8      	blx	r5
    cb56:	e795      	b.n	ca84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
    cb58:	2bff      	cmp	r3, #255	; 0xff
    cb5a:	dd04      	ble.n	cb66 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    cb5c:	4b54      	ldr	r3, [pc, #336]	; (ccb0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x294>)
    cb5e:	9300      	str	r3, [sp, #0]
    cb60:	6965      	ldr	r5, [r4, #20]
    cb62:	2393      	movs	r3, #147	; 0x93
    cb64:	e7f3      	b.n	cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<uint8_t>(op_context.output->params.zero_point);
    cb66:	b2db      	uxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, uint8_t, pad_value);
    cb68:	a80d      	add	r0, sp, #52	; 0x34
    cb6a:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, uint8_t, pad_value);
    cb6e:	f008 fef2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cb72:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cb74:	b104      	cbz	r4, cb78 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    cb76:	6864      	ldr	r4, [r4, #4]
    cb78:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb7a:	a813      	add	r0, sp, #76	; 0x4c
    cb7c:	f008 feeb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cb82:	b103      	cbz	r3, cb86 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    cb84:	685b      	ldr	r3, [r3, #4]
    cb86:	9301      	str	r3, [sp, #4]
    cb88:	ab13      	add	r3, sp, #76	; 0x4c
    cb8a:	9300      	str	r3, [sp, #0]
    cb8c:	4622      	mov	r2, r4
    cb8e:	ab06      	add	r3, sp, #24
    cb90:	a90d      	add	r1, sp, #52	; 0x34
    cb92:	a819      	add	r0, sp, #100	; 0x64
    cb94:	f00e fc73 	bl	1b47e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cb98:	e7c0      	b.n	cb1c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cb9a:	6915      	ldr	r5, [r2, #16]
    cb9c:	429d      	cmp	r5, r3
    cb9e:	d00c      	beq.n	cbba <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    cba0:	e9cd 3502 	strd	r3, r5, [sp, #8]
    cba4:	4b43      	ldr	r3, [pc, #268]	; (ccb4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
    cba6:	9301      	str	r3, [sp, #4]
    cba8:	4b43      	ldr	r3, [pc, #268]	; (ccb8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    cbaa:	9300      	str	r3, [sp, #0]
    cbac:	6965      	ldr	r5, [r4, #20]
    cbae:	2399      	movs	r3, #153	; 0x99
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cbb0:	4a3b      	ldr	r2, [pc, #236]	; (cca0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cbb2:	493c      	ldr	r1, [pc, #240]	; (cca4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    cbb4:	4620      	mov	r0, r4
    cbb6:	47a8      	blx	r5
    cbb8:	e764      	b.n	ca84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE_EQ(
    cbba:	ed90 8a03 	vldr	s16, [r0, #12]
    cbbe:	edd2 7a03 	vldr	s15, [r2, #12]
    cbc2:	eeb4 8a67 	vcmp.f32	s16, s15
    cbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbca:	d016      	beq.n	cbfa <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    cbcc:	ee17 0a90 	vmov	r0, s15
    cbd0:	f7f4 f84a 	bl	c68 <__aeabi_f2d>
    cbd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    cbd8:	ee18 0a10 	vmov	r0, s16
    cbdc:	f7f4 f844 	bl	c68 <__aeabi_f2d>
    cbe0:	4b36      	ldr	r3, [pc, #216]	; (ccbc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
    cbe2:	9301      	str	r3, [sp, #4]
    cbe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cbe8:	4b35      	ldr	r3, [pc, #212]	; (ccc0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
    cbea:	9300      	str	r3, [sp, #0]
    cbec:	6965      	ldr	r5, [r4, #20]
    cbee:	4a2c      	ldr	r2, [pc, #176]	; (cca0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
    cbf0:	492c      	ldr	r1, [pc, #176]	; (cca4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    cbf2:	239b      	movs	r3, #155	; 0x9b
    cbf4:	4620      	mov	r0, r4
    cbf6:	47a8      	blx	r5
    cbf8:	e744      	b.n	ca84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        pad_value = *GetTensorData<uint8_t>(op_context.constant_values);
    cbfa:	6853      	ldr	r3, [r2, #4]
    cbfc:	781b      	ldrb	r3, [r3, #0]
    cbfe:	e7b3      	b.n	cb68 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
      if (op_context.constant_values == nullptr) {
    cc00:	980a      	ldr	r0, [sp, #40]	; 0x28
    cc02:	9a07      	ldr	r2, [sp, #28]
    cc04:	6903      	ldr	r3, [r0, #16]
    cc06:	bb42      	cbnz	r2, cc5a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x23e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
    cc08:	f113 0f80 	cmn.w	r3, #128	; 0x80
    cc0c:	da04      	bge.n	cc18 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    cc0e:	4b2d      	ldr	r3, [pc, #180]	; (ccc4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
    cc10:	9300      	str	r3, [sp, #0]
    cc12:	6965      	ldr	r5, [r4, #20]
    cc14:	23ab      	movs	r3, #171	; 0xab
    cc16:	e79a      	b.n	cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
    cc18:	2b7f      	cmp	r3, #127	; 0x7f
    cc1a:	dd04      	ble.n	cc26 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    cc1c:	4b2a      	ldr	r3, [pc, #168]	; (ccc8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    cc1e:	9300      	str	r3, [sp, #0]
    cc20:	6965      	ldr	r5, [r4, #20]
    cc22:	23ad      	movs	r3, #173	; 0xad
    cc24:	e793      	b.n	cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<int8_t>(op_context.output->params.zero_point);
    cc26:	b25b      	sxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, int8_t, pad_value);
    cc28:	a80d      	add	r0, sp, #52	; 0x34
    cc2a:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
    cc2e:	f008 fe92 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cc32:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cc34:	b104      	cbz	r4, cc38 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x21c>
    cc36:	6864      	ldr	r4, [r4, #4]
    cc38:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc3a:	a813      	add	r0, sp, #76	; 0x4c
    cc3c:	f008 fe8b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cc42:	b103      	cbz	r3, cc46 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x22a>
    cc44:	685b      	ldr	r3, [r3, #4]
    cc46:	9301      	str	r3, [sp, #4]
    cc48:	ab13      	add	r3, sp, #76	; 0x4c
    cc4a:	9300      	str	r3, [sp, #0]
    cc4c:	4622      	mov	r2, r4
    cc4e:	ab06      	add	r3, sp, #24
    cc50:	a90d      	add	r1, sp, #52	; 0x34
    cc52:	a819      	add	r0, sp, #100	; 0x64
    cc54:	f00e fcca 	bl	1b5ec <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cc58:	e760      	b.n	cb1c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
    cc5a:	6915      	ldr	r5, [r2, #16]
    cc5c:	429d      	cmp	r5, r3
    cc5e:	d008      	beq.n	cc72 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x256>
    cc60:	e9cd 3502 	strd	r3, r5, [sp, #8]
    cc64:	4b13      	ldr	r3, [pc, #76]	; (ccb4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
    cc66:	9301      	str	r3, [sp, #4]
    cc68:	4b13      	ldr	r3, [pc, #76]	; (ccb8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    cc6a:	9300      	str	r3, [sp, #0]
    cc6c:	6965      	ldr	r5, [r4, #20]
    cc6e:	23b3      	movs	r3, #179	; 0xb3
    cc70:	e79e      	b.n	cbb0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x194>
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
    cc72:	ed90 7a03 	vldr	s14, [r0, #12]
    cc76:	edd2 7a03 	vldr	s15, [r2, #12]
    cc7a:	eeb4 7a67 	vcmp.f32	s14, s15
    cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc82:	d004      	beq.n	cc8e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x272>
    cc84:	4b11      	ldr	r3, [pc, #68]	; (cccc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    cc86:	9300      	str	r3, [sp, #0]
    cc88:	6965      	ldr	r5, [r4, #20]
    cc8a:	23b5      	movs	r3, #181	; 0xb5
    cc8c:	e75f      	b.n	cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = *GetTensorData<int8_t>(op_context.constant_values);
    cc8e:	6853      	ldr	r3, [r2, #4]
    cc90:	f993 3000 	ldrsb.w	r3, [r3]
    cc94:	e7c8      	b.n	cc28 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20c>
    cc96:	bf00      	nop
    cc98:	0002880d 	.word	0x0002880d
    cc9c:	00028493 	.word	0x00028493
    cca0:	00028323 	.word	0x00028323
    cca4:	00027b73 	.word	0x00027b73
    cca8:	000284bb 	.word	0x000284bb
    ccac:	000272d2 	.word	0x000272d2
    ccb0:	00028507 	.word	0x00028507
    ccb4:	00028553 	.word	0x00028553
    ccb8:	00028581 	.word	0x00028581
    ccbc:	000285a6 	.word	0x000285a6
    ccc0:	000285e4 	.word	0x000285e4
    ccc4:	00028619 	.word	0x00028619
    ccc8:	00028664 	.word	0x00028664
    cccc:	000286af 	.word	0x000286af
          op_context.constant_values == nullptr
    ccd0:	9b07      	ldr	r3, [sp, #28]
              ? 0
    ccd2:	b10b      	cbz	r3, ccd8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
    ccd4:	685b      	ldr	r3, [r3, #4]
    ccd6:	681b      	ldr	r3, [r3, #0]
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
    ccd8:	9306      	str	r3, [sp, #24]
    ccda:	a80d      	add	r0, sp, #52	; 0x34
    ccdc:	f008 fe3b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    cce0:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cce2:	b104      	cbz	r4, cce6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ca>
    cce4:	6864      	ldr	r4, [r4, #4]
    cce6:	990a      	ldr	r1, [sp, #40]	; 0x28
    cce8:	ad13      	add	r5, sp, #76	; 0x4c
    ccea:	4628      	mov	r0, r5
    ccec:	f008 fe33 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ccf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ccf2:	b103      	cbz	r3, ccf6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
    ccf4:	685b      	ldr	r3, [r3, #4]
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32* input_data,
                const int32* pad_value_ptr, const RuntimeShape& output_shape,
                int32* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
    ccf6:	e9cd 5300 	strd	r5, r3, [sp]
    ccfa:	a819      	add	r0, sp, #100	; 0x64
    ccfc:	ab06      	add	r3, sp, #24
    ccfe:	4622      	mov	r2, r4
    cd00:	a90d      	add	r1, sp, #52	; 0x34
    cd02:	f00e fa4f 	bl	1b1a4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
    cd06:	4628      	mov	r0, r5
    cd08:	e709      	b.n	cb1e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x102>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
    cd0a:	6965      	ldr	r5, [r4, #20]
    cd0c:	f7f3 fdd1 	bl	8b2 <TfLiteTypeGetName>
    cd10:	4902      	ldr	r1, [pc, #8]	; (cd1c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
    cd12:	4602      	mov	r2, r0
    cd14:	4620      	mov	r0, r4
    cd16:	47a8      	blx	r5
    cd18:	e6b4      	b.n	ca84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    cd1a:	bf00      	nop
    cd1c:	000286fb 	.word	0x000286fb

0000cd20 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
    cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd24:	ed2d 8b04 	vpush	{d8-d9}
    cd28:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd2a:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
    cd2c:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd2e:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
    cd30:	4604      	mov	r4, r0
    cd32:	460d      	mov	r5, r1
    cd34:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd36:	d001      	beq.n	cd3c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
    cd38:	f011 fc5c 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    cd3c:	6833      	ldr	r3, [r6, #0]
    cd3e:	2b04      	cmp	r3, #4
    cd40:	d1fa      	bne.n	cd38 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    cd42:	2300      	movs	r3, #0
    cd44:	4619      	mov	r1, r3
    cd46:	4632      	mov	r2, r6
    cd48:	4628      	mov	r0, r5
    cd4a:	f00b fc77 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd4e:	2303      	movs	r3, #3
    cd50:	4619      	mov	r1, r3
    cd52:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    cd54:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd56:	4628      	mov	r0, r5
    cd58:	f00b fc70 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    cd5c:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    cd5e:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
    cd60:	4628      	mov	r0, r5
    cd62:	f008 fdbe 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    cd66:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    cd68:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
    cd6a:	4628      	mov	r0, r5
    cd6c:	f008 fdb9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    cd70:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    cd72:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
    cd74:	4630      	mov	r0, r6
    cd76:	f008 fdb4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    cd7a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    cd7c:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
    cd7e:	4630      	mov	r0, r6
    cd80:	f008 fdaf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
    cd84:	68e3      	ldr	r3, [r4, #12]
    cd86:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
    cd88:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
    cd8a:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
    cd8c:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
    cd8e:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
    cd92:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
    cd96:	9b08      	ldr	r3, [sp, #32]
    cd98:	459b      	cmp	fp, r3
    cd9a:	f280 808e 	bge.w	ceba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19a>
    cd9e:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cda2:	46d0      	mov	r8, sl
    cda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cda6:	4598      	cmp	r8, r3
    cda8:	f280 8084 	bge.w	ceb4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x194>
              (out_y * stride_height) - params.padding_values.height;
    cdac:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cdae:	46b9      	mov	r9, r7
    cdb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cdb2:	4599      	cmp	r9, r3
    cdb4:	da79      	bge.n	ceaa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
        for (int channel = 0; channel < depth; ++channel) {
    cdb6:	2300      	movs	r3, #0
    cdb8:	9303      	str	r3, [sp, #12]
    cdba:	9b03      	ldr	r3, [sp, #12]
    cdbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cdbe:	4293      	cmp	r3, r2
    cdc0:	da6e      	bge.n	cea0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x180>
              (out_x * stride_width) - params.padding_values.width;
    cdc2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    cdc6:	69a0      	ldr	r0, [r4, #24]
          float filter_count = 0;
    cdc8:	ed9f 8a3e 	vldr	s16, [pc, #248]	; cec4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
          const int in_x_origin =
    cdcc:	1afa      	subs	r2, r7, r3
    cdce:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
    cdd0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int filter_x_start = std::max(0, -in_x_origin);
    cdd4:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
    cdd6:	ebaa 0102 	sub.w	r1, sl, r2
    cdda:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
    cddc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    cde0:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
    cde2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cde4:	440b      	add	r3, r1
    cde6:	4283      	cmp	r3, r0
    cde8:	bfa8      	it	ge
    cdea:	4603      	movge	r3, r0
    cdec:	9307      	str	r3, [sp, #28]
              std::min(params.filter_height, input_height - in_y_origin);
    cdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
    cdf0:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_height, input_height - in_y_origin);
    cdf4:	18d0      	adds	r0, r2, r3
    cdf6:	6963      	ldr	r3, [r4, #20]
    cdf8:	4298      	cmp	r0, r3
    cdfa:	bfa8      	it	ge
    cdfc:	4618      	movge	r0, r3
    cdfe:	9b05      	ldr	r3, [sp, #20]
    ce00:	9011      	str	r0, [sp, #68]	; 0x44
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    ce02:	2a00      	cmp	r2, #0
    ce04:	bfa8      	it	ge
    ce06:	189b      	addge	r3, r3, r2
    ce08:	461a      	mov	r2, r3
          float total = 0.f;
    ce0a:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    ce0e:	9b05      	ldr	r3, [sp, #20]
    ce10:	9911      	ldr	r1, [sp, #68]	; 0x44
    ce12:	1ad3      	subs	r3, r2, r3
    ce14:	4299      	cmp	r1, r3
    ce16:	dd1f      	ble.n	ce58 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x138>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce18:	9b06      	ldr	r3, [sp, #24]
    ce1a:	9304      	str	r3, [sp, #16]
    ce1c:	9b04      	ldr	r3, [sp, #16]
    ce1e:	9907      	ldr	r1, [sp, #28]
    ce20:	428b      	cmp	r3, r1
    ce22:	da17      	bge.n	ce54 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    ce24:	9b03      	ldr	r3, [sp, #12]
    ce26:	9910      	ldr	r1, [sp, #64]	; 0x40
    ce28:	9300      	str	r3, [sp, #0]
    ce2a:	9b04      	ldr	r3, [sp, #16]
    ce2c:	9213      	str	r2, [sp, #76]	; 0x4c
    ce2e:	440b      	add	r3, r1
    ce30:	4628      	mov	r0, r5
    ce32:	4659      	mov	r1, fp
    ce34:	f008 fe17 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    ce38:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    ce3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce40:	9b04      	ldr	r3, [sp, #16]
              total +=
    ce42:	edd0 7a00 	vldr	s15, [r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce46:	3301      	adds	r3, #1
              total +=
    ce48:	ee78 8aa7 	vadd.f32	s17, s17, s15
              filter_count++;
    ce4c:	ee38 8a29 	vadd.f32	s16, s16, s19
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    ce50:	9304      	str	r3, [sp, #16]
    ce52:	e7e3      	b.n	ce1c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    ce54:	3201      	adds	r2, #1
    ce56:	e7da      	b.n	ce0e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          const float average = total / filter_count;
    ce58:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    ce5c:	9b03      	ldr	r3, [sp, #12]
    ce5e:	9300      	str	r3, [sp, #0]
    ce60:	4642      	mov	r2, r8
    ce62:	464b      	mov	r3, r9
    ce64:	4659      	mov	r1, fp
    ce66:	4630      	mov	r0, r6
    ce68:	f008 fdfd 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    ce6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
    ce72:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    ce74:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    ce78:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    ce7c:	eef4 7ac9 	vcmpe.f32	s15, s18
    ce80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce84:	bfb8      	it	lt
    ce86:	eef0 7a49 	vmovlt.f32	s15, s18
    ce8a:	eef4 7ac7 	vcmpe.f32	s15, s14
    ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce92:	bf88      	it	hi
    ce94:	eef0 7a47 	vmovhi.f32	s15, s14
    ce98:	edc0 7a00 	vstr	s15, [r0]
        for (int channel = 0; channel < depth; ++channel) {
    ce9c:	3301      	adds	r3, #1
    ce9e:	e78b      	b.n	cdb8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cea2:	f109 0901 	add.w	r9, r9, #1
    cea6:	441f      	add	r7, r3
    cea8:	e782      	b.n	cdb0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x90>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ceaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ceac:	f108 0801 	add.w	r8, r8, #1
    ceb0:	449a      	add	sl, r3
    ceb2:	e777      	b.n	cda4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int batch = 0; batch < batches; ++batch) {
    ceb4:	f10b 0b01 	add.w	fp, fp, #1
    ceb8:	e76d      	b.n	cd96 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
                                           params.float_activation_max);
        }
      }
    }
  }
}
    ceba:	b015      	add	sp, #84	; 0x54
    cebc:	ecbd 8b04 	vpop	{d8-d9}
    cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cec4:	00000000 	.word	0x00000000

0000cec8 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    cec8:	4800      	ldr	r0, [pc, #0]	; (cecc <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x4>)
    ceca:	4770      	bx	lr
    cecc:	20000528 	.word	0x20000528

0000ced0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ced0:	4800      	ldr	r0, [pc, #0]	; (ced4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x4>)
    ced2:	4770      	bx	lr
    ced4:	20000508 	.word	0x20000508

0000ced8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
    ced8:	2801      	cmp	r0, #1
    ceda:	d103      	bne.n	cee4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
    cedc:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    cede:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    cee0:	4b09      	ldr	r3, [pc, #36]	; (cf08 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
    cee2:	e004      	b.n	ceee <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
    cee4:	2803      	cmp	r0, #3
    cee6:	d104      	bne.n	cef2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
    cee8:	2300      	movs	r3, #0
    ceea:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    ceec:	4b07      	ldr	r3, [pc, #28]	; (cf0c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    ceee:	6013      	str	r3, [r2, #0]
  }
}
    cef0:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    cef2:	2802      	cmp	r0, #2
    cef4:	d104      	bne.n	cf00 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
    cef6:	4b06      	ldr	r3, [pc, #24]	; (cf10 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    cef8:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    cefa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    cefe:	e7f6      	b.n	ceee <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    cf00:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    cf04:	e7eb      	b.n	cede <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
    cf06:	bf00      	nop
    cf08:	7f7fffff 	.word	0x7f7fffff
    cf0c:	40c00000 	.word	0x40c00000
    cf10:	bf800000 	.word	0xbf800000

0000cf14 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
    cf18:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    cf1a:	f8d0 9008 	ldr.w	r9, [r0, #8]
    cf1e:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    cf20:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    cf22:	684b      	ldr	r3, [r1, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    cf24:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
    cf26:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    cf2a:	eb09 1686 	add.w	r6, r9, r6, lsl #6
    cf2e:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    cf30:	aa07      	add	r2, sp, #28
    cf32:	4631      	mov	r1, r6
    cf34:	4628      	mov	r0, r5
  return &context->tensors[node->outputs->data[index]];
    cf36:	685c      	ldr	r4, [r3, #4]
    cf38:	f00f f828 	bl	1bf8c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
    cf3c:	4680      	mov	r8, r0
    cf3e:	2800      	cmp	r0, #0
    cf40:	d139      	bne.n	cfb6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
    cf42:	f819 000a 	ldrb.w	r0, [r9, sl]
    cf46:	2803      	cmp	r0, #3
    cf48:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    cf4c:	d037      	beq.n	cfbe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    cf4e:	2809      	cmp	r0, #9
    cf50:	d035      	beq.n	cfbe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    cf52:	2801      	cmp	r0, #1
    cf54:	d177      	bne.n	d046 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
    cf56:	aa06      	add	r2, sp, #24
    cf58:	7d28      	ldrb	r0, [r5, #20]
    cf5a:	a905      	add	r1, sp, #20
    cf5c:	f7ff ffbc 	bl	ced8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    cf60:	68ab      	ldr	r3, [r5, #8]
    cf62:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    cf64:	686b      	ldr	r3, [r5, #4]
    cf66:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    cf68:	692b      	ldr	r3, [r5, #16]
    cf6a:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    cf6c:	68eb      	ldr	r3, [r5, #12]
    cf6e:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    cf70:	9b08      	ldr	r3, [sp, #32]
    cf72:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    cf76:	9b07      	ldr	r3, [sp, #28]
    cf78:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
    cf7c:	9b05      	ldr	r3, [sp, #20]
    cf7e:	9320      	str	r3, [sp, #128]	; 0x80
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    cf80:	4631      	mov	r1, r6
  op_params.float_activation_max = activation_max;
    cf82:	9b06      	ldr	r3, [sp, #24]
    cf84:	9321      	str	r3, [sp, #132]	; 0x84
      op_params, GetTensorShape(input), GetTensorData<float>(input),
    cf86:	a80b      	add	r0, sp, #44	; 0x2c
    cf88:	f008 fce5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    cf8c:	6872      	ldr	r2, [r6, #4]
    cf8e:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<float>(output));
    cf90:	4621      	mov	r1, r4
    cf92:	a811      	add	r0, sp, #68	; 0x44
    cf94:	f008 fcdf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    cf98:	9a03      	ldr	r2, [sp, #12]
    cf9a:	b104      	cbz	r4, cf9e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    cf9c:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
    cf9e:	9400      	str	r4, [sp, #0]
    cfa0:	ab11      	add	r3, sp, #68	; 0x44
    cfa2:	a90b      	add	r1, sp, #44	; 0x2c
    cfa4:	a817      	add	r0, sp, #92	; 0x5c
    cfa6:	f7ff febb 	bl	cd20 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    cfaa:	a811      	add	r0, sp, #68	; 0x44
    cfac:	f008 fc8e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cfb0:	a80b      	add	r0, sp, #44	; 0x2c
    cfb2:	f008 fc8b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
    cfb6:	4640      	mov	r0, r8
    cfb8:	b022      	add	sp, #136	; 0x88
    cfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
    cfbe:	ab06      	add	r3, sp, #24
    cfc0:	7d29      	ldrb	r1, [r5, #20]
    cfc2:	9300      	str	r3, [sp, #0]
    cfc4:	4622      	mov	r2, r4
    cfc6:	ab05      	add	r3, sp, #20
    cfc8:	4638      	mov	r0, r7
    cfca:	f004 fc69 	bl	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
    cfce:	68ab      	ldr	r3, [r5, #8]
    cfd0:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    cfd2:	686b      	ldr	r3, [r5, #4]
    cfd4:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    cfd6:	692b      	ldr	r3, [r5, #16]
    cfd8:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    cfda:	68eb      	ldr	r3, [r5, #12]
    cfdc:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    cfde:	9b08      	ldr	r3, [sp, #32]
    cfe0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    cfe4:	9b07      	ldr	r3, [sp, #28]
    cfe6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
    cfea:	9b05      	ldr	r3, [sp, #20]
    cfec:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
    cfee:	9b06      	ldr	r3, [sp, #24]
    cff0:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
    cff2:	f819 300a 	ldrb.w	r3, [r9, sl]
    cff6:	2b03      	cmp	r3, #3
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cff8:	4631      	mov	r1, r6
    cffa:	a80b      	add	r0, sp, #44	; 0x2c
  if (input->type == kTfLiteUInt8) {
    cffc:	d111      	bne.n	d022 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    cffe:	f008 fcaa 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d002:	6872      	ldr	r2, [r6, #4]
    d004:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    d006:	4621      	mov	r1, r4
    d008:	a811      	add	r0, sp, #68	; 0x44
    d00a:	f008 fca4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d00e:	9a03      	ldr	r2, [sp, #12]
    d010:	b104      	cbz	r4, d014 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x100>
    d012:	6864      	ldr	r4, [r4, #4]
    reference_ops::AveragePool(
    d014:	9400      	str	r4, [sp, #0]
    d016:	ab11      	add	r3, sp, #68	; 0x44
    d018:	a90b      	add	r1, sp, #44	; 0x2c
    d01a:	a817      	add	r0, sp, #92	; 0x5c
    d01c:	f00e fb9e 	bl	1b75c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    d020:	e7c3      	b.n	cfaa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d022:	f008 fc98 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d026:	6872      	ldr	r2, [r6, #4]
    d028:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    d02a:	4621      	mov	r1, r4
    d02c:	a811      	add	r0, sp, #68	; 0x44
    d02e:	f008 fc92 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d032:	9a03      	ldr	r2, [sp, #12]
    d034:	b104      	cbz	r4, d038 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x124>
    d036:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::AveragePool(
    d038:	9400      	str	r4, [sp, #0]
    d03a:	ab11      	add	r3, sp, #68	; 0x44
    d03c:	a90b      	add	r1, sp, #44	; 0x2c
    d03e:	a817      	add	r0, sp, #92	; 0x5c
    d040:	f00e fe00 	bl	1bc44 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
    d044:	e7b1      	b.n	cfaa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    d046:	697c      	ldr	r4, [r7, #20]
    d048:	f7f3 fc33 	bl	8b2 <TfLiteTypeGetName>
    d04c:	4903      	ldr	r1, [pc, #12]	; (d05c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x148>)
    d04e:	4602      	mov	r2, r0
    d050:	4638      	mov	r0, r7
    d052:	47a0      	blx	r4
      return kTfLiteError;
    d054:	f04f 0801 	mov.w	r8, #1
    d058:	e7ad      	b.n	cfb6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
    d05a:	bf00      	nop
    d05c:	00028723 	.word	0x00028723

0000d060 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
    d064:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    d066:	f8d0 9008 	ldr.w	r9, [r0, #8]
    d06a:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    d06c:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    d06e:	684b      	ldr	r3, [r1, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d070:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
    d072:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    d076:	eb09 1686 	add.w	r6, r9, r6, lsl #6
    d07a:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    d07c:	aa07      	add	r2, sp, #28
    d07e:	4631      	mov	r1, r6
    d080:	4628      	mov	r0, r5
  return &context->tensors[node->outputs->data[index]];
    d082:	685c      	ldr	r4, [r3, #4]
    d084:	f00e ff82 	bl	1bf8c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
    d088:	4680      	mov	r8, r0
    d08a:	2800      	cmp	r0, #0
    d08c:	d139      	bne.n	d102 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
    d08e:	f819 000a 	ldrb.w	r0, [r9, sl]
    d092:	2803      	cmp	r0, #3
    d094:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    d098:	d037      	beq.n	d10a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    d09a:	2809      	cmp	r0, #9
    d09c:	d035      	beq.n	d10a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
    d09e:	2801      	cmp	r0, #1
    d0a0:	d177      	bne.n	d192 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
    d0a2:	aa06      	add	r2, sp, #24
    d0a4:	7d28      	ldrb	r0, [r5, #20]
    d0a6:	a905      	add	r1, sp, #20
    d0a8:	f7ff ff16 	bl	ced8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    d0ac:	68ab      	ldr	r3, [r5, #8]
    d0ae:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    d0b0:	686b      	ldr	r3, [r5, #4]
    d0b2:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    d0b4:	692b      	ldr	r3, [r5, #16]
    d0b6:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    d0b8:	68eb      	ldr	r3, [r5, #12]
    d0ba:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    d0bc:	9b08      	ldr	r3, [sp, #32]
    d0be:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    d0c2:	9b07      	ldr	r3, [sp, #28]
    d0c4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
    d0c8:	9b05      	ldr	r3, [sp, #20]
    d0ca:	9320      	str	r3, [sp, #128]	; 0x80
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0cc:	4631      	mov	r1, r6
  op_params.float_activation_max = activation_max;
    d0ce:	9b06      	ldr	r3, [sp, #24]
    d0d0:	9321      	str	r3, [sp, #132]	; 0x84
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0d2:	a80b      	add	r0, sp, #44	; 0x2c
    d0d4:	f008 fc3f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d0d8:	6872      	ldr	r2, [r6, #4]
    d0da:	9203      	str	r2, [sp, #12]
                         GetTensorData<float>(input), GetTensorShape(output),
    d0dc:	4621      	mov	r1, r4
    d0de:	a811      	add	r0, sp, #68	; 0x44
    d0e0:	f008 fc39 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d0e4:	9a03      	ldr	r2, [sp, #12]
    d0e6:	b104      	cbz	r4, d0ea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    d0e8:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
    d0ea:	9400      	str	r4, [sp, #0]
    d0ec:	ab11      	add	r3, sp, #68	; 0x44
    d0ee:	a90b      	add	r1, sp, #44	; 0x2c
    d0f0:	a817      	add	r0, sp, #92	; 0x5c
    d0f2:	f00e fc02 	bl	1b8fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    d0f6:	a811      	add	r0, sp, #68	; 0x44
    d0f8:	f008 fbe8 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d0fc:	a80b      	add	r0, sp, #44	; 0x2c
    d0fe:	f008 fbe5 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
    d102:	4640      	mov	r0, r8
    d104:	b022      	add	sp, #136	; 0x88
    d106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
    d10a:	ab06      	add	r3, sp, #24
    d10c:	7d29      	ldrb	r1, [r5, #20]
    d10e:	9300      	str	r3, [sp, #0]
    d110:	4622      	mov	r2, r4
    d112:	ab05      	add	r3, sp, #20
    d114:	4638      	mov	r0, r7
    d116:	f004 fbc3 	bl	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
    d11a:	68ab      	ldr	r3, [r5, #8]
    d11c:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
    d11e:	686b      	ldr	r3, [r5, #4]
    d120:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
    d122:	692b      	ldr	r3, [r5, #16]
    d124:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
    d126:	68eb      	ldr	r3, [r5, #12]
    d128:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
    d12a:	9b08      	ldr	r3, [sp, #32]
    d12c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
    d130:	9b07      	ldr	r3, [sp, #28]
    d132:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
    d136:	9b05      	ldr	r3, [sp, #20]
    d138:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
    d13a:	9b06      	ldr	r3, [sp, #24]
    d13c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
    d13e:	f819 300a 	ldrb.w	r3, [r9, sl]
    d142:	2b03      	cmp	r3, #3
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d144:	4631      	mov	r1, r6
    d146:	a80b      	add	r0, sp, #44	; 0x2c
  if (input->type == kTfLiteUInt8) {
    d148:	d111      	bne.n	d16e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d14a:	f008 fc04 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d14e:	6872      	ldr	r2, [r6, #4]
    d150:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    d152:	4621      	mov	r1, r4
    d154:	a811      	add	r0, sp, #68	; 0x44
    d156:	f008 fbfe 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d15a:	9a03      	ldr	r2, [sp, #12]
    d15c:	b104      	cbz	r4, d160 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x100>
    d15e:	6864      	ldr	r4, [r4, #4]
    reference_ops::MaxPool(
    d160:	9400      	str	r4, [sp, #0]
    d162:	ab11      	add	r3, sp, #68	; 0x44
    d164:	a90b      	add	r1, sp, #44	; 0x2c
    d166:	a817      	add	r0, sp, #92	; 0x5c
    d168:	f00e fc9d 	bl	1baa6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    d16c:	e7c3      	b.n	d0f6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d16e:	f008 fbf2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d172:	6872      	ldr	r2, [r6, #4]
    d174:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    d176:	4621      	mov	r1, r4
    d178:	a811      	add	r0, sp, #68	; 0x44
    d17a:	f008 fbec 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d17e:	9a03      	ldr	r2, [sp, #12]
    d180:	b104      	cbz	r4, d184 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x124>
    d182:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::MaxPool(
    d184:	9400      	str	r4, [sp, #0]
    d186:	ab11      	add	r3, sp, #68	; 0x44
    d188:	a90b      	add	r1, sp, #44	; 0x2c
    d18a:	a817      	add	r0, sp, #92	; 0x5c
    d18c:	f00e fe2e 	bl	1bdec <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
    d190:	e7b1      	b.n	d0f6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    d192:	697c      	ldr	r4, [r7, #20]
    d194:	f7f3 fb8d 	bl	8b2 <TfLiteTypeGetName>
    d198:	4903      	ldr	r1, [pc, #12]	; (d1a8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
    d19a:	4602      	mov	r2, r0
    d19c:	4638      	mov	r0, r7
    d19e:	47a0      	blx	r4
      return kTfLiteError;
    d1a0:	f04f 0801 	mov.w	r8, #1
    d1a4:	e7ad      	b.n	d102 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
    d1a6:	bf00      	nop
    d1a8:	0002874c 	.word	0x0002874c

0000d1ac <_ZN6tflite3ops5micro14Register_PRELUEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d1ac:	4800      	ldr	r0, [pc, #0]	; (d1b0 <_ZN6tflite3ops5micro14Register_PRELUEv+0x4>)
    d1ae:	4770      	bx	lr
    d1b0:	20000548 	.word	0x20000548

0000d1b4 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
    d1b8:	680b      	ldr	r3, [r1, #0]
    d1ba:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    d1be:	685e      	ldr	r6, [r3, #4]
    d1c0:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    d1c2:	684b      	ldr	r3, [r1, #4]
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1c4:	ed2d 8b04 	vpush	{d8-d9}
    d1c8:	685d      	ldr	r5, [r3, #4]
    d1ca:	01aa      	lsls	r2, r5, #6
  int32_t output_multiplier_1 = 0;
    d1cc:	2300      	movs	r3, #0
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1ce:	b0a5      	sub	sp, #148	; 0x94
  int output_shift_1 = 0;
    d1d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  int output_shift_2 = 0;
    d1d4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
    d1d8:	f81a 3002 	ldrb.w	r3, [sl, r2]
    d1dc:	2b09      	cmp	r3, #9
  return &context->tensors[node->inputs->data[index]];
    d1de:	ea4f 1b86 	mov.w	fp, r6, lsl #6
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
    d1e2:	4607      	mov	r7, r0
    d1e4:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
    d1e8:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d1ec:	eb0a 1585 	add.w	r5, sl, r5, lsl #6
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
    d1f0:	d003      	beq.n	d1fa <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x46>
    d1f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d1f6:	2b03      	cmp	r3, #3
    d1f8:	d12a      	bne.n	d250 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d1fa:	68f0      	ldr	r0, [r6, #12]
    d1fc:	f7f3 fd34 	bl	c68 <__aeabi_f2d>
    d200:	ec41 0b19 	vmov	d9, r0, r1
                               static_cast<double>(output->params.scale);
    d204:	68e8      	ldr	r0, [r5, #12]
    d206:	f7f3 fd2f 	bl	c68 <__aeabi_f2d>
    d20a:	4680      	mov	r8, r0
                               static_cast<double>(alpha->params.scale) /
    d20c:	68e0      	ldr	r0, [r4, #12]
                               static_cast<double>(output->params.scale);
    d20e:	4689      	mov	r9, r1
                               static_cast<double>(alpha->params.scale) /
    d210:	f7f3 fd2a 	bl	c68 <__aeabi_f2d>
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
    d214:	ec53 2b19 	vmov	r2, r3, d9
    d218:	f7f3 fd7e 	bl	d18 <__aeabi_dmul>
    d21c:	4642      	mov	r2, r8
    d21e:	464b      	mov	r3, r9
    d220:	f7f3 fea4 	bl	f6c <__aeabi_ddiv>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d224:	4642      	mov	r2, r8
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
    d226:	ec41 0b18 	vmov	d8, r0, r1
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
    d22a:	464b      	mov	r3, r9
    d22c:	ec51 0b19 	vmov	r0, r1, d9
    d230:	f7f3 fe9c 	bl	f6c <__aeabi_ddiv>
    d234:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier_1, &output_multiplier_1,
    d238:	a908      	add	r1, sp, #32
    d23a:	a807      	add	r0, sp, #28
    d23c:	f004 fa78 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(real_multiplier_2, &output_multiplier_2,
    d240:	eeb0 0a48 	vmov.f32	s0, s16
    d244:	eef0 0a68 	vmov.f32	s1, s17
    d248:	a90a      	add	r1, sp, #40	; 0x28
    d24a:	a809      	add	r0, sp, #36	; 0x24
    d24c:	f004 fa70 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  switch (input->type) {
    d250:	f81a 000b 	ldrb.w	r0, [sl, fp]
    d254:	2803      	cmp	r0, #3
    d256:	d02c      	beq.n	d2b2 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xfe>
    d258:	2809      	cmp	r0, #9
    d25a:	d05c      	beq.n	d316 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    d25c:	2801      	cmp	r0, #1
    d25e:	f040 8085 	bne.w	d36c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
          GetTensorShape(input), GetTensorData<float>(input),
    d262:	4631      	mov	r1, r6
    d264:	a811      	add	r0, sp, #68	; 0x44
    d266:	f008 fb76 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
    d26a:	4621      	mov	r1, r4
    d26c:	a817      	add	r0, sp, #92	; 0x5c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d26e:	6877      	ldr	r7, [r6, #4]
    d270:	f008 fb71 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d274:	b104      	cbz	r4, d278 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    d276:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
    d278:	ae1d      	add	r6, sp, #116	; 0x74
    d27a:	4629      	mov	r1, r5
    d27c:	4630      	mov	r0, r6
    d27e:	f008 fb6a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
    d282:	686b      	ldr	r3, [r5, #4]
    d284:	aa17      	add	r2, sp, #92	; 0x5c
    d286:	4639      	mov	r1, r7
    d288:	e9cd 6300 	strd	r6, r3, [sp]
    d28c:	a811      	add	r0, sp, #68	; 0x44
    d28e:	4623      	mov	r3, r4
    d290:	f00e feba 	bl	1c008 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
    d294:	4630      	mov	r0, r6
    d296:	f008 fb19 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
    d29a:	a817      	add	r0, sp, #92	; 0x5c
    d29c:	f008 fb16 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
    d2a0:	a811      	add	r0, sp, #68	; 0x44
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2a2:	f008 fb13 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    d2a6:	2000      	movs	r0, #0
}
    d2a8:	b025      	add	sp, #148	; 0x94
    d2aa:	ecbd 8b04 	vpop	{d8-d9}
    d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      op_params.input_offset = -input->params.zero_point;
    d2b2:	6933      	ldr	r3, [r6, #16]
    d2b4:	425b      	negs	r3, r3
    d2b6:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
    d2b8:	6923      	ldr	r3, [r4, #16]
    d2ba:	425b      	negs	r3, r3
    d2bc:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
    d2be:	692b      	ldr	r3, [r5, #16]
    d2c0:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
    d2c2:	9b07      	ldr	r3, [sp, #28]
    d2c4:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
    d2c6:	9b08      	ldr	r3, [sp, #32]
    d2c8:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
    d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2cc:	9322      	str	r3, [sp, #136]	; 0x88
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2ce:	4631      	mov	r1, r6
      op_params.output_shift_2 = output_shift_2;
    d2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d2d2:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d2d4:	a80b      	add	r0, sp, #44	; 0x2c
    d2d6:	f008 fb3e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d2da:	6872      	ldr	r2, [r6, #4]
    d2dc:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
    d2de:	4621      	mov	r1, r4
    d2e0:	a811      	add	r0, sp, #68	; 0x44
    d2e2:	f008 fb38 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d2e6:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    d2e8:	ac17      	add	r4, sp, #92	; 0x5c
    d2ea:	4629      	mov	r1, r5
    d2ec:	4620      	mov	r0, r4
    d2ee:	f008 fb32 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
    d2f2:	686b      	ldr	r3, [r5, #4]
    d2f4:	9a05      	ldr	r2, [sp, #20]
    d2f6:	9600      	str	r6, [sp, #0]
    d2f8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d2fc:	a90b      	add	r1, sp, #44	; 0x2c
    d2fe:	ab11      	add	r3, sp, #68	; 0x44
    d300:	a81d      	add	r0, sp, #116	; 0x74
    d302:	f00e fef9 	bl	1c0f8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
    d306:	4620      	mov	r0, r4
    d308:	f008 fae0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
    d30c:	a811      	add	r0, sp, #68	; 0x44
    d30e:	f008 fadd 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    d312:	a80b      	add	r0, sp, #44	; 0x2c
    d314:	e7c5      	b.n	d2a2 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xee>
      op_params.input_offset = -input->params.zero_point;
    d316:	6933      	ldr	r3, [r6, #16]
    d318:	425b      	negs	r3, r3
    d31a:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
    d31c:	6923      	ldr	r3, [r4, #16]
    d31e:	425b      	negs	r3, r3
    d320:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
    d322:	692b      	ldr	r3, [r5, #16]
    d324:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
    d326:	9b07      	ldr	r3, [sp, #28]
    d328:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
    d32a:	9b08      	ldr	r3, [sp, #32]
    d32c:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
    d32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d330:	9322      	str	r3, [sp, #136]	; 0x88
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d332:	4631      	mov	r1, r6
      op_params.output_shift_2 = output_shift_2;
    d334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d336:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    d338:	a80b      	add	r0, sp, #44	; 0x2c
    d33a:	f008 fb0c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d33e:	6872      	ldr	r2, [r6, #4]
    d340:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<int8_t>(alpha),
    d342:	4621      	mov	r1, r4
    d344:	a811      	add	r0, sp, #68	; 0x44
    d346:	f008 fb06 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    d34a:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
    d34c:	ac17      	add	r4, sp, #92	; 0x5c
    d34e:	4629      	mov	r1, r5
    d350:	4620      	mov	r0, r4
    d352:	f008 fb00 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
    d356:	686b      	ldr	r3, [r5, #4]
    d358:	9a05      	ldr	r2, [sp, #20]
    d35a:	9600      	str	r6, [sp, #0]
    d35c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d360:	a90b      	add	r1, sp, #44	; 0x2c
    d362:	ab11      	add	r3, sp, #68	; 0x44
    d364:	a81d      	add	r0, sp, #116	; 0x74
    d366:	f00e ff4f 	bl	1c208 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    d36a:	e7cc      	b.n	d306 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x152>
      TF_LITE_KERNEL_LOG(
    d36c:	697c      	ldr	r4, [r7, #20]
    d36e:	f7f3 faa0 	bl	8b2 <TfLiteTypeGetName>
    d372:	4903      	ldr	r1, [pc, #12]	; (d380 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1cc>)
    d374:	4602      	mov	r2, r0
    d376:	4638      	mov	r0, r7
    d378:	47a0      	blx	r4
      return kTfLiteError;
    d37a:	2001      	movs	r0, #1
    d37c:	e794      	b.n	d2a8 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xf4>
    d37e:	bf00      	nop
    d380:	0002876d 	.word	0x0002876d

0000d384 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d384:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    d388:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d38c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    d38e:	f1b8 0f00 	cmp.w	r8, #0
    d392:	d101      	bne.n	d398 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    d394:	f011 f92e 	bl	1e5f4 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    d398:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d39a:	6814      	ldr	r4, [r2, #0]
    d39c:	2c01      	cmp	r4, #1
    d39e:	d010      	beq.n	d3c2 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    d3a0:	2601      	movs	r6, #1
    d3a2:	e9cd 4602 	strd	r4, r6, [sp, #8]
    d3a6:	4b42      	ldr	r3, [pc, #264]	; (d4b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    d3a8:	9301      	str	r3, [sp, #4]
    d3aa:	4b42      	ldr	r3, [pc, #264]	; (d4b4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
    d3ac:	9300      	str	r3, [sp, #0]
    d3ae:	6944      	ldr	r4, [r0, #20]
    d3b0:	4a41      	ldr	r2, [pc, #260]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d3b2:	4942      	ldr	r1, [pc, #264]	; (d4bc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d3b4:	2332      	movs	r3, #50	; 0x32
    d3b6:	47a0      	blx	r4
    d3b8:	4634      	mov	r4, r6

    QuantizeMultiplier(effective_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
    d3ba:	4620      	mov	r0, r4
    d3bc:	b004      	add	sp, #16
    d3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    d3c2:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    d3c4:	681f      	ldr	r7, [r3, #0]
    d3c6:	2f01      	cmp	r7, #1
    d3c8:	d00b      	beq.n	d3e2 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    d3ca:	e9cd 7402 	strd	r7, r4, [sp, #8]
    d3ce:	4b38      	ldr	r3, [pc, #224]	; (d4b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    d3d0:	9301      	str	r3, [sp, #4]
    d3d2:	4b3b      	ldr	r3, [pc, #236]	; (d4c0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    d3d4:	9300      	str	r3, [sp, #0]
    d3d6:	6945      	ldr	r5, [r0, #20]
    d3d8:	4a37      	ldr	r2, [pc, #220]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d3da:	4938      	ldr	r1, [pc, #224]	; (d4bc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d3dc:	2333      	movs	r3, #51	; 0x33
    d3de:	47a8      	blx	r5
    d3e0:	e7eb      	b.n	d3ba <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  return &context->tensors[node->outputs->data[index]];
    d3e2:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    d3e4:	6886      	ldr	r6, [r0, #8]
    d3e6:	ea4f 1c83 	mov.w	ip, r3, lsl #6
    d3ea:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
    d3ee:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    d3f2:	2c01      	cmp	r4, #1
    d3f4:	d00c      	beq.n	d410 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>
    d3f6:	e9cd 4702 	strd	r4, r7, [sp, #8]
    d3fa:	4b32      	ldr	r3, [pc, #200]	; (d4c4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    d3fc:	9301      	str	r3, [sp, #4]
    d3fe:	4b32      	ldr	r3, [pc, #200]	; (d4c8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    d400:	9300      	str	r3, [sp, #0]
    d402:	6944      	ldr	r4, [r0, #20]
    d404:	4a2c      	ldr	r2, [pc, #176]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d406:	492d      	ldr	r1, [pc, #180]	; (d4bc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    d408:	233a      	movs	r3, #58	; 0x3a
    d40a:	47a0      	blx	r4
    d40c:	463c      	mov	r4, r7
    d40e:	e7d4      	b.n	d3ba <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  const auto* affine_quantization =
    d410:	6b59      	ldr	r1, [r3, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    d412:	b939      	cbnz	r1, d424 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    d414:	4b2d      	ldr	r3, [pc, #180]	; (d4cc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    d416:	9300      	str	r3, [sp, #0]
    d418:	6945      	ldr	r5, [r0, #20]
    d41a:	233e      	movs	r3, #62	; 0x3e
  TF_LITE_ENSURE(context, affine_quantization->scale);
    d41c:	4a26      	ldr	r2, [pc, #152]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d41e:	492c      	ldr	r1, [pc, #176]	; (d4d0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    d420:	47a8      	blx	r5
    d422:	e7ca      	b.n	d3ba <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    d424:	6809      	ldr	r1, [r1, #0]
    d426:	b921      	cbnz	r1, d432 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    d428:	4b2a      	ldr	r3, [pc, #168]	; (d4d4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    d42a:	9300      	str	r3, [sp, #0]
    d42c:	6945      	ldr	r5, [r0, #20]
    d42e:	233f      	movs	r3, #63	; 0x3f
    d430:	e7f4      	b.n	d41c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
    d432:	6809      	ldr	r1, [r1, #0]
    d434:	2901      	cmp	r1, #1
    d436:	d004      	beq.n	d442 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xbe>
    d438:	4b27      	ldr	r3, [pc, #156]	; (d4d8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    d43a:	9300      	str	r3, [sp, #0]
    d43c:	6945      	ldr	r5, [r0, #20]
    d43e:	2340      	movs	r3, #64	; 0x40
    d440:	e7ec      	b.n	d41c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  return &context->tensors[node->inputs->data[index]];
    d442:	6851      	ldr	r1, [r2, #4]
    d444:	018f      	lsls	r7, r1, #6
    d446:	eb06 1181 	add.w	r1, r6, r1, lsl #6
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
    d44a:	5df2      	ldrb	r2, [r6, r7]
    d44c:	f002 07f7 	and.w	r7, r2, #247	; 0xf7
    d450:	2f01      	cmp	r7, #1
    d452:	d006      	beq.n	d462 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    d454:	2a07      	cmp	r2, #7
    d456:	d004      	beq.n	d462 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    d458:	4b20      	ldr	r3, [pc, #128]	; (d4dc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    d45a:	9300      	str	r3, [sp, #0]
    d45c:	6945      	ldr	r5, [r0, #20]
    d45e:	2342      	movs	r3, #66	; 0x42
    d460:	e7dc      	b.n	d41c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TF_LITE_ENSURE(context,
    d462:	f816 000c 	ldrb.w	r0, [r6, ip]
    d466:	2803      	cmp	r0, #3
    d468:	d020      	beq.n	d4ac <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
    d46a:	2809      	cmp	r0, #9
    d46c:	d008      	beq.n	d480 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    d46e:	4b1c      	ldr	r3, [pc, #112]	; (d4e0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    d470:	9300      	str	r3, [sp, #0]
    d472:	696e      	ldr	r6, [r5, #20]
    d474:	4a10      	ldr	r2, [pc, #64]	; (d4b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    d476:	4916      	ldr	r1, [pc, #88]	; (d4d0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    d478:	2345      	movs	r3, #69	; 0x45
    d47a:	4628      	mov	r0, r5
    d47c:	47b0      	blx	r6
    d47e:	e79c      	b.n	d3ba <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  if ((input->type == kTfLiteInt16 || input->type == kTfLiteInt8) &&
    d480:	2a07      	cmp	r2, #7
    d482:	d001      	beq.n	d488 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    d484:	2a09      	cmp	r2, #9
    d486:	d111      	bne.n	d4ac <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
        static_cast<double>(input->params.scale / output->params.scale);
    d488:	ed91 7a03 	vldr	s14, [r1, #12]
    d48c:	edd3 7a03 	vldr	s15, [r3, #12]
    double effective_scale =
    d490:	eec7 7a27 	vdiv.f32	s15, s14, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
    d494:	f108 0404 	add.w	r4, r8, #4
    double effective_scale =
    d498:	ee17 0a90 	vmov	r0, s15
    d49c:	f7f3 fbe4 	bl	c68 <__aeabi_f2d>
    d4a0:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
    d4a4:	4621      	mov	r1, r4
    d4a6:	4640      	mov	r0, r8
    d4a8:	f004 f942 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
    d4ac:	2400      	movs	r4, #0
    d4ae:	e784      	b.n	d3ba <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    d4b0:	0002880d 	.word	0x0002880d
    d4b4:	00027b8d 	.word	0x00027b8d
    d4b8:	000287a5 	.word	0x000287a5
    d4bc:	00027b73 	.word	0x00027b73
    d4c0:	00027b9d 	.word	0x00027b9d
    d4c4:	00027e46 	.word	0x00027e46
    d4c8:	000287cf 	.word	0x000287cf
    d4cc:	00027e7a 	.word	0x00027e7a
    d4d0:	000272d2 	.word	0x000272d2
    d4d4:	00027e8e 	.word	0x00027e8e
    d4d8:	000287e9 	.word	0x000287e9
    d4dc:	0002880f 	.word	0x0002880f
    d4e0:	0002886a 	.word	0x0002886a

0000d4e4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4e8:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
    d4ec:	f8d1 b010 	ldr.w	fp, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d4f0:	b08f      	sub	sp, #60	; 0x3c
    d4f2:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    d4f4:	f1bb 0f00 	cmp.w	fp, #0
    d4f8:	d101      	bne.n	d4fe <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
    d4fa:	f011 f87b 	bl	1e5f4 <abort>
    d4fe:	680b      	ldr	r3, [r1, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
    d500:	6887      	ldr	r7, [r0, #8]
    d502:	685d      	ldr	r5, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    d504:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    d506:	ea4f 1985 	mov.w	r9, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d50a:	685c      	ldr	r4, [r3, #4]

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = static_cast<double>(output->params.scale);

  if (input->type == kTfLiteFloat32) {
    d50c:	f817 6009 	ldrb.w	r6, [r7, r9]
    d510:	2e01      	cmp	r6, #1
    d512:	ea4f 1a84 	mov.w	sl, r4, lsl #6
  return &context->tensors[node->inputs->data[index]];
    d516:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    d51a:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    d51e:	f040 8090 	bne.w	d642 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    switch (output->type) {
    d522:	f817 300a 	ldrb.w	r3, [r7, sl]
  op_params.zero_point = output->params.zero_point;
    d526:	f8d4 9010 	ldr.w	r9, [r4, #16]
  op_params.scale = static_cast<double>(output->params.scale);
    d52a:	ed94 8a03 	vldr	s16, [r4, #12]
    switch (output->type) {
    d52e:	2b03      	cmp	r3, #3
    d530:	d039      	beq.n	d5a6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xc2>
    d532:	2b09      	cmp	r3, #9
    d534:	d171      	bne.n	d61a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x136>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d536:	4629      	mov	r1, r5
    d538:	a802      	add	r0, sp, #8
    d53a:	f008 fa0c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<int8_t>(output));
    d53e:	4621      	mov	r1, r4
    d540:	a808      	add	r0, sp, #32
    d542:	686d      	ldr	r5, [r5, #4]
    d544:	f008 fa07 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    d548:	a908      	add	r1, sp, #32
    d54a:	a802      	add	r0, sp, #8
    d54c:	f008 f9da 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    d550:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d554:	eec7 8a88 	vdiv.f32	s17, s15, s16
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d558:	6867      	ldr	r7, [r4, #4]
    d55a:	4606      	mov	r6, r0
  static constexpr int32 min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32 max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
    d55c:	2400      	movs	r4, #0
    const InputT val = input_data[i];
    int32 unclamped =
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
    d55e:	f06f 087f 	mvn.w	r8, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
    d562:	42a6      	cmp	r6, r4
    d564:	dd51      	ble.n	d60a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    const InputT val = input_data[i];
    d566:	ecf5 7a01 	vldmia	r5!, {s15}
    d56a:	ee67 7aa8 	vmul.f32	s15, s15, s17
    d56e:	ee17 0a90 	vmov	r0, s15
    d572:	f7f3 fb79 	bl	c68 <__aeabi_f2d>
    d576:	ec41 0b10 	vmov	d0, r0, r1
    d57a:	f004 fd03 	bl	11f84 <round>
    d57e:	ec51 0b10 	vmov	r0, r1, d0
    d582:	f7f3 fe8b 	bl	129c <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
    d586:	ee07 0a90 	vmov	s15, r0
    d58a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    d58e:	ee17 3a90 	vmov	r3, s15
    d592:	444b      	add	r3, r9
    output_data[i] = clamped;
    d594:	2b7f      	cmp	r3, #127	; 0x7f
    d596:	bfa8      	it	ge
    d598:	237f      	movge	r3, #127	; 0x7f
    d59a:	4543      	cmp	r3, r8
    d59c:	bfb8      	it	lt
    d59e:	4643      	movlt	r3, r8
    d5a0:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
    d5a2:	3401      	adds	r4, #1
    d5a4:	e7dd      	b.n	d562 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
        break;
      case kTfLiteUInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d5a6:	4629      	mov	r1, r5
    d5a8:	a802      	add	r0, sp, #8
    d5aa:	f008 f9d4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<uint8_t>(output));
    d5ae:	4621      	mov	r1, r4
    d5b0:	a808      	add	r0, sp, #32
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d5b2:	686d      	ldr	r5, [r5, #4]
    d5b4:	f008 f9cf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
    d5b8:	a908      	add	r1, sp, #32
    d5ba:	a802      	add	r0, sp, #8
    d5bc:	f008 f9a2 	bl	15904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    d5c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d5c4:	eec7 8a88 	vdiv.f32	s17, s15, s16
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d5c8:	6867      	ldr	r7, [r4, #4]
    d5ca:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
    d5cc:	2400      	movs	r4, #0
    d5ce:	42a6      	cmp	r6, r4
    d5d0:	dd1b      	ble.n	d60a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x126>
    const InputT val = input_data[i];
    d5d2:	ecf5 7a01 	vldmia	r5!, {s15}
    d5d6:	ee67 7aa8 	vmul.f32	s15, s15, s17
    d5da:	ee17 0a90 	vmov	r0, s15
    d5de:	f7f3 fb43 	bl	c68 <__aeabi_f2d>
    d5e2:	ec41 0b10 	vmov	d0, r0, r1
    d5e6:	f004 fccd 	bl	11f84 <round>
    d5ea:	ec51 0b10 	vmov	r0, r1, d0
    d5ee:	f7f3 fe55 	bl	129c <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
    d5f2:	ee07 0a90 	vmov	s15, r0
    d5f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    d5fa:	ee17 3a90 	vmov	r3, s15
    d5fe:	444b      	add	r3, r9
    output_data[i] = clamped;
    d600:	f383 0308 	usat	r3, #8, r3
    d604:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
    d606:	3401      	adds	r4, #1
    d608:	e7e1      	b.n	d5ce <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    d60a:	a808      	add	r0, sp, #32
    d60c:	f008 f95e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<float>(input),
    d610:	a802      	add	r0, sp, #8
    d612:	f008 f95b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    d616:	2600      	movs	r6, #0
    d618:	e00d      	b.n	d636 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x152>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d61a:	6944      	ldr	r4, [r0, #20]
    d61c:	4630      	mov	r0, r6
    d61e:	f7f3 f948 	bl	8b2 <TfLiteTypeGetName>
    d622:	9001      	str	r0, [sp, #4]
    d624:	f817 000a 	ldrb.w	r0, [r7, sl]
    d628:	f7f3 f943 	bl	8b2 <TfLiteTypeGetName>
    d62c:	9a01      	ldr	r2, [sp, #4]
    d62e:	4938      	ldr	r1, [pc, #224]	; (d710 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    d630:	4603      	mov	r3, r0
    d632:	4640      	mov	r0, r8
    d634:	47a0      	blx	r4
}
    d636:	4630      	mov	r0, r6
    d638:	b00f      	add	sp, #60	; 0x3c
    d63a:	ecbd 8b02 	vpop	{d8}
    d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt16) {
    d642:	2e07      	cmp	r6, #7
    d644:	d126      	bne.n	d694 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
    size_t size = ElementCount(*input->dims);
    d646:	68a8      	ldr	r0, [r5, #8]
    d648:	f010 ff72 	bl	1e530 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
    d64c:	f817 300a 	ldrb.w	r3, [r7, sl]
    d650:	2b09      	cmp	r3, #9
    size_t size = ElementCount(*input->dims);
    d652:	4606      	mov	r6, r0
    switch (output->type) {
    d654:	d147      	bne.n	d6e6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x202>
        reference_ops::Requantize(
    d656:	e9db ab00 	ldrd	sl, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d65a:	f8d5 9004 	ldr.w	r9, [r5, #4]
            data->output_shift, input->params.zero_point,
    d65e:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
    d660:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d662:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
    d664:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    d668:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
    d66a:	42a6      	cmp	r6, r4
    d66c:	ddd3      	ble.n	d616 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
    const int32_t input = input_data[i] - input_zeropoint;
    d66e:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    d672:	9301      	str	r3, [sp, #4]
    d674:	1ac0      	subs	r0, r0, r3
    d676:	465a      	mov	r2, fp
    d678:	4651      	mov	r1, sl
    d67a:	f7fc f90f 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    d67e:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
    d680:	4540      	cmp	r0, r8
    d682:	bfb8      	it	lt
    d684:	4640      	movlt	r0, r8
    d686:	287f      	cmp	r0, #127	; 0x7f
    d688:	bfa8      	it	ge
    d68a:	207f      	movge	r0, #127	; 0x7f
    d68c:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
    d68e:	9b01      	ldr	r3, [sp, #4]
    d690:	3401      	adds	r4, #1
    d692:	e7ea      	b.n	d66a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x186>
  } else if (input->type == kTfLiteInt8) {
    d694:	2e09      	cmp	r6, #9
    d696:	d138      	bne.n	d70a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x226>
    size_t size = ElementCount(*input->dims);
    d698:	68a8      	ldr	r0, [r5, #8]
    d69a:	f010 ff49 	bl	1e530 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
    d69e:	f817 300a 	ldrb.w	r3, [r7, sl]
    d6a2:	2b09      	cmp	r3, #9
    size_t size = ElementCount(*input->dims);
    d6a4:	4606      	mov	r6, r0
    switch (output->type) {
    d6a6:	d11e      	bne.n	d6e6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x202>
        reference_ops::Requantize(
    d6a8:	e9db 9b00 	ldrd	r9, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    d6ac:	f8d5 a004 	ldr.w	sl, [r5, #4]
            data->output_shift, input->params.zero_point,
    d6b0:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
    d6b2:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d6b4:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
    d6b6:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    d6ba:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
    d6bc:	42a6      	cmp	r6, r4
    d6be:	ddaa      	ble.n	d616 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
    const int32_t input = input_data[i] - input_zeropoint;
    d6c0:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
    d6c4:	9301      	str	r3, [sp, #4]
    d6c6:	1ac0      	subs	r0, r0, r3
    d6c8:	465a      	mov	r2, fp
    d6ca:	4649      	mov	r1, r9
    d6cc:	f7fc f8e6 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
    d6d0:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
    d6d2:	4540      	cmp	r0, r8
    d6d4:	bfb8      	it	lt
    d6d6:	4640      	movlt	r0, r8
    d6d8:	287f      	cmp	r0, #127	; 0x7f
    d6da:	bfa8      	it	ge
    d6dc:	207f      	movge	r0, #127	; 0x7f
    d6de:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
    d6e0:	9b01      	ldr	r3, [sp, #4]
    d6e2:	3401      	adds	r4, #1
    d6e4:	e7ea      	b.n	d6bc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d6e6:	f8d8 4014 	ldr.w	r4, [r8, #20]
    d6ea:	f817 0009 	ldrb.w	r0, [r7, r9]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d6ee:	f7f3 f8e0 	bl	8b2 <TfLiteTypeGetName>
    d6f2:	9001      	str	r0, [sp, #4]
    d6f4:	f817 000a 	ldrb.w	r0, [r7, sl]
    d6f8:	f7f3 f8db 	bl	8b2 <TfLiteTypeGetName>
    d6fc:	9a01      	ldr	r2, [sp, #4]
    d6fe:	4904      	ldr	r1, [pc, #16]	; (d710 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    d700:	4603      	mov	r3, r0
    d702:	4640      	mov	r0, r8
    d704:	47a0      	blx	r4
    return kTfLiteError;
    d706:	2601      	movs	r6, #1
    d708:	e795      	b.n	d636 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x152>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    d70a:	6944      	ldr	r4, [r0, #20]
    d70c:	4630      	mov	r0, r6
    d70e:	e7ee      	b.n	d6ee <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    d710:	000280ff 	.word	0x000280ff

0000d714 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d714:	4800      	ldr	r0, [pc, #0]	; (d718 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x4>)
    d716:	4770      	bx	lr
    d718:	20000568 	.word	0x20000568

0000d71c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
namespace reduce {

constexpr int kMaxNumberOfAxis = 4;
constexpr int kMaxNumberOfReducedAxis = 2;

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
    d71c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
    d720:	680b      	ldr	r3, [r1, #0]
    d722:	681f      	ldr	r7, [r3, #0]
    d724:	2f02      	cmp	r7, #2
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
    d726:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
    d728:	d00f      	beq.n	d74a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x2e>
    d72a:	2302      	movs	r3, #2
    d72c:	e9cd 7302 	strd	r7, r3, [sp, #8]
    d730:	4b1b      	ldr	r3, [pc, #108]	; (d7a0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x84>)
    d732:	9301      	str	r3, [sp, #4]
    d734:	4b1b      	ldr	r3, [pc, #108]	; (d7a4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x88>)
    d736:	9300      	str	r3, [sp, #0]
    d738:	6944      	ldr	r4, [r0, #20]
    d73a:	232a      	movs	r3, #42	; 0x2a
    d73c:	4a1a      	ldr	r2, [pc, #104]	; (d7a8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
    d73e:	491b      	ldr	r1, [pc, #108]	; (d7ac <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x90>)
    d740:	47a0      	blx	r4
    d742:	2001      	movs	r0, #1

  // Validate axis type
  const TfLiteTensor* axis = GetInput(context, node, 1);
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
  return kTfLiteOk;
}
    d744:	b004      	add	sp, #16
    d746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    d74a:	684a      	ldr	r2, [r1, #4]
    d74c:	6814      	ldr	r4, [r2, #0]
    d74e:	2c01      	cmp	r4, #1
    d750:	d009      	beq.n	d766 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x4a>
    d752:	2601      	movs	r6, #1
    d754:	4b16      	ldr	r3, [pc, #88]	; (d7b0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x94>)
    d756:	9301      	str	r3, [sp, #4]
    d758:	e9cd 4602 	strd	r4, r6, [sp, #8]
    d75c:	4b15      	ldr	r3, [pc, #84]	; (d7b4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x98>)
    d75e:	9300      	str	r3, [sp, #0]
    d760:	6944      	ldr	r4, [r0, #20]
    d762:	232b      	movs	r3, #43	; 0x2b
    d764:	e7ea      	b.n	d73c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x20>
  return &context->tensors[node->inputs->data[index]];
    d766:	689b      	ldr	r3, [r3, #8]
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
    d768:	6882      	ldr	r2, [r0, #8]
    d76a:	019b      	lsls	r3, r3, #6
    d76c:	5cd0      	ldrb	r0, [r2, r3]
    d76e:	2802      	cmp	r0, #2
    d770:	d013      	beq.n	d79a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x7e>
    d772:	f8d5 8014 	ldr.w	r8, [r5, #20]
    d776:	f7f3 f89c 	bl	8b2 <TfLiteTypeGetName>
    d77a:	4606      	mov	r6, r0
    d77c:	4638      	mov	r0, r7
    d77e:	f7f3 f898 	bl	8b2 <TfLiteTypeGetName>
    d782:	4b0d      	ldr	r3, [pc, #52]	; (d7b8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x9c>)
    d784:	9301      	str	r3, [sp, #4]
    d786:	4b0d      	ldr	r3, [pc, #52]	; (d7bc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa0>)
    d788:	9300      	str	r3, [sp, #0]
    d78a:	e9cd 6002 	strd	r6, r0, [sp, #8]
    d78e:	4a06      	ldr	r2, [pc, #24]	; (d7a8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
    d790:	490b      	ldr	r1, [pc, #44]	; (d7c0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa4>)
    d792:	232f      	movs	r3, #47	; 0x2f
    d794:	4628      	mov	r0, r5
    d796:	47c0      	blx	r8
    d798:	e7d3      	b.n	d742 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x26>
  return kTfLiteOk;
    d79a:	2000      	movs	r0, #0
    d79c:	e7d2      	b.n	d744 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x28>
    d79e:	bf00      	nop
    d7a0:	000283e5 	.word	0x000283e5
    d7a4:	000288ce 	.word	0x000288ce
    d7a8:	000288a6 	.word	0x000288a6
    d7ac:	00027b73 	.word	0x00027b73
    d7b0:	0002880d 	.word	0x0002880d
    d7b4:	00027e32 	.word	0x00027e32
    d7b8:	000280f2 	.word	0x000280f2
    d7bc:	000288e1 	.word	0x000288e1
    d7c0:	00027bae 	.word	0x00027bae

0000d7c4 <_ZN6tflite3ops5micro13Register_MEANEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    d7c4:	4800      	ldr	r0, [pc, #0]	; (d7c8 <_ZN6tflite3ops5micro13Register_MEANEv+0x4>)
    d7c6:	4770      	bx	lr
    d7c8:	20000588 	.word	0x20000588

0000d7cc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
  }
  return true;
}

template <typename T>
inline void Mean(const tflite::MeanParams& op_params,
    d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7d0:	4604      	mov	r4, r0
    d7d2:	ed2d 8b02 	vpush	{d8}
    d7d6:	4608      	mov	r0, r1
                 const RuntimeShape& unextended_output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("Mean4D");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
    d7d8:	6809      	ldr	r1, [r1, #0]
    d7da:	2904      	cmp	r1, #4
inline void Mean(const tflite::MeanParams& op_params,
    d7dc:	b091      	sub	sp, #68	; 0x44
    d7de:	4692      	mov	sl, r2
    d7e0:	461d      	mov	r5, r3
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
    d7e2:	d001      	beq.n	d7e8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    d7e4:	f010 ff06 	bl	1e5f4 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
    d7e8:	681b      	ldr	r3, [r3, #0]
    d7ea:	2b04      	cmp	r3, #4
    d7ec:	dcfa      	bgt.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    return RuntimeShape(new_shape_size, shape, 1);
    d7ee:	4602      	mov	r2, r0
    d7f0:	2301      	movs	r3, #1
    d7f2:	a804      	add	r0, sp, #16
    d7f4:	9103      	str	r1, [sp, #12]
    d7f6:	f008 f909 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    d7fa:	462a      	mov	r2, r5
    d7fc:	2301      	movs	r3, #1
    d7fe:	9903      	ldr	r1, [sp, #12]
    d800:	a80a      	add	r0, sp, #40	; 0x28
    d802:	f008 f903 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  const int output_batch = output_shape.Dims(0);
    d806:	2100      	movs	r1, #0
    d808:	a80a      	add	r0, sp, #40	; 0x28
    d80a:	f008 f86a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    d80e:	2101      	movs	r1, #1
  const int output_batch = output_shape.Dims(0);
    d810:	4680      	mov	r8, r0
  const int output_height = output_shape.Dims(1);
    d812:	a80a      	add	r0, sp, #40	; 0x28
    d814:	f008 f865 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    d818:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    d81a:	4606      	mov	r6, r0
  const int output_width = output_shape.Dims(2);
    d81c:	a80a      	add	r0, sp, #40	; 0x28
    d81e:	f008 f860 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(3);
    d822:	2103      	movs	r1, #3
  const int output_width = output_shape.Dims(2);
    d824:	4683      	mov	fp, r0
  const int output_depth = output_shape.Dims(3);
    d826:	a80a      	add	r0, sp, #40	; 0x28
    d828:	f008 f85b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>

  const int input_height = input_shape.Dims(1);
    d82c:	2101      	movs	r1, #1
  const int output_depth = output_shape.Dims(3);
    d82e:	4681      	mov	r9, r0
  const int input_height = input_shape.Dims(1);
    d830:	a804      	add	r0, sp, #16
    d832:	f008 f856 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    d836:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    d838:	4605      	mov	r5, r0
  const int input_width = input_shape.Dims(2);
    d83a:	a804      	add	r0, sp, #16
    d83c:	f008 f851 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
    d840:	f994 2000 	ldrsb.w	r2, [r4]
    d844:	2a02      	cmp	r2, #2
  const int input_width = input_shape.Dims(2);
    d846:	4607      	mov	r7, r0
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
    d848:	d1cc      	bne.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    d84a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    d84e:	2a01      	cmp	r2, #1
    d850:	d131      	bne.n	d8b6 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xea>
    d852:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    d856:	2a02      	cmp	r2, #2
    d858:	d1c4      	bne.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
    d85a:	2e01      	cmp	r6, #1
    d85c:	d1c2      	bne.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK_EQ(output_width, 1);
    d85e:	f1bb 0f01 	cmp.w	fp, #1
    d862:	d1bf      	bne.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
        for (int in_w = 0; in_w < input_width; ++in_w) {
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
          value / (input_width * input_height);
    d864:	fb07 f305 	mul.w	r3, r7, r5
    d868:	ee07 3a90 	vmov	s15, r3
    d86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d874:	eec7 8a27 	vdiv.f32	s17, s14, s15
  for (int out_b = 0; out_b < output_batch; ++out_b) {
    d878:	2400      	movs	r4, #0
    d87a:	4544      	cmp	r4, r8
    d87c:	da36      	bge.n	d8ec <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x120>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
    d87e:	2600      	movs	r6, #0
    d880:	454e      	cmp	r6, r9
    d882:	da31      	bge.n	d8e8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x11c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d884:	f04f 0b00 	mov.w	fp, #0
      float value = 0;
    d888:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d904 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x138>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d88c:	45ab      	cmp	fp, r5
    d88e:	da1b      	bge.n	d8c8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d890:	2300      	movs	r3, #0
    d892:	42bb      	cmp	r3, r7
    d894:	da15      	bge.n	d8c2 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf6>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
    d896:	9600      	str	r6, [sp, #0]
    d898:	465a      	mov	r2, fp
    d89a:	4621      	mov	r1, r4
    d89c:	a804      	add	r0, sp, #16
    d89e:	9303      	str	r3, [sp, #12]
    d8a0:	f008 f8e1 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    d8a4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    d8a8:	edd0 7a00 	vldr	s15, [r0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d8ac:	9b03      	ldr	r3, [sp, #12]
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
    d8ae:	ee38 8a27 	vadd.f32	s16, s16, s15
        for (int in_w = 0; in_w < input_width; ++in_w) {
    d8b2:	3301      	adds	r3, #1
    d8b4:	e7ed      	b.n	d892 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xc6>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    d8b6:	2a02      	cmp	r2, #2
    d8b8:	d194      	bne.n	d7e4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    d8ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    d8be:	2a01      	cmp	r2, #1
    d8c0:	e7ca      	b.n	d858 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x8c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
    d8c2:	f10b 0b01 	add.w	fp, fp, #1
    d8c6:	e7e1      	b.n	d88c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xc0>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
    d8c8:	2300      	movs	r3, #0
    d8ca:	9600      	str	r6, [sp, #0]
    d8cc:	461a      	mov	r2, r3
    d8ce:	4621      	mov	r1, r4
    d8d0:	a80a      	add	r0, sp, #40	; 0x28
    d8d2:	f008 f8c8 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    d8d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
          value / (input_width * input_height);
    d8d8:	ee28 8a28 	vmul.f32	s16, s16, s17
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
    d8dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d8e0:	ed80 8a00 	vstr	s16, [r0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
    d8e4:	3601      	adds	r6, #1
    d8e6:	e7cb      	b.n	d880 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xb4>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
    d8e8:	3401      	adds	r4, #1
    d8ea:	e7c6      	b.n	d87a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xae>
  const RuntimeShape output_shape =
    d8ec:	a80a      	add	r0, sp, #40	; 0x28
    d8ee:	f007 ffed 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
    d8f2:	a804      	add	r0, sp, #16
    d8f4:	f007 ffea 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    }
  }
}
    d8f8:	b011      	add	sp, #68	; 0x44
    d8fa:	ecbd 8b02 	vpop	{d8}
    d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d902:	bf00      	nop
    d904:	00000000 	.word	0x00000000

0000d908 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
    d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d90c:	b089      	sub	sp, #36	; 0x24
    d90e:	4614      	mov	r4, r2
    d910:	9007      	str	r0, [sp, #28]
    d912:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
    d916:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    d918:	9003      	str	r0, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d91a:	f04f 0c00 	mov.w	ip, #0
  size_t num_outputs = 1;
    d91e:	2701      	movs	r7, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d920:	45b4      	cmp	ip, r6
    d922:	db10      	blt.n	d946 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x3e>
    d924:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    d928:	461d      	mov	r5, r3
    d92a:	00bb      	lsls	r3, r7, #2
    d92c:	9306      	str	r3, [sp, #24]
    d92e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    d932:	4648      	mov	r0, r9
    d934:	462b      	mov	r3, r5
    output_data[idx] = T();
    d936:	2600      	movs	r6, #0
  for (size_t idx = 0; idx < num_outputs; ++idx) {
    d938:	42bb      	cmp	r3, r7
    d93a:	d010      	beq.n	d95e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x56>
    output_data[idx] = T();
    d93c:	f843 6b04 	str.w	r6, [r3], #4
    temp_sum[idx] = U();
    d940:	f840 6b04 	str.w	r6, [r0], #4
  for (size_t idx = 0; idx < num_outputs; ++idx) {
    d944:	e7f8      	b.n	d938 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x30>
    size_t current = static_cast<size_t>(output_dims[idx]);
    d946:	9812      	ldr	r0, [sp, #72]	; 0x48
    d948:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
    d94c:	fba5 e007 	umull	lr, r0, r5, r7
    d950:	2800      	cmp	r0, #0
    d952:	f040 80aa 	bne.w	daaa <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a2>
    num_outputs *= current;
    d956:	436f      	muls	r7, r5
  for (int idx = 0; idx < output_num_dims; ++idx) {
    d958:	f10c 0c01 	add.w	ip, ip, #1
    d95c:	e7e0      	b.n	d920 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x18>
  if (num_dims == 0) {
    d95e:	b37c      	cbz	r4, d9c0 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xb8>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
    d960:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d962:	461e      	mov	r6, r3
    d964:	17df      	asrs	r7, r3, #31
    d966:	e9cd 6704 	strd	r6, r7, [sp, #16]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    d96a:	f04f 0a00 	mov.w	sl, #0
  *out_num_axis = 0;  // Just in case.
    d96e:	2600      	movs	r6, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    d970:	f04f 0b00 	mov.w	fp, #0
    d974:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    d978:	45ba      	cmp	sl, r7
    d97a:	eb7b 0308 	sbcs.w	r3, fp, r8
    d97e:	da17      	bge.n	d9b0 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xa8>
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
    d980:	9814      	ldr	r0, [sp, #80]	; 0x50
    d982:	ea4f 038a 	mov.w	r3, sl, lsl #2
    d986:	58c0      	ldr	r0, [r0, r3]
    d988:	2800      	cmp	r0, #0
    d98a:	da01      	bge.n	d990 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x88>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
    d98c:	1900      	adds	r0, r0, r4
    d98e:	d401      	bmi.n	d994 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
    d990:	4284      	cmp	r4, r0
    d992:	dc01      	bgt.n	d998 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x90>
    d994:	f010 fe2e 	bl	1e5f4 <abort>
    for (int j = 0; j < *out_num_axis; ++j) {
    d998:	2700      	movs	r7, #0
    d99a:	42b7      	cmp	r7, r6
      out_axis[*out_num_axis] = current;
    d99c:	9b03      	ldr	r3, [sp, #12]
    for (int j = 0; j < *out_num_axis; ++j) {
    d99e:	f280 8086 	bge.w	daae <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a6>
      if (out_axis[j] == current) {
    d9a2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    d9a6:	4283      	cmp	r3, r0
    d9a8:	f000 8084 	beq.w	dab4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1ac>
    for (int j = 0; j < *out_num_axis; ++j) {
    d9ac:	3701      	adds	r7, #1
    d9ae:	e7f4      	b.n	d99a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x92>
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d9b0:	2300      	movs	r3, #0
    input_iter[idx] = 0;
    d9b2:	4618      	mov	r0, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d9b4:	429c      	cmp	r4, r3
    d9b6:	dd04      	ble.n	d9c2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xba>
    input_iter[idx] = 0;
    d9b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
    d9bc:	3301      	adds	r3, #1
    d9be:	e7f9      	b.n	d9b4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xac>
  *out_num_axis = 0;  // Just in case.
    d9c0:	4626      	mov	r6, r4
    d9c2:	eb02 0b84 	add.w	fp, r2, r4, lsl #2
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
    d9c6:	f04f 0a00 	mov.w	sl, #0
    d9ca:	2300      	movs	r3, #0
    d9cc:	f8cd a000 	str.w	sl, [sp]
    d9d0:	4620      	mov	r0, r4
    d9d2:	9217      	str	r2, [sp, #92]	; 0x5c
    d9d4:	9104      	str	r1, [sp, #16]
    d9d6:	f00e fcb1 	bl	1c33c <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
    d9da:	9b03      	ldr	r3, [sp, #12]
    d9dc:	9904      	ldr	r1, [sp, #16]
    d9de:	9300      	str	r3, [sp, #0]
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
    d9e0:	4607      	mov	r7, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
    d9e2:	4633      	mov	r3, r6
    d9e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d9e6:	4620      	mov	r0, r4
    d9e8:	f00e fca8 	bl	1c33c <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
        reducer(output_data[output_offset], input_data[input_offset]);
    d9ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
  if (num_dims == 0) {
    d9ee:	9904      	ldr	r1, [sp, #16]
    d9f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d9f4:	9b07      	ldr	r3, [sp, #28]
    return current + actual_in;
    d9f6:	edd0 7a00 	vldr	s15, [r0]
        reducer(output_data[output_offset], input_data[input_offset]);
    d9fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return current + actual_in;
    d9fe:	ed97 7a00 	vldr	s14, [r7]
    da02:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
    da06:	edc0 7a00 	vstr	s15, [r0]
    da0a:	b1d4      	cbz	r4, da42 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
  TFLITE_DCHECK(dims != nullptr);
    da0c:	2900      	cmp	r1, #0
    da0e:	d0c1      	beq.n	d994 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
  TFLITE_DCHECK(current != nullptr);
    da10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    da12:	2a00      	cmp	r2, #0
    da14:	d0be      	beq.n	d994 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
    da16:	1e67      	subs	r7, r4, #1
    da18:	465b      	mov	r3, fp
    da1a:	2f00      	cmp	r7, #0
    da1c:	db11      	blt.n	da42 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
    int current_val = current[idx] + carry;
    da1e:	f1a3 0c04 	sub.w	ip, r3, #4
    da22:	f853 3c04 	ldr.w	r3, [r3, #-4]
    TFLITE_DCHECK_GE(dims[idx], current_val);
    da26:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
    int current_val = current[idx] + carry;
    da2a:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
    da2c:	4283      	cmp	r3, r0
    da2e:	dcb1      	bgt.n	d994 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8c>
    if (dims[idx] == current_val) {
    da30:	d104      	bne.n	da3c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x134>
      current[idx] = 0;
    da32:	4663      	mov	r3, ip
    da34:	f8cc a000 	str.w	sl, [ip]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
    da38:	3f01      	subs	r7, #1
    da3a:	e7ee      	b.n	da1a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x112>
      current[idx] = current_val;
    da3c:	f8cc 3000 	str.w	r3, [ip]
  return (carry == 0);
    da40:	e7c3      	b.n	d9ca <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc2>
  U num_elements_in_axis = 1;
    da42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da46:	ed9f 6a1e 	vldr	s12, [pc, #120]	; dac0 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1b8>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
    da4a:	2300      	movs	r3, #0
    da4c:	eef0 6a67 	vmov.f32	s13, s15
    da50:	42b3      	cmp	r3, r6
    da52:	da13      	bge.n	da7c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x174>
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da54:	eec6 5a27 	vdiv.f32	s11, s12, s15
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
    da58:	9a03      	ldr	r2, [sp, #12]
    da5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
    da5e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    da62:	ed92 7a00 	vldr	s14, [r2]
    da66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    da6a:	eeb4 7ae5 	vcmpe.f32	s14, s11
    da6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da72:	dc1a      	bgt.n	daaa <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a2>
    num_elements_in_axis *= current;
    da74:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
    da78:	3301      	adds	r3, #1
    da7a:	e7e9      	b.n	da50 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x148>
  if (num_elements_in_axis > 0) {
    da7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    da80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da84:	dc03      	bgt.n	da8e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x186>
  return true;
    da86:	2001      	movs	r0, #1
}
    da88:	b009      	add	sp, #36	; 0x24
    da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    da92:	9b06      	ldr	r3, [sp, #24]
    da94:	9a19      	ldr	r2, [sp, #100]	; 0x64
    da96:	4413      	add	r3, r2
    for (size_t idx = 0; idx < num_outputs; ++idx) {
    da98:	4599      	cmp	r9, r3
    da9a:	d0f4      	beq.n	da86 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x17e>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
    da9c:	ecf9 7a01 	vldmia	r9!, {s15}
    daa0:	ee67 7a87 	vmul.f32	s15, s15, s14
      output_data[idx] =
    daa4:	ece5 7a01 	vstmia	r5!, {s15}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
    daa8:	e7f6      	b.n	da98 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x190>
      return false;
    daaa:	2000      	movs	r0, #0
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
    daac:	e7ec      	b.n	da88 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
      out_axis[*out_num_axis] = current;
    daae:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      *out_num_axis += 1;
    dab2:	3601      	adds	r6, #1
  for (int64_t idx = 0; idx < num_axis; ++idx) {
    dab4:	f11a 0a01 	adds.w	sl, sl, #1
    dab8:	f14b 0b00 	adc.w	fp, fp, #0
    dabc:	e75a      	b.n	d974 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6c>
    dabe:	bf00      	nop
    dac0:	7f7fffff 	.word	0x7f7fffff

0000dac4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
  const TfLiteTensor* input = GetInput(context, node, 0);
    dac4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
    dac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
    daca:	f8d0 9008 	ldr.w	r9, [r0, #8]
    dace:	689f      	ldr	r7, [r3, #8]
    dad0:	685e      	ldr	r6, [r3, #4]
    dad2:	eb09 1787 	add.w	r7, r9, r7, lsl #6
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
    dad6:	4605      	mov	r5, r0
  for (int i = 0; i < dims->size; ++i) {
    dad8:	68bc      	ldr	r4, [r7, #8]
    dada:	f854 bb04 	ldr.w	fp, [r4], #4
    dade:	468c      	mov	ip, r1
  return &context->tensors[node->inputs->data[index]];
    dae0:	ea4f 1a86 	mov.w	sl, r6, lsl #6
    dae4:	b09b      	sub	sp, #108	; 0x6c
    dae6:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
    daea:	f04f 0e00 	mov.w	lr, #0
  int64_t count = 1;
    daee:	2001      	movs	r0, #1
    daf0:	2100      	movs	r1, #0
  for (int i = 0; i < dims->size; ++i) {
    daf2:	45f3      	cmp	fp, lr
    daf4:	dd0c      	ble.n	db10 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4c>
    count *= dims->data[i];
    daf6:	f854 8b04 	ldr.w	r8, [r4], #4
    dafa:	4642      	mov	r2, r8
    dafc:	17d3      	asrs	r3, r2, #31
    dafe:	4343      	muls	r3, r0
    db00:	fb08 3301 	mla	r3, r8, r1, r3
    db04:	fba0 0108 	umull	r0, r1, r0, r8
    db08:	4419      	add	r1, r3
  for (int i = 0; i < dims->size; ++i) {
    db0a:	f10e 0e01 	add.w	lr, lr, #1
    db0e:	e7f0      	b.n	daf2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2e>
  switch (input->type) {
    db10:	f819 800a 	ldrb.w	r8, [r9, sl]
    db14:	f1b8 0f01 	cmp.w	r8, #1
    db18:	d16f      	bne.n	dbfa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x136>
  return &context->tensors[node->outputs->data[index]];
    db1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
  TfLiteReducerParams* params =
    db1e:	f8dc b014 	ldr.w	fp, [ip, #20]
    db22:	685c      	ldr	r4, [r3, #4]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
    db24:	4601      	mov	r1, r0
  int num_axis = static_cast<int>(NumElements(axis));
    db26:	4682      	mov	sl, r0
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
    db28:	aa0b      	add	r2, sp, #44	; 0x2c
    db2a:	6878      	ldr	r0, [r7, #4]
    db2c:	f00e fc2a 	bl	1c384 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
    db30:	68b1      	ldr	r1, [r6, #8]
    db32:	680b      	ldr	r3, [r1, #0]
    db34:	2b04      	cmp	r3, #4
    db36:	d10b      	bne.n	db50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
    db38:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
    db3c:	2b02      	cmp	r3, #2
    db3e:	d107      	bne.n	db50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db40:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
    db44:	2b01      	cmp	r3, #1
    db46:	d10b      	bne.n	db60 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db48:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    db4c:	2b02      	cmp	r3, #2
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
    db4e:	d00d      	beq.n	db6c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_MSG(
    db50:	696b      	ldr	r3, [r5, #20]
    db52:	492d      	ldr	r1, [pc, #180]	; (dc08 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x144>)
    db54:	4628      	mov	r0, r5
    db56:	4798      	blx	r3
}
    db58:	4640      	mov	r0, r8
    db5a:	b01b      	add	sp, #108	; 0x6c
    db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
    db60:	2b02      	cmp	r3, #2
    db62:	d1f5      	bne.n	db50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
    db64:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    db68:	2b01      	cmp	r3, #1
    db6a:	e7f0      	b.n	db4e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a>
      if (params->keep_dims) {
    db6c:	f89b 3000 	ldrb.w	r3, [fp]
    db70:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    db74:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
    db78:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    db7c:	b1db      	cbz	r3, dbb6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf2>
        reference_ops::Mean(op_params, GetTensorShape(input),
    db7e:	4631      	mov	r1, r6
    db80:	4648      	mov	r0, r9
    db82:	f007 fee8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    db86:	6872      	ldr	r2, [r6, #4]
    db88:	9209      	str	r2, [sp, #36]	; 0x24
                            GetTensorData<float>(input), GetTensorShape(output),
    db8a:	4621      	mov	r1, r4
    db8c:	4658      	mov	r0, fp
    db8e:	f007 fee2 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    db92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    db94:	b104      	cbz	r4, db98 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd4>
    db96:	6864      	ldr	r4, [r4, #4]
        reference_ops::Mean(op_params, GetTensorShape(input),
    db98:	9400      	str	r4, [sp, #0]
    db9a:	465b      	mov	r3, fp
    db9c:	4649      	mov	r1, r9
    db9e:	a80b      	add	r0, sp, #44	; 0x2c
    dba0:	f7ff fe14 	bl	d7cc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                            GetTensorData<float>(input), GetTensorShape(output),
    dba4:	4658      	mov	r0, fp
    dba6:	f007 fe91 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Mean(op_params, GetTensorShape(input),
    dbaa:	4648      	mov	r0, r9
    dbac:	f007 fe8e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    dbb0:	f04f 0800 	mov.w	r8, #0
    dbb4:	e7d0      	b.n	db58 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    dbb6:	6870      	ldr	r0, [r6, #4]
        TF_LITE_ENSURE(
    dbb8:	3104      	adds	r1, #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    dbba:	b1e4      	cbz	r4, dbf6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x132>
    dbbc:	6863      	ldr	r3, [r4, #4]
    dbbe:	68a2      	ldr	r2, [r4, #8]
    dbc0:	f8cd b014 	str.w	fp, [sp, #20]
    dbc4:	2400      	movs	r4, #0
    dbc6:	e9cd 9306 	strd	r9, r3, [sp, #24]
    dbca:	e9cd a403 	strd	sl, r4, [sp, #12]
    dbce:	687c      	ldr	r4, [r7, #4]
    dbd0:	9402      	str	r4, [sp, #8]
    dbd2:	f852 4b04 	ldr.w	r4, [r2], #4
    dbd6:	e9cd 2400 	strd	r2, r4, [sp]
    dbda:	2204      	movs	r2, #4
    dbdc:	f7ff fe94 	bl	d908 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
    dbe0:	2800      	cmp	r0, #0
    dbe2:	d1e5      	bne.n	dbb0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xec>
    dbe4:	4b09      	ldr	r3, [pc, #36]	; (dc0c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x148>)
    dbe6:	9300      	str	r3, [sp, #0]
    dbe8:	696c      	ldr	r4, [r5, #20]
    dbea:	4a09      	ldr	r2, [pc, #36]	; (dc10 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14c>)
    dbec:	4909      	ldr	r1, [pc, #36]	; (dc14 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x150>)
    dbee:	2366      	movs	r3, #102	; 0x66
    dbf0:	4628      	mov	r0, r5
    dbf2:	47a0      	blx	r4
    dbf4:	e7b0      	b.n	db58 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
    dbf6:	4623      	mov	r3, r4
    dbf8:	e7e1      	b.n	dbbe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_MSG(context, false,
    dbfa:	696b      	ldr	r3, [r5, #20]
    dbfc:	4906      	ldr	r1, [pc, #24]	; (dc18 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x154>)
    dbfe:	4628      	mov	r0, r5
    dc00:	4798      	blx	r3
    dc02:	f04f 0801 	mov.w	r8, #1
    dc06:	e7a7      	b.n	db58 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
    dc08:	000288ec 	.word	0x000288ec
    dc0c:	0002895f 	.word	0x0002895f
    dc10:	000288a6 	.word	0x000288a6
    dc14:	000272d2 	.word	0x000272d2
    dc18:	00028a6c 	.word	0x00028a6c

0000dc1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    dc20:	f8d1 e000 	ldr.w	lr, [r1]
    dc24:	6885      	ldr	r5, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    dc26:	f8de 3004 	ldr.w	r3, [lr, #4]
  return &context->tensors[node->outputs->data[index]];
    dc2a:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
    dc2c:	ea4f 1c83 	mov.w	ip, r3, lsl #6
    dc30:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    dc34:	6856      	ldr	r6, [r2, #4]
  for (int i = 0; i < dims->size; ++i) {
    dc36:	689f      	ldr	r7, [r3, #8]
    dc38:	f857 bb04 	ldr.w	fp, [r7], #4
  return &context->tensors[node->outputs->data[index]];
    dc3c:	ea4f 1886 	mov.w	r8, r6, lsl #6
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    dc40:	b085      	sub	sp, #20
    dc42:	4604      	mov	r4, r0
    dc44:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
    dc48:	f04f 0900 	mov.w	r9, #0
  int64_t count = 1;
    dc4c:	2201      	movs	r2, #1
    dc4e:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    dc50:	45cb      	cmp	fp, r9
    dc52:	dd0c      	ble.n	dc6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    count *= dims->data[i];
    dc54:	f857 ab04 	ldr.w	sl, [r7], #4
    dc58:	4650      	mov	r0, sl
    dc5a:	17c1      	asrs	r1, r0, #31
    dc5c:	4351      	muls	r1, r2
    dc5e:	fb0a 1103 	mla	r1, sl, r3, r1
    dc62:	fba2 230a 	umull	r2, r3, r2, sl
    dc66:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    dc68:	f109 0901 	add.w	r9, r9, #1
    dc6c:	e7f0      	b.n	dc50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
  TfLiteIntArray* output_shape = output->dims;

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc6e:	f8de 3000 	ldr.w	r3, [lr]
  TfLiteIntArray* output_shape = output->dims;
    dc72:	68b1      	ldr	r1, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc74:	2b01      	cmp	r3, #1
    dc76:	d105      	bne.n	dc84 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    dc78:	680b      	ldr	r3, [r1, #0]
    dc7a:	2b01      	cmp	r3, #1
    dc7c:	d102      	bne.n	dc84 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    dc7e:	684b      	ldr	r3, [r1, #4]
    dc80:	b903      	cbnz	r3, dc84 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
    dc82:	600b      	str	r3, [r1, #0]
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
    dc84:	460f      	mov	r7, r1
    dc86:	2600      	movs	r6, #0
    dc88:	f857 9b04 	ldr.w	r9, [r7], #4
  int stretch_dim = -1;
    dc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int num_output_elements = 1;
    dc90:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
    dc92:	45b1      	cmp	r9, r6
    dc94:	dd1a      	ble.n	dccc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    int value = output_shape->data[i];
    dc96:	f857 eb04 	ldr.w	lr, [r7], #4
    if (value == -1) {
    dc9a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    dc9e:	d10f      	bne.n	dcc0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    dca0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    dca4:	d010      	beq.n	dcc8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xac>
    dca6:	4b23      	ldr	r3, [pc, #140]	; (dd34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
    dca8:	9301      	str	r3, [sp, #4]
    dcaa:	e9cd 0e02 	strd	r0, lr, [sp, #8]
    dcae:	4b22      	ldr	r3, [pc, #136]	; (dd38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
    dcb0:	6965      	ldr	r5, [r4, #20]
    dcb2:	9300      	str	r3, [sp, #0]
    dcb4:	2335      	movs	r3, #53	; 0x35
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dcb6:	4a21      	ldr	r2, [pc, #132]	; (dd3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
    dcb8:	4921      	ldr	r1, [pc, #132]	; (dd40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
    dcba:	4620      	mov	r0, r4
    dcbc:	47a8      	blx	r5
    dcbe:	e028      	b.n	dd12 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
      num_output_elements *= value;
    dcc0:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
    dcc4:	3601      	adds	r6, #1
    dcc6:	e7e4      	b.n	dc92 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
    dcc8:	4630      	mov	r0, r6
    dcca:	e7fb      	b.n	dcc4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (stretch_dim != -1) {
    dccc:	1c46      	adds	r6, r0, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    dcce:	bf1c      	itt	ne
    dcd0:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
    dcd4:	fb92 f6f3 	sdivne	r6, r2, r3
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dcd8:	f815 000c 	ldrb.w	r0, [r5, ip]
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    dcdc:	bf18      	it	ne
    dcde:	604e      	strne	r6, [r1, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dce0:	f815 1008 	ldrb.w	r1, [r5, r8]
    num_output_elements *= output_shape->data[stretch_dim];
    dce4:	bf18      	it	ne
    dce6:	4373      	mulne	r3, r6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    dce8:	4281      	cmp	r1, r0
    dcea:	d016      	beq.n	dd1a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    dcec:	6967      	ldr	r7, [r4, #20]
    dcee:	f7f2 fde0 	bl	8b2 <TfLiteTypeGetName>
    dcf2:	4606      	mov	r6, r0
    dcf4:	f815 0008 	ldrb.w	r0, [r5, r8]
    dcf8:	f7f2 fddb 	bl	8b2 <TfLiteTypeGetName>
    dcfc:	4b11      	ldr	r3, [pc, #68]	; (dd44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
    dcfe:	9301      	str	r3, [sp, #4]
    dd00:	4b11      	ldr	r3, [pc, #68]	; (dd48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    dd02:	9300      	str	r3, [sp, #0]
    dd04:	e9cd 6002 	strd	r6, r0, [sp, #8]
    dd08:	4a0c      	ldr	r2, [pc, #48]	; (dd3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
    dd0a:	4910      	ldr	r1, [pc, #64]	; (dd4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    dd0c:	2340      	movs	r3, #64	; 0x40
    dd0e:	4620      	mov	r0, r4
    dd10:	47b8      	blx	r7
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dd12:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    dd14:	b005      	add	sp, #20
    dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    dd1a:	4293      	cmp	r3, r2
    dd1c:	d008      	beq.n	dd30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>
    dd1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    dd22:	4b0b      	ldr	r3, [pc, #44]	; (dd50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
    dd24:	9301      	str	r3, [sp, #4]
    dd26:	4b0b      	ldr	r3, [pc, #44]	; (dd54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
    dd28:	9300      	str	r3, [sp, #0]
    dd2a:	6965      	ldr	r5, [r4, #20]
    dd2c:	2341      	movs	r3, #65	; 0x41
    dd2e:	e7c2      	b.n	dcb6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
  return kTfLiteOk;
    dd30:	2000      	movs	r0, #0
    dd32:	e7ef      	b.n	dd14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
    dd34:	00028aee 	.word	0x00028aee
    dd38:	00028af1 	.word	0x00028af1
    dd3c:	00028ac5 	.word	0x00028ac5
    dd40:	00027b73 	.word	0x00027b73
    dd44:	00028380 	.word	0x00028380
    dd48:	00028398 	.word	0x00028398
    dd4c:	00027bae 	.word	0x00027bae
    dd50:	00028afd 	.word	0x00028afd
    dd54:	00028b11 	.word	0x00028b11

0000dd58 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    dd58:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dd5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    dd5c:	681b      	ldr	r3, [r3, #0]
    dd5e:	3b01      	subs	r3, #1
    dd60:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dd62:	b085      	sub	sp, #20
    dd64:	4605      	mov	r5, r0
    dd66:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    dd68:	d909      	bls.n	dd7e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    dd6a:	4b19      	ldr	r3, [pc, #100]	; (ddd0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    dd6c:	9300      	str	r3, [sp, #0]
    dd6e:	6944      	ldr	r4, [r0, #20]
    dd70:	4a18      	ldr	r2, [pc, #96]	; (ddd4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    dd72:	4919      	ldr	r1, [pc, #100]	; (ddd8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    dd74:	2346      	movs	r3, #70	; 0x46
    dd76:	47a0      	blx	r4
    dd78:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    dd7a:	b005      	add	sp, #20
    dd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    dd7e:	684b      	ldr	r3, [r1, #4]
    dd80:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    dd82:	2e01      	cmp	r6, #1
    dd84:	d00c      	beq.n	dda0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    dd86:	2401      	movs	r4, #1
    dd88:	e9cd 6402 	strd	r6, r4, [sp, #8]
    dd8c:	4b13      	ldr	r3, [pc, #76]	; (dddc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    dd8e:	9301      	str	r3, [sp, #4]
    dd90:	4b13      	ldr	r3, [pc, #76]	; (dde0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    dd92:	9300      	str	r3, [sp, #0]
    dd94:	6945      	ldr	r5, [r0, #20]
    dd96:	4a0f      	ldr	r2, [pc, #60]	; (ddd4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    dd98:	4912      	ldr	r1, [pc, #72]	; (dde4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    dd9a:	2347      	movs	r3, #71	; 0x47
    dd9c:	47a8      	blx	r5
    dd9e:	e7eb      	b.n	dd78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    dda0:	f7ff ff3c 	bl	dc1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    dda4:	2800      	cmp	r0, #0
    dda6:	d0e8      	beq.n	dd7a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    dda8:	4621      	mov	r1, r4
    ddaa:	4628      	mov	r0, r5
    ddac:	696f      	ldr	r7, [r5, #20]
    ddae:	f7ff ff35 	bl	dc1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    ddb2:	2300      	movs	r3, #0
    ddb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
    ddb8:	4b0b      	ldr	r3, [pc, #44]	; (dde8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    ddba:	9301      	str	r3, [sp, #4]
    ddbc:	4b0b      	ldr	r3, [pc, #44]	; (ddec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    ddbe:	9300      	str	r3, [sp, #0]
    ddc0:	4628      	mov	r0, r5
    ddc2:	4a04      	ldr	r2, [pc, #16]	; (ddd4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    ddc4:	4907      	ldr	r1, [pc, #28]	; (dde4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    ddc6:	2348      	movs	r3, #72	; 0x48
    ddc8:	47b8      	blx	r7
    ddca:	4630      	mov	r0, r6
    ddcc:	e7d5      	b.n	dd7a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    ddce:	bf00      	nop
    ddd0:	00028b24 	.word	0x00028b24
    ddd4:	00028ac5 	.word	0x00028ac5
    ddd8:	000272d2 	.word	0x000272d2
    dddc:	0002880d 	.word	0x0002880d
    dde0:	00027b9d 	.word	0x00027b9d
    dde4:	00027b73 	.word	0x00027b73
    dde8:	00028b51 	.word	0x00028b51
    ddec:	00028b5b 	.word	0x00028b5b

0000ddf0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ddf0:	4800      	ldr	r0, [pc, #0]	; (ddf4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x4>)
    ddf2:	4770      	bx	lr
    ddf4:	200005a8 	.word	0x200005a8

0000ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>:
namespace reference_ops {

inline int32 GetNearestNeighbor(const int input_value, const int32 input_size,
                                const int32 output_size,
                                const bool align_corners,
                                const bool half_pixel_centers) {
    ddf8:	b538      	push	{r3, r4, r5, lr}
    ddfa:	ee07 0a90 	vmov	s15, r0
    ddfe:	f89d 4010 	ldrb.w	r4, [sp, #16]
    de02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    de06:	1e4d      	subs	r5, r1, #1
  const float scale =
      (align_corners && output_size > 1)
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    de08:	b38b      	cbz	r3, de6e <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x76>
      (align_corners && output_size > 1)
    de0a:	2a01      	cmp	r2, #1
    de0c:	dd2f      	ble.n	de6e <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x76>
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    de0e:	3a01      	subs	r2, #1
    de10:	ee07 2a90 	vmov	s15, r2
    de14:	ee06 5a90 	vmov	s13, r5
    de18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    de1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    de20:	ee86 6aa7 	vdiv.f32	s12, s13, s15
          : input_size / static_cast<float>(output_size);
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de24:	bbb4      	cbnz	r4, de94 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x9c>
    de26:	eddf 7a1f 	vldr	s15, [pc, #124]	; dea4 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xac>
  int32 output_value = std::min(
    de2a:	ee37 0a27 	vadd.f32	s0, s14, s15
    de2e:	ee20 0a06 	vmul.f32	s0, s0, s12
      align_corners
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
    de32:	b393      	cbz	r3, de9a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa2>
    de34:	ee37 7a27 	vadd.f32	s14, s14, s15
    de38:	ee67 7a06 	vmul.f32	s15, s14, s12
    de3c:	ee17 0a90 	vmov	r0, s15
    de40:	f7f2 ff12 	bl	c68 <__aeabi_f2d>
    de44:	ec41 0b10 	vmov	d0, r0, r1
    de48:	f004 f89c 	bl	11f84 <round>
    de4c:	ec51 0b10 	vmov	r0, r1, d0
    de50:	f7f3 fa24 	bl	129c <__aeabi_d2f>
    de54:	ee07 0a90 	vmov	s15, r0
    de58:	eebd 0ae7 	vcvt.s32.f32	s0, s15
    de5c:	ee10 0a10 	vmov	r0, s0
    de60:	42a8      	cmp	r0, r5
    de62:	bfa8      	it	ge
    de64:	4628      	movge	r0, r5
          : static_cast<int32>(std::floor((input_value + offset) * scale)),
      input_size - 1);
  if (half_pixel_centers) {
    de66:	b10c      	cbz	r4, de6c <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x74>
    output_value = std::max(static_cast<int32>(0), output_value);
    de68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return output_value;
}
    de6c:	bd38      	pop	{r3, r4, r5, pc}
          : input_size / static_cast<float>(output_size);
    de6e:	ee07 1a90 	vmov	s15, r1
    de72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    de76:	ee07 2a90 	vmov	s15, r2
    de7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de7e:	2c00      	cmp	r4, #0
          ? (input_size - 1) / static_cast<float>(output_size - 1)
    de80:	ee86 6aa7 	vdiv.f32	s12, s13, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
    de84:	eddf 6a07 	vldr	s13, [pc, #28]	; dea4 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xac>
    de88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    de8c:	bf08      	it	eq
    de8e:	eef0 7a66 	vmoveq.f32	s15, s13
    de92:	e7ca      	b.n	de2a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x32>
    de94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    de98:	e7cc      	b.n	de34 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x3c>
  { return __builtin_floorf(__x); }
    de9a:	f004 f94f 	bl	1213c <floorf>
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
    de9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    dea2:	e7db      	b.n	de5c <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x64>
    dea4:	00000000 	.word	0x00000000

0000dea8 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    dea8:	4800      	ldr	r0, [pc, #0]	; (deac <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv+0x4>)
    deaa:	4770      	bx	lr
    deac:	200005c8 	.word	0x200005c8

0000deb0 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
    deb0:	684a      	ldr	r2, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    deb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    deb4:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    deb6:	6887      	ldr	r7, [r0, #8]
    deb8:	680d      	ldr	r5, [r1, #0]
  op_params.align_corners = params->align_corners;
    deba:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    debc:	686c      	ldr	r4, [r5, #4]
    debe:	7809      	ldrb	r1, [r1, #0]
    dec0:	68ad      	ldr	r5, [r5, #8]
  return &context->tensors[node->outputs->data[index]];
    dec2:	01b2      	lsls	r2, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    dec4:	b099      	sub	sp, #100	; 0x64
  if (output->type == kTfLiteFloat32) {
    dec6:	5cba      	ldrb	r2, [r7, r2]
  op_params.align_corners = params->align_corners;
    dec8:	f88d 1014 	strb.w	r1, [sp, #20]
  if (output->type == kTfLiteFloat32) {
    decc:	2a01      	cmp	r2, #1
  op_params.half_pixel_centers = false;
    dece:	f04f 0100 	mov.w	r1, #0
  return &context->tensors[node->inputs->data[index]];
    ded2:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    ded6:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
    deda:	eb07 1686 	add.w	r6, r7, r6, lsl #6
    dede:	f88d 1015 	strb.w	r1, [sp, #21]
  if (output->type == kTfLiteFloat32) {
    dee2:	d126      	bne.n	df32 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x82>
        op_params, GetTensorShape(input), GetTensorData<int32>(input),
    dee4:	4621      	mov	r1, r4
    dee6:	a806      	add	r0, sp, #24
    dee8:	f007 fd35 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    deec:	b104      	cbz	r4, def0 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    deee:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    def0:	4629      	mov	r1, r5
    def2:	a80c      	add	r0, sp, #48	; 0x30
    def4:	f007 fd2f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    def8:	b105      	cbz	r5, defc <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    defa:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int32>(output));
    defc:	af12      	add	r7, sp, #72	; 0x48
    defe:	4631      	mov	r1, r6
    df00:	4638      	mov	r0, r7
    df02:	f007 fd28 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    df06:	6873      	ldr	r3, [r6, #4]
    df08:	9500      	str	r5, [sp, #0]
    df0a:	e9cd 7301 	strd	r7, r3, [sp, #4]
    df0e:	4622      	mov	r2, r4
    df10:	ab0c      	add	r3, sp, #48	; 0x30
    df12:	a906      	add	r1, sp, #24
    df14:	a805      	add	r0, sp, #20
    df16:	f00e fa68 	bl	1c3ea <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    df1a:	4638      	mov	r0, r7
    df1c:	f007 fcd6 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(size), GetTensorData<int32>(size),
    df20:	a80c      	add	r0, sp, #48	; 0x30
    df22:	f007 fcd3 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    df26:	a806      	add	r0, sp, #24
    df28:	f007 fcd0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    df2c:	2000      	movs	r0, #0
}
    df2e:	b019      	add	sp, #100	; 0x64
    df30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteUInt8) {
    df32:	2a03      	cmp	r2, #3
    df34:	d11b      	bne.n	df6e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
    df36:	4621      	mov	r1, r4
    df38:	a806      	add	r0, sp, #24
    df3a:	f007 fd0c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df3e:	b104      	cbz	r4, df42 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    df40:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    df42:	4629      	mov	r1, r5
    df44:	a80c      	add	r0, sp, #48	; 0x30
    df46:	f007 fd06 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df4a:	b105      	cbz	r5, df4e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    df4c:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
    df4e:	af12      	add	r7, sp, #72	; 0x48
    df50:	4631      	mov	r1, r6
    df52:	4638      	mov	r0, r7
    df54:	f007 fcff 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    df58:	6873      	ldr	r3, [r6, #4]
    df5a:	9500      	str	r5, [sp, #0]
    df5c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    df60:	4622      	mov	r2, r4
    df62:	ab0c      	add	r3, sp, #48	; 0x30
    df64:	a906      	add	r1, sp, #24
    df66:	a805      	add	r0, sp, #20
    df68:	f00e fad2 	bl	1c510 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
    df6c:	e7d5      	b.n	df1a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  } else if (output->type == kTfLiteInt8) {
    df6e:	2a09      	cmp	r2, #9
    df70:	d11b      	bne.n	dfaa <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xfa>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
    df72:	4621      	mov	r1, r4
    df74:	a806      	add	r0, sp, #24
    df76:	f007 fcee 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df7a:	b104      	cbz	r4, df7e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xce>
    df7c:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
    df7e:	4629      	mov	r1, r5
    df80:	a80c      	add	r0, sp, #48	; 0x30
    df82:	f007 fce8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    df86:	b105      	cbz	r5, df8a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    df88:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
    df8a:	af12      	add	r7, sp, #72	; 0x48
    df8c:	4631      	mov	r1, r6
    df8e:	4638      	mov	r0, r7
    df90:	f007 fce1 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
    df94:	6873      	ldr	r3, [r6, #4]
    df96:	9500      	str	r5, [sp, #0]
    df98:	e9cd 7301 	strd	r7, r3, [sp, #4]
    df9c:	4622      	mov	r2, r4
    df9e:	ab0c      	add	r3, sp, #48	; 0x30
    dfa0:	a906      	add	r1, sp, #24
    dfa2:	a805      	add	r0, sp, #20
    dfa4:	f00e fb44 	bl	1c630 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
    dfa8:	e7b7      	b.n	df1a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_KERNEL_LOG(context,
    dfaa:	6943      	ldr	r3, [r0, #20]
    dfac:	4901      	ldr	r1, [pc, #4]	; (dfb4 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x104>)
    dfae:	4798      	blx	r3
    return kTfLiteError;
    dfb0:	2001      	movs	r0, #1
    dfb2:	e7bc      	b.n	df2e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    dfb4:	00028b78 	.word	0x00028b78

0000dfb8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dfb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    dfbc:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    dfbe:	681e      	ldr	r6, [r3, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    dfc0:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    dfc2:	b085      	sub	sp, #20
    dfc4:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    dfc6:	d00c      	beq.n	dfe2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    dfc8:	2401      	movs	r4, #1
    dfca:	4b4a      	ldr	r3, [pc, #296]	; (e0f4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    dfcc:	9301      	str	r3, [sp, #4]
    dfce:	e9cd 6402 	strd	r6, r4, [sp, #8]
    dfd2:	4b49      	ldr	r3, [pc, #292]	; (e0f8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	6945      	ldr	r5, [r0, #20]
    dfd8:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    dfda:	4a48      	ldr	r2, [pc, #288]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    dfdc:	4948      	ldr	r1, [pc, #288]	; (e100 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    dfde:	47a8      	blx	r5
    dfe0:	e00f      	b.n	e002 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    dfe2:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    dfe4:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    dfe6:	2c01      	cmp	r4, #1
    dfe8:	d00f      	beq.n	e00a <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
    dfea:	e9cd 4602 	strd	r4, r6, [sp, #8]
    dfee:	4b41      	ldr	r3, [pc, #260]	; (e0f4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    dff0:	9301      	str	r3, [sp, #4]
    dff2:	4b44      	ldr	r3, [pc, #272]	; (e104 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
    dff4:	9300      	str	r3, [sp, #0]
    dff6:	6944      	ldr	r4, [r0, #20]
    dff8:	4a40      	ldr	r2, [pc, #256]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    dffa:	4941      	ldr	r1, [pc, #260]	; (e100 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    dffc:	2322      	movs	r3, #34	; 0x22
    dffe:	47a0      	blx	r4
    e000:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
    e002:	4620      	mov	r0, r4
    e004:	b005      	add	sp, #20
    e006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
    e00a:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    e00c:	6886      	ldr	r6, [r0, #8]
    e00e:	ea4f 1883 	mov.w	r8, r3, lsl #6
    e012:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    e016:	f816 7008 	ldrb.w	r7, [r6, r8]
    e01a:	2f01      	cmp	r7, #1
    e01c:	d014      	beq.n	e048 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    e01e:	f8d0 8014 	ldr.w	r8, [r0, #20]
    e022:	4638      	mov	r0, r7
    e024:	f7f2 fc45 	bl	8b2 <TfLiteTypeGetName>
    e028:	4606      	mov	r6, r0
    e02a:	4620      	mov	r0, r4
    e02c:	f7f2 fc41 	bl	8b2 <TfLiteTypeGetName>
    e030:	4b35      	ldr	r3, [pc, #212]	; (e108 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
    e032:	9301      	str	r3, [sp, #4]
    e034:	4b35      	ldr	r3, [pc, #212]	; (e10c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    e036:	9300      	str	r3, [sp, #0]
    e038:	e9cd 6002 	strd	r6, r0, [sp, #8]
    e03c:	4a2f      	ldr	r2, [pc, #188]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e03e:	4934      	ldr	r1, [pc, #208]	; (e110 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    e040:	2323      	movs	r3, #35	; 0x23
    e042:	4628      	mov	r0, r5
    e044:	47c0      	blx	r8
    e046:	e7dc      	b.n	e002 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
    e048:	6852      	ldr	r2, [r2, #4]
    e04a:	0191      	lsls	r1, r2, #6
    e04c:	eb06 1282 	add.w	r2, r6, r2, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
    e050:	5c74      	ldrb	r4, [r6, r1]
    e052:	2c01      	cmp	r4, #1
    e054:	d016      	beq.n	e084 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    e056:	f8d0 9014 	ldr.w	r9, [r0, #20]
    e05a:	4620      	mov	r0, r4
    e05c:	f7f2 fc29 	bl	8b2 <TfLiteTypeGetName>
    e060:	4604      	mov	r4, r0
    e062:	f816 0008 	ldrb.w	r0, [r6, r8]
    e066:	f7f2 fc24 	bl	8b2 <TfLiteTypeGetName>
    e06a:	4b28      	ldr	r3, [pc, #160]	; (e10c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    e06c:	9301      	str	r3, [sp, #4]
    e06e:	4b29      	ldr	r3, [pc, #164]	; (e114 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    e070:	9300      	str	r3, [sp, #0]
    e072:	e9cd 4002 	strd	r4, r0, [sp, #8]
    e076:	4a21      	ldr	r2, [pc, #132]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e078:	4925      	ldr	r1, [pc, #148]	; (e110 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    e07a:	2324      	movs	r3, #36	; 0x24
    e07c:	4628      	mov	r0, r5
    e07e:	47c8      	blx	r9
    e080:	463c      	mov	r4, r7
    e082:	e7be      	b.n	e002 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
    e084:	6991      	ldr	r1, [r2, #24]
    e086:	699e      	ldr	r6, [r3, #24]
    e088:	42b1      	cmp	r1, r6
    e08a:	d008      	beq.n	e09e <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    e08c:	4b22      	ldr	r3, [pc, #136]	; (e118 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    e08e:	9301      	str	r3, [sp, #4]
    e090:	e9cd 1602 	strd	r1, r6, [sp, #8]
    e094:	4b21      	ldr	r3, [pc, #132]	; (e11c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    e096:	9300      	str	r3, [sp, #0]
    e098:	6945      	ldr	r5, [r0, #20]
    e09a:	2325      	movs	r3, #37	; 0x25
    e09c:	e79d      	b.n	dfda <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
    e09e:	6897      	ldr	r7, [r2, #8]
    e0a0:	689a      	ldr	r2, [r3, #8]
    e0a2:	6839      	ldr	r1, [r7, #0]
    e0a4:	6813      	ldr	r3, [r2, #0]
    e0a6:	4299      	cmp	r1, r3
    e0a8:	d008      	beq.n	e0bc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
    e0aa:	e9cd 1302 	strd	r1, r3, [sp, #8]
    e0ae:	4b1c      	ldr	r3, [pc, #112]	; (e120 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    e0b0:	9301      	str	r3, [sp, #4]
    e0b2:	4b1c      	ldr	r3, [pc, #112]	; (e124 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    e0b4:	9300      	str	r3, [sp, #0]
    e0b6:	6945      	ldr	r5, [r0, #20]
    e0b8:	2326      	movs	r3, #38	; 0x26
    e0ba:	e78e      	b.n	dfda <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    e0bc:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    e0be:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
    e0c0:	1e58      	subs	r0, r3, #1
    e0c2:	4281      	cmp	r1, r0
    e0c4:	dd13      	ble.n	e0ee <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
    e0c6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    e0ca:	3301      	adds	r3, #1
    e0cc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    e0d0:	42b0      	cmp	r0, r6
    e0d2:	d0f5      	beq.n	e0c0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
    e0d4:	e9cd 0602 	strd	r0, r6, [sp, #8]
    e0d8:	4b13      	ldr	r3, [pc, #76]	; (e128 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    e0da:	9301      	str	r3, [sp, #4]
    e0dc:	4b13      	ldr	r3, [pc, #76]	; (e12c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    e0de:	9300      	str	r3, [sp, #0]
    e0e0:	696e      	ldr	r6, [r5, #20]
    e0e2:	4a06      	ldr	r2, [pc, #24]	; (e0fc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    e0e4:	4906      	ldr	r1, [pc, #24]	; (e100 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
    e0e6:	2328      	movs	r3, #40	; 0x28
    e0e8:	4628      	mov	r0, r5
    e0ea:	47b0      	blx	r6
    e0ec:	e789      	b.n	e002 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
    e0ee:	2400      	movs	r4, #0
    e0f0:	e787      	b.n	e002 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    e0f2:	bf00      	nop
    e0f4:	0002880d 	.word	0x0002880d
    e0f8:	00027b8d 	.word	0x00027b8d
    e0fc:	00028baa 	.word	0x00028baa
    e100:	00027b73 	.word	0x00027b73
    e104:	00027b9d 	.word	0x00027b9d
    e108:	00027bc8 	.word	0x00027bc8
    e10c:	00028398 	.word	0x00028398
    e110:	00027bae 	.word	0x00027bae
    e114:	00028380 	.word	0x00028380
    e118:	00027bd7 	.word	0x00027bd7
    e11c:	00027be4 	.word	0x00027be4
    e120:	00027bf2 	.word	0x00027bf2
    e124:	00027c04 	.word	0x00027c04
    e128:	00027c17 	.word	0x00027c17
    e12c:	00027c2c 	.word	0x00027c2c

0000e130 <_ZN6tflite3ops5micro14Register_ROUNDEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e130:	4800      	ldr	r0, [pc, #0]	; (e134 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x4>)
    e132:	4770      	bx	lr
    e134:	200005e8 	.word	0x200005e8

0000e138 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    e138:	b530      	push	{r4, r5, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    e13a:	680a      	ldr	r2, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    e13c:	6815      	ldr	r5, [r2, #0]
    e13e:	2d01      	cmp	r5, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    e140:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    e142:	d00d      	beq.n	e160 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
    e144:	2401      	movs	r4, #1
    e146:	4a18      	ldr	r2, [pc, #96]	; (e1a8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e148:	9201      	str	r2, [sp, #4]
    e14a:	e9cd 5402 	strd	r5, r4, [sp, #8]
    e14e:	4a17      	ldr	r2, [pc, #92]	; (e1ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    e150:	9200      	str	r2, [sp, #0]
    e152:	6945      	ldr	r5, [r0, #20]
    e154:	4a16      	ldr	r2, [pc, #88]	; (e1b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e156:	4917      	ldr	r1, [pc, #92]	; (e1b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e158:	234c      	movs	r3, #76	; 0x4c
    e15a:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e15c:	4620      	mov	r0, r4
    e15e:	e00f      	b.n	e180 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    e160:	6849      	ldr	r1, [r1, #4]
    e162:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    e164:	2c01      	cmp	r4, #1
    e166:	d00d      	beq.n	e184 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    e168:	e9cd 4502 	strd	r4, r5, [sp, #8]
    e16c:	4a0e      	ldr	r2, [pc, #56]	; (e1a8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e16e:	9201      	str	r2, [sp, #4]
    e170:	4a11      	ldr	r2, [pc, #68]	; (e1b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    e172:	9200      	str	r2, [sp, #0]
    e174:	6944      	ldr	r4, [r0, #20]
    e176:	4a0e      	ldr	r2, [pc, #56]	; (e1b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e178:	490e      	ldr	r1, [pc, #56]	; (e1b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e17a:	234d      	movs	r3, #77	; 0x4d
    e17c:	47a0      	blx	r4
    e17e:	4628      	mov	r0, r5

  return kTfLiteOk;
}
    e180:	b005      	add	sp, #20
    e182:	bd30      	pop	{r4, r5, pc}
  return &context->tensors[node->inputs->data[index]];
    e184:	6851      	ldr	r1, [r2, #4]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e186:	6882      	ldr	r2, [r0, #8]
    e188:	eb02 1281 	add.w	r2, r2, r1, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    e18c:	6892      	ldr	r2, [r2, #8]
    e18e:	6812      	ldr	r2, [r2, #0]
    e190:	2a00      	cmp	r2, #0
    e192:	dc07      	bgt.n	e1a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
    e194:	4a09      	ldr	r2, [pc, #36]	; (e1bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    e196:	9200      	str	r2, [sp, #0]
    e198:	6945      	ldr	r5, [r0, #20]
    e19a:	4a05      	ldr	r2, [pc, #20]	; (e1b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e19c:	4908      	ldr	r1, [pc, #32]	; (e1c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    e19e:	234f      	movs	r3, #79	; 0x4f
    e1a0:	47a8      	blx	r5
    e1a2:	e7db      	b.n	e15c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
    e1a4:	2000      	movs	r0, #0
    e1a6:	e7eb      	b.n	e180 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
    e1a8:	0002880d 	.word	0x0002880d
    e1ac:	00027b8d 	.word	0x00027b8d
    e1b0:	00028bd1 	.word	0x00028bd1
    e1b4:	00027b73 	.word	0x00027b73
    e1b8:	00027b9d 	.word	0x00027b9d
    e1bc:	00028bfa 	.word	0x00028bfa
    e1c0:	000272d2 	.word	0x000272d2

0000e1c4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1c8:	ed2d 8b06 	vpush	{d8-d10}
    e1cc:	b087      	sub	sp, #28
    e1ce:	460c      	mov	r4, r1
    e1d0:	9200      	str	r2, [sp, #0]
    e1d2:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e1d4:	680b      	ldr	r3, [r1, #0]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1d6:	9202      	str	r2, [sp, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e1d8:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1da:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
    e1dc:	4606      	mov	r6, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1de:	4620      	mov	r0, r4
    e1e0:	9301      	str	r3, [sp, #4]
    e1e2:	f00b fe20 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1e6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e1ea:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1ec:	4619      	mov	r1, r3
    e1ee:	4620      	mov	r0, r4
    e1f0:	f00a fa24 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    e1f4:	2500      	movs	r5, #0

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    e1f6:	eddf 9a34 	vldr	s19, [pc, #208]	; e2c8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e1fa:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    e1fc:	46aa      	mov	sl, r5
	return __b;
      return __a;
    e1fe:	f10d 0b14 	add.w	fp, sp, #20
    e202:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    e206:	45ba      	cmp	sl, r7
    e208:	da58      	bge.n	e2bc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf8>
    float max = std::numeric_limits<float>::lowest();
    e20a:	9b00      	ldr	r3, [sp, #0]
    e20c:	edcd 9a05 	vstr	s19, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    e210:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    e214:	ea4f 0885 	mov.w	r8, r5, lsl #2
    float max = std::numeric_limits<float>::lowest();
    e218:	4649      	mov	r1, r9
    for (int c = 0; c < depth; ++c) {
    e21a:	2200      	movs	r2, #0
    e21c:	42a2      	cmp	r2, r4
    e21e:	ed9d 8a05 	vldr	s16, [sp, #20]
    e222:	da0d      	bge.n	e240 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7c>
      max = std::max(max, input_data[i * depth + c]);
    e224:	460b      	mov	r3, r1
      if (__a < __b)
    e226:	edd3 7a00 	vldr	s15, [r3]
    e22a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    e22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
    e232:	bf58      	it	pl
    e234:	465b      	movpl	r3, fp
    e236:	3104      	adds	r1, #4
    e238:	681b      	ldr	r3, [r3, #0]
    e23a:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    e23c:	3201      	adds	r2, #1
    e23e:	e7ed      	b.n	e21c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x58>
    }

    // Compute sum.
    float sum = 0.f;
    e240:	eddf 8a22 	vldr	s17, [pc, #136]	; e2cc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
    e244:	464a      	mov	r2, r9
    for (int c = 0; c < depth; ++c) {
    e246:	2300      	movs	r3, #0
    e248:	42a3      	cmp	r3, r4
    e24a:	db1c      	blt.n	e286 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc2>
    e24c:	ee8a 9a28 	vdiv.f32	s18, s20, s17
    e250:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e252:	4498      	add	r8, r3
      sum += std::exp((input_data[i * depth + c] - max) *
                      static_cast<float>(params.beta));
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    e254:	2300      	movs	r3, #0
    e256:	42a3      	cmp	r3, r4
    e258:	9301      	str	r3, [sp, #4]
    e25a:	da2b      	bge.n	e2b4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
                                            static_cast<float>(params.beta)) /
    e25c:	e9d6 0100 	ldrd	r0, r1, [r6]
    e260:	f7f3 f81c 	bl	129c <__aeabi_d2f>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    e264:	ecf9 8a01 	vldmia	r9!, {s17}
  { return __builtin_expf(__x); }
    e268:	ee07 0a90 	vmov	s15, r0
    e26c:	ee38 0ac8 	vsub.f32	s0, s17, s16
    e270:	ee27 0a80 	vmul.f32	s0, s15, s0
    e274:	f004 f874 	bl	12360 <expf>
    for (int c = 0; c < depth; ++c) {
    e278:	9b01      	ldr	r3, [sp, #4]
                                            static_cast<float>(params.beta)) /
    e27a:	ee29 0a00 	vmul.f32	s0, s18, s0
    for (int c = 0; c < depth; ++c) {
    e27e:	3301      	adds	r3, #1
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    e280:	eca8 0a01 	vstmia	r8!, {s0}
    for (int c = 0; c < depth; ++c) {
    e284:	e7e7      	b.n	e256 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
      sum += std::exp((input_data[i * depth + c] - max) *
    e286:	ecb2 9a01 	vldmia	r2!, {s18}
    e28a:	9302      	str	r3, [sp, #8]
                      static_cast<float>(params.beta));
    e28c:	e9d6 0100 	ldrd	r0, r1, [r6]
      sum += std::exp((input_data[i * depth + c] - max) *
    e290:	9201      	str	r2, [sp, #4]
    e292:	9203      	str	r2, [sp, #12]
                      static_cast<float>(params.beta));
    e294:	f7f3 f802 	bl	129c <__aeabi_d2f>
      sum += std::exp((input_data[i * depth + c] - max) *
    e298:	ee39 0a48 	vsub.f32	s0, s18, s16
    e29c:	ee07 0a90 	vmov	s15, r0
    e2a0:	ee27 0a80 	vmul.f32	s0, s15, s0
    e2a4:	f004 f85c 	bl	12360 <expf>
    for (int c = 0; c < depth; ++c) {
    e2a8:	9b02      	ldr	r3, [sp, #8]
    e2aa:	9a01      	ldr	r2, [sp, #4]
      sum += std::exp((input_data[i * depth + c] - max) *
    e2ac:	ee78 8a80 	vadd.f32	s17, s17, s0
    for (int c = 0; c < depth; ++c) {
    e2b0:	3301      	adds	r3, #1
    e2b2:	e7c9      	b.n	e248 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int i = 0; i < outer_size; ++i) {
    e2b4:	f10a 0a01 	add.w	sl, sl, #1
    e2b8:	4425      	add	r5, r4
    e2ba:	e7a4      	b.n	e206 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x42>
                                   sum;
    }
  }
}
    e2bc:	b007      	add	sp, #28
    e2be:	ecbd 8b06 	vpop	{d8-d10}
    e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2c6:	bf00      	nop
    e2c8:	ff7fffff 	.word	0xff7fffff
    e2cc:	00000000 	.word	0x00000000

0000e2d0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e2d0:	4800      	ldr	r0, [pc, #0]	; (e2d4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x4>)
    e2d2:	4770      	bx	lr
    e2d4:	20000608 	.word	0x20000608

0000e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    e2dc:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2e0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    e2e2:	0160      	lsls	r0, r4, #5
    e2e4:	f7fd fb38 	bl	b958 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    e2e8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    e2ea:	4842      	ldr	r0, [pc, #264]	; (e3f4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    e2ec:	f00b fff5 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e2f0:	4601      	mov	r1, r0
    e2f2:	4630      	mov	r0, r6
  return a - b;
    e2f4:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    e2f6:	f00b fff5 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e2fa:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    e2fe:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    e302:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e306:	ea00 0909 	and.w	r9, r0, r9
    e30a:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    e30e:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    e312:	4839      	ldr	r0, [pc, #228]	; (e3f8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    e314:	f00b ffe1 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e318:	4601      	mov	r1, r0
    e31a:	4650      	mov	r0, sl
    e31c:	f00b ffe2 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e320:	f3c4 6940 	ubfx	r9, r4, #25, #1
    e324:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e328:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e32c:	ea00 0008 	and.w	r0, r0, r8
    e330:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    e334:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    e338:	4830      	ldr	r0, [pc, #192]	; (e3fc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    e33a:	f00b ffce 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e33e:	4601      	mov	r1, r0
    e340:	4648      	mov	r0, r9
    e342:	f00b ffcf 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e346:	f3c4 6780 	ubfx	r7, r4, #26, #1
    e34a:	427e      	negs	r6, r7
  return a & b;
    e34c:	3f01      	subs	r7, #1
    e34e:	4030      	ands	r0, r6
    e350:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e354:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    e356:	482a      	ldr	r0, [pc, #168]	; (e400 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    e358:	f00b ffbf 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e35c:	4601      	mov	r1, r0
    e35e:	4638      	mov	r0, r7
    e360:	f00b ffc0 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e364:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    e368:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    e36c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e370:	ea00 000a 	and.w	r0, r0, sl
    e374:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    e378:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    e37c:	4821      	ldr	r0, [pc, #132]	; (e404 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    e37e:	f00b ffac 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e382:	4601      	mov	r1, r0
    e384:	4658      	mov	r0, fp
    e386:	f00b ffad 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e38a:	f3c4 7900 	ubfx	r9, r4, #28, #1
    e38e:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e392:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e396:	ea00 0008 	and.w	r0, r0, r8
    e39a:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    e39e:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    e3a2:	4819      	ldr	r0, [pc, #100]	; (e408 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    e3a4:	f00b ff99 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e3a8:	4601      	mov	r1, r0
    e3aa:	4648      	mov	r0, r9
    e3ac:	f00b ff9a 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e3b0:	f3c4 7740 	ubfx	r7, r4, #29, #1
    e3b4:	427e      	negs	r6, r7
  return a & b;
    e3b6:	3f01      	subs	r7, #1
    e3b8:	4030      	ands	r0, r6
    e3ba:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e3be:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    e3c0:	20f2      	movs	r0, #242	; 0xf2
    e3c2:	f00b ff8a 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e3c6:	4601      	mov	r1, r0
    e3c8:	4638      	mov	r0, r7
    e3ca:	f00b ff8b 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e3ce:	f3c4 7480 	ubfx	r4, r4, #30, #1
    e3d2:	4263      	negs	r3, r4
  return a & b;
    e3d4:	4018      	ands	r0, r3
    e3d6:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    e3d8:	fab5 f385 	clz	r3, r5
  return a & b;
    e3dc:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    e3de:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    e3e0:	4044      	eors	r4, r0
  return a & b;
    e3e2:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    e3e4:	425b      	negs	r3, r3
  return a & b;
    e3e6:	4020      	ands	r0, r4
    e3e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    e3ec:	4058      	eors	r0, r3
    e3ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3f2:	bf00      	nop
    e3f4:	63afbe7b 	.word	0x63afbe7b
    e3f8:	4da2cbf2 	.word	0x4da2cbf2
    e3fc:	2f16ac6c 	.word	0x2f16ac6c
    e400:	1152aaa4 	.word	0x1152aaa4
    e404:	02582ab7 	.word	0x02582ab7
    e408:	000afe11 	.word	0x000afe11

0000e40c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e410:	4614      	mov	r4, r2
    e412:	461a      	mov	r2, r3
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e414:	680b      	ldr	r3, [r1, #0]
  const int diff_min = params.diff_min;
    e416:	f8d0 b018 	ldr.w	fp, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
    e41a:	b08b      	sub	sp, #44	; 0x2c
    e41c:	460d      	mov	r5, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e41e:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e420:	4619      	mov	r1, r3
  const int32 input_beta_left_shift = params.input_left_shift;
    e422:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e426:	4628      	mov	r0, r5
    e428:	9202      	str	r2, [sp, #8]
    e42a:	9301      	str	r3, [sp, #4]
    e42c:	f00b fcfb 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e430:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e434:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e436:	4619      	mov	r1, r3
    e438:	4628      	mov	r0, r5
    e43a:	f00a f8ff 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    e43e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    e440:	0043      	lsls	r3, r0, #1
    e442:	4605      	mov	r5, r0
    e444:	9301      	str	r3, [sp, #4]

  for (int i = 0; i < outer_size; ++i) {
    e446:	2700      	movs	r7, #0
    e448:	9b00      	ldr	r3, [sp, #0]
    e44a:	429f      	cmp	r7, r3
    e44c:	da79      	bge.n	e542 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e44e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    e452:	f88d 3017 	strb.w	r3, [sp, #23]
    e456:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
    e458:	2200      	movs	r2, #0
    e45a:	f10d 0e17 	add.w	lr, sp, #23
    e45e:	42aa      	cmp	r2, r5
    e460:	da0e      	bge.n	e480 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e462:	460b      	mov	r3, r1
      if (__a < __b)
    e464:	f99d 0017 	ldrsb.w	r0, [sp, #23]
    e468:	f993 c000 	ldrsb.w	ip, [r3]
    e46c:	4584      	cmp	ip, r0
      return __a;
    e46e:	bfd8      	it	le
    e470:	4673      	movle	r3, lr
    e472:	3101      	adds	r1, #1
    e474:	f993 3000 	ldrsb.w	r3, [r3]
    e478:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
    e47c:	3201      	adds	r2, #1
    e47e:	e7ee      	b.n	e45e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    e480:	f04f 0800 	mov.w	r8, #0
    e484:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
    e486:	4643      	mov	r3, r8
    e488:	42ab      	cmp	r3, r5
    e48a:	da17      	bge.n	e4bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    e48c:	f912 0b01 	ldrsb.w	r0, [r2], #1
    e490:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
    e494:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    e496:	4583      	cmp	fp, r0
    e498:	dc0e      	bgt.n	e4b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    e49a:	4649      	mov	r1, r9
    e49c:	fa00 f00a 	lsl.w	r0, r0, sl
    e4a0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e4a4:	f7fc ff86 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    e4a8:	f7ff ff16 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    e4ac:	210c      	movs	r1, #12
    e4ae:	f7fc ffaf 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    e4b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    e4b6:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
    e4b8:	3301      	adds	r3, #1
    e4ba:	e7e5      	b.n	e488 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    e4bc:	aa06      	add	r2, sp, #24
    e4be:	4640      	mov	r0, r8
    e4c0:	210c      	movs	r1, #12
    e4c2:	f00e f9f0 	bl	1c8a6 <_ZN6tflite13GetReciprocalEiiPi>
    e4c6:	4622      	mov	r2, r4
    e4c8:	4680      	mov	r8, r0
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    e4ca:	2300      	movs	r3, #0
    e4cc:	42ab      	cmp	r3, r5
    e4ce:	da33      	bge.n	e538 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    e4d0:	f912 0b01 	ldrsb.w	r0, [r2], #1
    e4d4:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
    e4d8:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    e4da:	4583      	cmp	fp, r0
    e4dc:	dc29      	bgt.n	e532 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    e4de:	4649      	mov	r1, r9
    e4e0:	fa00 f00a 	lsl.w	r0, r0, sl
    e4e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e4e8:	f7fc ff64 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    e4ec:	f7ff fef4 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e4f0:	4601      	mov	r1, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
    e4f2:	4640      	mov	r0, r8
    e4f4:	f00b fef6 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
    e4f8:	9906      	ldr	r1, [sp, #24]
    e4fa:	310f      	adds	r1, #15
    e4fc:	f7fc ff88 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));

        const int32 shifted_output =
            unsat_output +
    e500:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
    e504:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    e508:	bfb4      	ite	lt
    e50a:	a907      	addlt	r1, sp, #28
	return __b;
    e50c:	a908      	addge	r1, sp, #32
            static_cast<int32>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    e50e:	f647 73ff 	movw	r3, #32767	; 0x7fff
        const int32 shifted_output =
    e512:	9007      	str	r0, [sp, #28]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    e514:	9308      	str	r3, [sp, #32]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    e516:	480c      	ldr	r0, [pc, #48]	; (e548 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>)
    e518:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
    e51a:	6808      	ldr	r0, [r1, #0]
    e51c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    e520:	bfb8      	it	lt
    e522:	a909      	addlt	r1, sp, #36	; 0x24
      if (__b < __a)
    e524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e528:	6809      	ldr	r1, [r1, #0]
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e52a:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e52e:	3301      	adds	r3, #1
    e530:	e7cc      	b.n	e4cc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e532:	f248 0100 	movw	r1, #32768	; 0x8000
    e536:	e7f8      	b.n	e52a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
  for (int i = 0; i < outer_size; ++i) {
    e538:	9b01      	ldr	r3, [sp, #4]
    e53a:	3701      	adds	r7, #1
    e53c:	442c      	add	r4, r5
    e53e:	441e      	add	r6, r3
    e540:	e782      	b.n	e448 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
      }
    }
  }
}
    e542:	b00b      	add	sp, #44	; 0x2c
    e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e548:	ffff8000 	.word	0xffff8000

0000e54c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    e54c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e552:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
    e554:	6886      	ldr	r6, [r0, #8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    e556:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e55a:	019f      	lsls	r7, r3, #6
    e55c:	eb06 1883 	add.w	r8, r6, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
    e560:	684b      	ldr	r3, [r1, #4]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e562:	f816 9007 	ldrb.w	r9, [r6, r7]
    e566:	685d      	ldr	r5, [r3, #4]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e568:	ed2d 8b02 	vpush	{d8}
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e56c:	f1b9 0f03 	cmp.w	r9, #3
    e570:	ea4f 1385 	mov.w	r3, r5, lsl #6
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e574:	b094      	sub	sp, #80	; 0x50
    e576:	4604      	mov	r4, r0
    e578:	eb06 1585 	add.w	r5, r6, r5, lsl #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    e57c:	d014      	beq.n	e5a8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
    e57e:	f1b9 0f09 	cmp.w	r9, #9
    e582:	f040 809e 	bne.w	e6c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x176>
      if (output->type == kTfLiteInt16) {
    e586:	5cf3      	ldrb	r3, [r6, r3]
    e588:	2b07      	cmp	r3, #7
    e58a:	d136      	bne.n	e5fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    e58c:	692b      	ldr	r3, [r5, #16]
    e58e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    e592:	d064      	beq.n	e65e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e594:	4a6d      	ldr	r2, [pc, #436]	; (e74c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x200>)
    e596:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e59a:	4b6d      	ldr	r3, [pc, #436]	; (e750 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
    e59c:	9301      	str	r3, [sp, #4]
    e59e:	4b6d      	ldr	r3, [pc, #436]	; (e754 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e5a0:	9300      	str	r3, [sp, #0]
    e5a2:	6944      	ldr	r4, [r0, #20]
    e5a4:	232c      	movs	r3, #44	; 0x2c
    e5a6:	e024      	b.n	e5f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
    e5a8:	5cf3      	ldrb	r3, [r6, r3]
    e5aa:	2b03      	cmp	r3, #3
    e5ac:	d015      	beq.n	e5da <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
    e5ae:	6946      	ldr	r6, [r0, #20]
    e5b0:	4618      	mov	r0, r3
    e5b2:	f7f2 f97e 	bl	8b2 <TfLiteTypeGetName>
    e5b6:	4605      	mov	r5, r0
    e5b8:	4648      	mov	r0, r9
    e5ba:	f7f2 f97a 	bl	8b2 <TfLiteTypeGetName>
    e5be:	4b66      	ldr	r3, [pc, #408]	; (e758 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
    e5c0:	9301      	str	r3, [sp, #4]
    e5c2:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e5c6:	4b65      	ldr	r3, [pc, #404]	; (e75c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e5c8:	9300      	str	r3, [sp, #0]
    e5ca:	2327      	movs	r3, #39	; 0x27
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    e5cc:	4a64      	ldr	r2, [pc, #400]	; (e760 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e5ce:	4965      	ldr	r1, [pc, #404]	; (e764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    e5d0:	4620      	mov	r0, r4
    e5d2:	47b0      	blx	r6
      return kTfLiteError;
    e5d4:	f04f 0901 	mov.w	r9, #1
    e5d8:	e09b      	b.n	e712 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    e5da:	692b      	ldr	r3, [r5, #16]
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d03e      	beq.n	e65e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e5e0:	2200      	movs	r2, #0
    e5e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e5e6:	4b60      	ldr	r3, [pc, #384]	; (e768 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
    e5e8:	9301      	str	r3, [sp, #4]
    e5ea:	4b5a      	ldr	r3, [pc, #360]	; (e754 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e5ec:	9300      	str	r3, [sp, #0]
    e5ee:	6944      	ldr	r4, [r0, #20]
    e5f0:	2328      	movs	r3, #40	; 0x28
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    e5f2:	4a5b      	ldr	r2, [pc, #364]	; (e760 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e5f4:	495d      	ldr	r1, [pc, #372]	; (e76c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x220>)
    e5f6:	47a0      	blx	r4
    e5f8:	e7ec      	b.n	e5d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    e5fa:	2b09      	cmp	r3, #9
    e5fc:	d00f      	beq.n	e61e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    e5fe:	6946      	ldr	r6, [r0, #20]
    e600:	4618      	mov	r0, r3
    e602:	f7f2 f956 	bl	8b2 <TfLiteTypeGetName>
    e606:	4605      	mov	r5, r0
    e608:	4648      	mov	r0, r9
    e60a:	f7f2 f952 	bl	8b2 <TfLiteTypeGetName>
    e60e:	4b58      	ldr	r3, [pc, #352]	; (e770 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x224>)
    e610:	9301      	str	r3, [sp, #4]
    e612:	4b52      	ldr	r3, [pc, #328]	; (e75c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e614:	9300      	str	r3, [sp, #0]
    e616:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e61a:	2330      	movs	r3, #48	; 0x30
    e61c:	e7d6      	b.n	e5cc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    e61e:	692b      	ldr	r3, [r5, #16]
    e620:	f113 0f80 	cmn.w	r3, #128	; 0x80
    e624:	d00a      	beq.n	e63c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    e626:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    e62a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e62e:	4b51      	ldr	r3, [pc, #324]	; (e774 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x228>)
    e630:	9301      	str	r3, [sp, #4]
    e632:	4b48      	ldr	r3, [pc, #288]	; (e754 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    e634:	9300      	str	r3, [sp, #0]
    e636:	6944      	ldr	r4, [r0, #20]
    e638:	2331      	movs	r3, #49	; 0x31
    e63a:	e7da      	b.n	e5f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    e63c:	ed95 7a03 	vldr	s14, [r5, #12]
    e640:	eddf 7a4d 	vldr	s15, [pc, #308]	; e778 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
    e644:	eeb4 7a67 	vcmp.f32	s14, s15
    e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e64c:	d007      	beq.n	e65e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
    e64e:	4b4b      	ldr	r3, [pc, #300]	; (e77c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>)
    e650:	9300      	str	r3, [sp, #0]
    e652:	6944      	ldr	r4, [r0, #20]
    e654:	4a42      	ldr	r2, [pc, #264]	; (e760 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e656:	494a      	ldr	r1, [pc, #296]	; (e780 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
    e658:	2332      	movs	r3, #50	; 0x32
    e65a:	47a0      	blx	r4
    e65c:	e7ba      	b.n	e5d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    tflite::PreprocessSoftmaxScaling(
    e65e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    e662:	f7f2 fb01 	bl	c68 <__aeabi_f2d>
    e666:	ec41 0b18 	vmov	d8, r0, r1
    e66a:	f8da 0000 	ldr.w	r0, [sl]
    e66e:	f7f2 fafb 	bl	c68 <__aeabi_f2d>
    e672:	eeb0 1a48 	vmov.f32	s2, s16
    e676:	eef0 1a68 	vmov.f32	s3, s17
    e67a:	ec41 0b10 	vmov	d0, r0, r1
    e67e:	aa05      	add	r2, sp, #20
    e680:	a908      	add	r1, sp, #32
    e682:	2005      	movs	r0, #5
    e684:	f7f2 fec4 	bl	1410 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
    op_data->input_left_shift = input_left_shift;
    e688:	9905      	ldr	r1, [sp, #20]
    e68a:	9109      	str	r1, [sp, #36]	; 0x24
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    e68c:	221f      	movs	r2, #31
    e68e:	2005      	movs	r0, #5
    e690:	f00f fe9b 	bl	1e3ca <_ZN6tflite20CalculateInputRadiusEiii>
    e694:	f7f2 fad6 	bl	c44 <__aeabi_i2d>
    e698:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
    e69c:	4619      	mov	r1, r3
    e69e:	f7f2 fdd5 	bl	124c <__aeabi_d2iz>
    e6a2:	900c      	str	r0, [sp, #48]	; 0x30
  switch (input->type) {
    e6a4:	5df0      	ldrb	r0, [r6, r7]
    e6a6:	2803      	cmp	r0, #3
    e6a8:	d040      	beq.n	e72c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>
    e6aa:	2809      	cmp	r0, #9
    e6ac:	d03e      	beq.n	e72c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>
    e6ae:	2801      	cmp	r0, #1
    e6b0:	d142      	bne.n	e738 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
      SoftmaxFloat(input, output, op_data);
    e6b2:	aa06      	add	r2, sp, #24
    e6b4:	4629      	mov	r1, r5
    e6b6:	4640      	mov	r0, r8
    e6b8:	f00e f8d5 	bl	1c866 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
    e6bc:	f04f 0900 	mov.w	r9, #0
    e6c0:	e027      	b.n	e712 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    e6c2:	f1b9 0f01 	cmp.w	r9, #1
    e6c6:	d00f      	beq.n	e6e8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x19c>
    e6c8:	6946      	ldr	r6, [r0, #20]
    e6ca:	4648      	mov	r0, r9
    e6cc:	f7f2 f8f1 	bl	8b2 <TfLiteTypeGetName>
    e6d0:	4605      	mov	r5, r0
    e6d2:	2001      	movs	r0, #1
    e6d4:	f7f2 f8ed 	bl	8b2 <TfLiteTypeGetName>
    e6d8:	4b2a      	ldr	r3, [pc, #168]	; (e784 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e6da:	9301      	str	r3, [sp, #4]
    e6dc:	4b2a      	ldr	r3, [pc, #168]	; (e788 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    e6de:	9300      	str	r3, [sp, #0]
    e6e0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e6e4:	2342      	movs	r3, #66	; 0x42
    e6e6:	e771      	b.n	e5cc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    e6e8:	5cf0      	ldrb	r0, [r6, r3]
    e6ea:	2801      	cmp	r0, #1
    e6ec:	d017      	beq.n	e71e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    e6ee:	6966      	ldr	r6, [r4, #20]
    e6f0:	f7f2 f8df 	bl	8b2 <TfLiteTypeGetName>
    e6f4:	4605      	mov	r5, r0
    e6f6:	4648      	mov	r0, r9
    e6f8:	f7f2 f8db 	bl	8b2 <TfLiteTypeGetName>
    e6fc:	4b21      	ldr	r3, [pc, #132]	; (e784 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e6fe:	9301      	str	r3, [sp, #4]
    e700:	4b16      	ldr	r3, [pc, #88]	; (e75c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    e702:	9300      	str	r3, [sp, #0]
    e704:	e9cd 5002 	strd	r5, r0, [sp, #8]
    e708:	4a15      	ldr	r2, [pc, #84]	; (e760 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    e70a:	4916      	ldr	r1, [pc, #88]	; (e764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    e70c:	2343      	movs	r3, #67	; 0x43
    e70e:	4620      	mov	r0, r4
    e710:	47b0      	blx	r6
}
    e712:	4648      	mov	r0, r9
    e714:	b014      	add	sp, #80	; 0x50
    e716:	ecbd 8b02 	vpop	{d8}
    e71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_data->beta = static_cast<double>(params->beta);
    e71e:	f8da 0000 	ldr.w	r0, [sl]
    e722:	f7f2 faa1 	bl	c68 <__aeabi_f2d>
    e726:	e9cd 0106 	strd	r0, r1, [sp, #24]
  TF_LITE_ENSURE_STATUS(
    e72a:	e7bb      	b.n	e6a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x158>
      SoftmaxQuantized(input, output, op_data);
    e72c:	aa06      	add	r2, sp, #24
    e72e:	4629      	mov	r1, r5
    e730:	4640      	mov	r0, r8
    e732:	f00e f9f1 	bl	1cb18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
    e736:	e7c1      	b.n	e6bc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e738:	6965      	ldr	r5, [r4, #20]
    e73a:	f7f2 f8ba 	bl	8b2 <TfLiteTypeGetName>
    e73e:	5df3      	ldrb	r3, [r6, r7]
    e740:	4912      	ldr	r1, [pc, #72]	; (e78c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x240>)
    e742:	4602      	mov	r2, r0
    e744:	4620      	mov	r0, r4
    e746:	47a8      	blx	r5
    e748:	e744      	b.n	e5d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    e74a:	bf00      	nop
    e74c:	ffff8000 	.word	0xffff8000
    e750:	00028c21 	.word	0x00028c21
    e754:	0002858c 	.word	0x0002858c
    e758:	00028c14 	.word	0x00028c14
    e75c:	00028380 	.word	0x00028380
    e760:	00028bd1 	.word	0x00028bd1
    e764:	00027bae 	.word	0x00027bae
    e768:	00029369 	.word	0x00029369
    e76c:	00027b73 	.word	0x00027b73
    e770:	00028e92 	.word	0x00028e92
    e774:	00028c28 	.word	0x00028c28
    e778:	3b800000 	.word	0x3b800000
    e77c:	00028c2d 	.word	0x00028c2d
    e780:	000272d2 	.word	0x000272d2
    e784:	00027bc8 	.word	0x00027bc8
    e788:	00028398 	.word	0x00028398
    e78c:	00027ac7 	.word	0x00027ac7

0000e790 <_ZN6tflite3ops5micro14Register_SPLITEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    e790:	4800      	ldr	r0, [pc, #0]	; (e794 <_ZN6tflite3ops5micro14Register_SPLITEv+0x4>)
    e792:	4770      	bx	lr
    e794:	20000628 	.word	0x20000628

0000e798 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const TfLiteTensor* axis = GetInput(context, node, 0);
    e79a:	680a      	ldr	r2, [r1, #0]
    e79c:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    e79e:	6853      	ldr	r3, [r2, #4]
    e7a0:	eb07 1383 	add.w	r3, r7, r3, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e7a4:	4605      	mov	r5, r0
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
    e7a6:	7d1c      	ldrb	r4, [r3, #20]
    e7a8:	2c01      	cmp	r4, #1
    e7aa:	d006      	beq.n	e7ba <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x22>
    e7ac:	6943      	ldr	r3, [r0, #20]
    e7ae:	4927      	ldr	r1, [pc, #156]	; (e84c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
    e7b0:	4798      	blx	r3
    e7b2:	2401      	movs	r4, #1
}
    e7b4:	4620      	mov	r0, r4
    e7b6:	b003      	add	sp, #12
    e7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7ba:	6892      	ldr	r2, [r2, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
    e7bc:	685b      	ldr	r3, [r3, #4]
    e7be:	ea4f 1c82 	mov.w	ip, r2, lsl #6
    e7c2:	eb07 1282 	add.w	r2, r7, r2, lsl #6
    e7c6:	681b      	ldr	r3, [r3, #0]
  if (axis_value < 0) {
    e7c8:	6896      	ldr	r6, [r2, #8]
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	6836      	ldr	r6, [r6, #0]
    e7ce:	da09      	bge.n	e7e4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
  TF_LITE_ENSURE(context, axis_value >= 0);
    e7d0:	199b      	adds	r3, r3, r6
    e7d2:	d507      	bpl.n	e7e4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    e7d4:	4b1e      	ldr	r3, [pc, #120]	; (e850 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
    e7d6:	9300      	str	r3, [sp, #0]
    e7d8:	6945      	ldr	r5, [r0, #20]
    e7da:	4a1e      	ldr	r2, [pc, #120]	; (e854 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    e7dc:	491e      	ldr	r1, [pc, #120]	; (e858 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    e7de:	2353      	movs	r3, #83	; 0x53
    e7e0:	47a8      	blx	r5
    e7e2:	e7e7      	b.n	e7b4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
    e7e4:	429e      	cmp	r6, r3
    e7e6:	dc08      	bgt.n	e7fa <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x62>
    e7e8:	4b1c      	ldr	r3, [pc, #112]	; (e85c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
    e7ea:	9300      	str	r3, [sp, #0]
    e7ec:	696e      	ldr	r6, [r5, #20]
    e7ee:	4a19      	ldr	r2, [pc, #100]	; (e854 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
    e7f0:	4919      	ldr	r1, [pc, #100]	; (e858 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
    e7f2:	2354      	movs	r3, #84	; 0x54
    e7f4:	4628      	mov	r0, r5
    e7f6:	47b0      	blx	r6
    e7f8:	e7dc      	b.n	e7b4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  switch (input->type) {
    e7fa:	f817 000c 	ldrb.w	r0, [r7, ip]
    e7fe:	1e46      	subs	r6, r0, #1
    e800:	2e08      	cmp	r6, #8
    e802:	d81b      	bhi.n	e83c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    e804:	e8df f006 	tbb	[pc, r6]
    e808:	1a0a1605 	.word	0x1a0a1605
    e80c:	1a121a1a 	.word	0x1a121a1a
    e810:	0e          	.byte	0x0e
    e811:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
    e812:	4628      	mov	r0, r5
    e814:	f00e f9ca 	bl	1cbac <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
    e818:	4604      	mov	r4, r0
    e81a:	e7cb      	b.n	e7b4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    e81c:	4628      	mov	r0, r5
    e81e:	f00e fa55 	bl	1cccc <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e822:	e7f9      	b.n	e818 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int8_t>(context, node, input, axis_value);
    e824:	4628      	mov	r0, r5
    e826:	f00e facc 	bl	1cdc2 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e82a:	e7f5      	b.n	e818 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int16_t>(context, node, input, axis_value);
    e82c:	4628      	mov	r0, r5
    e82e:	f00e fb43 	bl	1ceb8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e832:	e7f1      	b.n	e818 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int32_t>(context, node, input, axis_value);
    e834:	4628      	mov	r0, r5
    e836:	f00e fbca 	bl	1cfce <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
    e83a:	e7ed      	b.n	e818 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s currently not supported.",
    e83c:	696e      	ldr	r6, [r5, #20]
    e83e:	f7f2 f838 	bl	8b2 <TfLiteTypeGetName>
    e842:	4907      	ldr	r1, [pc, #28]	; (e860 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
    e844:	4602      	mov	r2, r0
    e846:	4628      	mov	r0, r5
    e848:	47b0      	blx	r6
      return kTfLiteError;
    e84a:	e7b3      	b.n	e7b4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    e84c:	00028c4f 	.word	0x00028c4f
    e850:	00028cc4 	.word	0x00028cc4
    e854:	00028c9d 	.word	0x00028c9d
    e858:	000272d2 	.word	0x000272d2
    e85c:	00028cd4 	.word	0x00028cd4
    e860:	00028cf6 	.word	0x00028cf6

0000e864 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
    e864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  using ::tflite::strided_slice::StartForAxis;
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
    e868:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
    e86a:	b0a1      	sub	sp, #132	; 0x84
    e86c:	460e      	mov	r6, r1
    e86e:	4604      	mov	r4, r0
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
    e870:	a80b      	add	r0, sp, #44	; 0x2c
  TfLiteIntArray* output_shape = op_context->output->dims;
    e872:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
    e876:	f00e fcf7 	bl	1d268 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
    e87a:	6871      	ldr	r1, [r6, #4]
    e87c:	a805      	add	r0, sp, #20
    e87e:	f007 f86a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e882:	2500      	movs	r5, #0
    e884:	f8d6 9018 	ldr.w	r9, [r6, #24]
  int shape_size = 0;
    e888:	462f      	mov	r7, r5
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e88a:	45a9      	cmp	r9, r5
    e88c:	dd4d      	ble.n	e92a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
    e88e:	6933      	ldr	r3, [r6, #16]
    e890:	b103      	cbz	r3, e894 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
    e892:	685b      	ldr	r3, [r3, #4]
    e894:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
    e898:	f1bb 0f00 	cmp.w	fp, #0
    e89c:	d10b      	bne.n	e8b6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
    e89e:	6963      	ldr	r3, [r4, #20]
    e8a0:	4929      	ldr	r1, [pc, #164]	; (e948 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
    e8a2:	4620      	mov	r0, r4
    e8a4:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e8a6:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
    e8a8:	a805      	add	r0, sp, #20
    e8aa:	f007 f80f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
    e8ae:	4620      	mov	r0, r4
    e8b0:	b021      	add	sp, #132	; 0x84
    e8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
    e8b6:	462a      	mov	r2, r5
    e8b8:	a905      	add	r1, sp, #20
    e8ba:	a80b      	add	r0, sp, #44	; 0x2c
    e8bc:	f00e fc5a 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
    e8c0:	462a      	mov	r2, r5
    e8c2:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
    e8c4:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
    e8c6:	a905      	add	r1, sp, #20
    e8c8:	a80b      	add	r0, sp, #44	; 0x2c
    e8ca:	f00e fc78 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
    e8ce:	6833      	ldr	r3, [r6, #0]
    e8d0:	691b      	ldr	r3, [r3, #16]
    e8d2:	412b      	asrs	r3, r5
    if (shrink_axis) {
    e8d4:	07db      	lsls	r3, r3, #31
    e8d6:	d426      	bmi.n	e926 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
    e8d8:	eba0 000a 	sub.w	r0, r0, sl
    e8dc:	ee07 0a90 	vmov	s15, r0
    e8e0:	ee07 ba10 	vmov	s14, fp
    e8e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e8e8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
  { return __builtin_ceilf(__x); }
    e8ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
    e8f0:	f003 fb96 	bl	12020 <ceilf>
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
    e8f4:	eb08 0287 	add.w	r2, r8, r7, lsl #2
    e8f8:	6852      	ldr	r2, [r2, #4]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
    e8fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    e8fe:	ee17 3a90 	vmov	r3, s15
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
    e902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
    e906:	429a      	cmp	r2, r3
    e908:	d00c      	beq.n	e924 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
    e90a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e90e:	4b0f      	ldr	r3, [pc, #60]	; (e94c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
    e910:	9301      	str	r3, [sp, #4]
    e912:	4b0f      	ldr	r3, [pc, #60]	; (e950 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
    e914:	9300      	str	r3, [sp, #0]
    e916:	6965      	ldr	r5, [r4, #20]
    e918:	2373      	movs	r3, #115	; 0x73
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e91a:	4a0e      	ldr	r2, [pc, #56]	; (e954 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
    e91c:	490e      	ldr	r1, [pc, #56]	; (e958 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
    e91e:	4620      	mov	r0, r4
    e920:	47a8      	blx	r5
    e922:	e7c0      	b.n	e8a6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
    e924:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
    e926:	3501      	adds	r5, #1
    e928:	e7af      	b.n	e88a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
    e92a:	f8d8 3000 	ldr.w	r3, [r8]
    e92e:	42bb      	cmp	r3, r7
    e930:	d008      	beq.n	e944 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
    e932:	e9cd 3702 	strd	r3, r7, [sp, #8]
    e936:	4b09      	ldr	r3, [pc, #36]	; (e95c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
    e938:	9301      	str	r3, [sp, #4]
    e93a:	4b09      	ldr	r3, [pc, #36]	; (e960 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
    e93c:	9300      	str	r3, [sp, #0]
    e93e:	6965      	ldr	r5, [r4, #20]
    e940:	2377      	movs	r3, #119	; 0x77
    e942:	e7ea      	b.n	e91a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
    e944:	2400      	movs	r4, #0
    e946:	e7af      	b.n	e8a8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
    e948:	00028d17 	.word	0x00028d17
    e94c:	00028d95 	.word	0x00028d95
    e950:	00028d9f 	.word	0x00028d9f
    e954:	00028d66 	.word	0x00028d66
    e958:	00027b73 	.word	0x00027b73
    e95c:	00028dbe 	.word	0x00028dbe
    e960:	00028dc9 	.word	0x00028dc9

0000e964 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e964:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    e966:	680b      	ldr	r3, [r1, #0]
    e968:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
    e96a:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e96c:	b08c      	sub	sp, #48	; 0x30
    e96e:	4605      	mov	r5, r0
    e970:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
    e972:	d00e      	beq.n	e992 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    e974:	2204      	movs	r2, #4
    e976:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e97a:	4b15      	ldr	r3, [pc, #84]	; (e9d0 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
    e97c:	9301      	str	r3, [sp, #4]
    e97e:	4b15      	ldr	r3, [pc, #84]	; (e9d4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    e980:	9300      	str	r3, [sp, #0]
    e982:	6944      	ldr	r4, [r0, #20]
    e984:	237c      	movs	r3, #124	; 0x7c
    e986:	4a14      	ldr	r2, [pc, #80]	; (e9d8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    e988:	4914      	ldr	r1, [pc, #80]	; (e9dc <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    e98a:	47a0      	blx	r4
    e98c:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
    e98e:	b00c      	add	sp, #48	; 0x30
    e990:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    e992:	684b      	ldr	r3, [r1, #4]
    e994:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    e996:	2c01      	cmp	r4, #1
    e998:	d009      	beq.n	e9ae <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    e99a:	2601      	movs	r6, #1
    e99c:	4b10      	ldr	r3, [pc, #64]	; (e9e0 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    e99e:	9301      	str	r3, [sp, #4]
    e9a0:	e9cd 4602 	strd	r4, r6, [sp, #8]
    e9a4:	4b0f      	ldr	r3, [pc, #60]	; (e9e4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    e9a6:	9300      	str	r3, [sp, #0]
    e9a8:	6944      	ldr	r4, [r0, #20]
    e9aa:	237d      	movs	r3, #125	; 0x7d
    e9ac:	e7eb      	b.n	e986 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
    e9ae:	4601      	mov	r1, r0
    e9b0:	a805      	add	r0, sp, #20
    e9b2:	f00e fc3b 	bl	1d22c <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
    e9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9b8:	2b04      	cmp	r3, #4
    e9ba:	dd04      	ble.n	e9c6 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    e9bc:	696b      	ldr	r3, [r5, #20]
    e9be:	490a      	ldr	r1, [pc, #40]	; (e9e8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    e9c0:	4628      	mov	r0, r5
    e9c2:	4798      	blx	r3
    e9c4:	e7e2      	b.n	e98c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
    e9c6:	a905      	add	r1, sp, #20
    e9c8:	4628      	mov	r0, r5
    e9ca:	f7ff ff4b 	bl	e864 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
    e9ce:	e7de      	b.n	e98e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    e9d0:	00028e27 	.word	0x00028e27
    e9d4:	00027b8d 	.word	0x00027b8d
    e9d8:	00028d66 	.word	0x00028d66
    e9dc:	00027b73 	.word	0x00027b73
    e9e0:	0002880d 	.word	0x0002880d
    e9e4:	00027b9d 	.word	0x00027b9d
    e9e8:	00028ddc 	.word	0x00028ddc

0000e9ec <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
      /*profiling_string=*/nullptr,
      /*builtin_code=*/0,
      /*custom_name=*/nullptr,
      /*version=*/0};
  return &r;
}
    e9ec:	4800      	ldr	r0, [pc, #0]	; (e9f0 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x4>)
    e9ee:	4770      	bx	lr
    e9f0:	20000648 	.word	0x20000648

0000e9f4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e9f4:	b530      	push	{r4, r5, lr}
    e9f6:	b0ab      	sub	sp, #172	; 0xac
    e9f8:	460a      	mov	r2, r1
    e9fa:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
    e9fc:	4601      	mov	r1, r0
    e9fe:	a80e      	add	r0, sp, #56	; 0x38
    ea00:	f00e fc14 	bl	1d22c <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
    ea04:	a90e      	add	r1, sp, #56	; 0x38
    ea06:	a815      	add	r0, sp, #84	; 0x54
    ea08:	f00e fc2e 	bl	1d268 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
    ea0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ea0e:	7808      	ldrb	r0, [r1, #0]
    ea10:	2803      	cmp	r0, #3
    ea12:	d020      	beq.n	ea56 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
    ea14:	2809      	cmp	r0, #9
    ea16:	d033      	beq.n	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    ea18:	2801      	cmp	r0, #1
    ea1a:	d146      	bne.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
    ea1c:	a802      	add	r0, sp, #8
    ea1e:	f006 ff9a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ea24:	b104      	cbz	r4, ea28 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
    ea26:	6864      	ldr	r4, [r4, #4]
    ea28:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea2a:	a808      	add	r0, sp, #32
    ea2c:	f006 ff93 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea32:	b103      	cbz	r3, ea36 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
    ea34:	685b      	ldr	r3, [r3, #4]
    ea36:	9300      	str	r3, [sp, #0]
    ea38:	4622      	mov	r2, r4
    ea3a:	ab08      	add	r3, sp, #32
    ea3c:	a902      	add	r1, sp, #8
    ea3e:	a815      	add	r0, sp, #84	; 0x54
    ea40:	f00e fc41 	bl	1d2c6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
    ea44:	a808      	add	r0, sp, #32
    ea46:	f006 ff41 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    ea4a:	a802      	add	r0, sp, #8
    ea4c:	f006 ff3e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    ea50:	2000      	movs	r0, #0
}
    ea52:	b02b      	add	sp, #172	; 0xac
    ea54:	bd30      	pop	{r4, r5, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
    ea56:	a802      	add	r0, sp, #8
    ea58:	f006 ff7d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ea5e:	b104      	cbz	r4, ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ea60:	6864      	ldr	r4, [r4, #4]
    ea62:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea64:	a808      	add	r0, sp, #32
    ea66:	f006 ff76 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea6c:	b103      	cbz	r3, ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
    ea6e:	685b      	ldr	r3, [r3, #4]
    ea70:	9300      	str	r3, [sp, #0]
    ea72:	4622      	mov	r2, r4
    ea74:	ab08      	add	r3, sp, #32
    ea76:	a902      	add	r1, sp, #8
    ea78:	a815      	add	r0, sp, #84	; 0x54
    ea7a:	f00e fd3f 	bl	1d4fc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
    ea7e:	e7e1      	b.n	ea44 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
    ea80:	a802      	add	r0, sp, #8
    ea82:	f006 ff68 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ea88:	b104      	cbz	r4, ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
    ea8a:	6864      	ldr	r4, [r4, #4]
    ea8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ea8e:	a808      	add	r0, sp, #32
    ea90:	f006 ff61 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ea94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ea96:	b103      	cbz	r3, ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea98:	685b      	ldr	r3, [r3, #4]
    ea9a:	9300      	str	r3, [sp, #0]
    ea9c:	4622      	mov	r2, r4
    ea9e:	ab08      	add	r3, sp, #32
    eaa0:	a902      	add	r1, sp, #8
    eaa2:	a815      	add	r0, sp, #84	; 0x54
    eaa4:	f00e fe43 	bl	1d72e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
    eaa8:	e7cc      	b.n	ea44 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    eaaa:	6965      	ldr	r5, [r4, #20]
    eaac:	f7f1 ff01 	bl	8b2 <TfLiteTypeGetName>
    eab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eab2:	4903      	ldr	r1, [pc, #12]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	4602      	mov	r2, r0
    eab8:	4620      	mov	r0, r4
    eaba:	47a8      	blx	r5
      return kTfLiteError;
    eabc:	2001      	movs	r0, #1
    eabe:	e7c8      	b.n	ea52 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
    eac0:	00027ac7 	.word	0x00027ac7

0000eac4 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteSubParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
    eac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eac8:	ed2d 8b06 	vpush	{d8-d10}
    eacc:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
    ead0:	4680      	mov	r8, r0
    ead2:	4689      	mov	r9, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    ead4:	4610      	mov	r0, r2
    ead6:	4619      	mov	r1, r3
                             OpData* data) {
    ead8:	461d      	mov	r5, r3
    eada:	4616      	mov	r6, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eadc:	f00f fcd1 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eae0:	783b      	ldrb	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eae2:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eae6:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
    eae8:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    eaea:	d001      	beq.n	eaf0 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2c>
    eaec:	2b09      	cmp	r3, #9
    eaee:	d15e      	bne.n	ebae <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xea>
      if (__a < __b)
    eaf0:	ed96 aa03 	vldr	s20, [r6, #12]
    eaf4:	edd5 8a03 	vldr	s17, [r5, #12]
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale / twice_max_input_scale);
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale / twice_max_input_scale);
    const double real_output_multiplier =
        static_cast<double>(twice_max_input_scale /
    eaf8:	eddf 7a2f 	vldr	s15, [pc, #188]	; ebb8 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xf4>
    eafc:	ed97 7a03 	vldr	s14, [r7, #12]
    data->input1_offset = -input1->params.zero_point;
    eb00:	6933      	ldr	r3, [r6, #16]
        2 * std::max(input1->params.scale, input2->params.scale);
    eb02:	eeb4 aae8 	vcmpe.f32	s20, s17
    eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb0a:	bfb4      	ite	lt
    eb0c:	eeb0 8a68 	vmovlt.f32	s16, s17
    eb10:	eeb0 8a4a 	vmovge.f32	s16, s20
    eb14:	ee38 8a08 	vadd.f32	s16, s16, s16
    data->input1_offset = -input1->params.zero_point;
    eb18:	425b      	negs	r3, r3
        static_cast<double>(twice_max_input_scale /
    eb1a:	ee68 7a27 	vmul.f32	s15, s16, s15
    data->input1_offset = -input1->params.zero_point;
    eb1e:	62a3      	str	r3, [r4, #40]	; 0x28
    const double real_output_multiplier =
    eb20:	eec7 7a87 	vdiv.f32	s15, s15, s14
    data->input2_offset = -input2->params.zero_point;
    eb24:	692b      	ldr	r3, [r5, #16]
    eb26:	425b      	negs	r3, r3
    eb28:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
    eb2a:	693b      	ldr	r3, [r7, #16]
    eb2c:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
    eb2e:	2314      	movs	r3, #20
    eb30:	6263      	str	r3, [r4, #36]	; 0x24
                            ((1 << data->left_shift) * output->params.scale));

    QuantizeMultiplierSmallerThanOneExp(
    eb32:	1d26      	adds	r6, r4, #4
    eb34:	f104 0514 	add.w	r5, r4, #20
    const double real_output_multiplier =
    eb38:	ee17 0a90 	vmov	r0, s15
    eb3c:	f7f2 f894 	bl	c68 <__aeabi_f2d>
    const double real_input1_multiplier =
    eb40:	eeca 7a08 	vdiv.f32	s15, s20, s16
    const double real_output_multiplier =
    eb44:	ec41 0b19 	vmov	d9, r0, r1
    const double real_input1_multiplier =
    eb48:	ee17 0a90 	vmov	r0, s15
    eb4c:	f7f2 f88c 	bl	c68 <__aeabi_f2d>
    eb50:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    eb54:	4631      	mov	r1, r6
    eb56:	4628      	mov	r0, r5
    eb58:	f002 fe4a 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    const double real_input2_multiplier =
    eb5c:	eec8 7a88 	vdiv.f32	s15, s17, s16
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
    eb60:	f104 0608 	add.w	r6, r4, #8
    eb64:	f104 0518 	add.w	r5, r4, #24
    const double real_input2_multiplier =
    eb68:	ee17 0a90 	vmov	r0, s15
    eb6c:	f7f2 f87c 	bl	c68 <__aeabi_f2d>
    eb70:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
    eb74:	4631      	mov	r1, r6
    eb76:	4628      	mov	r0, r5
    eb78:	f002 fe3a 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
    eb7c:	eeb0 0a49 	vmov.f32	s0, s18
    eb80:	eef0 0a69 	vmov.f32	s1, s19
    eb84:	f104 0120 	add.w	r1, r4, #32
    eb88:	f104 001c 	add.w	r0, r4, #28
    eb8c:	f002 fe30 	bl	117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    eb90:	f104 0310 	add.w	r3, r4, #16
    eb94:	930e      	str	r3, [sp, #56]	; 0x38
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
    eb96:	ecbd 8b06 	vpop	{d8-d10}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    eb9a:	f899 1000 	ldrb.w	r1, [r9]
    eb9e:	f104 030c 	add.w	r3, r4, #12
    eba2:	463a      	mov	r2, r7
    eba4:	4640      	mov	r0, r8
}
    eba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    ebaa:	f002 be79 	b.w	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
    ebae:	ecbd 8b06 	vpop	{d8-d10}
    ebb2:	2000      	movs	r0, #0
    ebb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebb8:	35800000 	.word	0x35800000

0000ebbc <_ZN6tflite3ops5micro12Register_SUBEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    ebbc:	4800      	ldr	r0, [pc, #0]	; (ebc0 <_ZN6tflite3ops5micro12Register_SUBEv+0x4>)
    ebbe:	4770      	bx	lr
    ebc0:	20000668 	.word	0x20000668

0000ebc4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
    ebc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
    ebc8:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
    ebca:	b0d4      	sub	sp, #336	; 0x150
  if (activation == kTfLiteActRelu) {
    ebcc:	2a01      	cmp	r2, #1
    ebce:	e9dd 655c 	ldrd	r6, r5, [sp, #368]	; 0x170
    ebd2:	9c5e      	ldr	r4, [sp, #376]	; 0x178
    ebd4:	d03a      	beq.n	ec4c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
  } else if (activation == kTfLiteActRelu6) {
    ebd6:	2a03      	cmp	r2, #3
    ebd8:	d03d      	beq.n	ec56 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x92>
    *activation_max = std::numeric_limits<T>::max();
    ebda:	ed9f 7a67 	vldr	s14, [pc, #412]	; ed78 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
    ebde:	eddf 6a67 	vldr	s13, [pc, #412]	; ed7c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b8>
    ebe2:	2a02      	cmp	r2, #2
    ebe4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ebe8:	bf18      	it	ne
    ebea:	eef0 7a47 	vmovne.f32	s15, s14
    ebee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    ebf2:	bf18      	it	ne
    ebf4:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
    ebf8:	781b      	ldrb	r3, [r3, #0]
  params->float_activation_min = min;
    ebfa:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
  params->float_activation_max = max;
    ebfe:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
    ec02:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    ec06:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    ec0a:	af36      	add	r7, sp, #216	; 0xd8
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
    ec0c:	4631      	mov	r1, r6
  if (data->requires_broadcast) {
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d074      	beq.n	ecfc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x138>
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
    ec12:	a809      	add	r0, sp, #36	; 0x24
    ec14:	f006 fe9f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ec18:	b106      	cbz	r6, ec1c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
    ec1a:	6876      	ldr	r6, [r6, #4]
    ec1c:	4629      	mov	r1, r5
    ec1e:	a80f      	add	r0, sp, #60	; 0x3c
    ec20:	f006 fe99 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ec24:	b105      	cbz	r5, ec28 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
    ec26:	686d      	ldr	r5, [r5, #4]
    ec28:	4621      	mov	r1, r4
    ec2a:	a815      	add	r0, sp, #84	; 0x54
    ec2c:	f006 fe93 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ec30:	b104      	cbz	r4, ec34 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x70>
    ec32:	6864      	ldr	r4, [r4, #4]
    ec34:	9601      	str	r6, [sp, #4]
                             const RuntimeShape& input2_shape,
                             const float* input2_data,
                             const RuntimeShape& output_shape,
                             float* output_data) {
  ruy::profiler::ScopeLabel label("BroadcastSubSlow/float");
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
    ec36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec38:	9502      	str	r5, [sp, #8]
    ec3a:	2b05      	cmp	r3, #5
    ec3c:	f10d 0a04 	add.w	sl, sp, #4
    ec40:	ae02      	add	r6, sp, #8
    ec42:	ad03      	add	r5, sp, #12
    ec44:	602c      	str	r4, [r5, #0]
    ec46:	dd09      	ble.n	ec5c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x98>
    ec48:	f00f fcd4 	bl	1e5f4 <abort>
    *activation_max = std::numeric_limits<T>::max();
    ec4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; ed78 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
    *activation_min = 0;
    ec50:	ed9f 7a4b 	vldr	s14, [pc, #300]	; ed80 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1bc>
    ec54:	e7d0      	b.n	ebf8 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x34>
    *activation_max = 6;
    ec56:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    ec5a:	e7f9      	b.n	ec50 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
    ec5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec5e:	2b05      	cmp	r3, #5
    ec60:	dcf2      	bgt.n	ec48 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
    ec62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ec64:	2b05      	cmp	r3, #5
    ec66:	dcef      	bgt.n	ec48 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  NdArrayDesc<N> desc1;
  NdArrayDesc<N> desc2;
  NdArrayDesc<N> output_desc;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
    ec68:	464b      	mov	r3, r9
    ec6a:	4642      	mov	r2, r8
    ec6c:	a90f      	add	r1, sp, #60	; 0x3c
    ec6e:	a809      	add	r0, sp, #36	; 0x24
    ec70:	f00b fc2e 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
    ec74:	2301      	movs	r3, #1
    ec76:	aa15      	add	r2, sp, #84	; 0x54
    ec78:	2105      	movs	r1, #5
    ec7a:	a81b      	add	r0, sp, #108	; 0x6c
    ec7c:	f006 fec6 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
    ec80:	4639      	mov	r1, r7
    ec82:	a81b      	add	r0, sp, #108	; 0x6c
    ec84:	f00b fc0e 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

// Execute the calc function in the innermost iteration based on the shape of
// the output. The calc function should take a single argument of type int[N].
template <int N, typename Calc>
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
  int indexes[N] = {0};
    ec88:	2400      	movs	r4, #0
    ec8a:	a81b      	add	r0, sp, #108	; 0x6c
    ec8c:	f006 fe1e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  auto sub_func = [&](int indexes[N]) {
    ec90:	e9cd 571b 	strd	r5, r7, [sp, #108]	; 0x6c
    ec94:	e9cd a81d 	strd	sl, r8, [sp, #116]	; 0x74
    ec98:	e9cd 691f 	strd	r6, r9, [sp, #124]	; 0x7c
    ec9c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    eca0:	ab40      	add	r3, sp, #256	; 0x100
    eca2:	9321      	str	r3, [sp, #132]	; 0x84
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
    eca4:	9404      	str	r4, [sp, #16]
    eca6:	9a04      	ldr	r2, [sp, #16]
    eca8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    ecaa:	429a      	cmp	r2, r3
    ecac:	da1a      	bge.n	ece4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x120>
    ecae:	9405      	str	r4, [sp, #20]
    ecb0:	9a05      	ldr	r2, [sp, #20]
    ecb2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    ecb4:	429a      	cmp	r2, r3
    ecb6:	da11      	bge.n	ecdc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x118>
    ecb8:	9406      	str	r4, [sp, #24]
    ecba:	9a06      	ldr	r2, [sp, #24]
    ecbc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    ecbe:	429a      	cmp	r2, r3
    ecc0:	da08      	bge.n	ecd4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x110>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
    ecc2:	aa04      	add	r2, sp, #16
    ecc4:	a91b      	add	r1, sp, #108	; 0x6c
    ecc6:	4638      	mov	r0, r7
    ecc8:	f00f f8d0 	bl	1de6c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
    eccc:	9b06      	ldr	r3, [sp, #24]
    ecce:	3301      	adds	r3, #1
    ecd0:	9306      	str	r3, [sp, #24]
    ecd2:	e7f2      	b.n	ecba <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xf6>
    ecd4:	9b05      	ldr	r3, [sp, #20]
    ecd6:	3301      	adds	r3, #1
    ecd8:	9305      	str	r3, [sp, #20]
    ecda:	e7e9      	b.n	ecb0 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xec>
    ecdc:	9b04      	ldr	r3, [sp, #16]
    ecde:	3301      	adds	r3, #1
    ece0:	9304      	str	r3, [sp, #16]
    ece2:	e7e0      	b.n	eca6 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xe2>
    ece4:	a815      	add	r0, sp, #84	; 0x54
    ece6:	f006 fdf1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    ecea:	a80f      	add	r0, sp, #60	; 0x3c
    ecec:	f006 fdee 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    ecf0:	a809      	add	r0, sp, #36	; 0x24
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
    ecf2:	f006 fdeb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
    ecf6:	b054      	add	sp, #336	; 0x150
    ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
    ecfc:	4640      	mov	r0, r8
    ecfe:	f006 fe2a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ed02:	b106      	cbz	r6, ed06 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x142>
    ed04:	6876      	ldr	r6, [r6, #4]
    ed06:	4629      	mov	r1, r5
    ed08:	4648      	mov	r0, r9
    ed0a:	f006 fe24 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    ed0e:	b105      	cbz	r5, ed12 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14e>
    ed10:	686d      	ldr	r5, [r5, #4]
    ed12:	4621      	mov	r1, r4
    ed14:	4638      	mov	r0, r7
    ed16:	f006 fe1e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ed1a:	b104      	cbz	r4, ed1e <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x15a>
    ed1c:	6864      	ldr	r4, [r4, #4]
                              const RuntimeShape& input2_shape,
                              const float* input2_data,
                              const RuntimeShape& output_shape,
                              float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
    ed1e:	463a      	mov	r2, r7
    ed20:	4649      	mov	r1, r9
    ed22:	4640      	mov	r0, r8
    ed24:	f006 fec1 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; ++i) {
    ed28:	2300      	movs	r3, #0
    ed2a:	4298      	cmp	r0, r3
    ed2c:	dd1b      	ble.n	ed66 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a2>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] - input2_data[i], params.float_activation_min,
    ed2e:	ecb5 7a01 	vldmia	r5!, {s14}
    ed32:	ecf6 7a01 	vldmia	r6!, {s15}
    output_data[i] = ActivationFunctionWithMinMax(
    ed36:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ed3a:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
    ed3e:	eef4 7ac7 	vcmpe.f32	s15, s14
    ed42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed46:	bfb8      	it	lt
    ed48:	eef0 7a47 	vmovlt.f32	s15, s14
    ed4c:	ed9d 7a4e 	vldr	s14, [sp, #312]	; 0x138
    ed50:	eef4 7ac7 	vcmpe.f32	s15, s14
    ed54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed58:	bf88      	it	hi
    ed5a:	eef0 7a47 	vmovhi.f32	s15, s14
    ed5e:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
    ed62:	3301      	adds	r3, #1
    ed64:	e7e1      	b.n	ed2a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x166>
    ed66:	4638      	mov	r0, r7
    ed68:	f006 fdb0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    ed6c:	4648      	mov	r0, r9
    ed6e:	f006 fdad 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    ed72:	4640      	mov	r0, r8
    ed74:	e7bd      	b.n	ecf2 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x12e>
    ed76:	bf00      	nop
    ed78:	7f7fffff 	.word	0x7f7fffff
    ed7c:	ff7fffff 	.word	0xff7fffff
    ed80:	00000000 	.word	0x00000000

0000ed84 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ed84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed88:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    ed8a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    ed8e:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);
    ed90:	6949      	ldr	r1, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    ed92:	685a      	ldr	r2, [r3, #4]
    ed94:	689b      	ldr	r3, [r3, #8]
    ed96:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
    ed9a:	6872      	ldr	r2, [r6, #4]
    ed9c:	6857      	ldr	r7, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    ed9e:	b095      	sub	sp, #84	; 0x54
    eda0:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
    eda4:	f10d 0a1c 	add.w	sl, sp, #28
    eda8:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    edac:	eb08 1383 	add.w	r3, r8, r3, lsl #6
    edb0:	e9cd 7a00 	strd	r7, sl, [sp]
    edb4:	464a      	mov	r2, r9
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    edb6:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
    edb8:	9305      	str	r3, [sp, #20]
    edba:	9104      	str	r1, [sp, #16]
    edbc:	f7ff fe82 	bl	eac4 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
    edc0:	4604      	mov	r4, r0
    edc2:	b978      	cbnz	r0, ede4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
    edc4:	f818 000b 	ldrb.w	r0, [r8, fp]
    edc8:	2801      	cmp	r0, #1
    edca:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    edce:	d10d      	bne.n	edec <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalSub(context, node, params, &data, input1, input2, output);
    edd0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    edd4:	460a      	mov	r2, r1
    edd6:	f8cd 9000 	str.w	r9, [sp]
    edda:	4653      	mov	r3, sl
    eddc:	4631      	mov	r1, r6
    edde:	4628      	mov	r0, r5
    ede0:	f7ff fef0 	bl	ebc4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
    ede4:	4620      	mov	r0, r4
    ede6:	b015      	add	sp, #84	; 0x54
    ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
    edec:	2803      	cmp	r0, #3
    edee:	d001      	beq.n	edf4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    edf0:	2809      	cmp	r0, #9
    edf2:	d10b      	bne.n	ee0c <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalSubQuantized(context, node, params, &data,
    edf4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    edf8:	460a      	mov	r2, r1
    edfa:	f8cd 9000 	str.w	r9, [sp]
    edfe:	4653      	mov	r3, sl
    ee00:	4631      	mov	r1, r6
    ee02:	4628      	mov	r0, r5
    ee04:	f00f f824 	bl	1de50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
    ee08:	4604      	mov	r4, r0
    ee0a:	e7eb      	b.n	ede4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    ee0c:	696c      	ldr	r4, [r5, #20]
    ee0e:	f7f1 fd50 	bl	8b2 <TfLiteTypeGetName>
    ee12:	f818 300b 	ldrb.w	r3, [r8, fp]
    ee16:	4903      	ldr	r1, [pc, #12]	; (ee24 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
    ee18:	4602      	mov	r2, r0
    ee1a:	4628      	mov	r0, r5
    ee1c:	47a0      	blx	r4
    return kTfLiteError;
    ee1e:	2401      	movs	r4, #1
    ee20:	e7e0      	b.n	ede4 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    ee22:	bf00      	nop
    ee24:	00027ac7 	.word	0x00027ac7

0000ee28 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee2c:	ed2d 8b04 	vpush	{d8-d9}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ee30:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    ee32:	b08d      	sub	sp, #52	; 0x34
    ee34:	4604      	mov	r4, r0
    ee36:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    ee38:	b90a      	cbnz	r2, ee3e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
    ee3a:	f00f fbdb 	bl	1e5f4 <abort>
  // [1] = Weights Feature, {2, num_filters, input_size}
  // [2] = Weights Time, {2, num_filters, memory_size}
  // [3] = Bias (optional), {1, num_units}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    ee3e:	f8d1 c000 	ldr.w	ip, [r1]
    ee42:	6883      	ldr	r3, [r0, #8]
    ee44:	f8dc 1008 	ldr.w	r1, [ip, #8]
    ee48:	0188      	lsls	r0, r1, #6
    ee4a:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    ee4e:	9107      	str	r1, [sp, #28]
  const bool use_tensor = index < node->inputs->size &&
    ee50:	f8dc 1000 	ldr.w	r1, [ip]
  return &context->tensors[node->inputs->data[index]];
    ee54:	900b      	str	r0, [sp, #44]	; 0x2c
  const bool use_tensor = index < node->inputs->size &&
    ee56:	2903      	cmp	r1, #3
    ee58:	9106      	str	r1, [sp, #24]
    ee5a:	dd24      	ble.n	eea6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    ee5c:	f8dc 1010 	ldr.w	r1, [ip, #16]
  const bool use_tensor = index < node->inputs->size &&
    ee60:	1c48      	adds	r0, r1, #1
    ee62:	d020      	beq.n	eea6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    return &context->tensors[node->inputs->data[index]];
    ee64:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  const TfLiteTensor* activation_state =
      GetInput(context, node, kInputActivationStateTensor);

  // Define input constants based on input tensor definition above:
  const int rank = params->rank;
    ee68:	6810      	ldr	r0, [r2, #0]
  const int input_size = input->dims->data[1];
  const int batch_size = input->dims->data[0];
  const int num_filters = weights_feature->dims->data[0];
    ee6a:	9a07      	ldr	r2, [sp, #28]
    ee6c:	6892      	ldr	r2, [r2, #8]
    ee6e:	9204      	str	r2, [sp, #16]
    ee70:	6856      	ldr	r6, [r2, #4]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
    ee72:	fb96 f7f0 	sdiv	r7, r6, r0
    ee76:	fb00 6017 	mls	r0, r0, r7, r6
    ee7a:	b1b0      	cbz	r0, eeaa <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
    ee7c:	2300      	movs	r3, #0
    ee7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
    ee82:	4ba7      	ldr	r3, [pc, #668]	; (f120 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    ee84:	9301      	str	r3, [sp, #4]
    ee86:	6965      	ldr	r5, [r4, #20]
    ee88:	4ba6      	ldr	r3, [pc, #664]	; (f124 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    ee8a:	9300      	str	r3, [sp, #0]
    ee8c:	f240 1377 	movw	r3, #375	; 0x177
    ee90:	4aa5      	ldr	r2, [pc, #660]	; (f128 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    ee92:	49a6      	ldr	r1, [pc, #664]	; (f12c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ee94:	4620      	mov	r0, r4
    ee96:	47a8      	blx	r5
    ee98:	2501      	movs	r5, #1
        &(data->scratch_tensor_index));
    TF_LITE_ENSURE_OK(context, scratch_status);
  }

  return kTfLiteOk;
}
    ee9a:	4628      	mov	r0, r5
    ee9c:	b00d      	add	sp, #52	; 0x34
    ee9e:	ecbd 8b04 	vpop	{d8-d9}
    eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
    eea6:	2100      	movs	r1, #0
    eea8:	e7de      	b.n	ee68 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  return &context->tensors[node->inputs->data[index]];
    eeaa:	f8dc 0004 	ldr.w	r0, [ip, #4]
    eeae:	0185      	lsls	r5, r0, #6
    eeb0:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    eeb4:	9008      	str	r0, [sp, #32]
  TF_LITE_ENSURE(context,
    eeb6:	5d58      	ldrb	r0, [r3, r5]
    eeb8:	9005      	str	r0, [sp, #20]
    eeba:	f000 05f7 	and.w	r5, r0, #247	; 0xf7
    eebe:	2d01      	cmp	r5, #1
    eec0:	d009      	beq.n	eed6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    eec2:	4b9b      	ldr	r3, [pc, #620]	; (f130 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    eec4:	9300      	str	r3, [sp, #0]
    eec6:	6965      	ldr	r5, [r4, #20]
    eec8:	4a97      	ldr	r2, [pc, #604]	; (f128 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    eeca:	499a      	ldr	r1, [pc, #616]	; (f134 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    eecc:	f44f 73be 	mov.w	r3, #380	; 0x17c
    eed0:	4620      	mov	r0, r4
    eed2:	47a8      	blx	r5
    eed4:	e7e0      	b.n	ee98 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  const int input_size = input->dims->data[1];
    eed6:	9808      	ldr	r0, [sp, #32]
    eed8:	6880      	ldr	r0, [r0, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    eeda:	f8d0 8000 	ldr.w	r8, [r0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
    eede:	f1b8 0f02 	cmp.w	r8, #2
    eee2:	d00e      	beq.n	ef02 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    eee4:	2302      	movs	r3, #2
    eee6:	e9cd 8302 	strd	r8, r3, [sp, #8]
    eeea:	4b93      	ldr	r3, [pc, #588]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    eeec:	9301      	str	r3, [sp, #4]
    eeee:	6966      	ldr	r6, [r4, #20]
    eef0:	4b92      	ldr	r3, [pc, #584]	; (f13c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
    eef2:	9300      	str	r3, [sp, #0]
    eef4:	f44f 73bf 	mov.w	r3, #382	; 0x17e
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    eef8:	4a8b      	ldr	r2, [pc, #556]	; (f128 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    eefa:	498c      	ldr	r1, [pc, #560]	; (f12c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    eefc:	4620      	mov	r0, r4
    eefe:	47b0      	blx	r6
    ef00:	e7cb      	b.n	ee9a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
    ef02:	f8d9 e004 	ldr.w	lr, [r9, #4]
    ef06:	f8de a000 	ldr.w	sl, [lr]
    ef0a:	f1ba 0f01 	cmp.w	sl, #1
    ef0e:	d009      	beq.n	ef24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    ef10:	4b8b      	ldr	r3, [pc, #556]	; (f140 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
    ef12:	9301      	str	r3, [sp, #4]
    ef14:	4b8b      	ldr	r3, [pc, #556]	; (f144 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
    ef16:	9300      	str	r3, [sp, #0]
    ef18:	e9cd a502 	strd	sl, r5, [sp, #8]
    ef1c:	6966      	ldr	r6, [r4, #20]
    ef1e:	f44f 73c1 	mov.w	r3, #386	; 0x182
    ef22:	e7e9      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->outputs->data[index]];
    ef24:	f8de e004 	ldr.w	lr, [lr, #4]
    ef28:	ea4f 128e 	mov.w	r2, lr, lsl #6
    ef2c:	920a      	str	r2, [sp, #40]	; 0x28
    ef2e:	eb03 128e 	add.w	r2, r3, lr, lsl #6
    ef32:	9209      	str	r2, [sp, #36]	; 0x24
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
    ef34:	f8d2 a008 	ldr.w	sl, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    ef38:	f8da e000 	ldr.w	lr, [sl]
    ef3c:	f1be 0f02 	cmp.w	lr, #2
    ef40:	d009      	beq.n	ef56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    ef42:	4b7d      	ldr	r3, [pc, #500]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    ef44:	9301      	str	r3, [sp, #4]
    ef46:	4b80      	ldr	r3, [pc, #512]	; (f148 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
    ef48:	9300      	str	r3, [sp, #0]
    ef4a:	e9cd e802 	strd	lr, r8, [sp, #8]
    ef4e:	6966      	ldr	r6, [r4, #20]
    ef50:	f44f 73c2 	mov.w	r3, #388	; 0x184
    ef54:	e7d0      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  const int batch_size = input->dims->data[0];
    ef56:	f8d0 8004 	ldr.w	r8, [r0, #4]
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
    ef5a:	f8da b004 	ldr.w	fp, [sl, #4]
    ef5e:	45c3      	cmp	fp, r8
    ef60:	d009      	beq.n	ef76 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    ef62:	4b7a      	ldr	r3, [pc, #488]	; (f14c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
    ef64:	9301      	str	r3, [sp, #4]
    ef66:	4b7a      	ldr	r3, [pc, #488]	; (f150 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
    ef68:	9300      	str	r3, [sp, #0]
    ef6a:	e9cd b802 	strd	fp, r8, [sp, #8]
    ef6e:	6966      	ldr	r6, [r4, #20]
    ef70:	f240 1385 	movw	r3, #389	; 0x185
    ef74:	e7c0      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
    ef76:	f8da a008 	ldr.w	sl, [sl, #8]
    ef7a:	45ba      	cmp	sl, r7
    ef7c:	d009      	beq.n	ef92 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ef7e:	4b75      	ldr	r3, [pc, #468]	; (f154 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
    ef80:	9301      	str	r3, [sp, #4]
    ef82:	4b75      	ldr	r3, [pc, #468]	; (f158 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
    ef84:	9300      	str	r3, [sp, #0]
    ef86:	e9cd a702 	strd	sl, r7, [sp, #8]
    ef8a:	6966      	ldr	r6, [r4, #20]
    ef8c:	f44f 73c3 	mov.w	r3, #390	; 0x186
    ef90:	e7b2      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    ef92:	9a04      	ldr	r2, [sp, #16]
    ef94:	f8d2 a000 	ldr.w	sl, [r2]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
    ef98:	f1ba 0f02 	cmp.w	sl, #2
    ef9c:	d009      	beq.n	efb2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
    ef9e:	4b66      	ldr	r3, [pc, #408]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    efa0:	9301      	str	r3, [sp, #4]
    efa2:	4b6e      	ldr	r3, [pc, #440]	; (f15c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
    efa4:	9300      	str	r3, [sp, #0]
    efa6:	e9cd ae02 	strd	sl, lr, [sp, #8]
    efaa:	6966      	ldr	r6, [r4, #20]
    efac:	f240 1389 	movw	r3, #393	; 0x189
    efb0:	e7a2      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
    efb2:	9a04      	ldr	r2, [sp, #16]
  const int input_size = input->dims->data[1];
    efb4:	6880      	ldr	r0, [r0, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
    efb6:	6892      	ldr	r2, [r2, #8]
    efb8:	4282      	cmp	r2, r0
    efba:	d009      	beq.n	efd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
    efbc:	4b68      	ldr	r3, [pc, #416]	; (f160 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
    efbe:	9301      	str	r3, [sp, #4]
    efc0:	4b68      	ldr	r3, [pc, #416]	; (f164 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
    efc2:	9300      	str	r3, [sp, #0]
    efc4:	e9cd 2002 	strd	r2, r0, [sp, #8]
    efc8:	6966      	ldr	r6, [r4, #20]
    efca:	f44f 73c5 	mov.w	r3, #394	; 0x18a
    efce:	e793      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->inputs->data[index]];
    efd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    efd4:	ea4f 1e82 	mov.w	lr, r2, lsl #6
    efd8:	eb03 1282 	add.w	r2, r3, r2, lsl #6
    efdc:	9204      	str	r2, [sp, #16]
  const int memory_size = weights_time->dims->data[1];
    efde:	6890      	ldr	r0, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    efe0:	6802      	ldr	r2, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
    efe2:	2a02      	cmp	r2, #2
    efe4:	d00a      	beq.n	effc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
    efe6:	2302      	movs	r3, #2
    efe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    efec:	4b52      	ldr	r3, [pc, #328]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    efee:	9301      	str	r3, [sp, #4]
    eff0:	4b5d      	ldr	r3, [pc, #372]	; (f168 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
    eff2:	9300      	str	r3, [sp, #0]
    eff4:	6966      	ldr	r6, [r4, #20]
    eff6:	f240 138d 	movw	r3, #397	; 0x18d
    effa:	e77d      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
    effc:	6842      	ldr	r2, [r0, #4]
    effe:	42b2      	cmp	r2, r6
    f000:	d009      	beq.n	f016 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    f002:	4b5a      	ldr	r3, [pc, #360]	; (f16c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
    f004:	9301      	str	r3, [sp, #4]
    f006:	4b5a      	ldr	r3, [pc, #360]	; (f170 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
    f008:	9300      	str	r3, [sp, #0]
    f00a:	e9cd 2602 	strd	r2, r6, [sp, #8]
    f00e:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    f012:	6966      	ldr	r6, [r4, #20]
    f014:	e770      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  if (bias != nullptr) {
    f016:	b169      	cbz	r1, f034 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
    f018:	688a      	ldr	r2, [r1, #8]
    f01a:	6852      	ldr	r2, [r2, #4]
    f01c:	42ba      	cmp	r2, r7
    f01e:	d009      	beq.n	f034 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
    f020:	4b4c      	ldr	r3, [pc, #304]	; (f154 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
    f022:	9301      	str	r3, [sp, #4]
    f024:	4b53      	ldr	r3, [pc, #332]	; (f174 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
    f026:	9300      	str	r3, [sp, #0]
    f028:	e9cd 2702 	strd	r2, r7, [sp, #8]
    f02c:	6966      	ldr	r6, [r4, #20]
    f02e:	f240 1393 	movw	r3, #403	; 0x193
    f032:	e761      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  return &context->tensors[node->inputs->data[index]];
    f034:	f8dc 2014 	ldr.w	r2, [ip, #20]
    f038:	ea4f 1c82 	mov.w	ip, r2, lsl #6
    f03c:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
    f040:	f8d2 a008 	ldr.w	sl, [r2, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    f044:	f8da b000 	ldr.w	fp, [sl]
    f048:	f1bb 0f02 	cmp.w	fp, #2
    f04c:	d00a      	beq.n	f064 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>
    f04e:	2302      	movs	r3, #2
    f050:	e9cd b302 	strd	fp, r3, [sp, #8]
    f054:	4b38      	ldr	r3, [pc, #224]	; (f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    f056:	9301      	str	r3, [sp, #4]
    f058:	4b47      	ldr	r3, [pc, #284]	; (f178 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
    f05a:	9300      	str	r3, [sp, #0]
    f05c:	6966      	ldr	r6, [r4, #20]
    f05e:	f240 1397 	movw	r3, #407	; 0x197
    f062:	e749      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
    f064:	f8da b004 	ldr.w	fp, [sl, #4]
    f068:	45c3      	cmp	fp, r8
    f06a:	d009      	beq.n	f080 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    f06c:	4b37      	ldr	r3, [pc, #220]	; (f14c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
    f06e:	9301      	str	r3, [sp, #4]
    f070:	4b42      	ldr	r3, [pc, #264]	; (f17c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
    f072:	9300      	str	r3, [sp, #0]
    f074:	e9cd b802 	strd	fp, r8, [sp, #8]
    f078:	6966      	ldr	r6, [r4, #20]
    f07a:	f44f 73cc 	mov.w	r3, #408	; 0x198
    f07e:	e73b      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
    f080:	6880      	ldr	r0, [r0, #8]
    f082:	f8da a008 	ldr.w	sl, [sl, #8]
    f086:	4370      	muls	r0, r6
    f088:	4582      	cmp	sl, r0
    f08a:	d009      	beq.n	f0a0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x278>
    f08c:	4b3c      	ldr	r3, [pc, #240]	; (f180 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x358>)
    f08e:	9301      	str	r3, [sp, #4]
    f090:	4b3c      	ldr	r3, [pc, #240]	; (f184 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
    f092:	9300      	str	r3, [sp, #0]
    f094:	e9cd a002 	strd	sl, r0, [sp, #8]
    f098:	6966      	ldr	r6, [r4, #20]
    f09a:	f240 1399 	movw	r3, #409	; 0x199
    f09e:	e72b      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
    f0a0:	9806      	ldr	r0, [sp, #24]
    f0a2:	2805      	cmp	r0, #5
    f0a4:	d00a      	beq.n	f0bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x294>
    f0a6:	2305      	movs	r3, #5
    f0a8:	9303      	str	r3, [sp, #12]
    f0aa:	4b37      	ldr	r3, [pc, #220]	; (f188 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x360>)
    f0ac:	9301      	str	r3, [sp, #4]
    f0ae:	4b37      	ldr	r3, [pc, #220]	; (f18c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x364>)
    f0b0:	9300      	str	r3, [sp, #0]
    f0b2:	6966      	ldr	r6, [r4, #20]
    f0b4:	9002      	str	r0, [sp, #8]
    f0b6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    f0ba:	e71d      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
  if (input->type == kTfLiteInt8) {
    f0bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f0be:	f813 a000 	ldrb.w	sl, [r3, r0]
    f0c2:	9805      	ldr	r0, [sp, #20]
    f0c4:	2809      	cmp	r0, #9
    f0c6:	f040 80f5 	bne.w	f2b4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x48c>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);
    f0ca:	f1ba 0f09 	cmp.w	sl, #9
    f0ce:	d009      	beq.n	f0e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    f0d0:	4b2f      	ldr	r3, [pc, #188]	; (f190 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x368>)
    f0d2:	9301      	str	r3, [sp, #4]
    f0d4:	4b2f      	ldr	r3, [pc, #188]	; (f194 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x36c>)
    f0d6:	9300      	str	r3, [sp, #0]
    f0d8:	e9cd a002 	strd	sl, r0, [sp, #8]
    f0dc:	6966      	ldr	r6, [r4, #20]
    f0de:	f240 139f 	movw	r3, #415	; 0x19f
    f0e2:	e709      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);
    f0e4:	f813 000e 	ldrb.w	r0, [r3, lr]
    f0e8:	2807      	cmp	r0, #7
    f0ea:	d00a      	beq.n	f102 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2da>
    f0ec:	2307      	movs	r3, #7
    f0ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f0f2:	4b29      	ldr	r3, [pc, #164]	; (f198 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x370>)
    f0f4:	9301      	str	r3, [sp, #4]
    f0f6:	4b29      	ldr	r3, [pc, #164]	; (f19c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x374>)
    f0f8:	9300      	str	r3, [sp, #0]
    f0fa:	6966      	ldr	r6, [r4, #20]
    f0fc:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
    f100:	e6fa      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);
    f102:	f813 c00c 	ldrb.w	ip, [r3, ip]
    f106:	f1bc 0f07 	cmp.w	ip, #7
    f10a:	d04b      	beq.n	f1a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    f10c:	4b22      	ldr	r3, [pc, #136]	; (f198 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x370>)
    f10e:	9301      	str	r3, [sp, #4]
    f110:	4b23      	ldr	r3, [pc, #140]	; (f1a0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x378>)
    f112:	9300      	str	r3, [sp, #0]
    f114:	e9cd c002 	strd	ip, r0, [sp, #8]
    f118:	6966      	ldr	r6, [r4, #20]
    f11a:	f240 13a1 	movw	r3, #417	; 0x1a1
    f11e:	e6eb      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    f120:	00029369 	.word	0x00029369
    f124:	00028e4f 	.word	0x00028e4f
    f128:	00028e29 	.word	0x00028e29
    f12c:	00027b73 	.word	0x00027b73
    f130:	00028e62 	.word	0x00028e62
    f134:	000272d2 	.word	0x000272d2
    f138:	000283e5 	.word	0x000283e5
    f13c:	00028ce1 	.word	0x00028ce1
    f140:	0002880d 	.word	0x0002880d
    f144:	00027e32 	.word	0x00027e32
    f148:	00028e9e 	.word	0x00028e9e
    f14c:	00028eb4 	.word	0x00028eb4
    f150:	00028ebf 	.word	0x00028ebf
    f154:	00028ed5 	.word	0x00028ed5
    f158:	00028edf 	.word	0x00028edf
    f15c:	00028ef5 	.word	0x00028ef5
    f160:	00028f14 	.word	0x00028f14
    f164:	00028f1f 	.word	0x00028f1f
    f168:	00028f3e 	.word	0x00028f3e
    f16c:	00028fd8 	.word	0x00028fd8
    f170:	00028f5a 	.word	0x00028f5a
    f174:	00028f76 	.word	0x00028f76
    f178:	00028f8a 	.word	0x00028f8a
    f17c:	00028faa 	.word	0x00028faa
    f180:	00028fca 	.word	0x00028fca
    f184:	00028fe4 	.word	0x00028fe4
    f188:	0002780b 	.word	0x0002780b
    f18c:	000288ce 	.word	0x000288ce
    f190:	00028e92 	.word	0x00028e92
    f194:	00029004 	.word	0x00029004
    f198:	000280b3 	.word	0x000280b3
    f19c:	0002901a 	.word	0x0002901a
    f1a0:	0002902d 	.word	0x0002902d
    if (bias != nullptr) {
    f1a4:	b169      	cbz	r1, f1c2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);
    f1a6:	7809      	ldrb	r1, [r1, #0]
    f1a8:	2902      	cmp	r1, #2
    f1aa:	d00a      	beq.n	f1c2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
    f1ac:	2302      	movs	r3, #2
    f1ae:	e9cd 1302 	strd	r1, r3, [sp, #8]
    f1b2:	4b6d      	ldr	r3, [pc, #436]	; (f368 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x540>)
    f1b4:	9301      	str	r3, [sp, #4]
    f1b6:	4b6d      	ldr	r3, [pc, #436]	; (f36c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
    f1b8:	9300      	str	r3, [sp, #0]
    f1ba:	6966      	ldr	r6, [r4, #20]
    f1bc:	f240 13a3 	movw	r3, #419	; 0x1a3
    f1c0:	e69a      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    f1c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    f1c4:	5c58      	ldrb	r0, [r3, r1]
    f1c6:	2809      	cmp	r0, #9
    f1c8:	d013      	beq.n	f1f2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ca>
    f1ca:	6967      	ldr	r7, [r4, #20]
    f1cc:	f7f1 fb71 	bl	8b2 <TfLiteTypeGetName>
    f1d0:	4606      	mov	r6, r0
    f1d2:	2009      	movs	r0, #9
    f1d4:	f7f1 fb6d 	bl	8b2 <TfLiteTypeGetName>
    f1d8:	4b65      	ldr	r3, [pc, #404]	; (f370 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x548>)
    f1da:	9301      	str	r3, [sp, #4]
    f1dc:	e9cd 6002 	strd	r6, r0, [sp, #8]
    f1e0:	4b64      	ldr	r3, [pc, #400]	; (f374 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x54c>)
    f1e2:	9300      	str	r3, [sp, #0]
    f1e4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    f1e8:	4a63      	ldr	r2, [pc, #396]	; (f378 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x550>)
    f1ea:	4964      	ldr	r1, [pc, #400]	; (f37c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x554>)
    f1ec:	4620      	mov	r0, r4
    f1ee:	47b8      	blx	r7
    f1f0:	e653      	b.n	ee9a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
        state_params->scale->data[0]);
    f1f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    f1f4:	681b      	ldr	r3, [r3, #0]
    f1f6:	ed93 8a01 	vldr	s16, [r3, #4]
        input_params->scale->data[0] * weights_feature_params->scale->data[0] /
    f1fa:	9b08      	ldr	r3, [sp, #32]
    f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1fe:	681a      	ldr	r2, [r3, #0]
    f200:	9b07      	ldr	r3, [sp, #28]
    f202:	edd2 7a01 	vldr	s15, [r2, #4]
    f206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f208:	681b      	ldr	r3, [r3, #0]
    f20a:	ed93 7a01 	vldr	s14, [r3, #4]
    f20e:	ee67 7a87 	vmul.f32	s15, s15, s14
    const double effective_scale_1 = static_cast<double>(
    f212:	eec7 7a88 	vdiv.f32	s15, s15, s16
    f216:	ee17 0a90 	vmov	r0, s15
    f21a:	f7f1 fd25 	bl	c68 <__aeabi_f2d>
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
    f21e:	9b04      	ldr	r3, [sp, #16]
    f220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f222:	681b      	ldr	r3, [r3, #0]
    f224:	edd3 7a01 	vldr	s15, [r3, #4]
        output_params->scale->data[0]);
    f228:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f22c:	681b      	ldr	r3, [r3, #0]
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
    f22e:	ee28 8a27 	vmul.f32	s16, s16, s15
    f232:	edd3 7a01 	vldr	s15, [r3, #4]
    const double effective_scale_2 = static_cast<double>(
    f236:	eec8 7a27 	vdiv.f32	s15, s16, s15
    const double effective_scale_1 = static_cast<double>(
    f23a:	ec41 0b19 	vmov	d9, r0, r1
    const double effective_scale_2 = static_cast<double>(
    f23e:	ee17 0a90 	vmov	r0, s15
    f242:	f7f1 fd11 	bl	c68 <__aeabi_f2d>
    TFLITE_DCHECK(node->user_data != nullptr);
    f246:	f8d9 9010 	ldr.w	r9, [r9, #16]
    const double effective_scale_2 = static_cast<double>(
    f24a:	ec41 0b18 	vmov	d8, r0, r1
    TFLITE_DCHECK(node->user_data != nullptr);
    f24e:	f1b9 0f00 	cmp.w	r9, #0
    f252:	f43f adf2 	beq.w	ee3a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    QuantizeMultiplier(effective_scale_1, &(data->effective_scale_1_a),
    f256:	f109 0108 	add.w	r1, r9, #8
    f25a:	4648      	mov	r0, r9
    f25c:	eeb0 0a49 	vmov.f32	s0, s18
    f260:	eef0 0a69 	vmov.f32	s1, s19
    f264:	f002 fa64 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(effective_scale_2, &(data->effective_scale_2_a),
    f268:	eeb0 0a48 	vmov.f32	s0, s16
    f26c:	eef0 0a68 	vmov.f32	s1, s17
    f270:	f109 010c 	add.w	r1, r9, #12
    f274:	f109 0004 	add.w	r0, r9, #4
    f278:	f002 fa5a 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
    f27c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f27e:	2b00      	cmp	r3, #0
    f280:	f43f addb 	beq.w	ee3a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(int32_t),
    f284:	fb06 f108 	mul.w	r1, r6, r8
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f288:	f109 0210 	add.w	r2, r9, #16
    f28c:	0089      	lsls	r1, r1, #2
    f28e:	4620      	mov	r0, r4
    f290:	4798      	blx	r3
    TF_LITE_ENSURE_OK(context, scratch_status);
    f292:	4605      	mov	r5, r0
    f294:	2800      	cmp	r0, #0
    f296:	f47f ae00 	bne.w	ee9a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
        context->RequestScratchBufferInArena(
    f29a:	6c23      	ldr	r3, [r4, #64]	; 0x40
            context, batch_size * num_units * sizeof(int32_t),
    f29c:	fb07 f108 	mul.w	r1, r7, r8
        context->RequestScratchBufferInArena(
    f2a0:	f109 0214 	add.w	r2, r9, #20
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f2a4:	0089      	lsls	r1, r1, #2
    f2a6:	4620      	mov	r0, r4
}
    f2a8:	b00d      	add	sp, #52	; 0x34
    f2aa:	ecbd 8b04 	vpop	{d8-d9}
    f2ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f2b2:	4718      	bx	r3
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
    f2b4:	f1ba 0f01 	cmp.w	sl, #1
    f2b8:	d00a      	beq.n	f2d0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
    f2ba:	2301      	movs	r3, #1
    f2bc:	e9cd a302 	strd	sl, r3, [sp, #8]
    f2c0:	4b2f      	ldr	r3, [pc, #188]	; (f380 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2c2:	9301      	str	r3, [sp, #4]
    f2c4:	4b2f      	ldr	r3, [pc, #188]	; (f384 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x55c>)
    f2c6:	9300      	str	r3, [sp, #0]
    f2c8:	6966      	ldr	r6, [r4, #20]
    f2ca:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    f2ce:	e613      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
    f2d0:	f813 700e 	ldrb.w	r7, [r3, lr]
    f2d4:	2f01      	cmp	r7, #1
    f2d6:	d009      	beq.n	f2ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4c4>
    f2d8:	4b29      	ldr	r3, [pc, #164]	; (f380 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2da:	9301      	str	r3, [sp, #4]
    f2dc:	4b2a      	ldr	r3, [pc, #168]	; (f388 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x560>)
    f2de:	9300      	str	r3, [sp, #0]
    f2e0:	e9cd 7a02 	strd	r7, sl, [sp, #8]
    f2e4:	6965      	ldr	r5, [r4, #20]
    f2e6:	f240 13d1 	movw	r3, #465	; 0x1d1
    f2ea:	e5d1      	b.n	ee90 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
    f2ec:	f813 500c 	ldrb.w	r5, [r3, ip]
    f2f0:	2d01      	cmp	r5, #1
    f2f2:	d009      	beq.n	f308 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    f2f4:	4b22      	ldr	r3, [pc, #136]	; (f380 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f2f6:	9301      	str	r3, [sp, #4]
    f2f8:	4b24      	ldr	r3, [pc, #144]	; (f38c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
    f2fa:	9300      	str	r3, [sp, #0]
    f2fc:	e9cd 5702 	strd	r5, r7, [sp, #8]
    f300:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    f304:	6965      	ldr	r5, [r4, #20]
    f306:	e5c3      	b.n	ee90 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    if (bias != nullptr) {
    f308:	b169      	cbz	r1, f326 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4fe>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
    f30a:	780a      	ldrb	r2, [r1, #0]
    f30c:	2a01      	cmp	r2, #1
    f30e:	d00a      	beq.n	f326 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4fe>
    f310:	2301      	movs	r3, #1
    f312:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f316:	4b1a      	ldr	r3, [pc, #104]	; (f380 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f318:	9301      	str	r3, [sp, #4]
    f31a:	4b14      	ldr	r3, [pc, #80]	; (f36c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
    f31c:	9300      	str	r3, [sp, #0]
    f31e:	6966      	ldr	r6, [r4, #20]
    f320:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
    f324:	e5e8      	b.n	eef8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    f326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f328:	5c98      	ldrb	r0, [r3, r2]
    f32a:	2801      	cmp	r0, #1
    f32c:	d00f      	beq.n	f34e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x526>
    f32e:	6967      	ldr	r7, [r4, #20]
    f330:	f7f1 fabf 	bl	8b2 <TfLiteTypeGetName>
    f334:	4606      	mov	r6, r0
    f336:	2001      	movs	r0, #1
    f338:	f7f1 fabb 	bl	8b2 <TfLiteTypeGetName>
    f33c:	4b10      	ldr	r3, [pc, #64]	; (f380 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x558>)
    f33e:	9301      	str	r3, [sp, #4]
    f340:	4b0c      	ldr	r3, [pc, #48]	; (f374 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x54c>)
    f342:	9300      	str	r3, [sp, #0]
    f344:	e9cd 6002 	strd	r6, r0, [sp, #8]
    f348:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
    f34c:	e74c      	b.n	f1e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3c0>
    TFLITE_DCHECK(node->user_data != nullptr);
    f34e:	f8d9 2010 	ldr.w	r2, [r9, #16]
    f352:	2a00      	cmp	r2, #0
    f354:	f43f ad71 	beq.w	ee3a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
    f358:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f35a:	2b00      	cmp	r3, #0
    f35c:	f43f ad6d 	beq.w	ee3a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(float),
    f360:	fb06 f108 	mul.w	r1, r6, r8
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
    f364:	3210      	adds	r2, #16
    f366:	e79d      	b.n	f2a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x47c>
    f368:	000280f2 	.word	0x000280f2
    f36c:	00029044 	.word	0x00029044
    f370:	00028e92 	.word	0x00028e92
    f374:	00028380 	.word	0x00028380
    f378:	00028e29 	.word	0x00028e29
    f37c:	00027bae 	.word	0x00027bae
    f380:	00027bc8 	.word	0x00027bc8
    f384:	00029004 	.word	0x00029004
    f388:	0002901a 	.word	0x0002901a
    f38c:	0002902d 	.word	0x0002902d

0000f390 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    f394:	680c      	ldr	r4, [r1, #0]
    f396:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    f398:	6862      	ldr	r2, [r4, #4]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
    f39a:	694e      	ldr	r6, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    f39c:	ed2d 8b04 	vpush	{d8-d9}
    f3a0:	eb03 1882 	add.w	r8, r3, r2, lsl #6
    f3a4:	68a2      	ldr	r2, [r4, #8]
    f3a6:	4607      	mov	r7, r0
    f3a8:	eb03 1982 	add.w	r9, r3, r2, lsl #6
    f3ac:	0190      	lsls	r0, r2, #6
    f3ae:	68e2      	ldr	r2, [r4, #12]
    f3b0:	b097      	sub	sp, #92	; 0x5c
    f3b2:	eb03 1282 	add.w	r2, r3, r2, lsl #6
    f3b6:	9208      	str	r2, [sp, #32]
  const bool use_tensor = index < node->inputs->size &&
    f3b8:	6822      	ldr	r2, [r4, #0]
    f3ba:	2a03      	cmp	r2, #3
    f3bc:	dd15      	ble.n	f3ea <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    f3be:	6922      	ldr	r2, [r4, #16]
  const bool use_tensor = index < node->inputs->size &&
    f3c0:	1c55      	adds	r5, r2, #1
    f3c2:	d012      	beq.n	f3ea <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    return &context->tensors[node->inputs->data[index]];
    f3c4:	eb03 1b82 	add.w	fp, r3, r2, lsl #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
    f3c8:	6964      	ldr	r4, [r4, #20]
    f3ca:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return (tensor->is_variable) ? tensor : nullptr;
    f3ce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    f3d2:	2a00      	cmp	r2, #0
  return &context->tensors[node->outputs->data[index]];
    f3d4:	684a      	ldr	r2, [r1, #4]
    f3d6:	6852      	ldr	r2, [r2, #4]
    f3d8:	eb03 1a82 	add.w	sl, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* activation_state =
      GetVariableInput(context, node, kInputActivationStateTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    f3dc:	690a      	ldr	r2, [r1, #16]
    f3de:	9204      	str	r2, [sp, #16]
  return (tensor->is_variable) ? tensor : nullptr;
    f3e0:	bf08      	it	eq
    f3e2:	2400      	moveq	r4, #0
    f3e4:	b922      	cbnz	r2, f3f0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    f3e6:	f00f f905 	bl	1e5f4 <abort>
  return nullptr;
    f3ea:	f04f 0b00 	mov.w	fp, #0
    f3ee:	e7eb      	b.n	f3c8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (weights_feature->type) {
    f3f0:	5c18      	ldrb	r0, [r3, r0]
    f3f2:	2801      	cmp	r0, #1
    f3f4:	d00a      	beq.n	f40c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    f3f6:	2809      	cmp	r0, #9
    f3f8:	f000 8185 	beq.w	f706 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x376>
      return kTfLiteOk;
      break;
    }

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    f3fc:	697c      	ldr	r4, [r7, #20]
    f3fe:	f7f1 fa58 	bl	8b2 <TfLiteTypeGetName>
    f402:	49b7      	ldr	r1, [pc, #732]	; (f6e0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x350>)
    f404:	4602      	mov	r2, r0
    f406:	4638      	mov	r0, r7
    f408:	47a0      	blx	r4
    f40a:	e18d      	b.n	f728 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x398>
                    params, data.scratch_tensor_index, activation_state,
    f40c:	9b04      	ldr	r3, [sp, #16]
    f40e:	6919      	ldr	r1, [r3, #16]
  const int rank = params->rank;
    f410:	6833      	ldr	r3, [r6, #0]
    f412:	9309      	str	r3, [sp, #36]	; 0x24
  const int batch_size = input->dims->data[0];
    f414:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f418:	685a      	ldr	r2, [r3, #4]
  const int input_size = input->dims->data[1];
    f41a:	689b      	ldr	r3, [r3, #8]
    f41c:	930a      	str	r3, [sp, #40]	; 0x28
  const int num_filters = weights_feature->dims->data[0];
    f41e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  const int batch_size = input->dims->data[0];
    f422:	9204      	str	r2, [sp, #16]
  const int num_filters = weights_feature->dims->data[0];
    f424:	685b      	ldr	r3, [r3, #4]
    f426:	9305      	str	r3, [sp, #20]
  const int num_units = num_filters / rank;
    f428:	9a05      	ldr	r2, [sp, #20]
    f42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f42c:	fb92 f3f3 	sdiv	r3, r2, r3
    f430:	9306      	str	r3, [sp, #24]
  const int memory_size = weights_time->dims->data[1];
    f432:	9b08      	ldr	r3, [sp, #32]
    f434:	689b      	ldr	r3, [r3, #8]
    f436:	689b      	ldr	r3, [r3, #8]
    f438:	9307      	str	r3, [sp, #28]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    f43a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f43e:	930b      	str	r3, [sp, #44]	; 0x2c
    f440:	9b08      	ldr	r3, [sp, #32]
    f442:	685b      	ldr	r3, [r3, #4]
    f444:	930c      	str	r3, [sp, #48]	; 0x30
    f446:	f1bb 0f00 	cmp.w	fp, #0
    f44a:	d001      	beq.n	f450 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
    f44c:	f8db b004 	ldr.w	fp, [fp, #4]
    f450:	f8d8 8004 	ldr.w	r8, [r8, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f454:	b104      	cbz	r4, f458 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
    f456:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
    f458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f45a:	2b00      	cmp	r3, #0
    f45c:	d0c3      	beq.n	f3e6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, scratch_tensor_index));
    f45e:	4638      	mov	r0, r7
    f460:	4798      	blx	r3
    f462:	900d      	str	r0, [sp, #52]	; 0x34
    f464:	f1ba 0f00 	cmp.w	sl, #0
    f468:	d001      	beq.n	f46e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xde>
    f46a:	f8da a004 	ldr.w	sl, [sl, #4]
        state_ptr + batch_size * num_filters * memory_size;
    f46e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
    f472:	434b      	muls	r3, r1
    f474:	9907      	ldr	r1, [sp, #28]
    f476:	434b      	muls	r3, r1
    const float* old_state_start = state_ptr + 1;
    f478:	1d22      	adds	r2, r4, #4
    const float* old_state_end =
    f47a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    while (old_state_start != old_state_end) {
    f47e:	4293      	cmp	r3, r2
    f480:	d004      	beq.n	f48c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
      *new_state_start++ = *old_state_start++;
    f482:	f852 1b04 	ldr.w	r1, [r2], #4
    f486:	f842 1c08 	str.w	r1, [r2, #-8]
    while (old_state_start != old_state_end) {
    f48a:	e7f8      	b.n	f47e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    float* result = &state_ptr[memory_size - 1];
    f48c:	980a      	ldr	r0, [sp, #40]	; 0x28
    f48e:	9b07      	ldr	r3, [sp, #28]
    f490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    f496:	0080      	lsls	r0, r0, #2
    f498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f49c:	3b01      	subs	r3, #1
    f49e:	900e      	str	r0, [sp, #56]	; 0x38
    f4a0:	9805      	ldr	r0, [sp, #20]
    f4a2:	0099      	lsls	r1, r3, #2
        result_in_batch += memory_size;
    f4a4:	3104      	adds	r1, #4
    f4a6:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    f4aa:	0092      	lsls	r2, r2, #2
    f4ac:	fb01 f007 	mul.w	r0, r1, r7
    f4b0:	9210      	str	r2, [sp, #64]	; 0x40
    f4b2:	900f      	str	r0, [sp, #60]	; 0x3c
    float* result = &state_ptr[memory_size - 1];
    f4b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < batch_size; ++i) {
    f4b8:	4642      	mov	r2, r8
    f4ba:	2000      	movs	r0, #0
    f4bc:	9f04      	ldr	r7, [sp, #16]
    f4be:	4287      	cmp	r7, r0
    f4c0:	dd2a      	ble.n	f518 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x188>
      const float* matrix_ptr = matrix;
    f4c2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
        const float* vector_in_batch = vector + i * input_size;
    f4c6:	469e      	mov	lr, r3
      for (int j = 0; j < num_filters; ++j) {
    f4c8:	f04f 0c00 	mov.w	ip, #0
    f4cc:	9d05      	ldr	r5, [sp, #20]
    f4ce:	4565      	cmp	r5, ip
    f4d0:	dd1c      	ble.n	f50c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
        float dot_prod = 0.0f;
    f4d2:	eddf 7a84 	vldr	s15, [pc, #528]	; f6e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f4d6:	f8cd 8020 	str.w	r8, [sp, #32]
        const float* vector_in_batch = vector + i * input_size;
    f4da:	4617      	mov	r7, r2
        for (int k = 0; k < input_size; ++k) {
    f4dc:	f04f 0900 	mov.w	r9, #0
    f4e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f4e2:	454d      	cmp	r5, r9
    f4e4:	dd0a      	ble.n	f4fc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
    f4e6:	9d08      	ldr	r5, [sp, #32]
    f4e8:	ecb7 7a01 	vldmia	r7!, {s14}
    f4ec:	ecf5 6a01 	vldmia	r5!, {s13}
        for (int k = 0; k < input_size; ++k) {
    f4f0:	f109 0901 	add.w	r9, r9, #1
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
    f4f4:	eee6 7a87 	vfma.f32	s15, s13, s14
    f4f8:	9508      	str	r5, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
    f4fa:	e7f1      	b.n	f4e0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
    f4fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
    f4fe:	edce 7a00 	vstr	s15, [lr]
    f502:	44a8      	add	r8, r5
        result_in_batch += memory_size;
    f504:	448e      	add	lr, r1
      for (int j = 0; j < num_filters; ++j) {
    f506:	f10c 0c01 	add.w	ip, ip, #1
    f50a:	e7df      	b.n	f4cc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    f50c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f50e:	442b      	add	r3, r5
    for (int i = 0; i < batch_size; ++i) {
    f510:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f512:	3001      	adds	r0, #1
    f514:	442a      	add	r2, r5
    f516:	e7d1      	b.n	f4bc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
    f518:	7933      	ldrb	r3, [r6, #4]
    f51a:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batch_size; ++b) {
    f51c:	9b05      	ldr	r3, [sp, #20]
    f51e:	9a05      	ldr	r2, [sp, #20]
    f520:	980d      	ldr	r0, [sp, #52]	; 0x34
      *scratch_ptr_batch = 0.f;
    f522:	ed9f 7a70 	vldr	s14, [pc, #448]	; f6e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f526:	009b      	lsls	r3, r3, #2
    f528:	930a      	str	r3, [sp, #40]	; 0x28
    f52a:	9b07      	ldr	r3, [sp, #28]
    f52c:	4353      	muls	r3, r2
    f52e:	009b      	lsls	r3, r3, #2
    f530:	930d      	str	r3, [sp, #52]	; 0x34
    f532:	9b07      	ldr	r3, [sp, #28]
    f534:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f538:	009b      	lsls	r3, r3, #2
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
    f53a:	4601      	mov	r1, r0
  for (int b = 0; b < batch_size; ++b) {
    f53c:	2600      	movs	r6, #0
    f53e:	9a04      	ldr	r2, [sp, #16]
    f540:	42b2      	cmp	r2, r6
    f542:	dd2a      	ble.n	f59a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    const float* vector1_ptr = weights_time_ptr;
    f544:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    const float* vector2_ptr = state_ptr + b * memory_size * num_filters;
    f548:	46a4      	mov	ip, r4
    f54a:	460a      	mov	r2, r1
    for (int i = 0; i < num_filters; ++i) {
    f54c:	2700      	movs	r7, #0
    f54e:	9d05      	ldr	r5, [sp, #20]
    f550:	42bd      	cmp	r5, r7
    f552:	dd1c      	ble.n	f58e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
      *scratch_ptr_batch = 0.f;
    f554:	eca2 7a01 	vstmia	r2!, {s14}
    f558:	46e1      	mov	r9, ip
    f55a:	f8cd e020 	str.w	lr, [sp, #32]
      for (int j = 0; j < memory_size; ++j) {
    f55e:	f04f 0800 	mov.w	r8, #0
    f562:	9d07      	ldr	r5, [sp, #28]
    f564:	4545      	cmp	r5, r8
    f566:	dd0e      	ble.n	f586 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f568:	9d08      	ldr	r5, [sp, #32]
    f56a:	ecf9 6a01 	vldmia	r9!, {s13}
    f56e:	ecb5 6a01 	vldmia	r5!, {s12}
    f572:	ed52 7a01 	vldr	s15, [r2, #-4]
    f576:	9508      	str	r5, [sp, #32]
    f578:	eee6 7a26 	vfma.f32	s15, s12, s13
      for (int j = 0; j < memory_size; ++j) {
    f57c:	f108 0801 	add.w	r8, r8, #1
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f580:	ed42 7a01 	vstr	s15, [r2, #-4]
      for (int j = 0; j < memory_size; ++j) {
    f584:	e7ed      	b.n	f562 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    f586:	449e      	add	lr, r3
    f588:	449c      	add	ip, r3
    for (int i = 0; i < num_filters; ++i) {
    f58a:	3701      	adds	r7, #1
    f58c:	e7df      	b.n	f54e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1be>
  for (int b = 0; b < batch_size; ++b) {
    f58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f590:	4411      	add	r1, r2
    f592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f594:	3601      	adds	r6, #1
    f596:	4414      	add	r4, r2
    f598:	e7d1      	b.n	f53e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
  if (bias_ptr) {
    f59a:	9b06      	ldr	r3, [sp, #24]
    f59c:	f1bb 0f00 	cmp.w	fp, #0
    f5a0:	d011      	beq.n	f5c6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x236>
    f5a2:	009e      	lsls	r6, r3, #2
    for (int i = 0; i < batch_size; ++i) {
    f5a4:	2200      	movs	r2, #0
    f5a6:	4653      	mov	r3, sl
    f5a8:	9904      	ldr	r1, [sp, #16]
    f5aa:	4291      	cmp	r1, r2
    f5ac:	dd1a      	ble.n	f5e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
    f5ae:	461c      	mov	r4, r3
    f5b0:	465d      	mov	r5, fp
      for (int j = 0; j < num_units; ++j) {
    f5b2:	2100      	movs	r1, #0
    f5b4:	9f06      	ldr	r7, [sp, #24]
    f5b6:	428f      	cmp	r7, r1
    f5b8:	dd11      	ble.n	f5de <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
        *output_data++ = *bias_data++;
    f5ba:	f855 7b04 	ldr.w	r7, [r5], #4
    f5be:	f844 7b04 	str.w	r7, [r4], #4
      for (int j = 0; j < num_units; ++j) {
    f5c2:	3101      	adds	r1, #1
    f5c4:	e7f6      	b.n	f5b4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x224>
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5c6:	9a04      	ldr	r2, [sp, #16]
      *output_data++ = 0.0f;
    f5c8:	2100      	movs	r1, #0
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5ca:	fb03 f402 	mul.w	r4, r3, r2
    float* output_data = output_ptr;
    f5ce:	4652      	mov	r2, sl
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5d0:	465b      	mov	r3, fp
    f5d2:	429c      	cmp	r4, r3
    f5d4:	dd06      	ble.n	f5e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
      *output_data++ = 0.0f;
    f5d6:	f842 1b04 	str.w	r1, [r2], #4
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5da:	3301      	adds	r3, #1
    f5dc:	e7f9      	b.n	f5d2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x242>
    for (int i = 0; i < batch_size; ++i) {
    f5de:	3201      	adds	r2, #1
    f5e0:	4433      	add	r3, r6
    f5e2:	e7e1      	b.n	f5a8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x218>
    f5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5e6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    for (int i = 0; i < batch_size * num_units; ++i) {
    f5ea:	2300      	movs	r3, #0
    f5ec:	ea4f 0e84 	mov.w	lr, r4, lsl #2
    f5f0:	4619      	mov	r1, r3
  for (int b = 0; b < batch_size; ++b) {
    f5f2:	9a04      	ldr	r2, [sp, #16]
    f5f4:	428a      	cmp	r2, r1
    f5f6:	dc13      	bgt.n	f620 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x290>
    f5f8:	9b06      	ldr	r3, [sp, #24]
    f5fa:	ed9f 9a3a 	vldr	s18, [pc, #232]	; f6e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f5fe:	009e      	lsls	r6, r3, #2
  for (int b = 0; b < batch_size; ++b) {
    f600:	2500      	movs	r5, #0
    case kTfLiteActTanh:
      return std::tanh(a);
    case kTfLiteActSignBit:
      return std::signbit(a);
    case kTfLiteActSigmoid:
      return 1.0f / (1.0f + std::exp(-a));
    f602:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f606:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
    f60a:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
    f60e:	9b04      	ldr	r3, [sp, #16]
    f610:	42ab      	cmp	r3, r5
    f612:	dc25      	bgt.n	f660 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
      return kTfLiteOk;
    f614:	2000      	movs	r0, #0
                         TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
    f616:	b017      	add	sp, #92	; 0x5c
    f618:	ecbd 8b04 	vpop	{d8-d9}
    f61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float* scratch_ptr_batch = scratch_ptr + b * num_filters;
    f620:	4606      	mov	r6, r0
    for (int i = 0; i < num_units; ++i) {
    f622:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    f626:	2500      	movs	r5, #0
    f628:	9f06      	ldr	r7, [sp, #24]
    f62a:	42af      	cmp	r7, r5
    f62c:	dd12      	ble.n	f654 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>
    f62e:	46b4      	mov	ip, r6
      for (int j = 0; j < rank; j++) {
    f630:	2700      	movs	r7, #0
    f632:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f634:	42bc      	cmp	r4, r7
    f636:	dd09      	ble.n	f64c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
        output_ptr_batch[i] += *scratch_ptr_batch++;
    f638:	edd2 7a00 	vldr	s15, [r2]
    f63c:	ecbc 7a01 	vldmia	ip!, {s14}
    f640:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
    f644:	3701      	adds	r7, #1
        output_ptr_batch[i] += *scratch_ptr_batch++;
    f646:	edc2 7a00 	vstr	s15, [r2]
      for (int j = 0; j < rank; j++) {
    f64a:	e7f2      	b.n	f632 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2a2>
    f64c:	4476      	add	r6, lr
    for (int i = 0; i < num_units; ++i) {
    f64e:	3501      	adds	r5, #1
    f650:	3204      	adds	r2, #4
    f652:	e7e9      	b.n	f628 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x298>
  for (int b = 0; b < batch_size; ++b) {
    f654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f656:	4410      	add	r0, r2
    f658:	9a06      	ldr	r2, [sp, #24]
    f65a:	3101      	adds	r1, #1
    f65c:	4413      	add	r3, r2
    f65e:	e7c8      	b.n	f5f2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    float* output_ptr_batch = output_ptr + b * num_units;
    f660:	46d0      	mov	r8, sl
    for (int i = 0; i < num_units; ++i) {
    f662:	2700      	movs	r7, #0
    f664:	9b06      	ldr	r3, [sp, #24]
    f666:	42bb      	cmp	r3, r7
    f668:	dd4a      	ble.n	f700 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x370>
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
    f66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f66c:	ed98 0a00 	vldr	s0, [r8]
  switch (act) {
    f670:	2b06      	cmp	r3, #6
    f672:	d842      	bhi.n	f6fa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x36a>
    f674:	e8df f003 	tbb	[pc, r3]
    f678:	16041d12 	.word	0x16041d12
    f67c:	2825      	.short	0x2825
    f67e:	38          	.byte	0x38
    f67f:	00          	.byte	0x00

namespace tflite {

#if defined(TF_LITE_USE_GLOBAL_MAX) || defined(__ZEPHYR__)
inline float TfLiteMax(const float& x, const float& y) {
  return std::max(x, y);
    f680:	eeb4 0ac8 	vcmpe.f32	s0, s16
    f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f688:	bf88      	it	hi
    f68a:	eeb0 0a48 	vmovhi.f32	s0, s16
    f68e:	eeb4 0ae9 	vcmpe.f32	s0, s19
    f692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f696:	bfb8      	it	lt
    f698:	eeb0 0a69 	vmovlt.f32	s0, s19
    f69c:	eca8 0a01 	vstmia	r8!, {s0}
    for (int i = 0; i < num_units; ++i) {
    f6a0:	3701      	adds	r7, #1
    f6a2:	e7df      	b.n	f664 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
    f6a4:	eeb4 0ae8 	vcmpe.f32	s0, s17
    f6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6ac:	bf88      	it	hi
    f6ae:	eeb0 0a68 	vmovhi.f32	s0, s17
    f6b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    f6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6ba:	bfb8      	it	lt
    f6bc:	eeb0 0a49 	vmovlt.f32	s0, s18
    f6c0:	e7ec      	b.n	f69c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
    f6c2:	f002 fdf1 	bl	122a8 <tanhf>
      return std::tanh(a);
    f6c6:	e7e9      	b.n	f69c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }
    f6c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return std::signbit(a);
    f6d0:	bf4c      	ite	mi
    f6d2:	2301      	movmi	r3, #1
    f6d4:	2300      	movpl	r3, #0
    f6d6:	ee00 3a10 	vmov	s0, r3
    f6da:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    f6de:	e7dd      	b.n	f69c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
    f6e0:	0002874c 	.word	0x0002874c
    f6e4:	00000000 	.word	0x00000000
  { return __builtin_expf(__x); }
    f6e8:	eeb1 0a40 	vneg.f32	s0, s0
    f6ec:	f002 fe38 	bl	12360 <expf>
      return 1.0f / (1.0f + std::exp(-a));
    f6f0:	ee70 7a08 	vadd.f32	s15, s0, s16
    f6f4:	ee88 0a27 	vdiv.f32	s0, s16, s15
    f6f8:	e7d0      	b.n	f69c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  }
  return 0.0f;  // To indicate an unsupported activation (i.e. when a new fused
    f6fa:	ed1f 0a06 	vldr	s0, [pc, #-24]	; f6e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
    f6fe:	e7cd      	b.n	f69c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30c>
  for (int b = 0; b < batch_size; ++b) {
    f700:	3501      	adds	r5, #1
    f702:	44b2      	add	sl, r6
    f704:	e783      	b.n	f60e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
      TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);
    f706:	7933      	ldrb	r3, [r6, #4]
    f708:	2b01      	cmp	r3, #1
    f70a:	d00f      	beq.n	f72c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
    f70c:	2401      	movs	r4, #1
    f70e:	e9cd 3402 	strd	r3, r4, [sp, #8]
    f712:	4b9f      	ldr	r3, [pc, #636]	; (f990 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    f714:	9301      	str	r3, [sp, #4]
    f716:	4b9f      	ldr	r3, [pc, #636]	; (f994 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x604>)
    f718:	9300      	str	r3, [sp, #0]
    f71a:	697d      	ldr	r5, [r7, #20]
    f71c:	4a9e      	ldr	r2, [pc, #632]	; (f998 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x608>)
    f71e:	499f      	ldr	r1, [pc, #636]	; (f99c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    f720:	f240 13ff 	movw	r3, #511	; 0x1ff
    f724:	4638      	mov	r0, r7
    f726:	47a8      	blx	r5
      return kTfLiteError;
    f728:	2001      	movs	r0, #1
    f72a:	e774      	b.n	f616 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x286>
                      input->params.zero_point, output->params.zero_point);
    f72c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    f730:	930f      	str	r3, [sp, #60]	; 0x3c
      EvalIntegerSVDF(context, node, input, weights_feature, weights_time, bias,
    f732:	f8da 3010 	ldr.w	r3, [sl, #16]
    f736:	9310      	str	r3, [sp, #64]	; 0x40
    f738:	6833      	ldr	r3, [r6, #0]
    f73a:	930a      	str	r3, [sp, #40]	; 0x28
  const int n_batch = input_tensor->dims->data[0];
    f73c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f740:	685a      	ldr	r2, [r3, #4]
  const int n_input = input_tensor->dims->data[1];
    f742:	689b      	ldr	r3, [r3, #8]
    f744:	930b      	str	r3, [sp, #44]	; 0x2c
  const int n_filter = weights_feature_tensor->dims->data[0];
    f746:	f8d9 3008 	ldr.w	r3, [r9, #8]
  const int n_batch = input_tensor->dims->data[0];
    f74a:	9205      	str	r2, [sp, #20]
  const int n_filter = weights_feature_tensor->dims->data[0];
    f74c:	685e      	ldr	r6, [r3, #4]
  const int n_unit = n_filter / n_rank;
    f74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f750:	fb96 f3f3 	sdiv	r3, r6, r3
    f754:	9306      	str	r3, [sp, #24]
  const int n_memory = weights_time_tensor->dims->data[1];
    f756:	9b08      	ldr	r3, [sp, #32]
    f758:	689b      	ldr	r3, [r3, #8]
    f75a:	689b      	ldr	r3, [r3, #8]
    f75c:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
    f75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f760:	2b00      	cmp	r3, #0
    f762:	f43f ae40 	beq.w	f3e6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, data.scratch_tensor_index));
    f766:	9a04      	ldr	r2, [sp, #16]
    f768:	4638      	mov	r0, r7
    f76a:	6911      	ldr	r1, [r2, #16]
    f76c:	4798      	blx	r3
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
    f76e:	9a04      	ldr	r2, [sp, #16]
      context->GetScratchBuffer(context, data.scratch_tensor_index));
    f770:	9011      	str	r0, [sp, #68]	; 0x44
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
    f772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f774:	6951      	ldr	r1, [r2, #20]
    f776:	4638      	mov	r0, r7
    f778:	4798      	blx	r3
    f77a:	9009      	str	r0, [sp, #36]	; 0x24
    f77c:	b104      	cbz	r4, f780 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    f77e:	6864      	ldr	r4, [r4, #4]
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
    f780:	9b05      	ldr	r3, [sp, #20]
    f782:	9907      	ldr	r1, [sp, #28]
    f784:	4373      	muls	r3, r6
    f786:	434b      	muls	r3, r1
    const int16_t* old_state_start = state_ptr + 1;
    f788:	1ca2      	adds	r2, r4, #2
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
    f78a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    while (old_state_start != old_state_end) {
    f78e:	4293      	cmp	r3, r2
    f790:	d004      	beq.n	f79c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x40c>
      *new_state_start++ = *old_state_start++;
    f792:	f832 1b02 	ldrh.w	r1, [r2], #2
    f796:	f822 1c04 	strh.w	r1, [r2, #-4]
    while (old_state_start != old_state_end) {
    f79a:	e7f8      	b.n	f78e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3fe>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    f79c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f7a0:	9312      	str	r3, [sp, #72]	; 0x48
    int16_t* result_in_batch = state + (n_memory - 1);
    f7a2:	9b07      	ldr	r3, [sp, #28]
    f7a4:	f8d8 7004 	ldr.w	r7, [r8, #4]
    f7a8:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    f7ac:	3d01      	subs	r5, #1
    f7ae:	006b      	lsls	r3, r5, #1
        result_in_batch += n_memory;
    f7b0:	3302      	adds	r3, #2
    int16_t* result_in_batch = state + (n_memory - 1);
    f7b2:	eb04 0245 	add.w	r2, r4, r5, lsl #1
        result_in_batch += n_memory;
    f7b6:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t* result_in_batch = state + (n_memory - 1);
    f7b8:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
    f7ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f7bc:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    f7c0:	4353      	muls	r3, r2
    f7c2:	9313      	str	r3, [sp, #76]	; 0x4c
    f7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f7ca:	f04f 0800 	mov.w	r8, #0
    f7ce:	9314      	str	r3, [sp, #80]	; 0x50
    f7d0:	9b05      	ldr	r3, [sp, #20]
    f7d2:	4543      	cmp	r3, r8
    f7d4:	dd15      	ble.n	f802 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x472>
      const int8_t* matrix_ptr = weight_feature;
    f7d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f7d8:	930d      	str	r3, [sp, #52]	; 0x34
        const int8_t* vector_in_batch = input + b * n_input;
    f7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int r = 0; r < n_filter; r++) {
    f7dc:	f04f 0900 	mov.w	r9, #0
    f7e0:	454e      	cmp	r6, r9
    f7e2:	dd55      	ble.n	f890 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x500>
        int32_t dot_prod = 0;
    f7e4:	2000      	movs	r0, #0
        for (int c = 0; c < n_input; c++) {
    f7e6:	4602      	mov	r2, r0
    f7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f7ea:	4291      	cmp	r1, r2
    f7ec:	dd36      	ble.n	f85c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4cc>
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
    f7ee:	56b9      	ldrsb	r1, [r7, r2]
    f7f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f7f2:	1b49      	subs	r1, r1, r5
    f7f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f7f6:	f915 c002 	ldrsb.w	ip, [r5, r2]
        for (int c = 0; c < n_input; c++) {
    f7fa:	3201      	adds	r2, #1
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
    f7fc:	fb0c 0001 	mla	r0, ip, r1, r0
        for (int c = 0; c < n_input; c++) {
    f800:	e7f2      	b.n	f7e8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x458>
    f802:	00b3      	lsls	r3, r6, #2
    f804:	930d      	str	r3, [sp, #52]	; 0x34
    f806:	9b07      	ldr	r3, [sp, #28]
    f808:	9811      	ldr	r0, [sp, #68]	; 0x44
    f80a:	4373      	muls	r3, r6
    f80c:	005b      	lsls	r3, r3, #1
    f80e:	930e      	str	r3, [sp, #56]	; 0x38
    f810:	9b07      	ldr	r3, [sp, #28]
    f812:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    f816:	004b      	lsls	r3, r1, #1
    f818:	930c      	str	r3, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; ++b) {
    f81a:	2300      	movs	r3, #0
    for (int b = 0; b < n_batch; b++) {
    f81c:	4684      	mov	ip, r0
    for (int b = 0; b < n_batch; ++b) {
    f81e:	930b      	str	r3, [sp, #44]	; 0x2c
    f820:	9b05      	ldr	r3, [sp, #20]
    f822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f824:	4293      	cmp	r3, r2
    f826:	dd4a      	ble.n	f8be <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x52e>
    f828:	9b08      	ldr	r3, [sp, #32]
    f82a:	f8d3 9004 	ldr.w	r9, [r3, #4]
          b * n_memory * n_filter;
    f82e:	46a0      	mov	r8, r4
      for (int i = 0; i < n_filter; i++) {
    f830:	f1ac 0504 	sub.w	r5, ip, #4
    f834:	f04f 0e00 	mov.w	lr, #0
    f838:	4576      	cmp	r6, lr
    f83a:	dd38      	ble.n	f8ae <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x51e>
        *scratch_ptr_batch = 0;
    f83c:	2300      	movs	r3, #0
    f83e:	f845 3f04 	str.w	r3, [r5, #4]!
        for (int j = 0; j < n_memory; j++) {
    f842:	9f07      	ldr	r7, [sp, #28]
    f844:	429f      	cmp	r7, r3
    f846:	dd2c      	ble.n	f8a2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x512>
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
    f848:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
    f84c:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
    f850:	682f      	ldr	r7, [r5, #0]
    f852:	fb12 7701 	smlabb	r7, r2, r1, r7
    f856:	602f      	str	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
    f858:	3301      	adds	r3, #1
    f85a:	e7f2      	b.n	f842 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4b2>
    f85c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f85e:	9315      	str	r3, [sp, #84]	; 0x54
    f860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f862:	4413      	add	r3, r2
    f864:	930d      	str	r3, [sp, #52]	; 0x34
        dot_prod = MultiplyByQuantizedMultiplier(
    f866:	9b04      	ldr	r3, [sp, #16]
    f868:	689a      	ldr	r2, [r3, #8]
    f86a:	6819      	ldr	r1, [r3, #0]
    f86c:	f7fa f816 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        *result_in_batch = dot_prod;
    f870:	f647 73ff 	movw	r3, #32767	; 0x7fff
    f874:	4298      	cmp	r0, r3
    f876:	bfa8      	it	ge
    f878:	4618      	movge	r0, r3
    f87a:	4b49      	ldr	r3, [pc, #292]	; (f9a0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x610>)
        result_in_batch += n_memory;
    f87c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
    f87e:	4298      	cmp	r0, r3
    f880:	bfb8      	it	lt
    f882:	4618      	movlt	r0, r3
    f884:	9b15      	ldr	r3, [sp, #84]	; 0x54
      for (int r = 0; r < n_filter; r++) {
    f886:	f109 0901 	add.w	r9, r9, #1
        *result_in_batch = dot_prod;
    f88a:	8018      	strh	r0, [r3, #0]
        result_in_batch += n_memory;
    f88c:	4413      	add	r3, r2
      for (int r = 0; r < n_filter; r++) {
    f88e:	e7a7      	b.n	f7e0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x450>
    f890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f894:	441a      	add	r2, r3
    f896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f898:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
    f89a:	f108 0801 	add.w	r8, r8, #1
    f89e:	441f      	add	r7, r3
    f8a0:	e796      	b.n	f7d0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x440>
    f8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int i = 0; i < n_filter; i++) {
    f8a4:	f10e 0e01 	add.w	lr, lr, #1
    f8a8:	4499      	add	r9, r3
    f8aa:	4498      	add	r8, r3
    f8ac:	e7c4      	b.n	f838 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4a8>
    for (int b = 0; b < n_batch; ++b) {
    f8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b0:	3301      	adds	r3, #1
    f8b2:	930b      	str	r3, [sp, #44]	; 0x2c
    f8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8b6:	449c      	add	ip, r3
    f8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f8ba:	441c      	add	r4, r3
    f8bc:	e7b0      	b.n	f820 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x490>
    if (bias_tensor) {
    f8be:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    f8c2:	fb03 f402 	mul.w	r4, r3, r2
    f8c6:	f1bb 0f00 	cmp.w	fp, #0
    f8ca:	d014      	beq.n	f8f6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x566>
    f8cc:	f8db 6004 	ldr.w	r6, [fp, #4]
      for (int i = 0; i < n_batch; ++i) {
    f8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8d2:	009d      	lsls	r5, r3, #2
    f8d4:	2100      	movs	r1, #0
    f8d6:	9b05      	ldr	r3, [sp, #20]
    f8d8:	428b      	cmp	r3, r1
    f8da:	dd15      	ble.n	f908 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x578>
        for (int j = 0; j < n_unit; ++j) {
    f8dc:	2300      	movs	r3, #0
    f8de:	9f06      	ldr	r7, [sp, #24]
    f8e0:	429f      	cmp	r7, r3
    f8e2:	dd05      	ble.n	f8f0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x560>
          *output_ptr++ = *bias_ptr++;
    f8e4:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
    f8e8:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
        for (int j = 0; j < n_unit; ++j) {
    f8ec:	3301      	adds	r3, #1
    f8ee:	e7f6      	b.n	f8de <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x54e>
      for (int i = 0; i < n_batch; ++i) {
    f8f0:	3101      	adds	r1, #1
    f8f2:	442a      	add	r2, r5
    f8f4:	e7ef      	b.n	f8d6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x546>
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f8f6:	465b      	mov	r3, fp
        *output_ptr++ = 0;
    f8f8:	465a      	mov	r2, fp
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f8fa:	429c      	cmp	r4, r3
    f8fc:	dd04      	ble.n	f908 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x578>
        *output_ptr++ = 0;
    f8fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    f900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < n_batch * n_unit; ++i) {
    f904:	3301      	adds	r3, #1
    f906:	e7f8      	b.n	f8fa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56a>
    f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f90a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    f90e:	2300      	movs	r3, #0
    f910:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    f914:	461f      	mov	r7, r3
    for (int b = 0; b < n_batch; ++b) {
    f916:	9a05      	ldr	r2, [sp, #20]
    f918:	42ba      	cmp	r2, r7
    f91a:	dd1e      	ble.n	f95a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;
    f91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f91e:	4680      	mov	r8, r0
      for (int i = 0; i < n_unit; ++i) {
    f920:	eb02 0583 	add.w	r5, r2, r3, lsl #2
    f924:	f04f 0e00 	mov.w	lr, #0
    f928:	9a06      	ldr	r2, [sp, #24]
    f92a:	4572      	cmp	r2, lr
    f92c:	dd0f      	ble.n	f94e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5be>
        for (int j = 0; j < n_rank; ++j) {
    f92e:	2600      	movs	r6, #0
    f930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f932:	42b2      	cmp	r2, r6
    f934:	dd06      	ble.n	f944 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
          output_temp_ptr[i] += *scratch_ptr_batch++;
    f936:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
    f93a:	682a      	ldr	r2, [r5, #0]
    f93c:	440a      	add	r2, r1
    f93e:	602a      	str	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
    f940:	3601      	adds	r6, #1
    f942:	e7f5      	b.n	f930 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
    f944:	44e0      	add	r8, ip
      for (int i = 0; i < n_unit; ++i) {
    f946:	f10e 0e01 	add.w	lr, lr, #1
    f94a:	3504      	adds	r5, #4
    f94c:	e7ec      	b.n	f928 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x598>
    for (int b = 0; b < n_batch; ++b) {
    f94e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f950:	4410      	add	r0, r2
    f952:	9a06      	ldr	r2, [sp, #24]
    f954:	3701      	adds	r7, #1
    f956:	4413      	add	r3, r2
    f958:	e7dd      	b.n	f916 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x586>
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f95a:	2500      	movs	r5, #0
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f95c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f960:	42ac      	cmp	r4, r5
    f962:	f77f ae57 	ble.w	f614 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x284>
      int32_t x2 = MultiplyByQuantizedMultiplier(x1, data.effective_scale_2_a,
    f966:	9b04      	ldr	r3, [sp, #16]
    f968:	68da      	ldr	r2, [r3, #12]
    f96a:	6859      	ldr	r1, [r3, #4]
    f96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f96e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    f972:	f7f9 ff93 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      int32_t x3 = x2 + output_zp;
    f976:	9a10      	ldr	r2, [sp, #64]	; 0x40
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f978:	f8da 3004 	ldr.w	r3, [sl, #4]
      int32_t x3 = x2 + output_zp;
    f97c:	4410      	add	r0, r2
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
    f97e:	287f      	cmp	r0, #127	; 0x7f
    f980:	bfa8      	it	ge
    f982:	207f      	movge	r0, #127	; 0x7f
    f984:	42b0      	cmp	r0, r6
    f986:	bfb8      	it	lt
    f988:	4630      	movlt	r0, r6
    f98a:	5558      	strb	r0, [r3, r5]
    for (int i = 0; i < n_batch * n_unit; ++i) {
    f98c:	3501      	adds	r5, #1
    f98e:	e7e7      	b.n	f960 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    f990:	0002904f 	.word	0x0002904f
    f994:	00027c80 	.word	0x00027c80
    f998:	00028e29 	.word	0x00028e29
    f99c:	00027b73 	.word	0x00027b73
    f9a0:	ffff8000 	.word	0xffff8000

0000f9a4 <_ZN6tflite3ops5micro13Register_SVDFEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    f9a4:	4800      	ldr	r0, [pc, #0]	; (f9a8 <_ZN6tflite3ops5micro13Register_SVDFEv+0x4>)
    f9a6:	4770      	bx	lr
    f9a8:	20000688 	.word	0x20000688

0000f9ac <_ZN6tflite3ops5micro13Register_TANHEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
    f9ac:	4800      	ldr	r0, [pc, #0]	; (f9b0 <_ZN6tflite3ops5micro13Register_TANHEv+0x4>)
    f9ae:	4770      	bx	lr
    f9b0:	200006a8 	.word	0x200006a8

0000f9b4 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    f9b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f9b8:	1812      	adds	r2, r2, r0
    f9ba:	f04f 0300 	mov.w	r3, #0
    f9be:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    f9c2:	1c59      	adds	r1, r3, #1
    f9c4:	bf06      	itte	eq
    f9c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f9ca:	4611      	moveq	r1, r2
    f9cc:	2101      	movne	r1, #1
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
    f9ce:	b570      	push	{r4, r5, r6, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
    f9d0:	bf0c      	ite	eq
    f9d2:	4618      	moveq	r0, r3
    f9d4:	2000      	movne	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    f9d6:	1854      	adds	r4, r2, r1
    f9d8:	eb43 0500 	adc.w	r5, r3, r0
    f9dc:	0feb      	lsrs	r3, r5, #31
    f9de:	18e4      	adds	r4, r4, r3
    f9e0:	ea4f 0354 	mov.w	r3, r4, lsr #1
    f9e4:	f145 0500 	adc.w	r5, r5, #0
    f9e8:	ea43 75c5 	orr.w	r5, r3, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    f9ec:	490c      	ldr	r1, [pc, #48]	; (fa20 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>)
    f9ee:	4628      	mov	r0, r5
    f9f0:	f7fb fce0 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    f9f4:	2603      	movs	r6, #3
    f9f6:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    f9fa:	4621      	mov	r1, r4
    f9fc:	4628      	mov	r0, r5
    f9fe:	f7fb fcd9 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    fa02:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    fa06:	4620      	mov	r0, r4
    fa08:	f7fb fcd4 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
    fa0c:	f00e fa93 	bl	1df36 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
  for (int i = 0; i < 3; i++) {
    fa10:	3e01      	subs	r6, #1
  return a + b;
    fa12:	4404      	add	r4, r0
  for (int i = 0; i < 3; i++) {
    fa14:	d1f1      	bne.n	f9fa <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
    fa16:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
    fa1a:	f00e fa8c 	bl	1df36 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
}
    fa1e:	bd70      	pop	{r4, r5, r6, pc}
    fa20:	c3c3c3c4 	.word	0xc3c3c3c4

0000fa24 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
    fa24:	680b      	ldr	r3, [r1, #0]
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
    fa26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa2a:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
    fa2c:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fa2e:	6885      	ldr	r5, [r0, #8]
    fa30:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    fa32:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
    fa36:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fa3a:	f815 200a 	ldrb.w	r2, [r5, sl]
    fa3e:	eb05 1983 	add.w	r9, r5, r3, lsl #6
    fa42:	f815 3008 	ldrb.w	r3, [r5, r8]
    fa46:	4293      	cmp	r3, r2
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
    fa48:	b097      	sub	sp, #92	; 0x5c
    fa4a:	4604      	mov	r4, r0
  return &context->tensors[node->inputs->data[index]];
    fa4c:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fa50:	d02e      	beq.n	fab0 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    fa52:	f8d0 b014 	ldr.w	fp, [r0, #20]
    fa56:	4610      	mov	r0, r2
    fa58:	f7f0 ff2b 	bl	8b2 <TfLiteTypeGetName>
    fa5c:	4606      	mov	r6, r0
    fa5e:	f815 0008 	ldrb.w	r0, [r5, r8]
    fa62:	f7f0 ff26 	bl	8b2 <TfLiteTypeGetName>
    fa66:	4b71      	ldr	r3, [pc, #452]	; (fc2c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x208>)
    fa68:	9301      	str	r3, [sp, #4]
    fa6a:	4b71      	ldr	r3, [pc, #452]	; (fc30 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
    fa6c:	9300      	str	r3, [sp, #0]
    fa6e:	e9cd 6002 	strd	r6, r0, [sp, #8]
    fa72:	4a70      	ldr	r2, [pc, #448]	; (fc34 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    fa74:	4970      	ldr	r1, [pc, #448]	; (fc38 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x214>)
    fa76:	232f      	movs	r3, #47	; 0x2f
    fa78:	4620      	mov	r0, r4
    fa7a:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
    fa7c:	f815 600a 	ldrb.w	r6, [r5, sl]
    fa80:	2e01      	cmp	r6, #1
    fa82:	f040 808e 	bne.w	fba2 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    switch (output->type) {
    fa86:	f815 3008 	ldrb.w	r3, [r5, r8]
    fa8a:	2b01      	cmp	r3, #1
    fa8c:	d177      	bne.n	fb7e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
    fa8e:	4639      	mov	r1, r7
    fa90:	a80a      	add	r0, sp, #40	; 0x28
    fa92:	f005 ff60 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
    fa96:	4649      	mov	r1, r9
    fa98:	a810      	add	r0, sp, #64	; 0x40
    fa9a:	687e      	ldr	r6, [r7, #4]
    fa9c:	f005 ff5b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    faa0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    faa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    faa4:	f8d9 5004 	ldr.w	r5, [r9, #4]
    faa8:	429f      	cmp	r7, r3
    faaa:	d035      	beq.n	fb18 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xf4>
    faac:	f00e fda2 	bl	1e5f4 <abort>
  if (input->type == kTfLiteInt8) {
    fab0:	2b09      	cmp	r3, #9
    fab2:	d1e3      	bne.n	fa7c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    fab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    fab8:	b163      	cbz	r3, fad4 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    faba:	2200      	movs	r2, #0
    fabc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    fac0:	4b5e      	ldr	r3, [pc, #376]	; (fc3c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x218>)
    fac2:	9301      	str	r3, [sp, #4]
    fac4:	4b5e      	ldr	r3, [pc, #376]	; (fc40 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
    fac6:	9300      	str	r3, [sp, #0]
    fac8:	6946      	ldr	r6, [r0, #20]
    faca:	4a5a      	ldr	r2, [pc, #360]	; (fc34 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x210>)
    facc:	495d      	ldr	r1, [pc, #372]	; (fc44 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x220>)
    face:	2331      	movs	r3, #49	; 0x31
    fad0:	47b0      	blx	r6
    fad2:	e7d3      	b.n	fa7c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
    fad4:	68f8      	ldr	r0, [r7, #12]
    fad6:	f7f1 f8c7 	bl	c68 <__aeabi_f2d>
    const double input_real_multiplier =
    fada:	4b5b      	ldr	r3, [pc, #364]	; (fc48 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x224>)
    fadc:	2200      	movs	r2, #0
    fade:	f7f1 f91b 	bl	d18 <__aeabi_dmul>
    fae2:	ec41 0b10 	vmov	d0, r0, r1
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    fae6:	a809      	add	r0, sp, #36	; 0x24
    fae8:	f002 fa16 	bl	11f18 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    faec:	4b57      	ldr	r3, [pc, #348]	; (fc4c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x228>)
    faee:	2200      	movs	r2, #0
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
    faf0:	ec51 0b10 	vmov	r0, r1, d0
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    faf4:	f7f1 f910 	bl	d18 <__aeabi_dmul>
    faf8:	ec41 0b10 	vmov	d0, r0, r1
    fafc:	f002 fa42 	bl	11f84 <round>
    fb00:	ec51 0b10 	vmov	r0, r1, d0
    fb04:	f7f1 fba2 	bl	124c <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    fb08:	9909      	ldr	r1, [sp, #36]	; 0x24
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
    fb0a:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
    fb0c:	221f      	movs	r2, #31
    fb0e:	2004      	movs	r0, #4
    fb10:	f00e fc5b 	bl	1e3ca <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
    fb14:	9007      	str	r0, [sp, #28]
    fb16:	e7b1      	b.n	fa7c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x58>
  for (int i = 0; i < dims_count; ++i) {
    fb18:	2400      	movs	r4, #0
    fb1a:	42a7      	cmp	r7, r4
    fb1c:	dd0c      	ble.n	fb38 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x114>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fb1e:	4621      	mov	r1, r4
    fb20:	a80a      	add	r0, sp, #40	; 0x28
    fb22:	f005 fede 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    fb26:	4621      	mov	r1, r4
    fb28:	4680      	mov	r8, r0
    fb2a:	a810      	add	r0, sp, #64	; 0x40
    fb2c:	f005 fed9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    fb30:	4580      	cmp	r8, r0
    fb32:	d1bb      	bne.n	faac <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x88>
  for (int i = 0; i < dims_count; ++i) {
    fb34:	3401      	adds	r4, #1
    fb36:	e7f0      	b.n	fb1a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xf6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fb38:	2f05      	cmp	r7, #5
    fb3a:	bfcc      	ite	gt
    fb3c:	9a0b      	ldrgt	r2, [sp, #44]	; 0x2c
    fb3e:	aa0b      	addle	r2, sp, #44	; 0x2c
    for (int i = 0; i < size_; i++) {
    fb40:	2300      	movs	r3, #0
    int buffer_size = 1;
    fb42:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
    fb46:	429f      	cmp	r7, r3
    fb48:	dc0b      	bgt.n	fb62 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x13e>
    fb4a:	462c      	mov	r4, r5

inline void Tanh(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    fb4c:	2500      	movs	r5, #0
    fb4e:	4545      	cmp	r5, r8
    fb50:	da0d      	bge.n	fb6e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x14a>
  { return __builtin_tanhf(__x); }
    fb52:	ecb6 0a01 	vldmia	r6!, {s0}
    fb56:	f002 fba7 	bl	122a8 <tanhf>
    fb5a:	3501      	adds	r5, #1
    float val = input_data[i];
    float result = std::tanh(val);
    output_data[i] = result;
    fb5c:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
    fb60:	e7f5      	b.n	fb4e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x12a>
      buffer_size *= dims_data[i];
    fb62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
    fb66:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
    fb68:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
    fb6c:	e7eb      	b.n	fb46 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x122>
                            GetTensorShape(output),
    fb6e:	a810      	add	r0, sp, #64	; 0x40
    fb70:	f005 feac 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
    fb74:	a80a      	add	r0, sp, #40	; 0x28
    fb76:	f005 fea9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
    fb7a:	2600      	movs	r6, #0
    fb7c:	e00d      	b.n	fb9a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x176>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    fb7e:	4630      	mov	r0, r6
    fb80:	6967      	ldr	r7, [r4, #20]
    fb82:	f7f0 fe96 	bl	8b2 <TfLiteTypeGetName>
    fb86:	9004      	str	r0, [sp, #16]
    fb88:	f815 0008 	ldrb.w	r0, [r5, r8]
    fb8c:	f7f0 fe91 	bl	8b2 <TfLiteTypeGetName>
    fb90:	9a04      	ldr	r2, [sp, #16]
    fb92:	492f      	ldr	r1, [pc, #188]	; (fc50 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    fb94:	4603      	mov	r3, r0
    fb96:	4620      	mov	r0, r4
    fb98:	47b8      	blx	r7
}
    fb9a:	4630      	mov	r0, r6
    fb9c:	b017      	add	sp, #92	; 0x5c
    fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
    fba2:	2e09      	cmp	r6, #9
    fba4:	d131      	bne.n	fc0a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    switch (output->type) {
    fba6:	f815 3008 	ldrb.w	r3, [r5, r8]
    fbaa:	2b09      	cmp	r3, #9
    fbac:	d12d      	bne.n	fc0a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1e6>
  for (int i = 0; i < dims->size; ++i) {
    fbae:	68be      	ldr	r6, [r7, #8]
            input->params.zero_point, data.input_range_radius,
    fbb0:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Tanh(
    fbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbb4:	f856 8b04 	ldr.w	r8, [r6], #4
  int64_t count = 1;
    fbb8:	2401      	movs	r4, #1
    fbba:	2500      	movs	r5, #0
    fbbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    fbc0:	e9cd 4504 	strd	r4, r5, [sp, #16]
  for (int i = 0; i < dims->size; ++i) {
    fbc4:	f04f 0c00 	mov.w	ip, #0
    fbc8:	45e0      	cmp	r8, ip
    fbca:	dd14      	ble.n	fbf6 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    count *= dims->data[i];
    fbcc:	f856 eb04 	ldr.w	lr, [r6], #4
    fbd0:	9c04      	ldr	r4, [sp, #16]
    fbd2:	ea4f 7bee 	mov.w	fp, lr, asr #31
    fbd6:	fb04 fa0b 	mul.w	sl, r4, fp
    fbda:	9c05      	ldr	r4, [sp, #20]
    fbdc:	fb0e aa04 	mla	sl, lr, r4, sl
    fbe0:	9c04      	ldr	r4, [sp, #16]
    fbe2:	fba4 450e 	umull	r4, r5, r4, lr
    fbe6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fbea:	9c05      	ldr	r4, [sp, #20]
    fbec:	4454      	add	r4, sl
    fbee:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
    fbf0:	f10c 0c01 	add.w	ip, ip, #1
    fbf4:	e7e8      	b.n	fbc8 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    fbf6:	f8d9 5004 	ldr.w	r5, [r9, #4]
    fbfa:	9502      	str	r5, [sp, #8]
    fbfc:	687d      	ldr	r5, [r7, #4]
    fbfe:	9c04      	ldr	r4, [sp, #16]
    fc00:	9501      	str	r5, [sp, #4]
    fc02:	9400      	str	r4, [sp, #0]
    fc04:	f00e f9c9 	bl	1df9a <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa>
    fc08:	e7b7      	b.n	fb7a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x156>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    fc0a:	4630      	mov	r0, r6
    fc0c:	6967      	ldr	r7, [r4, #20]
    fc0e:	f7f0 fe50 	bl	8b2 <TfLiteTypeGetName>
    fc12:	9004      	str	r0, [sp, #16]
    fc14:	f815 0008 	ldrb.w	r0, [r5, r8]
    fc18:	f7f0 fe4b 	bl	8b2 <TfLiteTypeGetName>
    fc1c:	9a04      	ldr	r2, [sp, #16]
    fc1e:	490c      	ldr	r1, [pc, #48]	; (fc50 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    fc20:	4603      	mov	r3, r0
    fc22:	4620      	mov	r0, r4
    fc24:	47b8      	blx	r7
    return kTfLiteError;
    fc26:	2601      	movs	r6, #1
    fc28:	e7b7      	b.n	fb9a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x176>
    fc2a:	bf00      	nop
    fc2c:	00028380 	.word	0x00028380
    fc30:	00028398 	.word	0x00028398
    fc34:	0002905e 	.word	0x0002905e
    fc38:	00027bae 	.word	0x00027bae
    fc3c:	00029369 	.word	0x00029369
    fc40:	0002858c 	.word	0x0002858c
    fc44:	00027b73 	.word	0x00027b73
    fc48:	41a00000 	.word	0x41a00000
    fc4c:	41e00000 	.word	0x41e00000
    fc50:	000280ff 	.word	0x000280ff

0000fc54 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc58:	b085      	sub	sp, #20
  TfLiteUnpackParams* data =
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fc5a:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    fc5c:	9002      	str	r0, [sp, #8]
  return &context->tensors[node->inputs->data[index]];
    fc5e:	6808      	ldr	r0, [r1, #0]
  TfLiteUnpackParams* data =
    fc60:	694a      	ldr	r2, [r1, #20]
    fc62:	6847      	ldr	r7, [r0, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    fc64:	9301      	str	r3, [sp, #4]
    fc66:	01b8      	lsls	r0, r7, #6
    fc68:	eb03 1787 	add.w	r7, r3, r7, lsl #6

  switch (input->type) {
    fc6c:	5c18      	ldrb	r0, [r3, r0]
    fc6e:	1e45      	subs	r5, r0, #1
    fc70:	2d08      	cmp	r5, #8
    fc72:	f200 81b8 	bhi.w	ffe6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    fc76:	e8df f015 	tbh	[pc, r5, lsl #1]
    fc7a:	0009      	.short	0x0009
    fc7c:	00de0076 	.word	0x00de0076
    fc80:	01b601b6 	.word	0x01b601b6
    fc84:	01b601b6 	.word	0x01b601b6
    fc88:	014a01b6 	.word	0x014a01b6
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
    fc8c:	e9d2 9200 	ldrd	r9, r2, [r2]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
    fc90:	6848      	ldr	r0, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
    fc92:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->outputs->data[index]];
    fc94:	6841      	ldr	r1, [r0, #4]
  const int dimensions = input_dims->size;
    fc96:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* output_dims = output0->dims;
    fc9a:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fc9c:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fc9e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    axis += NumDimensions(input);
    fca2:	bfb8      	it	lt
    fca4:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fca6:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fca8:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fcaa:	dd0c      	ble.n	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fcac:	f105 0c04 	add.w	ip, r5, #4
    fcb0:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    fcb2:	2100      	movs	r1, #0
  int outer_size = 1;
    fcb4:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    fcb6:	428a      	cmp	r2, r1
    fcb8:	dd07      	ble.n	fcca <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
    outer_size *= input_dims->data[i];
    fcba:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    fcbe:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
    fcc0:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    fcc4:	e7f7      	b.n	fcb6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
  TFLITE_DCHECK_LT(axis, dimensions);
    fcc6:	f00e fc95 	bl	1e5f4 <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
    fcca:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    fccc:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fcce:	458e      	cmp	lr, r1
    fcd0:	d10c      	bne.n	fcec <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
  for (int i = 0; i < output_dims->size; ++i) {
    fcd2:	4621      	mov	r1, r4
    fcd4:	2600      	movs	r6, #0
    fcd6:	f851 eb04 	ldr.w	lr, [r1], #4
  int output_size = 1;
    fcda:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fcdc:	45b6      	cmp	lr, r6
    fcde:	dd0a      	ble.n	fcf6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    output_size *= output_dims->data[i];
    fce0:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fce4:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
    fce6:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
    fcea:	e7f7      	b.n	fcdc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    copy_size *= input_dims->data[i];
    fcec:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fcf0:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
    fcf2:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    fcf4:	e7eb      	b.n	fcce <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fcf6:	fb02 f105 	mul.w	r1, r2, r5
    fcfa:	428c      	cmp	r4, r1
    fcfc:	d1e3      	bne.n	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fcfe:	6879      	ldr	r1, [r7, #4]
    fd00:	9102      	str	r1, [sp, #8]
    fd02:	2400      	movs	r4, #0
    fd04:	fb02 f109 	mul.w	r1, r2, r9
    fd08:	3004      	adds	r0, #4
    fd0a:	9103      	str	r1, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    fd0c:	4627      	mov	r7, r4
    fd0e:	45b9      	cmp	r9, r7
    fd10:	dc03      	bgt.n	fd1a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
    fd12:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
    fd14:	b005      	add	sp, #20
    fd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd1a:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fd1e:	9b01      	ldr	r3, [sp, #4]
    fd20:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
  for (int i = 0; i < output_count; ++i) {
    fd24:	f04f 0600 	mov.w	r6, #0
    fd28:	bf18      	it	ne
    fd2a:	6849      	ldrne	r1, [r1, #4]
    fd2c:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    fd2e:	46b6      	mov	lr, r6
    fd30:	4575      	cmp	r5, lr
    fd32:	dd15      	ble.n	fd60 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>
    fd34:	9b02      	ldr	r3, [sp, #8]
    fd36:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
    fd3a:	eb03 0b8c 	add.w	fp, r3, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fd3e:	f04f 0800 	mov.w	r8, #0
    fd42:	4542      	cmp	r2, r8
    fd44:	dd06      	ble.n	fd54 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
    fd46:	ecfb 7a01 	vldmia	fp!, {s15}
    fd4a:	f108 0801 	add.w	r8, r8, #1
    fd4e:	ecea 7a01 	vstmia	sl!, {s15}
    fd52:	e7f6      	b.n	fd42 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
    for (int k = 0; k < outer_size; ++k) {
    fd54:	9b03      	ldr	r3, [sp, #12]
    fd56:	f10e 0e01 	add.w	lr, lr, #1
    fd5a:	449c      	add	ip, r3
    fd5c:	4416      	add	r6, r2
    fd5e:	e7e7      	b.n	fd30 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdc>
  for (int i = 0; i < output_count; ++i) {
    fd60:	3701      	adds	r7, #1
    fd62:	4414      	add	r4, r2
    fd64:	e7d3      	b.n	fd0e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
    fd66:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
    fd6a:	6848      	ldr	r0, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
    fd6c:	68bd      	ldr	r5, [r7, #8]
    fd6e:	6841      	ldr	r1, [r0, #4]
  const int dimensions = input_dims->size;
    fd70:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* output_dims = output0->dims;
    fd74:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fd76:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fd78:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    axis += NumDimensions(input);
    fd7c:	bfb8      	it	lt
    fd7e:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fd80:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fd82:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fd84:	dd9f      	ble.n	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fd86:	f105 0c04 	add.w	ip, r5, #4
    fd8a:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
    fd8c:	2100      	movs	r1, #0
  int outer_size = 1;
    fd8e:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
    fd90:	428a      	cmp	r2, r1
    fd92:	dd05      	ble.n	fda0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    outer_size *= input_dims->data[i];
    fd94:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
    fd98:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
    fd9a:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
    fd9e:	e7f7      	b.n	fd90 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13c>
  for (int i = axis + 1; i < dimensions; ++i) {
    fda0:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
    fda2:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fda4:	458e      	cmp	lr, r1
    fda6:	d10c      	bne.n	fdc2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
  for (int i = 0; i < output_dims->size; ++i) {
    fda8:	4621      	mov	r1, r4
    fdaa:	2600      	movs	r6, #0
    fdac:	f851 eb04 	ldr.w	lr, [r1], #4
  int output_size = 1;
    fdb0:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fdb2:	45b6      	cmp	lr, r6
    fdb4:	dd0a      	ble.n	fdcc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    output_size *= output_dims->data[i];
    fdb6:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fdba:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
    fdbc:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
    fdc0:	e7f7      	b.n	fdb2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    copy_size *= input_dims->data[i];
    fdc2:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fdc6:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
    fdc8:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
    fdca:	e7eb      	b.n	fda4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x150>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fdcc:	fb02 f105 	mul.w	r1, r2, r5
    fdd0:	428c      	cmp	r4, r1
    fdd2:	f47f af78 	bne.w	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	9302      	str	r3, [sp, #8]
    fdda:	2400      	movs	r4, #0
    fddc:	fb02 f30b 	mul.w	r3, r2, fp
    fde0:	3004      	adds	r0, #4
    fde2:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    fde4:	4627      	mov	r7, r4
    fde6:	45bb      	cmp	fp, r7
    fde8:	dd93      	ble.n	fd12 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    fdea:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fdee:	9b01      	ldr	r3, [sp, #4]
    fdf0:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
    fdf4:	f04f 0600 	mov.w	r6, #0
    fdf8:	bf18      	it	ne
    fdfa:	6849      	ldrne	r1, [r1, #4]
    fdfc:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
    fdfe:	46b6      	mov	lr, r6
    fe00:	4575      	cmp	r5, lr
    fe02:	dd15      	ble.n	fe30 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    fe04:	9b02      	ldr	r3, [sp, #8]
    fe06:	eb01 0986 	add.w	r9, r1, r6, lsl #2
    fe0a:	eb03 0a8c 	add.w	sl, r3, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fe0e:	f04f 0800 	mov.w	r8, #0
    fe12:	4542      	cmp	r2, r8
    fe14:	dd06      	ble.n	fe24 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    fe16:	f85a 3b04 	ldr.w	r3, [sl], #4
    fe1a:	f849 3b04 	str.w	r3, [r9], #4
    fe1e:	f108 0801 	add.w	r8, r8, #1
    fe22:	e7f6      	b.n	fe12 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
    for (int k = 0; k < outer_size; ++k) {
    fe24:	9b03      	ldr	r3, [sp, #12]
    fe26:	f10e 0e01 	add.w	lr, lr, #1
    fe2a:	449c      	add	ip, r3
    fe2c:	4416      	add	r6, r2
    fe2e:	e7e7      	b.n	fe00 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  for (int i = 0; i < output_count; ++i) {
    fe30:	3701      	adds	r7, #1
    fe32:	4414      	add	r4, r2
    fe34:	e7d7      	b.n	fde6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
    fe36:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input->dims;
    fe3a:	68be      	ldr	r6, [r7, #8]
    fe3c:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
    fe3e:	f8d6 e000 	ldr.w	lr, [r6]
    fe42:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
    fe44:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    fe46:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    fe48:	eb03 1380 	add.w	r3, r3, r0, lsl #6
    axis += NumDimensions(input);
    fe4c:	bfb8      	it	lt
    fe4e:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    fe50:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    fe52:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    fe54:	f77f af37 	ble.w	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    fe58:	f106 0c04 	add.w	ip, r6, #4
    fe5c:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    fe5e:	2300      	movs	r3, #0
  int outer_size = 1;
    fe60:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    fe62:	429a      	cmp	r2, r3
    fe64:	dd05      	ble.n	fe72 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    outer_size *= input_dims->data[i];
    fe66:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    fe6a:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
    fe6c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    fe70:	e7f7      	b.n	fe62 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = axis + 1; i < dimensions; ++i) {
    fe72:	3201      	adds	r2, #1
  int copy_size = 1;
    fe74:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    fe76:	4596      	cmp	lr, r2
    fe78:	d10c      	bne.n	fe94 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
  for (int i = 0; i < output_dims->size; ++i) {
    fe7a:	462a      	mov	r2, r5
  int output_size = 1;
    fe7c:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
    fe7e:	f852 eb04 	ldr.w	lr, [r2], #4
    fe82:	2500      	movs	r5, #0
    fe84:	45ae      	cmp	lr, r5
    fe86:	dd0a      	ble.n	fe9e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
    output_size *= output_dims->data[i];
    fe88:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
    fe8c:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
    fe8e:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
    fe92:	e7f7      	b.n	fe84 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
    copy_size *= input_dims->data[i];
    fe94:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    fe98:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
    fe9a:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    fe9c:	e7eb      	b.n	fe76 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    fe9e:	fb03 f206 	mul.w	r2, r3, r6
    fea2:	4290      	cmp	r0, r2
    fea4:	f47f af0f 	bne.w	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    fea8:	687a      	ldr	r2, [r7, #4]
    feaa:	9201      	str	r2, [sp, #4]
    feac:	2000      	movs	r0, #0
    feae:	fb03 f20b 	mul.w	r2, r3, fp
    feb2:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    feb4:	4605      	mov	r5, r0
    feb6:	45ab      	cmp	fp, r5
    feb8:	f77f af2b 	ble.w	fd12 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    febc:	684a      	ldr	r2, [r1, #4]
    febe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    fec2:	4684      	mov	ip, r0
    fec4:	6857      	ldr	r7, [r2, #4]
    fec6:	9a02      	ldr	r2, [sp, #8]
    fec8:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    feca:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    fece:	f04f 0700 	mov.w	r7, #0
    fed2:	bf18      	it	ne
    fed4:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    fed6:	46be      	mov	lr, r7
    fed8:	4576      	cmp	r6, lr
    feda:	dd15      	ble.n	ff08 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    fedc:	9c01      	ldr	r4, [sp, #4]
    fede:	eb02 0907 	add.w	r9, r2, r7
    fee2:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    fee6:	f04f 0800 	mov.w	r8, #0
    feea:	4543      	cmp	r3, r8
    feec:	dd06      	ble.n	fefc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    feee:	f81a 4b01 	ldrb.w	r4, [sl], #1
    fef2:	f809 4b01 	strb.w	r4, [r9], #1
    fef6:	f108 0801 	add.w	r8, r8, #1
    fefa:	e7f6      	b.n	feea <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
    for (int k = 0; k < outer_size; ++k) {
    fefc:	9c03      	ldr	r4, [sp, #12]
    fefe:	f10e 0e01 	add.w	lr, lr, #1
    ff02:	44a4      	add	ip, r4
    ff04:	441f      	add	r7, r3
    ff06:	e7e7      	b.n	fed8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
  for (int i = 0; i < output_count; ++i) {
    ff08:	3501      	adds	r5, #1
    ff0a:	4418      	add	r0, r3
    ff0c:	e7d3      	b.n	feb6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x262>
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
    ff0e:	e9d2 b200 	ldrd	fp, r2, [r2]
  const TfLiteIntArray* input_dims = input->dims;
    ff12:	68b8      	ldr	r0, [r7, #8]
    ff14:	684d      	ldr	r5, [r1, #4]
  const int dimensions = input_dims->size;
    ff16:	f8d0 e000 	ldr.w	lr, [r0]
    ff1a:	686d      	ldr	r5, [r5, #4]
  const TfLiteIntArray* output_dims = output0->dims;
    ff1c:	9b01      	ldr	r3, [sp, #4]
  if (axis < 0) {
    ff1e:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
    ff20:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    axis += NumDimensions(input);
    ff24:	bfb8      	it	lt
    ff26:	4472      	addlt	r2, lr
  TFLITE_DCHECK_LT(axis, dimensions);
    ff28:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
    ff2a:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
    ff2c:	f77f aecb 	ble.w	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    ff30:	f100 0c04 	add.w	ip, r0, #4
    ff34:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
    ff36:	2300      	movs	r3, #0
  int outer_size = 1;
    ff38:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
    ff3a:	429a      	cmp	r2, r3
    ff3c:	dd05      	ble.n	ff4a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    outer_size *= input_dims->data[i];
    ff3e:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
    ff42:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
    ff44:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
    ff48:	e7f7      	b.n	ff3a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
  for (int i = axis + 1; i < dimensions; ++i) {
    ff4a:	3201      	adds	r2, #1
  int copy_size = 1;
    ff4c:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
    ff4e:	4596      	cmp	lr, r2
    ff50:	d10c      	bne.n	ff6c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>
  for (int i = 0; i < output_dims->size; ++i) {
    ff52:	462a      	mov	r2, r5
  int output_size = 1;
    ff54:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
    ff56:	f852 eb04 	ldr.w	lr, [r2], #4
    ff5a:	2500      	movs	r5, #0
    ff5c:	45ae      	cmp	lr, r5
    ff5e:	dd0a      	ble.n	ff76 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x322>
    output_size *= output_dims->data[i];
    ff60:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
    ff64:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
    ff66:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
    ff6a:	e7f7      	b.n	ff5c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
    copy_size *= input_dims->data[i];
    ff6c:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
    ff70:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
    ff72:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
    ff74:	e7eb      	b.n	ff4e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
    ff76:	fb03 f206 	mul.w	r2, r3, r6
    ff7a:	4290      	cmp	r0, r2
    ff7c:	f47f aea3 	bne.w	fcc6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    ff80:	687a      	ldr	r2, [r7, #4]
    ff82:	9201      	str	r2, [sp, #4]
    ff84:	2000      	movs	r0, #0
    ff86:	fb03 f20b 	mul.w	r2, r3, fp
    ff8a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
    ff8c:	4605      	mov	r5, r0
    ff8e:	45ab      	cmp	fp, r5
    ff90:	f77f aebf 	ble.w	fd12 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    ff94:	684a      	ldr	r2, [r1, #4]
    ff96:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    ff9a:	4684      	mov	ip, r0
    ff9c:	6857      	ldr	r7, [r2, #4]
    ff9e:	9a02      	ldr	r2, [sp, #8]
    ffa0:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    ffa2:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
    ffa6:	f04f 0700 	mov.w	r7, #0
    ffaa:	bf18      	it	ne
    ffac:	6852      	ldrne	r2, [r2, #4]
    for (int k = 0; k < outer_size; ++k) {
    ffae:	46be      	mov	lr, r7
    ffb0:	4576      	cmp	r6, lr
    ffb2:	dd15      	ble.n	ffe0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38c>
    ffb4:	9c01      	ldr	r4, [sp, #4]
    ffb6:	eb02 0907 	add.w	r9, r2, r7
    ffba:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
    ffbe:	f04f 0800 	mov.w	r8, #0
    ffc2:	4543      	cmp	r3, r8
    ffc4:	dd06      	ble.n	ffd4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x380>
    ffc6:	f91a 4b01 	ldrsb.w	r4, [sl], #1
    ffca:	f809 4b01 	strb.w	r4, [r9], #1
    ffce:	f108 0801 	add.w	r8, r8, #1
    ffd2:	e7f6      	b.n	ffc2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    for (int k = 0; k < outer_size; ++k) {
    ffd4:	9c03      	ldr	r4, [sp, #12]
    ffd6:	f10e 0e01 	add.w	lr, lr, #1
    ffda:	44a4      	add	ip, r4
    ffdc:	441f      	add	r7, r3
    ffde:	e7e7      	b.n	ffb0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>
  for (int i = 0; i < output_count; ++i) {
    ffe0:	3501      	adds	r5, #1
    ffe2:	4418      	add	r0, r3
    ffe4:	e7d3      	b.n	ff8e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by unpack.",
    ffe6:	9b02      	ldr	r3, [sp, #8]
    ffe8:	695d      	ldr	r5, [r3, #20]
    ffea:	f7f0 fc62 	bl	8b2 <TfLiteTypeGetName>
    ffee:	4903      	ldr	r1, [pc, #12]	; (fffc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a8>)
    fff0:	4602      	mov	r2, r0
    fff2:	9802      	ldr	r0, [sp, #8]
    fff4:	47a8      	blx	r5
      return kTfLiteError;
    fff6:	2001      	movs	r0, #1
    fff8:	e68c      	b.n	fd14 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
    fffa:	bf00      	nop
    fffc:	00029084 	.word	0x00029084

00010000 <_ZN6tflite3ops5micro15Register_UNPACKEv>:
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}
   10000:	4800      	ldr	r0, [pc, #0]	; (10004 <_ZN6tflite3ops5micro15Register_UNPACKEv+0x4>)
   10002:	4770      	bx	lr
   10004:	200006c8 	.word	0x200006c8

00010008 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
   10008:	b570      	push	{r4, r5, r6, lr}
   1000a:	4604      	mov	r4, r0
   1000c:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   1000e:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   10012:	428d      	cmp	r5, r1
   10014:	db05      	blt.n	10022 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
   10016:	460a      	mov	r2, r1
   10018:	490b      	ldr	r1, [pc, #44]	; (10048 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
   1001a:	f00e f951 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
   1001e:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
   10020:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   10022:	68e0      	ldr	r0, [r4, #12]
   10024:	012e      	lsls	r6, r5, #4
   10026:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
   1002a:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
   1002c:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
   1002e:	9b04      	ldr	r3, [sp, #16]
   10030:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
   10032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10036:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
   10038:	3501      	adds	r5, #1
  need_to_calculate_offsets_ = true;
   1003a:	2301      	movs	r3, #1
  ++buffer_count_;
   1003c:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
   1003e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
   10042:	2000      	movs	r0, #0
   10044:	e7ec      	b.n	10020 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   10046:	bf00      	nop
   10048:	000290aa 	.word	0x000290aa

0001004c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   1004c:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   1004e:	4c0d      	ldr	r4, [pc, #52]	; (10084 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
   10050:	6004      	str	r4, [r0, #0]
   10052:	2400      	movs	r4, #0
   10054:	6084      	str	r4, [r0, #8]
   10056:	2401      	movs	r4, #1
   10058:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   1005c:	60c1      	str	r1, [r0, #12]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   1005e:	2428      	movs	r4, #40	; 0x28
   10060:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   10064:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
   10068:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   1006a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
   1006e:	6141      	str	r1, [r0, #20]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   10070:	240c      	movs	r4, #12
  next_free += sizeof(int) * max_buffer_count_;
   10072:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   10076:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   10078:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   1007c:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   1007e:	6242      	str	r2, [r0, #36]	; 0x24
}
   10080:	bd10      	pop	{r4, pc}
   10082:	bf00      	nop
   10084:	00025968 	.word	0x00025968

00010088 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   10088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1008a:	4614      	mov	r4, r2
   1008c:	4605      	mov	r5, r0
   1008e:	460f      	mov	r7, r1
   10090:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   10092:	f00e f83e 	bl	1e112 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   10096:	2c00      	cmp	r4, #0
   10098:	db02      	blt.n	100a0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   1009a:	68ab      	ldr	r3, [r5, #8]
   1009c:	42a3      	cmp	r3, r4
   1009e:	dc07      	bgt.n	100b0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
   100a0:	68ab      	ldr	r3, [r5, #8]
   100a2:	4906      	ldr	r1, [pc, #24]	; (100bc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   100a4:	4622      	mov	r2, r4
   100a6:	4638      	mov	r0, r7
   100a8:	f00e f90a 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   100ac:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   100ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   100b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   100b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   100b6:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   100b8:	2000      	movs	r0, #0
   100ba:	e7f8      	b.n	100ae <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   100bc:	000290c7 	.word	0x000290c7

000100c0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   100c0:	b538      	push	{r3, r4, r5, lr}
   100c2:	4604      	mov	r4, r0
   100c4:	4610      	mov	r0, r2
   100c6:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   100c8:	b924      	cbnz	r4, 100d4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
   100ca:	4910      	ldr	r1, [pc, #64]	; (1010c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
   100cc:	f00e f8f8 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   100d0:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   100d2:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
   100d4:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   100d6:	2d08      	cmp	r5, #8
   100d8:	d80d      	bhi.n	100f6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
   100da:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
   100dc:	2300      	movs	r3, #0
   100de:	429d      	cmp	r5, r3
   100e0:	d011      	beq.n	10106 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    FLATBUFFERS_ASSERT(i < size());
   100e2:	6820      	ldr	r0, [r4, #0]
   100e4:	4283      	cmp	r3, r0
   100e6:	d308      	bcc.n	100fa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
   100e8:	4b09      	ldr	r3, [pc, #36]	; (10110 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   100ea:	4a0a      	ldr	r2, [pc, #40]	; (10114 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   100ec:	480a      	ldr	r0, [pc, #40]	; (10118 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   100ee:	f240 1101 	movw	r1, #257	; 0x101
   100f2:	f004 f9a2 	bl	1443a <__assert_func>
      TF_LITE_REPORT_ERROR(
   100f6:	4909      	ldr	r1, [pc, #36]	; (1011c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
   100f8:	e7e8      	b.n	100cc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   100fa:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   100fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
   10102:	3301      	adds	r3, #1
   10104:	e7eb      	b.n	100de <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   10106:	2000      	movs	r0, #0
   10108:	e7e3      	b.n	100d2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   1010a:	bf00      	nop
   1010c:	000290f0 	.word	0x000290f0
   10110:	00026af1 	.word	0x00026af1
   10114:	00026c28 	.word	0x00026c28
   10118:	00026bcf 	.word	0x00026bcf
   1011c:	0002911e 	.word	0x0002911e

00010120 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   10120:	b508      	push	{r3, lr}
   10122:	4603      	mov	r3, r0
   10124:	4610      	mov	r0, r2
   10126:	2b0a      	cmp	r3, #10
   10128:	d821      	bhi.n	1016e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4e>
   1012a:	e8df f003 	tbb	[pc, r3]
   1012e:	060a      	.short	0x060a
   10130:	1a181412 	.word	0x1a181412
   10134:	161e101c 	.word	0x161e101c
   10138:	0e          	.byte	0x0e
   10139:	00          	.byte	0x00
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
   1013a:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
   1013c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
   1013e:	2300      	movs	r3, #0
   10140:	e001      	b.n	10146 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
      *type = kTfLiteFloat32;
   10142:	2201      	movs	r2, #1
   10144:	700a      	strb	r2, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
   10146:	4618      	mov	r0, r3
   10148:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
   1014a:	230b      	movs	r3, #11
   1014c:	e7f6      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
   1014e:	2307      	movs	r3, #7
   10150:	e7f4      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
   10152:	2302      	movs	r3, #2
   10154:	e7f2      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
   10156:	2303      	movs	r3, #3
   10158:	e7f0      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
   1015a:	2309      	movs	r3, #9
   1015c:	e7ee      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
   1015e:	2304      	movs	r3, #4
   10160:	e7ec      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
   10162:	2305      	movs	r3, #5
   10164:	e7ea      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
   10166:	2306      	movs	r3, #6
   10168:	e7e8      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
   1016a:	2308      	movs	r3, #8
   1016c:	e7e6      	b.n	1013c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
   1016e:	2200      	movs	r2, #0
   10170:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
   10172:	461a      	mov	r2, r3
   10174:	4902      	ldr	r1, [pc, #8]	; (10180 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>)
   10176:	f00e f8a3 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   1017a:	2301      	movs	r3, #1
   1017c:	e7e3      	b.n	10146 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
   1017e:	bf00      	nop
   10180:	0002915f 	.word	0x0002915f

00010184 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseReshape(const Operator* op, BuiltinOperator,
                          ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   10184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10188:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1018a:	461e      	mov	r6, r3
   1018c:	4615      	mov	r5, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1018e:	463b      	mov	r3, r7
   10190:	4632      	mov	r2, r6
   10192:	4629      	mov	r1, r5
                          void** builtin_data) {
   10194:	4680      	mov	r8, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10196:	f00e f8b7 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
   1019a:	6833      	ldr	r3, [r6, #0]
   1019c:	2204      	movs	r2, #4
   1019e:	681b      	ldr	r3, [r3, #0]
   101a0:	2124      	movs	r1, #36	; 0x24
   101a2:	4630      	mov	r0, r6
   101a4:	4798      	blx	r3
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   101a6:	4604      	mov	r4, r0
   101a8:	b978      	cbnz	r0, 101ca <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
   101aa:	4b1b      	ldr	r3, [pc, #108]	; (10218 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   101ac:	9301      	str	r3, [sp, #4]
   101ae:	f240 1339 	movw	r3, #313	; 0x139
   101b2:	9300      	str	r3, [sp, #0]
   101b4:	4629      	mov	r1, r5
   101b6:	4628      	mov	r0, r5
   101b8:	4b18      	ldr	r3, [pc, #96]	; (1021c <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   101ba:	4a19      	ldr	r2, [pc, #100]	; (10220 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
   101bc:	f00e f88e 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   101c0:	2501      	movs	r5, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   101c2:	4628      	mov	r0, r5
   101c4:	b003      	add	sp, #12
   101c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
   101ca:	4640      	mov	r0, r8
   101cc:	f00e f8c1 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   101d0:	2811      	cmp	r0, #17
   101d2:	d119      	bne.n	10208 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
   101d4:	4640      	mov	r0, r8
   101d6:	f00e f8a5 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   101da:	4681      	mov	r9, r0
   101dc:	b1a0      	cbz	r0, 10208 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    auto field_offset = GetOptionalFieldOffset(field);
   101de:	2104      	movs	r1, #4
   101e0:	f005 fa52 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   101e4:	b180      	cbz	r0, 10208 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    auto p = data_ + field_offset;
   101e6:	eb09 0800 	add.w	r8, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   101ea:	f859 9000 	ldr.w	r9, [r9, r0]
    if (new_shape != nullptr) {
   101ee:	eb18 0009 	adds.w	r0, r8, r9
   101f2:	d009      	beq.n	10208 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
      TF_LITE_ENSURE_STATUS(
   101f4:	462a      	mov	r2, r5
   101f6:	4b0b      	ldr	r3, [pc, #44]	; (10224 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>)
   101f8:	4621      	mov	r1, r4
   101fa:	f7ff ff61 	bl	100c0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   101fe:	4605      	mov	r5, r0
   10200:	b928      	cbnz	r0, 1020e <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
      params->num_dimensions = new_shape->size();
   10202:	f858 3009 	ldr.w	r3, [r8, r9]
   10206:	6223      	str	r3, [r4, #32]
  *builtin_data = params.release();
   10208:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   1020a:	2500      	movs	r5, #0
   1020c:	e7d9      	b.n	101c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
   1020e:	4621      	mov	r1, r4
   10210:	4630      	mov	r0, r6
   10212:	f00e f884 	bl	1e31e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   10216:	e7d4      	b.n	101c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   10218:	000291b6 	.word	0x000291b6
   1021c:	00029183 	.word	0x00029183
   10220:	000272d2 	.word	0x000272d2
   10224:	000291c8 	.word	0x000291c8

00010228 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1022a:	9f08      	ldr	r7, [sp, #32]
   1022c:	461c      	mov	r4, r3
   1022e:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10230:	463b      	mov	r3, r7
   10232:	4622      	mov	r2, r4
   10234:	4631      	mov	r1, r6
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10236:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10238:	f00e f866 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1023c:	6823      	ldr	r3, [r4, #0]
   1023e:	4620      	mov	r0, r4
   10240:	681b      	ldr	r3, [r3, #0]
   10242:	2204      	movs	r2, #4
   10244:	2118      	movs	r1, #24
   10246:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10248:	4604      	mov	r4, r0
   1024a:	b960      	cbnz	r0, 10266 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   1024c:	4b22      	ldr	r3, [pc, #136]	; (102d8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   1024e:	9301      	str	r3, [sp, #4]
   10250:	23bd      	movs	r3, #189	; 0xbd
   10252:	9300      	str	r3, [sp, #0]
   10254:	4a21      	ldr	r2, [pc, #132]	; (102dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   10256:	4b22      	ldr	r3, [pc, #136]	; (102e0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   10258:	4631      	mov	r1, r6
   1025a:	4630      	mov	r0, r6
   1025c:	f00e f83e 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10260:	2001      	movs	r0, #1
}
   10262:	b003      	add	sp, #12
   10264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
   10266:	4628      	mov	r0, r5
   10268:	f00e f873 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1026c:	2801      	cmp	r0, #1
   1026e:	4606      	mov	r6, r0
   10270:	d12f      	bne.n	102d2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
   10272:	4628      	mov	r0, r5
   10274:	f00e f856 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10278:	4605      	mov	r5, r0
   1027a:	b350      	cbz	r0, 102d2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   1027c:	2200      	movs	r2, #0
   1027e:	2104      	movs	r1, #4
   10280:	f00e f876 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   10284:	b2c0      	uxtb	r0, r0
   10286:	f00e f837 	bl	1e2f8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   1028a:	2200      	movs	r2, #0
   1028c:	7020      	strb	r0, [r4, #0]
   1028e:	2106      	movs	r1, #6
   10290:	4628      	mov	r0, r5
   10292:	f00e f864 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10296:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
   10298:	6060      	str	r0, [r4, #4]
   1029a:	2108      	movs	r1, #8
   1029c:	4628      	mov	r0, r5
   1029e:	f00e f85e 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   102a2:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
   102a4:	60a0      	str	r0, [r4, #8]
   102a6:	210a      	movs	r1, #10
   102a8:	4628      	mov	r0, r5
   102aa:	f00e f861 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   102ae:	b2c3      	uxtb	r3, r0
  switch (activation) {
   102b0:	1e5a      	subs	r2, r3, #1
   102b2:	2a04      	cmp	r2, #4
   102b4:	bf88      	it	hi
   102b6:	2300      	movhi	r3, #0
    params->activation =
   102b8:	7323      	strb	r3, [r4, #12]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   102ba:	4632      	mov	r2, r6
   102bc:	210c      	movs	r1, #12
   102be:	4628      	mov	r0, r5
   102c0:	f00e f84d 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   102c4:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
   102c6:	6120      	str	r0, [r4, #16]
   102c8:	210e      	movs	r1, #14
   102ca:	4628      	mov	r0, r5
   102cc:	f00e f847 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   102d0:	6160      	str	r0, [r4, #20]
  *builtin_data = params.release();
   102d2:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   102d4:	2000      	movs	r0, #0
   102d6:	e7c4      	b.n	10262 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   102d8:	000291b6 	.word	0x000291b6
   102dc:	000272d2 	.word	0x000272d2
   102e0:	00029183 	.word	0x00029183

000102e4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   102e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   102e6:	9f08      	ldr	r7, [sp, #32]
   102e8:	461c      	mov	r4, r3
   102ea:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   102ec:	463b      	mov	r3, r7
   102ee:	4622      	mov	r2, r4
   102f0:	4631      	mov	r1, r6
                                  void** builtin_data) {
   102f2:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   102f4:	f00e f808 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   102f8:	6823      	ldr	r3, [r4, #0]
   102fa:	4620      	mov	r0, r4
   102fc:	681b      	ldr	r3, [r3, #0]
   102fe:	2204      	movs	r2, #4
   10300:	211c      	movs	r1, #28
   10302:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10304:	4604      	mov	r4, r0
   10306:	b960      	cbnz	r0, 10322 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   10308:	4b25      	ldr	r3, [pc, #148]	; (103a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   1030a:	9301      	str	r3, [sp, #4]
   1030c:	23df      	movs	r3, #223	; 0xdf
   1030e:	9300      	str	r3, [sp, #0]
   10310:	4a24      	ldr	r2, [pc, #144]	; (103a4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   10312:	4b25      	ldr	r3, [pc, #148]	; (103a8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   10314:	4631      	mov	r1, r6
   10316:	4630      	mov	r0, r6
   10318:	f00d ffe0 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1031c:	2001      	movs	r0, #1
}
   1031e:	b003      	add	sp, #12
   10320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   10322:	4628      	mov	r0, r5
   10324:	f00e f815 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10328:	2802      	cmp	r0, #2
   1032a:	d135      	bne.n	10398 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
   1032c:	4628      	mov	r0, r5
   1032e:	f00d fff9 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10332:	4605      	mov	r5, r0
   10334:	b380      	cbz	r0, 10398 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   10336:	2200      	movs	r2, #0
   10338:	2104      	movs	r1, #4
   1033a:	f00e f819 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   1033e:	b2c0      	uxtb	r0, r0
   10340:	f00d ffda 	bl	1e2f8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   10344:	2200      	movs	r2, #0
   10346:	7020      	strb	r0, [r4, #0]
   10348:	2106      	movs	r1, #6
   1034a:	4628      	mov	r0, r5
   1034c:	f00e f807 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10350:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
   10352:	6060      	str	r0, [r4, #4]
   10354:	2108      	movs	r1, #8
   10356:	4628      	mov	r0, r5
   10358:	f00e f801 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   1035c:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
   1035e:	60a0      	str	r0, [r4, #8]
   10360:	210a      	movs	r1, #10
   10362:	4628      	mov	r0, r5
   10364:	f00d fffb 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10368:	2200      	movs	r2, #0
    params->depth_multiplier = schema_params->depth_multiplier();
   1036a:	60e0      	str	r0, [r4, #12]
   1036c:	210c      	movs	r1, #12
   1036e:	4628      	mov	r0, r5
   10370:	f00d fffe 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10374:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10376:	1e43      	subs	r3, r0, #1
   10378:	2b04      	cmp	r3, #4
   1037a:	bf88      	it	hi
   1037c:	2000      	movhi	r0, #0
    params->activation =
   1037e:	7420      	strb	r0, [r4, #16]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   10380:	2201      	movs	r2, #1
   10382:	210e      	movs	r1, #14
   10384:	4628      	mov	r0, r5
   10386:	f00d ffea 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   1038a:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
   1038c:	6160      	str	r0, [r4, #20]
   1038e:	2110      	movs	r1, #16
   10390:	4628      	mov	r0, r5
   10392:	f00d ffe4 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   10396:	61a0      	str	r0, [r4, #24]
  *builtin_data = params.release();
   10398:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   1039a:	2000      	movs	r0, #0
   1039c:	e7bf      	b.n	1031e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   1039e:	bf00      	nop
   103a0:	000291b6 	.word	0x000291b6
   103a4:	000272d2 	.word	0x000272d2
   103a8:	00029183 	.word	0x00029183

000103ac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
   103ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   103b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   103b4:	461d      	mov	r5, r3
   103b6:	4617      	mov	r7, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   103b8:	4643      	mov	r3, r8
   103ba:	462a      	mov	r2, r5
   103bc:	4639      	mov	r1, r7
                                 void** builtin_data) {
   103be:	4606      	mov	r6, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   103c0:	f00d ffa2 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   103c4:	682b      	ldr	r3, [r5, #0]
   103c6:	2201      	movs	r2, #1
   103c8:	681b      	ldr	r3, [r3, #0]
   103ca:	2104      	movs	r1, #4
   103cc:	4628      	mov	r0, r5
   103ce:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   103d0:	4604      	mov	r4, r0
   103d2:	b970      	cbnz	r0, 103f2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
   103d4:	4b25      	ldr	r3, [pc, #148]	; (1046c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   103d6:	9301      	str	r3, [sp, #4]
   103d8:	f240 130b 	movw	r3, #267	; 0x10b
   103dc:	9300      	str	r3, [sp, #0]
   103de:	4a24      	ldr	r2, [pc, #144]	; (10470 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   103e0:	4b24      	ldr	r3, [pc, #144]	; (10474 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
   103e2:	4639      	mov	r1, r7
   103e4:	4638      	mov	r0, r7
   103e6:	f00d ff79 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
        return kTfLiteError;
   103ea:	2001      	movs	r0, #1
}
   103ec:	b003      	add	sp, #12
   103ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
   103f2:	4630      	mov	r0, r6
   103f4:	f00d ffad 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   103f8:	2808      	cmp	r0, #8
   103fa:	4681      	mov	r9, r0
   103fc:	d132      	bne.n	10464 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
   103fe:	4630      	mov	r0, r6
   10400:	f00d ff90 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10404:	4606      	mov	r6, r0
   10406:	b368      	cbz	r0, 10464 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10408:	2200      	movs	r2, #0
   1040a:	2104      	movs	r1, #4
   1040c:	f00d ffb0 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10410:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10412:	1e5a      	subs	r2, r3, #1
   10414:	2a04      	cmp	r2, #4
   10416:	bf88      	it	hi
   10418:	2300      	movhi	r3, #0
    params->activation =
   1041a:	7023      	strb	r3, [r4, #0]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   1041c:	2200      	movs	r2, #0
   1041e:	4649      	mov	r1, r9
   10420:	4630      	mov	r0, r6
   10422:	f00d ff8d 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10426:	3800      	subs	r0, #0
   10428:	bf18      	it	ne
   1042a:	2001      	movne	r0, #1
   1042c:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   1042e:	2200      	movs	r2, #0
   10430:	210a      	movs	r1, #10
   10432:	4630      	mov	r0, r6
   10434:	f00d ff84 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10438:	3800      	subs	r0, #0
   1043a:	bf18      	it	ne
   1043c:	2001      	movne	r0, #1
   1043e:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   10440:	2200      	movs	r2, #0
   10442:	2106      	movs	r1, #6
   10444:	4630      	mov	r0, r6
   10446:	f00d ff93 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
   1044a:	b150      	cbz	r0, 10462 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6>
   1044c:	2801      	cmp	r0, #1
   1044e:	d008      	beq.n	10462 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6>
        TF_LITE_REPORT_ERROR(error_reporter,
   10450:	4909      	ldr	r1, [pc, #36]	; (10478 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
   10452:	4638      	mov	r0, r7
   10454:	f00d ff34 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   10458:	4621      	mov	r1, r4
   1045a:	4628      	mov	r0, r5
   1045c:	f00d ff5f 	bl	1e31e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   10460:	e7c3      	b.n	103ea <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
        params->weights_format =
   10462:	7060      	strb	r0, [r4, #1]
  *builtin_data = params.release();
   10464:	f8c8 4000 	str.w	r4, [r8]
  return kTfLiteOk;
   10468:	2000      	movs	r0, #0
   1046a:	e7bf      	b.n	103ec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   1046c:	000291b6 	.word	0x000291b6
   10470:	000272d2 	.word	0x000272d2
   10474:	00029183 	.word	0x00029183
   10478:	000291d0 	.word	0x000291d0

0001047c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSvdf(const Operator* op, BuiltinOperator,
                       ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   1047c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1047e:	9f08      	ldr	r7, [sp, #32]
   10480:	461c      	mov	r4, r3
   10482:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10484:	463b      	mov	r3, r7
   10486:	4622      	mov	r2, r4
   10488:	4631      	mov	r1, r6
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   1048a:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1048c:	f00d ff3c 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   10490:	6823      	ldr	r3, [r4, #0]
   10492:	4620      	mov	r0, r4
   10494:	681b      	ldr	r3, [r3, #0]
   10496:	2204      	movs	r2, #4
   10498:	2108      	movs	r1, #8
   1049a:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSVDFParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSVDFParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1049c:	4604      	mov	r4, r0
   1049e:	b968      	cbnz	r0, 104bc <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   104a0:	4b1a      	ldr	r3, [pc, #104]	; (1050c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   104a2:	9301      	str	r3, [sp, #4]
   104a4:	f44f 73c1 	mov.w	r3, #386	; 0x182
   104a8:	9300      	str	r3, [sp, #0]
   104aa:	4a19      	ldr	r2, [pc, #100]	; (10510 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   104ac:	4b19      	ldr	r3, [pc, #100]	; (10514 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   104ae:	4631      	mov	r1, r6
   104b0:	4630      	mov	r0, r6
   104b2:	f00d ff13 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   104b6:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   104b8:	b003      	add	sp, #12
   104ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
   104bc:	4628      	mov	r0, r5
   104be:	f00d ff48 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   104c2:	2806      	cmp	r0, #6
   104c4:	4606      	mov	r6, r0
   104c6:	d11d      	bne.n	10504 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
   104c8:	4628      	mov	r0, r5
   104ca:	f00d ff2b 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   104ce:	4605      	mov	r5, r0
   104d0:	b1c0      	cbz	r0, 10504 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    return GetField<int32_t>(VT_RANK, 0);
   104d2:	2200      	movs	r2, #0
   104d4:	2104      	movs	r1, #4
   104d6:	f00d ff42 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   104da:	2200      	movs	r2, #0
    params->rank = schema_params->rank();
   104dc:	6020      	str	r0, [r4, #0]
   104de:	4631      	mov	r1, r6
   104e0:	4628      	mov	r0, r5
   104e2:	f00d ff45 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   104e6:	b2c3      	uxtb	r3, r0
  switch (activation) {
   104e8:	1e5a      	subs	r2, r3, #1
   104ea:	2a04      	cmp	r2, #4
   104ec:	bf88      	it	hi
   104ee:	2300      	movhi	r3, #0
    params->activation =
   104f0:	7123      	strb	r3, [r4, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   104f2:	2200      	movs	r2, #0
   104f4:	2108      	movs	r1, #8
   104f6:	4628      	mov	r0, r5
   104f8:	f00d ff22 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   104fc:	3800      	subs	r0, #0
   104fe:	bf18      	it	ne
   10500:	2001      	movne	r0, #1
   10502:	7160      	strb	r0, [r4, #5]
  *builtin_data = params.release();
   10504:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   10506:	2000      	movs	r0, #0
   10508:	e7d6      	b.n	104b8 <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
   1050a:	bf00      	nop
   1050c:	000291b6 	.word	0x000291b6
   10510:	000272d2 	.word	0x000272d2
   10514:	00029183 	.word	0x00029183

00010518 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   10518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1051a:	9f08      	ldr	r7, [sp, #32]
   1051c:	461c      	mov	r4, r3
   1051e:	4616      	mov	r6, r2
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10520:	463b      	mov	r3, r7
   10522:	4622      	mov	r2, r4
   10524:	4631      	mov	r1, r6
                          void** builtin_data) {
   10526:	4605      	mov	r5, r0
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   10528:	f00d feee 	bl	1e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1052c:	6823      	ldr	r3, [r4, #0]
   1052e:	2204      	movs	r2, #4
   10530:	4620      	mov	r0, r4
   10532:	681b      	ldr	r3, [r3, #0]
   10534:	4611      	mov	r1, r2
   10536:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   10538:	4604      	mov	r4, r0
   1053a:	b968      	cbnz	r0, 10558 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   1053c:	4b10      	ldr	r3, [pc, #64]	; (10580 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   1053e:	9301      	str	r3, [sp, #4]
   10540:	f240 1369 	movw	r3, #361	; 0x169
   10544:	9300      	str	r3, [sp, #0]
   10546:	4a0f      	ldr	r2, [pc, #60]	; (10584 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   10548:	4b0f      	ldr	r3, [pc, #60]	; (10588 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   1054a:	4631      	mov	r1, r6
   1054c:	4630      	mov	r0, r6
   1054e:	f00d fec5 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10552:	2001      	movs	r0, #1
}
   10554:	b003      	add	sp, #12
   10556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
   10558:	4628      	mov	r0, r5
   1055a:	f00d fefa 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1055e:	2809      	cmp	r0, #9
   10560:	d10a      	bne.n	10578 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   10562:	4628      	mov	r0, r5
   10564:	f00d fede 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   10568:	b130      	cbz	r0, 10578 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return GetField<float>(VT_BETA, 0.0f);
   1056a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 1058c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
   1056e:	2104      	movs	r1, #4
   10570:	f00d ff07 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
   10574:	ed84 0a00 	vstr	s0, [r4]
  *builtin_data = params.release();
   10578:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   1057a:	2000      	movs	r0, #0
   1057c:	e7ea      	b.n	10554 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
   1057e:	bf00      	nop
   10580:	000291b6 	.word	0x000291b6
   10584:	000272d2 	.word	0x000272d2
   10588:	00029183 	.word	0x00029183
   1058c:	00000000 	.word	0x00000000

00010590 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseOpData(const Operator* op, BuiltinOperator op_type,
                         ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   10590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10594:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   10596:	461d      	mov	r5, r3
        return kTfLiteCombinerTypeSum;
    }
  };

  SafeBuiltinDataAllocator safe_allocator(allocator);
  *builtin_data = nullptr;
   10598:	2300      	movs	r3, #0
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   1059a:	4607      	mov	r7, r0
   1059c:	460c      	mov	r4, r1
   1059e:	4690      	mov	r8, r2
  *builtin_data = nullptr;
   105a0:	6033      	str	r3, [r6, #0]
  switch (op_type) {
   105a2:	297e      	cmp	r1, #126	; 0x7e
   105a4:	f200 8386 	bhi.w	10cb4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
   105a8:	e8df f011 	tbh	[pc, r1, lsl #1]
   105ac:	01160279 	.word	0x01160279
   105b0:	007f022a 	.word	0x007f022a
   105b4:	04df0087 	.word	0x04df0087
   105b8:	00ca00ca 	.word	0x00ca00ca
   105bc:	008f00ca 	.word	0x008f00ca
   105c0:	02e600ca 	.word	0x02e600ca
   105c4:	030a0116 	.word	0x030a0116
   105c8:	00f000ca 	.word	0x00f000ca
   105cc:	01160342 	.word	0x01160342
   105d0:	00ca0255 	.word	0x00ca0255
   105d4:	00ca00ca 	.word	0x00ca00ca
   105d8:	04360097 	.word	0x04360097
   105dc:	009f01cf 	.word	0x009f01cf
   105e0:	00a704bf 	.word	0x00a704bf
   105e4:	00ca00ca 	.word	0x00ca00ca
   105e8:	00ca0490 	.word	0x00ca0490
   105ec:	01fd00ca 	.word	0x01fd00ca
   105f0:	015a00ca 	.word	0x015a00ca
   105f4:	00ca04ff 	.word	0x00ca04ff
   105f8:	00ca00ca 	.word	0x00ca00ca
   105fc:	02c20522 	.word	0x02c20522
   10600:	058d029e 	.word	0x058d029e
   10604:	05c00396 	.word	0x05c00396
   10608:	00ca018f 	.word	0x00ca018f
   1060c:	054600ca 	.word	0x054600ca
   10610:	06bf00ca 	.word	0x06bf00ca
   10614:	00af03e6 	.word	0x00af03e6
   10618:	00ca00ca 	.word	0x00ca00ca
   1061c:	00ca05fa 	.word	0x00ca05fa
   10620:	00ca00ca 	.word	0x00ca00ca
   10624:	00ca00ca 	.word	0x00ca00ca
   10628:	00ca00ca 	.word	0x00ca00ca
   1062c:	00ca00ca 	.word	0x00ca00ca
   10630:	062f00ca 	.word	0x062f00ca
   10634:	00ca0660 	.word	0x00ca0660
   10638:	00ca00ca 	.word	0x00ca00ca
   1063c:	00ca00ca 	.word	0x00ca00ca
   10640:	00ca0522 	.word	0x00ca0522
   10644:	068400ca 	.word	0x068400ca
   10648:	061c00ca 	.word	0x061c00ca
   1064c:	052206c4 	.word	0x052206c4
   10650:	06970522 	.word	0x06970522
   10654:	070800ca 	.word	0x070800ca
   10658:	00ca00ca 	.word	0x00ca00ca
   1065c:	05220729 	.word	0x05220729
   10660:	052200ca 	.word	0x052200ca
   10664:	00ca00ca 	.word	0x00ca00ca
   10668:	00ca00ca 	.word	0x00ca00ca
   1066c:	046300ca 	.word	0x046300ca
   10670:	00ca0751 	.word	0x00ca0751
   10674:	00ca0774 	.word	0x00ca0774
   10678:	0799056c 	.word	0x0799056c
   1067c:	00ca00ca 	.word	0x00ca00ca
   10680:	00ca00ca 	.word	0x00ca00ca
   10684:	00ca00ca 	.word	0x00ca00ca
   10688:	00ca00ca 	.word	0x00ca00ca
   1068c:	00ca07be 	.word	0x00ca07be
   10690:	00ca00ca 	.word	0x00ca00ca
   10694:	00ca00ca 	.word	0x00ca00ca
   10698:	080e07e6 	.word	0x080e07e6
   1069c:	00ca00ca 	.word	0x00ca00ca
   106a0:	00ca00ca 	.word	0x00ca00ca
   106a4:	00ca00ca 	.word	0x00ca00ca
   106a8:	0836      	.short	0x0836
    case BuiltinOperator_CONV_2D: {
      return ParseConv2D(op, op_type, error_reporter, allocator, builtin_data);
   106aa:	462b      	mov	r3, r5
   106ac:	2103      	movs	r1, #3
   106ae:	960a      	str	r6, [sp, #40]	; 0x28
    case BuiltinOperator_DENSIFY:
    case BuiltinOperator_SEGMENT_SUM:
      return kTfLiteOk;
  }
  return kTfLiteError;
}  // NOLINT[readability/fn_size]
   106b0:	b003      	add	sp, #12
   106b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseConv2D(op, op_type, error_reporter, allocator, builtin_data);
   106b6:	f7ff bdb7 	b.w	10228 <_ZN6tflite11ParseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseDepthwiseConv2D(op, op_type, error_reporter, allocator,
   106ba:	462b      	mov	r3, r5
   106bc:	2104      	movs	r1, #4
   106be:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106c0:	b003      	add	sp, #12
   106c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseDepthwiseConv2D(op, op_type, error_reporter, allocator,
   106c6:	f7ff be0d 	b.w	102e4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseFullyConnected(op, op_type, error_reporter, allocator,
   106ca:	462b      	mov	r3, r5
   106cc:	2109      	movs	r1, #9
   106ce:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106d0:	b003      	add	sp, #12
   106d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseFullyConnected(op, op_type, error_reporter, allocator,
   106d6:	f7ff be69 	b.w	103ac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseReshape(op, op_type, error_reporter, allocator, builtin_data);
   106da:	462b      	mov	r3, r5
   106dc:	2116      	movs	r1, #22
   106de:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106e0:	b003      	add	sp, #12
   106e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseReshape(op, op_type, error_reporter, allocator, builtin_data);
   106e6:	f7ff bd4d 	b.w	10184 <_ZN6tflite12ParseReshapeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseSoftmax(op, op_type, error_reporter, allocator, builtin_data);
   106ea:	462b      	mov	r3, r5
   106ec:	2119      	movs	r1, #25
   106ee:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   106f0:	b003      	add	sp, #12
   106f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseSoftmax(op, op_type, error_reporter, allocator, builtin_data);
   106f6:	f7ff bf0f 	b.w	10518 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
      return ParseSvdf(op, op_type, error_reporter, allocator, builtin_data);
   106fa:	462b      	mov	r3, r5
   106fc:	211b      	movs	r1, #27
   106fe:	960a      	str	r6, [sp, #40]	; 0x28
}  // NOLINT[readability/fn_size]
   10700:	b003      	add	sp, #12
   10702:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      return ParseSvdf(op, op_type, error_reporter, allocator, builtin_data);
   10706:	f7ff beb9 	b.w	1047c <_ZN6tflite9ParseSvdfEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1070a:	682b      	ldr	r3, [r5, #0]
   1070c:	2201      	movs	r2, #1
   1070e:	681b      	ldr	r3, [r3, #0]
   10710:	2102      	movs	r1, #2
   10712:	4628      	mov	r0, r5
   10714:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10716:	4681      	mov	r9, r0
   10718:	b958      	cbnz	r0, 10732 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
   1071a:	4bb6      	ldr	r3, [pc, #728]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   1071c:	9301      	str	r3, [sp, #4]
   1071e:	f240 13d7 	movw	r3, #471	; 0x1d7
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10722:	9300      	str	r3, [sp, #0]
   10724:	4ab4      	ldr	r2, [pc, #720]	; (109f8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x468>)
   10726:	4bb5      	ldr	r3, [pc, #724]	; (109fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46c>)
   10728:	4641      	mov	r1, r8
   1072a:	4640      	mov	r0, r8
   1072c:	f00d fdd6 	bl	1e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   10730:	e2c0      	b.n	10cb4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
    return builtin_options_type() == tflite::BuiltinOptions_CastOptions ? static_cast<const tflite::CastOptions *>(builtin_options()) : nullptr;
   10732:	4638      	mov	r0, r7
   10734:	f00d fe0d 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10738:	2825      	cmp	r0, #37	; 0x25
   1073a:	d003      	beq.n	10744 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b4>
      *builtin_data = params.release();
   1073c:	f8c6 9000 	str.w	r9, [r6]
      return ParseDequantize(op, op_type, error_reporter, allocator,
   10740:	2400      	movs	r4, #0
   10742:	e1cd      	b.n	10ae0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
   10744:	4638      	mov	r0, r7
   10746:	f00d fded 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_CastOptions()) {
   1074a:	4607      	mov	r7, r0
   1074c:	2800      	cmp	r0, #0
   1074e:	d0f5      	beq.n	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
   10750:	2200      	movs	r2, #0
   10752:	2104      	movs	r1, #4
   10754:	f00d fe0c 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->in_data_type(),
   10758:	4642      	mov	r2, r8
   1075a:	4649      	mov	r1, r9
   1075c:	b2c0      	uxtb	r0, r0
   1075e:	f7ff fcdf 	bl	10120 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   10762:	4604      	mov	r4, r0
   10764:	b968      	cbnz	r0, 10782 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
   10766:	4602      	mov	r2, r0
   10768:	2106      	movs	r1, #6
   1076a:	4638      	mov	r0, r7
   1076c:	f00d fe00 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->out_data_type(),
   10770:	4642      	mov	r2, r8
   10772:	f109 0101 	add.w	r1, r9, #1
        TF_LITE_ENSURE_STATUS(ConvertTensorType(
   10776:	b2c0      	uxtb	r0, r0
   10778:	f7ff fcd2 	bl	10120 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   1077c:	4604      	mov	r4, r0
   1077e:	2800      	cmp	r0, #0
   10780:	d0dc      	beq.n	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   10782:	4649      	mov	r1, r9
   10784:	4628      	mov	r0, r5
   10786:	f00d fdca 	bl	1e31e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   1078a:	e1a9      	b.n	10ae0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
   1078c:	682b      	ldr	r3, [r5, #0]
   1078e:	2201      	movs	r2, #1
   10790:	681b      	ldr	r3, [r3, #0]
   10792:	4611      	mov	r1, r2
   10794:	4628      	mov	r0, r5
   10796:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10798:	4604      	mov	r4, r0
   1079a:	b920      	cbnz	r0, 107a6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
   1079c:	4b95      	ldr	r3, [pc, #596]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   1079e:	9301      	str	r3, [sp, #4]
   107a0:	f240 13e5 	movw	r3, #485	; 0x1e5
   107a4:	e7bd      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
   107a6:	4638      	mov	r0, r7
   107a8:	f00d fdd3 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   107ac:	2804      	cmp	r0, #4
   107ae:	4605      	mov	r5, r0
   107b0:	d10e      	bne.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   107b2:	4638      	mov	r0, r7
   107b4:	f00d fdb6 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lshParams =
   107b8:	b150      	cbz	r0, 107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
   107ba:	2200      	movs	r2, #0
   107bc:	4629      	mov	r1, r5
   107be:	f00d fdd7 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   107c2:	2801      	cmp	r0, #1
   107c4:	d006      	beq.n	107d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x244>
   107c6:	2802      	cmp	r0, #2
   107c8:	bf14      	ite	ne
   107ca:	2300      	movne	r3, #0
   107cc:	2302      	moveq	r3, #2
        params->type = parseLSHProjectionType(lshParams->type());
   107ce:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   107d0:	6034      	str	r4, [r6, #0]
      return kTfLiteOk;
   107d2:	e7b5      	b.n	10740 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b0>
        return kTfLiteLshProjectionSparse;
   107d4:	4603      	mov	r3, r0
   107d6:	e7fa      	b.n	107ce <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x23e>
   107d8:	682b      	ldr	r3, [r5, #0]
   107da:	2204      	movs	r2, #4
   107dc:	681b      	ldr	r3, [r3, #0]
   107de:	2128      	movs	r1, #40	; 0x28
   107e0:	4628      	mov	r0, r5
   107e2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   107e4:	4604      	mov	r4, r0
   107e6:	b920      	cbnz	r0, 107f2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x262>
   107e8:	4b82      	ldr	r3, [pc, #520]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   107ea:	9301      	str	r3, [sp, #4]
   107ec:	f240 13f1 	movw	r3, #497	; 0x1f1
   107f0:	e797      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
   107f2:	4638      	mov	r0, r7
   107f4:	f00d fdad 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   107f8:	2805      	cmp	r0, #5
   107fa:	d1e9      	bne.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   107fc:	4638      	mov	r0, r7
   107fe:	f00d fd91 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pool_params = op->builtin_options_as_Pool2DOptions()) {
   10802:	4605      	mov	r5, r0
   10804:	2800      	cmp	r0, #0
   10806:	d0e3      	beq.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   10808:	2200      	movs	r2, #0
   1080a:	2104      	movs	r1, #4
   1080c:	f00d fdb0 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        params->padding = ConvertPadding(pool_params->padding());
   10810:	b2c0      	uxtb	r0, r0
   10812:	f00d fd71 	bl	1e2f8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   10816:	2200      	movs	r2, #0
   10818:	7020      	strb	r0, [r4, #0]
   1081a:	2106      	movs	r1, #6
   1081c:	4628      	mov	r0, r5
   1081e:	f00d fd9e 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   10822:	2200      	movs	r2, #0
        params->stride_width = pool_params->stride_w();
   10824:	6060      	str	r0, [r4, #4]
   10826:	2108      	movs	r1, #8
   10828:	4628      	mov	r0, r5
   1082a:	f00d fd98 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   1082e:	2200      	movs	r2, #0
        params->stride_height = pool_params->stride_h();
   10830:	60a0      	str	r0, [r4, #8]
   10832:	210a      	movs	r1, #10
   10834:	4628      	mov	r0, r5
   10836:	f00d fd92 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   1083a:	2200      	movs	r2, #0
        params->filter_width = pool_params->filter_width();
   1083c:	60e0      	str	r0, [r4, #12]
   1083e:	210c      	movs	r1, #12
   10840:	4628      	mov	r0, r5
   10842:	f00d fd8c 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10846:	2200      	movs	r2, #0
        params->filter_height = pool_params->filter_height();
   10848:	6120      	str	r0, [r4, #16]
   1084a:	210e      	movs	r1, #14
   1084c:	4628      	mov	r0, r5
   1084e:	f00d fd8f 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10852:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10854:	1e43      	subs	r3, r0, #1
   10856:	2b04      	cmp	r3, #4
   10858:	bf88      	it	hi
   1085a:	2000      	movhi	r0, #0
        params->activation =
   1085c:	7520      	strb	r0, [r4, #20]
      *builtin_data = params.release();
   1085e:	e7b7      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10860:	682b      	ldr	r3, [r5, #0]
   10862:	2201      	movs	r2, #1
   10864:	681b      	ldr	r3, [r3, #0]
   10866:	2103      	movs	r1, #3
   10868:	4628      	mov	r0, r5
   1086a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1086c:	4604      	mov	r4, r0
   1086e:	b920      	cbnz	r0, 1087a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2ea>
   10870:	4b60      	ldr	r3, [pc, #384]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   10872:	9301      	str	r3, [sp, #4]
   10874:	f44f 7300 	mov.w	r3, #512	; 0x200
   10878:	e753      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SequenceRNNOptions ? static_cast<const tflite::SequenceRNNOptions *>(builtin_options()) : nullptr;
   1087a:	4638      	mov	r0, r7
   1087c:	f00d fd69 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10880:	281f      	cmp	r0, #31
   10882:	d1a5      	bne.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10884:	4638      	mov	r0, r7
   10886:	f00d fd4d 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sequence_rnn_params =
   1088a:	4605      	mov	r5, r0
   1088c:	2800      	cmp	r0, #0
   1088e:	d09f      	beq.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10890:	2200      	movs	r2, #0
   10892:	2106      	movs	r1, #6
   10894:	f00d fd6c 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10898:	b2c3      	uxtb	r3, r0
  switch (activation) {
   1089a:	1e5a      	subs	r2, r3, #1
   1089c:	2a04      	cmp	r2, #4
   1089e:	bf88      	it	hi
   108a0:	2300      	movhi	r3, #0
        params->activation =
   108a2:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   108a4:	2200      	movs	r2, #0
   108a6:	2104      	movs	r1, #4
   108a8:	4628      	mov	r0, r5
   108aa:	f00d fd49 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   108ae:	3800      	subs	r0, #0
   108b0:	bf18      	it	ne
   108b2:	2001      	movne	r0, #1
   108b4:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   108b6:	2200      	movs	r2, #0
   108b8:	2108      	movs	r1, #8
   108ba:	4628      	mov	r0, r5
   108bc:	f00d fd40 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   108c0:	3800      	subs	r0, #0
   108c2:	bf18      	it	ne
   108c4:	2001      	movne	r0, #1
   108c6:	70a0      	strb	r0, [r4, #2]
      *builtin_data = params.release();
   108c8:	e782      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   108ca:	682b      	ldr	r3, [r5, #0]
   108cc:	2201      	movs	r2, #1
   108ce:	681b      	ldr	r3, [r3, #0]
   108d0:	2104      	movs	r1, #4
   108d2:	4628      	mov	r0, r5
   108d4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   108d6:	4604      	mov	r4, r0
   108d8:	b920      	cbnz	r0, 108e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x354>
   108da:	4b46      	ldr	r3, [pc, #280]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   108dc:	9301      	str	r3, [sp, #4]
   108de:	f240 230f 	movw	r3, #527	; 0x20f
   108e2:	e71e      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceRNNOptions ? static_cast<const tflite::BidirectionalSequenceRNNOptions *>(builtin_options()) : nullptr;
   108e4:	4638      	mov	r0, r7
   108e6:	f00d fd34 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   108ea:	2846      	cmp	r0, #70	; 0x46
   108ec:	f47f af70 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   108f0:	4638      	mov	r0, r7
   108f2:	f00d fd17 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_sequence_rnn_params =
   108f6:	4605      	mov	r5, r0
   108f8:	2800      	cmp	r0, #0
   108fa:	f43f af69 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   108fe:	2200      	movs	r2, #0
   10900:	2106      	movs	r1, #6
   10902:	f00d fd35 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10906:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10908:	1e43      	subs	r3, r0, #1
   1090a:	2b04      	cmp	r3, #4
   1090c:	bf88      	it	hi
   1090e:	2000      	movhi	r0, #0
        params->activation = ConvertActivation(
   10910:	7060      	strb	r0, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   10912:	2200      	movs	r2, #0
   10914:	2104      	movs	r1, #4
   10916:	4628      	mov	r0, r5
   10918:	f00d fd12 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1091c:	3800      	subs	r0, #0
   1091e:	bf18      	it	ne
   10920:	2001      	movne	r0, #1
   10922:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   10924:	2200      	movs	r2, #0
   10926:	2108      	movs	r1, #8
   10928:	4628      	mov	r0, r5
   1092a:	f00d fd09 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1092e:	3800      	subs	r0, #0
   10930:	bf18      	it	ne
   10932:	2001      	movne	r0, #1
   10934:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10936:	2200      	movs	r2, #0
   10938:	210a      	movs	r1, #10
   1093a:	4628      	mov	r0, r5
   1093c:	f00d fd00 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10940:	3800      	subs	r0, #0
   10942:	bf18      	it	ne
   10944:	2001      	movne	r0, #1
   10946:	70e0      	strb	r0, [r4, #3]
      *builtin_data = params.release();
   10948:	e742      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1094a:	682b      	ldr	r3, [r5, #0]
   1094c:	2201      	movs	r2, #1
   1094e:	681b      	ldr	r3, [r3, #0]
   10950:	2102      	movs	r1, #2
   10952:	4628      	mov	r0, r5
   10954:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10956:	4604      	mov	r4, r0
   10958:	b920      	cbnz	r0, 10964 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3d4>
   1095a:	4b26      	ldr	r3, [pc, #152]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   1095c:	9301      	str	r3, [sp, #4]
   1095e:	f240 231e 	movw	r3, #542	; 0x21e
   10962:	e6de      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
   10964:	4638      	mov	r0, r7
   10966:	f00d fcf4 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1096a:	2807      	cmp	r0, #7
   1096c:	f47f af30 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10970:	4638      	mov	r0, r7
   10972:	f00d fcd7 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* rnn_params = op->builtin_options_as_RNNOptions()) {
   10976:	4605      	mov	r5, r0
   10978:	2800      	cmp	r0, #0
   1097a:	f43f af29 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   1097e:	2200      	movs	r2, #0
   10980:	2104      	movs	r1, #4
   10982:	f00d fcf5 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10986:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10988:	1e5a      	subs	r2, r3, #1
   1098a:	2a04      	cmp	r2, #4
   1098c:	bf88      	it	hi
   1098e:	2300      	movhi	r3, #0
        params->activation =
   10990:	7023      	strb	r3, [r4, #0]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10992:	2200      	movs	r2, #0
   10994:	2106      	movs	r1, #6
   10996:	4628      	mov	r0, r5
   10998:	f00d fcd2 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1099c:	3800      	subs	r0, #0
   1099e:	bf18      	it	ne
   109a0:	2001      	movne	r0, #1
   109a2:	7060      	strb	r0, [r4, #1]
      *builtin_data = params.release();
   109a4:	e714      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   109a6:	682b      	ldr	r3, [r5, #0]
   109a8:	2201      	movs	r2, #1
   109aa:	681b      	ldr	r3, [r3, #0]
   109ac:	4611      	mov	r1, r2
   109ae:	4628      	mov	r0, r5
   109b0:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   109b2:	4604      	mov	r4, r0
   109b4:	b920      	cbnz	r0, 109c0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x430>
   109b6:	4b0f      	ldr	r3, [pc, #60]	; (109f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x464>)
   109b8:	9301      	str	r3, [sp, #4]
   109ba:	f240 232b 	movw	r3, #555	; 0x22b
   109be:	e6b0      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const tflite::EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
   109c0:	4638      	mov	r0, r7
   109c2:	f00d fcc6 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   109c6:	2814      	cmp	r0, #20
   109c8:	f47f af02 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   109cc:	4638      	mov	r0, r7
   109ce:	f00d fca9 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* embedding_params =
   109d2:	2800      	cmp	r0, #0
   109d4:	f43f aefc 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
   109d8:	2200      	movs	r2, #0
   109da:	2104      	movs	r1, #4
   109dc:	f00d fcc8 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   109e0:	2801      	cmp	r0, #1
   109e2:	d005      	beq.n	109f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x460>
   109e4:	2802      	cmp	r0, #2
   109e6:	bf14      	ite	ne
   109e8:	2300      	movne	r3, #0
   109ea:	2302      	moveq	r3, #2
        params->combiner = parseCombinerType(embedding_params->combiner());
   109ec:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   109ee:	e6ef      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        return kTfLiteCombinerTypeMean;
   109f0:	4603      	mov	r3, r0
   109f2:	e7fb      	b.n	109ec <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x45c>
   109f4:	000291b6 	.word	0x000291b6
   109f8:	000272d2 	.word	0x000272d2
   109fc:	00029183 	.word	0x00029183
   10a00:	682b      	ldr	r3, [r5, #0]
   10a02:	2204      	movs	r2, #4
   10a04:	681b      	ldr	r3, [r3, #0]
   10a06:	2108      	movs	r1, #8
   10a08:	4628      	mov	r0, r5
   10a0a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10a0c:	4604      	mov	r4, r0
   10a0e:	b920      	cbnz	r0, 10a1a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48a>
   10a10:	4bb8      	ldr	r3, [pc, #736]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10a12:	9301      	str	r3, [sp, #4]
   10a14:	f240 2339 	movw	r3, #569	; 0x239
   10a18:	e683      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
   10a1a:	4638      	mov	r0, r7
   10a1c:	f00d fc99 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10a20:	280a      	cmp	r0, #10
   10a22:	f47f aed5 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a26:	4638      	mov	r0, r7
   10a28:	f00d fc7c 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* concatenation_params =
   10a2c:	4605      	mov	r5, r0
   10a2e:	2800      	cmp	r0, #0
   10a30:	f43f aece 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10a34:	2200      	movs	r2, #0
   10a36:	2106      	movs	r1, #6
   10a38:	f00d fc9a 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10a3c:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10a3e:	1e5a      	subs	r2, r3, #1
   10a40:	2a04      	cmp	r2, #4
   10a42:	bf88      	it	hi
   10a44:	2300      	movhi	r3, #0
        params->activation = ConvertActivation(
   10a46:	7123      	strb	r3, [r4, #4]
    return GetField<int32_t>(VT_AXIS, 0);
   10a48:	2200      	movs	r2, #0
   10a4a:	2104      	movs	r1, #4
   10a4c:	4628      	mov	r0, r5
   10a4e:	f00d fc86 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = concatenation_params->axis();
   10a52:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10a54:	e6bc      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a56:	682b      	ldr	r3, [r5, #0]
   10a58:	2201      	movs	r2, #1
   10a5a:	681b      	ldr	r3, [r3, #0]
   10a5c:	4611      	mov	r1, r2
   10a5e:	4628      	mov	r0, r5
   10a60:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10a62:	4604      	mov	r4, r0
   10a64:	b920      	cbnz	r0, 10a70 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e0>
   10a66:	4ba3      	ldr	r3, [pc, #652]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10a68:	9301      	str	r3, [sp, #4]
   10a6a:	f240 2345 	movw	r3, #581	; 0x245
   10a6e:	e658      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
   10a70:	4638      	mov	r0, r7
   10a72:	f00d fc6e 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10a76:	2815      	cmp	r0, #21
   10a78:	f47f aeaa 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a7c:	4638      	mov	r0, r7
   10a7e:	f00d fc51 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_MulOptions()) {
   10a82:	2800      	cmp	r0, #0
   10a84:	f43f aea4 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10a88:	2200      	movs	r2, #0
   10a8a:	2104      	movs	r1, #4
   10a8c:	f00d fc70 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10a90:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10a92:	1e5a      	subs	r2, r3, #1
   10a94:	2a04      	cmp	r2, #4
   10a96:	bf88      	it	hi
   10a98:	2300      	movhi	r3, #0
        params->activation =
   10a9a:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10a9c:	e698      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10a9e:	682b      	ldr	r3, [r5, #0]
   10aa0:	2201      	movs	r2, #1
   10aa2:	4628      	mov	r0, r5
   10aa4:	681b      	ldr	r3, [r3, #0]
   10aa6:	4611      	mov	r1, r2
   10aa8:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10aaa:	4605      	mov	r5, r0
   10aac:	b920      	cbnz	r0, 10ab8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x528>
   10aae:	4b91      	ldr	r3, [pc, #580]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10ab0:	9301      	str	r3, [sp, #4]
   10ab2:	f240 234f 	movw	r3, #591	; 0x24f
   10ab6:	e634      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
   10ab8:	4638      	mov	r0, r7
   10aba:	f00d fc4a 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10abe:	280b      	cmp	r0, #11
   10ac0:	d10d      	bne.n	10ade <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54e>
   10ac2:	4638      	mov	r0, r7
   10ac4:	f00d fc2e 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_AddOptions()) {
   10ac8:	b148      	cbz	r0, 10ade <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10aca:	2200      	movs	r2, #0
   10acc:	2104      	movs	r1, #4
   10ace:	f00d fc4f 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10ad2:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10ad4:	1e5a      	subs	r2, r3, #1
   10ad6:	2a04      	cmp	r2, #4
   10ad8:	bf88      	it	hi
   10ada:	4623      	movhi	r3, r4
        params->activation =
   10adc:	702b      	strb	r3, [r5, #0]
      *builtin_data = params.release();
   10ade:	6035      	str	r5, [r6, #0]
}  // NOLINT[readability/fn_size]
   10ae0:	4620      	mov	r0, r4
   10ae2:	b003      	add	sp, #12
   10ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10ae8:	682b      	ldr	r3, [r5, #0]
   10aea:	2201      	movs	r2, #1
   10aec:	681b      	ldr	r3, [r3, #0]
   10aee:	4611      	mov	r1, r2
   10af0:	4628      	mov	r0, r5
   10af2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10af4:	4604      	mov	r4, r0
   10af6:	b920      	cbnz	r0, 10b02 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x572>
   10af8:	4b7e      	ldr	r3, [pc, #504]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10afa:	9301      	str	r3, [sp, #4]
   10afc:	f240 2359 	movw	r3, #601	; 0x259
   10b00:	e60f      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_DivOptions ? static_cast<const tflite::DivOptions *>(builtin_options()) : nullptr;
   10b02:	4638      	mov	r0, r7
   10b04:	f00d fc25 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10b08:	281d      	cmp	r0, #29
   10b0a:	f47f ae61 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b0e:	4638      	mov	r0, r7
   10b10:	f00d fc08 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_DivOptions()) {
   10b14:	2800      	cmp	r0, #0
   10b16:	f43f ae5b 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10b1a:	2200      	movs	r2, #0
   10b1c:	2104      	movs	r1, #4
   10b1e:	f00d fc27 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10b22:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10b24:	1e5a      	subs	r2, r3, #1
   10b26:	2a04      	cmp	r2, #4
   10b28:	bf88      	it	hi
   10b2a:	2300      	movhi	r3, #0
        params->activation =
   10b2c:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10b2e:	e64f      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b30:	682b      	ldr	r3, [r5, #0]
   10b32:	2201      	movs	r2, #1
   10b34:	681b      	ldr	r3, [r3, #0]
   10b36:	4611      	mov	r1, r2
   10b38:	4628      	mov	r0, r5
   10b3a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10b3c:	4604      	mov	r4, r0
   10b3e:	b920      	cbnz	r0, 10b4a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5ba>
   10b40:	4b6c      	ldr	r3, [pc, #432]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10b42:	9301      	str	r3, [sp, #4]
   10b44:	f240 2363 	movw	r3, #611	; 0x263
   10b48:	e5eb      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SubOptions ? static_cast<const tflite::SubOptions *>(builtin_options()) : nullptr;
   10b4a:	4638      	mov	r0, r7
   10b4c:	f00d fc01 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10b50:	281c      	cmp	r0, #28
   10b52:	f47f ae3d 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b56:	4638      	mov	r0, r7
   10b58:	f00d fbe4 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SubOptions()) {
   10b5c:	2800      	cmp	r0, #0
   10b5e:	f43f ae37 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10b62:	2200      	movs	r2, #0
   10b64:	2104      	movs	r1, #4
   10b66:	f00d fc03 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10b6a:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10b6c:	1e5a      	subs	r2, r3, #1
   10b6e:	2a04      	cmp	r2, #4
   10b70:	bf88      	it	hi
   10b72:	2300      	movhi	r3, #0
        params->activation =
   10b74:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10b76:	e62b      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b78:	682b      	ldr	r3, [r5, #0]
   10b7a:	2201      	movs	r2, #1
   10b7c:	681b      	ldr	r3, [r3, #0]
   10b7e:	4611      	mov	r1, r2
   10b80:	4628      	mov	r0, r5
   10b82:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10b84:	4604      	mov	r4, r0
   10b86:	b920      	cbnz	r0, 10b92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x602>
   10b88:	4b5a      	ldr	r3, [pc, #360]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10b8a:	9301      	str	r3, [sp, #4]
   10b8c:	f240 236d 	movw	r3, #621	; 0x26d
   10b90:	e5c7      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
   10b92:	4638      	mov	r0, r7
   10b94:	f00d fbdd 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10b98:	280c      	cmp	r0, #12
   10b9a:	f47f ae19 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10b9e:	4638      	mov	r0, r7
   10ba0:	f00d fbc0 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_L2NormOptions()) {
   10ba4:	2800      	cmp	r0, #0
   10ba6:	f43f ae13 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10baa:	2200      	movs	r2, #0
   10bac:	2104      	movs	r1, #4
   10bae:	f00d fbdf 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10bb2:	b2c3      	uxtb	r3, r0
  switch (activation) {
   10bb4:	1e5a      	subs	r2, r3, #1
   10bb6:	2a04      	cmp	r2, #4
   10bb8:	bf88      	it	hi
   10bba:	2300      	movhi	r3, #0
        params->activation =
   10bbc:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   10bbe:	e607      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10bc0:	682b      	ldr	r3, [r5, #0]
   10bc2:	2204      	movs	r2, #4
   10bc4:	681b      	ldr	r3, [r3, #0]
   10bc6:	2110      	movs	r1, #16
   10bc8:	4628      	mov	r0, r5
   10bca:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10bcc:	4604      	mov	r4, r0
   10bce:	b920      	cbnz	r0, 10bda <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64a>
   10bd0:	4b48      	ldr	r3, [pc, #288]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10bd2:	9301      	str	r3, [sp, #4]
   10bd4:	f240 2377 	movw	r3, #631	; 0x277
   10bd8:	e5a3      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LocalResponseNormalizationOptions ? static_cast<const tflite::LocalResponseNormalizationOptions *>(builtin_options()) : nullptr;
   10bda:	4638      	mov	r0, r7
   10bdc:	f00d fbb9 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10be0:	280d      	cmp	r0, #13
   10be2:	f47f adf5 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10be6:	4638      	mov	r0, r7
   10be8:	f00d fb9c 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10bec:	4605      	mov	r5, r0
   10bee:	2800      	cmp	r0, #0
   10bf0:	f43f adee 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_RADIUS, 0);
   10bf4:	2200      	movs	r2, #0
   10bf6:	2104      	movs	r1, #4
   10bf8:	f00d fbb1 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<float>(VT_BIAS, 0.0f);
   10bfc:	2106      	movs	r1, #6
        params->radius = schema_params->radius();
   10bfe:	6020      	str	r0, [r4, #0]
   10c00:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c04:	4628      	mov	r0, r5
   10c06:	f00d fbbc 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_ALPHA, 0.0f);
   10c0a:	2108      	movs	r1, #8
        params->bias = schema_params->bias();
   10c0c:	ed84 0a01 	vstr	s0, [r4, #4]
   10c10:	4628      	mov	r0, r5
   10c12:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c16:	f00d fbb4 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_BETA, 0.0f);
   10c1a:	210a      	movs	r1, #10
        params->alpha = schema_params->alpha();
   10c1c:	ed84 0a02 	vstr	s0, [r4, #8]
   10c20:	4628      	mov	r0, r5
   10c22:	ed9f 0a37 	vldr	s0, [pc, #220]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c26:	f00d fbac 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = schema_params->beta();
   10c2a:	ed84 0a03 	vstr	s0, [r4, #12]
      *builtin_data = params.release();
   10c2e:	e5cf      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10c30:	682b      	ldr	r3, [r5, #0]
   10c32:	2204      	movs	r2, #4
   10c34:	681b      	ldr	r3, [r3, #0]
   10c36:	2110      	movs	r1, #16
   10c38:	4628      	mov	r0, r5
   10c3a:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10c3c:	4604      	mov	r4, r0
   10c3e:	b920      	cbnz	r0, 10c4a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6ba>
   10c40:	4b2c      	ldr	r3, [pc, #176]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10c42:	9301      	str	r3, [sp, #4]
   10c44:	f44f 7321 	mov.w	r3, #644	; 0x284
   10c48:	e56b      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LSTMOptions ? static_cast<const tflite::LSTMOptions *>(builtin_options()) : nullptr;
   10c4a:	4638      	mov	r0, r7
   10c4c:	f00d fb81 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10c50:	280e      	cmp	r0, #14
   10c52:	d13c      	bne.n	10cce <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x73e>
   10c54:	4638      	mov	r0, r7
   10c56:	f00d fb65 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lstm_params = op->builtin_options_as_LSTMOptions()) {
   10c5a:	4607      	mov	r7, r0
   10c5c:	b3b8      	cbz	r0, 10cce <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x73e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10c5e:	2200      	movs	r2, #0
   10c60:	2104      	movs	r1, #4
   10c62:	f00d fb85 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10c66:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10c68:	1e43      	subs	r3, r0, #1
   10c6a:	2b04      	cmp	r3, #4
   10c6c:	bf88      	it	hi
   10c6e:	2000      	movhi	r0, #0
        params->activation =
   10c70:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10c72:	2106      	movs	r1, #6
   10c74:	4638      	mov	r0, r7
   10c76:	ed9f 0a22 	vldr	s0, [pc, #136]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c7a:	f00d fb82 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10c7e:	2108      	movs	r1, #8
        params->cell_clip = lstm_params->cell_clip();
   10c80:	ed84 0a01 	vstr	s0, [r4, #4]
   10c84:	4638      	mov	r0, r7
   10c86:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10c8a:	f00d fb7a 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return static_cast<tflite::LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
   10c8e:	2200      	movs	r2, #0
        params->proj_clip = lstm_params->proj_clip();
   10c90:	ed84 0a02 	vstr	s0, [r4, #8]
   10c94:	210a      	movs	r1, #10
   10c96:	4638      	mov	r0, r7
   10c98:	f00d fb6a 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10c9c:	b160      	cbz	r0, 10cb8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x728>
   10c9e:	2801      	cmp	r0, #1
   10ca0:	d00a      	beq.n	10cb8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x728>
            TF_LITE_REPORT_ERROR(error_reporter,
   10ca2:	b2c2      	uxtb	r2, r0
   10ca4:	4914      	ldr	r1, [pc, #80]	; (10cf8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x768>)
   10ca6:	4640      	mov	r0, r8
   10ca8:	f00d fb0a 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   10cac:	4621      	mov	r1, r4
   10cae:	4628      	mov	r0, r5
   10cb0:	f00d fb35 	bl	1e31e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10cb4:	2401      	movs	r4, #1
   10cb6:	e713      	b.n	10ae0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>
            params->kernel_type = kTfLiteLSTMBasicKernel;
   10cb8:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10cba:	2200      	movs	r2, #0
   10cbc:	210c      	movs	r1, #12
   10cbe:	4638      	mov	r0, r7
   10cc0:	f00d fb3e 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10cc4:	3800      	subs	r0, #0
   10cc6:	bf18      	it	ne
   10cc8:	2001      	movne	r0, #1
   10cca:	7360      	strb	r0, [r4, #13]
      *builtin_data = params.release();
   10ccc:	e580      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        TF_LITE_REPORT_ERROR(error_reporter,
   10cce:	490b      	ldr	r1, [pc, #44]	; (10cfc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76c>)
   10cd0:	4640      	mov	r0, r8
   10cd2:	f00d faf5 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   10cd6:	e7e9      	b.n	10cac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x71c>
   10cd8:	682b      	ldr	r3, [r5, #0]
   10cda:	2204      	movs	r2, #4
   10cdc:	681b      	ldr	r3, [r3, #0]
   10cde:	2110      	movs	r1, #16
   10ce0:	4628      	mov	r0, r5
   10ce2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10ce4:	4604      	mov	r4, r0
   10ce6:	b968      	cbnz	r0, 10d04 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x774>
   10ce8:	4b02      	ldr	r3, [pc, #8]	; (10cf4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x764>)
   10cea:	9301      	str	r3, [sp, #4]
   10cec:	f44f 7329 	mov.w	r3, #676	; 0x2a4
   10cf0:	e517      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
   10cf2:	bf00      	nop
   10cf4:	000291b6 	.word	0x000291b6
   10cf8:	000291fa 	.word	0x000291fa
   10cfc:	00029219 	.word	0x00029219
   10d00:	00000000 	.word	0x00000000
    return builtin_options_type() == tflite::BuiltinOptions_UnidirectionalSequenceLSTMOptions ? static_cast<const tflite::UnidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   10d04:	4638      	mov	r0, r7
   10d06:	f00d fb24 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10d0a:	2847      	cmp	r0, #71	; 0x47
   10d0c:	f47f ad60 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10d10:	4638      	mov	r0, r7
   10d12:	f00d fb07 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* seq_lstm_params =
   10d16:	4605      	mov	r5, r0
   10d18:	2800      	cmp	r0, #0
   10d1a:	f43f ad59 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10d1e:	2200      	movs	r2, #0
   10d20:	2104      	movs	r1, #4
   10d22:	f00d fb25 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10d26:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10d28:	1e43      	subs	r3, r0, #1
   10d2a:	2b04      	cmp	r3, #4
   10d2c:	bf88      	it	hi
   10d2e:	2000      	movhi	r0, #0
        params->activation =
   10d30:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10d32:	2106      	movs	r1, #6
   10d34:	4628      	mov	r0, r5
   10d36:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10d3a:	f00d fb22 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10d3e:	2108      	movs	r1, #8
        params->cell_clip = seq_lstm_params->cell_clip();
   10d40:	ed84 0a01 	vstr	s0, [r4, #4]
   10d44:	4628      	mov	r0, r5
   10d46:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 10d00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x770>
   10d4a:	f00d fb1a 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   10d4e:	2200      	movs	r2, #0
        params->proj_clip = seq_lstm_params->proj_clip();
   10d50:	ed84 0a02 	vstr	s0, [r4, #8]
   10d54:	210a      	movs	r1, #10
   10d56:	4628      	mov	r0, r5
   10d58:	f00d faf2 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10d5c:	3800      	subs	r0, #0
   10d5e:	bf18      	it	ne
   10d60:	2001      	movne	r0, #1
   10d62:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10d64:	2200      	movs	r2, #0
   10d66:	210c      	movs	r1, #12
   10d68:	4628      	mov	r0, r5
   10d6a:	f00d fae9 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10d6e:	3800      	subs	r0, #0
   10d70:	bf18      	it	ne
   10d72:	2001      	movne	r0, #1
   10d74:	7360      	strb	r0, [r4, #13]
      *builtin_data = params.release();
   10d76:	e52b      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10d78:	682b      	ldr	r3, [r5, #0]
   10d7a:	2204      	movs	r2, #4
   10d7c:	681b      	ldr	r3, [r3, #0]
   10d7e:	2110      	movs	r1, #16
   10d80:	4628      	mov	r0, r5
   10d82:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10d84:	4604      	mov	r4, r0
   10d86:	b920      	cbnz	r0, 10d92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x802>
   10d88:	4bbc      	ldr	r3, [pc, #752]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10d8a:	9301      	str	r3, [sp, #4]
   10d8c:	f240 23b5 	movw	r3, #693	; 0x2b5
   10d90:	e4c7      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceLSTMOptions ? static_cast<const tflite::BidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   10d92:	4638      	mov	r0, r7
   10d94:	f00d fadd 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10d98:	2845      	cmp	r0, #69	; 0x45
   10d9a:	f47f ad19 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10d9e:	4638      	mov	r0, r7
   10da0:	f00d fac0 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_lstm_params =
   10da4:	4605      	mov	r5, r0
   10da6:	2800      	cmp	r0, #0
   10da8:	f43f ad12 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   10dac:	2200      	movs	r2, #0
   10dae:	2104      	movs	r1, #4
   10db0:	f00d fade 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   10db4:	b2c0      	uxtb	r0, r0
  switch (activation) {
   10db6:	1e43      	subs	r3, r0, #1
   10db8:	2b04      	cmp	r3, #4
   10dba:	bf88      	it	hi
   10dbc:	2000      	movhi	r0, #0
        params->activation =
   10dbe:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   10dc0:	2106      	movs	r1, #6
   10dc2:	4628      	mov	r0, r5
   10dc4:	ed9f 0aae 	vldr	s0, [pc, #696]	; 11080 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaf0>
   10dc8:	f00d fadb 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   10dcc:	2108      	movs	r1, #8
        params->cell_clip = bidi_lstm_params->cell_clip();
   10dce:	ed84 0a01 	vstr	s0, [r4, #4]
   10dd2:	4628      	mov	r0, r5
   10dd4:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 11080 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaf0>
   10dd8:	f00d fad3 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   10ddc:	2200      	movs	r2, #0
        params->proj_clip = bidi_lstm_params->proj_clip();
   10dde:	ed84 0a02 	vstr	s0, [r4, #8]
   10de2:	210a      	movs	r1, #10
   10de4:	4628      	mov	r0, r5
   10de6:	f00d faab 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10dea:	3800      	subs	r0, #0
   10dec:	bf18      	it	ne
   10dee:	2001      	movne	r0, #1
   10df0:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
   10df2:	2201      	movs	r2, #1
   10df4:	210c      	movs	r1, #12
   10df6:	4628      	mov	r0, r5
   10df8:	f00d faa2 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10dfc:	3800      	subs	r0, #0
   10dfe:	bf18      	it	ne
   10e00:	2001      	movne	r0, #1
   10e02:	7360      	strb	r0, [r4, #13]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   10e04:	2200      	movs	r2, #0
   10e06:	210e      	movs	r1, #14
   10e08:	4628      	mov	r0, r5
   10e0a:	f00d fa99 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e0e:	3800      	subs	r0, #0
   10e10:	bf18      	it	ne
   10e12:	2001      	movne	r0, #1
   10e14:	73a0      	strb	r0, [r4, #14]
      *builtin_data = params.release();
   10e16:	e4db      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10e18:	682b      	ldr	r3, [r5, #0]
   10e1a:	2201      	movs	r2, #1
   10e1c:	681b      	ldr	r3, [r3, #0]
   10e1e:	2102      	movs	r1, #2
   10e20:	4628      	mov	r0, r5
   10e22:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10e24:	4604      	mov	r4, r0
   10e26:	b920      	cbnz	r0, 10e32 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a2>
   10e28:	4b94      	ldr	r3, [pc, #592]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10e2a:	9301      	str	r3, [sp, #4]
   10e2c:	f240 23c6 	movw	r3, #710	; 0x2c6
   10e30:	e477      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
   10e32:	4638      	mov	r0, r7
   10e34:	f00d fa8d 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10e38:	280f      	cmp	r0, #15
   10e3a:	d116      	bne.n	10e6a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8da>
   10e3c:	4638      	mov	r0, r7
   10e3e:	f00d fa71 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10e42:	4605      	mov	r5, r0
   10e44:	b188      	cbz	r0, 10e6a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8da>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   10e46:	2200      	movs	r2, #0
   10e48:	2108      	movs	r1, #8
   10e4a:	f00d fa79 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e4e:	3800      	subs	r0, #0
   10e50:	bf18      	it	ne
   10e52:	2001      	movne	r0, #1
   10e54:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   10e56:	2200      	movs	r2, #0
   10e58:	210a      	movs	r1, #10
   10e5a:	4628      	mov	r0, r5
   10e5c:	f00d fa70 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10e60:	3800      	subs	r0, #0
   10e62:	bf18      	it	ne
   10e64:	2001      	movne	r0, #1
   10e66:	7060      	strb	r0, [r4, #1]
   10e68:	e4b2      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        params->align_corners = false;
   10e6a:	2300      	movs	r3, #0
   10e6c:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = false;
   10e6e:	7063      	strb	r3, [r4, #1]
      *builtin_data = params.release();
   10e70:	e4ae      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10e72:	682b      	ldr	r3, [r5, #0]
   10e74:	2201      	movs	r2, #1
   10e76:	681b      	ldr	r3, [r3, #0]
   10e78:	2102      	movs	r1, #2
   10e7a:	4628      	mov	r0, r5
   10e7c:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10e7e:	4604      	mov	r4, r0
   10e80:	b920      	cbnz	r0, 10e8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8fc>
   10e82:	4b7e      	ldr	r3, [pc, #504]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10e84:	9301      	str	r3, [sp, #4]
   10e86:	f240 23d7 	movw	r3, #727	; 0x2d7
   10e8a:	e44a      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   10e8c:	4638      	mov	r0, r7
   10e8e:	f00d fa60 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10e92:	284a      	cmp	r0, #74	; 0x4a
   10e94:	d116      	bne.n	10ec4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x934>
   10e96:	4638      	mov	r0, r7
   10e98:	f00d fa44 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10e9c:	4605      	mov	r5, r0
   10e9e:	b188      	cbz	r0, 10ec4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x934>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   10ea0:	2200      	movs	r2, #0
   10ea2:	2104      	movs	r1, #4
   10ea4:	f00d fa4c 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10ea8:	3800      	subs	r0, #0
   10eaa:	bf18      	it	ne
   10eac:	2001      	movne	r0, #1
   10eae:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   10eb0:	2200      	movs	r2, #0
   10eb2:	2106      	movs	r1, #6
   10eb4:	4628      	mov	r0, r5
   10eb6:	f00d fa43 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10eba:	3800      	subs	r0, #0
   10ebc:	bf18      	it	ne
   10ebe:	2001      	movne	r0, #1
   10ec0:	7060      	strb	r0, [r4, #1]
   10ec2:	e485      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
        params->align_corners = false;
   10ec4:	2300      	movs	r3, #0
   10ec6:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = false;
   10ec8:	7063      	strb	r3, [r4, #1]
      *builtin_data = params.release();
   10eca:	e481      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ecc:	682b      	ldr	r3, [r5, #0]
   10ece:	2204      	movs	r2, #4
   10ed0:	681b      	ldr	r3, [r3, #0]
   10ed2:	210c      	movs	r1, #12
   10ed4:	4628      	mov	r0, r5
   10ed6:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10ed8:	4604      	mov	r4, r0
   10eda:	b920      	cbnz	r0, 10ee6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x956>
   10edc:	4b67      	ldr	r3, [pc, #412]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10ede:	9301      	str	r3, [sp, #4]
   10ee0:	f240 23e5 	movw	r3, #741	; 0x2e5
   10ee4:	e41d      	b.n	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SkipGramOptions ? static_cast<const tflite::SkipGramOptions *>(builtin_options()) : nullptr;
   10ee6:	4638      	mov	r0, r7
   10ee8:	f00d fa33 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10eec:	2812      	cmp	r0, #18
   10eee:	f47f ac6f 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ef2:	4638      	mov	r0, r7
   10ef4:	f00d fa16 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* skip_gram_params =
   10ef8:	4605      	mov	r5, r0
   10efa:	2800      	cmp	r0, #0
   10efc:	f43f ac68 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
   10f00:	2200      	movs	r2, #0
   10f02:	2104      	movs	r1, #4
   10f04:	f00d fa2b 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
   10f08:	2200      	movs	r2, #0
        params->ngram_size = skip_gram_params->ngram_size();
   10f0a:	6020      	str	r0, [r4, #0]
   10f0c:	2106      	movs	r1, #6
   10f0e:	4628      	mov	r0, r5
   10f10:	f00d fa25 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
   10f14:	2200      	movs	r2, #0
        params->max_skip_size = skip_gram_params->max_skip_size();
   10f16:	6060      	str	r0, [r4, #4]
   10f18:	2108      	movs	r1, #8
   10f1a:	4628      	mov	r0, r5
   10f1c:	f00d fa10 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   10f20:	3800      	subs	r0, #0
   10f22:	bf18      	it	ne
   10f24:	2001      	movne	r0, #1
   10f26:	7220      	strb	r0, [r4, #8]
      *builtin_data = params.release();
   10f28:	e452      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f2a:	682b      	ldr	r3, [r5, #0]
   10f2c:	2204      	movs	r2, #4
   10f2e:	681b      	ldr	r3, [r3, #0]
   10f30:	4611      	mov	r1, r2
   10f32:	4628      	mov	r0, r5
   10f34:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10f36:	4604      	mov	r4, r0
   10f38:	b928      	cbnz	r0, 10f46 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9b6>
   10f3a:	4b50      	ldr	r3, [pc, #320]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10f3c:	9301      	str	r3, [sp, #4]
   10f3e:	f240 23f1 	movw	r3, #753	; 0x2f1
   10f42:	f7ff bbee 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SpaceToDepthOptions ? static_cast<const tflite::SpaceToDepthOptions *>(builtin_options()) : nullptr;
   10f46:	4638      	mov	r0, r7
   10f48:	f00d fa03 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10f4c:	2813      	cmp	r0, #19
   10f4e:	f47f ac3f 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f52:	4638      	mov	r0, r7
   10f54:	f00d f9e6 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10f58:	2800      	cmp	r0, #0
   10f5a:	f43f ac39 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   10f5e:	2200      	movs	r2, #0
   10f60:	2104      	movs	r1, #4
   10f62:	f00d f9fc 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->block_size = schema_params->block_size();
   10f66:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10f68:	e432      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f6a:	682b      	ldr	r3, [r5, #0]
   10f6c:	2204      	movs	r2, #4
   10f6e:	681b      	ldr	r3, [r3, #0]
   10f70:	4611      	mov	r1, r2
   10f72:	4628      	mov	r0, r5
   10f74:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10f76:	4604      	mov	r4, r0
   10f78:	b928      	cbnz	r0, 10f86 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9f6>
   10f7a:	4b40      	ldr	r3, [pc, #256]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10f7c:	9301      	str	r3, [sp, #4]
   10f7e:	f240 23fb 	movw	r3, #763	; 0x2fb
   10f82:	f7ff bbce 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_DepthToSpaceOptions ? static_cast<const tflite::DepthToSpaceOptions *>(builtin_options()) : nullptr;
   10f86:	4638      	mov	r0, r7
   10f88:	f00d f9e3 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10f8c:	285e      	cmp	r0, #94	; 0x5e
   10f8e:	f47f ac1f 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10f92:	4638      	mov	r0, r7
   10f94:	f00d f9c6 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   10f98:	2800      	cmp	r0, #0
   10f9a:	f43f ac19 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   10f9e:	2200      	movs	r2, #0
   10fa0:	2104      	movs	r1, #4
   10fa2:	f00d f9dc 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->block_size = schema_params->block_size();
   10fa6:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10fa8:	e412      	b.n	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10faa:	682b      	ldr	r3, [r5, #0]
   10fac:	2204      	movs	r2, #4
   10fae:	681b      	ldr	r3, [r3, #0]
   10fb0:	4611      	mov	r1, r2
   10fb2:	4628      	mov	r0, r5
   10fb4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10fb6:	4604      	mov	r4, r0
   10fb8:	b928      	cbnz	r0, 10fc6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa36>
   10fba:	4b30      	ldr	r3, [pc, #192]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   10fbc:	9301      	str	r3, [sp, #4]
   10fbe:	f240 3305 	movw	r3, #773	; 0x305
   10fc2:	f7ff bbae 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
      params->axis = 0;
   10fc6:	2500      	movs	r5, #0
   10fc8:	6005      	str	r5, [r0, #0]
    return builtin_options_type() == tflite::BuiltinOptions_GatherOptions ? static_cast<const tflite::GatherOptions *>(builtin_options()) : nullptr;
   10fca:	4638      	mov	r0, r7
   10fcc:	f00d f9c1 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   10fd0:	2817      	cmp	r0, #23
   10fd2:	f47f abfd 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10fd6:	4638      	mov	r0, r7
   10fd8:	f00d f9a4 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* gather_params = op->builtin_options_as_GatherOptions()) {
   10fdc:	2800      	cmp	r0, #0
   10fde:	f43f abf7 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_AXIS, 0);
   10fe2:	462a      	mov	r2, r5
   10fe4:	2104      	movs	r1, #4
   10fe6:	f00d f9ba 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = gather_params->axis();
   10fea:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   10fec:	f7ff bbf0 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   10ff0:	682b      	ldr	r3, [r5, #0]
   10ff2:	2201      	movs	r2, #1
   10ff4:	681b      	ldr	r3, [r3, #0]
   10ff6:	4611      	mov	r1, r2
   10ff8:	4628      	mov	r0, r5
   10ffa:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   10ffc:	4604      	mov	r4, r0
   10ffe:	b928      	cbnz	r0, 1100c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa7c>
   11000:	4b1e      	ldr	r3, [pc, #120]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   11002:	9301      	str	r3, [sp, #4]
   11004:	f240 3315 	movw	r3, #789	; 0x315
   11008:	f7ff bb8b 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
   1100c:	4638      	mov	r0, r7
   1100e:	f00d f9a0 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11012:	281b      	cmp	r0, #27
   11014:	f47f abdc 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11018:	4638      	mov	r0, r7
   1101a:	f00d f983 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReducerOptions()) {
   1101e:	2800      	cmp	r0, #0
   11020:	f43f abd6 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   11024:	2200      	movs	r2, #0
   11026:	2104      	movs	r1, #4
   11028:	f00d f98a 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1102c:	3800      	subs	r0, #0
   1102e:	bf18      	it	ne
   11030:	2001      	movne	r0, #1
   11032:	7020      	strb	r0, [r4, #0]
      *builtin_data = params.release();
   11034:	f7ff bbcc 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11038:	682b      	ldr	r3, [r5, #0]
   1103a:	2204      	movs	r2, #4
   1103c:	681b      	ldr	r3, [r3, #0]
   1103e:	4611      	mov	r1, r2
   11040:	4628      	mov	r0, r5
   11042:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11044:	4604      	mov	r4, r0
   11046:	b928      	cbnz	r0, 11054 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac4>
   11048:	4b0c      	ldr	r3, [pc, #48]	; (1107c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaec>)
   1104a:	9301      	str	r3, [sp, #4]
   1104c:	f240 331e 	movw	r3, #798	; 0x31e
   11050:	f7ff bb67 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SplitOptions ? static_cast<const tflite::SplitOptions *>(builtin_options()) : nullptr;
   11054:	4638      	mov	r0, r7
   11056:	f00d f97c 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1105a:	2823      	cmp	r0, #35	; 0x23
   1105c:	f47f abb8 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11060:	4638      	mov	r0, r7
   11062:	f00d f95f 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitOptions()) {
   11066:	2800      	cmp	r0, #0
   11068:	f43f abb2 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   1106c:	2200      	movs	r2, #0
   1106e:	2104      	movs	r1, #4
   11070:	f00d f975 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->num_splits = schema_params->num_splits();
   11074:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   11076:	f7ff bbab 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1107a:	bf00      	nop
   1107c:	000291b6 	.word	0x000291b6
   11080:	00000000 	.word	0x00000000
   11084:	682b      	ldr	r3, [r5, #0]
   11086:	2204      	movs	r2, #4
   11088:	681b      	ldr	r3, [r3, #0]
   1108a:	4611      	mov	r1, r2
   1108c:	4628      	mov	r0, r5
   1108e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11090:	4604      	mov	r4, r0
   11092:	b928      	cbnz	r0, 110a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb10>
   11094:	4bc5      	ldr	r3, [pc, #788]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   11096:	9301      	str	r3, [sp, #4]
   11098:	f240 3327 	movw	r3, #807	; 0x327
   1109c:	f7ff bb41 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
   110a0:	4638      	mov	r0, r7
   110a2:	f00d f956 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   110a6:	284f      	cmp	r0, #79	; 0x4f
   110a8:	f47f ab92 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   110ac:	4638      	mov	r0, r7
   110ae:	f00d f939 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitVOptions()) {
   110b2:	2800      	cmp	r0, #0
   110b4:	f43f ab8c 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   110b8:	2200      	movs	r2, #0
   110ba:	2104      	movs	r1, #4
   110bc:	f00d f94f 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->num_splits = schema_params->num_splits();
   110c0:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   110c2:	f7ff bb85 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   110c6:	682b      	ldr	r3, [r5, #0]
   110c8:	2204      	movs	r2, #4
   110ca:	681b      	ldr	r3, [r3, #0]
   110cc:	2124      	movs	r1, #36	; 0x24
   110ce:	4628      	mov	r0, r5
   110d0:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   110d2:	4681      	mov	r9, r0
   110d4:	b928      	cbnz	r0, 110e2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb52>
   110d6:	4bb5      	ldr	r3, [pc, #724]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   110d8:	9301      	str	r3, [sp, #4]
   110da:	f44f 734c 	mov.w	r3, #816	; 0x330
   110de:	f7ff bb20 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SqueezeOptions ? static_cast<const tflite::SqueezeOptions *>(builtin_options()) : nullptr;
   110e2:	4638      	mov	r0, r7
   110e4:	f00d f935 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   110e8:	281e      	cmp	r0, #30
   110ea:	f47f ab27 	bne.w	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   110ee:	4638      	mov	r0, r7
   110f0:	f00d f918 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SqueezeOptions()) {
   110f4:	4604      	mov	r4, r0
   110f6:	2800      	cmp	r0, #0
   110f8:	f43f ab20 	beq.w	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    auto field_offset = GetOptionalFieldOffset(field);
   110fc:	2104      	movs	r1, #4
   110fe:	f004 fac3 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   11102:	b188      	cbz	r0, 11128 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb98>
   11104:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
   11106:	1827      	adds	r7, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   11108:	441f      	add	r7, r3
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   1110a:	4ba9      	ldr	r3, [pc, #676]	; (113b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe20>)
   1110c:	4642      	mov	r2, r8
   1110e:	4649      	mov	r1, r9
   11110:	4638      	mov	r0, r7
   11112:	f7fe ffd5 	bl	100c0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   11116:	4604      	mov	r4, r0
   11118:	2800      	cmp	r0, #0
   1111a:	f47f ab32 	bne.w	10782 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
        params->num_squeeze_dims = squeeze_dims->size();
   1111e:	683b      	ldr	r3, [r7, #0]
   11120:	f8c9 3020 	str.w	r3, [r9, #32]
      *builtin_data = params.release();
   11124:	f7ff bb0a 	b.w	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   11128:	4607      	mov	r7, r0
   1112a:	e7ee      	b.n	1110a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb7a>
   1112c:	682b      	ldr	r3, [r5, #0]
   1112e:	2204      	movs	r2, #4
   11130:	681b      	ldr	r3, [r3, #0]
   11132:	2114      	movs	r1, #20
   11134:	4628      	mov	r0, r5
   11136:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11138:	4604      	mov	r4, r0
   1113a:	b928      	cbnz	r0, 11148 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbb8>
   1113c:	4b9b      	ldr	r3, [pc, #620]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   1113e:	9301      	str	r3, [sp, #4]
   11140:	f240 333d 	movw	r3, #829	; 0x33d
   11144:	f7ff baed 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
   11148:	4638      	mov	r0, r7
   1114a:	f00d f902 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1114e:	2820      	cmp	r0, #32
   11150:	f47f ab3e 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11154:	4638      	mov	r0, r7
   11156:	f00d f8e5 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   1115a:	4605      	mov	r5, r0
   1115c:	2800      	cmp	r0, #0
   1115e:	f43f ab37 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   11162:	2200      	movs	r2, #0
   11164:	2104      	movs	r1, #4
   11166:	f00d f8fa 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   1116a:	2200      	movs	r2, #0
        params->begin_mask = schema_params->begin_mask();
   1116c:	6020      	str	r0, [r4, #0]
   1116e:	2106      	movs	r1, #6
   11170:	4628      	mov	r0, r5
   11172:	f00d f8f4 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   11176:	2200      	movs	r2, #0
        params->end_mask = schema_params->end_mask();
   11178:	6060      	str	r0, [r4, #4]
   1117a:	2108      	movs	r1, #8
   1117c:	4628      	mov	r0, r5
   1117e:	f00d f8ee 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   11182:	2200      	movs	r2, #0
        params->ellipsis_mask = schema_params->ellipsis_mask();
   11184:	60a0      	str	r0, [r4, #8]
   11186:	210a      	movs	r1, #10
   11188:	4628      	mov	r0, r5
   1118a:	f00d f8e8 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   1118e:	2200      	movs	r2, #0
        params->new_axis_mask = schema_params->new_axis_mask();
   11190:	60e0      	str	r0, [r4, #12]
   11192:	210c      	movs	r1, #12
   11194:	4628      	mov	r0, r5
   11196:	f00d f8e2 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->shrink_axis_mask = schema_params->shrink_axis_mask();
   1119a:	6120      	str	r0, [r4, #16]
      *builtin_data = params.release();
   1119c:	f7ff bb18 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   111a0:	682b      	ldr	r3, [r5, #0]
   111a2:	2201      	movs	r2, #1
   111a4:	681b      	ldr	r3, [r3, #0]
   111a6:	4611      	mov	r1, r2
   111a8:	4628      	mov	r0, r5
   111aa:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   111ac:	4681      	mov	r9, r0
   111ae:	b928      	cbnz	r0, 111bc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2c>
   111b0:	4b7e      	ldr	r3, [pc, #504]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   111b2:	9301      	str	r3, [sp, #4]
   111b4:	f240 334b 	movw	r3, #843	; 0x34b
   111b8:	f7ff bab3 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ArgMaxOptions ? static_cast<const tflite::ArgMaxOptions *>(builtin_options()) : nullptr;
   111bc:	4638      	mov	r0, r7
   111be:	f00d f8c8 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   111c2:	2828      	cmp	r0, #40	; 0x28
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
   111c4:	f47f aaba 	bne.w	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
   111c8:	4638      	mov	r0, r7
   111ca:	f00d f8ab 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ShapeOptions()) {
   111ce:	2800      	cmp	r0, #0
   111d0:	f43f aab4 	beq.w	1073c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
   111d4:	2200      	movs	r2, #0
   111d6:	2104      	movs	r1, #4
   111d8:	f00d f8ca 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(
   111dc:	4642      	mov	r2, r8
   111de:	4649      	mov	r1, r9
   111e0:	f7ff bac9 	b.w	10776 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
   111e4:	682b      	ldr	r3, [r5, #0]
   111e6:	2201      	movs	r2, #1
   111e8:	681b      	ldr	r3, [r3, #0]
   111ea:	4611      	mov	r1, r2
   111ec:	4628      	mov	r0, r5
   111ee:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   111f0:	4681      	mov	r9, r0
   111f2:	b928      	cbnz	r0, 11200 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc70>
   111f4:	4b6d      	ldr	r3, [pc, #436]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   111f6:	9301      	str	r3, [sp, #4]
   111f8:	f240 3356 	movw	r3, #854	; 0x356
   111fc:	f7ff ba91 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
   11200:	4638      	mov	r0, r7
   11202:	f00d f8a6 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11206:	2839      	cmp	r0, #57	; 0x39
   11208:	e7dc      	b.n	111c4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc34>
   1120a:	682b      	ldr	r3, [r5, #0]
   1120c:	2204      	movs	r2, #4
   1120e:	681b      	ldr	r3, [r3, #0]
   11210:	210c      	movs	r1, #12
   11212:	4628      	mov	r0, r5
   11214:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11216:	4604      	mov	r4, r0
   11218:	b928      	cbnz	r0, 11226 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc96>
   1121a:	4b64      	ldr	r3, [pc, #400]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   1121c:	9301      	str	r3, [sp, #4]
   1121e:	f240 3361 	movw	r3, #865	; 0x361
   11222:	f7ff ba7e 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_TransposeConvOptions ? static_cast<const tflite::TransposeConvOptions *>(builtin_options()) : nullptr;
   11226:	4638      	mov	r0, r7
   11228:	f00d f893 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1122c:	2831      	cmp	r0, #49	; 0x31
   1122e:	f47f aacf 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11232:	4638      	mov	r0, r7
   11234:	f00d f876 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* transpose_conv_params =
   11238:	4605      	mov	r5, r0
   1123a:	2800      	cmp	r0, #0
   1123c:	f43f aac8 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   11240:	2200      	movs	r2, #0
   11242:	2104      	movs	r1, #4
   11244:	f00d f894 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        params->padding = ConvertPadding(transpose_conv_params->padding());
   11248:	b2c0      	uxtb	r0, r0
   1124a:	f00d f855 	bl	1e2f8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   1124e:	2200      	movs	r2, #0
   11250:	7020      	strb	r0, [r4, #0]
   11252:	2106      	movs	r1, #6
   11254:	4628      	mov	r0, r5
   11256:	f00d f882 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   1125a:	2200      	movs	r2, #0
        params->stride_width = transpose_conv_params->stride_w();
   1125c:	6060      	str	r0, [r4, #4]
   1125e:	2108      	movs	r1, #8
   11260:	4628      	mov	r0, r5
   11262:	f00d f87c 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->stride_height = transpose_conv_params->stride_h();
   11266:	60a0      	str	r0, [r4, #8]
      *builtin_data = params.release();
   11268:	f7ff bab2 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1126c:	682b      	ldr	r3, [r5, #0]
   1126e:	2201      	movs	r2, #1
   11270:	681b      	ldr	r3, [r3, #0]
   11272:	4611      	mov	r1, r2
   11274:	4628      	mov	r0, r5
   11276:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11278:	4604      	mov	r4, r0
   1127a:	b928      	cbnz	r0, 11288 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcf8>
   1127c:	4b4b      	ldr	r3, [pc, #300]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   1127e:	9301      	str	r3, [sp, #4]
   11280:	f240 336d 	movw	r3, #877	; 0x36d
   11284:	f7ff ba4d 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_SparseToDenseOptions ? static_cast<const tflite::SparseToDenseOptions *>(builtin_options()) : nullptr;
   11288:	4638      	mov	r0, r7
   1128a:	f00d f862 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1128e:	2832      	cmp	r0, #50	; 0x32
   11290:	f47f aa9e 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11294:	4638      	mov	r0, r7
   11296:	f00d f845 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sparse_to_dense_params =
   1129a:	2800      	cmp	r0, #0
   1129c:	f43f aa98 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
   112a0:	2200      	movs	r2, #0
   112a2:	2104      	movs	r1, #4
   112a4:	f00d f84c 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   112a8:	3800      	subs	r0, #0
   112aa:	bf18      	it	ne
   112ac:	2001      	movne	r0, #1
   112ae:	7020      	strb	r0, [r4, #0]
      *builtin_data = params.release();
   112b0:	f7ff ba8e 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   112b4:	682b      	ldr	r3, [r5, #0]
   112b6:	2201      	movs	r2, #1
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	4611      	mov	r1, r2
   112bc:	4628      	mov	r0, r5
   112be:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   112c0:	4681      	mov	r9, r0
   112c2:	b928      	cbnz	r0, 112d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd40>
   112c4:	4b39      	ldr	r3, [pc, #228]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   112c6:	9301      	str	r3, [sp, #4]
   112c8:	f240 3377 	movw	r3, #887	; 0x377
   112cc:	f7ff ba29 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
   112d0:	4638      	mov	r0, r7
   112d2:	f00d f83e 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   112d6:	2837      	cmp	r0, #55	; 0x37
   112d8:	e774      	b.n	111c4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc34>
   112da:	682b      	ldr	r3, [r5, #0]
   112dc:	2204      	movs	r2, #4
   112de:	681b      	ldr	r3, [r3, #0]
   112e0:	2108      	movs	r1, #8
   112e2:	4628      	mov	r0, r5
   112e4:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   112e6:	4604      	mov	r4, r0
   112e8:	b928      	cbnz	r0, 112f6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd66>
   112ea:	4b30      	ldr	r3, [pc, #192]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   112ec:	9301      	str	r3, [sp, #4]
   112ee:	f240 3381 	movw	r3, #897	; 0x381
   112f2:	f7ff ba16 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
   112f6:	4638      	mov	r0, r7
   112f8:	f00d f82b 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   112fc:	283b      	cmp	r0, #59	; 0x3b
   112fe:	f47f aa67 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11302:	4638      	mov	r0, r7
   11304:	f00d f80e 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pack_params = op->builtin_options_as_PackOptions()) {
   11308:	4605      	mov	r5, r0
   1130a:	2800      	cmp	r0, #0
   1130c:	f43f aa60 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   11310:	2200      	movs	r2, #0
   11312:	2104      	movs	r1, #4
   11314:	f00d f823 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   11318:	2200      	movs	r2, #0
        params->values_count = pack_params->values_count();
   1131a:	6020      	str	r0, [r4, #0]
   1131c:	2106      	movs	r1, #6
   1131e:	4628      	mov	r0, r5
   11320:	f00d f81d 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = pack_params->axis();
   11324:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   11326:	f7ff ba53 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
      TF_LITE_REPORT_ERROR(error_reporter,
   1132a:	4922      	ldr	r1, [pc, #136]	; (113b4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe24>)
   1132c:	4610      	mov	r0, r2
   1132e:	f00c ffc7 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   11332:	e4bf      	b.n	10cb4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x724>
   11334:	682b      	ldr	r3, [r5, #0]
   11336:	2204      	movs	r2, #4
   11338:	681b      	ldr	r3, [r3, #0]
   1133a:	2110      	movs	r1, #16
   1133c:	4628      	mov	r0, r5
   1133e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11340:	4604      	mov	r4, r0
   11342:	b928      	cbnz	r0, 11350 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc0>
   11344:	4b19      	ldr	r3, [pc, #100]	; (113ac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe1c>)
   11346:	9301      	str	r3, [sp, #4]
   11348:	f240 3391 	movw	r3, #913	; 0x391
   1134c:	f7ff b9e9 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_FakeQuantOptions ? static_cast<const tflite::FakeQuantOptions *>(builtin_options()) : nullptr;
   11350:	4638      	mov	r0, r7
   11352:	f00c fffe 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11356:	283a      	cmp	r0, #58	; 0x3a
   11358:	f47f aa3a 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1135c:	4638      	mov	r0, r7
   1135e:	f00c ffe1 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   11362:	4605      	mov	r5, r0
   11364:	2800      	cmp	r0, #0
   11366:	f43f aa33 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<float>(VT_MIN, 0.0f);
   1136a:	2104      	movs	r1, #4
   1136c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 113b8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe28>
   11370:	f00d f807 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_MAX, 0.0f);
   11374:	2106      	movs	r1, #6
        params->min = schema_params->min();
   11376:	ed84 0a00 	vstr	s0, [r4]
   1137a:	4628      	mov	r0, r5
   1137c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 113b8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe28>
   11380:	f00c ffff 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<int32_t>(VT_NUM_BITS, 0);
   11384:	2200      	movs	r2, #0
        params->max = schema_params->max();
   11386:	ed84 0a01 	vstr	s0, [r4, #4]
   1138a:	2108      	movs	r1, #8
   1138c:	4628      	mov	r0, r5
   1138e:	f00c ffe6 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
   11392:	2200      	movs	r2, #0
        params->num_bits = schema_params->num_bits();
   11394:	60a0      	str	r0, [r4, #8]
   11396:	210a      	movs	r1, #10
   11398:	4628      	mov	r0, r5
   1139a:	f00c ffd1 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1139e:	3800      	subs	r0, #0
   113a0:	bf18      	it	ne
   113a2:	2001      	movne	r0, #1
   113a4:	7320      	strb	r0, [r4, #12]
      *builtin_data = params.release();
   113a6:	f7ff ba13 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   113aa:	bf00      	nop
   113ac:	000291b6 	.word	0x000291b6
   113b0:	0002923d 	.word	0x0002923d
   113b4:	00029245 	.word	0x00029245
   113b8:	00000000 	.word	0x00000000
   113bc:	682b      	ldr	r3, [r5, #0]
   113be:	2204      	movs	r2, #4
   113c0:	681b      	ldr	r3, [r3, #0]
   113c2:	4611      	mov	r1, r2
   113c4:	4628      	mov	r0, r5
   113c6:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   113c8:	4604      	mov	r4, r0
   113ca:	b928      	cbnz	r0, 113d8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe48>
   113cc:	4ba9      	ldr	r3, [pc, #676]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   113ce:	9301      	str	r3, [sp, #4]
   113d0:	f240 339e 	movw	r3, #926	; 0x39e
   113d4:	f7ff b9a5 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_OneHotOptions ? static_cast<const tflite::OneHotOptions *>(builtin_options()) : nullptr;
   113d8:	4638      	mov	r0, r7
   113da:	f00c ffba 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   113de:	283d      	cmp	r0, #61	; 0x3d
   113e0:	f47f a9f6 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   113e4:	4638      	mov	r0, r7
   113e6:	f00c ff9d 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
   113ea:	2800      	cmp	r0, #0
   113ec:	f43f a9f0 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_AXIS, 0);
   113f0:	2200      	movs	r2, #0
   113f2:	2104      	movs	r1, #4
   113f4:	f00c ffb3 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = schema_params->axis();
   113f8:	6020      	str	r0, [r4, #0]
      *builtin_data = params.release();
   113fa:	f7ff b9e9 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   113fe:	682b      	ldr	r3, [r5, #0]
   11400:	2204      	movs	r2, #4
   11402:	681b      	ldr	r3, [r3, #0]
   11404:	2108      	movs	r1, #8
   11406:	4628      	mov	r0, r5
   11408:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1140a:	4604      	mov	r4, r0
   1140c:	b928      	cbnz	r0, 1141a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8a>
   1140e:	4b99      	ldr	r3, [pc, #612]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   11410:	9301      	str	r3, [sp, #4]
   11412:	f240 33a7 	movw	r3, #935	; 0x3a7
   11416:	f7ff b984 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_UnpackOptions ? static_cast<const tflite::UnpackOptions *>(builtin_options()) : nullptr;
   1141a:	4638      	mov	r0, r7
   1141c:	f00c ff99 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11420:	2840      	cmp	r0, #64	; 0x40
   11422:	f47f a9d5 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11426:	4638      	mov	r0, r7
   11428:	f00c ff7c 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* unpack_params = op->builtin_options_as_UnpackOptions()) {
   1142c:	4605      	mov	r5, r0
   1142e:	2800      	cmp	r0, #0
   11430:	f43f a9ce 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_NUM, 0);
   11434:	2200      	movs	r2, #0
   11436:	2104      	movs	r1, #4
   11438:	f00c ff91 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   1143c:	2200      	movs	r2, #0
        params->num = unpack_params->num();
   1143e:	6020      	str	r0, [r4, #0]
   11440:	2106      	movs	r1, #6
   11442:	4628      	mov	r0, r5
   11444:	f00c ff8b 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->axis = unpack_params->axis();
   11448:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   1144a:	f7ff b9c1 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   1144e:	682b      	ldr	r3, [r5, #0]
   11450:	2204      	movs	r2, #4
   11452:	681b      	ldr	r3, [r3, #0]
   11454:	4611      	mov	r1, r2
   11456:	4628      	mov	r0, r5
   11458:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   1145a:	4604      	mov	r4, r0
   1145c:	b928      	cbnz	r0, 1146a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xeda>
   1145e:	4b85      	ldr	r3, [pc, #532]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   11460:	9301      	str	r3, [sp, #4]
   11462:	f240 33b1 	movw	r3, #945	; 0x3b1
   11466:	f7ff b95c 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
   1146a:	4638      	mov	r0, r7
   1146c:	f00c ff71 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11470:	284b      	cmp	r0, #75	; 0x4b
   11472:	f47f a9ad 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11476:	4638      	mov	r0, r7
   11478:	f00c ff54 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* leaky_relu_params =
   1147c:	2800      	cmp	r0, #0
   1147e:	f43f a9a7 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<float>(VT_ALPHA, 0.0f);
   11482:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 11678 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e8>
   11486:	2104      	movs	r1, #4
   11488:	f00c ff7b 	bl	1e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->alpha = leaky_relu_params->alpha();
   1148c:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = params.release();
   11490:	f7ff b99e 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11494:	682b      	ldr	r3, [r5, #0]
   11496:	2201      	movs	r2, #1
   11498:	681b      	ldr	r3, [r3, #0]
   1149a:	4611      	mov	r1, r2
   1149c:	4628      	mov	r0, r5
   1149e:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   114a0:	4604      	mov	r4, r0
   114a2:	b928      	cbnz	r0, 114b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf20>
   114a4:	4b73      	ldr	r3, [pc, #460]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   114a6:	9301      	str	r3, [sp, #4]
   114a8:	f240 33bb 	movw	r3, #955	; 0x3bb
   114ac:	f7ff b939 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
   114b0:	4638      	mov	r0, r7
   114b2:	f00c ff4e 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   114b6:	284d      	cmp	r0, #77	; 0x4d
   114b8:	f47f a98a 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   114bc:	4638      	mov	r0, r7
   114be:	f00c ff31 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (mirror_pad_params != nullptr) {
   114c2:	2800      	cmp	r0, #0
   114c4:	f43f a984 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
   114c8:	2200      	movs	r2, #0
   114ca:	2104      	movs	r1, #4
   114cc:	f00c ff50 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
   114d0:	2800      	cmp	r0, #0
   114d2:	bf0c      	ite	eq
   114d4:	2301      	moveq	r3, #1
   114d6:	2302      	movne	r3, #2
        params->mode =
   114d8:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   114da:	f7ff b979 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   114de:	682b      	ldr	r3, [r5, #0]
   114e0:	2201      	movs	r2, #1
   114e2:	681b      	ldr	r3, [r3, #0]
   114e4:	4611      	mov	r1, r2
   114e6:	4628      	mov	r0, r5
   114e8:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   114ea:	4604      	mov	r4, r0
   114ec:	b928      	cbnz	r0, 114fa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6a>
   114ee:	4b61      	ldr	r3, [pc, #388]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   114f0:	9301      	str	r3, [sp, #4]
   114f2:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   114f6:	f7ff b914 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
   114fa:	4638      	mov	r0, r7
   114fc:	f00c ff29 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   11500:	2850      	cmp	r0, #80	; 0x50
   11502:	f47f a965 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11506:	4638      	mov	r0, r7
   11508:	f00c ff0c 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (unique_params != nullptr) {
   1150c:	2800      	cmp	r0, #0
   1150e:	f43f a95f 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
   11512:	2202      	movs	r2, #2
   11514:	2104      	movs	r1, #4
   11516:	f00c ff2b 	bl	1e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteType::kTfLiteInt64
   1151a:	2804      	cmp	r0, #4
   1151c:	bf0c      	ite	eq
   1151e:	2304      	moveq	r3, #4
   11520:	2302      	movne	r3, #2
        params->index_out_type =
   11522:	7023      	strb	r3, [r4, #0]
      *builtin_data = params.release();
   11524:	f7ff b954 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11528:	682b      	ldr	r3, [r5, #0]
   1152a:	2204      	movs	r2, #4
   1152c:	681b      	ldr	r3, [r3, #0]
   1152e:	2108      	movs	r1, #8
   11530:	4628      	mov	r0, r5
   11532:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11534:	4604      	mov	r4, r0
   11536:	b928      	cbnz	r0, 11544 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfb4>
   11538:	4b4e      	ldr	r3, [pc, #312]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1153a:	9301      	str	r3, [sp, #4]
   1153c:	f240 33d5 	movw	r3, #981	; 0x3d5
   11540:	f7ff b8ef 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
   11544:	4638      	mov	r0, r7
   11546:	f00c ff04 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1154a:	2857      	cmp	r0, #87	; 0x57
   1154c:	f47f a940 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11550:	4638      	mov	r0, r7
   11552:	f00c fee7 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* reverse_seq_params =
   11556:	4605      	mov	r5, r0
   11558:	2800      	cmp	r0, #0
   1155a:	f43f a939 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_SEQ_DIM, 0);
   1155e:	2200      	movs	r2, #0
   11560:	2104      	movs	r1, #4
   11562:	f00c fefc 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_BATCH_DIM, 0);
   11566:	2200      	movs	r2, #0
        params->seq_dim = reverse_seq_params->seq_dim();
   11568:	6020      	str	r0, [r4, #0]
   1156a:	2106      	movs	r1, #6
   1156c:	4628      	mov	r0, r5
   1156e:	f00c fef6 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->batch_dim = reverse_seq_params->batch_dim();
   11572:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   11574:	f7ff b92c 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11578:	682b      	ldr	r3, [r5, #0]
   1157a:	2204      	movs	r2, #4
   1157c:	681b      	ldr	r3, [r3, #0]
   1157e:	2108      	movs	r1, #8
   11580:	4628      	mov	r0, r5
   11582:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11584:	4604      	mov	r4, r0
   11586:	b928      	cbnz	r0, 11594 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1004>
   11588:	4b3a      	ldr	r3, [pc, #232]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1158a:	9301      	str	r3, [sp, #4]
   1158c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   11590:	f7ff b8c7 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
   11594:	4638      	mov	r0, r7
   11596:	f00c fedc 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1159a:	285c      	cmp	r0, #92	; 0x5c
   1159c:	f47f a918 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115a0:	4638      	mov	r0, r7
   115a2:	f00c febf 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
   115a6:	4605      	mov	r5, r0
   115a8:	2800      	cmp	r0, #0
   115aa:	f43f a911 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
   115ae:	2200      	movs	r2, #0
   115b0:	2104      	movs	r1, #4
   115b2:	f00c fed4 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
   115b6:	2200      	movs	r2, #0
        params->then_subgraph_index = if_params->then_subgraph_index();
   115b8:	6020      	str	r0, [r4, #0]
   115ba:	2106      	movs	r1, #6
   115bc:	4628      	mov	r0, r5
   115be:	f00c fece 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->else_subgraph_index = if_params->else_subgraph_index();
   115c2:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   115c4:	f7ff b904 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115c8:	682b      	ldr	r3, [r5, #0]
   115ca:	2204      	movs	r2, #4
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	2108      	movs	r1, #8
   115d0:	4628      	mov	r0, r5
   115d2:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   115d4:	4604      	mov	r4, r0
   115d6:	b928      	cbnz	r0, 115e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1054>
   115d8:	4b26      	ldr	r3, [pc, #152]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   115da:	9301      	str	r3, [sp, #4]
   115dc:	f240 33ea 	movw	r3, #1002	; 0x3ea
   115e0:	f7ff b89f 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
   115e4:	4638      	mov	r0, r7
   115e6:	f00c feb4 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   115ea:	285d      	cmp	r0, #93	; 0x5d
   115ec:	f47f a8f0 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   115f0:	4638      	mov	r0, r7
   115f2:	f00c fe97 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
   115f6:	4605      	mov	r5, r0
   115f8:	2800      	cmp	r0, #0
   115fa:	f43f a8e9 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
   115fe:	2200      	movs	r2, #0
   11600:	2104      	movs	r1, #4
   11602:	f00c feac 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
   11606:	2200      	movs	r2, #0
        params->cond_subgraph_index = while_params->cond_subgraph_index();
   11608:	6020      	str	r0, [r4, #0]
   1160a:	2106      	movs	r1, #6
   1160c:	4628      	mov	r0, r5
   1160e:	f00c fea6 	bl	1e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
        params->body_subgraph_index = while_params->body_subgraph_index();
   11612:	6060      	str	r0, [r4, #4]
      *builtin_data = params.release();
   11614:	f7ff b8dc 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11618:	682b      	ldr	r3, [r5, #0]
   1161a:	2201      	movs	r2, #1
   1161c:	681b      	ldr	r3, [r3, #0]
   1161e:	2102      	movs	r1, #2
   11620:	4628      	mov	r0, r5
   11622:	4798      	blx	r3
      TF_LITE_ENSURE(error_reporter, params != nullptr);
   11624:	4604      	mov	r4, r0
   11626:	b928      	cbnz	r0, 11634 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a4>
   11628:	4b12      	ldr	r3, [pc, #72]	; (11674 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e4>)
   1162a:	9301      	str	r3, [sp, #4]
   1162c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
   11630:	f7ff b877 	b.w	10722 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192>
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
   11634:	4638      	mov	r0, r7
   11636:	f00c fe8c 	bl	1e352 <_ZNK6tflite8Operator20builtin_options_typeEv>
   1163a:	2865      	cmp	r0, #101	; 0x65
   1163c:	f47f a8c8 	bne.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11640:	4638      	mov	r0, r7
   11642:	f00c fe6f 	bl	1e324 <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bmm_params =
   11646:	4605      	mov	r5, r0
   11648:	2800      	cmp	r0, #0
   1164a:	f43f a8c1 	beq.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
   1164e:	2200      	movs	r2, #0
   11650:	2104      	movs	r1, #4
   11652:	f00c fe75 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   11656:	3800      	subs	r0, #0
   11658:	bf18      	it	ne
   1165a:	2001      	movne	r0, #1
   1165c:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
   1165e:	2200      	movs	r2, #0
   11660:	2106      	movs	r1, #6
   11662:	4628      	mov	r0, r5
   11664:	f00c fe6c 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   11668:	3800      	subs	r0, #0
   1166a:	bf18      	it	ne
   1166c:	2001      	movne	r0, #1
   1166e:	7060      	strb	r0, [r4, #1]
   11670:	f7ff b8ae 	b.w	107d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x240>
   11674:	000291b6 	.word	0x000291b6
   11678:	00000000 	.word	0x00000000

0001167c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1167c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11680:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   11682:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   11684:	460f      	mov	r7, r1
  *registration = nullptr;
   11686:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   11688:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1168a:	4605      	mov	r5, r0
   1168c:	4690      	mov	r8, r2
   1168e:	f003 fffb 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   11692:	b100      	cbz	r0, 11696 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   11694:	5628      	ldrsb	r0, [r5, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   11696:	b2c4      	uxtb	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   11698:	2108      	movs	r1, #8
   1169a:	4628      	mov	r0, r5
   1169c:	f003 fff4 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   116a0:	b158      	cbz	r0, 116ba <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   116a2:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   116a4:	2c7e      	cmp	r4, #126	; 0x7e
   116a6:	d90a      	bls.n	116be <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
   116a8:	491d      	ldr	r1, [pc, #116]	; (11720 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   116aa:	4622      	mov	r2, r4
   116ac:	4640      	mov	r0, r8
   116ae:	f00c fe07 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
   116b2:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   116b4:	b002      	add	sp, #8
   116b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116ba:	2201      	movs	r2, #1
   116bc:	e7f2      	b.n	116a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   116be:	2c20      	cmp	r4, #32
   116c0:	d011      	beq.n	116e6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
    *registration = op_resolver.FindOp(builtin_code, version);
   116c2:	683b      	ldr	r3, [r7, #0]
   116c4:	9201      	str	r2, [sp, #4]
   116c6:	681b      	ldr	r3, [r3, #0]
   116c8:	4621      	mov	r1, r4
   116ca:	4638      	mov	r0, r7
   116cc:	4798      	blx	r3
    if (*registration == nullptr) {
   116ce:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   116d0:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   116d2:	bb10      	cbnz	r0, 1171a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
      TF_LITE_REPORT_ERROR(
   116d4:	4613      	mov	r3, r2
   116d6:	4a13      	ldr	r2, [pc, #76]	; (11724 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   116d8:	4913      	ldr	r1, [pc, #76]	; (11728 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   116da:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   116de:	4640      	mov	r0, r8
   116e0:	f00c fdee 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
   116e4:	e7e5      	b.n	116b2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   116e6:	2106      	movs	r1, #6
   116e8:	4628      	mov	r0, r5
   116ea:	9201      	str	r2, [sp, #4]
   116ec:	f003 ffcc 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   116f0:	b120      	cbz	r0, 116fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
   116f2:	582b      	ldr	r3, [r5, r0]
  } else if (!opcode->custom_code()) {
   116f4:	9a01      	ldr	r2, [sp, #4]
    auto p = data_ + field_offset;
   116f6:	1829      	adds	r1, r5, r0
   116f8:	18c9      	adds	r1, r1, r3
   116fa:	d104      	bne.n	11706 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8a>
    TF_LITE_REPORT_ERROR(
   116fc:	490b      	ldr	r1, [pc, #44]	; (1172c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   116fe:	4640      	mov	r0, r8
   11700:	f00c fdde 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   11704:	e7d5      	b.n	116b2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
   11706:	683b      	ldr	r3, [r7, #0]
   11708:	3104      	adds	r1, #4
   1170a:	685b      	ldr	r3, [r3, #4]
   1170c:	4638      	mov	r0, r7
   1170e:	4798      	blx	r3
   11710:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   11712:	fab0 f080 	clz	r0, r0
   11716:	0940      	lsrs	r0, r0, #5
   11718:	e7cc      	b.n	116b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
   1171a:	2000      	movs	r0, #0
   1171c:	e7ca      	b.n	116b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   1171e:	bf00      	nop
   11720:	0002926b 	.word	0x0002926b
   11724:	000256f0 	.word	0x000256f0
   11728:	000292bf 	.word	0x000292bf
   1172c:	000292f4 	.word	0x000292f4

00011730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   11730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (double_multiplier == 0.) {
   11732:	2300      	movs	r3, #0
                        int* shift) {
   11734:	4605      	mov	r5, r0
   11736:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   11738:	2200      	movs	r2, #0
   1173a:	ec51 0b10 	vmov	r0, r1, d0
   1173e:	ed8d 0b00 	vstr	d0, [sp]
   11742:	f7ef fd51 	bl	11e8 <__aeabi_dcmpeq>
   11746:	ed9d 0b00 	vldr	d0, [sp]
   1174a:	b120      	cbz	r0, 11756 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x26>
    *quantized_multiplier = 0;
   1174c:	2300      	movs	r3, #0
   1174e:	602b      	str	r3, [r5, #0]
    *shift = 0;
   11750:	6023      	str	r3, [r4, #0]
}
   11752:	b003      	add	sp, #12
   11754:	bd30      	pop	{r4, r5, pc}
  const double q = std::frexp(double_multiplier, shift);
   11756:	4620      	mov	r0, r4
   11758:	f000 fbde 	bl	11f18 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1175c:	4b15      	ldr	r3, [pc, #84]	; (117b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x84>)
   1175e:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   11760:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   11764:	f7ef fad8 	bl	d18 <__aeabi_dmul>
   11768:	ec41 0b10 	vmov	d0, r0, r1
   1176c:	f000 fc0a 	bl	11f84 <round>
   11770:	ec51 0b10 	vmov	r0, r1, d0
   11774:	f7ef fde2 	bl	133c <__aeabi_d2lz>
   11778:	4602      	mov	r2, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   1177a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1177e:	460b      	mov	r3, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   11780:	4290      	cmp	r0, r2
   11782:	f04f 0100 	mov.w	r1, #0
   11786:	eb71 0c03 	sbcs.w	ip, r1, r3
   1178a:	da01      	bge.n	11790 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x60>
   1178c:	f00c ff32 	bl	1e5f4 <abort>
  if (q_fixed == (1ll << 31)) {
   11790:	428b      	cmp	r3, r1
   11792:	bf01      	itttt	eq
   11794:	4282      	cmpeq	r2, r0
    ++*shift;
   11796:	6823      	ldreq	r3, [r4, #0]
   11798:	3301      	addeq	r3, #1
   1179a:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   1179c:	6821      	ldr	r1, [r4, #0]
    q_fixed /= 2;
   1179e:	bf08      	it	eq
   117a0:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
  if (*shift < -31) {
   117a4:	311f      	adds	r1, #31
    *shift = 0;
   117a6:	bfbe      	ittt	lt
   117a8:	2300      	movlt	r3, #0
    q_fixed = 0;
   117aa:	2200      	movlt	r2, #0
    *shift = 0;
   117ac:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   117ae:	602a      	str	r2, [r5, #0]
   117b0:	e7cf      	b.n	11752 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x22>
   117b2:	bf00      	nop
   117b4:	41e00000 	.word	0x41e00000

000117b8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   117b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   117ba:	4b0c      	ldr	r3, [pc, #48]	; (117ec <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
   117bc:	4605      	mov	r5, r0
   117be:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   117c0:	2200      	movs	r2, #0
   117c2:	ec51 0b10 	vmov	r0, r1, d0
   117c6:	ed8d 0b00 	vstr	d0, [sp]
   117ca:	f7ef fd35 	bl	1238 <__aeabi_dcmpgt>
   117ce:	ed9d 0b00 	vldr	d0, [sp]
   117d2:	b908      	cbnz	r0, 117d8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
   117d4:	f00c ff0e 	bl	1e5f4 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   117d8:	4621      	mov	r1, r4
   117da:	4628      	mov	r0, r5
   117dc:	f7ff ffa8 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   117e0:	6823      	ldr	r3, [r4, #0]
   117e2:	2b00      	cmp	r3, #0
   117e4:	dbf6      	blt.n	117d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
   117e6:	b003      	add	sp, #12
   117e8:	bd30      	pop	{r4, r5, pc}
   117ea:	bf00      	nop
   117ec:	3ff00000 	.word	0x3ff00000

000117f0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
   117f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117f2:	ec55 4b10 	vmov	r4, r5, d0
   117f6:	4607      	mov	r7, r0
   117f8:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   117fa:	4b0f      	ldr	r3, [pc, #60]	; (11838 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x48>)
   117fc:	ee10 0a10 	vmov	r0, s0
   11800:	2200      	movs	r2, #0
   11802:	4629      	mov	r1, r5
   11804:	f7ef fcfa 	bl	11fc <__aeabi_dcmplt>
   11808:	b908      	cbnz	r0, 1180e <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1e>
   1180a:	f00c fef3 	bl	1e5f4 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   1180e:	2200      	movs	r2, #0
   11810:	2300      	movs	r3, #0
   11812:	4620      	mov	r0, r4
   11814:	4629      	mov	r1, r5
   11816:	f7ef fd0f 	bl	1238 <__aeabi_dcmpgt>
   1181a:	2800      	cmp	r0, #0
   1181c:	d0f5      	beq.n	1180a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1a>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   1181e:	ec45 4b10 	vmov	d0, r4, r5
   11822:	a901      	add	r1, sp, #4
   11824:	4638      	mov	r0, r7
   11826:	f7ff ff83 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
   1182a:	9b01      	ldr	r3, [sp, #4]
   1182c:	2b00      	cmp	r3, #0
   1182e:	dcec      	bgt.n	1180a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x1a>
  *left_shift = shift;
   11830:	6033      	str	r3, [r6, #0]
}
   11832:	b003      	add	sp, #12
   11834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11836:	bf00      	nop
   11838:	3ff00000 	.word	0x3ff00000

0001183c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   1183c:	edd1 7a03 	vldr	s15, [r1, #12]
   11840:	ed92 7a03 	vldr	s14, [r2, #12]
   11844:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   11848:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   1184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   11852:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   11854:	d509      	bpl.n	1186a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   11856:	4b0f      	ldr	r3, [pc, #60]	; (11894 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   11858:	9300      	str	r3, [sp, #0]
   1185a:	6944      	ldr	r4, [r0, #20]
   1185c:	4a0e      	ldr	r2, [pc, #56]	; (11898 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   1185e:	490f      	ldr	r1, [pc, #60]	; (1189c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   11860:	23a7      	movs	r3, #167	; 0xa7
   11862:	47a0      	blx	r4
   11864:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   11866:	b002      	add	sp, #8
   11868:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   1186a:	ee17 0a90 	vmov	r0, s15
   1186e:	f7ef f9fb 	bl	c68 <__aeabi_f2d>
   11872:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   11874:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   11876:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   11878:	f7ef f9f6 	bl	c68 <__aeabi_f2d>
   1187c:	460b      	mov	r3, r1
   1187e:	4602      	mov	r2, r0
   11880:	4629      	mov	r1, r5
   11882:	4620      	mov	r0, r4
   11884:	f7ef fb72 	bl	f6c <__aeabi_ddiv>
   11888:	9b06      	ldr	r3, [sp, #24]
   1188a:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   1188e:	2000      	movs	r0, #0
   11890:	e7e9      	b.n	11866 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   11892:	bf00      	nop
   11894:	00029352 	.word	0x00029352
   11898:	0002932b 	.word	0x0002932b
   1189c:	000272d2 	.word	0x000272d2

000118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   118a2:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   118a4:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   118a6:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   118a8:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   118aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   118ac:	d00d      	beq.n	118ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   118ae:	2b09      	cmp	r3, #9
   118b0:	d01e      	beq.n	118f0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   118b2:	2b07      	cmp	r3, #7
   118b4:	d020      	beq.n	118f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   118b6:	4b25      	ldr	r3, [pc, #148]	; (1194c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xac>)
   118b8:	9300      	str	r3, [sp, #0]
   118ba:	6944      	ldr	r4, [r0, #20]
   118bc:	4a24      	ldr	r2, [pc, #144]	; (11950 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   118be:	4925      	ldr	r1, [pc, #148]	; (11954 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   118c0:	23da      	movs	r3, #218	; 0xda
   118c2:	47a0      	blx	r4
   118c4:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   118c6:	b005      	add	sp, #20
   118c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   118ca:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   118cc:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   118ce:	6913      	ldr	r3, [r2, #16]
  };
   118d0:	68d2      	ldr	r2, [r2, #12]
   118d2:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
   118d4:	2901      	cmp	r1, #1
  };
   118d6:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   118d8:	d112      	bne.n	11900 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x60>
    *act_min = std::max(qmin, quantize(0.0));
   118da:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 11958 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   118de:	a802      	add	r0, sp, #8
   118e0:	f00c fdb4 	bl	1e44c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   118e4:	4286      	cmp	r6, r0
   118e6:	bfac      	ite	ge
   118e8:	602e      	strge	r6, [r5, #0]
   118ea:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   118ec:	603c      	str	r4, [r7, #0]
   118ee:	e01b      	b.n	11928 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x88>
    qmax = std::numeric_limits<int8_t>::max();
   118f0:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   118f2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   118f6:	e7ea      	b.n	118ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmin = std::numeric_limits<int16_t>::min();
   118f8:	4e18      	ldr	r6, [pc, #96]	; (1195c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>)
    qmax = std::numeric_limits<int16_t>::max();
   118fa:	f647 74ff 	movw	r4, #32767	; 0x7fff
   118fe:	e7e6      	b.n	118ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActRelu6) {
   11900:	2903      	cmp	r1, #3
   11902:	d113      	bne.n	1192c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8c>
    *act_min = std::max(qmin, quantize(0.0));
   11904:	ed9f 0a14 	vldr	s0, [pc, #80]	; 11958 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   11908:	a802      	add	r0, sp, #8
   1190a:	f00c fd9f 	bl	1e44c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   1190e:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   11912:	4286      	cmp	r6, r0
   11914:	bfac      	ite	ge
   11916:	602e      	strge	r6, [r5, #0]
   11918:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   1191a:	a802      	add	r0, sp, #8
   1191c:	f00c fd96 	bl	1e44c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   11920:	4284      	cmp	r4, r0
   11922:	bfd4      	ite	le
   11924:	603c      	strle	r4, [r7, #0]
   11926:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   11928:	2000      	movs	r0, #0
   1192a:	e7cc      	b.n	118c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x26>
  } else if (activation == kTfLiteActReluN1To1) {
   1192c:	2902      	cmp	r1, #2
   1192e:	d10b      	bne.n	11948 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa8>
    *act_min = std::max(qmin, quantize(-1.0));
   11930:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   11934:	a802      	add	r0, sp, #8
   11936:	f00c fd89 	bl	1e44c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   1193a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   1193e:	4286      	cmp	r6, r0
   11940:	bfac      	ite	ge
   11942:	602e      	strge	r6, [r5, #0]
   11944:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   11946:	e7e8      	b.n	1191a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7a>
    *act_min = qmin;
   11948:	602e      	str	r6, [r5, #0]
   1194a:	e7cf      	b.n	118ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
   1194c:	0002938d 	.word	0x0002938d
   11950:	0002932b 	.word	0x0002932b
   11954:	000272d2 	.word	0x000272d2
   11958:	00000000 	.word	0x00000000
   1195c:	ffff8000 	.word	0xffff8000

00011960 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   11964:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11968:	ed2d 8b06 	vpush	{d8-d10}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1196c:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   11970:	ee08 3a90 	vmov	s17, r3
   11974:	b089      	sub	sp, #36	; 0x24
   11976:	4604      	mov	r4, r0
   11978:	460d      	mov	r5, r1
   1197a:	4616      	mov	r6, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1197c:	d011      	beq.n	119a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x42>
   1197e:	2701      	movs	r7, #1
   11980:	4b74      	ldr	r3, [pc, #464]	; (11b54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   11982:	9301      	str	r3, [sp, #4]
   11984:	e9cd 8702 	strd	r8, r7, [sp, #8]
   11988:	4b73      	ldr	r3, [pc, #460]	; (11b58 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
   1198a:	9300      	str	r3, [sp, #0]
   1198c:	6944      	ldr	r4, [r0, #20]
   1198e:	4a73      	ldr	r2, [pc, #460]	; (11b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   11990:	4973      	ldr	r1, [pc, #460]	; (11b60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   11992:	2335      	movs	r3, #53	; 0x35
   11994:	47a0      	blx	r4
}
   11996:	4638      	mov	r0, r7
   11998:	b009      	add	sp, #36	; 0x24
   1199a:	ecbd 8b06 	vpop	{d8-d10}
   1199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   119a2:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
   119a6:	2f01      	cmp	r7, #1
   119a8:	d00c      	beq.n	119c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x64>
   119aa:	e9cd 7802 	strd	r7, r8, [sp, #8]
   119ae:	4b69      	ldr	r3, [pc, #420]	; (11b54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   119b0:	9301      	str	r3, [sp, #4]
   119b2:	4b6c      	ldr	r3, [pc, #432]	; (11b64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
   119b4:	9300      	str	r3, [sp, #0]
   119b6:	6944      	ldr	r4, [r0, #20]
   119b8:	4a68      	ldr	r2, [pc, #416]	; (11b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   119ba:	4969      	ldr	r1, [pc, #420]	; (11b60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   119bc:	2337      	movs	r3, #55	; 0x37
   119be:	47a0      	blx	r4
   119c0:	4647      	mov	r7, r8
   119c2:	e7e8      	b.n	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  const auto* affine_quantization =
   119c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   119c6:	b93a      	cbnz	r2, 119d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x78>
   119c8:	4b67      	ldr	r3, [pc, #412]	; (11b68 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
   119ca:	9300      	str	r3, [sp, #0]
   119cc:	6944      	ldr	r4, [r0, #20]
   119ce:	2342      	movs	r3, #66	; 0x42
    TF_LITE_ENSURE(context,
   119d0:	4a62      	ldr	r2, [pc, #392]	; (11b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   119d2:	4966      	ldr	r1, [pc, #408]	; (11b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
   119d4:	47a0      	blx	r4
   119d6:	e7de      	b.n	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   119d8:	f8d2 8000 	ldr.w	r8, [r2]
   119dc:	f1b8 0f00 	cmp.w	r8, #0
   119e0:	d104      	bne.n	119ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8c>
   119e2:	4b63      	ldr	r3, [pc, #396]	; (11b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
   119e4:	9300      	str	r3, [sp, #0]
   119e6:	6944      	ldr	r4, [r0, #20]
   119e8:	2343      	movs	r3, #67	; 0x43
   119ea:	e7f1      	b.n	119d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   119ec:	f8d8 9000 	ldr.w	r9, [r8]
  if (is_per_channel) {
   119f0:	f1b9 0f01 	cmp.w	r9, #1
   119f4:	dd37      	ble.n	11a66 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
    TF_LITE_ENSURE(context,
   119f6:	780b      	ldrb	r3, [r1, #0]
   119f8:	2b09      	cmp	r3, #9
   119fa:	d006      	beq.n	11a0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   119fc:	2b07      	cmp	r3, #7
   119fe:	d004      	beq.n	11a0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   11a00:	4b5c      	ldr	r3, [pc, #368]	; (11b74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
   11a02:	9300      	str	r3, [sp, #0]
   11a04:	6944      	ldr	r4, [r0, #20]
   11a06:	2347      	movs	r3, #71	; 0x47
   11a08:	e7e2      	b.n	119d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   11a0a:	7833      	ldrb	r3, [r6, #0]
   11a0c:	2b09      	cmp	r3, #9
   11a0e:	d00d      	beq.n	11a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xcc>
   11a10:	2209      	movs	r2, #9
   11a12:	e9cd 3202 	strd	r3, r2, [sp, #8]
   11a16:	4b58      	ldr	r3, [pc, #352]	; (11b78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
   11a18:	9301      	str	r3, [sp, #4]
   11a1a:	4b58      	ldr	r3, [pc, #352]	; (11b7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
   11a1c:	9300      	str	r3, [sp, #0]
   11a1e:	6965      	ldr	r5, [r4, #20]
   11a20:	2349      	movs	r3, #73	; 0x49
    TF_LITE_ENSURE_EQ(
   11a22:	4a4e      	ldr	r2, [pc, #312]	; (11b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   11a24:	494e      	ldr	r1, [pc, #312]	; (11b60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   11a26:	4620      	mov	r0, r4
   11a28:	47a8      	blx	r5
   11a2a:	e7b4      	b.n	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   11a2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11a2e:	454b      	cmp	r3, r9
   11a30:	d008      	beq.n	11a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe4>
   11a32:	e9cd 9302 	strd	r9, r3, [sp, #8]
   11a36:	4b52      	ldr	r3, [pc, #328]	; (11b80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   11a38:	9301      	str	r3, [sp, #4]
   11a3a:	4b52      	ldr	r3, [pc, #328]	; (11b84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   11a3c:	9300      	str	r3, [sp, #0]
   11a3e:	6965      	ldr	r5, [r4, #20]
   11a40:	234a      	movs	r3, #74	; 0x4a
   11a42:	e7ee      	b.n	11a22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    TF_LITE_ENSURE_EQ(
   11a44:	6892      	ldr	r2, [r2, #8]
   11a46:	68b3      	ldr	r3, [r6, #8]
   11a48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11a4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11a4e:	685b      	ldr	r3, [r3, #4]
   11a50:	429a      	cmp	r2, r3
   11a52:	d008      	beq.n	11a66 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
   11a54:	9303      	str	r3, [sp, #12]
   11a56:	4b4c      	ldr	r3, [pc, #304]	; (11b88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   11a58:	9301      	str	r3, [sp, #4]
   11a5a:	4b49      	ldr	r3, [pc, #292]	; (11b80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   11a5c:	9300      	str	r3, [sp, #0]
   11a5e:	9202      	str	r2, [sp, #8]
   11a60:	6965      	ldr	r5, [r4, #20]
   11a62:	234b      	movs	r3, #75	; 0x4b
   11a64:	e7dd      	b.n	11a22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
                                          static_cast<double>(output_scale);
   11a66:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   11a68:	edd5 7a03 	vldr	s15, [r5, #12]
                                          static_cast<double>(output_scale);
   11a6c:	68d8      	ldr	r0, [r3, #12]
  const float input_scale = input->params.scale;
   11a6e:	eeb0 8a67 	vmov.f32	s16, s15
                                          static_cast<double>(output_scale);
   11a72:	f7ef f8f9 	bl	c68 <__aeabi_f2d>
   11a76:	4602      	mov	r2, r0
   11a78:	460b      	mov	r3, r1
   11a7a:	2000      	movs	r0, #0
   11a7c:	4943      	ldr	r1, [pc, #268]	; (11b8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   11a7e:	f7ef fa75 	bl	f6c <__aeabi_ddiv>
   11a82:	ec41 0b19 	vmov	d9, r0, r1
   11a86:	f108 0a04 	add.w	sl, r8, #4
  for (int i = 0; i < num_channels; ++i) {
   11a8a:	2700      	movs	r7, #0
   11a8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11a8e:	42bb      	cmp	r3, r7
   11a90:	dd2b      	ble.n	11aea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x18a>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   11a92:	f1b9 0f01 	cmp.w	r9, #1
    const double effective_output_scale = static_cast<double>(input_scale) *
   11a96:	ee18 0a10 	vmov	r0, s16
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   11a9a:	bfcc      	ite	gt
   11a9c:	f8da b000 	ldrgt.w	fp, [sl]
   11aa0:	f8d8 b004 	ldrle.w	fp, [r8, #4]
    const double effective_output_scale = static_cast<double>(input_scale) *
   11aa4:	f7ef f8e0 	bl	c68 <__aeabi_f2d>
   11aa8:	ec53 2b19 	vmov	r2, r3, d9
   11aac:	f7ef f934 	bl	d18 <__aeabi_dmul>
   11ab0:	ec41 0b1a 	vmov	d10, r0, r1
    const double filter_scale = static_cast<double>(scale);
   11ab4:	4658      	mov	r0, fp
   11ab6:	f7ef f8d7 	bl	c68 <__aeabi_f2d>
   11aba:	4602      	mov	r2, r0
   11abc:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   11abe:	ec51 0b1a 	vmov	r0, r1, d10
   11ac2:	f7ef f929 	bl	d18 <__aeabi_dmul>
   11ac6:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   11aca:	a906      	add	r1, sp, #24
   11acc:	a805      	add	r0, sp, #20
   11ace:	f7ff fe2f 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   11ad2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11ad4:	9b05      	ldr	r3, [sp, #20]
   11ad6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
   11ada:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11adc:	9b06      	ldr	r3, [sp, #24]
   11ade:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   11ae2:	f10a 0a04 	add.w	sl, sl, #4
   11ae6:	3701      	adds	r7, #1
   11ae8:	e7d0      	b.n	11a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12c>
  if (input->type == kTfLiteUInt8) {
   11aea:	782b      	ldrb	r3, [r5, #0]
   11aec:	2b03      	cmp	r3, #3
   11aee:	d11c      	bne.n	11b2a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
   11af0:	2200      	movs	r2, #0
   11af2:	2300      	movs	r3, #0
   11af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   11af8:	ab06      	add	r3, sp, #24
   11afa:	9301      	str	r3, [sp, #4]
   11afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11afe:	9300      	str	r3, [sp, #0]
   11b00:	4632      	mov	r2, r6
   11b02:	ee18 3a90 	vmov	r3, s17
   11b06:	4629      	mov	r1, r5
   11b08:	4620      	mov	r0, r4
   11b0a:	f7ef fcbd 	bl	1488 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   11b0e:	4607      	mov	r7, r0
   11b10:	2800      	cmp	r0, #0
   11b12:	f47f af40 	bne.w	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   11b16:	ed9d 0b06 	vldr	d0, [sp, #24]
   11b1a:	981a      	ldr	r0, [sp, #104]	; 0x68
   11b1c:	a905      	add	r1, sp, #20
   11b1e:	f7ff fe07 	bl	11730 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   11b22:	9b05      	ldr	r3, [sp, #20]
   11b24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11b26:	425b      	negs	r3, r3
   11b28:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   11b2a:	782b      	ldrb	r3, [r5, #0]
   11b2c:	2b09      	cmp	r3, #9
   11b2e:	d003      	beq.n	11b38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>
   11b30:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11b34:	2b03      	cmp	r3, #3
   11b36:	d10a      	bne.n	11b4e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ee>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   11b38:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   11b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11b3e:	9300      	str	r3, [sp, #0]
   11b40:	7809      	ldrb	r1, [r1, #0]
   11b42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   11b44:	4620      	mov	r0, r4
   11b46:	f7ff feab 	bl	118a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   11b4a:	4607      	mov	r7, r0
   11b4c:	e723      	b.n	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  return kTfLiteOk;
   11b4e:	2700      	movs	r7, #0
   11b50:	e721      	b.n	11996 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
   11b52:	bf00      	nop
   11b54:	00027e46 	.word	0x00027e46
   11b58:	00029393 	.word	0x00029393
   11b5c:	0002932b 	.word	0x0002932b
   11b60:	00027b73 	.word	0x00027b73
   11b64:	00027e60 	.word	0x00027e60
   11b68:	00027e7a 	.word	0x00027e7a
   11b6c:	000272d2 	.word	0x000272d2
   11b70:	00027e8e 	.word	0x00027e8e
   11b74:	00028086 	.word	0x00028086
   11b78:	00028e92 	.word	0x00028e92
   11b7c:	000293ac 	.word	0x000293ac
   11b80:	000293b9 	.word	0x000293b9
   11b84:	00027f68 	.word	0x00027f68
   11b88:	000293c6 	.word	0x000293c6
   11b8c:	3ff00000 	.word	0x3ff00000

00011b90 <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
   11b90:	4b03      	ldr	r3, [pc, #12]	; (11ba0 <DebugLog+0x10>)
   11b92:	4904      	ldr	r1, [pc, #16]	; (11ba4 <DebugLog+0x14>)
   11b94:	681b      	ldr	r3, [r3, #0]
   11b96:	4602      	mov	r2, r0
   11b98:	68d8      	ldr	r0, [r3, #12]
   11b9a:	f001 bdef 	b.w	1377c <fiprintf>
   11b9e:	bf00      	nop
   11ba0:	20000728 	.word	0x20000728
   11ba4:	0002659e 	.word	0x0002659e

00011ba8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
   11ba8:	b513      	push	{r0, r1, r4, lr}
   11baa:	4614      	mov	r4, r2
   11bac:	1e42      	subs	r2, r0, #1
   11bae:	4603      	mov	r3, r0
   11bb0:	2a08      	cmp	r2, #8
   11bb2:	d811      	bhi.n	11bd8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x30>
   11bb4:	e8df f002 	tbb	[pc, r2]
   11bb8:	0e0c0505 	.word	0x0e0c0505
   11bbc:	0e0a0c10 	.word	0x0e0a0c10
   11bc0:	0c          	.byte	0x0c
   11bc1:	00          	.byte	0x00
  switch (type) {
    case kTfLiteFloat32:
      *size = sizeof(float);
   11bc2:	2304      	movs	r3, #4
      break;
    case kTfLiteInt16:
      *size = sizeof(int16_t);
   11bc4:	600b      	str	r3, [r1, #0]
    default:
      reporter->Report("Type %s (%d) not is not supported",
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   11bc6:	2000      	movs	r0, #0
}
   11bc8:	b002      	add	sp, #8
   11bca:	bd10      	pop	{r4, pc}
      *size = sizeof(int16_t);
   11bcc:	2302      	movs	r3, #2
   11bce:	e7f9      	b.n	11bc4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(uint8_t);
   11bd0:	2301      	movs	r3, #1
   11bd2:	e7f7      	b.n	11bc4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(int64_t);
   11bd4:	2308      	movs	r3, #8
   11bd6:	e7f5      	b.n	11bc4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      reporter->Report("Type %s (%d) not is not supported",
   11bd8:	4618      	mov	r0, r3
   11bda:	9301      	str	r3, [sp, #4]
   11bdc:	f7ee fe69 	bl	8b2 <TfLiteTypeGetName>
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	4903      	ldr	r1, [pc, #12]	; (11bf0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x48>)
   11be4:	4602      	mov	r2, r0
   11be6:	4620      	mov	r0, r4
   11be8:	f00c fb6a 	bl	1e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   11bec:	2001      	movs	r0, #1
   11bee:	e7eb      	b.n	11bc8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x20>
   11bf0:	00029403 	.word	0x00029403

00011bf4 <nrf_cc310_platform_init_no_rng>:
   11bf4:	b510      	push	{r4, lr}
   11bf6:	4c09      	ldr	r4, [pc, #36]	; (11c1c <nrf_cc310_platform_init_no_rng+0x28>)
   11bf8:	6823      	ldr	r3, [r4, #0]
   11bfa:	b11b      	cbz	r3, 11c04 <nrf_cc310_platform_init_no_rng+0x10>
   11bfc:	2301      	movs	r3, #1
   11bfe:	6023      	str	r3, [r4, #0]
   11c00:	2000      	movs	r0, #0
   11c02:	bd10      	pop	{r4, pc}
   11c04:	f000 f880 	bl	11d08 <CC_LibInitNoRng>
   11c08:	2800      	cmp	r0, #0
   11c0a:	d0f7      	beq.n	11bfc <nrf_cc310_platform_init_no_rng+0x8>
   11c0c:	3801      	subs	r0, #1
   11c0e:	2806      	cmp	r0, #6
   11c10:	bf96      	itet	ls
   11c12:	4b03      	ldrls	r3, [pc, #12]	; (11c20 <nrf_cc310_platform_init_no_rng+0x2c>)
   11c14:	4803      	ldrhi	r0, [pc, #12]	; (11c24 <nrf_cc310_platform_init_no_rng+0x30>)
   11c16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   11c1a:	bd10      	pop	{r4, pc}
   11c1c:	2000e680 	.word	0x2000e680
   11c20:	00025980 	.word	0x00025980
   11c24:	ffff8ffe 	.word	0xffff8ffe

00011c28 <nrf_cc310_platform_abort>:
   11c28:	f3bf 8f4f 	dsb	sy
   11c2c:	4905      	ldr	r1, [pc, #20]	; (11c44 <nrf_cc310_platform_abort+0x1c>)
   11c2e:	4b06      	ldr	r3, [pc, #24]	; (11c48 <nrf_cc310_platform_abort+0x20>)
   11c30:	68ca      	ldr	r2, [r1, #12]
   11c32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11c36:	4313      	orrs	r3, r2
   11c38:	60cb      	str	r3, [r1, #12]
   11c3a:	f3bf 8f4f 	dsb	sy
   11c3e:	bf00      	nop
   11c40:	e7fd      	b.n	11c3e <nrf_cc310_platform_abort+0x16>
   11c42:	bf00      	nop
   11c44:	e000ed00 	.word	0xe000ed00
   11c48:	05fa0004 	.word	0x05fa0004

00011c4c <CC_PalAbort>:
   11c4c:	4b01      	ldr	r3, [pc, #4]	; (11c54 <CC_PalAbort+0x8>)
   11c4e:	685b      	ldr	r3, [r3, #4]
   11c50:	4718      	bx	r3
   11c52:	bf00      	nop
   11c54:	200006e8 	.word	0x200006e8

00011c58 <nrf_cc310_platform_set_abort>:
   11c58:	e9d0 1200 	ldrd	r1, r2, [r0]
   11c5c:	4b01      	ldr	r3, [pc, #4]	; (11c64 <nrf_cc310_platform_set_abort+0xc>)
   11c5e:	e9c3 1200 	strd	r1, r2, [r3]
   11c62:	4770      	bx	lr
   11c64:	200006e8 	.word	0x200006e8

00011c68 <mutex_free>:
   11c68:	4770      	bx	lr
   11c6a:	bf00      	nop

00011c6c <mutex_unlock>:
   11c6c:	b510      	push	{r4, lr}
   11c6e:	4604      	mov	r4, r0
   11c70:	b120      	cbz	r0, 11c7c <mutex_unlock+0x10>
   11c72:	f3bf 8f5f 	dmb	sy
   11c76:	2000      	movs	r0, #0
   11c78:	6020      	str	r0, [r4, #0]
   11c7a:	bd10      	pop	{r4, pc}
   11c7c:	4803      	ldr	r0, [pc, #12]	; (11c8c <mutex_unlock+0x20>)
   11c7e:	f7ff ffe5 	bl	11c4c <CC_PalAbort>
   11c82:	f3bf 8f5f 	dmb	sy
   11c86:	2000      	movs	r0, #0
   11c88:	6020      	str	r0, [r4, #0]
   11c8a:	bd10      	pop	{r4, pc}
   11c8c:	000259c0 	.word	0x000259c0

00011c90 <mutex_init>:
   11c90:	b510      	push	{r4, lr}
   11c92:	4604      	mov	r4, r0
   11c94:	b110      	cbz	r0, 11c9c <mutex_init+0xc>
   11c96:	2300      	movs	r3, #0
   11c98:	6023      	str	r3, [r4, #0]
   11c9a:	bd10      	pop	{r4, pc}
   11c9c:	4802      	ldr	r0, [pc, #8]	; (11ca8 <mutex_init+0x18>)
   11c9e:	f7ff ffd5 	bl	11c4c <CC_PalAbort>
   11ca2:	2300      	movs	r3, #0
   11ca4:	6023      	str	r3, [r4, #0]
   11ca6:	bd10      	pop	{r4, pc}
   11ca8:	0002599c 	.word	0x0002599c

00011cac <mutex_lock>:
   11cac:	b170      	cbz	r0, 11ccc <mutex_lock+0x20>
   11cae:	2201      	movs	r2, #1
   11cb0:	f3bf 8f5b 	dmb	ish
   11cb4:	e850 3f00 	ldrex	r3, [r0]
   11cb8:	e840 2100 	strex	r1, r2, [r0]
   11cbc:	2900      	cmp	r1, #0
   11cbe:	d1f9      	bne.n	11cb4 <mutex_lock+0x8>
   11cc0:	f3bf 8f5b 	dmb	ish
   11cc4:	2b01      	cmp	r3, #1
   11cc6:	d0f3      	beq.n	11cb0 <mutex_lock+0x4>
   11cc8:	f3bf 8f5f 	dmb	sy
   11ccc:	2000      	movs	r0, #0
   11cce:	4770      	bx	lr

00011cd0 <nrf_cc310_platform_set_mutexes>:
   11cd0:	b470      	push	{r4, r5, r6}
   11cd2:	e9d0 6500 	ldrd	r6, r5, [r0]
   11cd6:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   11cda:	4b09      	ldr	r3, [pc, #36]	; (11d00 <nrf_cc310_platform_set_mutexes+0x30>)
   11cdc:	e9c3 4202 	strd	r4, r2, [r3, #8]
   11ce0:	e9c3 6500 	strd	r6, r5, [r3]
   11ce4:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   11ce8:	e9d1 6500 	ldrd	r6, r5, [r1]
   11cec:	4b05      	ldr	r3, [pc, #20]	; (11d04 <nrf_cc310_platform_set_mutexes+0x34>)
   11cee:	690a      	ldr	r2, [r1, #16]
   11cf0:	611a      	str	r2, [r3, #16]
   11cf2:	e9c3 6500 	strd	r6, r5, [r3]
   11cf6:	e9c3 4002 	strd	r4, r0, [r3, #8]
   11cfa:	bc70      	pop	{r4, r5, r6}
   11cfc:	4770      	bx	lr
   11cfe:	bf00      	nop
   11d00:	200006f0 	.word	0x200006f0
   11d04:	20000700 	.word	0x20000700

00011d08 <CC_LibInitNoRng>:
   11d08:	b510      	push	{r4, lr}
   11d0a:	f000 f833 	bl	11d74 <CC_HalInit>
   11d0e:	b970      	cbnz	r0, 11d2e <CC_LibInitNoRng+0x26>
   11d10:	f000 f83a 	bl	11d88 <CC_PalInit>
   11d14:	b980      	cbnz	r0, 11d38 <CC_LibInitNoRng+0x30>
   11d16:	f000 f8b5 	bl	11e84 <CC_PalPowerSaveModeSelect>
   11d1a:	b980      	cbnz	r0, 11d3e <CC_LibInitNoRng+0x36>
   11d1c:	4b11      	ldr	r3, [pc, #68]	; (11d64 <CC_LibInitNoRng+0x5c>)
   11d1e:	681b      	ldr	r3, [r3, #0]
   11d20:	0e1b      	lsrs	r3, r3, #24
   11d22:	2bf0      	cmp	r3, #240	; 0xf0
   11d24:	d00d      	beq.n	11d42 <CC_LibInitNoRng+0x3a>
   11d26:	2406      	movs	r4, #6
   11d28:	f000 f826 	bl	11d78 <CC_HalTerminate>
   11d2c:	e000      	b.n	11d30 <CC_LibInitNoRng+0x28>
   11d2e:	2403      	movs	r4, #3
   11d30:	f000 f858 	bl	11de4 <CC_PalTerminate>
   11d34:	4620      	mov	r0, r4
   11d36:	bd10      	pop	{r4, pc}
   11d38:	2404      	movs	r4, #4
   11d3a:	4620      	mov	r0, r4
   11d3c:	bd10      	pop	{r4, pc}
   11d3e:	2400      	movs	r4, #0
   11d40:	e7f2      	b.n	11d28 <CC_LibInitNoRng+0x20>
   11d42:	4a09      	ldr	r2, [pc, #36]	; (11d68 <CC_LibInitNoRng+0x60>)
   11d44:	4b09      	ldr	r3, [pc, #36]	; (11d6c <CC_LibInitNoRng+0x64>)
   11d46:	6812      	ldr	r2, [r2, #0]
   11d48:	429a      	cmp	r2, r3
   11d4a:	d001      	beq.n	11d50 <CC_LibInitNoRng+0x48>
   11d4c:	2407      	movs	r4, #7
   11d4e:	e7eb      	b.n	11d28 <CC_LibInitNoRng+0x20>
   11d50:	2001      	movs	r0, #1
   11d52:	f000 f897 	bl	11e84 <CC_PalPowerSaveModeSelect>
   11d56:	2800      	cmp	r0, #0
   11d58:	d1f1      	bne.n	11d3e <CC_LibInitNoRng+0x36>
   11d5a:	4b05      	ldr	r3, [pc, #20]	; (11d70 <CC_LibInitNoRng+0x68>)
   11d5c:	4604      	mov	r4, r0
   11d5e:	6018      	str	r0, [r3, #0]
   11d60:	e7e8      	b.n	11d34 <CC_LibInitNoRng+0x2c>
   11d62:	bf00      	nop
   11d64:	5002b928 	.word	0x5002b928
   11d68:	5002ba24 	.word	0x5002ba24
   11d6c:	20e00000 	.word	0x20e00000
   11d70:	5002ba0c 	.word	0x5002ba0c

00011d74 <CC_HalInit>:
   11d74:	2000      	movs	r0, #0
   11d76:	4770      	bx	lr

00011d78 <CC_HalTerminate>:
   11d78:	2000      	movs	r0, #0
   11d7a:	4770      	bx	lr

00011d7c <CC_HalMaskInterrupt>:
   11d7c:	4b01      	ldr	r3, [pc, #4]	; (11d84 <CC_HalMaskInterrupt+0x8>)
   11d7e:	6018      	str	r0, [r3, #0]
   11d80:	4770      	bx	lr
   11d82:	bf00      	nop
   11d84:	5002ba04 	.word	0x5002ba04

00011d88 <CC_PalInit>:
   11d88:	b510      	push	{r4, lr}
   11d8a:	4811      	ldr	r0, [pc, #68]	; (11dd0 <CC_PalInit+0x48>)
   11d8c:	f000 f848 	bl	11e20 <CC_PalMutexCreate>
   11d90:	b100      	cbz	r0, 11d94 <CC_PalInit+0xc>
   11d92:	bd10      	pop	{r4, pc}
   11d94:	480f      	ldr	r0, [pc, #60]	; (11dd4 <CC_PalInit+0x4c>)
   11d96:	f000 f843 	bl	11e20 <CC_PalMutexCreate>
   11d9a:	2800      	cmp	r0, #0
   11d9c:	d1f9      	bne.n	11d92 <CC_PalInit+0xa>
   11d9e:	4c0e      	ldr	r4, [pc, #56]	; (11dd8 <CC_PalInit+0x50>)
   11da0:	4620      	mov	r0, r4
   11da2:	f000 f83d 	bl	11e20 <CC_PalMutexCreate>
   11da6:	2800      	cmp	r0, #0
   11da8:	d1f3      	bne.n	11d92 <CC_PalInit+0xa>
   11daa:	4b0c      	ldr	r3, [pc, #48]	; (11ddc <CC_PalInit+0x54>)
   11dac:	480c      	ldr	r0, [pc, #48]	; (11de0 <CC_PalInit+0x58>)
   11dae:	601c      	str	r4, [r3, #0]
   11db0:	f000 f836 	bl	11e20 <CC_PalMutexCreate>
   11db4:	4601      	mov	r1, r0
   11db6:	2800      	cmp	r0, #0
   11db8:	d1eb      	bne.n	11d92 <CC_PalInit+0xa>
   11dba:	f000 f82d 	bl	11e18 <CC_PalDmaInit>
   11dbe:	4604      	mov	r4, r0
   11dc0:	b108      	cbz	r0, 11dc6 <CC_PalInit+0x3e>
   11dc2:	4620      	mov	r0, r4
   11dc4:	bd10      	pop	{r4, pc}
   11dc6:	f000 f83f 	bl	11e48 <CC_PalPowerSaveModeInit>
   11dca:	4620      	mov	r0, r4
   11dcc:	e7fa      	b.n	11dc4 <CC_PalInit+0x3c>
   11dce:	bf00      	nop
   11dd0:	20000720 	.word	0x20000720
   11dd4:	20000714 	.word	0x20000714
   11dd8:	2000071c 	.word	0x2000071c
   11ddc:	20000724 	.word	0x20000724
   11de0:	20000718 	.word	0x20000718

00011de4 <CC_PalTerminate>:
   11de4:	b508      	push	{r3, lr}
   11de6:	4808      	ldr	r0, [pc, #32]	; (11e08 <CC_PalTerminate+0x24>)
   11de8:	f000 f824 	bl	11e34 <CC_PalMutexDestroy>
   11dec:	4807      	ldr	r0, [pc, #28]	; (11e0c <CC_PalTerminate+0x28>)
   11dee:	f000 f821 	bl	11e34 <CC_PalMutexDestroy>
   11df2:	4807      	ldr	r0, [pc, #28]	; (11e10 <CC_PalTerminate+0x2c>)
   11df4:	f000 f81e 	bl	11e34 <CC_PalMutexDestroy>
   11df8:	4806      	ldr	r0, [pc, #24]	; (11e14 <CC_PalTerminate+0x30>)
   11dfa:	f000 f81b 	bl	11e34 <CC_PalMutexDestroy>
   11dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11e02:	f000 b80b 	b.w	11e1c <CC_PalDmaTerminate>
   11e06:	bf00      	nop
   11e08:	20000720 	.word	0x20000720
   11e0c:	20000714 	.word	0x20000714
   11e10:	2000071c 	.word	0x2000071c
   11e14:	20000718 	.word	0x20000718

00011e18 <CC_PalDmaInit>:
   11e18:	2000      	movs	r0, #0
   11e1a:	4770      	bx	lr

00011e1c <CC_PalDmaTerminate>:
   11e1c:	4770      	bx	lr
   11e1e:	bf00      	nop

00011e20 <CC_PalMutexCreate>:
   11e20:	b508      	push	{r3, lr}
   11e22:	4b03      	ldr	r3, [pc, #12]	; (11e30 <CC_PalMutexCreate+0x10>)
   11e24:	6802      	ldr	r2, [r0, #0]
   11e26:	681b      	ldr	r3, [r3, #0]
   11e28:	6810      	ldr	r0, [r2, #0]
   11e2a:	4798      	blx	r3
   11e2c:	2000      	movs	r0, #0
   11e2e:	bd08      	pop	{r3, pc}
   11e30:	200006f0 	.word	0x200006f0

00011e34 <CC_PalMutexDestroy>:
   11e34:	b508      	push	{r3, lr}
   11e36:	4b03      	ldr	r3, [pc, #12]	; (11e44 <CC_PalMutexDestroy+0x10>)
   11e38:	6802      	ldr	r2, [r0, #0]
   11e3a:	685b      	ldr	r3, [r3, #4]
   11e3c:	6810      	ldr	r0, [r2, #0]
   11e3e:	4798      	blx	r3
   11e40:	2000      	movs	r0, #0
   11e42:	bd08      	pop	{r3, pc}
   11e44:	200006f0 	.word	0x200006f0

00011e48 <CC_PalPowerSaveModeInit>:
   11e48:	b570      	push	{r4, r5, r6, lr}
   11e4a:	4c09      	ldr	r4, [pc, #36]	; (11e70 <CC_PalPowerSaveModeInit+0x28>)
   11e4c:	4d09      	ldr	r5, [pc, #36]	; (11e74 <CC_PalPowerSaveModeInit+0x2c>)
   11e4e:	6920      	ldr	r0, [r4, #16]
   11e50:	68ab      	ldr	r3, [r5, #8]
   11e52:	4798      	blx	r3
   11e54:	b118      	cbz	r0, 11e5e <CC_PalPowerSaveModeInit+0x16>
   11e56:	4b08      	ldr	r3, [pc, #32]	; (11e78 <CC_PalPowerSaveModeInit+0x30>)
   11e58:	4808      	ldr	r0, [pc, #32]	; (11e7c <CC_PalPowerSaveModeInit+0x34>)
   11e5a:	685b      	ldr	r3, [r3, #4]
   11e5c:	4798      	blx	r3
   11e5e:	4a08      	ldr	r2, [pc, #32]	; (11e80 <CC_PalPowerSaveModeInit+0x38>)
   11e60:	68eb      	ldr	r3, [r5, #12]
   11e62:	6920      	ldr	r0, [r4, #16]
   11e64:	2100      	movs	r1, #0
   11e66:	6011      	str	r1, [r2, #0]
   11e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11e6c:	4718      	bx	r3
   11e6e:	bf00      	nop
   11e70:	20000700 	.word	0x20000700
   11e74:	200006f0 	.word	0x200006f0
   11e78:	200006e8 	.word	0x200006e8
   11e7c:	000259e0 	.word	0x000259e0
   11e80:	2000e694 	.word	0x2000e694

00011e84 <CC_PalPowerSaveModeSelect>:
   11e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e86:	4c1a      	ldr	r4, [pc, #104]	; (11ef0 <CC_PalPowerSaveModeSelect+0x6c>)
   11e88:	4d1a      	ldr	r5, [pc, #104]	; (11ef4 <CC_PalPowerSaveModeSelect+0x70>)
   11e8a:	4607      	mov	r7, r0
   11e8c:	68ab      	ldr	r3, [r5, #8]
   11e8e:	6920      	ldr	r0, [r4, #16]
   11e90:	4798      	blx	r3
   11e92:	b9e8      	cbnz	r0, 11ed0 <CC_PalPowerSaveModeSelect+0x4c>
   11e94:	4e18      	ldr	r6, [pc, #96]	; (11ef8 <CC_PalPowerSaveModeSelect+0x74>)
   11e96:	6833      	ldr	r3, [r6, #0]
   11e98:	b97f      	cbnz	r7, 11eba <CC_PalPowerSaveModeSelect+0x36>
   11e9a:	b93b      	cbnz	r3, 11eac <CC_PalPowerSaveModeSelect+0x28>
   11e9c:	4a17      	ldr	r2, [pc, #92]	; (11efc <CC_PalPowerSaveModeSelect+0x78>)
   11e9e:	4918      	ldr	r1, [pc, #96]	; (11f00 <CC_PalPowerSaveModeSelect+0x7c>)
   11ea0:	2001      	movs	r0, #1
   11ea2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   11ea6:	680a      	ldr	r2, [r1, #0]
   11ea8:	2a00      	cmp	r2, #0
   11eaa:	d1fc      	bne.n	11ea6 <CC_PalPowerSaveModeSelect+0x22>
   11eac:	3301      	adds	r3, #1
   11eae:	6033      	str	r3, [r6, #0]
   11eb0:	68eb      	ldr	r3, [r5, #12]
   11eb2:	6920      	ldr	r0, [r4, #16]
   11eb4:	4798      	blx	r3
   11eb6:	2000      	movs	r0, #0
   11eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11eba:	2b00      	cmp	r3, #0
   11ebc:	d0f8      	beq.n	11eb0 <CC_PalPowerSaveModeSelect+0x2c>
   11ebe:	2b01      	cmp	r3, #1
   11ec0:	d008      	beq.n	11ed4 <CC_PalPowerSaveModeSelect+0x50>
   11ec2:	3b01      	subs	r3, #1
   11ec4:	6033      	str	r3, [r6, #0]
   11ec6:	6920      	ldr	r0, [r4, #16]
   11ec8:	68eb      	ldr	r3, [r5, #12]
   11eca:	4798      	blx	r3
   11ecc:	2000      	movs	r0, #0
   11ece:	e7f3      	b.n	11eb8 <CC_PalPowerSaveModeSelect+0x34>
   11ed0:	480c      	ldr	r0, [pc, #48]	; (11f04 <CC_PalPowerSaveModeSelect+0x80>)
   11ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ed4:	4a0a      	ldr	r2, [pc, #40]	; (11f00 <CC_PalPowerSaveModeSelect+0x7c>)
   11ed6:	6813      	ldr	r3, [r2, #0]
   11ed8:	2b00      	cmp	r3, #0
   11eda:	d1fc      	bne.n	11ed6 <CC_PalPowerSaveModeSelect+0x52>
   11edc:	4a07      	ldr	r2, [pc, #28]	; (11efc <CC_PalPowerSaveModeSelect+0x78>)
   11ede:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   11ee2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   11ee6:	f7ff ff49 	bl	11d7c <CC_HalMaskInterrupt>
   11eea:	6833      	ldr	r3, [r6, #0]
   11eec:	e7e9      	b.n	11ec2 <CC_PalPowerSaveModeSelect+0x3e>
   11eee:	bf00      	nop
   11ef0:	20000700 	.word	0x20000700
   11ef4:	200006f0 	.word	0x200006f0
   11ef8:	2000e694 	.word	0x2000e694
   11efc:	5002a000 	.word	0x5002a000
   11f00:	5002b910 	.word	0x5002b910
   11f04:	ffff8fe9 	.word	0xffff8fe9

00011f08 <_ZSt15get_new_handlerv>:
   11f08:	4b02      	ldr	r3, [pc, #8]	; (11f14 <_ZSt15get_new_handlerv+0xc>)
   11f0a:	6818      	ldr	r0, [r3, #0]
   11f0c:	f3bf 8f5b 	dmb	ish
   11f10:	4770      	bx	lr
   11f12:	bf00      	nop
   11f14:	2000e698 	.word	0x2000e698

00011f18 <frexp>:
   11f18:	ec53 2b10 	vmov	r2, r3, d0
   11f1c:	b570      	push	{r4, r5, r6, lr}
   11f1e:	4e16      	ldr	r6, [pc, #88]	; (11f78 <frexp+0x60>)
   11f20:	4605      	mov	r5, r0
   11f22:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   11f26:	2000      	movs	r0, #0
   11f28:	42b1      	cmp	r1, r6
   11f2a:	6028      	str	r0, [r5, #0]
   11f2c:	dc21      	bgt.n	11f72 <frexp+0x5a>
   11f2e:	ee10 6a10 	vmov	r6, s0
   11f32:	430e      	orrs	r6, r1
   11f34:	d01d      	beq.n	11f72 <frexp+0x5a>
   11f36:	4e11      	ldr	r6, [pc, #68]	; (11f7c <frexp+0x64>)
   11f38:	401e      	ands	r6, r3
   11f3a:	461c      	mov	r4, r3
   11f3c:	b966      	cbnz	r6, 11f58 <frexp+0x40>
   11f3e:	4619      	mov	r1, r3
   11f40:	2200      	movs	r2, #0
   11f42:	ee10 0a10 	vmov	r0, s0
   11f46:	4b0e      	ldr	r3, [pc, #56]	; (11f80 <frexp+0x68>)
   11f48:	f7ee fee6 	bl	d18 <__aeabi_dmul>
   11f4c:	4602      	mov	r2, r0
   11f4e:	460c      	mov	r4, r1
   11f50:	f06f 0035 	mvn.w	r0, #53	; 0x35
   11f54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11f58:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   11f5c:	1509      	asrs	r1, r1, #20
   11f5e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   11f62:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   11f66:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   11f6a:	4401      	add	r1, r0
   11f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   11f70:	6029      	str	r1, [r5, #0]
   11f72:	ec43 2b10 	vmov	d0, r2, r3
   11f76:	bd70      	pop	{r4, r5, r6, pc}
   11f78:	7fefffff 	.word	0x7fefffff
   11f7c:	7ff00000 	.word	0x7ff00000
   11f80:	43500000 	.word	0x43500000

00011f84 <round>:
   11f84:	ec53 2b10 	vmov	r2, r3, d0
   11f88:	b570      	push	{r4, r5, r6, lr}
   11f8a:	f3c3 540a 	ubfx	r4, r3, #20, #11
   11f8e:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
   11f92:	2913      	cmp	r1, #19
   11f94:	ee10 0a10 	vmov	r0, s0
   11f98:	461d      	mov	r5, r3
   11f9a:	dc0a      	bgt.n	11fb2 <round+0x2e>
   11f9c:	2900      	cmp	r1, #0
   11f9e:	db26      	blt.n	11fee <round+0x6a>
   11fa0:	4c1e      	ldr	r4, [pc, #120]	; (1201c <round+0x98>)
   11fa2:	410c      	asrs	r4, r1
   11fa4:	ea03 0604 	and.w	r6, r3, r4
   11fa8:	4330      	orrs	r0, r6
   11faa:	d12e      	bne.n	1200a <round+0x86>
   11fac:	ec43 2b10 	vmov	d0, r2, r3
   11fb0:	bd70      	pop	{r4, r5, r6, pc}
   11fb2:	2933      	cmp	r1, #51	; 0x33
   11fb4:	dd08      	ble.n	11fc8 <round+0x44>
   11fb6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11fba:	d1f7      	bne.n	11fac <round+0x28>
   11fbc:	4619      	mov	r1, r3
   11fbe:	f7ee fcf5 	bl	9ac <__adddf3>
   11fc2:	ec41 0b10 	vmov	d0, r0, r1
   11fc6:	bd70      	pop	{r4, r5, r6, pc}
   11fc8:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   11fcc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11fd0:	fa26 f404 	lsr.w	r4, r6, r4
   11fd4:	4222      	tst	r2, r4
   11fd6:	d0e9      	beq.n	11fac <round+0x28>
   11fd8:	2301      	movs	r3, #1
   11fda:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   11fde:	fa03 f101 	lsl.w	r1, r3, r1
   11fe2:	1840      	adds	r0, r0, r1
   11fe4:	bf28      	it	cs
   11fe6:	18ed      	addcs	r5, r5, r3
   11fe8:	ea20 0004 	bic.w	r0, r0, r4
   11fec:	e008      	b.n	12000 <round+0x7c>
   11fee:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
   11ff2:	3101      	adds	r1, #1
   11ff4:	bf04      	itt	eq
   11ff6:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
   11ffa:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
   11ffe:	2000      	movs	r0, #0
   12000:	462b      	mov	r3, r5
   12002:	4602      	mov	r2, r0
   12004:	ec43 2b10 	vmov	d0, r2, r3
   12008:	bd70      	pop	{r4, r5, r6, pc}
   1200a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1200e:	fa43 f101 	asr.w	r1, r3, r1
   12012:	440d      	add	r5, r1
   12014:	ea25 0504 	bic.w	r5, r5, r4
   12018:	2000      	movs	r0, #0
   1201a:	e7f1      	b.n	12000 <round+0x7c>
   1201c:	000fffff 	.word	0x000fffff

00012020 <ceilf>:
   12020:	ee10 2a10 	vmov	r2, s0
   12024:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   12028:	3b7f      	subs	r3, #127	; 0x7f
   1202a:	2b16      	cmp	r3, #22
   1202c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   12030:	dc1a      	bgt.n	12068 <ceilf+0x48>
   12032:	2b00      	cmp	r3, #0
   12034:	db21      	blt.n	1207a <ceilf+0x5a>
   12036:	491a      	ldr	r1, [pc, #104]	; (120a0 <ceilf+0x80>)
   12038:	4119      	asrs	r1, r3
   1203a:	420a      	tst	r2, r1
   1203c:	d01c      	beq.n	12078 <ceilf+0x58>
   1203e:	eddf 7a19 	vldr	s15, [pc, #100]	; 120a4 <ceilf+0x84>
   12042:	ee70 7a27 	vadd.f32	s15, s0, s15
   12046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1204e:	dd13      	ble.n	12078 <ceilf+0x58>
   12050:	2a00      	cmp	r2, #0
   12052:	dd04      	ble.n	1205e <ceilf+0x3e>
   12054:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   12058:	fa40 f303 	asr.w	r3, r0, r3
   1205c:	441a      	add	r2, r3
   1205e:	ea22 0301 	bic.w	r3, r2, r1
   12062:	ee00 3a10 	vmov	s0, r3
   12066:	4770      	bx	lr
   12068:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1206c:	d304      	bcc.n	12078 <ceilf+0x58>
   1206e:	ee30 0a00 	vadd.f32	s0, s0, s0
   12072:	4770      	bx	lr
   12074:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 120a8 <ceilf+0x88>
   12078:	4770      	bx	lr
   1207a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 120a4 <ceilf+0x84>
   1207e:	ee70 7a27 	vadd.f32	s15, s0, s15
   12082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1208a:	ddf5      	ble.n	12078 <ceilf+0x58>
   1208c:	2a00      	cmp	r2, #0
   1208e:	dbf1      	blt.n	12074 <ceilf+0x54>
   12090:	2900      	cmp	r1, #0
   12092:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12096:	bf18      	it	ne
   12098:	eeb0 0a67 	vmovne.f32	s0, s15
   1209c:	4770      	bx	lr
   1209e:	bf00      	nop
   120a0:	007fffff 	.word	0x007fffff
   120a4:	7149f2ca 	.word	0x7149f2ca
   120a8:	80000000 	.word	0x80000000

000120ac <cosf>:
   120ac:	b500      	push	{lr}
   120ae:	ee10 3a10 	vmov	r3, s0
   120b2:	4a20      	ldr	r2, [pc, #128]	; (12134 <cosf+0x88>)
   120b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   120b8:	4293      	cmp	r3, r2
   120ba:	b083      	sub	sp, #12
   120bc:	dd19      	ble.n	120f2 <cosf+0x46>
   120be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   120c2:	db04      	blt.n	120ce <cosf+0x22>
   120c4:	ee30 0a40 	vsub.f32	s0, s0, s0
   120c8:	b003      	add	sp, #12
   120ca:	f85d fb04 	ldr.w	pc, [sp], #4
   120ce:	4668      	mov	r0, sp
   120d0:	f000 fc46 	bl	12960 <__ieee754_rem_pio2f>
   120d4:	f000 0003 	and.w	r0, r0, #3
   120d8:	2801      	cmp	r0, #1
   120da:	d011      	beq.n	12100 <cosf+0x54>
   120dc:	2802      	cmp	r0, #2
   120de:	d01f      	beq.n	12120 <cosf+0x74>
   120e0:	b1b8      	cbz	r0, 12112 <cosf+0x66>
   120e2:	eddd 0a01 	vldr	s1, [sp, #4]
   120e6:	ed9d 0a00 	vldr	s0, [sp]
   120ea:	2001      	movs	r0, #1
   120ec:	f001 f93a 	bl	13364 <__kernel_sinf>
   120f0:	e7ea      	b.n	120c8 <cosf+0x1c>
   120f2:	eddf 0a11 	vldr	s1, [pc, #68]	; 12138 <cosf+0x8c>
   120f6:	f000 fd7d 	bl	12bf4 <__kernel_cosf>
   120fa:	b003      	add	sp, #12
   120fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12100:	eddd 0a01 	vldr	s1, [sp, #4]
   12104:	ed9d 0a00 	vldr	s0, [sp]
   12108:	f001 f92c 	bl	13364 <__kernel_sinf>
   1210c:	eeb1 0a40 	vneg.f32	s0, s0
   12110:	e7da      	b.n	120c8 <cosf+0x1c>
   12112:	eddd 0a01 	vldr	s1, [sp, #4]
   12116:	ed9d 0a00 	vldr	s0, [sp]
   1211a:	f000 fd6b 	bl	12bf4 <__kernel_cosf>
   1211e:	e7d3      	b.n	120c8 <cosf+0x1c>
   12120:	eddd 0a01 	vldr	s1, [sp, #4]
   12124:	ed9d 0a00 	vldr	s0, [sp]
   12128:	f000 fd64 	bl	12bf4 <__kernel_cosf>
   1212c:	eeb1 0a40 	vneg.f32	s0, s0
   12130:	e7ca      	b.n	120c8 <cosf+0x1c>
   12132:	bf00      	nop
   12134:	3f490fd8 	.word	0x3f490fd8
   12138:	00000000 	.word	0x00000000

0001213c <floorf>:
   1213c:	ee10 2a10 	vmov	r2, s0
   12140:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   12144:	3b7f      	subs	r3, #127	; 0x7f
   12146:	2b16      	cmp	r3, #22
   12148:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   1214c:	dc1a      	bgt.n	12184 <floorf+0x48>
   1214e:	2b00      	cmp	r3, #0
   12150:	db1e      	blt.n	12190 <floorf+0x54>
   12152:	491a      	ldr	r1, [pc, #104]	; (121bc <floorf+0x80>)
   12154:	4119      	asrs	r1, r3
   12156:	420a      	tst	r2, r1
   12158:	d027      	beq.n	121aa <floorf+0x6e>
   1215a:	eddf 7a19 	vldr	s15, [pc, #100]	; 121c0 <floorf+0x84>
   1215e:	ee70 7a27 	vadd.f32	s15, s0, s15
   12162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1216a:	dd1e      	ble.n	121aa <floorf+0x6e>
   1216c:	2a00      	cmp	r2, #0
   1216e:	da04      	bge.n	1217a <floorf+0x3e>
   12170:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   12174:	fa40 f303 	asr.w	r3, r0, r3
   12178:	441a      	add	r2, r3
   1217a:	ea22 0301 	bic.w	r3, r2, r1
   1217e:	ee00 3a10 	vmov	s0, r3
   12182:	4770      	bx	lr
   12184:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   12188:	d30f      	bcc.n	121aa <floorf+0x6e>
   1218a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1218e:	4770      	bx	lr
   12190:	eddf 7a0b 	vldr	s15, [pc, #44]	; 121c0 <floorf+0x84>
   12194:	ee70 7a27 	vadd.f32	s15, s0, s15
   12198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121a0:	dd03      	ble.n	121aa <floorf+0x6e>
   121a2:	2a00      	cmp	r2, #0
   121a4:	db02      	blt.n	121ac <floorf+0x70>
   121a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 121c4 <floorf+0x88>
   121aa:	4770      	bx	lr
   121ac:	2900      	cmp	r1, #0
   121ae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   121b2:	bf18      	it	ne
   121b4:	eeb0 0a67 	vmovne.f32	s0, s15
   121b8:	4770      	bx	lr
   121ba:	bf00      	nop
   121bc:	007fffff 	.word	0x007fffff
   121c0:	7149f2ca 	.word	0x7149f2ca
   121c4:	00000000 	.word	0x00000000

000121c8 <roundf>:
   121c8:	ee10 3a10 	vmov	r3, s0
   121cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   121d0:	3a7f      	subs	r2, #127	; 0x7f
   121d2:	2a16      	cmp	r2, #22
   121d4:	ee10 1a10 	vmov	r1, s0
   121d8:	dc0e      	bgt.n	121f8 <roundf+0x30>
   121da:	2a00      	cmp	r2, #0
   121dc:	db11      	blt.n	12202 <roundf+0x3a>
   121de:	480c      	ldr	r0, [pc, #48]	; (12210 <roundf+0x48>)
   121e0:	4110      	asrs	r0, r2
   121e2:	4203      	tst	r3, r0
   121e4:	d005      	beq.n	121f2 <roundf+0x2a>
   121e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   121ea:	4113      	asrs	r3, r2
   121ec:	440b      	add	r3, r1
   121ee:	ea23 0300 	bic.w	r3, r3, r0
   121f2:	ee00 3a10 	vmov	s0, r3
   121f6:	4770      	bx	lr
   121f8:	2a80      	cmp	r2, #128	; 0x80
   121fa:	d1fa      	bne.n	121f2 <roundf+0x2a>
   121fc:	ee30 0a00 	vadd.f32	s0, s0, s0
   12200:	4770      	bx	lr
   12202:	3201      	adds	r2, #1
   12204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   12208:	d1f3      	bne.n	121f2 <roundf+0x2a>
   1220a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   1220e:	e7f0      	b.n	121f2 <roundf+0x2a>
   12210:	007fffff 	.word	0x007fffff

00012214 <sinf>:
   12214:	b500      	push	{lr}
   12216:	ee10 3a10 	vmov	r3, s0
   1221a:	4a21      	ldr	r2, [pc, #132]	; (122a0 <sinf+0x8c>)
   1221c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12220:	4293      	cmp	r3, r2
   12222:	b083      	sub	sp, #12
   12224:	dd1a      	ble.n	1225c <sinf+0x48>
   12226:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1222a:	db04      	blt.n	12236 <sinf+0x22>
   1222c:	ee30 0a40 	vsub.f32	s0, s0, s0
   12230:	b003      	add	sp, #12
   12232:	f85d fb04 	ldr.w	pc, [sp], #4
   12236:	4668      	mov	r0, sp
   12238:	f000 fb92 	bl	12960 <__ieee754_rem_pio2f>
   1223c:	f000 0003 	and.w	r0, r0, #3
   12240:	2801      	cmp	r0, #1
   12242:	d013      	beq.n	1226c <sinf+0x58>
   12244:	2802      	cmp	r0, #2
   12246:	d020      	beq.n	1228a <sinf+0x76>
   12248:	b1b8      	cbz	r0, 1227a <sinf+0x66>
   1224a:	eddd 0a01 	vldr	s1, [sp, #4]
   1224e:	ed9d 0a00 	vldr	s0, [sp]
   12252:	f000 fccf 	bl	12bf4 <__kernel_cosf>
   12256:	eeb1 0a40 	vneg.f32	s0, s0
   1225a:	e7e9      	b.n	12230 <sinf+0x1c>
   1225c:	eddf 0a11 	vldr	s1, [pc, #68]	; 122a4 <sinf+0x90>
   12260:	2000      	movs	r0, #0
   12262:	f001 f87f 	bl	13364 <__kernel_sinf>
   12266:	b003      	add	sp, #12
   12268:	f85d fb04 	ldr.w	pc, [sp], #4
   1226c:	eddd 0a01 	vldr	s1, [sp, #4]
   12270:	ed9d 0a00 	vldr	s0, [sp]
   12274:	f000 fcbe 	bl	12bf4 <__kernel_cosf>
   12278:	e7da      	b.n	12230 <sinf+0x1c>
   1227a:	eddd 0a01 	vldr	s1, [sp, #4]
   1227e:	ed9d 0a00 	vldr	s0, [sp]
   12282:	2001      	movs	r0, #1
   12284:	f001 f86e 	bl	13364 <__kernel_sinf>
   12288:	e7d2      	b.n	12230 <sinf+0x1c>
   1228a:	eddd 0a01 	vldr	s1, [sp, #4]
   1228e:	ed9d 0a00 	vldr	s0, [sp]
   12292:	2001      	movs	r0, #1
   12294:	f001 f866 	bl	13364 <__kernel_sinf>
   12298:	eeb1 0a40 	vneg.f32	s0, s0
   1229c:	e7c8      	b.n	12230 <sinf+0x1c>
   1229e:	bf00      	nop
   122a0:	3f490fd8 	.word	0x3f490fd8
   122a4:	00000000 	.word	0x00000000

000122a8 <tanhf>:
   122a8:	b510      	push	{r4, lr}
   122aa:	b082      	sub	sp, #8
   122ac:	ed8d 0a01 	vstr	s0, [sp, #4]
   122b0:	9c01      	ldr	r4, [sp, #4]
   122b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   122b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   122ba:	db0b      	blt.n	122d4 <tanhf+0x2c>
   122bc:	2c00      	cmp	r4, #0
   122be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   122c2:	db29      	blt.n	12318 <tanhf+0x70>
   122c4:	eeb0 7a40 	vmov.f32	s14, s0
   122c8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   122cc:	ee30 0a27 	vadd.f32	s0, s0, s15
   122d0:	b002      	add	sp, #8
   122d2:	bd10      	pop	{r4, pc}
   122d4:	4a21      	ldr	r2, [pc, #132]	; (1235c <tanhf+0xb4>)
   122d6:	4293      	cmp	r3, r2
   122d8:	dd07      	ble.n	122ea <tanhf+0x42>
   122da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   122de:	2c00      	cmp	r4, #0
   122e0:	bfb8      	it	lt
   122e2:	eeb1 0a40 	vneglt.f32	s0, s0
   122e6:	b002      	add	sp, #8
   122e8:	bd10      	pop	{r4, pc}
   122ea:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
   122ee:	db1b      	blt.n	12328 <tanhf+0x80>
   122f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   122f4:	db21      	blt.n	1233a <tanhf+0x92>
   122f6:	f001 f9b9 	bl	1366c <fabsf>
   122fa:	ee30 0a00 	vadd.f32	s0, s0, s0
   122fe:	f001 f87b 	bl	133f8 <expm1f>
   12302:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   12306:	ee30 0a07 	vadd.f32	s0, s0, s14
   1230a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1230e:	eec7 6a00 	vdiv.f32	s13, s14, s0
   12312:	ee37 0ae6 	vsub.f32	s0, s15, s13
   12316:	e7e2      	b.n	122de <tanhf+0x36>
   12318:	ed9d 7a01 	vldr	s14, [sp, #4]
   1231c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   12320:	ee30 0a67 	vsub.f32	s0, s0, s15
   12324:	b002      	add	sp, #8
   12326:	bd10      	pop	{r4, pc}
   12328:	eddd 7a01 	vldr	s15, [sp, #4]
   1232c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12330:	ee37 0a80 	vadd.f32	s0, s15, s0
   12334:	ee20 0a27 	vmul.f32	s0, s0, s15
   12338:	e7ca      	b.n	122d0 <tanhf+0x28>
   1233a:	f001 f997 	bl	1366c <fabsf>
   1233e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   12342:	ee20 0a27 	vmul.f32	s0, s0, s15
   12346:	f001 f857 	bl	133f8 <expm1f>
   1234a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1234e:	ee30 7a07 	vadd.f32	s14, s0, s14
   12352:	eef1 7a40 	vneg.f32	s15, s0
   12356:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1235a:	e7c0      	b.n	122de <tanhf+0x36>
   1235c:	41afffff 	.word	0x41afffff

00012360 <expf>:
   12360:	b5d0      	push	{r4, r6, r7, lr}
   12362:	ed2d 8b02 	vpush	{d8}
   12366:	4c3b      	ldr	r4, [pc, #236]	; (12454 <expf+0xf4>)
   12368:	b08a      	sub	sp, #40	; 0x28
   1236a:	eef0 8a40 	vmov.f32	s17, s0
   1236e:	f000 f8ff 	bl	12570 <__ieee754_expf>
   12372:	f994 3000 	ldrsb.w	r3, [r4]
   12376:	3301      	adds	r3, #1
   12378:	eeb0 8a40 	vmov.f32	s16, s0
   1237c:	d012      	beq.n	123a4 <expf+0x44>
   1237e:	eeb0 0a68 	vmov.f32	s0, s17
   12382:	f001 f97b 	bl	1367c <finitef>
   12386:	b168      	cbz	r0, 123a4 <expf+0x44>
   12388:	eddf 7a33 	vldr	s15, [pc, #204]	; 12458 <expf+0xf8>
   1238c:	eef4 8ae7 	vcmpe.f32	s17, s15
   12390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12394:	dc40      	bgt.n	12418 <expf+0xb8>
   12396:	eddf 7a31 	vldr	s15, [pc, #196]	; 1245c <expf+0xfc>
   1239a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123a2:	d405      	bmi.n	123b0 <expf+0x50>
   123a4:	eeb0 0a48 	vmov.f32	s0, s16
   123a8:	b00a      	add	sp, #40	; 0x28
   123aa:	ecbd 8b02 	vpop	{d8}
   123ae:	bdd0      	pop	{r4, r6, r7, pc}
   123b0:	2304      	movs	r3, #4
   123b2:	4a2b      	ldr	r2, [pc, #172]	; (12460 <expf+0x100>)
   123b4:	9300      	str	r3, [sp, #0]
   123b6:	ee18 0a90 	vmov	r0, s17
   123ba:	2300      	movs	r3, #0
   123bc:	9308      	str	r3, [sp, #32]
   123be:	9201      	str	r2, [sp, #4]
   123c0:	f7ee fc52 	bl	c68 <__aeabi_f2d>
   123c4:	f994 3000 	ldrsb.w	r3, [r4]
   123c8:	2600      	movs	r6, #0
   123ca:	2700      	movs	r7, #0
   123cc:	2b02      	cmp	r3, #2
   123ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   123d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   123d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   123da:	d018      	beq.n	1240e <expf+0xae>
   123dc:	4668      	mov	r0, sp
   123de:	f001 f809 	bl	133f4 <matherr>
   123e2:	b1a0      	cbz	r0, 1240e <expf+0xae>
   123e4:	9b08      	ldr	r3, [sp, #32]
   123e6:	2b00      	cmp	r3, #0
   123e8:	d12e      	bne.n	12448 <expf+0xe8>
   123ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   123ee:	f7ee ff55 	bl	129c <__aeabi_d2f>
   123f2:	ee08 0a10 	vmov	s16, r0
   123f6:	eeb0 0a48 	vmov.f32	s0, s16
   123fa:	b00a      	add	sp, #40	; 0x28
   123fc:	ecbd 8b02 	vpop	{d8}
   12400:	bdd0      	pop	{r4, r6, r7, pc}
   12402:	4918      	ldr	r1, [pc, #96]	; (12464 <expf+0x104>)
   12404:	2000      	movs	r0, #0
   12406:	2b02      	cmp	r3, #2
   12408:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1240c:	d1e6      	bne.n	123dc <expf+0x7c>
   1240e:	f002 fd80 	bl	14f12 <__errno>
   12412:	2322      	movs	r3, #34	; 0x22
   12414:	6003      	str	r3, [r0, #0]
   12416:	e7e5      	b.n	123e4 <expf+0x84>
   12418:	2303      	movs	r3, #3
   1241a:	4a11      	ldr	r2, [pc, #68]	; (12460 <expf+0x100>)
   1241c:	9300      	str	r3, [sp, #0]
   1241e:	ee18 0a90 	vmov	r0, s17
   12422:	2300      	movs	r3, #0
   12424:	9308      	str	r3, [sp, #32]
   12426:	9201      	str	r2, [sp, #4]
   12428:	f7ee fc1e 	bl	c68 <__aeabi_f2d>
   1242c:	f994 3000 	ldrsb.w	r3, [r4]
   12430:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12434:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12438:	2b00      	cmp	r3, #0
   1243a:	d1e2      	bne.n	12402 <expf+0xa2>
   1243c:	4b0a      	ldr	r3, [pc, #40]	; (12468 <expf+0x108>)
   1243e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12442:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12446:	e7c9      	b.n	123dc <expf+0x7c>
   12448:	f002 fd63 	bl	14f12 <__errno>
   1244c:	9b08      	ldr	r3, [sp, #32]
   1244e:	6003      	str	r3, [r0, #0]
   12450:	e7cb      	b.n	123ea <expf+0x8a>
   12452:	bf00      	nop
   12454:	2000078c 	.word	0x2000078c
   12458:	42b17180 	.word	0x42b17180
   1245c:	c2cff1b5 	.word	0xc2cff1b5
   12460:	00025a00 	.word	0x00025a00
   12464:	7ff00000 	.word	0x7ff00000
   12468:	47efffff 	.word	0x47efffff

0001246c <logf>:
   1246c:	b510      	push	{r4, lr}
   1246e:	ed2d 8b02 	vpush	{d8}
   12472:	b08a      	sub	sp, #40	; 0x28
   12474:	eeb0 8a40 	vmov.f32	s16, s0
   12478:	f000 f972 	bl	12760 <__ieee754_logf>
   1247c:	4b37      	ldr	r3, [pc, #220]	; (1255c <logf+0xf0>)
   1247e:	f993 4000 	ldrsb.w	r4, [r3]
   12482:	1c63      	adds	r3, r4, #1
   12484:	d033      	beq.n	124ee <logf+0x82>
   12486:	eeb4 8a48 	vcmp.f32	s16, s16
   1248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1248e:	d62e      	bvs.n	124ee <logf+0x82>
   12490:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   12494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12498:	dc29      	bgt.n	124ee <logf+0x82>
   1249a:	4b31      	ldr	r3, [pc, #196]	; (12560 <logf+0xf4>)
   1249c:	9301      	str	r3, [sp, #4]
   1249e:	ee18 0a10 	vmov	r0, s16
   124a2:	2300      	movs	r3, #0
   124a4:	9308      	str	r3, [sp, #32]
   124a6:	f7ee fbdf 	bl	c68 <__aeabi_f2d>
   124aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   124ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   124b2:	b304      	cbz	r4, 124f6 <logf+0x8a>
   124b4:	4b2b      	ldr	r3, [pc, #172]	; (12564 <logf+0xf8>)
   124b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
   124ba:	2200      	movs	r2, #0
   124bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124c4:	d141      	bne.n	1254a <logf+0xde>
   124c6:	2302      	movs	r3, #2
   124c8:	429c      	cmp	r4, r3
   124ca:	9300      	str	r3, [sp, #0]
   124cc:	d137      	bne.n	1253e <logf+0xd2>
   124ce:	f002 fd20 	bl	14f12 <__errno>
   124d2:	2322      	movs	r3, #34	; 0x22
   124d4:	6003      	str	r3, [r0, #0]
   124d6:	9b08      	ldr	r3, [sp, #32]
   124d8:	b32b      	cbz	r3, 12526 <logf+0xba>
   124da:	f002 fd1a 	bl	14f12 <__errno>
   124de:	9b08      	ldr	r3, [sp, #32]
   124e0:	6003      	str	r3, [r0, #0]
   124e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   124e6:	f7ee fed9 	bl	129c <__aeabi_d2f>
   124ea:	ee00 0a10 	vmov	s0, r0
   124ee:	b00a      	add	sp, #40	; 0x28
   124f0:	ecbd 8b02 	vpop	{d8}
   124f4:	bd10      	pop	{r4, pc}
   124f6:	4b1c      	ldr	r3, [pc, #112]	; (12568 <logf+0xfc>)
   124f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   124fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12504:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12508:	d017      	beq.n	1253a <logf+0xce>
   1250a:	2301      	movs	r3, #1
   1250c:	9300      	str	r3, [sp, #0]
   1250e:	4668      	mov	r0, sp
   12510:	f000 ff70 	bl	133f4 <matherr>
   12514:	b1e8      	cbz	r0, 12552 <logf+0xe6>
   12516:	4815      	ldr	r0, [pc, #84]	; (1256c <logf+0x100>)
   12518:	f7ef f892 	bl	1640 <nan>
   1251c:	ed8d 0b06 	vstr	d0, [sp, #24]
   12520:	9b08      	ldr	r3, [sp, #32]
   12522:	2b00      	cmp	r3, #0
   12524:	d1d9      	bne.n	124da <logf+0x6e>
   12526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1252a:	f7ee feb7 	bl	129c <__aeabi_d2f>
   1252e:	ee00 0a10 	vmov	s0, r0
   12532:	b00a      	add	sp, #40	; 0x28
   12534:	ecbd 8b02 	vpop	{d8}
   12538:	bd10      	pop	{r4, pc}
   1253a:	2302      	movs	r3, #2
   1253c:	9300      	str	r3, [sp, #0]
   1253e:	4668      	mov	r0, sp
   12540:	f000 ff58 	bl	133f4 <matherr>
   12544:	2800      	cmp	r0, #0
   12546:	d1eb      	bne.n	12520 <logf+0xb4>
   12548:	e7c1      	b.n	124ce <logf+0x62>
   1254a:	2301      	movs	r3, #1
   1254c:	2c02      	cmp	r4, #2
   1254e:	9300      	str	r3, [sp, #0]
   12550:	d1dd      	bne.n	1250e <logf+0xa2>
   12552:	f002 fcde 	bl	14f12 <__errno>
   12556:	2321      	movs	r3, #33	; 0x21
   12558:	6003      	str	r3, [r0, #0]
   1255a:	e7dc      	b.n	12516 <logf+0xaa>
   1255c:	2000078c 	.word	0x2000078c
   12560:	00025a08 	.word	0x00025a08
   12564:	fff00000 	.word	0xfff00000
   12568:	c7efffff 	.word	0xc7efffff
   1256c:	00025a0c 	.word	0x00025a0c

00012570 <__ieee754_expf>:
   12570:	ee10 3a10 	vmov	r3, s0
   12574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   12578:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1257c:	d857      	bhi.n	1262e <__ieee754_expf+0xbe>
   1257e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   12582:	f000 8098 	beq.w	126b6 <__ieee754_expf+0x146>
   12586:	4864      	ldr	r0, [pc, #400]	; (12718 <__ieee754_expf+0x1a8>)
   12588:	4283      	cmp	r3, r0
   1258a:	dc53      	bgt.n	12634 <__ieee754_expf+0xc4>
   1258c:	2b00      	cmp	r3, #0
   1258e:	f2c0 808b 	blt.w	126a8 <__ieee754_expf+0x138>
   12592:	4b62      	ldr	r3, [pc, #392]	; (1271c <__ieee754_expf+0x1ac>)
   12594:	429a      	cmp	r2, r3
   12596:	d952      	bls.n	1263e <__ieee754_expf+0xce>
   12598:	4b61      	ldr	r3, [pc, #388]	; (12720 <__ieee754_expf+0x1b0>)
   1259a:	429a      	cmp	r2, r3
   1259c:	f200 809e 	bhi.w	126dc <__ieee754_expf+0x16c>
   125a0:	4b60      	ldr	r3, [pc, #384]	; (12724 <__ieee754_expf+0x1b4>)
   125a2:	4a61      	ldr	r2, [pc, #388]	; (12728 <__ieee754_expf+0x1b8>)
   125a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   125a8:	ed93 4a00 	vldr	s8, [r3]
   125ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   125b0:	f1c1 0301 	rsb	r3, r1, #1
   125b4:	ee30 4a44 	vsub.f32	s8, s0, s8
   125b8:	ed92 7a00 	vldr	s14, [r2]
   125bc:	1a5b      	subs	r3, r3, r1
   125be:	ee34 0a47 	vsub.f32	s0, s8, s14
   125c2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 1272c <__ieee754_expf+0x1bc>
   125c6:	eddf 4a5a 	vldr	s9, [pc, #360]	; 12730 <__ieee754_expf+0x1c0>
   125ca:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 12734 <__ieee754_expf+0x1c4>
   125ce:	eddf 5a5a 	vldr	s11, [pc, #360]	; 12738 <__ieee754_expf+0x1c8>
   125d2:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 1273c <__ieee754_expf+0x1cc>
   125d6:	ee60 6a00 	vmul.f32	s13, s0, s0
   125da:	eee6 4aa7 	vfma.f32	s9, s13, s15
   125de:	eef0 7a40 	vmov.f32	s15, s0
   125e2:	eea4 5aa6 	vfma.f32	s10, s9, s13
   125e6:	eee5 5a26 	vfma.f32	s11, s10, s13
   125ea:	eea5 6aa6 	vfma.f32	s12, s11, s13
   125ee:	eee6 7a66 	vfms.f32	s15, s12, s13
   125f2:	eef0 6a67 	vmov.f32	s13, s15
   125f6:	2b00      	cmp	r3, #0
   125f8:	d047      	beq.n	1268a <__ieee754_expf+0x11a>
   125fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   125fe:	ee60 5a27 	vmul.f32	s11, s0, s15
   12602:	ee76 6a67 	vsub.f32	s13, s12, s15
   12606:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   1260a:	ee85 0aa6 	vdiv.f32	s0, s11, s13
   1260e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12612:	ee37 0a40 	vsub.f32	s0, s14, s0
   12616:	ee30 0a44 	vsub.f32	s0, s0, s8
   1261a:	ee37 0ac0 	vsub.f32	s0, s15, s0
   1261e:	db51      	blt.n	126c4 <__ieee754_expf+0x154>
   12620:	ee10 2a10 	vmov	r2, s0
   12624:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   12628:	ee00 3a10 	vmov	s0, r3
   1262c:	4770      	bx	lr
   1262e:	ee30 0a00 	vadd.f32	s0, s0, s0
   12632:	4770      	bx	lr
   12634:	ed9f 0a42 	vldr	s0, [pc, #264]	; 12740 <__ieee754_expf+0x1d0>
   12638:	ee20 0a00 	vmul.f32	s0, s0, s0
   1263c:	4770      	bx	lr
   1263e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   12642:	d20a      	bcs.n	1265a <__ieee754_expf+0xea>
   12644:	eddf 7a3e 	vldr	s15, [pc, #248]	; 12740 <__ieee754_expf+0x1d0>
   12648:	ee70 7a27 	vadd.f32	s15, s0, s15
   1264c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12650:	eef4 7ac7 	vcmpe.f32	s15, s14
   12654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12658:	dc5a      	bgt.n	12710 <__ieee754_expf+0x1a0>
   1265a:	ee60 7a00 	vmul.f32	s15, s0, s0
   1265e:	ed9f 5a33 	vldr	s10, [pc, #204]	; 1272c <__ieee754_expf+0x1bc>
   12662:	eddf 5a33 	vldr	s11, [pc, #204]	; 12730 <__ieee754_expf+0x1c0>
   12666:	ed9f 6a33 	vldr	s12, [pc, #204]	; 12734 <__ieee754_expf+0x1c4>
   1266a:	eddf 6a33 	vldr	s13, [pc, #204]	; 12738 <__ieee754_expf+0x1c8>
   1266e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 1273c <__ieee754_expf+0x1cc>
   12672:	eee7 5a85 	vfma.f32	s11, s15, s10
   12676:	eea7 6aa5 	vfma.f32	s12, s15, s11
   1267a:	eee7 6a86 	vfma.f32	s13, s15, s12
   1267e:	eea7 7aa6 	vfma.f32	s14, s15, s13
   12682:	eef0 6a40 	vmov.f32	s13, s0
   12686:	eee7 6ac7 	vfms.f32	s13, s15, s14
   1268a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1268e:	ee36 7ac7 	vsub.f32	s14, s13, s14
   12692:	ee60 6a26 	vmul.f32	s13, s0, s13
   12696:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1269a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1269e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   126a2:	ee36 0a40 	vsub.f32	s0, s12, s0
   126a6:	4770      	bx	lr
   126a8:	4b26      	ldr	r3, [pc, #152]	; (12744 <__ieee754_expf+0x1d4>)
   126aa:	429a      	cmp	r2, r3
   126ac:	f67f af71 	bls.w	12592 <__ieee754_expf+0x22>
   126b0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 12748 <__ieee754_expf+0x1d8>
   126b4:	4770      	bx	lr
   126b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 12748 <__ieee754_expf+0x1d8>
   126ba:	2900      	cmp	r1, #0
   126bc:	bf18      	it	ne
   126be:	eeb0 0a67 	vmovne.f32	s0, s15
   126c2:	4770      	bx	lr
   126c4:	ee10 2a10 	vmov	r2, s0
   126c8:	3364      	adds	r3, #100	; 0x64
   126ca:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   126ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1274c <__ieee754_expf+0x1dc>
   126d2:	ee00 3a10 	vmov	s0, r3
   126d6:	ee20 0a27 	vmul.f32	s0, s0, s15
   126da:	4770      	bx	lr
   126dc:	4b1c      	ldr	r3, [pc, #112]	; (12750 <__ieee754_expf+0x1e0>)
   126de:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 12754 <__ieee754_expf+0x1e4>
   126e2:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 12758 <__ieee754_expf+0x1e8>
   126e6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 1275c <__ieee754_expf+0x1ec>
   126ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   126ee:	edd3 7a00 	vldr	s15, [r3]
   126f2:	eee0 7a07 	vfma.f32	s15, s0, s14
   126f6:	eeb0 4a40 	vmov.f32	s8, s0
   126fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   126fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   12702:	ee17 3a90 	vmov	r3, s15
   12706:	eea7 4a46 	vfms.f32	s8, s14, s12
   1270a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1270e:	e756      	b.n	125be <__ieee754_expf+0x4e>
   12710:	ee30 0a07 	vadd.f32	s0, s0, s14
   12714:	4770      	bx	lr
   12716:	bf00      	nop
   12718:	42b17217 	.word	0x42b17217
   1271c:	3eb17218 	.word	0x3eb17218
   12720:	3f851591 	.word	0x3f851591
   12724:	00025a18 	.word	0x00025a18
   12728:	00025a20 	.word	0x00025a20
   1272c:	3331bb4c 	.word	0x3331bb4c
   12730:	b5ddea0e 	.word	0xb5ddea0e
   12734:	388ab355 	.word	0x388ab355
   12738:	bb360b61 	.word	0xbb360b61
   1273c:	3e2aaaab 	.word	0x3e2aaaab
   12740:	7149f2ca 	.word	0x7149f2ca
   12744:	42cff1b5 	.word	0x42cff1b5
   12748:	00000000 	.word	0x00000000
   1274c:	0d800000 	.word	0x0d800000
   12750:	00025a10 	.word	0x00025a10
   12754:	3fb8aa3b 	.word	0x3fb8aa3b
   12758:	3f317180 	.word	0x3f317180
   1275c:	3717f7d1 	.word	0x3717f7d1

00012760 <__ieee754_logf>:
   12760:	ee10 3a10 	vmov	r3, s0
   12764:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   12768:	d02d      	beq.n	127c6 <__ieee754_logf+0x66>
   1276a:	2b00      	cmp	r3, #0
   1276c:	db32      	blt.n	127d4 <__ieee754_logf+0x74>
   1276e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   12772:	da3f      	bge.n	127f4 <__ieee754_logf+0x94>
   12774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12778:	b430      	push	{r4, r5}
   1277a:	db32      	blt.n	127e2 <__ieee754_logf+0x82>
   1277c:	2500      	movs	r5, #0
   1277e:	4868      	ldr	r0, [pc, #416]	; (12920 <__ieee754_logf+0x1c0>)
   12780:	4c68      	ldr	r4, [pc, #416]	; (12924 <__ieee754_logf+0x1c4>)
   12782:	f3c3 0116 	ubfx	r1, r3, #0, #23
   12786:	4408      	add	r0, r1
   12788:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   1278c:	15db      	asrs	r3, r3, #23
   1278e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   12792:	3b7f      	subs	r3, #127	; 0x7f
   12794:	430a      	orrs	r2, r1
   12796:	442b      	add	r3, r5
   12798:	ee00 2a10 	vmov	s0, r2
   1279c:	f101 050f 	add.w	r5, r1, #15
   127a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   127a4:	402c      	ands	r4, r5
   127a6:	ee30 0a67 	vsub.f32	s0, s0, s15
   127aa:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   127ae:	bb24      	cbnz	r4, 127fa <__ieee754_logf+0x9a>
   127b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   127b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   127b8:	d161      	bne.n	1287e <__ieee754_logf+0x11e>
   127ba:	2b00      	cmp	r3, #0
   127bc:	f040 8093 	bne.w	128e6 <__ieee754_logf+0x186>
   127c0:	ed9f 0a59 	vldr	s0, [pc, #356]	; 12928 <__ieee754_logf+0x1c8>
   127c4:	e059      	b.n	1287a <__ieee754_logf+0x11a>
   127c6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 1292c <__ieee754_logf+0x1cc>
   127ca:	eddf 7a57 	vldr	s15, [pc, #348]	; 12928 <__ieee754_logf+0x1c8>
   127ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
   127d2:	4770      	bx	lr
   127d4:	ee70 7a40 	vsub.f32	s15, s0, s0
   127d8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 12928 <__ieee754_logf+0x1c8>
   127dc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   127e0:	4770      	bx	lr
   127e2:	eddf 7a53 	vldr	s15, [pc, #332]	; 12930 <__ieee754_logf+0x1d0>
   127e6:	ee60 7a27 	vmul.f32	s15, s0, s15
   127ea:	f06f 0518 	mvn.w	r5, #24
   127ee:	ee17 3a90 	vmov	r3, s15
   127f2:	e7c4      	b.n	1277e <__ieee754_logf+0x1e>
   127f4:	ee30 0a00 	vadd.f32	s0, s0, s0
   127f8:	4770      	bx	lr
   127fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   127fe:	ee30 7a07 	vadd.f32	s14, s0, s14
   12802:	ed9f 3a4c 	vldr	s6, [pc, #304]	; 12934 <__ieee754_logf+0x1d4>
   12806:	eddf 4a4c 	vldr	s9, [pc, #304]	; 12938 <__ieee754_logf+0x1d8>
   1280a:	eddf 5a4c 	vldr	s11, [pc, #304]	; 1293c <__ieee754_logf+0x1dc>
   1280e:	eddf 3a4c 	vldr	s7, [pc, #304]	; 12940 <__ieee754_logf+0x1e0>
   12812:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 12944 <__ieee754_logf+0x1e4>
   12816:	eddf 7a4c 	vldr	s15, [pc, #304]	; 12948 <__ieee754_logf+0x1e8>
   1281a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 1294c <__ieee754_logf+0x1ec>
   1281e:	484c      	ldr	r0, [pc, #304]	; (12950 <__ieee754_logf+0x1f0>)
   12820:	ee80 4a07 	vdiv.f32	s8, s0, s14
   12824:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   12828:	4408      	add	r0, r1
   1282a:	f502 7222 	add.w	r2, r2, #648	; 0x288
   1282e:	4302      	orrs	r2, r0
   12830:	2a00      	cmp	r2, #0
   12832:	ee07 3a10 	vmov	s14, r3
   12836:	ee24 6a04 	vmul.f32	s12, s8, s8
   1283a:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   1283e:	ee26 7a06 	vmul.f32	s14, s12, s12
   12842:	eee7 4a03 	vfma.f32	s9, s14, s6
   12846:	eea7 5a23 	vfma.f32	s10, s14, s7
   1284a:	eee4 5a87 	vfma.f32	s11, s9, s14
   1284e:	eee5 6a07 	vfma.f32	s13, s10, s14
   12852:	eee5 7a87 	vfma.f32	s15, s11, s14
   12856:	ee67 7a86 	vmul.f32	s15, s15, s12
   1285a:	eee6 7a87 	vfma.f32	s15, s13, s14
   1285e:	dd2b      	ble.n	128b8 <__ieee754_logf+0x158>
   12860:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   12864:	ee20 7a07 	vmul.f32	s14, s0, s14
   12868:	ee27 7a00 	vmul.f32	s14, s14, s0
   1286c:	bb53      	cbnz	r3, 128c4 <__ieee754_logf+0x164>
   1286e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12872:	eea7 7ac4 	vfms.f32	s14, s15, s8
   12876:	ee30 0a47 	vsub.f32	s0, s0, s14
   1287a:	bc30      	pop	{r4, r5}
   1287c:	4770      	bx	lr
   1287e:	eddf 7a35 	vldr	s15, [pc, #212]	; 12954 <__ieee754_logf+0x1f4>
   12882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   12886:	eea0 7a67 	vfms.f32	s14, s0, s15
   1288a:	eef0 7a47 	vmov.f32	s15, s14
   1288e:	ee20 7a00 	vmul.f32	s14, s0, s0
   12892:	ee27 7a27 	vmul.f32	s14, s14, s15
   12896:	2b00      	cmp	r3, #0
   12898:	d0ed      	beq.n	12876 <__ieee754_logf+0x116>
   1289a:	ee07 3a90 	vmov	s15, r3
   1289e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 12958 <__ieee754_logf+0x1f8>
   128a2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 1295c <__ieee754_logf+0x1fc>
   128a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   128aa:	eea7 7ac6 	vfms.f32	s14, s15, s12
   128ae:	ee37 0a40 	vsub.f32	s0, s14, s0
   128b2:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   128b6:	e7e0      	b.n	1287a <__ieee754_logf+0x11a>
   128b8:	bb13      	cbnz	r3, 12900 <__ieee754_logf+0x1a0>
   128ba:	ee70 7a67 	vsub.f32	s15, s0, s15
   128be:	eea7 0ac4 	vfms.f32	s0, s15, s8
   128c2:	e7da      	b.n	1287a <__ieee754_logf+0x11a>
   128c4:	eddf 6a24 	vldr	s13, [pc, #144]	; 12958 <__ieee754_logf+0x1f8>
   128c8:	ed9f 6a24 	vldr	s12, [pc, #144]	; 1295c <__ieee754_logf+0x1fc>
   128cc:	ee77 7a87 	vadd.f32	s15, s15, s14
   128d0:	ee62 6aa6 	vmul.f32	s13, s5, s13
   128d4:	eee7 6a84 	vfma.f32	s13, s15, s8
   128d8:	ee37 7a66 	vsub.f32	s14, s14, s13
   128dc:	ee37 0a40 	vsub.f32	s0, s14, s0
   128e0:	ee92 0a86 	vfnms.f32	s0, s5, s12
   128e4:	e7c9      	b.n	1287a <__ieee754_logf+0x11a>
   128e6:	ee07 3a90 	vmov	s15, r3
   128ea:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 12958 <__ieee754_logf+0x1f8>
   128ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1295c <__ieee754_logf+0x1fc>
   128f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   128f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   128fa:	eea7 0a87 	vfma.f32	s0, s15, s14
   128fe:	e7bc      	b.n	1287a <__ieee754_logf+0x11a>
   12900:	ed9f 7a15 	vldr	s14, [pc, #84]	; 12958 <__ieee754_logf+0x1f8>
   12904:	eddf 6a15 	vldr	s13, [pc, #84]	; 1295c <__ieee754_logf+0x1fc>
   12908:	ee70 7a67 	vsub.f32	s15, s0, s15
   1290c:	ee27 7a62 	vnmul.f32	s14, s14, s5
   12910:	eea7 7a84 	vfma.f32	s14, s15, s8
   12914:	ee37 0a40 	vsub.f32	s0, s14, s0
   12918:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   1291c:	e7ad      	b.n	1287a <__ieee754_logf+0x11a>
   1291e:	bf00      	nop
   12920:	004afb20 	.word	0x004afb20
   12924:	007ffff0 	.word	0x007ffff0
   12928:	00000000 	.word	0x00000000
   1292c:	cc000000 	.word	0xcc000000
   12930:	4c000000 	.word	0x4c000000
   12934:	3e178897 	.word	0x3e178897
   12938:	3e3a3325 	.word	0x3e3a3325
   1293c:	3e924925 	.word	0x3e924925
   12940:	3e1cd04f 	.word	0x3e1cd04f
   12944:	3e638e29 	.word	0x3e638e29
   12948:	3f2aaaab 	.word	0x3f2aaaab
   1294c:	3ecccccd 	.word	0x3ecccccd
   12950:	ffcf5c30 	.word	0xffcf5c30
   12954:	3eaaaaab 	.word	0x3eaaaaab
   12958:	3717f7d1 	.word	0x3717f7d1
   1295c:	3f317180 	.word	0x3f317180

00012960 <__ieee754_rem_pio2f>:
   12960:	b570      	push	{r4, r5, r6, lr}
   12962:	ee10 3a10 	vmov	r3, s0
   12966:	4a95      	ldr	r2, [pc, #596]	; (12bbc <__ieee754_rem_pio2f+0x25c>)
   12968:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1296c:	4294      	cmp	r4, r2
   1296e:	b086      	sub	sp, #24
   12970:	4605      	mov	r5, r0
   12972:	dd68      	ble.n	12a46 <__ieee754_rem_pio2f+0xe6>
   12974:	4a92      	ldr	r2, [pc, #584]	; (12bc0 <__ieee754_rem_pio2f+0x260>)
   12976:	4294      	cmp	r4, r2
   12978:	ee10 6a10 	vmov	r6, s0
   1297c:	dc1a      	bgt.n	129b4 <__ieee754_rem_pio2f+0x54>
   1297e:	2b00      	cmp	r3, #0
   12980:	eddf 7a90 	vldr	s15, [pc, #576]	; 12bc4 <__ieee754_rem_pio2f+0x264>
   12984:	4a90      	ldr	r2, [pc, #576]	; (12bc8 <__ieee754_rem_pio2f+0x268>)
   12986:	f024 040f 	bic.w	r4, r4, #15
   1298a:	f340 80f1 	ble.w	12b70 <__ieee754_rem_pio2f+0x210>
   1298e:	4294      	cmp	r4, r2
   12990:	ee70 7a67 	vsub.f32	s15, s0, s15
   12994:	d066      	beq.n	12a64 <__ieee754_rem_pio2f+0x104>
   12996:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 12bcc <__ieee754_rem_pio2f+0x26c>
   1299a:	ee77 6ac7 	vsub.f32	s13, s15, s14
   1299e:	2001      	movs	r0, #1
   129a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   129a4:	edc5 6a00 	vstr	s13, [r5]
   129a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   129ac:	edc5 7a01 	vstr	s15, [r5, #4]
   129b0:	b006      	add	sp, #24
   129b2:	bd70      	pop	{r4, r5, r6, pc}
   129b4:	4a86      	ldr	r2, [pc, #536]	; (12bd0 <__ieee754_rem_pio2f+0x270>)
   129b6:	4294      	cmp	r4, r2
   129b8:	dd67      	ble.n	12a8a <__ieee754_rem_pio2f+0x12a>
   129ba:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   129be:	da49      	bge.n	12a54 <__ieee754_rem_pio2f+0xf4>
   129c0:	15e2      	asrs	r2, r4, #23
   129c2:	3a86      	subs	r2, #134	; 0x86
   129c4:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   129c8:	ee07 3a90 	vmov	s15, r3
   129cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   129d0:	eddf 6a80 	vldr	s13, [pc, #512]	; 12bd4 <__ieee754_rem_pio2f+0x274>
   129d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   129d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   129dc:	ed8d 7a03 	vstr	s14, [sp, #12]
   129e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   129e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   129e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   129ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
   129f0:	ed8d 7a04 	vstr	s14, [sp, #16]
   129f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   129f8:	eef5 7a40 	vcmp.f32	s15, #0.0
   129fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a00:	edcd 7a05 	vstr	s15, [sp, #20]
   12a04:	f040 80a3 	bne.w	12b4e <__ieee754_rem_pio2f+0x1ee>
   12a08:	eeb5 7a40 	vcmp.f32	s14, #0.0
   12a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a10:	bf14      	ite	ne
   12a12:	2302      	movne	r3, #2
   12a14:	2301      	moveq	r3, #1
   12a16:	4970      	ldr	r1, [pc, #448]	; (12bd8 <__ieee754_rem_pio2f+0x278>)
   12a18:	9101      	str	r1, [sp, #4]
   12a1a:	2102      	movs	r1, #2
   12a1c:	9100      	str	r1, [sp, #0]
   12a1e:	a803      	add	r0, sp, #12
   12a20:	4629      	mov	r1, r5
   12a22:	f000 f969 	bl	12cf8 <__kernel_rem_pio2f>
   12a26:	2e00      	cmp	r6, #0
   12a28:	dac2      	bge.n	129b0 <__ieee754_rem_pio2f+0x50>
   12a2a:	ed95 7a00 	vldr	s14, [r5]
   12a2e:	edd5 7a01 	vldr	s15, [r5, #4]
   12a32:	eeb1 7a47 	vneg.f32	s14, s14
   12a36:	eef1 7a67 	vneg.f32	s15, s15
   12a3a:	4240      	negs	r0, r0
   12a3c:	ed85 7a00 	vstr	s14, [r5]
   12a40:	edc5 7a01 	vstr	s15, [r5, #4]
   12a44:	e7b4      	b.n	129b0 <__ieee754_rem_pio2f+0x50>
   12a46:	2200      	movs	r2, #0
   12a48:	ed85 0a00 	vstr	s0, [r5]
   12a4c:	6042      	str	r2, [r0, #4]
   12a4e:	2000      	movs	r0, #0
   12a50:	b006      	add	sp, #24
   12a52:	bd70      	pop	{r4, r5, r6, pc}
   12a54:	ee70 7a40 	vsub.f32	s15, s0, s0
   12a58:	2000      	movs	r0, #0
   12a5a:	edc5 7a01 	vstr	s15, [r5, #4]
   12a5e:	edc5 7a00 	vstr	s15, [r5]
   12a62:	e7a5      	b.n	129b0 <__ieee754_rem_pio2f+0x50>
   12a64:	eddf 6a5d 	vldr	s13, [pc, #372]	; 12bdc <__ieee754_rem_pio2f+0x27c>
   12a68:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 12be0 <__ieee754_rem_pio2f+0x280>
   12a6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12a70:	2001      	movs	r0, #1
   12a72:	ee77 6ac7 	vsub.f32	s13, s15, s14
   12a76:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12a7a:	edc5 6a00 	vstr	s13, [r5]
   12a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   12a82:	edc5 7a01 	vstr	s15, [r5, #4]
   12a86:	b006      	add	sp, #24
   12a88:	bd70      	pop	{r4, r5, r6, pc}
   12a8a:	f000 fdef 	bl	1366c <fabsf>
   12a8e:	eddf 6a55 	vldr	s13, [pc, #340]	; 12be4 <__ieee754_rem_pio2f+0x284>
   12a92:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 12bc4 <__ieee754_rem_pio2f+0x264>
   12a96:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 12bcc <__ieee754_rem_pio2f+0x26c>
   12a9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   12a9e:	eee0 7a26 	vfma.f32	s15, s0, s13
   12aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   12aa6:	ee17 0a90 	vmov	r0, s15
   12aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   12aae:	281f      	cmp	r0, #31
   12ab0:	eea6 0ac6 	vfms.f32	s0, s13, s12
   12ab4:	ee66 7a87 	vmul.f32	s15, s13, s14
   12ab8:	eeb1 6a66 	vneg.f32	s12, s13
   12abc:	dc1e      	bgt.n	12afc <__ieee754_rem_pio2f+0x19c>
   12abe:	4a4a      	ldr	r2, [pc, #296]	; (12be8 <__ieee754_rem_pio2f+0x288>)
   12ac0:	1e41      	subs	r1, r0, #1
   12ac2:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   12ac6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   12aca:	4293      	cmp	r3, r2
   12acc:	d016      	beq.n	12afc <__ieee754_rem_pio2f+0x19c>
   12ace:	ee30 7a67 	vsub.f32	s14, s0, s15
   12ad2:	ed85 7a00 	vstr	s14, [r5]
   12ad6:	ee30 0a47 	vsub.f32	s0, s0, s14
   12ada:	2e00      	cmp	r6, #0
   12adc:	ee30 0a67 	vsub.f32	s0, s0, s15
   12ae0:	ed85 0a01 	vstr	s0, [r5, #4]
   12ae4:	f6bf af64 	bge.w	129b0 <__ieee754_rem_pio2f+0x50>
   12ae8:	eeb1 7a47 	vneg.f32	s14, s14
   12aec:	eeb1 0a40 	vneg.f32	s0, s0
   12af0:	ed85 7a00 	vstr	s14, [r5]
   12af4:	ed85 0a01 	vstr	s0, [r5, #4]
   12af8:	4240      	negs	r0, r0
   12afa:	e759      	b.n	129b0 <__ieee754_rem_pio2f+0x50>
   12afc:	ee30 7a67 	vsub.f32	s14, s0, s15
   12b00:	15e2      	asrs	r2, r4, #23
   12b02:	ee17 3a10 	vmov	r3, s14
   12b06:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   12b0a:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   12b0e:	2c08      	cmp	r4, #8
   12b10:	dddf      	ble.n	12ad2 <__ieee754_rem_pio2f+0x172>
   12b12:	eddf 7a32 	vldr	s15, [pc, #200]	; 12bdc <__ieee754_rem_pio2f+0x27c>
   12b16:	ed9f 7a32 	vldr	s14, [pc, #200]	; 12be0 <__ieee754_rem_pio2f+0x280>
   12b1a:	eef0 5a40 	vmov.f32	s11, s0
   12b1e:	eee6 5a27 	vfma.f32	s11, s12, s15
   12b22:	ee30 0a65 	vsub.f32	s0, s0, s11
   12b26:	eea6 0a27 	vfma.f32	s0, s12, s15
   12b2a:	eef0 7a40 	vmov.f32	s15, s0
   12b2e:	eed6 7a87 	vfnms.f32	s15, s13, s14
   12b32:	ee35 7ae7 	vsub.f32	s14, s11, s15
   12b36:	ee17 3a10 	vmov	r3, s14
   12b3a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   12b3e:	1ad2      	subs	r2, r2, r3
   12b40:	2a19      	cmp	r2, #25
   12b42:	dc06      	bgt.n	12b52 <__ieee754_rem_pio2f+0x1f2>
   12b44:	ed85 7a00 	vstr	s14, [r5]
   12b48:	eeb0 0a65 	vmov.f32	s0, s11
   12b4c:	e7c3      	b.n	12ad6 <__ieee754_rem_pio2f+0x176>
   12b4e:	2303      	movs	r3, #3
   12b50:	e761      	b.n	12a16 <__ieee754_rem_pio2f+0xb6>
   12b52:	ed9f 7a26 	vldr	s14, [pc, #152]	; 12bec <__ieee754_rem_pio2f+0x28c>
   12b56:	ed9f 5a26 	vldr	s10, [pc, #152]	; 12bf0 <__ieee754_rem_pio2f+0x290>
   12b5a:	eeb0 0a65 	vmov.f32	s0, s11
   12b5e:	eea6 0a07 	vfma.f32	s0, s12, s14
   12b62:	ee75 7ac0 	vsub.f32	s15, s11, s0
   12b66:	eee6 7a07 	vfma.f32	s15, s12, s14
   12b6a:	eed6 7a85 	vfnms.f32	s15, s13, s10
   12b6e:	e7ae      	b.n	12ace <__ieee754_rem_pio2f+0x16e>
   12b70:	4294      	cmp	r4, r2
   12b72:	ee70 7a27 	vadd.f32	s15, s0, s15
   12b76:	d00e      	beq.n	12b96 <__ieee754_rem_pio2f+0x236>
   12b78:	ed9f 7a14 	vldr	s14, [pc, #80]	; 12bcc <__ieee754_rem_pio2f+0x26c>
   12b7c:	ee77 6a87 	vadd.f32	s13, s15, s14
   12b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b84:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12b88:	edc5 6a00 	vstr	s13, [r5]
   12b8c:	ee77 7a87 	vadd.f32	s15, s15, s14
   12b90:	edc5 7a01 	vstr	s15, [r5, #4]
   12b94:	e70c      	b.n	129b0 <__ieee754_rem_pio2f+0x50>
   12b96:	eddf 6a11 	vldr	s13, [pc, #68]	; 12bdc <__ieee754_rem_pio2f+0x27c>
   12b9a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12be0 <__ieee754_rem_pio2f+0x280>
   12b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ba6:	ee77 6a87 	vadd.f32	s13, s15, s14
   12baa:	ee77 7ae6 	vsub.f32	s15, s15, s13
   12bae:	edc5 6a00 	vstr	s13, [r5]
   12bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
   12bb6:	edc5 7a01 	vstr	s15, [r5, #4]
   12bba:	e6f9      	b.n	129b0 <__ieee754_rem_pio2f+0x50>
   12bbc:	3f490fd8 	.word	0x3f490fd8
   12bc0:	4016cbe3 	.word	0x4016cbe3
   12bc4:	3fc90f80 	.word	0x3fc90f80
   12bc8:	3fc90fd0 	.word	0x3fc90fd0
   12bcc:	37354443 	.word	0x37354443
   12bd0:	43490f80 	.word	0x43490f80
   12bd4:	43800000 	.word	0x43800000
   12bd8:	00025aa8 	.word	0x00025aa8
   12bdc:	37354400 	.word	0x37354400
   12be0:	2e85a308 	.word	0x2e85a308
   12be4:	3f22f984 	.word	0x3f22f984
   12be8:	00025a28 	.word	0x00025a28
   12bec:	2e85a300 	.word	0x2e85a300
   12bf0:	248d3132 	.word	0x248d3132

00012bf4 <__kernel_cosf>:
   12bf4:	ee10 3a10 	vmov	r3, s0
   12bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12bfc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   12c00:	da2c      	bge.n	12c5c <__kernel_cosf+0x68>
   12c02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   12c06:	ee17 3a90 	vmov	r3, s15
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d060      	beq.n	12cd0 <__kernel_cosf+0xdc>
   12c0e:	ee20 7a00 	vmul.f32	s14, s0, s0
   12c12:	eddf 4a31 	vldr	s9, [pc, #196]	; 12cd8 <__kernel_cosf+0xe4>
   12c16:	ed9f 5a31 	vldr	s10, [pc, #196]	; 12cdc <__kernel_cosf+0xe8>
   12c1a:	eddf 5a31 	vldr	s11, [pc, #196]	; 12ce0 <__kernel_cosf+0xec>
   12c1e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 12ce4 <__kernel_cosf+0xf0>
   12c22:	eddf 7a31 	vldr	s15, [pc, #196]	; 12ce8 <__kernel_cosf+0xf4>
   12c26:	eddf 6a31 	vldr	s13, [pc, #196]	; 12cec <__kernel_cosf+0xf8>
   12c2a:	eea7 5a24 	vfma.f32	s10, s14, s9
   12c2e:	eee7 5a05 	vfma.f32	s11, s14, s10
   12c32:	eea7 6a25 	vfma.f32	s12, s14, s11
   12c36:	eee7 7a06 	vfma.f32	s15, s14, s12
   12c3a:	eee7 6a27 	vfma.f32	s13, s14, s15
   12c3e:	ee67 6a26 	vmul.f32	s13, s14, s13
   12c42:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   12c46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   12c4a:	eee7 0a26 	vfma.f32	s1, s14, s13
   12c4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12c52:	eed7 0a27 	vfnms.f32	s1, s14, s15
   12c56:	ee30 0a60 	vsub.f32	s0, s0, s1
   12c5a:	4770      	bx	lr
   12c5c:	ee20 7a00 	vmul.f32	s14, s0, s0
   12c60:	eddf 4a1d 	vldr	s9, [pc, #116]	; 12cd8 <__kernel_cosf+0xe4>
   12c64:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 12cdc <__kernel_cosf+0xe8>
   12c68:	eddf 5a1d 	vldr	s11, [pc, #116]	; 12ce0 <__kernel_cosf+0xec>
   12c6c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 12ce4 <__kernel_cosf+0xf0>
   12c70:	eddf 7a1d 	vldr	s15, [pc, #116]	; 12ce8 <__kernel_cosf+0xf4>
   12c74:	eddf 6a1d 	vldr	s13, [pc, #116]	; 12cec <__kernel_cosf+0xf8>
   12c78:	4a1d      	ldr	r2, [pc, #116]	; (12cf0 <__kernel_cosf+0xfc>)
   12c7a:	eea7 5a24 	vfma.f32	s10, s14, s9
   12c7e:	4293      	cmp	r3, r2
   12c80:	eee5 5a07 	vfma.f32	s11, s10, s14
   12c84:	eea5 6a87 	vfma.f32	s12, s11, s14
   12c88:	eee6 7a07 	vfma.f32	s15, s12, s14
   12c8c:	eee7 6a87 	vfma.f32	s13, s15, s14
   12c90:	ee66 6a87 	vmul.f32	s13, s13, s14
   12c94:	ddd5      	ble.n	12c42 <__kernel_cosf+0x4e>
   12c96:	4a17      	ldr	r2, [pc, #92]	; (12cf4 <__kernel_cosf+0x100>)
   12c98:	4293      	cmp	r3, r2
   12c9a:	dc14      	bgt.n	12cc6 <__kernel_cosf+0xd2>
   12c9c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   12ca0:	ee07 3a90 	vmov	s15, r3
   12ca4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   12ca8:	ee36 6a67 	vsub.f32	s12, s12, s15
   12cac:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   12cb0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   12cb4:	eee7 0a26 	vfma.f32	s1, s14, s13
   12cb8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   12cbc:	ee77 0ae0 	vsub.f32	s1, s15, s1
   12cc0:	ee36 0a60 	vsub.f32	s0, s12, s1
   12cc4:	4770      	bx	lr
   12cc6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   12cca:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   12cce:	e7ed      	b.n	12cac <__kernel_cosf+0xb8>
   12cd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12cd4:	4770      	bx	lr
   12cd6:	bf00      	nop
   12cd8:	ad47d74e 	.word	0xad47d74e
   12cdc:	310f74f6 	.word	0x310f74f6
   12ce0:	b493f27c 	.word	0xb493f27c
   12ce4:	37d00d01 	.word	0x37d00d01
   12ce8:	bab60b61 	.word	0xbab60b61
   12cec:	3d2aaaab 	.word	0x3d2aaaab
   12cf0:	3e999999 	.word	0x3e999999
   12cf4:	3f480000 	.word	0x3f480000

00012cf8 <__kernel_rem_pio2f>:
   12cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cfc:	ed2d 8b04 	vpush	{d8-d9}
   12d00:	b0db      	sub	sp, #364	; 0x16c
   12d02:	4cd7      	ldr	r4, [pc, #860]	; (13060 <__kernel_rem_pio2f+0x368>)
   12d04:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   12d06:	9107      	str	r1, [sp, #28]
   12d08:	1d11      	adds	r1, r2, #4
   12d0a:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   12d0e:	9304      	str	r3, [sp, #16]
   12d10:	9209      	str	r2, [sp, #36]	; 0x24
   12d12:	4683      	mov	fp, r0
   12d14:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   12d18:	f2c0 829d 	blt.w	13256 <__kernel_rem_pio2f+0x55e>
   12d1c:	1ed3      	subs	r3, r2, #3
   12d1e:	bf44      	itt	mi
   12d20:	4613      	movmi	r3, r2
   12d22:	3304      	addmi	r3, #4
   12d24:	10db      	asrs	r3, r3, #3
   12d26:	9303      	str	r3, [sp, #12]
   12d28:	3301      	adds	r3, #1
   12d2a:	00db      	lsls	r3, r3, #3
   12d2c:	9308      	str	r3, [sp, #32]
   12d2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12d32:	1a9b      	subs	r3, r3, r2
   12d34:	9306      	str	r3, [sp, #24]
   12d36:	9b03      	ldr	r3, [sp, #12]
   12d38:	eb16 0109 	adds.w	r1, r6, r9
   12d3c:	eba3 0309 	sub.w	r3, r3, r9
   12d40:	d416      	bmi.n	12d70 <__kernel_rem_pio2f+0x78>
   12d42:	3101      	adds	r1, #1
   12d44:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 13064 <__kernel_rem_pio2f+0x36c>
   12d48:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   12d4a:	4419      	add	r1, r3
   12d4c:	aa1e      	add	r2, sp, #120	; 0x78
   12d4e:	2b00      	cmp	r3, #0
   12d50:	bfa4      	itt	ge
   12d52:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   12d56:	ee07 4a90 	vmovge	s15, r4
   12d5a:	f103 0301 	add.w	r3, r3, #1
   12d5e:	bfac      	ite	ge
   12d60:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   12d64:	eef0 7a47 	vmovlt.f32	s15, s14
   12d68:	428b      	cmp	r3, r1
   12d6a:	ece2 7a01 	vstmia	r2!, {s15}
   12d6e:	d1ee      	bne.n	12d4e <__kernel_rem_pio2f+0x56>
   12d70:	2e00      	cmp	r6, #0
   12d72:	f2c0 82e0 	blt.w	13336 <__kernel_rem_pio2f+0x63e>
   12d76:	9b04      	ldr	r3, [sp, #16]
   12d78:	a91e      	add	r1, sp, #120	; 0x78
   12d7a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   12d7e:	ad46      	add	r5, sp, #280	; 0x118
   12d80:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   12d84:	4648      	mov	r0, r9
   12d86:	18f7      	adds	r7, r6, r3
   12d88:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   12d8c:	f1b9 0f00 	cmp.w	r9, #0
   12d90:	eddf 7ab4 	vldr	s15, [pc, #720]	; 13064 <__kernel_rem_pio2f+0x36c>
   12d94:	db09      	blt.n	12daa <__kernel_rem_pio2f+0xb2>
   12d96:	4622      	mov	r2, r4
   12d98:	465b      	mov	r3, fp
   12d9a:	ecf3 6a01 	vldmia	r3!, {s13}
   12d9e:	ed32 7a01 	vldmdb	r2!, {s14}
   12da2:	428b      	cmp	r3, r1
   12da4:	eee6 7a87 	vfma.f32	s15, s13, s14
   12da8:	d1f7      	bne.n	12d9a <__kernel_rem_pio2f+0xa2>
   12daa:	3001      	adds	r0, #1
   12dac:	42b8      	cmp	r0, r7
   12dae:	ece5 7a01 	vstmia	r5!, {s15}
   12db2:	f104 0404 	add.w	r4, r4, #4
   12db6:	d1e9      	bne.n	12d8c <__kernel_rem_pio2f+0x94>
   12db8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   12dbc:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   12dc0:	3b08      	subs	r3, #8
   12dc2:	9305      	str	r3, [sp, #20]
   12dc4:	ed9f 9aa9 	vldr	s18, [pc, #676]	; 1306c <__kernel_rem_pio2f+0x374>
   12dc8:	eddf 8aa7 	vldr	s17, [pc, #668]	; 13068 <__kernel_rem_pio2f+0x370>
   12dcc:	9806      	ldr	r0, [sp, #24]
   12dce:	9600      	str	r6, [sp, #0]
   12dd0:	ab09      	add	r3, sp, #36	; 0x24
   12dd2:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   12dd6:	eb0b 040c 	add.w	r4, fp, ip
   12dda:	af46      	add	r7, sp, #280	; 0x118
   12ddc:	465b      	mov	r3, fp
   12dde:	aa5a      	add	r2, sp, #360	; 0x168
   12de0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   12de4:	2e00      	cmp	r6, #0
   12de6:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   12dea:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   12dee:	dd16      	ble.n	12e1e <__kernel_rem_pio2f+0x126>
   12df0:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   12df4:	4641      	mov	r1, r8
   12df6:	ee60 7a09 	vmul.f32	s15, s0, s18
   12dfa:	eeb0 7a40 	vmov.f32	s14, s0
   12dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   12e02:	ed72 6a01 	vldmdb	r2!, {s13}
   12e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12e0a:	42ba      	cmp	r2, r7
   12e0c:	eea7 7ae8 	vfms.f32	s14, s15, s17
   12e10:	ee37 0aa6 	vadd.f32	s0, s15, s13
   12e14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   12e18:	eca1 7a01 	vstmia	r1!, {s14}
   12e1c:	d1eb      	bne.n	12df6 <__kernel_rem_pio2f+0xfe>
   12e1e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12e22:	f000 fc39 	bl	13698 <scalbnf>
   12e26:	eeb0 8a40 	vmov.f32	s16, s0
   12e2a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   12e2e:	ee28 0a00 	vmul.f32	s0, s16, s0
   12e32:	f7ff f983 	bl	1213c <floorf>
   12e36:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   12e3a:	eea0 8a67 	vfms.f32	s16, s0, s15
   12e3e:	9801      	ldr	r0, [sp, #4]
   12e40:	9b02      	ldr	r3, [sp, #8]
   12e42:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   12e46:	2800      	cmp	r0, #0
   12e48:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   12e4c:	ee38 8a67 	vsub.f32	s16, s16, s15
   12e50:	dd78      	ble.n	12f44 <__kernel_rem_pio2f+0x24c>
   12e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   12e56:	f1c0 0208 	rsb	r2, r0, #8
   12e5a:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   12e5e:	fa45 f102 	asr.w	r1, r5, r2
   12e62:	fa01 f202 	lsl.w	r2, r1, r2
   12e66:	1aaa      	subs	r2, r5, r2
   12e68:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   12e6c:	f1c0 0507 	rsb	r5, r0, #7
   12e70:	ee19 ca90 	vmov	ip, s19
   12e74:	fa42 f505 	asr.w	r5, r2, r5
   12e78:	448c      	add	ip, r1
   12e7a:	2d00      	cmp	r5, #0
   12e7c:	ee09 ca90 	vmov	s19, ip
   12e80:	dc68      	bgt.n	12f54 <__kernel_rem_pio2f+0x25c>
   12e82:	eeb5 8a40 	vcmp.f32	s16, #0.0
   12e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e8a:	f040 80b6 	bne.w	12ffa <__kernel_rem_pio2f+0x302>
   12e8e:	9a00      	ldr	r2, [sp, #0]
   12e90:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
   12e94:	4572      	cmp	r2, lr
   12e96:	dc10      	bgt.n	12eba <__kernel_rem_pio2f+0x1c2>
   12e98:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   12e9c:	3a01      	subs	r2, #1
   12e9e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   12ea2:	2100      	movs	r1, #0
   12ea4:	469c      	mov	ip, r3
   12ea6:	f852 3904 	ldr.w	r3, [r2], #-4
   12eaa:	4552      	cmp	r2, sl
   12eac:	ea41 0103 	orr.w	r1, r1, r3
   12eb0:	d1f9      	bne.n	12ea6 <__kernel_rem_pio2f+0x1ae>
   12eb2:	4663      	mov	r3, ip
   12eb4:	2900      	cmp	r1, #0
   12eb6:	f040 80f2 	bne.w	1309e <__kernel_rem_pio2f+0x3a6>
   12eba:	9a00      	ldr	r2, [sp, #0]
   12ebc:	3a01      	subs	r2, #1
   12ebe:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   12ec2:	2a00      	cmp	r2, #0
   12ec4:	f040 80e6 	bne.w	13094 <__kernel_rem_pio2f+0x39c>
   12ec8:	9a05      	ldr	r2, [sp, #20]
   12eca:	f04f 0c01 	mov.w	ip, #1
   12ece:	f852 1904 	ldr.w	r1, [r2], #-4
   12ed2:	f10c 0c01 	add.w	ip, ip, #1
   12ed6:	2900      	cmp	r1, #0
   12ed8:	d0f9      	beq.n	12ece <__kernel_rem_pio2f+0x1d6>
   12eda:	f106 0b01 	add.w	fp, r6, #1
   12ede:	44b4      	add	ip, r6
   12ee0:	46de      	mov	lr, fp
   12ee2:	9904      	ldr	r1, [sp, #16]
   12ee4:	9a03      	ldr	r2, [sp, #12]
   12ee6:	198d      	adds	r5, r1, r6
   12ee8:	445a      	add	r2, fp
   12eea:	a91e      	add	r1, sp, #120	; 0x78
   12eec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12ef0:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   12ef4:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   12ef6:	3a01      	subs	r2, #1
   12ef8:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   12efc:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   12f00:	edd6 7a01 	vldr	s15, [r6, #4]
   12f04:	ed9f 7a57 	vldr	s14, [pc, #348]	; 13064 <__kernel_rem_pio2f+0x36c>
   12f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12f0c:	f1b9 0f00 	cmp.w	r9, #0
   12f10:	f106 0604 	add.w	r6, r6, #4
   12f14:	4629      	mov	r1, r5
   12f16:	edc5 7a00 	vstr	s15, [r5]
   12f1a:	f105 0504 	add.w	r5, r5, #4
   12f1e:	db09      	blt.n	12f34 <__kernel_rem_pio2f+0x23c>
   12f20:	461a      	mov	r2, r3
   12f22:	e001      	b.n	12f28 <__kernel_rem_pio2f+0x230>
   12f24:	ed71 7a01 	vldmdb	r1!, {s15}
   12f28:	ecf2 6a01 	vldmia	r2!, {s13}
   12f2c:	42a2      	cmp	r2, r4
   12f2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   12f32:	d1f7      	bne.n	12f24 <__kernel_rem_pio2f+0x22c>
   12f34:	f10e 0e01 	add.w	lr, lr, #1
   12f38:	45e6      	cmp	lr, ip
   12f3a:	ecab 7a01 	vstmia	fp!, {s14}
   12f3e:	dddf      	ble.n	12f00 <__kernel_rem_pio2f+0x208>
   12f40:	4666      	mov	r6, ip
   12f42:	e74c      	b.n	12dde <__kernel_rem_pio2f+0xe6>
   12f44:	f040 809c 	bne.w	13080 <__kernel_rem_pio2f+0x388>
   12f48:	1e72      	subs	r2, r6, #1
   12f4a:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   12f4e:	122d      	asrs	r5, r5, #8
   12f50:	2d00      	cmp	r5, #0
   12f52:	dd96      	ble.n	12e82 <__kernel_rem_pio2f+0x18a>
   12f54:	ee19 2a90 	vmov	r2, s19
   12f58:	2e00      	cmp	r6, #0
   12f5a:	f102 0201 	add.w	r2, r2, #1
   12f5e:	ee09 2a90 	vmov	s19, r2
   12f62:	f340 818e 	ble.w	13282 <__kernel_rem_pio2f+0x58a>
   12f66:	f8d8 1000 	ldr.w	r1, [r8]
   12f6a:	2900      	cmp	r1, #0
   12f6c:	d174      	bne.n	13058 <__kernel_rem_pio2f+0x360>
   12f6e:	2e01      	cmp	r6, #1
   12f70:	d01c      	beq.n	12fac <__kernel_rem_pio2f+0x2b4>
   12f72:	4642      	mov	r2, r8
   12f74:	f04f 0c01 	mov.w	ip, #1
   12f78:	f852 1f04 	ldr.w	r1, [r2, #4]!
   12f7c:	2900      	cmp	r1, #0
   12f7e:	d079      	beq.n	13074 <__kernel_rem_pio2f+0x37c>
   12f80:	f10c 0201 	add.w	r2, ip, #1
   12f84:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   12f88:	4296      	cmp	r6, r2
   12f8a:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   12f8e:	dd0c      	ble.n	12faa <__kernel_rem_pio2f+0x2b2>
   12f90:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   12f94:	44c3      	add	fp, r8
   12f96:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   12f9a:	e000      	b.n	12f9e <__kernel_rem_pio2f+0x2a6>
   12f9c:	6811      	ldr	r1, [r2, #0]
   12f9e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   12fa2:	f842 1b04 	str.w	r1, [r2], #4
   12fa6:	455a      	cmp	r2, fp
   12fa8:	d1f8      	bne.n	12f9c <__kernel_rem_pio2f+0x2a4>
   12faa:	2101      	movs	r1, #1
   12fac:	2800      	cmp	r0, #0
   12fae:	dd0c      	ble.n	12fca <__kernel_rem_pio2f+0x2d2>
   12fb0:	2801      	cmp	r0, #1
   12fb2:	f000 8147 	beq.w	13244 <__kernel_rem_pio2f+0x54c>
   12fb6:	2802      	cmp	r0, #2
   12fb8:	d107      	bne.n	12fca <__kernel_rem_pio2f+0x2d2>
   12fba:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   12fbe:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   12fc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   12fc6:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   12fca:	2d02      	cmp	r5, #2
   12fcc:	f47f af59 	bne.w	12e82 <__kernel_rem_pio2f+0x18a>
   12fd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12fd4:	ee30 8a48 	vsub.f32	s16, s0, s16
   12fd8:	2900      	cmp	r1, #0
   12fda:	f43f af52 	beq.w	12e82 <__kernel_rem_pio2f+0x18a>
   12fde:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12fe2:	f000 fb59 	bl	13698 <scalbnf>
   12fe6:	ee38 8a40 	vsub.f32	s16, s16, s0
   12fea:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   12fee:	eeb5 8a40 	vcmp.f32	s16, #0.0
   12ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ff6:	f43f af4a 	beq.w	12e8e <__kernel_rem_pio2f+0x196>
   12ffa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   12ffe:	eeb0 0a48 	vmov.f32	s0, s16
   13002:	1a98      	subs	r0, r3, r2
   13004:	9602      	str	r6, [sp, #8]
   13006:	9501      	str	r5, [sp, #4]
   13008:	9e00      	ldr	r6, [sp, #0]
   1300a:	f000 fb45 	bl	13698 <scalbnf>
   1300e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 13068 <__kernel_rem_pio2f+0x370>
   13012:	eeb4 0ac7 	vcmpe.f32	s0, s14
   13016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1301a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   1301e:	f2c0 8157 	blt.w	132d0 <__kernel_rem_pio2f+0x5d8>
   13022:	eddf 7a12 	vldr	s15, [pc, #72]	; 1306c <__kernel_rem_pio2f+0x374>
   13026:	9906      	ldr	r1, [sp, #24]
   13028:	ee60 7a27 	vmul.f32	s15, s0, s15
   1302c:	3108      	adds	r1, #8
   1302e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13032:	9106      	str	r1, [sp, #24]
   13034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13038:	1c5d      	adds	r5, r3, #1
   1303a:	eea7 0ac7 	vfms.f32	s0, s15, s14
   1303e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13042:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   13046:	ee10 1a10 	vmov	r1, s0
   1304a:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   1304e:	ee17 3a90 	vmov	r3, s15
   13052:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   13056:	e039      	b.n	130cc <__kernel_rem_pio2f+0x3d4>
   13058:	2201      	movs	r2, #1
   1305a:	f04f 0c00 	mov.w	ip, #0
   1305e:	e791      	b.n	12f84 <__kernel_rem_pio2f+0x28c>
   13060:	00025dec 	.word	0x00025dec
   13064:	00000000 	.word	0x00000000
   13068:	43800000 	.word	0x43800000
   1306c:	3b800000 	.word	0x3b800000
   13070:	3fc90000 	.word	0x3fc90000
   13074:	f10c 0c01 	add.w	ip, ip, #1
   13078:	45b4      	cmp	ip, r6
   1307a:	f47f af7d 	bne.w	12f78 <__kernel_rem_pio2f+0x280>
   1307e:	e795      	b.n	12fac <__kernel_rem_pio2f+0x2b4>
   13080:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   13084:	eeb4 8ae7 	vcmpe.f32	s16, s15
   13088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1308c:	f280 80e8 	bge.w	13260 <__kernel_rem_pio2f+0x568>
   13090:	2500      	movs	r5, #0
   13092:	e6f6      	b.n	12e82 <__kernel_rem_pio2f+0x18a>
   13094:	f106 0b01 	add.w	fp, r6, #1
   13098:	46de      	mov	lr, fp
   1309a:	46dc      	mov	ip, fp
   1309c:	e721      	b.n	12ee2 <__kernel_rem_pio2f+0x1ea>
   1309e:	9806      	ldr	r0, [sp, #24]
   130a0:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   130a4:	3808      	subs	r0, #8
   130a6:	4633      	mov	r3, r6
   130a8:	462a      	mov	r2, r5
   130aa:	9e00      	ldr	r6, [sp, #0]
   130ac:	9006      	str	r0, [sp, #24]
   130ae:	4675      	mov	r5, lr
   130b0:	b961      	cbnz	r1, 130cc <__kernel_rem_pio2f+0x3d4>
   130b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   130b6:	3b02      	subs	r3, #2
   130b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   130bc:	4601      	mov	r1, r0
   130be:	f853 0904 	ldr.w	r0, [r3], #-4
   130c2:	3d01      	subs	r5, #1
   130c4:	3908      	subs	r1, #8
   130c6:	2800      	cmp	r0, #0
   130c8:	d0f9      	beq.n	130be <__kernel_rem_pio2f+0x3c6>
   130ca:	9106      	str	r1, [sp, #24]
   130cc:	9806      	ldr	r0, [sp, #24]
   130ce:	9200      	str	r2, [sp, #0]
   130d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   130d4:	f000 fae0 	bl	13698 <scalbnf>
   130d8:	2d00      	cmp	r5, #0
   130da:	9a00      	ldr	r2, [sp, #0]
   130dc:	f2c0 811e 	blt.w	1331c <__kernel_rem_pio2f+0x624>
   130e0:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   130e4:	ab46      	add	r3, sp, #280	; 0x118
   130e6:	eb03 070e 	add.w	r7, r3, lr
   130ea:	f10e 0c04 	add.w	ip, lr, #4
   130ee:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 1306c <__kernel_rem_pio2f+0x374>
   130f2:	eb08 030c 	add.w	r3, r8, ip
   130f6:	1d39      	adds	r1, r7, #4
   130f8:	ed73 7a01 	vldmdb	r3!, {s15}
   130fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13100:	4543      	cmp	r3, r8
   13102:	ee67 7a80 	vmul.f32	s15, s15, s0
   13106:	ee20 0a07 	vmul.f32	s0, s0, s14
   1310a:	ed61 7a01 	vstmdb	r1!, {s15}
   1310e:	d1f3      	bne.n	130f8 <__kernel_rem_pio2f+0x400>
   13110:	2e00      	cmp	r6, #0
   13112:	ed1f 6a29 	vldr	s12, [pc, #-164]	; 13070 <__kernel_rem_pio2f+0x378>
   13116:	f04f 0400 	mov.w	r4, #0
   1311a:	db20      	blt.n	1315e <__kernel_rem_pio2f+0x466>
   1311c:	488f      	ldr	r0, [pc, #572]	; (1335c <__kernel_rem_pio2f+0x664>)
   1311e:	eddf 7a90 	vldr	s15, [pc, #576]	; 13360 <__kernel_rem_pio2f+0x668>
   13122:	4639      	mov	r1, r7
   13124:	eeb0 7a46 	vmov.f32	s14, s12
   13128:	2300      	movs	r3, #0
   1312a:	e003      	b.n	13134 <__kernel_rem_pio2f+0x43c>
   1312c:	429c      	cmp	r4, r3
   1312e:	db08      	blt.n	13142 <__kernel_rem_pio2f+0x44a>
   13130:	ecb0 7a01 	vldmia	r0!, {s14}
   13134:	ecf1 6a01 	vldmia	r1!, {s13}
   13138:	3301      	adds	r3, #1
   1313a:	429e      	cmp	r6, r3
   1313c:	eee6 7a87 	vfma.f32	s15, s13, s14
   13140:	daf4      	bge.n	1312c <__kernel_rem_pio2f+0x434>
   13142:	ab5a      	add	r3, sp, #360	; 0x168
   13144:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13148:	42a5      	cmp	r5, r4
   1314a:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   1314e:	f1a7 0704 	sub.w	r7, r7, #4
   13152:	f104 0301 	add.w	r3, r4, #1
   13156:	d005      	beq.n	13164 <__kernel_rem_pio2f+0x46c>
   13158:	2e00      	cmp	r6, #0
   1315a:	461c      	mov	r4, r3
   1315c:	dade      	bge.n	1311c <__kernel_rem_pio2f+0x424>
   1315e:	eddf 7a80 	vldr	s15, [pc, #512]	; 13360 <__kernel_rem_pio2f+0x668>
   13162:	e7ee      	b.n	13142 <__kernel_rem_pio2f+0x44a>
   13164:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   13166:	2902      	cmp	r1, #2
   13168:	dc1c      	bgt.n	131a4 <__kernel_rem_pio2f+0x4ac>
   1316a:	2900      	cmp	r1, #0
   1316c:	f300 808b 	bgt.w	13286 <__kernel_rem_pio2f+0x58e>
   13170:	d10f      	bne.n	13192 <__kernel_rem_pio2f+0x49a>
   13172:	ab32      	add	r3, sp, #200	; 0xc8
   13174:	eddf 7a7a 	vldr	s15, [pc, #488]	; 13360 <__kernel_rem_pio2f+0x668>
   13178:	449c      	add	ip, r3
   1317a:	ed3c 7a01 	vldmdb	ip!, {s14}
   1317e:	4563      	cmp	r3, ip
   13180:	ee77 7a87 	vadd.f32	s15, s15, s14
   13184:	d1f9      	bne.n	1317a <__kernel_rem_pio2f+0x482>
   13186:	b10a      	cbz	r2, 1318c <__kernel_rem_pio2f+0x494>
   13188:	eef1 7a67 	vneg.f32	s15, s15
   1318c:	9b07      	ldr	r3, [sp, #28]
   1318e:	edc3 7a00 	vstr	s15, [r3]
   13192:	ee19 3a90 	vmov	r3, s19
   13196:	f003 0007 	and.w	r0, r3, #7
   1319a:	b05b      	add	sp, #364	; 0x16c
   1319c:	ecbd 8b04 	vpop	{d8-d9}
   131a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   131a6:	2b03      	cmp	r3, #3
   131a8:	d1f3      	bne.n	13192 <__kernel_rem_pio2f+0x49a>
   131aa:	2d00      	cmp	r5, #0
   131ac:	f000 80cb 	beq.w	13346 <__kernel_rem_pio2f+0x64e>
   131b0:	ab5a      	add	r3, sp, #360	; 0x168
   131b2:	4473      	add	r3, lr
   131b4:	a932      	add	r1, sp, #200	; 0xc8
   131b6:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   131ba:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   131be:	ed73 7a01 	vldmdb	r3!, {s15}
   131c2:	eef0 6a47 	vmov.f32	s13, s14
   131c6:	ee37 7a27 	vadd.f32	s14, s14, s15
   131ca:	4299      	cmp	r1, r3
   131cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   131d0:	ed83 7a00 	vstr	s14, [r3]
   131d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   131d8:	edc3 7a01 	vstr	s15, [r3, #4]
   131dc:	d1ef      	bne.n	131be <__kernel_rem_pio2f+0x4c6>
   131de:	2d01      	cmp	r5, #1
   131e0:	f340 80b1 	ble.w	13346 <__kernel_rem_pio2f+0x64e>
   131e4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   131e8:	ab5a      	add	r3, sp, #360	; 0x168
   131ea:	3d01      	subs	r5, #1
   131ec:	449e      	add	lr, r3
   131ee:	00ad      	lsls	r5, r5, #2
   131f0:	1d2b      	adds	r3, r5, #4
   131f2:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   131f6:	440b      	add	r3, r1
   131f8:	a833      	add	r0, sp, #204	; 0xcc
   131fa:	ed73 7a01 	vldmdb	r3!, {s15}
   131fe:	eef0 6a47 	vmov.f32	s13, s14
   13202:	ee37 7a27 	vadd.f32	s14, s14, s15
   13206:	4298      	cmp	r0, r3
   13208:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1320c:	ed83 7a00 	vstr	s14, [r3]
   13210:	ee77 7aa6 	vadd.f32	s15, s15, s13
   13214:	edc3 7a01 	vstr	s15, [r3, #4]
   13218:	d1ef      	bne.n	131fa <__kernel_rem_pio2f+0x502>
   1321a:	3508      	adds	r5, #8
   1321c:	eddf 7a50 	vldr	s15, [pc, #320]	; 13360 <__kernel_rem_pio2f+0x668>
   13220:	194b      	adds	r3, r1, r5
   13222:	3108      	adds	r1, #8
   13224:	ed33 7a01 	vldmdb	r3!, {s14}
   13228:	4299      	cmp	r1, r3
   1322a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1322e:	d1f9      	bne.n	13224 <__kernel_rem_pio2f+0x52c>
   13230:	2a00      	cmp	r2, #0
   13232:	d155      	bne.n	132e0 <__kernel_rem_pio2f+0x5e8>
   13234:	9907      	ldr	r1, [sp, #28]
   13236:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   13238:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   1323a:	edc1 7a02 	vstr	s15, [r1, #8]
   1323e:	600a      	str	r2, [r1, #0]
   13240:	604b      	str	r3, [r1, #4]
   13242:	e7a6      	b.n	13192 <__kernel_rem_pio2f+0x49a>
   13244:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   13248:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   1324c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13250:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   13254:	e6b9      	b.n	12fca <__kernel_rem_pio2f+0x2d2>
   13256:	2308      	movs	r3, #8
   13258:	9308      	str	r3, [sp, #32]
   1325a:	2300      	movs	r3, #0
   1325c:	9303      	str	r3, [sp, #12]
   1325e:	e566      	b.n	12d2e <__kernel_rem_pio2f+0x36>
   13260:	ee19 2a90 	vmov	r2, s19
   13264:	2e00      	cmp	r6, #0
   13266:	f102 0201 	add.w	r2, r2, #1
   1326a:	ee09 2a90 	vmov	s19, r2
   1326e:	bfc8      	it	gt
   13270:	2502      	movgt	r5, #2
   13272:	f73f ae78 	bgt.w	12f66 <__kernel_rem_pio2f+0x26e>
   13276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1327a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   1327e:	2502      	movs	r5, #2
   13280:	e5ff      	b.n	12e82 <__kernel_rem_pio2f+0x18a>
   13282:	2100      	movs	r1, #0
   13284:	e692      	b.n	12fac <__kernel_rem_pio2f+0x2b4>
   13286:	a932      	add	r1, sp, #200	; 0xc8
   13288:	eddf 7a35 	vldr	s15, [pc, #212]	; 13360 <__kernel_rem_pio2f+0x668>
   1328c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   13290:	ed33 7a01 	vldmdb	r3!, {s14}
   13294:	4299      	cmp	r1, r3
   13296:	ee77 7a87 	vadd.f32	s15, s15, s14
   1329a:	d1f9      	bne.n	13290 <__kernel_rem_pio2f+0x598>
   1329c:	bb92      	cbnz	r2, 13304 <__kernel_rem_pio2f+0x60c>
   1329e:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   132a2:	9b07      	ldr	r3, [sp, #28]
   132a4:	2d00      	cmp	r5, #0
   132a6:	edc3 7a00 	vstr	s15, [r3]
   132aa:	ee77 7a67 	vsub.f32	s15, s14, s15
   132ae:	dd0b      	ble.n	132c8 <__kernel_rem_pio2f+0x5d0>
   132b0:	a933      	add	r1, sp, #204	; 0xcc
   132b2:	2301      	movs	r3, #1
   132b4:	ecb1 7a01 	vldmia	r1!, {s14}
   132b8:	3301      	adds	r3, #1
   132ba:	429d      	cmp	r5, r3
   132bc:	ee77 7a87 	vadd.f32	s15, s15, s14
   132c0:	daf8      	bge.n	132b4 <__kernel_rem_pio2f+0x5bc>
   132c2:	b10a      	cbz	r2, 132c8 <__kernel_rem_pio2f+0x5d0>
   132c4:	eef1 7a67 	vneg.f32	s15, s15
   132c8:	9b07      	ldr	r3, [sp, #28]
   132ca:	edc3 7a01 	vstr	s15, [r3, #4]
   132ce:	e760      	b.n	13192 <__kernel_rem_pio2f+0x49a>
   132d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   132d4:	461d      	mov	r5, r3
   132d6:	ee10 1a10 	vmov	r1, s0
   132da:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   132de:	e6f5      	b.n	130cc <__kernel_rem_pio2f+0x3d4>
   132e0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   132e4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   132e8:	9b07      	ldr	r3, [sp, #28]
   132ea:	eef1 7a67 	vneg.f32	s15, s15
   132ee:	eef1 6a66 	vneg.f32	s13, s13
   132f2:	eeb1 7a47 	vneg.f32	s14, s14
   132f6:	edc3 7a02 	vstr	s15, [r3, #8]
   132fa:	edc3 6a00 	vstr	s13, [r3]
   132fe:	ed83 7a01 	vstr	s14, [r3, #4]
   13302:	e746      	b.n	13192 <__kernel_rem_pio2f+0x49a>
   13304:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   13308:	9b07      	ldr	r3, [sp, #28]
   1330a:	eeb1 7a67 	vneg.f32	s14, s15
   1330e:	2d00      	cmp	r5, #0
   13310:	ee76 7ae7 	vsub.f32	s15, s13, s15
   13314:	ed83 7a00 	vstr	s14, [r3]
   13318:	dcca      	bgt.n	132b0 <__kernel_rem_pio2f+0x5b8>
   1331a:	e7d3      	b.n	132c4 <__kernel_rem_pio2f+0x5cc>
   1331c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   1331e:	2b02      	cmp	r3, #2
   13320:	dc0d      	bgt.n	1333e <__kernel_rem_pio2f+0x646>
   13322:	2b00      	cmp	r3, #0
   13324:	dc14      	bgt.n	13350 <__kernel_rem_pio2f+0x658>
   13326:	f47f af34 	bne.w	13192 <__kernel_rem_pio2f+0x49a>
   1332a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 13360 <__kernel_rem_pio2f+0x668>
   1332e:	2a00      	cmp	r2, #0
   13330:	f43f af2c 	beq.w	1318c <__kernel_rem_pio2f+0x494>
   13334:	e728      	b.n	13188 <__kernel_rem_pio2f+0x490>
   13336:	9b04      	ldr	r3, [sp, #16]
   13338:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1333c:	e53c      	b.n	12db8 <__kernel_rem_pio2f+0xc0>
   1333e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   13340:	2b03      	cmp	r3, #3
   13342:	f47f af26 	bne.w	13192 <__kernel_rem_pio2f+0x49a>
   13346:	eddf 7a06 	vldr	s15, [pc, #24]	; 13360 <__kernel_rem_pio2f+0x668>
   1334a:	2a00      	cmp	r2, #0
   1334c:	d1c8      	bne.n	132e0 <__kernel_rem_pio2f+0x5e8>
   1334e:	e771      	b.n	13234 <__kernel_rem_pio2f+0x53c>
   13350:	eddf 7a03 	vldr	s15, [pc, #12]	; 13360 <__kernel_rem_pio2f+0x668>
   13354:	2a00      	cmp	r2, #0
   13356:	d0a2      	beq.n	1329e <__kernel_rem_pio2f+0x5a6>
   13358:	e7d4      	b.n	13304 <__kernel_rem_pio2f+0x60c>
   1335a:	bf00      	nop
   1335c:	00025dc4 	.word	0x00025dc4
   13360:	00000000 	.word	0x00000000

00013364 <__kernel_sinf>:
   13364:	ee10 3a10 	vmov	r3, s0
   13368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1336c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   13370:	da04      	bge.n	1337c <__kernel_sinf+0x18>
   13372:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   13376:	ee17 3a90 	vmov	r3, s15
   1337a:	b35b      	cbz	r3, 133d4 <__kernel_sinf+0x70>
   1337c:	ee60 7a00 	vmul.f32	s15, s0, s0
   13380:	ed9f 5a15 	vldr	s10, [pc, #84]	; 133d8 <__kernel_sinf+0x74>
   13384:	eddf 5a15 	vldr	s11, [pc, #84]	; 133dc <__kernel_sinf+0x78>
   13388:	ed9f 6a15 	vldr	s12, [pc, #84]	; 133e0 <__kernel_sinf+0x7c>
   1338c:	eddf 6a15 	vldr	s13, [pc, #84]	; 133e4 <__kernel_sinf+0x80>
   13390:	ed9f 7a15 	vldr	s14, [pc, #84]	; 133e8 <__kernel_sinf+0x84>
   13394:	eee7 5a85 	vfma.f32	s11, s15, s10
   13398:	ee20 5a27 	vmul.f32	s10, s0, s15
   1339c:	eea5 6aa7 	vfma.f32	s12, s11, s15
   133a0:	eee6 6a27 	vfma.f32	s13, s12, s15
   133a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
   133a8:	b930      	cbnz	r0, 133b8 <__kernel_sinf+0x54>
   133aa:	eddf 6a10 	vldr	s13, [pc, #64]	; 133ec <__kernel_sinf+0x88>
   133ae:	eee7 6a87 	vfma.f32	s13, s15, s14
   133b2:	eea6 0a85 	vfma.f32	s0, s13, s10
   133b6:	4770      	bx	lr
   133b8:	ee27 7a45 	vnmul.f32	s14, s14, s10
   133bc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   133c0:	eea0 7aa6 	vfma.f32	s14, s1, s13
   133c4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 133f0 <__kernel_sinf+0x8c>
   133c8:	eed7 0a27 	vfnms.f32	s1, s14, s15
   133cc:	eee5 0a26 	vfma.f32	s1, s10, s13
   133d0:	ee30 0a60 	vsub.f32	s0, s0, s1
   133d4:	4770      	bx	lr
   133d6:	bf00      	nop
   133d8:	2f2ec9d3 	.word	0x2f2ec9d3
   133dc:	b2d72f34 	.word	0xb2d72f34
   133e0:	3638ef1b 	.word	0x3638ef1b
   133e4:	b9500d01 	.word	0xb9500d01
   133e8:	3c088889 	.word	0x3c088889
   133ec:	be2aaaab 	.word	0xbe2aaaab
   133f0:	3e2aaaab 	.word	0x3e2aaaab

000133f4 <matherr>:
   133f4:	2000      	movs	r0, #0
   133f6:	4770      	bx	lr

000133f8 <expm1f>:
   133f8:	ee10 2a10 	vmov	r2, s0
   133fc:	498c      	ldr	r1, [pc, #560]	; (13630 <expm1f+0x238>)
   133fe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   13402:	428b      	cmp	r3, r1
   13404:	d924      	bls.n	13450 <expm1f+0x58>
   13406:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1340a:	d878      	bhi.n	134fe <expm1f+0x106>
   1340c:	f000 80ca 	beq.w	135a4 <expm1f+0x1ac>
   13410:	2a00      	cmp	r2, #0
   13412:	f2c0 808b 	blt.w	1352c <expm1f+0x134>
   13416:	4a87      	ldr	r2, [pc, #540]	; (13634 <expm1f+0x23c>)
   13418:	4293      	cmp	r3, r2
   1341a:	f200 80e9 	bhi.w	135f0 <expm1f+0x1f8>
   1341e:	eddf 6a86 	vldr	s13, [pc, #536]	; 13638 <expm1f+0x240>
   13422:	ee60 6a26 	vmul.f32	s13, s0, s13
   13426:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1342a:	ee37 7a26 	vadd.f32	s14, s14, s13
   1342e:	ed9f 6a83 	vldr	s12, [pc, #524]	; 1363c <expm1f+0x244>
   13432:	eddf 6a83 	vldr	s13, [pc, #524]	; 13640 <expm1f+0x248>
   13436:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   1343a:	eeb0 7a40 	vmov.f32	s14, s0
   1343e:	ee17 3a90 	vmov	r3, s15
   13442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13446:	eea7 7ac6 	vfms.f32	s14, s15, s12
   1344a:	ee67 6aa6 	vmul.f32	s13, s15, s13
   1344e:	e066      	b.n	1351e <expm1f+0x126>
   13450:	497c      	ldr	r1, [pc, #496]	; (13644 <expm1f+0x24c>)
   13452:	428b      	cmp	r3, r1
   13454:	d856      	bhi.n	13504 <expm1f+0x10c>
   13456:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
   1345a:	f0c0 808c 	bcc.w	13576 <expm1f+0x17e>
   1345e:	2300      	movs	r3, #0
   13460:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
   13464:	ee20 4a03 	vmul.f32	s8, s0, s6
   13468:	ed9f 6a77 	vldr	s12, [pc, #476]	; 13648 <expm1f+0x250>
   1346c:	eddf 5a77 	vldr	s11, [pc, #476]	; 1364c <expm1f+0x254>
   13470:	eddf 4a77 	vldr	s9, [pc, #476]	; 13650 <expm1f+0x258>
   13474:	ed9f 5a77 	vldr	s10, [pc, #476]	; 13654 <expm1f+0x25c>
   13478:	eddf 6a77 	vldr	s13, [pc, #476]	; 13658 <expm1f+0x260>
   1347c:	ee20 7a04 	vmul.f32	s14, s0, s8
   13480:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   13484:	eee7 5a06 	vfma.f32	s11, s14, s12
   13488:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
   1348c:	eee5 4a87 	vfma.f32	s9, s11, s14
   13490:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
   13494:	eea4 5a87 	vfma.f32	s10, s9, s14
   13498:	eee5 6a07 	vfma.f32	s13, s10, s14
   1349c:	eeb0 5a63 	vmov.f32	s10, s7
   134a0:	eea6 5a87 	vfma.f32	s10, s13, s14
   134a4:	eea4 6a45 	vfms.f32	s12, s8, s10
   134a8:	eee0 5a46 	vfms.f32	s11, s0, s12
   134ac:	ee35 6a46 	vsub.f32	s12, s10, s12
   134b0:	eec6 6a25 	vdiv.f32	s13, s12, s11
   134b4:	ee66 6a87 	vmul.f32	s13, s13, s14
   134b8:	2b00      	cmp	r3, #0
   134ba:	d057      	beq.n	1356c <expm1f+0x174>
   134bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
   134c0:	1c5a      	adds	r2, r3, #1
   134c2:	eed6 7a80 	vfnms.f32	s15, s13, s0
   134c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   134ca:	d05d      	beq.n	13588 <expm1f+0x190>
   134cc:	2b01      	cmp	r3, #1
   134ce:	d03d      	beq.n	1354c <expm1f+0x154>
   134d0:	1c5a      	adds	r2, r3, #1
   134d2:	2a39      	cmp	r2, #57	; 0x39
   134d4:	d86d      	bhi.n	135b2 <expm1f+0x1ba>
   134d6:	2b16      	cmp	r3, #22
   134d8:	dc78      	bgt.n	135cc <expm1f+0x1d4>
   134da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   134de:	411a      	asrs	r2, r3
   134e0:	f1c2 527e 	rsb	r2, r2, #1065353216	; 0x3f800000
   134e4:	ee77 7a40 	vsub.f32	s15, s14, s0
   134e8:	ee00 2a10 	vmov	s0, r2
   134ec:	ee30 0a67 	vsub.f32	s0, s0, s15
   134f0:	ee10 2a10 	vmov	r2, s0
   134f4:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   134f8:	ee00 3a10 	vmov	s0, r3
   134fc:	4770      	bx	lr
   134fe:	ee30 0a00 	vadd.f32	s0, s0, s0
   13502:	4770      	bx	lr
   13504:	4955      	ldr	r1, [pc, #340]	; (1365c <expm1f+0x264>)
   13506:	428b      	cmp	r3, r1
   13508:	f200 8083 	bhi.w	13612 <expm1f+0x21a>
   1350c:	2a00      	cmp	r2, #0
   1350e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 1363c <expm1f+0x244>
   13512:	db40      	blt.n	13596 <expm1f+0x19e>
   13514:	eddf 6a4a 	vldr	s13, [pc, #296]	; 13640 <expm1f+0x248>
   13518:	ee30 7a47 	vsub.f32	s14, s0, s14
   1351c:	2301      	movs	r3, #1
   1351e:	ee37 0a66 	vsub.f32	s0, s14, s13
   13522:	ee77 7a40 	vsub.f32	s15, s14, s0
   13526:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1352a:	e799      	b.n	13460 <expm1f+0x68>
   1352c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 13660 <expm1f+0x268>
   13530:	ee70 7a27 	vadd.f32	s15, s0, s15
   13534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1353c:	d466      	bmi.n	1360c <expm1f+0x214>
   1353e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 13638 <expm1f+0x240>
   13542:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
   13546:	ee60 6a26 	vmul.f32	s13, s0, s13
   1354a:	e76e      	b.n	1342a <expm1f+0x32>
   1354c:	eefd 7a00 	vmov.f32	s15, #208	; 0xbe800000 -0.250
   13550:	eeb4 0ae7 	vcmpe.f32	s0, s15
   13554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13558:	d54f      	bpl.n	135fa <expm1f+0x202>
   1355a:	ee30 0a03 	vadd.f32	s0, s0, s6
   1355e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   13562:	ee37 0a40 	vsub.f32	s0, s14, s0
   13566:	ee20 0a27 	vmul.f32	s0, s0, s15
   1356a:	4770      	bx	lr
   1356c:	ee90 7a26 	vfnms.f32	s14, s0, s13
   13570:	ee30 0a47 	vsub.f32	s0, s0, s14
   13574:	4770      	bx	lr
   13576:	eddf 7a3b 	vldr	s15, [pc, #236]	; 13664 <expm1f+0x26c>
   1357a:	ee70 7a27 	vadd.f32	s15, s0, s15
   1357e:	ee77 7ae7 	vsub.f32	s15, s15, s15
   13582:	ee30 0a67 	vsub.f32	s0, s0, s15
   13586:	4770      	bx	lr
   13588:	ee70 7a47 	vsub.f32	s15, s0, s14
   1358c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
   13590:	eea7 0a83 	vfma.f32	s0, s15, s6
   13594:	4770      	bx	lr
   13596:	eddf 6a34 	vldr	s13, [pc, #208]	; 13668 <expm1f+0x270>
   1359a:	ee30 7a07 	vadd.f32	s14, s0, s14
   1359e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   135a2:	e7bc      	b.n	1351e <expm1f+0x126>
   135a4:	2a00      	cmp	r2, #0
   135a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   135aa:	bfb8      	it	lt
   135ac:	eeb0 0a67 	vmovlt.f32	s0, s15
   135b0:	4770      	bx	lr
   135b2:	ee77 7a40 	vsub.f32	s15, s14, s0
   135b6:	ee33 0ae7 	vsub.f32	s0, s7, s15
   135ba:	ee10 2a10 	vmov	r2, s0
   135be:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   135c2:	ee00 3a10 	vmov	s0, r3
   135c6:	ee30 0a63 	vsub.f32	s0, s0, s7
   135ca:	4770      	bx	lr
   135cc:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
   135d0:	05d2      	lsls	r2, r2, #23
   135d2:	ee07 2a90 	vmov	s15, r2
   135d6:	ee77 7a27 	vadd.f32	s15, s14, s15
   135da:	ee70 7a67 	vsub.f32	s15, s0, s15
   135de:	ee37 0aa3 	vadd.f32	s0, s15, s7
   135e2:	ee10 2a10 	vmov	r2, s0
   135e6:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   135ea:	ee00 3a10 	vmov	s0, r3
   135ee:	4770      	bx	lr
   135f0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 13664 <expm1f+0x26c>
   135f4:	ee20 0a00 	vmul.f32	s0, s0, s0
   135f8:	4770      	bx	lr
   135fa:	ee70 7a47 	vsub.f32	s15, s0, s14
   135fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   13602:	eee7 3a87 	vfma.f32	s7, s15, s14
   13606:	eeb0 0a63 	vmov.f32	s0, s7
   1360a:	4770      	bx	lr
   1360c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   13610:	4770      	bx	lr
   13612:	ed9f 7a09 	vldr	s14, [pc, #36]	; 13638 <expm1f+0x240>
   13616:	2a00      	cmp	r2, #0
   13618:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1361c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
   13620:	ee60 6a07 	vmul.f32	s13, s0, s14
   13624:	bfb4      	ite	lt
   13626:	eeb0 7a46 	vmovlt.f32	s14, s12
   1362a:	eeb0 7a67 	vmovge.f32	s14, s15
   1362e:	e6fc      	b.n	1342a <expm1f+0x32>
   13630:	4195b843 	.word	0x4195b843
   13634:	42b17217 	.word	0x42b17217
   13638:	3fb8aa3b 	.word	0x3fb8aa3b
   1363c:	3f317180 	.word	0x3f317180
   13640:	3717f7d1 	.word	0x3717f7d1
   13644:	3eb17218 	.word	0x3eb17218
   13648:	b457edbb 	.word	0xb457edbb
   1364c:	36867e54 	.word	0x36867e54
   13650:	b8a670cd 	.word	0xb8a670cd
   13654:	3ad00d01 	.word	0x3ad00d01
   13658:	bd088889 	.word	0xbd088889
   1365c:	3f851591 	.word	0x3f851591
   13660:	0da24260 	.word	0x0da24260
   13664:	7149f2ca 	.word	0x7149f2ca
   13668:	b717f7d1 	.word	0xb717f7d1

0001366c <fabsf>:
   1366c:	ee10 3a10 	vmov	r3, s0
   13670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   13674:	ee00 3a10 	vmov	s0, r3
   13678:	4770      	bx	lr
   1367a:	bf00      	nop

0001367c <finitef>:
   1367c:	b082      	sub	sp, #8
   1367e:	ed8d 0a01 	vstr	s0, [sp, #4]
   13682:	9801      	ldr	r0, [sp, #4]
   13684:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   13688:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1368c:	bfac      	ite	ge
   1368e:	2000      	movge	r0, #0
   13690:	2001      	movlt	r0, #1
   13692:	b002      	add	sp, #8
   13694:	4770      	bx	lr
   13696:	bf00      	nop

00013698 <scalbnf>:
   13698:	b082      	sub	sp, #8
   1369a:	ed8d 0a01 	vstr	s0, [sp, #4]
   1369e:	9b01      	ldr	r3, [sp, #4]
   136a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   136a4:	d02a      	beq.n	136fc <scalbnf+0x64>
   136a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   136aa:	d223      	bcs.n	136f4 <scalbnf+0x5c>
   136ac:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   136b0:	d128      	bne.n	13704 <scalbnf+0x6c>
   136b2:	ed9d 7a01 	vldr	s14, [sp, #4]
   136b6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 13760 <scalbnf+0xc8>
   136ba:	4b2a      	ldr	r3, [pc, #168]	; (13764 <scalbnf+0xcc>)
   136bc:	ee67 7a27 	vmul.f32	s15, s14, s15
   136c0:	4298      	cmp	r0, r3
   136c2:	edcd 7a01 	vstr	s15, [sp, #4]
   136c6:	db37      	blt.n	13738 <scalbnf+0xa0>
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   136ce:	3a19      	subs	r2, #25
   136d0:	4402      	add	r2, r0
   136d2:	2afe      	cmp	r2, #254	; 0xfe
   136d4:	dd1a      	ble.n	1370c <scalbnf+0x74>
   136d6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 13768 <scalbnf+0xd0>
   136da:	ed9f 7a24 	vldr	s14, [pc, #144]	; 1376c <scalbnf+0xd4>
   136de:	9b01      	ldr	r3, [sp, #4]
   136e0:	2b00      	cmp	r3, #0
   136e2:	eef0 7a40 	vmov.f32	s15, s0
   136e6:	bfb8      	it	lt
   136e8:	eeb0 0a47 	vmovlt.f32	s0, s14
   136ec:	ee20 0a27 	vmul.f32	s0, s0, s15
   136f0:	b002      	add	sp, #8
   136f2:	4770      	bx	lr
   136f4:	ee30 0a00 	vadd.f32	s0, s0, s0
   136f8:	b002      	add	sp, #8
   136fa:	4770      	bx	lr
   136fc:	ed9d 0a01 	vldr	s0, [sp, #4]
   13700:	b002      	add	sp, #8
   13702:	4770      	bx	lr
   13704:	0dd2      	lsrs	r2, r2, #23
   13706:	4402      	add	r2, r0
   13708:	2afe      	cmp	r2, #254	; 0xfe
   1370a:	dce4      	bgt.n	136d6 <scalbnf+0x3e>
   1370c:	2a00      	cmp	r2, #0
   1370e:	dc0b      	bgt.n	13728 <scalbnf+0x90>
   13710:	f112 0f16 	cmn.w	r2, #22
   13714:	da17      	bge.n	13746 <scalbnf+0xae>
   13716:	f24c 3350 	movw	r3, #50000	; 0xc350
   1371a:	4298      	cmp	r0, r3
   1371c:	dcdb      	bgt.n	136d6 <scalbnf+0x3e>
   1371e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 13770 <scalbnf+0xd8>
   13722:	ed9f 7a14 	vldr	s14, [pc, #80]	; 13774 <scalbnf+0xdc>
   13726:	e7da      	b.n	136de <scalbnf+0x46>
   13728:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1372c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   13730:	ee00 3a10 	vmov	s0, r3
   13734:	b002      	add	sp, #8
   13736:	4770      	bx	lr
   13738:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 13770 <scalbnf+0xd8>
   1373c:	eddd 7a01 	vldr	s15, [sp, #4]
   13740:	ee27 0a80 	vmul.f32	s0, s15, s0
   13744:	e7d8      	b.n	136f8 <scalbnf+0x60>
   13746:	3219      	adds	r2, #25
   13748:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1374c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   13750:	eddf 7a09 	vldr	s15, [pc, #36]	; 13778 <scalbnf+0xe0>
   13754:	ee07 3a10 	vmov	s14, r3
   13758:	ee27 0a27 	vmul.f32	s0, s14, s15
   1375c:	e7cc      	b.n	136f8 <scalbnf+0x60>
   1375e:	bf00      	nop
   13760:	4c000000 	.word	0x4c000000
   13764:	ffff3cb0 	.word	0xffff3cb0
   13768:	7149f2ca 	.word	0x7149f2ca
   1376c:	f149f2ca 	.word	0xf149f2ca
   13770:	0da24260 	.word	0x0da24260
   13774:	8da24260 	.word	0x8da24260
   13778:	33000000 	.word	0x33000000

0001377c <fiprintf>:
   1377c:	b40e      	push	{r1, r2, r3}
   1377e:	b503      	push	{r0, r1, lr}
   13780:	4601      	mov	r1, r0
   13782:	ab03      	add	r3, sp, #12
   13784:	4805      	ldr	r0, [pc, #20]	; (1379c <fiprintf+0x20>)
   13786:	f853 2b04 	ldr.w	r2, [r3], #4
   1378a:	6800      	ldr	r0, [r0, #0]
   1378c:	9301      	str	r3, [sp, #4]
   1378e:	f000 f8c1 	bl	13914 <_vfiprintf_r>
   13792:	b002      	add	sp, #8
   13794:	f85d eb04 	ldr.w	lr, [sp], #4
   13798:	b003      	add	sp, #12
   1379a:	4770      	bx	lr
   1379c:	20000728 	.word	0x20000728

000137a0 <malloc>:
   137a0:	4b02      	ldr	r3, [pc, #8]	; (137ac <malloc+0xc>)
   137a2:	4601      	mov	r1, r0
   137a4:	6818      	ldr	r0, [r3, #0]
   137a6:	f000 b85b 	b.w	13860 <_malloc_r>
   137aa:	bf00      	nop
   137ac:	20000728 	.word	0x20000728

000137b0 <free>:
   137b0:	4b02      	ldr	r3, [pc, #8]	; (137bc <free+0xc>)
   137b2:	4601      	mov	r1, r0
   137b4:	6818      	ldr	r0, [r3, #0]
   137b6:	f000 b803 	b.w	137c0 <_free_r>
   137ba:	bf00      	nop
   137bc:	20000728 	.word	0x20000728

000137c0 <_free_r>:
   137c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137c2:	2900      	cmp	r1, #0
   137c4:	d048      	beq.n	13858 <_free_r+0x98>
   137c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   137ca:	9001      	str	r0, [sp, #4]
   137cc:	2b00      	cmp	r3, #0
   137ce:	f1a1 0404 	sub.w	r4, r1, #4
   137d2:	bfb8      	it	lt
   137d4:	18e4      	addlt	r4, r4, r3
   137d6:	f000 fda7 	bl	14328 <__malloc_lock>
   137da:	4a20      	ldr	r2, [pc, #128]	; (1385c <_free_r+0x9c>)
   137dc:	9801      	ldr	r0, [sp, #4]
   137de:	6813      	ldr	r3, [r2, #0]
   137e0:	4615      	mov	r5, r2
   137e2:	b933      	cbnz	r3, 137f2 <_free_r+0x32>
   137e4:	6063      	str	r3, [r4, #4]
   137e6:	6014      	str	r4, [r2, #0]
   137e8:	b003      	add	sp, #12
   137ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   137ee:	f000 bda1 	b.w	14334 <__malloc_unlock>
   137f2:	42a3      	cmp	r3, r4
   137f4:	d90b      	bls.n	1380e <_free_r+0x4e>
   137f6:	6821      	ldr	r1, [r4, #0]
   137f8:	1862      	adds	r2, r4, r1
   137fa:	4293      	cmp	r3, r2
   137fc:	bf04      	itt	eq
   137fe:	681a      	ldreq	r2, [r3, #0]
   13800:	685b      	ldreq	r3, [r3, #4]
   13802:	6063      	str	r3, [r4, #4]
   13804:	bf04      	itt	eq
   13806:	1852      	addeq	r2, r2, r1
   13808:	6022      	streq	r2, [r4, #0]
   1380a:	602c      	str	r4, [r5, #0]
   1380c:	e7ec      	b.n	137e8 <_free_r+0x28>
   1380e:	461a      	mov	r2, r3
   13810:	685b      	ldr	r3, [r3, #4]
   13812:	b10b      	cbz	r3, 13818 <_free_r+0x58>
   13814:	42a3      	cmp	r3, r4
   13816:	d9fa      	bls.n	1380e <_free_r+0x4e>
   13818:	6811      	ldr	r1, [r2, #0]
   1381a:	1855      	adds	r5, r2, r1
   1381c:	42a5      	cmp	r5, r4
   1381e:	d10b      	bne.n	13838 <_free_r+0x78>
   13820:	6824      	ldr	r4, [r4, #0]
   13822:	4421      	add	r1, r4
   13824:	1854      	adds	r4, r2, r1
   13826:	42a3      	cmp	r3, r4
   13828:	6011      	str	r1, [r2, #0]
   1382a:	d1dd      	bne.n	137e8 <_free_r+0x28>
   1382c:	681c      	ldr	r4, [r3, #0]
   1382e:	685b      	ldr	r3, [r3, #4]
   13830:	6053      	str	r3, [r2, #4]
   13832:	4421      	add	r1, r4
   13834:	6011      	str	r1, [r2, #0]
   13836:	e7d7      	b.n	137e8 <_free_r+0x28>
   13838:	d902      	bls.n	13840 <_free_r+0x80>
   1383a:	230c      	movs	r3, #12
   1383c:	6003      	str	r3, [r0, #0]
   1383e:	e7d3      	b.n	137e8 <_free_r+0x28>
   13840:	6825      	ldr	r5, [r4, #0]
   13842:	1961      	adds	r1, r4, r5
   13844:	428b      	cmp	r3, r1
   13846:	bf04      	itt	eq
   13848:	6819      	ldreq	r1, [r3, #0]
   1384a:	685b      	ldreq	r3, [r3, #4]
   1384c:	6063      	str	r3, [r4, #4]
   1384e:	bf04      	itt	eq
   13850:	1949      	addeq	r1, r1, r5
   13852:	6021      	streq	r1, [r4, #0]
   13854:	6054      	str	r4, [r2, #4]
   13856:	e7c7      	b.n	137e8 <_free_r+0x28>
   13858:	b003      	add	sp, #12
   1385a:	bd30      	pop	{r4, r5, pc}
   1385c:	2000e69c 	.word	0x2000e69c

00013860 <_malloc_r>:
   13860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13862:	1ccd      	adds	r5, r1, #3
   13864:	f025 0503 	bic.w	r5, r5, #3
   13868:	3508      	adds	r5, #8
   1386a:	2d0c      	cmp	r5, #12
   1386c:	bf38      	it	cc
   1386e:	250c      	movcc	r5, #12
   13870:	2d00      	cmp	r5, #0
   13872:	4606      	mov	r6, r0
   13874:	db01      	blt.n	1387a <_malloc_r+0x1a>
   13876:	42a9      	cmp	r1, r5
   13878:	d903      	bls.n	13882 <_malloc_r+0x22>
   1387a:	230c      	movs	r3, #12
   1387c:	6033      	str	r3, [r6, #0]
   1387e:	2000      	movs	r0, #0
   13880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13882:	f000 fd51 	bl	14328 <__malloc_lock>
   13886:	4921      	ldr	r1, [pc, #132]	; (1390c <_malloc_r+0xac>)
   13888:	680a      	ldr	r2, [r1, #0]
   1388a:	4614      	mov	r4, r2
   1388c:	b99c      	cbnz	r4, 138b6 <_malloc_r+0x56>
   1388e:	4f20      	ldr	r7, [pc, #128]	; (13910 <_malloc_r+0xb0>)
   13890:	683b      	ldr	r3, [r7, #0]
   13892:	b923      	cbnz	r3, 1389e <_malloc_r+0x3e>
   13894:	4621      	mov	r1, r4
   13896:	4630      	mov	r0, r6
   13898:	f000 fa9a 	bl	13dd0 <_sbrk_r>
   1389c:	6038      	str	r0, [r7, #0]
   1389e:	4629      	mov	r1, r5
   138a0:	4630      	mov	r0, r6
   138a2:	f000 fa95 	bl	13dd0 <_sbrk_r>
   138a6:	1c43      	adds	r3, r0, #1
   138a8:	d123      	bne.n	138f2 <_malloc_r+0x92>
   138aa:	230c      	movs	r3, #12
   138ac:	6033      	str	r3, [r6, #0]
   138ae:	4630      	mov	r0, r6
   138b0:	f000 fd40 	bl	14334 <__malloc_unlock>
   138b4:	e7e3      	b.n	1387e <_malloc_r+0x1e>
   138b6:	6823      	ldr	r3, [r4, #0]
   138b8:	1b5b      	subs	r3, r3, r5
   138ba:	d417      	bmi.n	138ec <_malloc_r+0x8c>
   138bc:	2b0b      	cmp	r3, #11
   138be:	d903      	bls.n	138c8 <_malloc_r+0x68>
   138c0:	6023      	str	r3, [r4, #0]
   138c2:	441c      	add	r4, r3
   138c4:	6025      	str	r5, [r4, #0]
   138c6:	e004      	b.n	138d2 <_malloc_r+0x72>
   138c8:	6863      	ldr	r3, [r4, #4]
   138ca:	42a2      	cmp	r2, r4
   138cc:	bf0c      	ite	eq
   138ce:	600b      	streq	r3, [r1, #0]
   138d0:	6053      	strne	r3, [r2, #4]
   138d2:	4630      	mov	r0, r6
   138d4:	f000 fd2e 	bl	14334 <__malloc_unlock>
   138d8:	f104 000b 	add.w	r0, r4, #11
   138dc:	1d23      	adds	r3, r4, #4
   138de:	f020 0007 	bic.w	r0, r0, #7
   138e2:	1ac2      	subs	r2, r0, r3
   138e4:	d0cc      	beq.n	13880 <_malloc_r+0x20>
   138e6:	1a1b      	subs	r3, r3, r0
   138e8:	50a3      	str	r3, [r4, r2]
   138ea:	e7c9      	b.n	13880 <_malloc_r+0x20>
   138ec:	4622      	mov	r2, r4
   138ee:	6864      	ldr	r4, [r4, #4]
   138f0:	e7cc      	b.n	1388c <_malloc_r+0x2c>
   138f2:	1cc4      	adds	r4, r0, #3
   138f4:	f024 0403 	bic.w	r4, r4, #3
   138f8:	42a0      	cmp	r0, r4
   138fa:	d0e3      	beq.n	138c4 <_malloc_r+0x64>
   138fc:	1a21      	subs	r1, r4, r0
   138fe:	4630      	mov	r0, r6
   13900:	f000 fa66 	bl	13dd0 <_sbrk_r>
   13904:	3001      	adds	r0, #1
   13906:	d1dd      	bne.n	138c4 <_malloc_r+0x64>
   13908:	e7cf      	b.n	138aa <_malloc_r+0x4a>
   1390a:	bf00      	nop
   1390c:	2000e69c 	.word	0x2000e69c
   13910:	2000e6a0 	.word	0x2000e6a0

00013914 <_vfiprintf_r>:
   13914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13918:	460d      	mov	r5, r1
   1391a:	b09d      	sub	sp, #116	; 0x74
   1391c:	4614      	mov	r4, r2
   1391e:	4698      	mov	r8, r3
   13920:	4606      	mov	r6, r0
   13922:	b118      	cbz	r0, 1392c <_vfiprintf_r+0x18>
   13924:	6983      	ldr	r3, [r0, #24]
   13926:	b90b      	cbnz	r3, 1392c <_vfiprintf_r+0x18>
   13928:	f000 fc40 	bl	141ac <__sinit>
   1392c:	4b89      	ldr	r3, [pc, #548]	; (13b54 <_vfiprintf_r+0x240>)
   1392e:	429d      	cmp	r5, r3
   13930:	d11b      	bne.n	1396a <_vfiprintf_r+0x56>
   13932:	6875      	ldr	r5, [r6, #4]
   13934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13936:	07d9      	lsls	r1, r3, #31
   13938:	d405      	bmi.n	13946 <_vfiprintf_r+0x32>
   1393a:	89ab      	ldrh	r3, [r5, #12]
   1393c:	059a      	lsls	r2, r3, #22
   1393e:	d402      	bmi.n	13946 <_vfiprintf_r+0x32>
   13940:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13942:	f00a ffa5 	bl	1e890 <__retarget_lock_acquire_recursive>
   13946:	89ab      	ldrh	r3, [r5, #12]
   13948:	071b      	lsls	r3, r3, #28
   1394a:	d501      	bpl.n	13950 <_vfiprintf_r+0x3c>
   1394c:	692b      	ldr	r3, [r5, #16]
   1394e:	b9eb      	cbnz	r3, 1398c <_vfiprintf_r+0x78>
   13950:	4629      	mov	r1, r5
   13952:	4630      	mov	r0, r6
   13954:	f000 fab8 	bl	13ec8 <__swsetup_r>
   13958:	b1c0      	cbz	r0, 1398c <_vfiprintf_r+0x78>
   1395a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1395c:	07dc      	lsls	r4, r3, #31
   1395e:	d50e      	bpl.n	1397e <_vfiprintf_r+0x6a>
   13960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13964:	b01d      	add	sp, #116	; 0x74
   13966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1396a:	4b7b      	ldr	r3, [pc, #492]	; (13b58 <_vfiprintf_r+0x244>)
   1396c:	429d      	cmp	r5, r3
   1396e:	d101      	bne.n	13974 <_vfiprintf_r+0x60>
   13970:	68b5      	ldr	r5, [r6, #8]
   13972:	e7df      	b.n	13934 <_vfiprintf_r+0x20>
   13974:	4b79      	ldr	r3, [pc, #484]	; (13b5c <_vfiprintf_r+0x248>)
   13976:	429d      	cmp	r5, r3
   13978:	bf08      	it	eq
   1397a:	68f5      	ldreq	r5, [r6, #12]
   1397c:	e7da      	b.n	13934 <_vfiprintf_r+0x20>
   1397e:	89ab      	ldrh	r3, [r5, #12]
   13980:	0598      	lsls	r0, r3, #22
   13982:	d4ed      	bmi.n	13960 <_vfiprintf_r+0x4c>
   13984:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13986:	f00a ff84 	bl	1e892 <__retarget_lock_release_recursive>
   1398a:	e7e9      	b.n	13960 <_vfiprintf_r+0x4c>
   1398c:	2300      	movs	r3, #0
   1398e:	9309      	str	r3, [sp, #36]	; 0x24
   13990:	2320      	movs	r3, #32
   13992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   13996:	f8cd 800c 	str.w	r8, [sp, #12]
   1399a:	2330      	movs	r3, #48	; 0x30
   1399c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 13b60 <_vfiprintf_r+0x24c>
   139a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   139a4:	f04f 0901 	mov.w	r9, #1
   139a8:	4623      	mov	r3, r4
   139aa:	469a      	mov	sl, r3
   139ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   139b0:	b10a      	cbz	r2, 139b6 <_vfiprintf_r+0xa2>
   139b2:	2a25      	cmp	r2, #37	; 0x25
   139b4:	d1f9      	bne.n	139aa <_vfiprintf_r+0x96>
   139b6:	ebba 0b04 	subs.w	fp, sl, r4
   139ba:	d00b      	beq.n	139d4 <_vfiprintf_r+0xc0>
   139bc:	465b      	mov	r3, fp
   139be:	4622      	mov	r2, r4
   139c0:	4629      	mov	r1, r5
   139c2:	4630      	mov	r0, r6
   139c4:	f00a fe58 	bl	1e678 <__sfputs_r>
   139c8:	3001      	adds	r0, #1
   139ca:	f000 80aa 	beq.w	13b22 <_vfiprintf_r+0x20e>
   139ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   139d0:	445a      	add	r2, fp
   139d2:	9209      	str	r2, [sp, #36]	; 0x24
   139d4:	f89a 3000 	ldrb.w	r3, [sl]
   139d8:	2b00      	cmp	r3, #0
   139da:	f000 80a2 	beq.w	13b22 <_vfiprintf_r+0x20e>
   139de:	2300      	movs	r3, #0
   139e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   139e8:	f10a 0a01 	add.w	sl, sl, #1
   139ec:	9304      	str	r3, [sp, #16]
   139ee:	9307      	str	r3, [sp, #28]
   139f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   139f4:	931a      	str	r3, [sp, #104]	; 0x68
   139f6:	4654      	mov	r4, sl
   139f8:	2205      	movs	r2, #5
   139fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   139fe:	4858      	ldr	r0, [pc, #352]	; (13b60 <_vfiprintf_r+0x24c>)
   13a00:	f7ec fb7e 	bl	100 <memchr>
   13a04:	9a04      	ldr	r2, [sp, #16]
   13a06:	b9d8      	cbnz	r0, 13a40 <_vfiprintf_r+0x12c>
   13a08:	06d1      	lsls	r1, r2, #27
   13a0a:	bf44      	itt	mi
   13a0c:	2320      	movmi	r3, #32
   13a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   13a12:	0713      	lsls	r3, r2, #28
   13a14:	bf44      	itt	mi
   13a16:	232b      	movmi	r3, #43	; 0x2b
   13a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   13a1c:	f89a 3000 	ldrb.w	r3, [sl]
   13a20:	2b2a      	cmp	r3, #42	; 0x2a
   13a22:	d015      	beq.n	13a50 <_vfiprintf_r+0x13c>
   13a24:	9a07      	ldr	r2, [sp, #28]
   13a26:	4654      	mov	r4, sl
   13a28:	2000      	movs	r0, #0
   13a2a:	f04f 0c0a 	mov.w	ip, #10
   13a2e:	4621      	mov	r1, r4
   13a30:	f811 3b01 	ldrb.w	r3, [r1], #1
   13a34:	3b30      	subs	r3, #48	; 0x30
   13a36:	2b09      	cmp	r3, #9
   13a38:	d94e      	bls.n	13ad8 <_vfiprintf_r+0x1c4>
   13a3a:	b1b0      	cbz	r0, 13a6a <_vfiprintf_r+0x156>
   13a3c:	9207      	str	r2, [sp, #28]
   13a3e:	e014      	b.n	13a6a <_vfiprintf_r+0x156>
   13a40:	eba0 0308 	sub.w	r3, r0, r8
   13a44:	fa09 f303 	lsl.w	r3, r9, r3
   13a48:	4313      	orrs	r3, r2
   13a4a:	9304      	str	r3, [sp, #16]
   13a4c:	46a2      	mov	sl, r4
   13a4e:	e7d2      	b.n	139f6 <_vfiprintf_r+0xe2>
   13a50:	9b03      	ldr	r3, [sp, #12]
   13a52:	1d19      	adds	r1, r3, #4
   13a54:	681b      	ldr	r3, [r3, #0]
   13a56:	9103      	str	r1, [sp, #12]
   13a58:	2b00      	cmp	r3, #0
   13a5a:	bfbb      	ittet	lt
   13a5c:	425b      	neglt	r3, r3
   13a5e:	f042 0202 	orrlt.w	r2, r2, #2
   13a62:	9307      	strge	r3, [sp, #28]
   13a64:	9307      	strlt	r3, [sp, #28]
   13a66:	bfb8      	it	lt
   13a68:	9204      	strlt	r2, [sp, #16]
   13a6a:	7823      	ldrb	r3, [r4, #0]
   13a6c:	2b2e      	cmp	r3, #46	; 0x2e
   13a6e:	d10c      	bne.n	13a8a <_vfiprintf_r+0x176>
   13a70:	7863      	ldrb	r3, [r4, #1]
   13a72:	2b2a      	cmp	r3, #42	; 0x2a
   13a74:	d135      	bne.n	13ae2 <_vfiprintf_r+0x1ce>
   13a76:	9b03      	ldr	r3, [sp, #12]
   13a78:	1d1a      	adds	r2, r3, #4
   13a7a:	681b      	ldr	r3, [r3, #0]
   13a7c:	9203      	str	r2, [sp, #12]
   13a7e:	2b00      	cmp	r3, #0
   13a80:	bfb8      	it	lt
   13a82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   13a86:	3402      	adds	r4, #2
   13a88:	9305      	str	r3, [sp, #20]
   13a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 13b70 <_vfiprintf_r+0x25c>
   13a8e:	7821      	ldrb	r1, [r4, #0]
   13a90:	2203      	movs	r2, #3
   13a92:	4650      	mov	r0, sl
   13a94:	f7ec fb34 	bl	100 <memchr>
   13a98:	b140      	cbz	r0, 13aac <_vfiprintf_r+0x198>
   13a9a:	2340      	movs	r3, #64	; 0x40
   13a9c:	eba0 000a 	sub.w	r0, r0, sl
   13aa0:	fa03 f000 	lsl.w	r0, r3, r0
   13aa4:	9b04      	ldr	r3, [sp, #16]
   13aa6:	4303      	orrs	r3, r0
   13aa8:	3401      	adds	r4, #1
   13aaa:	9304      	str	r3, [sp, #16]
   13aac:	f814 1b01 	ldrb.w	r1, [r4], #1
   13ab0:	482c      	ldr	r0, [pc, #176]	; (13b64 <_vfiprintf_r+0x250>)
   13ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   13ab6:	2206      	movs	r2, #6
   13ab8:	f7ec fb22 	bl	100 <memchr>
   13abc:	2800      	cmp	r0, #0
   13abe:	d03f      	beq.n	13b40 <_vfiprintf_r+0x22c>
   13ac0:	4b29      	ldr	r3, [pc, #164]	; (13b68 <_vfiprintf_r+0x254>)
   13ac2:	bb1b      	cbnz	r3, 13b0c <_vfiprintf_r+0x1f8>
   13ac4:	9b03      	ldr	r3, [sp, #12]
   13ac6:	3307      	adds	r3, #7
   13ac8:	f023 0307 	bic.w	r3, r3, #7
   13acc:	3308      	adds	r3, #8
   13ace:	9303      	str	r3, [sp, #12]
   13ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ad2:	443b      	add	r3, r7
   13ad4:	9309      	str	r3, [sp, #36]	; 0x24
   13ad6:	e767      	b.n	139a8 <_vfiprintf_r+0x94>
   13ad8:	fb0c 3202 	mla	r2, ip, r2, r3
   13adc:	460c      	mov	r4, r1
   13ade:	2001      	movs	r0, #1
   13ae0:	e7a5      	b.n	13a2e <_vfiprintf_r+0x11a>
   13ae2:	2300      	movs	r3, #0
   13ae4:	3401      	adds	r4, #1
   13ae6:	9305      	str	r3, [sp, #20]
   13ae8:	4619      	mov	r1, r3
   13aea:	f04f 0c0a 	mov.w	ip, #10
   13aee:	4620      	mov	r0, r4
   13af0:	f810 2b01 	ldrb.w	r2, [r0], #1
   13af4:	3a30      	subs	r2, #48	; 0x30
   13af6:	2a09      	cmp	r2, #9
   13af8:	d903      	bls.n	13b02 <_vfiprintf_r+0x1ee>
   13afa:	2b00      	cmp	r3, #0
   13afc:	d0c5      	beq.n	13a8a <_vfiprintf_r+0x176>
   13afe:	9105      	str	r1, [sp, #20]
   13b00:	e7c3      	b.n	13a8a <_vfiprintf_r+0x176>
   13b02:	fb0c 2101 	mla	r1, ip, r1, r2
   13b06:	4604      	mov	r4, r0
   13b08:	2301      	movs	r3, #1
   13b0a:	e7f0      	b.n	13aee <_vfiprintf_r+0x1da>
   13b0c:	ab03      	add	r3, sp, #12
   13b0e:	9300      	str	r3, [sp, #0]
   13b10:	462a      	mov	r2, r5
   13b12:	4b16      	ldr	r3, [pc, #88]	; (13b6c <_vfiprintf_r+0x258>)
   13b14:	a904      	add	r1, sp, #16
   13b16:	4630      	mov	r0, r6
   13b18:	f3af 8000 	nop.w
   13b1c:	4607      	mov	r7, r0
   13b1e:	1c78      	adds	r0, r7, #1
   13b20:	d1d6      	bne.n	13ad0 <_vfiprintf_r+0x1bc>
   13b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13b24:	07d9      	lsls	r1, r3, #31
   13b26:	d405      	bmi.n	13b34 <_vfiprintf_r+0x220>
   13b28:	89ab      	ldrh	r3, [r5, #12]
   13b2a:	059a      	lsls	r2, r3, #22
   13b2c:	d402      	bmi.n	13b34 <_vfiprintf_r+0x220>
   13b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13b30:	f00a feaf 	bl	1e892 <__retarget_lock_release_recursive>
   13b34:	89ab      	ldrh	r3, [r5, #12]
   13b36:	065b      	lsls	r3, r3, #25
   13b38:	f53f af12 	bmi.w	13960 <_vfiprintf_r+0x4c>
   13b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b3e:	e711      	b.n	13964 <_vfiprintf_r+0x50>
   13b40:	ab03      	add	r3, sp, #12
   13b42:	9300      	str	r3, [sp, #0]
   13b44:	462a      	mov	r2, r5
   13b46:	4b09      	ldr	r3, [pc, #36]	; (13b6c <_vfiprintf_r+0x258>)
   13b48:	a904      	add	r1, sp, #16
   13b4a:	4630      	mov	r0, r6
   13b4c:	f000 f812 	bl	13b74 <_printf_i>
   13b50:	e7e4      	b.n	13b1c <_vfiprintf_r+0x208>
   13b52:	bf00      	nop
   13b54:	00025e1c 	.word	0x00025e1c
   13b58:	00025e3c 	.word	0x00025e3c
   13b5c:	00025dfc 	.word	0x00025dfc
   13b60:	00029526 	.word	0x00029526
   13b64:	00029530 	.word	0x00029530
   13b68:	00000000 	.word	0x00000000
   13b6c:	0001e679 	.word	0x0001e679
   13b70:	0002952c 	.word	0x0002952c

00013b74 <_printf_i>:
   13b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13b78:	460c      	mov	r4, r1
   13b7a:	4691      	mov	r9, r2
   13b7c:	7e27      	ldrb	r7, [r4, #24]
   13b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
   13b80:	2f78      	cmp	r7, #120	; 0x78
   13b82:	4680      	mov	r8, r0
   13b84:	469a      	mov	sl, r3
   13b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13b8a:	d807      	bhi.n	13b9c <_printf_i+0x28>
   13b8c:	2f62      	cmp	r7, #98	; 0x62
   13b8e:	d80a      	bhi.n	13ba6 <_printf_i+0x32>
   13b90:	2f00      	cmp	r7, #0
   13b92:	f000 80d8 	beq.w	13d46 <_printf_i+0x1d2>
   13b96:	2f58      	cmp	r7, #88	; 0x58
   13b98:	f000 80a3 	beq.w	13ce2 <_printf_i+0x16e>
   13b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   13ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   13ba4:	e03a      	b.n	13c1c <_printf_i+0xa8>
   13ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   13baa:	2b15      	cmp	r3, #21
   13bac:	d8f6      	bhi.n	13b9c <_printf_i+0x28>
   13bae:	a001      	add	r0, pc, #4	; (adr r0, 13bb4 <_printf_i+0x40>)
   13bb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13bb4:	00013c0d 	.word	0x00013c0d
   13bb8:	00013c21 	.word	0x00013c21
   13bbc:	00013b9d 	.word	0x00013b9d
   13bc0:	00013b9d 	.word	0x00013b9d
   13bc4:	00013b9d 	.word	0x00013b9d
   13bc8:	00013b9d 	.word	0x00013b9d
   13bcc:	00013c21 	.word	0x00013c21
   13bd0:	00013b9d 	.word	0x00013b9d
   13bd4:	00013b9d 	.word	0x00013b9d
   13bd8:	00013b9d 	.word	0x00013b9d
   13bdc:	00013b9d 	.word	0x00013b9d
   13be0:	00013d2d 	.word	0x00013d2d
   13be4:	00013c51 	.word	0x00013c51
   13be8:	00013d0f 	.word	0x00013d0f
   13bec:	00013b9d 	.word	0x00013b9d
   13bf0:	00013b9d 	.word	0x00013b9d
   13bf4:	00013d4f 	.word	0x00013d4f
   13bf8:	00013b9d 	.word	0x00013b9d
   13bfc:	00013c51 	.word	0x00013c51
   13c00:	00013b9d 	.word	0x00013b9d
   13c04:	00013b9d 	.word	0x00013b9d
   13c08:	00013d17 	.word	0x00013d17
   13c0c:	680b      	ldr	r3, [r1, #0]
   13c0e:	1d1a      	adds	r2, r3, #4
   13c10:	681b      	ldr	r3, [r3, #0]
   13c12:	600a      	str	r2, [r1, #0]
   13c14:	f104 0642 	add.w	r6, r4, #66	; 0x42
   13c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   13c1c:	2301      	movs	r3, #1
   13c1e:	e0a3      	b.n	13d68 <_printf_i+0x1f4>
   13c20:	6825      	ldr	r5, [r4, #0]
   13c22:	6808      	ldr	r0, [r1, #0]
   13c24:	062e      	lsls	r6, r5, #24
   13c26:	f100 0304 	add.w	r3, r0, #4
   13c2a:	d50a      	bpl.n	13c42 <_printf_i+0xce>
   13c2c:	6805      	ldr	r5, [r0, #0]
   13c2e:	600b      	str	r3, [r1, #0]
   13c30:	2d00      	cmp	r5, #0
   13c32:	da03      	bge.n	13c3c <_printf_i+0xc8>
   13c34:	232d      	movs	r3, #45	; 0x2d
   13c36:	426d      	negs	r5, r5
   13c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   13c3c:	485e      	ldr	r0, [pc, #376]	; (13db8 <_printf_i+0x244>)
   13c3e:	230a      	movs	r3, #10
   13c40:	e019      	b.n	13c76 <_printf_i+0x102>
   13c42:	f015 0f40 	tst.w	r5, #64	; 0x40
   13c46:	6805      	ldr	r5, [r0, #0]
   13c48:	600b      	str	r3, [r1, #0]
   13c4a:	bf18      	it	ne
   13c4c:	b22d      	sxthne	r5, r5
   13c4e:	e7ef      	b.n	13c30 <_printf_i+0xbc>
   13c50:	680b      	ldr	r3, [r1, #0]
   13c52:	6825      	ldr	r5, [r4, #0]
   13c54:	1d18      	adds	r0, r3, #4
   13c56:	6008      	str	r0, [r1, #0]
   13c58:	0628      	lsls	r0, r5, #24
   13c5a:	d501      	bpl.n	13c60 <_printf_i+0xec>
   13c5c:	681d      	ldr	r5, [r3, #0]
   13c5e:	e002      	b.n	13c66 <_printf_i+0xf2>
   13c60:	0669      	lsls	r1, r5, #25
   13c62:	d5fb      	bpl.n	13c5c <_printf_i+0xe8>
   13c64:	881d      	ldrh	r5, [r3, #0]
   13c66:	4854      	ldr	r0, [pc, #336]	; (13db8 <_printf_i+0x244>)
   13c68:	2f6f      	cmp	r7, #111	; 0x6f
   13c6a:	bf0c      	ite	eq
   13c6c:	2308      	moveq	r3, #8
   13c6e:	230a      	movne	r3, #10
   13c70:	2100      	movs	r1, #0
   13c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13c76:	6866      	ldr	r6, [r4, #4]
   13c78:	60a6      	str	r6, [r4, #8]
   13c7a:	2e00      	cmp	r6, #0
   13c7c:	bfa2      	ittt	ge
   13c7e:	6821      	ldrge	r1, [r4, #0]
   13c80:	f021 0104 	bicge.w	r1, r1, #4
   13c84:	6021      	strge	r1, [r4, #0]
   13c86:	b90d      	cbnz	r5, 13c8c <_printf_i+0x118>
   13c88:	2e00      	cmp	r6, #0
   13c8a:	d04d      	beq.n	13d28 <_printf_i+0x1b4>
   13c8c:	4616      	mov	r6, r2
   13c8e:	fbb5 f1f3 	udiv	r1, r5, r3
   13c92:	fb03 5711 	mls	r7, r3, r1, r5
   13c96:	5dc7      	ldrb	r7, [r0, r7]
   13c98:	f806 7d01 	strb.w	r7, [r6, #-1]!
   13c9c:	462f      	mov	r7, r5
   13c9e:	42bb      	cmp	r3, r7
   13ca0:	460d      	mov	r5, r1
   13ca2:	d9f4      	bls.n	13c8e <_printf_i+0x11a>
   13ca4:	2b08      	cmp	r3, #8
   13ca6:	d10b      	bne.n	13cc0 <_printf_i+0x14c>
   13ca8:	6823      	ldr	r3, [r4, #0]
   13caa:	07df      	lsls	r7, r3, #31
   13cac:	d508      	bpl.n	13cc0 <_printf_i+0x14c>
   13cae:	6923      	ldr	r3, [r4, #16]
   13cb0:	6861      	ldr	r1, [r4, #4]
   13cb2:	4299      	cmp	r1, r3
   13cb4:	bfde      	ittt	le
   13cb6:	2330      	movle	r3, #48	; 0x30
   13cb8:	f806 3c01 	strble.w	r3, [r6, #-1]
   13cbc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   13cc0:	1b92      	subs	r2, r2, r6
   13cc2:	6122      	str	r2, [r4, #16]
   13cc4:	f8cd a000 	str.w	sl, [sp]
   13cc8:	464b      	mov	r3, r9
   13cca:	aa03      	add	r2, sp, #12
   13ccc:	4621      	mov	r1, r4
   13cce:	4640      	mov	r0, r8
   13cd0:	f00a fce4 	bl	1e69c <_printf_common>
   13cd4:	3001      	adds	r0, #1
   13cd6:	d14c      	bne.n	13d72 <_printf_i+0x1fe>
   13cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13cdc:	b004      	add	sp, #16
   13cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ce2:	4835      	ldr	r0, [pc, #212]	; (13db8 <_printf_i+0x244>)
   13ce4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   13ce8:	6823      	ldr	r3, [r4, #0]
   13cea:	680e      	ldr	r6, [r1, #0]
   13cec:	061f      	lsls	r7, r3, #24
   13cee:	f856 5b04 	ldr.w	r5, [r6], #4
   13cf2:	600e      	str	r6, [r1, #0]
   13cf4:	d514      	bpl.n	13d20 <_printf_i+0x1ac>
   13cf6:	07d9      	lsls	r1, r3, #31
   13cf8:	bf44      	itt	mi
   13cfa:	f043 0320 	orrmi.w	r3, r3, #32
   13cfe:	6023      	strmi	r3, [r4, #0]
   13d00:	b91d      	cbnz	r5, 13d0a <_printf_i+0x196>
   13d02:	6823      	ldr	r3, [r4, #0]
   13d04:	f023 0320 	bic.w	r3, r3, #32
   13d08:	6023      	str	r3, [r4, #0]
   13d0a:	2310      	movs	r3, #16
   13d0c:	e7b0      	b.n	13c70 <_printf_i+0xfc>
   13d0e:	6823      	ldr	r3, [r4, #0]
   13d10:	f043 0320 	orr.w	r3, r3, #32
   13d14:	6023      	str	r3, [r4, #0]
   13d16:	2378      	movs	r3, #120	; 0x78
   13d18:	4828      	ldr	r0, [pc, #160]	; (13dbc <_printf_i+0x248>)
   13d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   13d1e:	e7e3      	b.n	13ce8 <_printf_i+0x174>
   13d20:	065e      	lsls	r6, r3, #25
   13d22:	bf48      	it	mi
   13d24:	b2ad      	uxthmi	r5, r5
   13d26:	e7e6      	b.n	13cf6 <_printf_i+0x182>
   13d28:	4616      	mov	r6, r2
   13d2a:	e7bb      	b.n	13ca4 <_printf_i+0x130>
   13d2c:	680b      	ldr	r3, [r1, #0]
   13d2e:	6826      	ldr	r6, [r4, #0]
   13d30:	6960      	ldr	r0, [r4, #20]
   13d32:	1d1d      	adds	r5, r3, #4
   13d34:	600d      	str	r5, [r1, #0]
   13d36:	0635      	lsls	r5, r6, #24
   13d38:	681b      	ldr	r3, [r3, #0]
   13d3a:	d501      	bpl.n	13d40 <_printf_i+0x1cc>
   13d3c:	6018      	str	r0, [r3, #0]
   13d3e:	e002      	b.n	13d46 <_printf_i+0x1d2>
   13d40:	0671      	lsls	r1, r6, #25
   13d42:	d5fb      	bpl.n	13d3c <_printf_i+0x1c8>
   13d44:	8018      	strh	r0, [r3, #0]
   13d46:	2300      	movs	r3, #0
   13d48:	6123      	str	r3, [r4, #16]
   13d4a:	4616      	mov	r6, r2
   13d4c:	e7ba      	b.n	13cc4 <_printf_i+0x150>
   13d4e:	680b      	ldr	r3, [r1, #0]
   13d50:	1d1a      	adds	r2, r3, #4
   13d52:	600a      	str	r2, [r1, #0]
   13d54:	681e      	ldr	r6, [r3, #0]
   13d56:	6862      	ldr	r2, [r4, #4]
   13d58:	2100      	movs	r1, #0
   13d5a:	4630      	mov	r0, r6
   13d5c:	f7ec f9d0 	bl	100 <memchr>
   13d60:	b108      	cbz	r0, 13d66 <_printf_i+0x1f2>
   13d62:	1b80      	subs	r0, r0, r6
   13d64:	6060      	str	r0, [r4, #4]
   13d66:	6863      	ldr	r3, [r4, #4]
   13d68:	6123      	str	r3, [r4, #16]
   13d6a:	2300      	movs	r3, #0
   13d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   13d70:	e7a8      	b.n	13cc4 <_printf_i+0x150>
   13d72:	6923      	ldr	r3, [r4, #16]
   13d74:	4632      	mov	r2, r6
   13d76:	4649      	mov	r1, r9
   13d78:	4640      	mov	r0, r8
   13d7a:	47d0      	blx	sl
   13d7c:	3001      	adds	r0, #1
   13d7e:	d0ab      	beq.n	13cd8 <_printf_i+0x164>
   13d80:	6823      	ldr	r3, [r4, #0]
   13d82:	079b      	lsls	r3, r3, #30
   13d84:	d413      	bmi.n	13dae <_printf_i+0x23a>
   13d86:	68e0      	ldr	r0, [r4, #12]
   13d88:	9b03      	ldr	r3, [sp, #12]
   13d8a:	4298      	cmp	r0, r3
   13d8c:	bfb8      	it	lt
   13d8e:	4618      	movlt	r0, r3
   13d90:	e7a4      	b.n	13cdc <_printf_i+0x168>
   13d92:	2301      	movs	r3, #1
   13d94:	4632      	mov	r2, r6
   13d96:	4649      	mov	r1, r9
   13d98:	4640      	mov	r0, r8
   13d9a:	47d0      	blx	sl
   13d9c:	3001      	adds	r0, #1
   13d9e:	d09b      	beq.n	13cd8 <_printf_i+0x164>
   13da0:	3501      	adds	r5, #1
   13da2:	68e3      	ldr	r3, [r4, #12]
   13da4:	9903      	ldr	r1, [sp, #12]
   13da6:	1a5b      	subs	r3, r3, r1
   13da8:	42ab      	cmp	r3, r5
   13daa:	dcf2      	bgt.n	13d92 <_printf_i+0x21e>
   13dac:	e7eb      	b.n	13d86 <_printf_i+0x212>
   13dae:	2500      	movs	r5, #0
   13db0:	f104 0619 	add.w	r6, r4, #25
   13db4:	e7f5      	b.n	13da2 <_printf_i+0x22e>
   13db6:	bf00      	nop
   13db8:	00029537 	.word	0x00029537
   13dbc:	00029548 	.word	0x00029548

00013dc0 <realloc>:
   13dc0:	4b02      	ldr	r3, [pc, #8]	; (13dcc <realloc+0xc>)
   13dc2:	460a      	mov	r2, r1
   13dc4:	4601      	mov	r1, r0
   13dc6:	6818      	ldr	r0, [r3, #0]
   13dc8:	f00a bd88 	b.w	1e8dc <_realloc_r>
   13dcc:	20000728 	.word	0x20000728

00013dd0 <_sbrk_r>:
   13dd0:	b538      	push	{r3, r4, r5, lr}
   13dd2:	4d06      	ldr	r5, [pc, #24]	; (13dec <_sbrk_r+0x1c>)
   13dd4:	2300      	movs	r3, #0
   13dd6:	4604      	mov	r4, r0
   13dd8:	4608      	mov	r0, r1
   13dda:	602b      	str	r3, [r5, #0]
   13ddc:	f7ef fd0e 	bl	37fc <_sbrk>
   13de0:	1c43      	adds	r3, r0, #1
   13de2:	d102      	bne.n	13dea <_sbrk_r+0x1a>
   13de4:	682b      	ldr	r3, [r5, #0]
   13de6:	b103      	cbz	r3, 13dea <_sbrk_r+0x1a>
   13de8:	6023      	str	r3, [r4, #0]
   13dea:	bd38      	pop	{r3, r4, r5, pc}
   13dec:	2000ead0 	.word	0x2000ead0

00013df0 <raise>:
   13df0:	4b02      	ldr	r3, [pc, #8]	; (13dfc <raise+0xc>)
   13df2:	4601      	mov	r1, r0
   13df4:	6818      	ldr	r0, [r3, #0]
   13df6:	f00a bcbe 	b.w	1e776 <_raise_r>
   13dfa:	bf00      	nop
   13dfc:	20000728 	.word	0x20000728

00013e00 <_kill_r>:
   13e00:	b538      	push	{r3, r4, r5, lr}
   13e02:	4d07      	ldr	r5, [pc, #28]	; (13e20 <_kill_r+0x20>)
   13e04:	2300      	movs	r3, #0
   13e06:	4604      	mov	r4, r0
   13e08:	4608      	mov	r0, r1
   13e0a:	4611      	mov	r1, r2
   13e0c:	602b      	str	r3, [r5, #0]
   13e0e:	f001 f877 	bl	14f00 <_kill>
   13e12:	1c43      	adds	r3, r0, #1
   13e14:	d102      	bne.n	13e1c <_kill_r+0x1c>
   13e16:	682b      	ldr	r3, [r5, #0]
   13e18:	b103      	cbz	r3, 13e1c <_kill_r+0x1c>
   13e1a:	6023      	str	r3, [r4, #0]
   13e1c:	bd38      	pop	{r3, r4, r5, pc}
   13e1e:	bf00      	nop
   13e20:	2000ead0 	.word	0x2000ead0

00013e24 <__swbuf_r>:
   13e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e26:	460e      	mov	r6, r1
   13e28:	4614      	mov	r4, r2
   13e2a:	4605      	mov	r5, r0
   13e2c:	b118      	cbz	r0, 13e36 <__swbuf_r+0x12>
   13e2e:	6983      	ldr	r3, [r0, #24]
   13e30:	b90b      	cbnz	r3, 13e36 <__swbuf_r+0x12>
   13e32:	f000 f9bb 	bl	141ac <__sinit>
   13e36:	4b21      	ldr	r3, [pc, #132]	; (13ebc <__swbuf_r+0x98>)
   13e38:	429c      	cmp	r4, r3
   13e3a:	d12b      	bne.n	13e94 <__swbuf_r+0x70>
   13e3c:	686c      	ldr	r4, [r5, #4]
   13e3e:	69a3      	ldr	r3, [r4, #24]
   13e40:	60a3      	str	r3, [r4, #8]
   13e42:	89a3      	ldrh	r3, [r4, #12]
   13e44:	071a      	lsls	r2, r3, #28
   13e46:	d52f      	bpl.n	13ea8 <__swbuf_r+0x84>
   13e48:	6923      	ldr	r3, [r4, #16]
   13e4a:	b36b      	cbz	r3, 13ea8 <__swbuf_r+0x84>
   13e4c:	6923      	ldr	r3, [r4, #16]
   13e4e:	6820      	ldr	r0, [r4, #0]
   13e50:	1ac0      	subs	r0, r0, r3
   13e52:	6963      	ldr	r3, [r4, #20]
   13e54:	b2f6      	uxtb	r6, r6
   13e56:	4283      	cmp	r3, r0
   13e58:	4637      	mov	r7, r6
   13e5a:	dc04      	bgt.n	13e66 <__swbuf_r+0x42>
   13e5c:	4621      	mov	r1, r4
   13e5e:	4628      	mov	r0, r5
   13e60:	f000 f926 	bl	140b0 <_fflush_r>
   13e64:	bb30      	cbnz	r0, 13eb4 <__swbuf_r+0x90>
   13e66:	68a3      	ldr	r3, [r4, #8]
   13e68:	3b01      	subs	r3, #1
   13e6a:	60a3      	str	r3, [r4, #8]
   13e6c:	6823      	ldr	r3, [r4, #0]
   13e6e:	1c5a      	adds	r2, r3, #1
   13e70:	6022      	str	r2, [r4, #0]
   13e72:	701e      	strb	r6, [r3, #0]
   13e74:	6963      	ldr	r3, [r4, #20]
   13e76:	3001      	adds	r0, #1
   13e78:	4283      	cmp	r3, r0
   13e7a:	d004      	beq.n	13e86 <__swbuf_r+0x62>
   13e7c:	89a3      	ldrh	r3, [r4, #12]
   13e7e:	07db      	lsls	r3, r3, #31
   13e80:	d506      	bpl.n	13e90 <__swbuf_r+0x6c>
   13e82:	2e0a      	cmp	r6, #10
   13e84:	d104      	bne.n	13e90 <__swbuf_r+0x6c>
   13e86:	4621      	mov	r1, r4
   13e88:	4628      	mov	r0, r5
   13e8a:	f000 f911 	bl	140b0 <_fflush_r>
   13e8e:	b988      	cbnz	r0, 13eb4 <__swbuf_r+0x90>
   13e90:	4638      	mov	r0, r7
   13e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e94:	4b0a      	ldr	r3, [pc, #40]	; (13ec0 <__swbuf_r+0x9c>)
   13e96:	429c      	cmp	r4, r3
   13e98:	d101      	bne.n	13e9e <__swbuf_r+0x7a>
   13e9a:	68ac      	ldr	r4, [r5, #8]
   13e9c:	e7cf      	b.n	13e3e <__swbuf_r+0x1a>
   13e9e:	4b09      	ldr	r3, [pc, #36]	; (13ec4 <__swbuf_r+0xa0>)
   13ea0:	429c      	cmp	r4, r3
   13ea2:	bf08      	it	eq
   13ea4:	68ec      	ldreq	r4, [r5, #12]
   13ea6:	e7ca      	b.n	13e3e <__swbuf_r+0x1a>
   13ea8:	4621      	mov	r1, r4
   13eaa:	4628      	mov	r0, r5
   13eac:	f000 f80c 	bl	13ec8 <__swsetup_r>
   13eb0:	2800      	cmp	r0, #0
   13eb2:	d0cb      	beq.n	13e4c <__swbuf_r+0x28>
   13eb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13eb8:	e7ea      	b.n	13e90 <__swbuf_r+0x6c>
   13eba:	bf00      	nop
   13ebc:	00025e1c 	.word	0x00025e1c
   13ec0:	00025e3c 	.word	0x00025e3c
   13ec4:	00025dfc 	.word	0x00025dfc

00013ec8 <__swsetup_r>:
   13ec8:	4b32      	ldr	r3, [pc, #200]	; (13f94 <__swsetup_r+0xcc>)
   13eca:	b570      	push	{r4, r5, r6, lr}
   13ecc:	681d      	ldr	r5, [r3, #0]
   13ece:	4606      	mov	r6, r0
   13ed0:	460c      	mov	r4, r1
   13ed2:	b125      	cbz	r5, 13ede <__swsetup_r+0x16>
   13ed4:	69ab      	ldr	r3, [r5, #24]
   13ed6:	b913      	cbnz	r3, 13ede <__swsetup_r+0x16>
   13ed8:	4628      	mov	r0, r5
   13eda:	f000 f967 	bl	141ac <__sinit>
   13ede:	4b2e      	ldr	r3, [pc, #184]	; (13f98 <__swsetup_r+0xd0>)
   13ee0:	429c      	cmp	r4, r3
   13ee2:	d10f      	bne.n	13f04 <__swsetup_r+0x3c>
   13ee4:	686c      	ldr	r4, [r5, #4]
   13ee6:	89a3      	ldrh	r3, [r4, #12]
   13ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13eec:	0719      	lsls	r1, r3, #28
   13eee:	d42c      	bmi.n	13f4a <__swsetup_r+0x82>
   13ef0:	06dd      	lsls	r5, r3, #27
   13ef2:	d411      	bmi.n	13f18 <__swsetup_r+0x50>
   13ef4:	2309      	movs	r3, #9
   13ef6:	6033      	str	r3, [r6, #0]
   13ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   13efc:	81a3      	strh	r3, [r4, #12]
   13efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f02:	e03e      	b.n	13f82 <__swsetup_r+0xba>
   13f04:	4b25      	ldr	r3, [pc, #148]	; (13f9c <__swsetup_r+0xd4>)
   13f06:	429c      	cmp	r4, r3
   13f08:	d101      	bne.n	13f0e <__swsetup_r+0x46>
   13f0a:	68ac      	ldr	r4, [r5, #8]
   13f0c:	e7eb      	b.n	13ee6 <__swsetup_r+0x1e>
   13f0e:	4b24      	ldr	r3, [pc, #144]	; (13fa0 <__swsetup_r+0xd8>)
   13f10:	429c      	cmp	r4, r3
   13f12:	bf08      	it	eq
   13f14:	68ec      	ldreq	r4, [r5, #12]
   13f16:	e7e6      	b.n	13ee6 <__swsetup_r+0x1e>
   13f18:	0758      	lsls	r0, r3, #29
   13f1a:	d512      	bpl.n	13f42 <__swsetup_r+0x7a>
   13f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13f1e:	b141      	cbz	r1, 13f32 <__swsetup_r+0x6a>
   13f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13f24:	4299      	cmp	r1, r3
   13f26:	d002      	beq.n	13f2e <__swsetup_r+0x66>
   13f28:	4630      	mov	r0, r6
   13f2a:	f7ff fc49 	bl	137c0 <_free_r>
   13f2e:	2300      	movs	r3, #0
   13f30:	6363      	str	r3, [r4, #52]	; 0x34
   13f32:	89a3      	ldrh	r3, [r4, #12]
   13f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13f38:	81a3      	strh	r3, [r4, #12]
   13f3a:	2300      	movs	r3, #0
   13f3c:	6063      	str	r3, [r4, #4]
   13f3e:	6923      	ldr	r3, [r4, #16]
   13f40:	6023      	str	r3, [r4, #0]
   13f42:	89a3      	ldrh	r3, [r4, #12]
   13f44:	f043 0308 	orr.w	r3, r3, #8
   13f48:	81a3      	strh	r3, [r4, #12]
   13f4a:	6923      	ldr	r3, [r4, #16]
   13f4c:	b94b      	cbnz	r3, 13f62 <__swsetup_r+0x9a>
   13f4e:	89a3      	ldrh	r3, [r4, #12]
   13f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
   13f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13f58:	d003      	beq.n	13f62 <__swsetup_r+0x9a>
   13f5a:	4621      	mov	r1, r4
   13f5c:	4630      	mov	r0, r6
   13f5e:	f000 f9a3 	bl	142a8 <__smakebuf_r>
   13f62:	89a0      	ldrh	r0, [r4, #12]
   13f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13f68:	f010 0301 	ands.w	r3, r0, #1
   13f6c:	d00a      	beq.n	13f84 <__swsetup_r+0xbc>
   13f6e:	2300      	movs	r3, #0
   13f70:	60a3      	str	r3, [r4, #8]
   13f72:	6963      	ldr	r3, [r4, #20]
   13f74:	425b      	negs	r3, r3
   13f76:	61a3      	str	r3, [r4, #24]
   13f78:	6923      	ldr	r3, [r4, #16]
   13f7a:	b943      	cbnz	r3, 13f8e <__swsetup_r+0xc6>
   13f7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   13f80:	d1ba      	bne.n	13ef8 <__swsetup_r+0x30>
   13f82:	bd70      	pop	{r4, r5, r6, pc}
   13f84:	0781      	lsls	r1, r0, #30
   13f86:	bf58      	it	pl
   13f88:	6963      	ldrpl	r3, [r4, #20]
   13f8a:	60a3      	str	r3, [r4, #8]
   13f8c:	e7f4      	b.n	13f78 <__swsetup_r+0xb0>
   13f8e:	2000      	movs	r0, #0
   13f90:	e7f7      	b.n	13f82 <__swsetup_r+0xba>
   13f92:	bf00      	nop
   13f94:	20000728 	.word	0x20000728
   13f98:	00025e1c 	.word	0x00025e1c
   13f9c:	00025e3c 	.word	0x00025e3c
   13fa0:	00025dfc 	.word	0x00025dfc

00013fa4 <__sflush_r>:
   13fa4:	898a      	ldrh	r2, [r1, #12]
   13fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13faa:	4605      	mov	r5, r0
   13fac:	0710      	lsls	r0, r2, #28
   13fae:	460c      	mov	r4, r1
   13fb0:	d458      	bmi.n	14064 <__sflush_r+0xc0>
   13fb2:	684b      	ldr	r3, [r1, #4]
   13fb4:	2b00      	cmp	r3, #0
   13fb6:	dc05      	bgt.n	13fc4 <__sflush_r+0x20>
   13fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   13fba:	2b00      	cmp	r3, #0
   13fbc:	dc02      	bgt.n	13fc4 <__sflush_r+0x20>
   13fbe:	2000      	movs	r0, #0
   13fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13fc6:	2e00      	cmp	r6, #0
   13fc8:	d0f9      	beq.n	13fbe <__sflush_r+0x1a>
   13fca:	2300      	movs	r3, #0
   13fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   13fd0:	682f      	ldr	r7, [r5, #0]
   13fd2:	602b      	str	r3, [r5, #0]
   13fd4:	d032      	beq.n	1403c <__sflush_r+0x98>
   13fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13fd8:	89a3      	ldrh	r3, [r4, #12]
   13fda:	075a      	lsls	r2, r3, #29
   13fdc:	d505      	bpl.n	13fea <__sflush_r+0x46>
   13fde:	6863      	ldr	r3, [r4, #4]
   13fe0:	1ac0      	subs	r0, r0, r3
   13fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13fe4:	b10b      	cbz	r3, 13fea <__sflush_r+0x46>
   13fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13fe8:	1ac0      	subs	r0, r0, r3
   13fea:	2300      	movs	r3, #0
   13fec:	4602      	mov	r2, r0
   13fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13ff0:	6a21      	ldr	r1, [r4, #32]
   13ff2:	4628      	mov	r0, r5
   13ff4:	47b0      	blx	r6
   13ff6:	1c43      	adds	r3, r0, #1
   13ff8:	89a3      	ldrh	r3, [r4, #12]
   13ffa:	d106      	bne.n	1400a <__sflush_r+0x66>
   13ffc:	6829      	ldr	r1, [r5, #0]
   13ffe:	291d      	cmp	r1, #29
   14000:	d82c      	bhi.n	1405c <__sflush_r+0xb8>
   14002:	4a2a      	ldr	r2, [pc, #168]	; (140ac <__sflush_r+0x108>)
   14004:	40ca      	lsrs	r2, r1
   14006:	07d6      	lsls	r6, r2, #31
   14008:	d528      	bpl.n	1405c <__sflush_r+0xb8>
   1400a:	2200      	movs	r2, #0
   1400c:	6062      	str	r2, [r4, #4]
   1400e:	04d9      	lsls	r1, r3, #19
   14010:	6922      	ldr	r2, [r4, #16]
   14012:	6022      	str	r2, [r4, #0]
   14014:	d504      	bpl.n	14020 <__sflush_r+0x7c>
   14016:	1c42      	adds	r2, r0, #1
   14018:	d101      	bne.n	1401e <__sflush_r+0x7a>
   1401a:	682b      	ldr	r3, [r5, #0]
   1401c:	b903      	cbnz	r3, 14020 <__sflush_r+0x7c>
   1401e:	6560      	str	r0, [r4, #84]	; 0x54
   14020:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14022:	602f      	str	r7, [r5, #0]
   14024:	2900      	cmp	r1, #0
   14026:	d0ca      	beq.n	13fbe <__sflush_r+0x1a>
   14028:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1402c:	4299      	cmp	r1, r3
   1402e:	d002      	beq.n	14036 <__sflush_r+0x92>
   14030:	4628      	mov	r0, r5
   14032:	f7ff fbc5 	bl	137c0 <_free_r>
   14036:	2000      	movs	r0, #0
   14038:	6360      	str	r0, [r4, #52]	; 0x34
   1403a:	e7c1      	b.n	13fc0 <__sflush_r+0x1c>
   1403c:	6a21      	ldr	r1, [r4, #32]
   1403e:	2301      	movs	r3, #1
   14040:	4628      	mov	r0, r5
   14042:	47b0      	blx	r6
   14044:	1c41      	adds	r1, r0, #1
   14046:	d1c7      	bne.n	13fd8 <__sflush_r+0x34>
   14048:	682b      	ldr	r3, [r5, #0]
   1404a:	2b00      	cmp	r3, #0
   1404c:	d0c4      	beq.n	13fd8 <__sflush_r+0x34>
   1404e:	2b1d      	cmp	r3, #29
   14050:	d001      	beq.n	14056 <__sflush_r+0xb2>
   14052:	2b16      	cmp	r3, #22
   14054:	d101      	bne.n	1405a <__sflush_r+0xb6>
   14056:	602f      	str	r7, [r5, #0]
   14058:	e7b1      	b.n	13fbe <__sflush_r+0x1a>
   1405a:	89a3      	ldrh	r3, [r4, #12]
   1405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14060:	81a3      	strh	r3, [r4, #12]
   14062:	e7ad      	b.n	13fc0 <__sflush_r+0x1c>
   14064:	690f      	ldr	r7, [r1, #16]
   14066:	2f00      	cmp	r7, #0
   14068:	d0a9      	beq.n	13fbe <__sflush_r+0x1a>
   1406a:	0793      	lsls	r3, r2, #30
   1406c:	680e      	ldr	r6, [r1, #0]
   1406e:	bf08      	it	eq
   14070:	694b      	ldreq	r3, [r1, #20]
   14072:	600f      	str	r7, [r1, #0]
   14074:	bf18      	it	ne
   14076:	2300      	movne	r3, #0
   14078:	eba6 0807 	sub.w	r8, r6, r7
   1407c:	608b      	str	r3, [r1, #8]
   1407e:	f1b8 0f00 	cmp.w	r8, #0
   14082:	dd9c      	ble.n	13fbe <__sflush_r+0x1a>
   14084:	6a21      	ldr	r1, [r4, #32]
   14086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14088:	4643      	mov	r3, r8
   1408a:	463a      	mov	r2, r7
   1408c:	4628      	mov	r0, r5
   1408e:	47b0      	blx	r6
   14090:	2800      	cmp	r0, #0
   14092:	dc06      	bgt.n	140a2 <__sflush_r+0xfe>
   14094:	89a3      	ldrh	r3, [r4, #12]
   14096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1409a:	81a3      	strh	r3, [r4, #12]
   1409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140a0:	e78e      	b.n	13fc0 <__sflush_r+0x1c>
   140a2:	4407      	add	r7, r0
   140a4:	eba8 0800 	sub.w	r8, r8, r0
   140a8:	e7e9      	b.n	1407e <__sflush_r+0xda>
   140aa:	bf00      	nop
   140ac:	20400001 	.word	0x20400001

000140b0 <_fflush_r>:
   140b0:	b538      	push	{r3, r4, r5, lr}
   140b2:	690b      	ldr	r3, [r1, #16]
   140b4:	4605      	mov	r5, r0
   140b6:	460c      	mov	r4, r1
   140b8:	b913      	cbnz	r3, 140c0 <_fflush_r+0x10>
   140ba:	2500      	movs	r5, #0
   140bc:	4628      	mov	r0, r5
   140be:	bd38      	pop	{r3, r4, r5, pc}
   140c0:	b118      	cbz	r0, 140ca <_fflush_r+0x1a>
   140c2:	6983      	ldr	r3, [r0, #24]
   140c4:	b90b      	cbnz	r3, 140ca <_fflush_r+0x1a>
   140c6:	f000 f871 	bl	141ac <__sinit>
   140ca:	4b14      	ldr	r3, [pc, #80]	; (1411c <_fflush_r+0x6c>)
   140cc:	429c      	cmp	r4, r3
   140ce:	d11b      	bne.n	14108 <_fflush_r+0x58>
   140d0:	686c      	ldr	r4, [r5, #4]
   140d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   140d6:	2b00      	cmp	r3, #0
   140d8:	d0ef      	beq.n	140ba <_fflush_r+0xa>
   140da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   140dc:	07d0      	lsls	r0, r2, #31
   140de:	d404      	bmi.n	140ea <_fflush_r+0x3a>
   140e0:	0599      	lsls	r1, r3, #22
   140e2:	d402      	bmi.n	140ea <_fflush_r+0x3a>
   140e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140e6:	f00a fbd3 	bl	1e890 <__retarget_lock_acquire_recursive>
   140ea:	4628      	mov	r0, r5
   140ec:	4621      	mov	r1, r4
   140ee:	f7ff ff59 	bl	13fa4 <__sflush_r>
   140f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   140f4:	07da      	lsls	r2, r3, #31
   140f6:	4605      	mov	r5, r0
   140f8:	d4e0      	bmi.n	140bc <_fflush_r+0xc>
   140fa:	89a3      	ldrh	r3, [r4, #12]
   140fc:	059b      	lsls	r3, r3, #22
   140fe:	d4dd      	bmi.n	140bc <_fflush_r+0xc>
   14100:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14102:	f00a fbc6 	bl	1e892 <__retarget_lock_release_recursive>
   14106:	e7d9      	b.n	140bc <_fflush_r+0xc>
   14108:	4b05      	ldr	r3, [pc, #20]	; (14120 <_fflush_r+0x70>)
   1410a:	429c      	cmp	r4, r3
   1410c:	d101      	bne.n	14112 <_fflush_r+0x62>
   1410e:	68ac      	ldr	r4, [r5, #8]
   14110:	e7df      	b.n	140d2 <_fflush_r+0x22>
   14112:	4b04      	ldr	r3, [pc, #16]	; (14124 <_fflush_r+0x74>)
   14114:	429c      	cmp	r4, r3
   14116:	bf08      	it	eq
   14118:	68ec      	ldreq	r4, [r5, #12]
   1411a:	e7da      	b.n	140d2 <_fflush_r+0x22>
   1411c:	00025e1c 	.word	0x00025e1c
   14120:	00025e3c 	.word	0x00025e3c
   14124:	00025dfc 	.word	0x00025dfc

00014128 <std>:
   14128:	2300      	movs	r3, #0
   1412a:	b510      	push	{r4, lr}
   1412c:	4604      	mov	r4, r0
   1412e:	e9c0 3300 	strd	r3, r3, [r0]
   14132:	e9c0 3304 	strd	r3, r3, [r0, #16]
   14136:	6083      	str	r3, [r0, #8]
   14138:	8181      	strh	r1, [r0, #12]
   1413a:	6643      	str	r3, [r0, #100]	; 0x64
   1413c:	81c2      	strh	r2, [r0, #14]
   1413e:	6183      	str	r3, [r0, #24]
   14140:	4619      	mov	r1, r3
   14142:	2208      	movs	r2, #8
   14144:	305c      	adds	r0, #92	; 0x5c
   14146:	f00a fa78 	bl	1e63a <memset>
   1414a:	4b05      	ldr	r3, [pc, #20]	; (14160 <std+0x38>)
   1414c:	6263      	str	r3, [r4, #36]	; 0x24
   1414e:	4b05      	ldr	r3, [pc, #20]	; (14164 <std+0x3c>)
   14150:	62a3      	str	r3, [r4, #40]	; 0x28
   14152:	4b05      	ldr	r3, [pc, #20]	; (14168 <std+0x40>)
   14154:	62e3      	str	r3, [r4, #44]	; 0x2c
   14156:	4b05      	ldr	r3, [pc, #20]	; (1416c <std+0x44>)
   14158:	6224      	str	r4, [r4, #32]
   1415a:	6323      	str	r3, [r4, #48]	; 0x30
   1415c:	bd10      	pop	{r4, pc}
   1415e:	bf00      	nop
   14160:	0001e929 	.word	0x0001e929
   14164:	0001e94b 	.word	0x0001e94b
   14168:	0001e983 	.word	0x0001e983
   1416c:	0001e9a7 	.word	0x0001e9a7

00014170 <_cleanup_r>:
   14170:	4901      	ldr	r1, [pc, #4]	; (14178 <_cleanup_r+0x8>)
   14172:	f00a bb6d 	b.w	1e850 <_fwalk_reent>
   14176:	bf00      	nop
   14178:	000140b1 	.word	0x000140b1

0001417c <__sfp_lock_acquire>:
   1417c:	4801      	ldr	r0, [pc, #4]	; (14184 <__sfp_lock_acquire+0x8>)
   1417e:	f00a bb87 	b.w	1e890 <__retarget_lock_acquire_recursive>
   14182:	bf00      	nop
   14184:	2000eadc 	.word	0x2000eadc

00014188 <__sfp_lock_release>:
   14188:	4801      	ldr	r0, [pc, #4]	; (14190 <__sfp_lock_release+0x8>)
   1418a:	f00a bb82 	b.w	1e892 <__retarget_lock_release_recursive>
   1418e:	bf00      	nop
   14190:	2000eadc 	.word	0x2000eadc

00014194 <__sinit_lock_acquire>:
   14194:	4801      	ldr	r0, [pc, #4]	; (1419c <__sinit_lock_acquire+0x8>)
   14196:	f00a bb7b 	b.w	1e890 <__retarget_lock_acquire_recursive>
   1419a:	bf00      	nop
   1419c:	2000ead7 	.word	0x2000ead7

000141a0 <__sinit_lock_release>:
   141a0:	4801      	ldr	r0, [pc, #4]	; (141a8 <__sinit_lock_release+0x8>)
   141a2:	f00a bb76 	b.w	1e892 <__retarget_lock_release_recursive>
   141a6:	bf00      	nop
   141a8:	2000ead7 	.word	0x2000ead7

000141ac <__sinit>:
   141ac:	b510      	push	{r4, lr}
   141ae:	4604      	mov	r4, r0
   141b0:	f7ff fff0 	bl	14194 <__sinit_lock_acquire>
   141b4:	69a3      	ldr	r3, [r4, #24]
   141b6:	b11b      	cbz	r3, 141c0 <__sinit+0x14>
   141b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   141bc:	f7ff bff0 	b.w	141a0 <__sinit_lock_release>
   141c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   141c4:	6523      	str	r3, [r4, #80]	; 0x50
   141c6:	4b13      	ldr	r3, [pc, #76]	; (14214 <__sinit+0x68>)
   141c8:	4a13      	ldr	r2, [pc, #76]	; (14218 <__sinit+0x6c>)
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	62a2      	str	r2, [r4, #40]	; 0x28
   141ce:	42a3      	cmp	r3, r4
   141d0:	bf04      	itt	eq
   141d2:	2301      	moveq	r3, #1
   141d4:	61a3      	streq	r3, [r4, #24]
   141d6:	4620      	mov	r0, r4
   141d8:	f000 f820 	bl	1421c <__sfp>
   141dc:	6060      	str	r0, [r4, #4]
   141de:	4620      	mov	r0, r4
   141e0:	f000 f81c 	bl	1421c <__sfp>
   141e4:	60a0      	str	r0, [r4, #8]
   141e6:	4620      	mov	r0, r4
   141e8:	f000 f818 	bl	1421c <__sfp>
   141ec:	2200      	movs	r2, #0
   141ee:	60e0      	str	r0, [r4, #12]
   141f0:	2104      	movs	r1, #4
   141f2:	6860      	ldr	r0, [r4, #4]
   141f4:	f7ff ff98 	bl	14128 <std>
   141f8:	68a0      	ldr	r0, [r4, #8]
   141fa:	2201      	movs	r2, #1
   141fc:	2109      	movs	r1, #9
   141fe:	f7ff ff93 	bl	14128 <std>
   14202:	68e0      	ldr	r0, [r4, #12]
   14204:	2202      	movs	r2, #2
   14206:	2112      	movs	r1, #18
   14208:	f7ff ff8e 	bl	14128 <std>
   1420c:	2301      	movs	r3, #1
   1420e:	61a3      	str	r3, [r4, #24]
   14210:	e7d2      	b.n	141b8 <__sinit+0xc>
   14212:	bf00      	nop
   14214:	00025df8 	.word	0x00025df8
   14218:	00014171 	.word	0x00014171

0001421c <__sfp>:
   1421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1421e:	4607      	mov	r7, r0
   14220:	f7ff ffac 	bl	1417c <__sfp_lock_acquire>
   14224:	4b1e      	ldr	r3, [pc, #120]	; (142a0 <__sfp+0x84>)
   14226:	681e      	ldr	r6, [r3, #0]
   14228:	69b3      	ldr	r3, [r6, #24]
   1422a:	b913      	cbnz	r3, 14232 <__sfp+0x16>
   1422c:	4630      	mov	r0, r6
   1422e:	f7ff ffbd 	bl	141ac <__sinit>
   14232:	3648      	adds	r6, #72	; 0x48
   14234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   14238:	3b01      	subs	r3, #1
   1423a:	d503      	bpl.n	14244 <__sfp+0x28>
   1423c:	6833      	ldr	r3, [r6, #0]
   1423e:	b30b      	cbz	r3, 14284 <__sfp+0x68>
   14240:	6836      	ldr	r6, [r6, #0]
   14242:	e7f7      	b.n	14234 <__sfp+0x18>
   14244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   14248:	b9d5      	cbnz	r5, 14280 <__sfp+0x64>
   1424a:	4b16      	ldr	r3, [pc, #88]	; (142a4 <__sfp+0x88>)
   1424c:	60e3      	str	r3, [r4, #12]
   1424e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14252:	6665      	str	r5, [r4, #100]	; 0x64
   14254:	f00a fb1b 	bl	1e88e <__retarget_lock_init_recursive>
   14258:	f7ff ff96 	bl	14188 <__sfp_lock_release>
   1425c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   14260:	e9c4 5504 	strd	r5, r5, [r4, #16]
   14264:	6025      	str	r5, [r4, #0]
   14266:	61a5      	str	r5, [r4, #24]
   14268:	2208      	movs	r2, #8
   1426a:	4629      	mov	r1, r5
   1426c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   14270:	f00a f9e3 	bl	1e63a <memset>
   14274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   14278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1427c:	4620      	mov	r0, r4
   1427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14280:	3468      	adds	r4, #104	; 0x68
   14282:	e7d9      	b.n	14238 <__sfp+0x1c>
   14284:	2104      	movs	r1, #4
   14286:	4638      	mov	r0, r7
   14288:	f00a facc 	bl	1e824 <__sfmoreglue>
   1428c:	4604      	mov	r4, r0
   1428e:	6030      	str	r0, [r6, #0]
   14290:	2800      	cmp	r0, #0
   14292:	d1d5      	bne.n	14240 <__sfp+0x24>
   14294:	f7ff ff78 	bl	14188 <__sfp_lock_release>
   14298:	230c      	movs	r3, #12
   1429a:	603b      	str	r3, [r7, #0]
   1429c:	e7ee      	b.n	1427c <__sfp+0x60>
   1429e:	bf00      	nop
   142a0:	00025df8 	.word	0x00025df8
   142a4:	ffff0001 	.word	0xffff0001

000142a8 <__smakebuf_r>:
   142a8:	898b      	ldrh	r3, [r1, #12]
   142aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   142ac:	079d      	lsls	r5, r3, #30
   142ae:	4606      	mov	r6, r0
   142b0:	460c      	mov	r4, r1
   142b2:	d507      	bpl.n	142c4 <__smakebuf_r+0x1c>
   142b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   142b8:	6023      	str	r3, [r4, #0]
   142ba:	6123      	str	r3, [r4, #16]
   142bc:	2301      	movs	r3, #1
   142be:	6163      	str	r3, [r4, #20]
   142c0:	b002      	add	sp, #8
   142c2:	bd70      	pop	{r4, r5, r6, pc}
   142c4:	ab01      	add	r3, sp, #4
   142c6:	466a      	mov	r2, sp
   142c8:	f00a fae4 	bl	1e894 <__swhatbuf_r>
   142cc:	9900      	ldr	r1, [sp, #0]
   142ce:	4605      	mov	r5, r0
   142d0:	4630      	mov	r0, r6
   142d2:	f7ff fac5 	bl	13860 <_malloc_r>
   142d6:	b948      	cbnz	r0, 142ec <__smakebuf_r+0x44>
   142d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   142dc:	059a      	lsls	r2, r3, #22
   142de:	d4ef      	bmi.n	142c0 <__smakebuf_r+0x18>
   142e0:	f023 0303 	bic.w	r3, r3, #3
   142e4:	f043 0302 	orr.w	r3, r3, #2
   142e8:	81a3      	strh	r3, [r4, #12]
   142ea:	e7e3      	b.n	142b4 <__smakebuf_r+0xc>
   142ec:	4b0d      	ldr	r3, [pc, #52]	; (14324 <__smakebuf_r+0x7c>)
   142ee:	62b3      	str	r3, [r6, #40]	; 0x28
   142f0:	89a3      	ldrh	r3, [r4, #12]
   142f2:	6020      	str	r0, [r4, #0]
   142f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   142f8:	81a3      	strh	r3, [r4, #12]
   142fa:	9b00      	ldr	r3, [sp, #0]
   142fc:	6163      	str	r3, [r4, #20]
   142fe:	9b01      	ldr	r3, [sp, #4]
   14300:	6120      	str	r0, [r4, #16]
   14302:	b15b      	cbz	r3, 1431c <__smakebuf_r+0x74>
   14304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14308:	4630      	mov	r0, r6
   1430a:	f000 f84d 	bl	143a8 <_isatty_r>
   1430e:	b128      	cbz	r0, 1431c <__smakebuf_r+0x74>
   14310:	89a3      	ldrh	r3, [r4, #12]
   14312:	f023 0303 	bic.w	r3, r3, #3
   14316:	f043 0301 	orr.w	r3, r3, #1
   1431a:	81a3      	strh	r3, [r4, #12]
   1431c:	89a0      	ldrh	r0, [r4, #12]
   1431e:	4305      	orrs	r5, r0
   14320:	81a5      	strh	r5, [r4, #12]
   14322:	e7cd      	b.n	142c0 <__smakebuf_r+0x18>
   14324:	00014171 	.word	0x00014171

00014328 <__malloc_lock>:
   14328:	4801      	ldr	r0, [pc, #4]	; (14330 <__malloc_lock+0x8>)
   1432a:	f00a bab1 	b.w	1e890 <__retarget_lock_acquire_recursive>
   1432e:	bf00      	nop
   14330:	2000ead8 	.word	0x2000ead8

00014334 <__malloc_unlock>:
   14334:	4801      	ldr	r0, [pc, #4]	; (1433c <__malloc_unlock+0x8>)
   14336:	f00a baac 	b.w	1e892 <__retarget_lock_release_recursive>
   1433a:	bf00      	nop
   1433c:	2000ead8 	.word	0x2000ead8

00014340 <_write_r>:
   14340:	b538      	push	{r3, r4, r5, lr}
   14342:	4d07      	ldr	r5, [pc, #28]	; (14360 <_write_r+0x20>)
   14344:	4604      	mov	r4, r0
   14346:	4608      	mov	r0, r1
   14348:	4611      	mov	r1, r2
   1434a:	2200      	movs	r2, #0
   1434c:	602a      	str	r2, [r5, #0]
   1434e:	461a      	mov	r2, r3
   14350:	f000 fdcb 	bl	14eea <_write>
   14354:	1c43      	adds	r3, r0, #1
   14356:	d102      	bne.n	1435e <_write_r+0x1e>
   14358:	682b      	ldr	r3, [r5, #0]
   1435a:	b103      	cbz	r3, 1435e <_write_r+0x1e>
   1435c:	6023      	str	r3, [r4, #0]
   1435e:	bd38      	pop	{r3, r4, r5, pc}
   14360:	2000ead0 	.word	0x2000ead0

00014364 <_close_r>:
   14364:	b538      	push	{r3, r4, r5, lr}
   14366:	4d06      	ldr	r5, [pc, #24]	; (14380 <_close_r+0x1c>)
   14368:	2300      	movs	r3, #0
   1436a:	4604      	mov	r4, r0
   1436c:	4608      	mov	r0, r1
   1436e:	602b      	str	r3, [r5, #0]
   14370:	f000 fdbf 	bl	14ef2 <_close>
   14374:	1c43      	adds	r3, r0, #1
   14376:	d102      	bne.n	1437e <_close_r+0x1a>
   14378:	682b      	ldr	r3, [r5, #0]
   1437a:	b103      	cbz	r3, 1437e <_close_r+0x1a>
   1437c:	6023      	str	r3, [r4, #0]
   1437e:	bd38      	pop	{r3, r4, r5, pc}
   14380:	2000ead0 	.word	0x2000ead0

00014384 <_fstat_r>:
   14384:	b538      	push	{r3, r4, r5, lr}
   14386:	4d07      	ldr	r5, [pc, #28]	; (143a4 <_fstat_r+0x20>)
   14388:	2300      	movs	r3, #0
   1438a:	4604      	mov	r4, r0
   1438c:	4608      	mov	r0, r1
   1438e:	4611      	mov	r1, r2
   14390:	602b      	str	r3, [r5, #0]
   14392:	f000 fdb9 	bl	14f08 <_fstat>
   14396:	1c43      	adds	r3, r0, #1
   14398:	d102      	bne.n	143a0 <_fstat_r+0x1c>
   1439a:	682b      	ldr	r3, [r5, #0]
   1439c:	b103      	cbz	r3, 143a0 <_fstat_r+0x1c>
   1439e:	6023      	str	r3, [r4, #0]
   143a0:	bd38      	pop	{r3, r4, r5, pc}
   143a2:	bf00      	nop
   143a4:	2000ead0 	.word	0x2000ead0

000143a8 <_isatty_r>:
   143a8:	b538      	push	{r3, r4, r5, lr}
   143aa:	4d06      	ldr	r5, [pc, #24]	; (143c4 <_isatty_r+0x1c>)
   143ac:	2300      	movs	r3, #0
   143ae:	4604      	mov	r4, r0
   143b0:	4608      	mov	r0, r1
   143b2:	602b      	str	r3, [r5, #0]
   143b4:	f000 fda2 	bl	14efc <_isatty>
   143b8:	1c43      	adds	r3, r0, #1
   143ba:	d102      	bne.n	143c2 <_isatty_r+0x1a>
   143bc:	682b      	ldr	r3, [r5, #0]
   143be:	b103      	cbz	r3, 143c2 <_isatty_r+0x1a>
   143c0:	6023      	str	r3, [r4, #0]
   143c2:	bd38      	pop	{r3, r4, r5, pc}
   143c4:	2000ead0 	.word	0x2000ead0

000143c8 <_lseek_r>:
   143c8:	b538      	push	{r3, r4, r5, lr}
   143ca:	4d07      	ldr	r5, [pc, #28]	; (143e8 <_lseek_r+0x20>)
   143cc:	4604      	mov	r4, r0
   143ce:	4608      	mov	r0, r1
   143d0:	4611      	mov	r1, r2
   143d2:	2200      	movs	r2, #0
   143d4:	602a      	str	r2, [r5, #0]
   143d6:	461a      	mov	r2, r3
   143d8:	f000 fd8e 	bl	14ef8 <_lseek>
   143dc:	1c43      	adds	r3, r0, #1
   143de:	d102      	bne.n	143e6 <_lseek_r+0x1e>
   143e0:	682b      	ldr	r3, [r5, #0]
   143e2:	b103      	cbz	r3, 143e6 <_lseek_r+0x1e>
   143e4:	6023      	str	r3, [r4, #0]
   143e6:	bd38      	pop	{r3, r4, r5, pc}
   143e8:	2000ead0 	.word	0x2000ead0

000143ec <_read_r>:
   143ec:	b538      	push	{r3, r4, r5, lr}
   143ee:	4d07      	ldr	r5, [pc, #28]	; (1440c <_read_r+0x20>)
   143f0:	4604      	mov	r4, r0
   143f2:	4608      	mov	r0, r1
   143f4:	4611      	mov	r1, r2
   143f6:	2200      	movs	r2, #0
   143f8:	602a      	str	r2, [r5, #0]
   143fa:	461a      	mov	r2, r3
   143fc:	f000 fd71 	bl	14ee2 <_read>
   14400:	1c43      	adds	r3, r0, #1
   14402:	d102      	bne.n	1440a <_read_r+0x1e>
   14404:	682b      	ldr	r3, [r5, #0]
   14406:	b103      	cbz	r3, 1440a <_read_r+0x1e>
   14408:	6023      	str	r3, [r4, #0]
   1440a:	bd38      	pop	{r3, r4, r5, pc}
   1440c:	2000ead0 	.word	0x2000ead0

00014410 <main>:
#include <zephyr.h>
// This is the default main used on systems that have the standard C entry
// point. Other devices (for example FreeRTOS or ESP32) that have different
// requirements for entry code (like an app_main function) should specialize
// this main.cc file in a target-specific subfolder.
int main(int argc, char* argv[]) {
   14410:	b508      	push	{r3, lr}
  
  setup();
   14412:	f7ed f91d 	bl	1650 <setup>

  loop();
   14416:	f7ed f9cd 	bl	17b4 <loop>

    return 0;
  //}
}
   1441a:	2000      	movs	r0, #0
   1441c:	bd08      	pop	{r3, pc}

0001441e <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
   1441e:	4770      	bx	lr

00014420 <_ZN6tflite14AllOpsResolverD1Ev>:
// The magic number in the template parameter is the maximum number of ops that
// can be added to AllOpsResolver. It can be increased if needed. And most
// applications that care about the memory footprint will want to directly use
// MicroMutableOpResolver and have an application specific template parameter.
// The examples directory has sample code for this.
class AllOpsResolver : public MicroMutableOpResolver<128> {
   14420:	4770      	bx	lr

00014422 <_ZN6tflite18MicroErrorReporterD0Ev>:
   14422:	b510      	push	{r4, lr}
   14424:	4604      	mov	r4, r0
   14426:	f00a f8bf 	bl	1e5a8 <_ZdlPv>
   1442a:	4620      	mov	r0, r4
   1442c:	bd10      	pop	{r4, pc}

0001442e <_ZN6tflite14AllOpsResolverD0Ev>:
   1442e:	b510      	push	{r4, lr}
   14430:	4604      	mov	r4, r0
   14432:	f00a f8b9 	bl	1e5a8 <_ZdlPv>
   14436:	4620      	mov	r0, r4
   14438:	bd10      	pop	{r4, pc}

0001443a <__assert_func>:
limitations under the License.
==============================================================================*/

extern "C" {

void __assert_func(const char *, int, const char *, const char *) {}
   1443a:	4770      	bx	lr

0001443c <arch_printk_char_out>:
}
   1443c:	2000      	movs	r0, #0
   1443e:	4770      	bx	lr

00014440 <print_err>:
{
   14440:	b570      	push	{r4, r5, r6, lr}
   14442:	4604      	mov	r4, r0
   14444:	460d      	mov	r5, r1
	out('E', ctx);
   14446:	2045      	movs	r0, #69	; 0x45
   14448:	47a0      	blx	r4
	out('R', ctx);
   1444a:	4629      	mov	r1, r5
   1444c:	2052      	movs	r0, #82	; 0x52
   1444e:	47a0      	blx	r4
	out('R', ctx);
   14450:	4629      	mov	r1, r5
   14452:	4623      	mov	r3, r4
   14454:	2052      	movs	r0, #82	; 0x52
}
   14456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1445a:	4718      	bx	r3

0001445c <str_out>:
{
   1445c:	b530      	push	{r4, r5, lr}
   1445e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   14460:	680c      	ldr	r4, [r1, #0]
   14462:	1c55      	adds	r5, r2, #1
   14464:	b114      	cbz	r4, 1446c <str_out+0x10>
   14466:	684b      	ldr	r3, [r1, #4]
   14468:	4293      	cmp	r3, r2
   1446a:	dc01      	bgt.n	14470 <str_out+0x14>
		ctx->count++;
   1446c:	608d      	str	r5, [r1, #8]
}
   1446e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   14470:	3b01      	subs	r3, #1
   14472:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   14474:	bf08      	it	eq
   14476:	2200      	moveq	r2, #0
   14478:	608d      	str	r5, [r1, #8]
   1447a:	bf0c      	ite	eq
   1447c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1447e:	54a0      	strbne	r0, [r4, r2]
   14480:	e7f5      	b.n	1446e <str_out+0x12>

00014482 <printk>:
{
   14482:	b40f      	push	{r0, r1, r2, r3}
   14484:	b507      	push	{r0, r1, r2, lr}
   14486:	a904      	add	r1, sp, #16
   14488:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1448c:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   1448e:	f000 f95c 	bl	1474a <log_printk>
}
   14492:	b003      	add	sp, #12
   14494:	f85d eb04 	ldr.w	lr, [sp], #4
   14498:	b004      	add	sp, #16
   1449a:	4770      	bx	lr

0001449c <snprintk>:
{
   1449c:	b40c      	push	{r2, r3}
   1449e:	b507      	push	{r0, r1, r2, lr}
   144a0:	ab04      	add	r3, sp, #16
   144a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   144a6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   144a8:	f7ed fc12 	bl	1cd0 <vsnprintk>
}
   144ac:	b003      	add	sp, #12
   144ae:	f85d eb04 	ldr.w	lr, [sp], #4
   144b2:	b002      	add	sp, #8
   144b4:	4770      	bx	lr

000144b6 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   144b6:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   144b8:	f7f0 ff5a 	bl	5370 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   144bc:	2000      	movs	r0, #0
   144be:	bd08      	pop	{r3, pc}

000144c0 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   144c0:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   144c2:	f7f0 ff75 	bl	53b0 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   144c6:	f110 0f0b 	cmn.w	r0, #11
   144ca:	d005      	beq.n	144d8 <sys_sem_take+0x18>
   144cc:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   144d0:	bf08      	it	eq
   144d2:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   144d6:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   144d8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   144dc:	e7fb      	b.n	144d6 <sys_sem_take+0x16>

000144de <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   144de:	4604      	mov	r4, r0
   144e0:	b508      	push	{r3, lr}
   144e2:	4608      	mov	r0, r1
   144e4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   144e6:	461a      	mov	r2, r3
   144e8:	47a0      	blx	r4
	return z_impl_k_current_get();
   144ea:	f7f0 ff3b 	bl	5364 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   144ee:	f7ef f85f 	bl	35b0 <z_impl_k_thread_abort>

000144f2 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   144f2:	6803      	ldr	r3, [r0, #0]
   144f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   144f8:	6883      	ldr	r3, [r0, #8]
   144fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   144fe:	bf2c      	ite	cs
   14500:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   14504:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   14508:	4770      	bx	lr

0001450a <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   1450a:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   1450c:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   1450e:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   14510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   14514:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   14518:	bf2c      	ite	cs
   1451a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   1451e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   14522:	bd10      	pop	{r4, pc}

00014524 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   14524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14528:	2200      	movs	r2, #0
   1452a:	4604      	mov	r4, r0
   1452c:	460d      	mov	r5, r1
   1452e:	f7ff ffe0 	bl	144f2 <chunk_field>
   14532:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   14534:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14536:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   14538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1453c:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   14540:	bf34      	ite	cc
   14542:	2000      	movcc	r0, #0
   14544:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   14546:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   14548:	f1c0 001f 	rsb	r0, r0, #31
   1454c:	1a80      	subs	r0, r0, r2
   1454e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   14552:	684a      	ldr	r2, [r1, #4]
   14554:	1c56      	adds	r6, r2, #1
   14556:	604e      	str	r6, [r1, #4]
   14558:	b9a2      	cbnz	r2, 14584 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   1455a:	2201      	movs	r2, #1
   1455c:	fa02 f100 	lsl.w	r1, r2, r0
   14560:	6962      	ldr	r2, [r4, #20]
   14562:	430a      	orrs	r2, r1
   14564:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   14566:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   14568:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   1456c:	2202      	movs	r2, #2
   1456e:	462b      	mov	r3, r5
   14570:	4620      	mov	r0, r4
   14572:	f7ff ffca 	bl	1450a <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   14576:	2203      	movs	r2, #3
   14578:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   1457a:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   1457c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   14580:	f7ff bfc3 	b.w	1450a <chunk_set>
		chunkid_t second = h->buckets[b].next;
   14584:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   14588:	2202      	movs	r2, #2
   1458a:	4639      	mov	r1, r7
   1458c:	4620      	mov	r0, r4
   1458e:	f7ff ffb0 	bl	144f2 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
   14592:	2202      	movs	r2, #2
   14594:	4603      	mov	r3, r0
   14596:	4606      	mov	r6, r0
   14598:	4629      	mov	r1, r5
   1459a:	4620      	mov	r0, r4
   1459c:	f7ff ffb5 	bl	1450a <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   145a0:	463b      	mov	r3, r7
   145a2:	2203      	movs	r2, #3
   145a4:	4629      	mov	r1, r5
   145a6:	4620      	mov	r0, r4
   145a8:	f7ff ffaf 	bl	1450a <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   145ac:	2203      	movs	r2, #3
   145ae:	4631      	mov	r1, r6
   145b0:	462b      	mov	r3, r5
   145b2:	4620      	mov	r0, r4
   145b4:	f7ff ffa9 	bl	1450a <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   145b8:	2202      	movs	r2, #2
   145ba:	4639      	mov	r1, r7
   145bc:	e7dd      	b.n	1457a <free_list_add+0x56>

000145be <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   145be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   145c0:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   145c2:	1dcc      	adds	r4, r1, #7
   145c4:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   145c8:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   145cc:	1b1b      	subs	r3, r3, r4
   145ce:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   145d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
   145d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   145d8:	bf2c      	ite	cs
   145da:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   145de:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   145e0:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
   145e2:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   145e4:	60e1      	str	r1, [r4, #12]
   145e6:	bf94      	ite	ls
   145e8:	2100      	movls	r1, #0
   145ea:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   145ec:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   145f0:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   145f4:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   145f8:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   145fa:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   145fe:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
   14602:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   14604:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   14606:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   14608:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   1460a:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1460c:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   1460e:	4684      	mov	ip, r0
   14610:	68a2      	ldr	r2, [r4, #8]
   14612:	42ba      	cmp	r2, r7
   14614:	bf94      	ite	ls
   14616:	2200      	movls	r2, #0
   14618:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1461a:	f1c2 021f 	rsb	r2, r2, #31
   1461e:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   14620:	4290      	cmp	r0, r2
   14622:	dd0a      	ble.n	1463a <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   14624:	1a5b      	subs	r3, r3, r1
   14626:	4620      	mov	r0, r4
   14628:	2200      	movs	r2, #0
   1462a:	f7ff ff6e 	bl	1450a <chunk_set>
	free_list_add(h, h->chunk0);
   1462e:	6921      	ldr	r1, [r4, #16]
   14630:	4620      	mov	r0, r4
}
   14632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   14636:	f7ff bf75 	b.w	14524 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   1463a:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1463e:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   14640:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   14644:	e7e4      	b.n	14610 <sys_heap_init+0x52>

00014646 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14646:	4770      	bx	lr

00014648 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   14648:	2300      	movs	r3, #0
	list->head = NULL;
   1464a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1464e:	4770      	bx	lr

00014650 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   14650:	6803      	ldr	r3, [r0, #0]
   14652:	b923      	cbnz	r3, 1465e <log_list_add_tail+0xe>
		list->head = msg;
   14654:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   14656:	2300      	movs	r3, #0
	list->tail = msg;
   14658:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1465a:	600b      	str	r3, [r1, #0]
}
   1465c:	4770      	bx	lr
		list->tail->next = msg;
   1465e:	6843      	ldr	r3, [r0, #4]
   14660:	6019      	str	r1, [r3, #0]
   14662:	e7f8      	b.n	14656 <log_list_add_tail+0x6>

00014664 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   14664:	6800      	ldr	r0, [r0, #0]
   14666:	4770      	bx	lr

00014668 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   14668:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1466a:	b10b      	cbz	r3, 14670 <log_list_head_get+0x8>
		list->head = list->head->next;
   1466c:	681a      	ldr	r2, [r3, #0]
   1466e:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   14670:	4618      	mov	r0, r3
   14672:	4770      	bx	lr

00014674 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   14674:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   14676:	f7ed fe31 	bl	22dc <log_msg_chunk_alloc>

	if (msg != NULL) {
   1467a:	b118      	cbz	r0, 14684 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1467c:	2301      	movs	r3, #1
   1467e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   14680:	2300      	movs	r3, #0
   14682:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   14684:	bd08      	pop	{r3, pc}

00014686 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   14686:	f7ee ba89 	b.w	2b9c <z_timer_cycle_get_32>

0001468a <dummy_timestamp>:
   1468a:	2000      	movs	r0, #0
   1468c:	4770      	bx	lr

0001468e <log_0>:
{
   1468e:	b513      	push	{r0, r1, r4, lr}
   14690:	4604      	mov	r4, r0
   14692:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   14694:	f7ff ffee 	bl	14674 <z_log_msg_std_alloc>

	if (msg != NULL) {
   14698:	b130      	cbz	r0, 146a8 <log_0+0x1a>
		msg_finalize(msg, src_level);
   1469a:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1469c:	6104      	str	r4, [r0, #16]
}
   1469e:	b002      	add	sp, #8
   146a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   146a4:	f7ed bd34 	b.w	2110 <msg_finalize>
}
   146a8:	b002      	add	sp, #8
   146aa:	bd10      	pop	{r4, pc}

000146ac <log_1>:
{
   146ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   146ae:	460c      	mov	r4, r1
   146b0:	4611      	mov	r1, r2
   146b2:	4605      	mov	r5, r0
   146b4:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   146b6:	f7ff ffdd 	bl	14674 <z_log_msg_std_alloc>

	if (msg != NULL) {
   146ba:	b160      	cbz	r0, 146d6 <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   146bc:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   146be:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   146c0:	2501      	movs	r5, #1
   146c2:	f365 1207 	bfi	r2, r5, #4, #4
   146c6:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   146c8:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
   146ca:	6144      	str	r4, [r0, #20]
}
   146cc:	b003      	add	sp, #12
   146ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   146d2:	f7ed bd1d 	b.w	2110 <msg_finalize>
}
   146d6:	b003      	add	sp, #12
   146d8:	bd30      	pop	{r4, r5, pc}

000146da <log_2>:
{
   146da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146dc:	460e      	mov	r6, r1
   146de:	4619      	mov	r1, r3
   146e0:	4607      	mov	r7, r0
   146e2:	4615      	mov	r5, r2
   146e4:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   146e6:	f7ff ffc5 	bl	14674 <z_log_msg_std_alloc>

	if (msg != NULL) {
   146ea:	b168      	cbz	r0, 14708 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   146ec:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   146ee:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   146f0:	2202      	movs	r2, #2
   146f2:	f362 1307 	bfi	r3, r2, #4, #4
   146f6:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   146f8:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   146fa:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
   146fe:	b003      	add	sp, #12
   14700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   14704:	f7ed bd04 	b.w	2110 <msg_finalize>
}
   14708:	b003      	add	sp, #12
   1470a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001470c <log_3>:
{
   1470c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14710:	460f      	mov	r7, r1
   14712:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   14716:	9101      	str	r1, [sp, #4]
   14718:	4680      	mov	r8, r0
   1471a:	4616      	mov	r6, r2
   1471c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1471e:	f7ff ffa9 	bl	14674 <z_log_msg_std_alloc>

	if (msg != NULL) {
   14722:	b178      	cbz	r0, 14744 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   14724:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   14726:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1472a:	2203      	movs	r2, #3
   1472c:	f362 1307 	bfi	r3, r2, #4, #4
   14730:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   14732:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   14734:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
   14736:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
   1473a:	b002      	add	sp, #8
   1473c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   14740:	f7ed bce6 	b.w	2110 <msg_finalize>
}
   14744:	b002      	add	sp, #8
   14746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001474a <log_printk>:
{
   1474a:	b500      	push	{lr}
   1474c:	b0c3      	sub	sp, #268	; 0x10c
   1474e:	4602      	mov	r2, r0
   14750:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   14752:	a801      	add	r0, sp, #4
   14754:	f240 1101 	movw	r1, #257	; 0x101
   14758:	f7ed faba 	bl	1cd0 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1475c:	f240 1201 	movw	r2, #257	; 0x101
   14760:	4282      	cmp	r2, r0
   14762:	bf28      	it	cs
   14764:	4602      	movcs	r2, r0
   14766:	a901      	add	r1, sp, #4
   14768:	2000      	movs	r0, #0
   1476a:	f000 f89f 	bl	148ac <log_msg_hexdump_create>
			if (msg == NULL) {
   1476e:	b118      	cbz	r0, 14778 <log_printk+0x2e>
			msg_finalize(msg, src_level_union.structure);
   14770:	f04f 0100 	mov.w	r1, #0
   14774:	f7ed fccc 	bl	2110 <msg_finalize>
}
   14778:	b043      	add	sp, #268	; 0x10c
   1477a:	f85d fb04 	ldr.w	pc, [sp], #4

0001477e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1477e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14782:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   14784:	8903      	ldrh	r3, [r0, #8]
{
   14786:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   1478a:	f3c3 038d 	ubfx	r3, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1478e:	42a3      	cmp	r3, r4
{
   14790:	460e      	mov	r6, r1
	if (offset >= available_len) {
   14792:	d803      	bhi.n	1479c <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   14794:	2300      	movs	r3, #0
   14796:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   14798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1479c:	6811      	ldr	r1, [r2, #0]
   1479e:	4421      	add	r1, r4
   147a0:	4299      	cmp	r1, r3
		*length = available_len - offset;
   147a2:	bf84      	itt	hi
   147a4:	1b19      	subhi	r1, r3, r4
   147a6:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   147a8:	2b0c      	cmp	r3, #12
	req_len = *length;
   147aa:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   147ae:	d928      	bls.n	14802 <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
   147b0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   147b2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   147b6:	d82b      	bhi.n	14810 <log_msg_hexdump_data_op+0x92>
		head_data = msg->payload.ext.data.bytes;
   147b8:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   147ba:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   147bc:	454b      	cmp	r3, r9
   147be:	bf28      	it	cs
   147c0:	464b      	movcs	r3, r9
   147c2:	461d      	mov	r5, r3
		if (put_op) {
   147c4:	4420      	add	r0, r4
   147c6:	461a      	mov	r2, r3
   147c8:	b1ff      	cbz	r7, 1480a <log_msg_hexdump_data_op+0x8c>
   147ca:	4631      	mov	r1, r6
   147cc:	f009 ff27 	bl	1e61e <memcpy>
		req_len -= cpy_len;
   147d0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   147d4:	442e      	add	r6, r5
	while (req_len > 0) {
   147d6:	f1b9 0f00 	cmp.w	r9, #0
   147da:	d0dd      	beq.n	14798 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   147dc:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   147e0:	454d      	cmp	r5, r9
   147e2:	bf28      	it	cs
   147e4:	464d      	movcs	r5, r9
		if (put_op) {
   147e6:	1d20      	adds	r0, r4, #4
   147e8:	4440      	add	r0, r8
   147ea:	462a      	mov	r2, r5
   147ec:	b1bf      	cbz	r7, 1481e <log_msg_hexdump_data_op+0xa0>
   147ee:	4631      	mov	r1, r6
   147f0:	f009 ff15 	bl	1e61e <memcpy>
		req_len -= cpy_len;
   147f4:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   147f8:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   147fc:	442e      	add	r6, r5
		offset = 0;
   147fe:	2400      	movs	r4, #0
   14800:	e7e9      	b.n	147d6 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   14802:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   14804:	f04f 0800 	mov.w	r8, #0
   14808:	e7d8      	b.n	147bc <log_msg_hexdump_data_op+0x3e>
   1480a:	4601      	mov	r1, r0
   1480c:	4630      	mov	r0, r6
   1480e:	e7dd      	b.n	147cc <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   14810:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   14812:	2c1b      	cmp	r4, #27
   14814:	d9df      	bls.n	147d6 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   14816:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1481a:	3c1c      	subs	r4, #28
   1481c:	e7f9      	b.n	14812 <log_msg_hexdump_data_op+0x94>
   1481e:	4601      	mov	r1, r0
   14820:	4630      	mov	r0, r6
   14822:	e7e5      	b.n	147f0 <log_msg_hexdump_data_op+0x72>

00014824 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14824:	3004      	adds	r0, #4
   14826:	f3bf 8f5b 	dmb	ish
   1482a:	e850 3f00 	ldrex	r3, [r0]
   1482e:	3301      	adds	r3, #1
   14830:	e840 3200 	strex	r2, r3, [r0]
   14834:	2a00      	cmp	r2, #0
   14836:	d1f8      	bne.n	1482a <log_msg_get+0x6>
   14838:	f3bf 8f5b 	dmb	ish
}
   1483c:	4770      	bx	lr

0001483e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1483e:	7a40      	ldrb	r0, [r0, #9]
}
   14840:	0900      	lsrs	r0, r0, #4
   14842:	4770      	bx	lr

00014844 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   14844:	7a43      	ldrb	r3, [r0, #9]
   14846:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1484a:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1484e:	d216      	bcs.n	1487e <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   14850:	2a03      	cmp	r2, #3
   14852:	d803      	bhi.n	1485c <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   14854:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14858:	6948      	ldr	r0, [r1, #20]
   1485a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1485c:	2901      	cmp	r1, #1
   1485e:	d803      	bhi.n	14868 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   14860:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14864:	6988      	ldr	r0, [r1, #24]
   14866:	4770      	bx	lr
	cont = msg->payload.ext.next;
   14868:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1486a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1486c:	2906      	cmp	r1, #6
   1486e:	d803      	bhi.n	14878 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   14870:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14874:	6848      	ldr	r0, [r1, #4]
   14876:	4770      	bx	lr
		cont = cont->next;
   14878:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1487a:	3907      	subs	r1, #7
		cont = cont->next;
   1487c:	e7f6      	b.n	1486c <log_msg_arg_get+0x28>
		return 0;
   1487e:	2000      	movs	r0, #0
}
   14880:	4770      	bx	lr

00014882 <log_msg_put>:
{
   14882:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14884:	1d02      	adds	r2, r0, #4
   14886:	f3bf 8f5b 	dmb	ish
   1488a:	e852 1f00 	ldrex	r1, [r2]
   1488e:	3901      	subs	r1, #1
   14890:	e842 1c00 	strex	ip, r1, [r2]
   14894:	f1bc 0f00 	cmp.w	ip, #0
   14898:	d1f7      	bne.n	1488a <log_msg_put+0x8>
   1489a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1489e:	685b      	ldr	r3, [r3, #4]
   148a0:	b90b      	cbnz	r3, 148a6 <log_msg_put+0x24>
		msg_free(msg);
   148a2:	f7ed bd2f 	b.w	2304 <msg_free>
}
   148a6:	4770      	bx	lr

000148a8 <log_msg_str_get>:
}
   148a8:	6900      	ldr	r0, [r0, #16]
   148aa:	4770      	bx	lr

000148ac <log_msg_hexdump_create>:
{
   148ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   148b0:	f643 75ff 	movw	r5, #16383	; 0x3fff
   148b4:	4295      	cmp	r5, r2
{
   148b6:	4680      	mov	r8, r0
   148b8:	460e      	mov	r6, r1
   148ba:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   148bc:	bf28      	it	cs
   148be:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   148c0:	f7ed fd0c 	bl	22dc <log_msg_chunk_alloc>
	if (msg == NULL) {
   148c4:	4604      	mov	r4, r0
   148c6:	b378      	cbz	r0, 14928 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148c8:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   148ca:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   148ce:	2301      	movs	r3, #1
   148d0:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148d2:	00ab      	lsls	r3, r5, #2
   148d4:	f043 0301 	orr.w	r3, r3, #1
   148d8:	f002 0202 	and.w	r2, r2, #2
   148dc:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   148de:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   148e0:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   148e2:	f100 0814 	add.w	r8, r0, #20
   148e6:	d916      	bls.n	14916 <log_msg_hexdump_create+0x6a>
   148e8:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   148ea:	7a02      	ldrb	r2, [r0, #8]
   148ec:	6183      	str	r3, [r0, #24]
   148ee:	6873      	ldr	r3, [r6, #4]
   148f0:	61c3      	str	r3, [r0, #28]
   148f2:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   148f6:	2300      	movs	r3, #0
   148f8:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   148fa:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   148fc:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   148fe:	3d08      	subs	r5, #8
	while (length > 0) {
   14900:	4699      	mov	r9, r3
   14902:	b18d      	cbz	r5, 14928 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   14904:	f7ed fcea 	bl	22dc <log_msg_chunk_alloc>
		if (cont == NULL) {
   14908:	4607      	mov	r7, r0
   1490a:	b980      	cbnz	r0, 1492e <log_msg_hexdump_create+0x82>
			msg_free(msg);
   1490c:	4620      	mov	r0, r4
   1490e:	f7ed fcf9 	bl	2304 <msg_free>
			return NULL;
   14912:	463c      	mov	r4, r7
   14914:	e008      	b.n	14928 <log_msg_hexdump_create+0x7c>
   14916:	462a      	mov	r2, r5
   14918:	4631      	mov	r1, r6
   1491a:	4640      	mov	r0, r8
   1491c:	f009 fe7f 	bl	1e61e <memcpy>
		msg->hdr.params.generic.ext = 0;
   14920:	7a23      	ldrb	r3, [r4, #8]
   14922:	f36f 0341 	bfc	r3, #1, #1
   14926:	7223      	strb	r3, [r4, #8]
}
   14928:	4620      	mov	r0, r4
   1492a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1492e:	2d1c      	cmp	r5, #28
   14930:	462f      	mov	r7, r5
   14932:	bf28      	it	cs
   14934:	271c      	movcs	r7, #28
		*prev_cont = cont;
   14936:	f8c8 0000 	str.w	r0, [r8]
   1493a:	4631      	mov	r1, r6
		cont->next = NULL;
   1493c:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   14940:	4680      	mov	r8, r0
   14942:	463a      	mov	r2, r7
   14944:	3004      	adds	r0, #4
   14946:	f009 fe6a 	bl	1e61e <memcpy>
		data += chunk_length;
   1494a:	443e      	add	r6, r7
		length -= chunk_length;
   1494c:	1bed      	subs	r5, r5, r7
   1494e:	e7d8      	b.n	14902 <log_msg_hexdump_create+0x56>

00014950 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   14950:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   14952:	2400      	movs	r4, #0
   14954:	9400      	str	r4, [sp, #0]
   14956:	f7ff ff12 	bl	1477e <log_msg_hexdump_data_op>
}
   1495a:	b002      	add	sp, #8
   1495c:	bd10      	pop	{r4, pc}

0001495e <buffer_write>:
{
   1495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14960:	4606      	mov	r6, r0
   14962:	460d      	mov	r5, r1
   14964:	4614      	mov	r4, r2
   14966:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   14968:	4621      	mov	r1, r4
   1496a:	4628      	mov	r0, r5
   1496c:	463a      	mov	r2, r7
   1496e:	47b0      	blx	r6
	} while (len != 0);
   14970:	1a24      	subs	r4, r4, r0
		buf += processed;
   14972:	4405      	add	r5, r0
	} while (len != 0);
   14974:	d1f8      	bne.n	14968 <buffer_write+0xa>
}
   14976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014978 <std_print>:
{
   14978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1497c:	b08e      	sub	sp, #56	; 0x38
   1497e:	af0e      	add	r7, sp, #56	; 0x38
   14980:	4680      	mov	r8, r0
   14982:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   14984:	f7ff ff90 	bl	148a8 <log_msg_str_get>
   14988:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1498a:	4640      	mov	r0, r8
   1498c:	f7ff ff57 	bl	1483e <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   14990:	0083      	lsls	r3, r0, #2
   14992:	3307      	adds	r3, #7
   14994:	f023 0307 	bic.w	r3, r3, #7
   14998:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   1499c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1499e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   149a0:	f04f 0900 	mov.w	r9, #0
   149a4:	45d1      	cmp	r9, sl
   149a6:	d116      	bne.n	149d6 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   149a8:	4640      	mov	r0, r8
   149aa:	f7ff ff48 	bl	1483e <log_msg_nargs_get>
   149ae:	280f      	cmp	r0, #15
   149b0:	d81e      	bhi.n	149f0 <std_print+0x78>
   149b2:	e8df f010 	tbh	[pc, r0, lsl #1]
   149b6:	0019      	.short	0x0019
   149b8:	00260020 	.word	0x00260020
   149bc:	0036002d 	.word	0x0036002d
   149c0:	004e0041 	.word	0x004e0041
   149c4:	006e005d 	.word	0x006e005d
   149c8:	00960081 	.word	0x00960081
   149cc:	00c600ad 	.word	0x00c600ad
   149d0:	00fe00e1 	.word	0x00fe00e1
   149d4:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   149d6:	4649      	mov	r1, r9
   149d8:	4640      	mov	r0, r8
   149da:	f7ff ff33 	bl	14844 <log_msg_arg_get>
   149de:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   149e2:	f109 0901 	add.w	r9, r9, #1
   149e6:	e7dd      	b.n	149a4 <std_print+0x2c>
		print_formatted(log_output, str);
   149e8:	4631      	mov	r1, r6
   149ea:	4628      	mov	r0, r5
   149ec:	f7ed fcc8 	bl	2380 <print_formatted>
}
   149f0:	46bd      	mov	sp, r7
   149f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   149f6:	6822      	ldr	r2, [r4, #0]
   149f8:	4631      	mov	r1, r6
   149fa:	4628      	mov	r0, r5
   149fc:	f7ed fcc0 	bl	2380 <print_formatted>
		break;
   14a00:	e7f6      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   14a02:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a06:	4631      	mov	r1, r6
   14a08:	4628      	mov	r0, r5
   14a0a:	f7ed fcb9 	bl	2380 <print_formatted>
		break;
   14a0e:	e7ef      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   14a10:	68a3      	ldr	r3, [r4, #8]
   14a12:	9300      	str	r3, [sp, #0]
   14a14:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a18:	4631      	mov	r1, r6
   14a1a:	4628      	mov	r0, r5
   14a1c:	f7ed fcb0 	bl	2380 <print_formatted>
		break;
   14a20:	e7e6      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a22:	68e3      	ldr	r3, [r4, #12]
   14a24:	9301      	str	r3, [sp, #4]
   14a26:	68a3      	ldr	r3, [r4, #8]
   14a28:	9300      	str	r3, [sp, #0]
   14a2a:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a2e:	4631      	mov	r1, r6
   14a30:	4628      	mov	r0, r5
   14a32:	f7ed fca5 	bl	2380 <print_formatted>
		break;
   14a36:	e7db      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a38:	6923      	ldr	r3, [r4, #16]
   14a3a:	9302      	str	r3, [sp, #8]
   14a3c:	68e3      	ldr	r3, [r4, #12]
   14a3e:	9301      	str	r3, [sp, #4]
   14a40:	68a3      	ldr	r3, [r4, #8]
   14a42:	9300      	str	r3, [sp, #0]
   14a44:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a48:	4631      	mov	r1, r6
   14a4a:	4628      	mov	r0, r5
   14a4c:	f7ed fc98 	bl	2380 <print_formatted>
		break;
   14a50:	e7ce      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a52:	6963      	ldr	r3, [r4, #20]
   14a54:	9303      	str	r3, [sp, #12]
   14a56:	6923      	ldr	r3, [r4, #16]
   14a58:	9302      	str	r3, [sp, #8]
   14a5a:	68e3      	ldr	r3, [r4, #12]
   14a5c:	9301      	str	r3, [sp, #4]
   14a5e:	68a3      	ldr	r3, [r4, #8]
   14a60:	9300      	str	r3, [sp, #0]
   14a62:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a66:	4631      	mov	r1, r6
   14a68:	4628      	mov	r0, r5
   14a6a:	f7ed fc89 	bl	2380 <print_formatted>
		break;
   14a6e:	e7bf      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a70:	69a3      	ldr	r3, [r4, #24]
   14a72:	9304      	str	r3, [sp, #16]
   14a74:	6963      	ldr	r3, [r4, #20]
   14a76:	9303      	str	r3, [sp, #12]
   14a78:	6923      	ldr	r3, [r4, #16]
   14a7a:	9302      	str	r3, [sp, #8]
   14a7c:	68e3      	ldr	r3, [r4, #12]
   14a7e:	9301      	str	r3, [sp, #4]
   14a80:	68a3      	ldr	r3, [r4, #8]
   14a82:	9300      	str	r3, [sp, #0]
   14a84:	e9d4 2300 	ldrd	r2, r3, [r4]
   14a88:	4631      	mov	r1, r6
   14a8a:	4628      	mov	r0, r5
   14a8c:	f7ed fc78 	bl	2380 <print_formatted>
		break;
   14a90:	e7ae      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14a92:	69e3      	ldr	r3, [r4, #28]
   14a94:	9305      	str	r3, [sp, #20]
   14a96:	69a3      	ldr	r3, [r4, #24]
   14a98:	9304      	str	r3, [sp, #16]
   14a9a:	6963      	ldr	r3, [r4, #20]
   14a9c:	9303      	str	r3, [sp, #12]
   14a9e:	6923      	ldr	r3, [r4, #16]
   14aa0:	9302      	str	r3, [sp, #8]
   14aa2:	68e3      	ldr	r3, [r4, #12]
   14aa4:	9301      	str	r3, [sp, #4]
   14aa6:	68a3      	ldr	r3, [r4, #8]
   14aa8:	9300      	str	r3, [sp, #0]
   14aaa:	e9d4 2300 	ldrd	r2, r3, [r4]
   14aae:	4631      	mov	r1, r6
   14ab0:	4628      	mov	r0, r5
   14ab2:	f7ed fc65 	bl	2380 <print_formatted>
		break;
   14ab6:	e79b      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14ab8:	6a23      	ldr	r3, [r4, #32]
   14aba:	9306      	str	r3, [sp, #24]
   14abc:	69e3      	ldr	r3, [r4, #28]
   14abe:	9305      	str	r3, [sp, #20]
   14ac0:	69a3      	ldr	r3, [r4, #24]
   14ac2:	9304      	str	r3, [sp, #16]
   14ac4:	6963      	ldr	r3, [r4, #20]
   14ac6:	9303      	str	r3, [sp, #12]
   14ac8:	6923      	ldr	r3, [r4, #16]
   14aca:	9302      	str	r3, [sp, #8]
   14acc:	68e3      	ldr	r3, [r4, #12]
   14ace:	9301      	str	r3, [sp, #4]
   14ad0:	68a3      	ldr	r3, [r4, #8]
   14ad2:	9300      	str	r3, [sp, #0]
   14ad4:	e9d4 2300 	ldrd	r2, r3, [r4]
   14ad8:	4631      	mov	r1, r6
   14ada:	4628      	mov	r0, r5
   14adc:	f7ed fc50 	bl	2380 <print_formatted>
		break;
   14ae0:	e786      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ae4:	9307      	str	r3, [sp, #28]
   14ae6:	6a23      	ldr	r3, [r4, #32]
   14ae8:	9306      	str	r3, [sp, #24]
   14aea:	69e3      	ldr	r3, [r4, #28]
   14aec:	9305      	str	r3, [sp, #20]
   14aee:	69a3      	ldr	r3, [r4, #24]
   14af0:	9304      	str	r3, [sp, #16]
   14af2:	6963      	ldr	r3, [r4, #20]
   14af4:	9303      	str	r3, [sp, #12]
   14af6:	6923      	ldr	r3, [r4, #16]
   14af8:	9302      	str	r3, [sp, #8]
   14afa:	68e3      	ldr	r3, [r4, #12]
   14afc:	9301      	str	r3, [sp, #4]
   14afe:	68a3      	ldr	r3, [r4, #8]
   14b00:	9300      	str	r3, [sp, #0]
   14b02:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b06:	4631      	mov	r1, r6
   14b08:	4628      	mov	r0, r5
   14b0a:	f7ed fc39 	bl	2380 <print_formatted>
		break;
   14b0e:	e76f      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b12:	9308      	str	r3, [sp, #32]
   14b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b16:	9307      	str	r3, [sp, #28]
   14b18:	6a23      	ldr	r3, [r4, #32]
   14b1a:	9306      	str	r3, [sp, #24]
   14b1c:	69e3      	ldr	r3, [r4, #28]
   14b1e:	9305      	str	r3, [sp, #20]
   14b20:	69a3      	ldr	r3, [r4, #24]
   14b22:	9304      	str	r3, [sp, #16]
   14b24:	6963      	ldr	r3, [r4, #20]
   14b26:	9303      	str	r3, [sp, #12]
   14b28:	6923      	ldr	r3, [r4, #16]
   14b2a:	9302      	str	r3, [sp, #8]
   14b2c:	68e3      	ldr	r3, [r4, #12]
   14b2e:	9301      	str	r3, [sp, #4]
   14b30:	68a3      	ldr	r3, [r4, #8]
   14b32:	9300      	str	r3, [sp, #0]
   14b34:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b38:	4631      	mov	r1, r6
   14b3a:	4628      	mov	r0, r5
   14b3c:	f7ed fc20 	bl	2380 <print_formatted>
		break;
   14b40:	e756      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14b44:	9309      	str	r3, [sp, #36]	; 0x24
   14b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b48:	9308      	str	r3, [sp, #32]
   14b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b4c:	9307      	str	r3, [sp, #28]
   14b4e:	6a23      	ldr	r3, [r4, #32]
   14b50:	9306      	str	r3, [sp, #24]
   14b52:	69e3      	ldr	r3, [r4, #28]
   14b54:	9305      	str	r3, [sp, #20]
   14b56:	69a3      	ldr	r3, [r4, #24]
   14b58:	9304      	str	r3, [sp, #16]
   14b5a:	6963      	ldr	r3, [r4, #20]
   14b5c:	9303      	str	r3, [sp, #12]
   14b5e:	6923      	ldr	r3, [r4, #16]
   14b60:	9302      	str	r3, [sp, #8]
   14b62:	68e3      	ldr	r3, [r4, #12]
   14b64:	9301      	str	r3, [sp, #4]
   14b66:	68a3      	ldr	r3, [r4, #8]
   14b68:	9300      	str	r3, [sp, #0]
   14b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
   14b6e:	4631      	mov	r1, r6
   14b70:	4628      	mov	r0, r5
   14b72:	f7ed fc05 	bl	2380 <print_formatted>
		break;
   14b76:	e73b      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b7a:	930a      	str	r3, [sp, #40]	; 0x28
   14b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14b7e:	9309      	str	r3, [sp, #36]	; 0x24
   14b80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b82:	9308      	str	r3, [sp, #32]
   14b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b86:	9307      	str	r3, [sp, #28]
   14b88:	6a23      	ldr	r3, [r4, #32]
   14b8a:	9306      	str	r3, [sp, #24]
   14b8c:	69e3      	ldr	r3, [r4, #28]
   14b8e:	9305      	str	r3, [sp, #20]
   14b90:	69a3      	ldr	r3, [r4, #24]
   14b92:	9304      	str	r3, [sp, #16]
   14b94:	6963      	ldr	r3, [r4, #20]
   14b96:	9303      	str	r3, [sp, #12]
   14b98:	6923      	ldr	r3, [r4, #16]
   14b9a:	9302      	str	r3, [sp, #8]
   14b9c:	68e3      	ldr	r3, [r4, #12]
   14b9e:	9301      	str	r3, [sp, #4]
   14ba0:	68a3      	ldr	r3, [r4, #8]
   14ba2:	9300      	str	r3, [sp, #0]
   14ba4:	e9d4 2300 	ldrd	r2, r3, [r4]
   14ba8:	4631      	mov	r1, r6
   14baa:	4628      	mov	r0, r5
   14bac:	f7ed fbe8 	bl	2380 <print_formatted>
		break;
   14bb0:	e71e      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14bb4:	930b      	str	r3, [sp, #44]	; 0x2c
   14bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14bb8:	930a      	str	r3, [sp, #40]	; 0x28
   14bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14bbc:	9309      	str	r3, [sp, #36]	; 0x24
   14bbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14bc0:	9308      	str	r3, [sp, #32]
   14bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14bc4:	9307      	str	r3, [sp, #28]
   14bc6:	6a23      	ldr	r3, [r4, #32]
   14bc8:	9306      	str	r3, [sp, #24]
   14bca:	69e3      	ldr	r3, [r4, #28]
   14bcc:	9305      	str	r3, [sp, #20]
   14bce:	69a3      	ldr	r3, [r4, #24]
   14bd0:	9304      	str	r3, [sp, #16]
   14bd2:	6963      	ldr	r3, [r4, #20]
   14bd4:	9303      	str	r3, [sp, #12]
   14bd6:	6923      	ldr	r3, [r4, #16]
   14bd8:	9302      	str	r3, [sp, #8]
   14bda:	68e3      	ldr	r3, [r4, #12]
   14bdc:	9301      	str	r3, [sp, #4]
   14bde:	68a3      	ldr	r3, [r4, #8]
   14be0:	9300      	str	r3, [sp, #0]
   14be2:	e9d4 2300 	ldrd	r2, r3, [r4]
   14be6:	4631      	mov	r1, r6
   14be8:	4628      	mov	r0, r5
   14bea:	f7ed fbc9 	bl	2380 <print_formatted>
		break;
   14bee:	e6ff      	b.n	149f0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   14bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14bf2:	930c      	str	r3, [sp, #48]	; 0x30
   14bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14bf6:	930b      	str	r3, [sp, #44]	; 0x2c
   14bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14bfa:	930a      	str	r3, [sp, #40]	; 0x28
   14bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14bfe:	9309      	str	r3, [sp, #36]	; 0x24
   14c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c02:	9308      	str	r3, [sp, #32]
   14c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c06:	9307      	str	r3, [sp, #28]
   14c08:	6a23      	ldr	r3, [r4, #32]
   14c0a:	9306      	str	r3, [sp, #24]
   14c0c:	69e3      	ldr	r3, [r4, #28]
   14c0e:	9305      	str	r3, [sp, #20]
   14c10:	69a3      	ldr	r3, [r4, #24]
   14c12:	9304      	str	r3, [sp, #16]
   14c14:	6963      	ldr	r3, [r4, #20]
   14c16:	9303      	str	r3, [sp, #12]
   14c18:	6923      	ldr	r3, [r4, #16]
   14c1a:	9302      	str	r3, [sp, #8]
   14c1c:	68e3      	ldr	r3, [r4, #12]
   14c1e:	9301      	str	r3, [sp, #4]
   14c20:	68a3      	ldr	r3, [r4, #8]
   14c22:	9300      	str	r3, [sp, #0]
   14c24:	e9d4 2300 	ldrd	r2, r3, [r4]
   14c28:	4631      	mov	r1, r6
   14c2a:	4628      	mov	r0, r5
   14c2c:	f7ed fba8 	bl	2380 <print_formatted>
}
   14c30:	e6de      	b.n	149f0 <std_print+0x78>

00014c32 <log_output_flush>:
		     log_output->control_block->offset,
   14c32:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   14c34:	6881      	ldr	r1, [r0, #8]
{
   14c36:	b510      	push	{r4, lr}
   14c38:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   14c3a:	e9d2 2300 	ldrd	r2, r3, [r2]
   14c3e:	6800      	ldr	r0, [r0, #0]
   14c40:	f7ff fe8d 	bl	1495e <buffer_write>
	log_output->control_block->offset = 0;
   14c44:	6863      	ldr	r3, [r4, #4]
   14c46:	2200      	movs	r2, #0
   14c48:	601a      	str	r2, [r3, #0]
}
   14c4a:	bd10      	pop	{r4, pc}

00014c4c <out_func>:
{
   14c4c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   14c4e:	684b      	ldr	r3, [r1, #4]
   14c50:	681a      	ldr	r2, [r3, #0]
   14c52:	68cb      	ldr	r3, [r1, #12]
   14c54:	429a      	cmp	r2, r3
{
   14c56:	4605      	mov	r5, r0
   14c58:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   14c5a:	d102      	bne.n	14c62 <out_func+0x16>
		log_output_flush(out_ctx);
   14c5c:	4608      	mov	r0, r1
   14c5e:	f7ff ffe8 	bl	14c32 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14c62:	6863      	ldr	r3, [r4, #4]
   14c64:	f3bf 8f5b 	dmb	ish
   14c68:	e853 2f00 	ldrex	r2, [r3]
   14c6c:	1c51      	adds	r1, r2, #1
   14c6e:	e843 1000 	strex	r0, r1, [r3]
   14c72:	2800      	cmp	r0, #0
   14c74:	d1f8      	bne.n	14c68 <out_func+0x1c>
   14c76:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
   14c7a:	68a3      	ldr	r3, [r4, #8]
   14c7c:	549d      	strb	r5, [r3, r2]
}
   14c7e:	2000      	movs	r0, #0
   14c80:	bd38      	pop	{r3, r4, r5, pc}

00014c82 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   14c82:	2000      	movs	r0, #0
   14c84:	4770      	bx	lr

00014c86 <get_status>:
	data = get_sub_data(dev, type);
   14c86:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   14c88:	b2c9      	uxtb	r1, r1
	if (data->started) {
   14c8a:	220c      	movs	r2, #12
   14c8c:	fb02 3101 	mla	r1, r2, r1, r3
   14c90:	7a4b      	ldrb	r3, [r1, #9]
   14c92:	b923      	cbnz	r3, 14c9e <get_status+0x18>
	if (data->ref > 0) {
   14c94:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   14c96:	fab0 f080 	clz	r0, r0
   14c9a:	0940      	lsrs	r0, r0, #5
   14c9c:	4770      	bx	lr
   14c9e:	2002      	movs	r0, #2
}
   14ca0:	4770      	bx	lr

00014ca2 <clock_stop>:
{
   14ca2:	b570      	push	{r4, r5, r6, lr}
   14ca4:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   14ca6:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   14ca8:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   14caa:	f04f 0320 	mov.w	r3, #32
   14cae:	f3ef 8611 	mrs	r6, BASEPRI
   14cb2:	f383 8811 	msr	BASEPRI, r3
   14cb6:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   14cba:	220c      	movs	r2, #12
   14cbc:	434a      	muls	r2, r1
   14cbe:	18ab      	adds	r3, r5, r2
   14cc0:	7a18      	ldrb	r0, [r3, #8]
   14cc2:	b190      	cbz	r0, 14cea <clock_stop+0x48>
	data->ref--;
   14cc4:	3801      	subs	r0, #1
   14cc6:	b2c0      	uxtb	r0, r0
   14cc8:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   14cca:	b988      	cbnz	r0, 14cf0 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   14ccc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   14cd0:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cd2:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   14cd4:	6058      	str	r0, [r3, #4]
   14cd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14cda:	2101      	movs	r1, #1
   14cdc:	6011      	str	r1, [r2, #0]
		data->started = false;
   14cde:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   14ce0:	f386 8811 	msr	BASEPRI, r6
   14ce4:	f3bf 8f6f 	isb	sy
}
   14ce8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   14cea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14cee:	e7f7      	b.n	14ce0 <clock_stop+0x3e>
	int err = 0;
   14cf0:	2000      	movs	r0, #0
   14cf2:	e7f5      	b.n	14ce0 <clock_stop+0x3e>

00014cf4 <clock_async_start>:
{
   14cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
   14cf8:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   14cfa:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   14cfe:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   14d00:	b14a      	cbz	r2, 14d16 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   14d02:	230c      	movs	r3, #12
   14d04:	437b      	muls	r3, r7
   14d06:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   14d0a:	429a      	cmp	r2, r3
   14d0c:	d052      	beq.n	14db4 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d0e:	b113      	cbz	r3, 14d16 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14d10:	681b      	ldr	r3, [r3, #0]
	} while (item);
   14d12:	2b00      	cmp	r3, #0
   14d14:	d1f9      	bne.n	14d0a <clock_async_start+0x16>
	__asm__ volatile(
   14d16:	f04f 0320 	mov.w	r3, #32
   14d1a:	f3ef 8c11 	mrs	ip, BASEPRI
   14d1e:	f383 8811 	msr	BASEPRI, r3
   14d22:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   14d26:	250c      	movs	r5, #12
   14d28:	437d      	muls	r5, r7
   14d2a:	eb0e 0305 	add.w	r3, lr, r5
   14d2e:	7a1c      	ldrb	r4, [r3, #8]
   14d30:	3401      	adds	r4, #1
   14d32:	b2e4      	uxtb	r4, r4
   14d34:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   14d36:	f38c 8811 	msr	BASEPRI, ip
   14d3a:	f3bf 8f6f 	isb	sy
	if (data) {
   14d3e:	b35a      	cbz	r2, 14d98 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
   14d40:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   14d44:	f04f 0803 	mov.w	r8, #3
   14d48:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   14d4c:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   14d50:	f1bc 0f00 	cmp.w	ip, #0
   14d54:	d115      	bne.n	14d82 <clock_async_start+0x8e>
	__asm__ volatile(
   14d56:	f04f 0820 	mov.w	r8, #32
   14d5a:	f3ef 8911 	mrs	r9, BASEPRI
   14d5e:	f388 8811 	msr	BASEPRI, r8
   14d62:	f3bf 8f6f 	isb	sy
	parent->next = child;
   14d66:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   14d6a:	f8d3 8004 	ldr.w	r8, [r3, #4]
   14d6e:	f1b8 0f00 	cmp.w	r8, #0
   14d72:	d11b      	bne.n	14dac <clock_async_start+0xb8>
	list->tail = node;
   14d74:	605a      	str	r2, [r3, #4]
	list->head = node;
   14d76:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   14d7a:	f389 8811 	msr	BASEPRI, r9
   14d7e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   14d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d86:	2503      	movs	r5, #3
   14d88:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
   14d8c:	f1bc 0f00 	cmp.w	ip, #0
   14d90:	d002      	beq.n	14d98 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
   14d92:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   14d96:	4798      	blx	r3
	if (ref == 1) {
   14d98:	2c01      	cmp	r4, #1
   14d9a:	d105      	bne.n	14da8 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   14d9c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14da0:	78b3      	ldrb	r3, [r6, #2]
   14da2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14da6:	601c      	str	r4, [r3, #0]
	return 0;
   14da8:	2000      	movs	r0, #0
   14daa:	e005      	b.n	14db8 <clock_async_start+0xc4>
	parent->next = child;
   14dac:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   14db0:	605a      	str	r2, [r3, #4]
}
   14db2:	e7e2      	b.n	14d7a <clock_async_start+0x86>
		return -EBUSY;
   14db4:	f06f 000f 	mvn.w	r0, #15
}
   14db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014dbc <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   14dbc:	2200      	movs	r2, #0
   14dbe:	f7ff bf99 	b.w	14cf4 <clock_async_start>

00014dc2 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14dc2:	2200      	movs	r2, #0
{
   14dc4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14dc6:	2101      	movs	r1, #1
{
   14dc8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14dca:	4610      	mov	r0, r2
   14dcc:	f7ee f8b2 	bl	2f34 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   14dd0:	2000      	movs	r0, #0
   14dd2:	f7ee f89f 	bl	2f14 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   14dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14dda:	2201      	movs	r2, #1
   14ddc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   14de0:	2203      	movs	r2, #3
   14de2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   14de6:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   14de8:	2000      	movs	r0, #0
	list->tail = NULL;
   14dea:	e9c3 0000 	strd	r0, r0, [r3]
   14dee:	68e3      	ldr	r3, [r4, #12]
   14df0:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   14df4:	bd10      	pop	{r4, pc}

00014df6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   14df6:	4770      	bx	lr

00014df8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   14df8:	4770      	bx	lr

00014dfa <abort_function>:
	while(1);
   14dfa:	e7fe      	b.n	14dfa <abort_function>

00014dfc <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   14dfc:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   14dfe:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   14e00:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   14e02:	bf9d      	ittte	ls
   14e04:	6882      	ldrls	r2, [r0, #8]
   14e06:	18d2      	addls	r2, r2, r3
   14e08:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   14e0c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   14e10:	bf94      	ite	ls
   14e12:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   14e14:	1a58      	subhi	r0, r3, r1
}
   14e16:	4770      	bx	lr

00014e18 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   14e1c:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14e20:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   14e22:	eba9 0804 	sub.w	r8, r9, r4
   14e26:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   14e28:	4590      	cmp	r8, r2
   14e2a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14e2c:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   14e2e:	4414      	add	r4, r2
   14e30:	d904      	bls.n	14e3c <_WriteNoCheck+0x24>
   14e32:	f009 fbf4 	bl	1e61e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   14e36:	60ec      	str	r4, [r5, #12]
}
   14e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14e3c:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   14e3e:	eba4 0409 	sub.w	r4, r4, r9
   14e42:	f009 fbec 	bl	1e61e <memcpy>
   14e46:	6868      	ldr	r0, [r5, #4]
   14e48:	4622      	mov	r2, r4
   14e4a:	eb07 0108 	add.w	r1, r7, r8
   14e4e:	e7f0      	b.n	14e32 <_WriteNoCheck+0x1a>

00014e50 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   14e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   14e54:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   14e56:	4606      	mov	r6, r0
   14e58:	4689      	mov	r9, r1
   14e5a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   14e5c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   14e60:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   14e62:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   14e64:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   14e66:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   14e68:	bf28      	it	cs
   14e6a:	18e4      	addcs	r4, r4, r3
   14e6c:	3c01      	subs	r4, #1
   14e6e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   14e70:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   14e72:	42bc      	cmp	r4, r7
   14e74:	bf28      	it	cs
   14e76:	463c      	movcs	r4, r7
   14e78:	4294      	cmp	r4, r2
   14e7a:	bf28      	it	cs
   14e7c:	4614      	movcs	r4, r2
   14e7e:	4649      	mov	r1, r9
   14e80:	4428      	add	r0, r5
   14e82:	4622      	mov	r2, r4
   14e84:	f009 fbcb 	bl	1e61e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   14e88:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   14e8a:	4425      	add	r5, r4
      WrOff = 0u;
   14e8c:	42ab      	cmp	r3, r5
   14e8e:	bf08      	it	eq
   14e90:	2500      	moveq	r5, #0
  } while (NumBytes);
   14e92:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   14e94:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   14e96:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   14e98:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   14e9a:	d1e1      	bne.n	14e60 <_WriteBlocking+0x10>
}
   14e9c:	4640      	mov	r0, r8
   14e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014ea2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   14ea2:	f7ed bf2f 	b.w	2d04 <_DoInit>

00014ea6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   14ea6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   14ea8:	f7ff fffb 	bl	14ea2 <SEGGER_RTT_Init>

	return 0;
}
   14eac:	2000      	movs	r0, #0
   14eae:	bd08      	pop	{r3, pc}

00014eb0 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14eb0:	2100      	movs	r1, #0
   14eb2:	2001      	movs	r0, #1
   14eb4:	f7ee b8a2 	b.w	2ffc <z_arm_fatal_error>

00014eb8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14eb8:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   14eba:	6800      	ldr	r0, [r0, #0]
   14ebc:	f7ee b89e 	b.w	2ffc <z_arm_fatal_error>

00014ec0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14ec0:	b508      	push	{r3, lr}
	handler();
   14ec2:	f7ee f8d3 	bl	306c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14eca:	f7ee bb57 	b.w	357c <z_arm_exc_exit>

00014ece <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   14ece:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   14ed0:	4601      	mov	r1, r0
   14ed2:	4618      	mov	r0, r3
   14ed4:	f7ff bed5 	b.w	14c82 <__cxa_atexit>

00014ed8 <_stdout_hook_default>:
}
   14ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14edc:	4770      	bx	lr

00014ede <_stdin_hook_default>:
}
   14ede:	2000      	movs	r0, #0
   14ee0:	4770      	bx	lr

00014ee2 <_read>:
{
   14ee2:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   14ee4:	4611      	mov	r1, r2
   14ee6:	f7ee bc55 	b.w	3794 <z_impl_zephyr_read_stdin>

00014eea <_write>:
{
   14eea:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14eec:	4611      	mov	r1, r2
   14eee:	f7ee bc65 	b.w	37bc <z_impl_zephyr_write_stdout>

00014ef2 <_close>:
   14ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ef6:	4770      	bx	lr

00014ef8 <_lseek>:
}
   14ef8:	2000      	movs	r0, #0
   14efa:	4770      	bx	lr

00014efc <_isatty>:
}
   14efc:	2001      	movs	r0, #1
   14efe:	4770      	bx	lr

00014f00 <_kill>:
}
   14f00:	2000      	movs	r0, #0
   14f02:	4770      	bx	lr

00014f04 <_getpid>:
}
   14f04:	2000      	movs	r0, #0
   14f06:	4770      	bx	lr

00014f08 <_fstat>:
	st->st_mode = S_IFCHR;
   14f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   14f0c:	604b      	str	r3, [r1, #4]
}
   14f0e:	2000      	movs	r0, #0
   14f10:	4770      	bx	lr

00014f12 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   14f12:	f7ef bc4d 	b.w	47b0 <z_impl_z_errno>

00014f16 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   14f16:	f7ef ba31 	b.w	437c <SystemInit>

00014f1a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f1a:	6843      	ldr	r3, [r0, #4]
   14f1c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14f1e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   14f22:	600b      	str	r3, [r1, #0]
}
   14f24:	2000      	movs	r0, #0
   14f26:	4770      	bx	lr

00014f28 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f28:	6843      	ldr	r3, [r0, #4]
   14f2a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14f2c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14f30:	4042      	eors	r2, r0
   14f32:	400a      	ands	r2, r1
   14f34:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14f36:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   14f3a:	2000      	movs	r0, #0
   14f3c:	4770      	bx	lr

00014f3e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f3e:	6843      	ldr	r3, [r0, #4]
   14f40:	685b      	ldr	r3, [r3, #4]
}
   14f42:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   14f44:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   14f48:	4770      	bx	lr

00014f4a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f4a:	6843      	ldr	r3, [r0, #4]
   14f4c:	685b      	ldr	r3, [r3, #4]
}
   14f4e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   14f50:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   14f54:	4770      	bx	lr

00014f56 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14f56:	6843      	ldr	r3, [r0, #4]
   14f58:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14f5a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   14f5e:	4059      	eors	r1, r3
    p_reg->OUT = value;
   14f60:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   14f64:	2000      	movs	r0, #0
   14f66:	4770      	bx	lr

00014f68 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14f68:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   14f6a:	6858      	ldr	r0, [r3, #4]
{
   14f6c:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   14f6e:	b158      	cbz	r0, 14f88 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14f70:	2400      	movs	r4, #0
   14f72:	4281      	cmp	r1, r0
   14f74:	d113      	bne.n	14f9e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   14f76:	6808      	ldr	r0, [r1, #0]
   14f78:	b95c      	cbnz	r4, 14f92 <gpio_nrfx_manage_callback+0x2a>
   14f7a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   14f7c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   14f7e:	42a1      	cmp	r1, r4
   14f80:	d100      	bne.n	14f84 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   14f82:	6098      	str	r0, [r3, #8]
	parent->next = child;
   14f84:	2000      	movs	r0, #0
   14f86:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14f88:	b972      	cbnz	r2, 14fa8 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14f8a:	2000      	movs	r0, #0
}
   14f8c:	bd30      	pop	{r4, r5, pc}
   14f8e:	4628      	mov	r0, r5
   14f90:	e7ef      	b.n	14f72 <gpio_nrfx_manage_callback+0xa>
   14f92:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   14f94:	6898      	ldr	r0, [r3, #8]
   14f96:	4281      	cmp	r1, r0
	list->tail = node;
   14f98:	bf08      	it	eq
   14f9a:	609c      	streq	r4, [r3, #8]
}
   14f9c:	e7f2      	b.n	14f84 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f9e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14fa0:	4604      	mov	r4, r0
   14fa2:	2d00      	cmp	r5, #0
   14fa4:	d1f3      	bne.n	14f8e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   14fa6:	b13a      	cbz	r2, 14fb8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   14fa8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   14faa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   14fac:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   14fae:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   14fb0:	2800      	cmp	r0, #0
   14fb2:	d1ea      	bne.n	14f8a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   14fb4:	6099      	str	r1, [r3, #8]
}
   14fb6:	e7e9      	b.n	14f8c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   14fb8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14fbc:	e7e6      	b.n	14f8c <gpio_nrfx_manage_callback+0x24>

00014fbe <fire_callbacks>:
{
   14fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   14fc0:	68c7      	ldr	r7, [r0, #12]
{
   14fc2:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fc4:	6879      	ldr	r1, [r7, #4]
{
   14fc6:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fc8:	b199      	cbz	r1, 14ff2 <fire_callbacks+0x34>
	return node->next;
   14fca:	680c      	ldr	r4, [r1, #0]
   14fcc:	2c00      	cmp	r4, #0
   14fce:	bf38      	it	cc
   14fd0:	2400      	movcc	r4, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   14fd2:	688a      	ldr	r2, [r1, #8]
   14fd4:	693b      	ldr	r3, [r7, #16]
   14fd6:	4032      	ands	r2, r6
   14fd8:	421a      	tst	r2, r3
   14fda:	d002      	beq.n	14fe2 <fire_callbacks+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   14fdc:	684b      	ldr	r3, [r1, #4]
   14fde:	4628      	mov	r0, r5
   14fe0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14fe2:	b134      	cbz	r4, 14ff2 <fire_callbacks+0x34>
   14fe4:	6823      	ldr	r3, [r4, #0]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	bf38      	it	cc
   14fea:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14fec:	4621      	mov	r1, r4
   14fee:	461c      	mov	r4, r3
   14ff0:	e7ef      	b.n	14fd2 <fire_callbacks+0x14>
}
   14ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014ff4 <check_level_trigger_pins>:
{
   14ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   14ff6:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14ff8:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   14ffa:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
   14ffe:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   15000:	e9d3 1006 	ldrd	r1, r0, [r3, #24]
   15004:	4301      	orrs	r1, r0
   15006:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1500a:	6879      	ldr	r1, [r7, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1500c:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   1500e:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   15012:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   15014:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   15018:	2501      	movs	r5, #1
	u32_t pin = 0U;
   1501a:	2600      	movs	r6, #0
	while (level_pins) {
   1501c:	b90a      	cbnz	r2, 15022 <check_level_trigger_pins+0x2e>
}
   1501e:	4620      	mov	r0, r4
   15020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   15022:	422a      	tst	r2, r5
   15024:	d009      	beq.n	1503a <check_level_trigger_pins+0x46>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15026:	7a3b      	ldrb	r3, [r7, #8]
   15028:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1502c:	2100      	movs	r1, #0
   1502e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15032:	f7ee fcb9 	bl	39a8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15036:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1503a:	3601      	adds	r6, #1
		bit <<= 1;
   1503c:	006d      	lsls	r5, r5, #1
   1503e:	e7ed      	b.n	1501c <check_level_trigger_pins+0x28>

00015040 <gpio_nrfx_pin_disable_callback>:
{
   15040:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   15042:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   15044:	2201      	movs	r2, #1
   15046:	6923      	ldr	r3, [r4, #16]
   15048:	408a      	lsls	r2, r1
   1504a:	ea23 0302 	bic.w	r3, r3, r2
   1504e:	6123      	str	r3, [r4, #16]
}
   15050:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   15054:	f7ee bcbc 	b.w	39d0 <gpiote_pin_int_cfg>

00015058 <cfg_level_pins>:
{
   15058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1505a:	68c4      	ldr	r4, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1505c:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1505e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   15062:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   15064:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
   15068:	430b      	orrs	r3, r1
   1506a:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
   1506e:	2601      	movs	r6, #1
	u32_t pin = 0U;
   15070:	2500      	movs	r5, #0
	while (level_pins) {
   15072:	b902      	cbnz	r2, 15076 <cfg_level_pins+0x1e>
}
   15074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   15076:	4216      	tst	r6, r2
   15078:	d00f      	beq.n	1509a <cfg_level_pins+0x42>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1507a:	6961      	ldr	r1, [r4, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1507c:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1507e:	40e9      	lsrs	r1, r5
   15080:	f001 0101 	and.w	r1, r1, #1
   15084:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15088:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1508c:	b2c9      	uxtb	r1, r1
   1508e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15092:	f7ee fc89 	bl	39a8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15096:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   1509a:	3501      	adds	r5, #1
		bit <<= 1;
   1509c:	0076      	lsls	r6, r6, #1
   1509e:	e7e8      	b.n	15072 <cfg_level_pins+0x1a>

000150a0 <gpio_nrfx_pin_enable_callback>:
{
   150a0:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   150a2:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   150a4:	2201      	movs	r2, #1
   150a6:	6923      	ldr	r3, [r4, #16]
   150a8:	408a      	lsls	r2, r1
   150aa:	4313      	orrs	r3, r2
   150ac:	6123      	str	r3, [r4, #16]
}
   150ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   150b2:	f7ee bc8d 	b.w	39d0 <gpiote_pin_int_cfg>

000150b6 <any_other_channel_is_active>:
{
   150b6:	b530      	push	{r4, r5, lr}
   150b8:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   150ba:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   150bc:	b2da      	uxtb	r2, r3
   150be:	4282      	cmp	r2, r0
   150c0:	d007      	beq.n	150d2 <any_other_channel_is_active+0x1c>
	u16_t pulse_cycle =
   150c2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   150c6:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   150ca:	b112      	cbz	r2, 150d2 <any_other_channel_is_active+0x1c>
   150cc:	898d      	ldrh	r5, [r1, #12]
   150ce:	4295      	cmp	r5, r2
   150d0:	d804      	bhi.n	150dc <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   150d2:	3301      	adds	r3, #1
   150d4:	2b04      	cmp	r3, #4
   150d6:	d1f1      	bne.n	150bc <any_other_channel_is_active+0x6>
	return false;
   150d8:	2000      	movs	r0, #0
}
   150da:	bd30      	pop	{r4, r5, pc}
			return true;
   150dc:	2001      	movs	r0, #1
   150de:	e7fc      	b.n	150da <any_other_channel_is_active+0x24>

000150e0 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   150e0:	68c2      	ldr	r2, [r0, #12]
{
   150e2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   150e4:	e892 0003 	ldmia.w	r2, {r0, r1}
   150e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   150ec:	2000      	movs	r0, #0
   150ee:	4770      	bx	lr

000150f0 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   150f0:	68c2      	ldr	r2, [r0, #12]
{
   150f2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   150f4:	e892 0003 	ldmia.w	r2, {r0, r1}
   150f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   150fc:	2000      	movs	r0, #0
   150fe:	4770      	bx	lr

00015100 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15100:	6843      	ldr	r3, [r0, #4]
   15102:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15104:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15108:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1510c:	4770      	bx	lr

0001510e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1510e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15110:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15112:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15114:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
{
   15118:	b082      	sub	sp, #8
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1511a:	b160      	cbz	r0, 15136 <uarte_nrfx_poll_in+0x28>
	*c = data->rx_data;
   1511c:	7b12      	ldrb	r2, [r2, #12]
   1511e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15120:	2000      	movs	r0, #0
   15122:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   15126:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1512a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1512c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1512e:	2201      	movs	r2, #1
   15130:	601a      	str	r2, [r3, #0]
}
   15132:	b002      	add	sp, #8
   15134:	4770      	bx	lr
		return -1;
   15136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1513a:	e7fa      	b.n	15132 <uarte_nrfx_poll_in+0x24>

0001513c <uarte_nrfx_poll_out>:
{
   1513c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   15140:	6843      	ldr	r3, [r0, #4]
{
   15142:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   15146:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15148:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   1514a:	f000 f9a8 	bl	1549e <k_is_in_isr>
   1514e:	b9e0      	cbnz	r0, 1518a <uarte_nrfx_poll_out+0x4e>
		lock = &data->poll_out_lock;
   15150:	f106 0708 	add.w	r7, r6, #8
   15154:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15156:	f04f 0801 	mov.w	r8, #1
   1515a:	f3bf 8f5b 	dmb	ish
   1515e:	e857 3f00 	ldrex	r3, [r7]
   15162:	2b00      	cmp	r3, #0
   15164:	d103      	bne.n	1516e <uarte_nrfx_poll_out+0x32>
   15166:	e847 8200 	strex	r2, r8, [r7]
   1516a:	2a00      	cmp	r2, #0
   1516c:	d1f7      	bne.n	1515e <uarte_nrfx_poll_out+0x22>
   1516e:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   15172:	d00c      	beq.n	1518e <uarte_nrfx_poll_out+0x52>
	return z_impl_k_sleep(timeout);
   15174:	2021      	movs	r0, #33	; 0x21
   15176:	2100      	movs	r1, #0
   15178:	3d01      	subs	r5, #1
   1517a:	f7f0 f8d3 	bl	5324 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1517e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15182:	d1ea      	bne.n	1515a <uarte_nrfx_poll_out+0x1e>
}
   15184:	b004      	add	sp, #16
   15186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   1518a:	2301      	movs	r3, #1
   1518c:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1518e:	2300      	movs	r3, #0
   15190:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   15194:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15198:	9303      	str	r3, [sp, #12]
    (void)dummy;
   1519a:	9b03      	ldr	r3, [sp, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1519c:	f10d 0307 	add.w	r3, sp, #7
   151a0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   151a4:	2301      	movs	r3, #1
   151a6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151aa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   151ae:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   151b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   151b4:	b923      	cbnz	r3, 151c0 <uarte_nrfx_poll_out+0x84>
   151b6:	2001      	movs	r0, #1
   151b8:	f000 f810 	bl	151dc <nrfx_busy_wait>
   151bc:	3d01      	subs	r5, #1
   151be:	d1f7      	bne.n	151b0 <uarte_nrfx_poll_out+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151c0:	2301      	movs	r3, #1
   151c2:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   151c4:	2300      	movs	r3, #0
   151c6:	60b3      	str	r3, [r6, #8]
   151c8:	e7dc      	b.n	15184 <uarte_nrfx_poll_out+0x48>

000151ca <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
   151ca:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   151cc:	f7ed fd00 	bl	2bd0 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   151d0:	f7ed fd82 	bl	2cd8 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   151d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   151d8:	f7fc bd0c 	b.w	11bf4 <nrf_cc310_platform_init_no_rng>

000151dc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   151dc:	f000 b965 	b.w	154aa <z_impl_k_busy_wait>

000151e0 <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151e0:	2300      	movs	r3, #0
   151e2:	5043      	str	r3, [r0, r1]
{
   151e4:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   151e6:	5843      	ldr	r3, [r0, r1]
   151e8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   151ea:	9b01      	ldr	r3, [sp, #4]
}
   151ec:	b002      	add	sp, #8
   151ee:	4770      	bx	lr

000151f0 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   151f0:	b538      	push	{r3, r4, r5, lr}
   151f2:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   151f4:	2302      	movs	r3, #2
   151f6:	720b      	strb	r3, [r1, #8]
    if (p_cb->handler)
   151f8:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
   151fa:	724a      	strb	r2, [r1, #9]
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   151fc:	4604      	mov	r4, r0
    if (p_cb->handler)
   151fe:	b17b      	cbz	r3, 15220 <start_playback.isra.0+0x30>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   15200:	f012 0f04 	tst.w	r2, #4
   15204:	bf0c      	ite	eq
   15206:	2182      	moveq	r1, #130	; 0x82
   15208:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1520a:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1520c:	bf48      	it	mi
   1520e:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   15212:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   15214:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   15216:	bf48      	it	mi
   15218:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1521c:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   15220:	6820      	ldr	r0, [r4, #0]
   15222:	f44f 7182 	mov.w	r1, #260	; 0x104
   15226:	f7ff ffdb 	bl	151e0 <nrf_pwm_event_clear>
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1522a:	6820      	ldr	r0, [r4, #0]
   1522c:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15230:	bf05      	ittet	eq
   15232:	2301      	moveq	r3, #1
   15234:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
   15236:	1940      	addne	r0, r0, r5
    return 0;
   15238:	2000      	moveq	r0, #0
}
   1523a:	bd38      	pop	{r3, r4, r5, pc}

0001523c <nrfx_pwm_stop>:
{
   1523c:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1523e:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   15240:	2200      	movs	r2, #0
   15242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15246:	2201      	movs	r2, #1
   15248:	605a      	str	r2, [r3, #4]
{
   1524a:	4605      	mov	r5, r0
   1524c:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1524e:	f7ef fa61 	bl	4714 <nrfx_pwm_is_stopped>
   15252:	b938      	cbnz	r0, 15264 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   15254:	4628      	mov	r0, r5
   15256:	f7ef fa5d 	bl	4714 <nrfx_pwm_is_stopped>
   1525a:	b918      	cbnz	r0, 15264 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   1525c:	2c00      	cmp	r4, #0
   1525e:	d1f9      	bne.n	15254 <nrfx_pwm_stop+0x18>
}
   15260:	4620      	mov	r0, r4
   15262:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   15264:	2401      	movs	r4, #1
   15266:	e7fb      	b.n	15260 <nrfx_pwm_stop+0x24>

00015268 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   15268:	f7ff bdc6 	b.w	14df8 <z_clock_idle_exit>

0001526c <k_mem_slab_init>:
{
   1526c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1526e:	2400      	movs	r4, #0
   15270:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15272:	ea41 0402 	orr.w	r4, r1, r2
   15276:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1527a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1527e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15280:	d10c      	bne.n	1529c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   15282:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15284:	42a3      	cmp	r3, r4
   15286:	d103      	bne.n	15290 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   15288:	e9c0 0000 	strd	r0, r0, [r0]
}
   1528c:	2000      	movs	r0, #0
}
   1528e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   15290:	6945      	ldr	r5, [r0, #20]
   15292:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15294:	3401      	adds	r4, #1
		slab->free_list = p;
   15296:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   15298:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1529a:	e7f3      	b.n	15284 <k_mem_slab_init+0x18>
		return -EINVAL;
   1529c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   152a0:	e7f5      	b.n	1528e <k_mem_slab_init+0x22>

000152a2 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   152a2:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   152a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   152a8:	e9c0 0000 	strd	r0, r0, [r0]
}
   152ac:	4618      	mov	r0, r3
   152ae:	4770      	bx	lr

000152b0 <z_find_first_thread_to_unpend>:
{
   152b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   152b2:	f04f 0320 	mov.w	r3, #32
   152b6:	f3ef 8411 	mrs	r4, BASEPRI
   152ba:	f383 8811 	msr	BASEPRI, r3
   152be:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   152c2:	f000 f83f 	bl	15344 <z_priq_dumb_best>
	__asm__ volatile(
   152c6:	f384 8811 	msr	BASEPRI, r4
   152ca:	f3bf 8f6f 	isb	sy
}
   152ce:	bd10      	pop	{r4, pc}

000152d0 <z_unpend_thread_no_timeout>:
{
   152d0:	b538      	push	{r3, r4, r5, lr}
   152d2:	4604      	mov	r4, r0
	__asm__ volatile(
   152d4:	f04f 0320 	mov.w	r3, #32
   152d8:	f3ef 8511 	mrs	r5, BASEPRI
   152dc:	f383 8811 	msr	BASEPRI, r3
   152e0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   152e4:	4601      	mov	r1, r0
   152e6:	6880      	ldr	r0, [r0, #8]
   152e8:	f7ef fd48 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   152ec:	7b63      	ldrb	r3, [r4, #13]
   152ee:	f023 0302 	bic.w	r3, r3, #2
   152f2:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   152f4:	2300      	movs	r3, #0
   152f6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   152f8:	f385 8811 	msr	BASEPRI, r5
   152fc:	f3bf 8f6f 	isb	sy
}
   15300:	bd38      	pop	{r3, r4, r5, pc}

00015302 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15302:	b921      	cbnz	r1, 1530e <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15304:	f3ef 8005 	mrs	r0, IPSR
   15308:	b908      	cbnz	r0, 1530e <z_reschedule+0xc>
   1530a:	f7ed bdb5 	b.w	2e78 <arch_swap>
   1530e:	f381 8811 	msr	BASEPRI, r1
   15312:	f3bf 8f6f 	isb	sy
}
   15316:	4770      	bx	lr

00015318 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15318:	4603      	mov	r3, r0
   1531a:	b920      	cbnz	r0, 15326 <z_reschedule_irqlock+0xe>
   1531c:	f3ef 8205 	mrs	r2, IPSR
   15320:	b90a      	cbnz	r2, 15326 <z_reschedule_irqlock+0xe>
   15322:	f7ed bda9 	b.w	2e78 <arch_swap>
   15326:	f383 8811 	msr	BASEPRI, r3
   1532a:	f3bf 8f6f 	isb	sy
}
   1532e:	4770      	bx	lr

00015330 <z_reschedule_unlocked>:
	__asm__ volatile(
   15330:	f04f 0320 	mov.w	r3, #32
   15334:	f3ef 8011 	mrs	r0, BASEPRI
   15338:	f383 8811 	msr	BASEPRI, r3
   1533c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15340:	f7ff bfea 	b.w	15318 <z_reschedule_irqlock>

00015344 <z_priq_dumb_best>:
	return list->head == list;
   15344:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15346:	4298      	cmp	r0, r3
   15348:	d004      	beq.n	15354 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1534a:	2b00      	cmp	r3, #0
   1534c:	bf38      	it	cc
   1534e:	2300      	movcc	r3, #0
   15350:	4618      	mov	r0, r3
   15352:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15354:	2000      	movs	r0, #0
}
   15356:	4770      	bx	lr

00015358 <z_ready_thread>:
{
   15358:	b510      	push	{r4, lr}
   1535a:	f04f 0320 	mov.w	r3, #32
   1535e:	f3ef 8411 	mrs	r4, BASEPRI
   15362:	f383 8811 	msr	BASEPRI, r3
   15366:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1536a:	f7ef fd5d 	bl	4e28 <ready_thread>
	__asm__ volatile(
   1536e:	f384 8811 	msr	BASEPRI, r4
   15372:	f3bf 8f6f 	isb	sy
}
   15376:	bd10      	pop	{r4, pc}

00015378 <z_thread_timeout>:
{
   15378:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   1537a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1537e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15380:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   15384:	b1c3      	cbz	r3, 153b8 <z_thread_timeout+0x40>
	__asm__ volatile(
   15386:	f04f 0320 	mov.w	r3, #32
   1538a:	f3ef 8511 	mrs	r5, BASEPRI
   1538e:	f383 8811 	msr	BASEPRI, r3
   15392:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   15396:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1539a:	f7ef fcef 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1539e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   153a2:	f023 0302 	bic.w	r3, r3, #2
   153a6:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   153aa:	2300      	movs	r3, #0
   153ac:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   153b0:	f385 8811 	msr	BASEPRI, r5
   153b4:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   153b8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   153bc:	f023 0314 	bic.w	r3, r3, #20
   153c0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   153c4:	4608      	mov	r0, r1
}
   153c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   153ca:	f7ff bfc5 	b.w	15358 <z_ready_thread>

000153ce <z_remove_thread_from_ready_q>:
{
   153ce:	b510      	push	{r4, lr}
	__asm__ volatile(
   153d0:	f04f 0320 	mov.w	r3, #32
   153d4:	f3ef 8411 	mrs	r4, BASEPRI
   153d8:	f383 8811 	msr	BASEPRI, r3
   153dc:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   153e0:	f7ef fe80 	bl	50e4 <unready_thread>
	__asm__ volatile(
   153e4:	f384 8811 	msr	BASEPRI, r4
   153e8:	f3bf 8f6f 	isb	sy
}
   153ec:	bd10      	pop	{r4, pc}

000153ee <add_to_waitq_locked>:
{
   153ee:	b538      	push	{r3, r4, r5, lr}
   153f0:	4604      	mov	r4, r0
   153f2:	460d      	mov	r5, r1
	unready_thread(thread);
   153f4:	f7ef fe76 	bl	50e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   153f8:	7b63      	ldrb	r3, [r4, #13]
   153fa:	f043 0302 	orr.w	r3, r3, #2
   153fe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   15400:	b1c5      	cbz	r5, 15434 <add_to_waitq_locked+0x46>
	return list->head == list;
   15402:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   15404:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15406:	429d      	cmp	r5, r3
   15408:	bf08      	it	eq
   1540a:	2300      	moveq	r3, #0
   1540c:	2b00      	cmp	r3, #0
   1540e:	bf38      	it	cc
   15410:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15412:	b183      	cbz	r3, 15436 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   15414:	f994 100e 	ldrsb.w	r1, [r4, #14]
   15418:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1541c:	4291      	cmp	r1, r2
   1541e:	db04      	blt.n	1542a <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   15420:	686a      	ldr	r2, [r5, #4]
   15422:	429a      	cmp	r2, r3
   15424:	d007      	beq.n	15436 <add_to_waitq_locked+0x48>
   15426:	681b      	ldr	r3, [r3, #0]
   15428:	e7f3      	b.n	15412 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1542a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1542c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   15430:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   15432:	605c      	str	r4, [r3, #4]
}
   15434:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   15436:	686b      	ldr	r3, [r5, #4]
   15438:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1543a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1543c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1543e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15440:	606c      	str	r4, [r5, #4]
   15442:	e7f7      	b.n	15434 <add_to_waitq_locked+0x46>

00015444 <z_unpend_first_thread>:
{
   15444:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15446:	f04f 0320 	mov.w	r3, #32
   1544a:	f3ef 8211 	mrs	r2, BASEPRI
   1544e:	f383 8811 	msr	BASEPRI, r3
   15452:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   15456:	f7ff ff75 	bl	15344 <z_priq_dumb_best>
   1545a:	4604      	mov	r4, r0
	__asm__ volatile(
   1545c:	f382 8811 	msr	BASEPRI, r2
   15460:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   15464:	b1c8      	cbz	r0, 1549a <z_unpend_first_thread+0x56>
	__asm__ volatile(
   15466:	f04f 0320 	mov.w	r3, #32
   1546a:	f3ef 8511 	mrs	r5, BASEPRI
   1546e:	f383 8811 	msr	BASEPRI, r3
   15472:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   15476:	4601      	mov	r1, r0
   15478:	6880      	ldr	r0, [r0, #8]
   1547a:	f7ef fc7f 	bl	4d7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1547e:	7b63      	ldrb	r3, [r4, #13]
   15480:	f023 0302 	bic.w	r3, r3, #2
   15484:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   15486:	2300      	movs	r3, #0
   15488:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1548a:	f385 8811 	msr	BASEPRI, r5
   1548e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   15492:	f104 0018 	add.w	r0, r4, #24
   15496:	f000 f80f 	bl	154b8 <z_abort_timeout>
}
   1549a:	4620      	mov	r0, r4
   1549c:	bd38      	pop	{r3, r4, r5, pc}

0001549e <k_is_in_isr>:
   1549e:	f3ef 8005 	mrs	r0, IPSR
}
   154a2:	3800      	subs	r0, #0
   154a4:	bf18      	it	ne
   154a6:	2001      	movne	r0, #1
   154a8:	4770      	bx	lr

000154aa <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   154aa:	f7ee b9f7 	b.w	389c <arch_busy_wait>

000154ae <z_impl_k_thread_name_set>:
}
   154ae:	f06f 0057 	mvn.w	r0, #87	; 0x57
   154b2:	4770      	bx	lr

000154b4 <k_thread_name_get>:
}
   154b4:	2000      	movs	r0, #0
   154b6:	4770      	bx	lr

000154b8 <z_abort_timeout>:
{
   154b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   154ba:	f04f 0220 	mov.w	r2, #32
   154be:	f3ef 8411 	mrs	r4, BASEPRI
   154c2:	f382 8811 	msr	BASEPRI, r2
   154c6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   154ca:	6803      	ldr	r3, [r0, #0]
   154cc:	b13b      	cbz	r3, 154de <z_abort_timeout+0x26>
			remove_timeout(to);
   154ce:	f7f0 f857 	bl	5580 <remove_timeout>
			ret = 0;
   154d2:	2000      	movs	r0, #0
	__asm__ volatile(
   154d4:	f384 8811 	msr	BASEPRI, r4
   154d8:	f3bf 8f6f 	isb	sy
}
   154dc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   154de:	f06f 0015 	mvn.w	r0, #21
   154e2:	e7f7      	b.n	154d4 <z_abort_timeout+0x1c>

000154e4 <z_get_next_timeout_expiry>:
{
   154e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   154e6:	f04f 0320 	mov.w	r3, #32
   154ea:	f3ef 8411 	mrs	r4, BASEPRI
   154ee:	f383 8811 	msr	BASEPRI, r3
   154f2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   154f6:	f7f0 f857 	bl	55a8 <next_timeout>
	__asm__ volatile(
   154fa:	f384 8811 	msr	BASEPRI, r4
   154fe:	f3bf 8f6f 	isb	sy
}
   15502:	bd10      	pop	{r4, pc}

00015504 <z_set_timeout_expiry>:
{
   15504:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15506:	4604      	mov	r4, r0
   15508:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1550a:	f04f 0320 	mov.w	r3, #32
   1550e:	f3ef 8511 	mrs	r5, BASEPRI
   15512:	f383 8811 	msr	BASEPRI, r3
   15516:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1551a:	f7f0 f845 	bl	55a8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1551e:	2801      	cmp	r0, #1
   15520:	dd05      	ble.n	1552e <z_set_timeout_expiry+0x2a>
   15522:	42a0      	cmp	r0, r4
   15524:	9901      	ldr	r1, [sp, #4]
   15526:	dd02      	ble.n	1552e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   15528:	4620      	mov	r0, r4
   1552a:	f7ed fabf 	bl	2aac <z_clock_set_timeout>
	__asm__ volatile(
   1552e:	f385 8811 	msr	BASEPRI, r5
   15532:	f3bf 8f6f 	isb	sy
}
   15536:	b003      	add	sp, #12
   15538:	bd30      	pop	{r4, r5, pc}

0001553a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1553a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1553c:	f7f0 f91e 	bl	577c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   15540:	bd08      	pop	{r3, pc}

00015542 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   15542:	f7f0 b91b 	b.w	577c <z_tick_get>

00015546 <k_timer_init>:
	timer->status = 0U;
   15546:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   15548:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   1554c:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   15550:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   15554:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   15558:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   1555a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1555c:	4770      	bx	lr

0001555e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1555e:	b510      	push	{r4, lr}
   15560:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   15562:	f7ff ffa9 	bl	154b8 <z_abort_timeout>

	if (inactive) {
   15566:	b9d8      	cbnz	r0, 155a0 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   15568:	69e3      	ldr	r3, [r4, #28]
   1556a:	b10b      	cbz	r3, 15570 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1556c:	4620      	mov	r0, r4
   1556e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   15570:	f104 0010 	add.w	r0, r4, #16
   15574:	2100      	movs	r1, #0
   15576:	f7ff fe9b 	bl	152b0 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1557a:	4604      	mov	r4, r0
   1557c:	b180      	cbz	r0, 155a0 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1557e:	f7ff fea7 	bl	152d0 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   15582:	4620      	mov	r0, r4
   15584:	f7ff fee8 	bl	15358 <z_ready_thread>
	__asm__ volatile(
   15588:	f04f 0320 	mov.w	r3, #32
   1558c:	f3ef 8011 	mrs	r0, BASEPRI
   15590:	f383 8811 	msr	BASEPRI, r3
   15594:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   15598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1559c:	f7ff bebc 	b.w	15318 <z_reschedule_irqlock>
   155a0:	bd10      	pop	{r4, pc}

000155a2 <k_heap_init>:
{
   155a2:	b410      	push	{r4}
   155a4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   155a8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   155ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   155b0:	f7ff b805 	b.w	145be <sys_heap_init>

000155b4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   155b4:	4770      	bx	lr

000155b6 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
   155b6:	6803      	ldr	r3, [r0, #0]
   155b8:	691b      	ldr	r3, [r3, #16]
   155ba:	4718      	bx	r3

000155bc <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
   155bc:	6803      	ldr	r3, [r0, #0]
   155be:	695b      	ldr	r3, [r3, #20]
   155c0:	4718      	bx	r3

000155c2 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155c2:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   155c4:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155c6:	d010      	beq.n	155ea <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155c8:	f241 0304 	movw	r3, #4100	; 0x1004
      if (registration.builtin_code == op) {
   155cc:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155d0:	58c4      	ldr	r4, [r0, r3]
   155d2:	2300      	movs	r3, #0
   155d4:	429c      	cmp	r4, r3
   155d6:	d008      	beq.n	155ea <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
   155d8:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
   155da:	58ae      	ldr	r6, [r5, r2]
   155dc:	428e      	cmp	r6, r1
   155de:	d102      	bne.n	155e6 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
   155e0:	3204      	adds	r2, #4
   155e2:	4410      	add	r0, r2
  }
   155e4:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   155e6:	3301      	adds	r3, #1
   155e8:	e7f4      	b.n	155d4 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x12>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   155ea:	2000      	movs	r0, #0
   155ec:	e7fa      	b.n	155e4 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x22>

000155ee <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   155ee:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   155f0:	f241 2388 	movw	r3, #4744	; 0x1288
   155f4:	58c4      	ldr	r4, [r0, r3]
   155f6:	2c80      	cmp	r4, #128	; 0x80
   155f8:	d80e      	bhi.n	15618 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
   155fa:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
   155fe:	3208      	adds	r2, #8
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   15600:	2300      	movs	r3, #0
   15602:	429c      	cmp	r4, r3
   15604:	d00c      	beq.n	15620 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x32>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   15606:	f812 5b01 	ldrb.w	r5, [r2], #1
   1560a:	428d      	cmp	r5, r1
   1560c:	d106      	bne.n	1561c <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2e>
   1560e:	f203 4322 	addw	r3, r3, #1058	; 0x422
   15612:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
   15616:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   15618:	f008 ffec 	bl	1e5f4 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   1561c:	3301      	adds	r3, #1
   1561e:	e7f0      	b.n	15602 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    return nullptr;
   15620:	2000      	movs	r0, #0
   15622:	e7f8      	b.n	15616 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>

00015624 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   15624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15628:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
  const TfLiteRegistration* FindOp(const char* op) const override {
   1562c:	4604      	mov	r4, r0
   1562e:	4688      	mov	r8, r1
   15630:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15632:	2500      	movs	r5, #0
   15634:	3704      	adds	r7, #4
   15636:	683b      	ldr	r3, [r7, #0]
   15638:	42ab      	cmp	r3, r5
   1563a:	d910      	bls.n	1565e <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x3a>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   1563c:	69b3      	ldr	r3, [r6, #24]
   1563e:	2b20      	cmp	r3, #32
   15640:	d002      	beq.n	15648 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x24>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   15642:	3501      	adds	r5, #1
   15644:	3620      	adds	r6, #32
   15646:	e7f6      	b.n	15636 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x12>
          (strcmp(registration.custom_name, op) == 0)) {
   15648:	69f0      	ldr	r0, [r6, #28]
   1564a:	4641      	mov	r1, r8
   1564c:	f7eb fecc 	bl	13e8 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   15650:	2800      	cmp	r0, #0
   15652:	d1f6      	bne.n	15642 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x1e>
      const TfLiteRegistration& registration = registrations_[i];
   15654:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   15658:	3004      	adds	r0, #4
  }
   1565a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
   1565e:	2000      	movs	r0, #0
   15660:	e7fb      	b.n	1565a <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x36>

00015662 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   15662:	6840      	ldr	r0, [r0, #4]
   15664:	6803      	ldr	r3, [r0, #0]
   15666:	68db      	ldr	r3, [r3, #12]
   15668:	4718      	bx	r3

0001566a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   1566a:	4770      	bx	lr

0001566c <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1566c:	4770      	bx	lr

0001566e <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   1566e:	4770      	bx	lr

00015670 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   15670:	b510      	push	{r4, lr}
   15672:	4604      	mov	r4, r0
   15674:	f008 ff98 	bl	1e5a8 <_ZdlPv>
   15678:	4620      	mov	r0, r4
   1567a:	bd10      	pop	{r4, pc}

0001567c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   1567c:	b510      	push	{r4, lr}
   1567e:	4604      	mov	r4, r0
   15680:	f008 ff92 	bl	1e5a8 <_ZdlPv>
   15684:	4620      	mov	r0, r4
   15686:	bd10      	pop	{r4, pc}

00015688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   15688:	6803      	ldr	r3, [r0, #0]
   1568a:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1568c:	8803      	ldrh	r3, [r0, #0]
   1568e:	428b      	cmp	r3, r1
   15690:	bf8c      	ite	hi
   15692:	5a40      	ldrhhi	r0, [r0, r1]
   15694:	2000      	movls	r0, #0
  }
   15696:	4770      	bx	lr

00015698 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
   15698:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   1569a:	2108      	movs	r1, #8
   1569c:	4604      	mov	r4, r0
   1569e:	f7ff fff3 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156a2:	b110      	cbz	r0, 156aa <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   156a4:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156a6:	5820      	ldr	r0, [r4, r0]
   156a8:	4418      	add	r0, r3
  }
   156aa:	bd10      	pop	{r4, pc}

000156ac <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   156ac:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   156ae:	210a      	movs	r1, #10
   156b0:	4604      	mov	r4, r0
   156b2:	f7ff ffe9 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156b6:	b110      	cbz	r0, 156be <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   156b8:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   156ba:	5820      	ldr	r0, [r4, r0]
   156bc:	4418      	add	r0, r3
  }
   156be:	bd10      	pop	{r4, pc}

000156c0 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
   156c0:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   156c2:	210e      	movs	r1, #14
   156c4:	4604      	mov	r4, r0
   156c6:	f7ff ffdf 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   156ca:	b100      	cbz	r0, 156ce <_ZNK6tflite6Tensor11is_variableEv+0xe>
   156cc:	5c20      	ldrb	r0, [r4, r0]
  }
   156ce:	3800      	subs	r0, #0
   156d0:	bf18      	it	ne
   156d2:	2001      	movne	r0, #1
   156d4:	bd10      	pop	{r4, pc}

000156d6 <_ZNK6tflite14MicroAllocator10used_bytesEv>:
  return memory_allocator_->GetUsedBytes();
   156d6:	6840      	ldr	r0, [r0, #4]
   156d8:	f000 b8ec 	b.w	158b4 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>

000156dc <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156de:	4615      	mov	r5, r2
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156e0:	6802      	ldr	r2, [r0, #0]
   156e2:	9301      	str	r3, [sp, #4]
   156e4:	6897      	ldr	r7, [r2, #8]
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156e6:	460e      	mov	r6, r1
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156e8:	461a      	mov	r2, r3
   156ea:	4629      	mov	r1, r5
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   156ec:	4604      	mov	r4, r0
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   156ee:	47b8      	blx	r7
   156f0:	b950      	cbnz	r0, 15708 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c>
  TF_LITE_ENSURE_STATUS(
   156f2:	6822      	ldr	r2, [r4, #0]
   156f4:	9b01      	ldr	r3, [sp, #4]
   156f6:	68d7      	ldr	r7, [r2, #12]
   156f8:	4631      	mov	r1, r6
   156fa:	462a      	mov	r2, r5
   156fc:	4620      	mov	r0, r4
   156fe:	46bc      	mov	ip, r7
}
   15700:	b003      	add	sp, #12
   15702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  TF_LITE_ENSURE_STATUS(
   15706:	4760      	bx	ip
}
   15708:	b003      	add	sp, #12
   1570a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001570c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   1570c:	b510      	push	{r4, lr}
   1570e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15710:	f7ff ffba 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15714:	b110      	cbz	r0, 1571c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x10>
    auto p = data_ + field_offset;
   15716:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15718:	5820      	ldr	r0, [r4, r0]
   1571a:	4418      	add	r0, r3
  }
   1571c:	bd10      	pop	{r4, pc}

0001571e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   1571e:	b510      	push	{r4, lr}
   15720:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15722:	f7ff ffb1 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15726:	b110      	cbz	r0, 1572e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
   15728:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1572a:	5820      	ldr	r0, [r4, r0]
   1572c:	4418      	add	r0, r3
  }
   1572e:	bd10      	pop	{r4, pc}

00015730 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   15730:	b510      	push	{r4, lr}
   15732:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15734:	f7ff ffa8 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15738:	b110      	cbz	r0, 15740 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   1573a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1573c:	5820      	ldr	r0, [r4, r0]
   1573e:	4418      	add	r0, r3
  }
   15740:	bd10      	pop	{r4, pc}

00015742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   15742:	b510      	push	{r4, lr}
   15744:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   15746:	f7ff ff9f 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1574a:	b110      	cbz	r0, 15752 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   1574c:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1574e:	5820      	ldr	r0, [r4, r0]
   15750:	4418      	add	r0, r3
  }
   15752:	bd10      	pop	{r4, pc}

00015754 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
   15754:	68c3      	ldr	r3, [r0, #12]
   15756:	6818      	ldr	r0, [r3, #0]
   15758:	f7f0 bb3a 	b.w	5dd0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>

0001575c <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
   1575c:	68c0      	ldr	r0, [r0, #12]
                                                        int* buffer_idx) {
   1575e:	4613      	mov	r3, r2
  return helper->allocator_->RequestScratchBufferInArena(
   15760:	460a      	mov	r2, r1
   15762:	6881      	ldr	r1, [r0, #8]
   15764:	6800      	ldr	r0, [r0, #0]
   15766:	f7f0 bb49 	b.w	5dfc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>

0001576a <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
      ->allocator_->GetScratchBuffer(buffer_idx);
   1576a:	68c3      	ldr	r3, [r0, #12]
   1576c:	6818      	ldr	r0, [r3, #0]
   1576e:	f7f0 bb77 	b.w	5e60 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>

00015772 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
   15772:	b40e      	push	{r1, r2, r3}
   15774:	b503      	push	{r0, r1, lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
   15776:	68c3      	ldr	r3, [r0, #12]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15778:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
   1577a:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   1577c:	6803      	ldr	r3, [r0, #0]
                                  const char* format, ...) {
   1577e:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15782:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   15784:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   15786:	4798      	blx	r3
}
   15788:	b002      	add	sp, #8
   1578a:	f85d eb04 	ldr.w	lr, [sp], #4
   1578e:	b003      	add	sp, #12
   15790:	4770      	bx	lr

00015792 <_ZN6tflite13ScopedProfileD1Ev>:
  ~ScopedProfile() {
   15792:	b510      	push	{r4, lr}
   15794:	4604      	mov	r4, r0
    if (profiler_) {
   15796:	6800      	ldr	r0, [r0, #0]
   15798:	b118      	cbz	r0, 157a2 <_ZN6tflite13ScopedProfileD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
   1579a:	6803      	ldr	r3, [r0, #0]
   1579c:	6861      	ldr	r1, [r4, #4]
   1579e:	691b      	ldr	r3, [r3, #16]
   157a0:	4798      	blx	r3
  }
   157a2:	4620      	mov	r0, r4
   157a4:	bd10      	pop	{r4, pc}

000157a6 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   157a6:	b570      	push	{r4, r5, r6, lr}
   157a8:	9e05      	ldr	r6, [sp, #20]
   157aa:	461d      	mov	r5, r3
      context_helper_(error_reporter_, &allocator_) {
   157ac:	2300      	movs	r3, #0
MicroInterpreter::MicroInterpreter(const Model* model,
   157ae:	4604      	mov	r4, r0
      context_helper_(error_reporter_, &allocator_) {
   157b0:	e9c0 3100 	strd	r3, r1, [r0]
   157b4:	e9c0 2602 	strd	r2, r6, [r0, #8]
   157b8:	4619      	mov	r1, r3
   157ba:	2250      	movs	r2, #80	; 0x50
   157bc:	3010      	adds	r0, #16
   157be:	f008 ff3c 	bl	1e63a <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   157c2:	9904      	ldr	r1, [sp, #16]
   157c4:	4632      	mov	r2, r6
   157c6:	4628      	mov	r0, r5
   157c8:	f7f0 fae6 	bl	5d98 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      context_helper_(error_reporter_, &allocator_) {
   157cc:	f44f 7380 	mov.w	r3, #256	; 0x100
   157d0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
   157d4:	68e3      	ldr	r3, [r4, #12]
   157d6:	6620      	str	r0, [r4, #96]	; 0x60
      : allocator_(allocator), error_reporter_(error_reporter) {}
   157d8:	e9c4 031b 	strd	r0, r3, [r4, #108]	; 0x6c
   157dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  Init(profiler);
   157e0:	4620      	mov	r0, r4
   157e2:	9906      	ldr	r1, [sp, #24]
   157e4:	6763      	str	r3, [r4, #116]	; 0x74
   157e6:	f7f1 f8fd 	bl	69e4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
   157ea:	4620      	mov	r0, r4
   157ec:	bd70      	pop	{r4, r5, r6, pc}

000157ee <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   157ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (node_and_registrations_ != nullptr) {
   157f0:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
   157f2:	4604      	mov	r4, r0
  if (node_and_registrations_ != nullptr) {
   157f4:	b1b3      	cbz	r3, 15824 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   157f6:	2500      	movs	r5, #0
      TfLiteNode* node = &(node_and_registrations_[i].node);
   157f8:	2628      	movs	r6, #40	; 0x28
        registration->free(&context_, node->user_data);
   157fa:	f100 0710 	add.w	r7, r0, #16
    return const_cast<Table *>(this)->GetPointer<P>(field);
   157fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   15800:	210a      	movs	r1, #10
   15802:	f7ff ff9e 	bl	15742 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   15806:	6803      	ldr	r3, [r0, #0]
   15808:	42ab      	cmp	r3, r5
   1580a:	d90b      	bls.n	15824 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
      TfLiteNode* node = &(node_and_registrations_[i].node);
   1580c:	6823      	ldr	r3, [r4, #0]
   1580e:	fb06 3305 	mla	r3, r6, r5, r3
      const TfLiteRegistration* registration =
   15812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
   15814:	b122      	cbz	r2, 15820 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
   15816:	6852      	ldr	r2, [r2, #4]
   15818:	b112      	cbz	r2, 15820 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
        registration->free(&context_, node->user_data);
   1581a:	6919      	ldr	r1, [r3, #16]
   1581c:	4638      	mov	r0, r7
   1581e:	4790      	blx	r2
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   15820:	3501      	adds	r5, #1
   15822:	e7ec      	b.n	157fe <_ZN6tflite16MicroInterpreterD1Ev+0x10>
}
   15824:	4620      	mov	r0, r4
   15826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015828 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   15828:	b530      	push	{r4, r5, lr}
   1582a:	4603      	mov	r3, r0
  char* current = main;
   1582c:	4604      	mov	r4, r0
   1582e:	4620      	mov	r0, r4
  while (*current != 0) {
   15830:	f814 5b01 	ldrb.w	r5, [r4], #1
   15834:	2d00      	cmp	r5, #0
   15836:	d1fa      	bne.n	1582e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
   15838:	3901      	subs	r1, #1
   1583a:	440b      	add	r3, r1
   1583c:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   1583e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   15842:	b121      	cbz	r1, 1584e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   15844:	4298      	cmp	r0, r3
   15846:	d202      	bcs.n	1584e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   15848:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   1584c:	e7f7      	b.n	1583e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
   1584e:	2300      	movs	r3, #0
   15850:	7003      	strb	r3, [r0, #0]
}
   15852:	bd30      	pop	{r4, r5, pc}

00015854 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   15854:	b570      	push	{r4, r5, r6, lr}
   15856:	460c      	mov	r4, r1
    int32_t digit = i % base;
   15858:	fbb0 f6f2 	udiv	r6, r0, r2
   1585c:	fb02 0516 	mls	r5, r2, r6, r0
    if (digit < 10) {
   15860:	b26b      	sxtb	r3, r5
   15862:	2d09      	cmp	r5, #9
      character = '0' + digit;
   15864:	bf94      	ite	ls
   15866:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
   15868:	3357      	addhi	r3, #87	; 0x57
    *buffer++ = character;
   1586a:	4625      	mov	r5, r4
      character = 'a' + (digit - 10);
   1586c:	b2db      	uxtb	r3, r3
  } while (i > 0);
   1586e:	4282      	cmp	r2, r0
    *buffer++ = character;
   15870:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   15874:	d90a      	bls.n	1588c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x38>
  *buffer = 0;
   15876:	2300      	movs	r3, #0
   15878:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   1587a:	42a1      	cmp	r1, r4
   1587c:	d209      	bcs.n	15892 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3e>
    char tmp = *p1;
   1587e:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   15880:	7822      	ldrb	r2, [r4, #0]
   15882:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   15886:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   1588a:	e7f6      	b.n	1587a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x26>
   1588c:	462c      	mov	r4, r5
    i /= base;
   1588e:	4630      	mov	r0, r6
   15890:	e7e2      	b.n	15858 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4>
}
   15892:	4628      	mov	r0, r5
   15894:	bd70      	pop	{r4, r5, r6, pc}

00015896 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15896:	4770      	bx	lr

00015898 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
   15898:	b510      	push	{r4, lr}
   1589a:	4604      	mov	r4, r0
   1589c:	f008 fe84 	bl	1e5a8 <_ZdlPv>
   158a0:	4620      	mov	r0, r4
   158a2:	bd10      	pop	{r4, pc}

000158a4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
   158a4:	6900      	ldr	r0, [r0, #16]
   158a6:	4770      	bx	lr

000158a8 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
   158a8:	6940      	ldr	r0, [r0, #20]
   158aa:	4770      	bx	lr

000158ac <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
   158ac:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
}
   158b0:	1a10      	subs	r0, r2, r0
   158b2:	4770      	bx	lr

000158b4 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>:
size_t SimpleMemoryAllocator::GetUsedBytes() const {
  return GetBufferSize() - GetAvailableMemory();
}

size_t SimpleMemoryAllocator::GetBufferSize() const {
  return buffer_tail_ - buffer_head_;
   158b4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   158b8:	1a9a      	subs	r2, r3, r2
  return tail_ - head_;
   158ba:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
   158be:	1a18      	subs	r0, r3, r0
}
   158c0:	1a10      	subs	r0, r2, r0
   158c2:	4770      	bx	lr

000158c4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   158c4:	2000      	movs	r0, #0
   158c6:	4770      	bx	lr

000158c8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:
   158c8:	2000      	movs	r0, #0
   158ca:	4770      	bx	lr

000158cc <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   158cc:	6803      	ldr	r3, [r0, #0]
   158ce:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   158d0:	b510      	push	{r4, lr}
   158d2:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   158d4:	dd03      	ble.n	158de <_ZN6tflite12RuntimeShapeD1Ev+0x12>
      delete[] dims_pointer_;
   158d6:	6840      	ldr	r0, [r0, #4]
   158d8:	b108      	cbz	r0, 158de <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   158da:	f008 fe67 	bl	1e5ac <_ZdaPv>
  }
   158de:	4620      	mov	r0, r4
   158e0:	bd10      	pop	{r4, pc}

000158e2 <_ZNK6tflite12RuntimeShape4DimsEi>:
    TFLITE_DCHECK_GE(i, 0);
   158e2:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   158e4:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   158e6:	da01      	bge.n	158ec <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   158e8:	f008 fe84 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   158ec:	6803      	ldr	r3, [r0, #0]
   158ee:	428b      	cmp	r3, r1
   158f0:	ddfa      	ble.n	158e8 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158f2:	2b05      	cmp	r3, #5
   158f4:	bfcb      	itete	gt
   158f6:	6843      	ldrgt	r3, [r0, #4]
   158f8:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   158fc:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   15900:	6840      	ldrle	r0, [r0, #4]
  }
   15902:	bd08      	pop	{r3, pc}

00015904 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   15904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   15908:	680b      	ldr	r3, [r1, #0]
   1590a:	6806      	ldr	r6, [r0, #0]
   1590c:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   1590e:	4604      	mov	r4, r0
   15910:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   15912:	d001      	beq.n	15918 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   15914:	f008 fe6e 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
   15918:	2500      	movs	r5, #0
   1591a:	42b5      	cmp	r5, r6
   1591c:	da0c      	bge.n	15938 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1591e:	4629      	mov	r1, r5
   15920:	4620      	mov	r0, r4
   15922:	f7ff ffde 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15926:	4629      	mov	r1, r5
   15928:	4680      	mov	r8, r0
   1592a:	4638      	mov	r0, r7
   1592c:	f7ff ffd9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15930:	4580      	cmp	r8, r0
   15932:	d1ef      	bne.n	15914 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   15934:	3501      	adds	r5, #1
   15936:	e7f0      	b.n	1591a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15938:	2e05      	cmp	r6, #5
   1593a:	bfcc      	ite	gt
   1593c:	6864      	ldrgt	r4, [r4, #4]
   1593e:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   15940:	2300      	movs	r3, #0
    int buffer_size = 1;
   15942:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   15944:	429e      	cmp	r6, r3
   15946:	dd04      	ble.n	15952 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   15948:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1594c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1594e:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   15950:	e7f8      	b.n	15944 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   15952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   15956:	b570      	push	{r4, r5, r6, lr}
   15958:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   1595a:	b911      	cbnz	r1, 15962 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   1595c:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   1595e:	4620      	mov	r0, r4
   15960:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   15962:	688d      	ldr	r5, [r1, #8]
   15964:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   15968:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   1596a:	2b05      	cmp	r3, #5
   1596c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   15970:	dc05      	bgt.n	1597e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15972:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   15974:	4632      	mov	r2, r6
   15976:	4629      	mov	r1, r5
   15978:	f008 fe51 	bl	1e61e <memcpy>
  }
   1597c:	e7ef      	b.n	1595e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32[dimensions_count];
   1597e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   15982:	4283      	cmp	r3, r0
   15984:	bfb4      	ite	lt
   15986:	4630      	movlt	r0, r6
   15988:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   1598c:	f008 fe1f 	bl	1e5ce <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15990:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   15992:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15994:	2b05      	cmp	r3, #5
   15996:	dced      	bgt.n	15974 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   15998:	e7eb      	b.n	15972 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

0001599a <_ZN6tflite12RuntimeShape6SetDimEii>:
    TFLITE_DCHECK_GE(i, 0);
   1599a:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   1599c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   1599e:	da01      	bge.n	159a4 <_ZN6tflite12RuntimeShape6SetDimEii+0xa>
   159a0:	f008 fe28 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   159a4:	6803      	ldr	r3, [r0, #0]
   159a6:	428b      	cmp	r3, r1
   159a8:	ddfa      	ble.n	159a0 <_ZN6tflite12RuntimeShape6SetDimEii+0x6>
    if (size_ > kMaxSmallSize) {
   159aa:	2b05      	cmp	r3, #5
      dims_pointer_[i] = val;
   159ac:	bfcb      	itete	gt
   159ae:	6843      	ldrgt	r3, [r0, #4]
      dims_[i] = val;
   159b0:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   159b4:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   159b8:	6042      	strle	r2, [r0, #4]
  }
   159ba:	bd08      	pop	{r3, pc}

000159bc <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
   159bc:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   159be:	6803      	ldr	r3, [r0, #0]
   159c0:	2b05      	cmp	r3, #5
  inline void Resize(int dimensions_count) {
   159c2:	4605      	mov	r5, r0
   159c4:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   159c6:	dd03      	ble.n	159d0 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
      delete[] dims_pointer_;
   159c8:	6840      	ldr	r0, [r0, #4]
   159ca:	b108      	cbz	r0, 159d0 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   159cc:	f008 fdee 	bl	1e5ac <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   159d0:	2c05      	cmp	r4, #5
    size_ = dimensions_count;
   159d2:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   159d4:	dd09      	ble.n	159ea <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
      dims_pointer_ = new int32[dimensions_count];
   159d6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   159da:	429c      	cmp	r4, r3
   159dc:	bfb4      	ite	lt
   159de:	00a0      	lsllt	r0, r4, #2
   159e0:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   159e4:	f008 fdf3 	bl	1e5ce <_Znaj>
   159e8:	6068      	str	r0, [r5, #4]
  }
   159ea:	bd38      	pop	{r3, r4, r5, pc}

000159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
  inline int FlatSize() const {
   159ec:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   159ee:	6801      	ldr	r1, [r0, #0]
   159f0:	2905      	cmp	r1, #5
   159f2:	bfcc      	ite	gt
   159f4:	6843      	ldrgt	r3, [r0, #4]
   159f6:	1d03      	addle	r3, r0, #4
    for (int i = 0; i < size_; i++) {
   159f8:	2200      	movs	r2, #0
    int buffer_size = 1;
   159fa:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   159fc:	428a      	cmp	r2, r1
   159fe:	da04      	bge.n	15a0a <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   15a00:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   15a04:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   15a06:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   15a08:	e7f8      	b.n	159fc <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   15a0a:	bd10      	pop	{r4, pc}

00015a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   15a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a10:	4698      	mov	r8, r3
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15a12:	6813      	ldr	r3, [r2, #0]
      : size_(0) {
   15a14:	2700      	movs	r7, #0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15a16:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   15a18:	4605      	mov	r5, r0
   15a1a:	460e      	mov	r6, r1
   15a1c:	4614      	mov	r4, r2
      : size_(0) {
   15a1e:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15a20:	da01      	bge.n	15a26 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   15a22:	f008 fde7 	bl	1e5f4 <abort>
    Resize(new_shape_size);
   15a26:	f7ff ffc9 	bl	159bc <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   15a2a:	6820      	ldr	r0, [r4, #0]
   15a2c:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   15a2e:	42b7      	cmp	r7, r6
   15a30:	da06      	bge.n	15a40 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   15a32:	4639      	mov	r1, r7
   15a34:	4642      	mov	r2, r8
   15a36:	4628      	mov	r0, r5
   15a38:	f7ff ffaf 	bl	1599a <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < size_increase; ++i) {
   15a3c:	3701      	adds	r7, #1
   15a3e:	e7f6      	b.n	15a2e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a40:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a42:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a44:	2b05      	cmp	r3, #5
   15a46:	bfcc      	ite	gt
   15a48:	6868      	ldrgt	r0, [r5, #4]
   15a4a:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a4c:	2a05      	cmp	r2, #5
   15a4e:	bfc8      	it	gt
   15a50:	6861      	ldrgt	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15a52:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15a56:	bfd8      	it	le
   15a58:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15a5a:	0092      	lsls	r2, r2, #2
   15a5c:	f008 fddf 	bl	1e61e <memcpy>
  }
   15a60:	4628      	mov	r0, r5
   15a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   15a66:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a68:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   15a6a:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a6c:	2c04      	cmp	r4, #4
   15a6e:	d001      	beq.n	15a74 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   15a70:	f008 fdc0 	bl	1e5f4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15a74:	2900      	cmp	r1, #0
   15a76:	dbfb      	blt.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a78:	6844      	ldr	r4, [r0, #4]
   15a7a:	428c      	cmp	r4, r1
   15a7c:	ddf8      	ble.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15a7e:	2a00      	cmp	r2, #0
   15a80:	dbf6      	blt.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a82:	6884      	ldr	r4, [r0, #8]
   15a84:	4294      	cmp	r4, r2
   15a86:	ddf3      	ble.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15a88:	2b00      	cmp	r3, #0
   15a8a:	dbf1      	blt.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a8c:	68c6      	ldr	r6, [r0, #12]
   15a8e:	429e      	cmp	r6, r3
   15a90:	ddee      	ble.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15a92:	2d00      	cmp	r5, #0
   15a94:	dbec      	blt.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   15a96:	6900      	ldr	r0, [r0, #16]
   15a98:	42a8      	cmp	r0, r5
   15a9a:	dde9      	ble.n	15a70 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15a9c:	fb01 2204 	mla	r2, r1, r4, r2
   15aa0:	fb06 3302 	mla	r3, r6, r2, r3
}
   15aa4:	fb00 5003 	mla	r0, r0, r3, r5
   15aa8:	bd70      	pop	{r4, r5, r6, pc}

00015aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
   15aaa:	b570      	push	{r4, r5, r6, lr}
   15aac:	460d      	mov	r5, r1
   15aae:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
   15ab0:	f7ff ff9c 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   15ab4:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
   15ab6:	4628      	mov	r0, r5
   15ab8:	f7ff ff98 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   15abc:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
   15abe:	4630      	mov	r0, r6
   15ac0:	f7ff ff94 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   15ac4:	42ac      	cmp	r4, r5
   15ac6:	d001      	beq.n	15acc <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
   15ac8:	f008 fd94 	bl	1e5f4 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   15acc:	4284      	cmp	r4, r0
   15ace:	d1fb      	bne.n	15ac8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
}
   15ad0:	bd70      	pop	{r4, r5, r6, pc}

00015ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
                            int i3) {
   15ad2:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   15ad4:	2900      	cmp	r1, #0
                            int i3) {
   15ad6:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   15ad8:	db02      	blt.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ada:	6804      	ldr	r4, [r0, #0]
   15adc:	428c      	cmp	r4, r1
   15ade:	dc01      	bgt.n	15ae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   15ae0:	f008 fd88 	bl	1e5f4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   15ae4:	2a00      	cmp	r2, #0
   15ae6:	dbfb      	blt.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15ae8:	6844      	ldr	r4, [r0, #4]
   15aea:	4294      	cmp	r4, r2
   15aec:	ddf8      	ble.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   15aee:	2b00      	cmp	r3, #0
   15af0:	dbf6      	blt.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15af2:	6884      	ldr	r4, [r0, #8]
   15af4:	429c      	cmp	r4, r3
   15af6:	ddf3      	ble.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   15af8:	2d00      	cmp	r5, #0
   15afa:	dbf1      	blt.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   15afc:	68c4      	ldr	r4, [r0, #12]
   15afe:	42ac      	cmp	r4, r5
   15b00:	ddee      	ble.n	15ae0 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
         i3 * desc.strides[3];
   15b02:	69c4      	ldr	r4, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   15b04:	6946      	ldr	r6, [r0, #20]
         i3 * desc.strides[3];
   15b06:	436c      	muls	r4, r5
   15b08:	fb06 4202 	mla	r2, r6, r2, r4
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   15b0c:	6984      	ldr	r4, [r0, #24]
   15b0e:	6900      	ldr	r0, [r0, #16]
         i3 * desc.strides[3];
   15b10:	fb04 2303 	mla	r3, r4, r3, r2
}
   15b14:	fb00 3001 	mla	r0, r0, r1, r3
   15b18:	bd70      	pop	{r4, r5, r6, pc}

00015b1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   15b1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b1e:	4604      	mov	r4, r0
   15b20:	4690      	mov	r8, r2
   15b22:	4608      	mov	r0, r1
   15b24:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15b26:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   15b2a:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   15b2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   15b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15b30:	dd01      	ble.n	15b36 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   15b32:	f008 fd5f 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b38:	f7ff ffb7 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   15b3c:	6862      	ldr	r2, [r4, #4]
   15b3e:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15b42:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   15b44:	dbf5      	blt.n	15b32 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   15b46:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   15b48:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   15b4a:	dcf2      	bgt.n	15b32 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   15b4c:	33ff      	adds	r3, #255	; 0xff
   15b4e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   15b52:	d8ee      	bhi.n	15b32 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   15b54:	2700      	movs	r7, #0
   15b56:	45b9      	cmp	r9, r7
   15b58:	dd28      	ble.n	15bac <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   15b5a:	f816 a007 	ldrb.w	sl, [r6, r7]
   15b5e:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   15b60:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   15b62:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   15b64:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   15b66:	f818 3007 	ldrb.w	r3, [r8, r7]
   15b6a:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   15b6c:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b70:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   15b74:	fa03 f000 	lsl.w	r0, r3, r0
   15b78:	f7f1 fb16 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b7c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b80:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b82:	4650      	mov	r0, sl
   15b84:	f7f1 fb10 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15b88:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   15b8c:	4458      	add	r0, fp
   15b8e:	f7f1 fb0b 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   15b92:	68e3      	ldr	r3, [r4, #12]
   15b94:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   15b96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15b98:	4283      	cmp	r3, r0
   15b9a:	bfb8      	it	lt
   15b9c:	4603      	movlt	r3, r0
   15b9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15ba0:	4283      	cmp	r3, r0
   15ba2:	bfa8      	it	ge
   15ba4:	4603      	movge	r3, r0
   15ba6:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   15ba8:	3701      	adds	r7, #1
   15baa:	e7d4      	b.n	15b56 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   15bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015bb0 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   15bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb4:	4604      	mov	r4, r0
   15bb6:	4690      	mov	r8, r2
   15bb8:	4608      	mov	r0, r1
   15bba:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15bbc:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   15bc0:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   15bc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   15bc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15bc6:	dd01      	ble.n	15bcc <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   15bc8:	f008 fd14 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15bce:	f7ff ff6c 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   15bd2:	6862      	ldr	r2, [r4, #4]
   15bd4:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   15bd8:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   15bda:	dbf5      	blt.n	15bc8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   15bdc:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   15bde:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   15be0:	dcf2      	bgt.n	15bc8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   15be2:	337f      	adds	r3, #127	; 0x7f
   15be4:	2bfe      	cmp	r3, #254	; 0xfe
   15be6:	d8ef      	bhi.n	15bc8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   15be8:	2700      	movs	r7, #0
   15bea:	45b9      	cmp	r9, r7
   15bec:	dd28      	ble.n	15c40 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   15bee:	f916 a007 	ldrsb.w	sl, [r6, r7]
   15bf2:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   15bf4:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   15bf6:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   15bf8:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   15bfa:	f918 3007 	ldrsb.w	r3, [r8, r7]
   15bfe:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   15c00:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15c04:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   15c08:	fa03 f000 	lsl.w	r0, r3, r0
   15c0c:	f7f1 facc 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15c10:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15c14:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15c16:	4650      	mov	r0, sl
   15c18:	f7f1 fac6 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   15c1c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   15c20:	4458      	add	r0, fp
   15c22:	f7f1 fac1 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   15c26:	68e3      	ldr	r3, [r4, #12]
   15c28:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   15c2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15c2c:	4283      	cmp	r3, r0
   15c2e:	bfb8      	it	lt
   15c30:	4603      	movlt	r3, r0
   15c32:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15c34:	4283      	cmp	r3, r0
   15c36:	bfa8      	it	ge
   15c38:	4603      	movge	r3, r0
   15c3a:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   15c3c:	3701      	adds	r7, #1
   15c3e:	e7d4      	b.n	15bea <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   15c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   15c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c48:	680b      	ldr	r3, [r1, #0]
   15c4a:	6804      	ldr	r4, [r0, #0]
   15c4c:	429c      	cmp	r4, r3
   15c4e:	b092      	sub	sp, #72	; 0x48
   15c50:	bfb8      	it	lt
   15c52:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15c54:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   15c56:	4680      	mov	r8, r0
   15c58:	460f      	mov	r7, r1
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   15c5a:	2600      	movs	r6, #0
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15c5c:	7013      	strb	r3, [r2, #0]
    Resize(shape_size);
   15c5e:	4621      	mov	r1, r4
   15c60:	4668      	mov	r0, sp
                                   tflite::ArithmeticParams* params) {
   15c62:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   15c64:	9600      	str	r6, [sp, #0]
    Resize(shape_size);
   15c66:	f7ff fea9 	bl	159bc <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   15c6a:	42a6      	cmp	r6, r4
   15c6c:	da06      	bge.n	15c7c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x38>
      SetDim(i, value);
   15c6e:	4631      	mov	r1, r6
   15c70:	2201      	movs	r2, #1
   15c72:	4668      	mov	r0, sp
   15c74:	f7ff fe91 	bl	1599a <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < shape_size; ++i) {
   15c78:	3601      	adds	r6, #1
   15c7a:	e7f6      	b.n	15c6a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26>
    return RuntimeShape(new_shape_size, shape, 1);
   15c7c:	2301      	movs	r3, #1
   15c7e:	4642      	mov	r2, r8
   15c80:	4621      	mov	r1, r4
   15c82:	a806      	add	r0, sp, #24
   15c84:	f7ff fec2 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   15c88:	2301      	movs	r3, #1
   15c8a:	463a      	mov	r2, r7
   15c8c:	4621      	mov	r1, r4
   15c8e:	a80c      	add	r0, sp, #48	; 0x30
   15c90:	f7ff febc 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   15c94:	9a06      	ldr	r2, [sp, #24]
   15c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15c98:	429a      	cmp	r2, r3
   15c9a:	d11b      	bne.n	15cd4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15c9c:	2a05      	cmp	r2, #5
   15c9e:	bfcc      	ite	gt
   15ca0:	9807      	ldrgt	r0, [sp, #28]
   15ca2:	a807      	addle	r0, sp, #28
   15ca4:	2b05      	cmp	r3, #5
   15ca6:	bfcc      	ite	gt
   15ca8:	990d      	ldrgt	r1, [sp, #52]	; 0x34
   15caa:	a90d      	addle	r1, sp, #52	; 0x34
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   15cac:	0092      	lsls	r2, r2, #2
   15cae:	f008 fca8 	bl	1e602 <memcmp>
    return this->size_ == comp.size_ &&
   15cb2:	b978      	cbnz	r0, 15cd4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   15cb4:	2301      	movs	r3, #1
   15cb6:	702b      	strb	r3, [r5, #0]
    return false;
   15cb8:	4604      	mov	r4, r0
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   15cba:	a80c      	add	r0, sp, #48	; 0x30
   15cbc:	f7ff fe06 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   15cc0:	a806      	add	r0, sp, #24
   15cc2:	f7ff fe03 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   15cc6:	4668      	mov	r0, sp
   15cc8:	f7ff fe00 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
   15ccc:	4620      	mov	r0, r4
   15cce:	b012      	add	sp, #72	; 0x48
   15cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   15cd4:	3c01      	subs	r4, #1
   15cd6:	4626      	mov	r6, r4
   15cd8:	2e00      	cmp	r6, #0
   15cda:	db10      	blt.n	15cfe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xba>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   15cdc:	4631      	mov	r1, r6
   15cde:	a806      	add	r0, sp, #24
   15ce0:	f7ff fdff 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ce4:	4631      	mov	r1, r6
   15ce6:	4607      	mov	r7, r0
   15ce8:	a80c      	add	r0, sp, #48	; 0x30
   15cea:	f7ff fdfa 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15cee:	4287      	cmp	r7, r0
   15cf0:	d101      	bne.n	15cf6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb2>
  for (int i = dims_count - 1; i >= 0; --i) {
   15cf2:	3e01      	subs	r6, #1
   15cf4:	e7f0      	b.n	15cd8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x94>
    } else if (extended_shape0.Dims(i) == 1) {
   15cf6:	2f01      	cmp	r7, #1
   15cf8:	d107      	bne.n	15d0a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
      params->broadcast_category =
   15cfa:	2302      	movs	r3, #2
      params->broadcast_category =
   15cfc:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   15cfe:	782b      	ldrb	r3, [r5, #0]
   15d00:	1e9a      	subs	r2, r3, #2
   15d02:	2a01      	cmp	r2, #1
   15d04:	d909      	bls.n	15d1a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd6>
    TFLITE_DCHECK(false);
   15d06:	f008 fc75 	bl	1e5f4 <abort>
    } else if (extended_shape1.Dims(i) == 1) {
   15d0a:	2801      	cmp	r0, #1
   15d0c:	d101      	bne.n	15d12 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
      params->broadcast_category =
   15d0e:	2303      	movs	r3, #3
   15d10:	e7f4      	b.n	15cfc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb8>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   15d12:	2304      	movs	r3, #4
   15d14:	702b      	strb	r3, [r5, #0]
  return true;
   15d16:	2401      	movs	r4, #1
   15d18:	e7cf      	b.n	15cba <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>
  const RuntimeShape* shape_a =
   15d1a:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
   15d1c:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   15d20:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  params->broadcast_shape[3] = 1;
   15d24:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  const RuntimeShape* shape_a =
   15d28:	bf19      	ittee	ne
   15d2a:	f10d 0818 	addne.w	r8, sp, #24
  const RuntimeShape* shape_b =
   15d2e:	af0c      	addne	r7, sp, #48	; 0x30
  const RuntimeShape* shape_a =
   15d30:	f10d 0830 	addeq.w	r8, sp, #48	; 0x30
  const RuntimeShape* shape_b =
   15d34:	af06      	addeq	r7, sp, #24
  params->broadcast_shape[4] = 1;
   15d36:	64eb      	str	r3, [r5, #76]	; 0x4c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d38:	2c00      	cmp	r4, #0
   15d3a:	dbec      	blt.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
   15d3c:	4621      	mov	r1, r4
   15d3e:	4640      	mov	r0, r8
   15d40:	f7ff fdcf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d44:	4621      	mov	r1, r4
   15d46:	4606      	mov	r6, r0
   15d48:	4638      	mov	r0, r7
   15d4a:	f7ff fdca 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d4e:	4286      	cmp	r6, r0
   15d50:	d104      	bne.n	15d5c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   15d52:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   15d54:	4346      	muls	r6, r0
   15d56:	64ee      	str	r6, [r5, #76]	; 0x4c
    --i;
   15d58:	3c01      	subs	r4, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d5a:	e7ed      	b.n	15d38 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d5c:	4621      	mov	r1, r4
   15d5e:	4640      	mov	r0, r8
   15d60:	f7ff fdbf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d64:	2801      	cmp	r0, #1
   15d66:	d10a      	bne.n	15d7e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   15d68:	4621      	mov	r1, r4
   15d6a:	4638      	mov	r0, r7
   15d6c:	f7ff fdb9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d70:	6cab      	ldr	r3, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d72:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   15d74:	fb00 f003 	mul.w	r0, r0, r3
   15d78:	64a8      	str	r0, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   15d7a:	d2ef      	bcs.n	15d5c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
   15d7c:	e7cb      	b.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d7e:	4621      	mov	r1, r4
   15d80:	4640      	mov	r0, r8
   15d82:	f7ff fdae 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d86:	4621      	mov	r1, r4
   15d88:	4606      	mov	r6, r0
   15d8a:	4638      	mov	r0, r7
   15d8c:	f7ff fda9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15d90:	4286      	cmp	r6, r0
   15d92:	d106      	bne.n	15da2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   15d94:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d96:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   15d98:	fb06 f600 	mul.w	r6, r6, r0
   15d9c:	646e      	str	r6, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15d9e:	d2ee      	bcs.n	15d7e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
   15da0:	e7b9      	b.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15da2:	4621      	mov	r1, r4
   15da4:	4638      	mov	r0, r7
   15da6:	f7ff fd9c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15daa:	2801      	cmp	r0, #1
   15dac:	d10a      	bne.n	15dc4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   15dae:	4621      	mov	r1, r4
   15db0:	4640      	mov	r0, r8
   15db2:	f7ff fd96 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15db6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15db8:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   15dba:	fb00 f003 	mul.w	r0, r0, r3
   15dbe:	6428      	str	r0, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   15dc0:	d2ef      	bcs.n	15da2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
   15dc2:	e7a8      	b.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15dc4:	4621      	mov	r1, r4
   15dc6:	4640      	mov	r0, r8
   15dc8:	f7ff fd8b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15dcc:	4621      	mov	r1, r4
   15dce:	4606      	mov	r6, r0
   15dd0:	4638      	mov	r0, r7
   15dd2:	f7ff fd86 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15dd6:	4286      	cmp	r6, r0
   15dd8:	d19b      	bne.n	15d12 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   15dda:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15ddc:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   15dde:	fb06 f600 	mul.w	r6, r6, r0
   15de2:	63ee      	str	r6, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   15de4:	d2ee      	bcs.n	15dc4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
   15de6:	e796      	b.n	15d16 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>

00015de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   15de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dea:	4606      	mov	r6, r0
   15dec:	f101 050c 	add.w	r5, r1, #12
  for (int i = N - 1; i >= 0; --i) {
   15df0:	2403      	movs	r4, #3
  int desc_stride = 1;
   15df2:	2701      	movs	r7, #1
    desc_out->extents[i] = input_shape.Dims(i);
   15df4:	4621      	mov	r1, r4
   15df6:	4630      	mov	r0, r6
   15df8:	f7ff fd73 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15dfc:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   15e00:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   15e02:	616f      	str	r7, [r5, #20]
    desc_stride *= input_shape.Dims(i);
   15e04:	4630      	mov	r0, r6
   15e06:	f7ff fd6c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   15e0a:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   15e0c:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   15e10:	d2f0      	bcs.n	15df4 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   15e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   15e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e18:	460c      	mov	r4, r1
   15e1a:	b08d      	sub	sp, #52	; 0x34
   15e1c:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   15e1e:	4615      	mov	r5, r2
   15e20:	b90a      	cbnz	r2, 15e26 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   15e22:	f008 fbe7 	bl	1e5f4 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   15e26:	2b00      	cmp	r3, #0
   15e28:	d0fb      	beq.n	15e22 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   15e2a:	4602      	mov	r2, r0
   15e2c:	2301      	movs	r3, #1
   15e2e:	2104      	movs	r1, #4
   15e30:	4668      	mov	r0, sp
   15e32:	f7ff fdeb 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   15e36:	4622      	mov	r2, r4
   15e38:	2301      	movs	r3, #1
   15e3a:	2104      	movs	r1, #4
   15e3c:	a806      	add	r0, sp, #24
   15e3e:	f7ff fde5 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   15e42:	4629      	mov	r1, r5
   15e44:	4668      	mov	r0, sp
   15e46:	f7ff ffcf 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   15e4a:	4631      	mov	r1, r6
   15e4c:	a806      	add	r0, sp, #24
   15e4e:	f7ff ffcb 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   15e52:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   15e54:	f04f 0810 	mov.w	r8, #16
   15e58:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   15e5a:	4621      	mov	r1, r4
   15e5c:	4668      	mov	r0, sp
   15e5e:	f7ff fd40 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   15e62:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   15e64:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   15e66:	a806      	add	r0, sp, #24
   15e68:	f7ff fd3b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   15e6c:	4287      	cmp	r7, r0
   15e6e:	d005      	beq.n	15e7c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   15e70:	2f01      	cmp	r7, #1
   15e72:	d111      	bne.n	15e98 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   15e74:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   15e78:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   15e7c:	3401      	adds	r4, #1
   15e7e:	2c04      	cmp	r4, #4
   15e80:	f108 0804 	add.w	r8, r8, #4
   15e84:	d1e9      	bne.n	15e5a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   15e86:	a806      	add	r0, sp, #24
   15e88:	f7ff fd20 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   15e8c:	4668      	mov	r0, sp
   15e8e:	f7ff fd1d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   15e92:	b00d      	add	sp, #52	; 0x34
   15e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   15e98:	2801      	cmp	r0, #1
   15e9a:	d1c2      	bne.n	15e22 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   15e9c:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   15ea0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   15ea4:	e7ea      	b.n	15e7c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

00015ea6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   15ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eaa:	ed2d 8b02 	vpush	{d8}
   15eae:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15eb0:	af0a      	add	r7, sp, #40	; 0x28
                               float* output_data) {
   15eb2:	9203      	str	r2, [sp, #12]
   15eb4:	4683      	mov	fp, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15eb6:	463a      	mov	r2, r7
                               float* output_data) {
   15eb8:	4608      	mov	r0, r1
   15eba:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15ebc:	ab12      	add	r3, sp, #72	; 0x48
   15ebe:	f7ff ffa9 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   15ec2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   15ec4:	2301      	movs	r3, #1
   15ec6:	2104      	movs	r1, #4
   15ec8:	a804      	add	r0, sp, #16
   15eca:	f7ff fd9f 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15ece:	2400      	movs	r4, #0
   15ed0:	2100      	movs	r1, #0
   15ed2:	a804      	add	r0, sp, #16
   15ed4:	f7ff fd05 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ed8:	42a0      	cmp	r0, r4
   15eda:	dd5c      	ble.n	15f96 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xf0>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15edc:	2500      	movs	r5, #0
   15ede:	f10d 0810 	add.w	r8, sp, #16
   15ee2:	2101      	movs	r1, #1
   15ee4:	4640      	mov	r0, r8
   15ee6:	f7ff fcfc 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15eea:	42a8      	cmp	r0, r5
   15eec:	dd51      	ble.n	15f92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15eee:	2600      	movs	r6, #0
   15ef0:	2102      	movs	r1, #2
   15ef2:	4640      	mov	r0, r8
   15ef4:	f7ff fcf5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ef8:	42b0      	cmp	r0, r6
   15efa:	dd48      	ble.n	15f8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15efc:	f04f 0900 	mov.w	r9, #0
   15f00:	2103      	movs	r1, #3
   15f02:	4640      	mov	r0, r8
   15f04:	f7ff fced 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15f08:	4548      	cmp	r0, r9
   15f0a:	dd3e      	ble.n	15f8a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15f0c:	f8cd 9000 	str.w	r9, [sp]
   15f10:	4633      	mov	r3, r6
   15f12:	462a      	mov	r2, r5
   15f14:	4621      	mov	r1, r4
   15f16:	4638      	mov	r0, r7
   15f18:	f7ff fddb 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f1c:	f8cd 9000 	str.w	r9, [sp]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15f20:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f22:	4633      	mov	r3, r6
   15f24:	462a      	mov	r2, r5
   15f26:	4621      	mov	r1, r4
   15f28:	a812      	add	r0, sp, #72	; 0x48
   15f2a:	f7ff fdd2 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   15f2e:	9b03      	ldr	r3, [sp, #12]
   15f30:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
              ActivationFunctionWithMinMax(
   15f36:	edda 7a00 	vldr	s15, [sl]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   15f3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   15f3e:	ed90 8a00 	vldr	s16, [r0]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   15f42:	f8cd 9000 	str.w	r9, [sp]
   15f46:	4633      	mov	r3, r6
   15f48:	462a      	mov	r2, r5
   15f4a:	4621      	mov	r1, r4
   15f4c:	4640      	mov	r0, r8
              ActivationFunctionWithMinMax(
   15f4e:	ee37 8a88 	vadd.f32	s16, s15, s16
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   15f52:	f7ff fd88 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   15f56:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
   15f5a:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
   15f5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15f60:	eef4 7ac8 	vcmpe.f32	s15, s16
   15f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f68:	bfb8      	it	lt
   15f6a:	eef0 7a48 	vmovlt.f32	s15, s16
   15f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
   15f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15f7a:	bf88      	it	hi
   15f7c:	eef0 7a47 	vmovhi.f32	s15, s14
   15f80:	edc0 7a00 	vstr	s15, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15f84:	f109 0901 	add.w	r9, r9, #1
   15f88:	e7ba      	b.n	15f00 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15f8a:	3601      	adds	r6, #1
   15f8c:	e7b0      	b.n	15ef0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15f8e:	3501      	adds	r5, #1
   15f90:	e7a5      	b.n	15ede <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x38>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15f92:	3401      	adds	r4, #1
   15f94:	e79c      	b.n	15ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x2a>
      RuntimeShape::ExtendedShape(4, output_shape);
   15f96:	a804      	add	r0, sp, #16
   15f98:	f7ff fc98 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                  params.float_activation_min, params.float_activation_max);
        }
      }
    }
  }
}
   15f9c:	b01b      	add	sp, #108	; 0x6c
   15f9e:	ecbd 8b02 	vpop	{d8}
   15fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015fa6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   15fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15faa:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15fac:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               int8_t* output_data) {
   15fb0:	9202      	str	r2, [sp, #8]
   15fb2:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15fb4:	465a      	mov	r2, fp
                               int8_t* output_data) {
   15fb6:	4608      	mov	r0, r1
   15fb8:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   15fba:	ab12      	add	r3, sp, #72	; 0x48
   15fbc:	f7ff ff2a 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   15fc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15fc2:	2301      	movs	r3, #1
   15fc4:	2104      	movs	r1, #4
   15fc6:	a804      	add	r0, sp, #16
   15fc8:	f7ff fd20 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   15fcc:	2600      	movs	r6, #0
   15fce:	2100      	movs	r1, #0
   15fd0:	a804      	add	r0, sp, #16
   15fd2:	f7ff fc86 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fd6:	42b0      	cmp	r0, r6
   15fd8:	dd65      	ble.n	160a6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   15fda:	2700      	movs	r7, #0
   15fdc:	f10d 0910 	add.w	r9, sp, #16
   15fe0:	2101      	movs	r1, #1
   15fe2:	4648      	mov	r0, r9
   15fe4:	f7ff fc7d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15fe8:	42b8      	cmp	r0, r7
   15fea:	dd5a      	ble.n	160a2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   15fec:	f04f 0800 	mov.w	r8, #0
   15ff0:	2102      	movs	r1, #2
   15ff2:	4648      	mov	r0, r9
   15ff4:	f7ff fc75 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   15ff8:	4540      	cmp	r0, r8
   15ffa:	dd50      	ble.n	1609e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   15ffc:	f04f 0a00 	mov.w	sl, #0
   16000:	2103      	movs	r1, #3
   16002:	4648      	mov	r0, r9
   16004:	f7ff fc6d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16008:	4550      	cmp	r0, sl
   1600a:	dd45      	ble.n	16098 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf2>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1600c:	f8cd a000 	str.w	sl, [sp]
   16010:	4643      	mov	r3, r8
   16012:	463a      	mov	r2, r7
   16014:	4631      	mov	r1, r6
   16016:	4658      	mov	r0, fp
   16018:	f7ff fd5b 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1601c:	9b02      	ldr	r3, [sp, #8]
   1601e:	561d      	ldrsb	r5, [r3, r0]
   16020:	6863      	ldr	r3, [r4, #4]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16022:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   16026:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16028:	463a      	mov	r2, r7
   1602a:	4643      	mov	r3, r8
   1602c:	4631      	mov	r1, r6
   1602e:	a812      	add	r0, sp, #72	; 0x48
   16030:	f7ff fd4f 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   16034:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16036:	68a2      	ldr	r2, [r4, #8]
   16038:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   1603a:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1603e:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   16040:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16044:	fa05 f00c 	lsl.w	r0, r5, ip
   16048:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   1604c:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1604e:	f7f1 f8ab 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16052:	9b03      	ldr	r3, [sp, #12]
   16054:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16058:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1605a:	4618      	mov	r0, r3
   1605c:	f7f1 f8a4 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16060:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16064:	4428      	add	r0, r5
   16066:	f7f1 f89f 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   1606a:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1606c:	f8cd a000 	str.w	sl, [sp]
                  raw_sum, params.output_multiplier, params.output_shift) +
   16070:	4405      	add	r5, r0
   16072:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   16074:	4285      	cmp	r5, r0
   16076:	bfb8      	it	lt
   16078:	4605      	movlt	r5, r0
   1607a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1607c:	4285      	cmp	r5, r0
   1607e:	bfa8      	it	ge
   16080:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16082:	4643      	mov	r3, r8
   16084:	463a      	mov	r2, r7
   16086:	4631      	mov	r1, r6
   16088:	4648      	mov	r0, r9
   1608a:	f7ff fcec 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1608e:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16090:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16094:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16096:	e7b3      	b.n	16000 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   16098:	f108 0801 	add.w	r8, r8, #1
   1609c:	e7a8      	b.n	15ff0 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1609e:	3701      	adds	r7, #1
   160a0:	e79c      	b.n	15fdc <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   160a2:	3601      	adds	r6, #1
   160a4:	e793      	b.n	15fce <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   160a6:	a804      	add	r0, sp, #16
   160a8:	f7ff fc10 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   160ac:	b01b      	add	sp, #108	; 0x6c
   160ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160b2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   160b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b6:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   160b8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               uint8* output_data) {
   160bc:	9202      	str	r2, [sp, #8]
   160be:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   160c0:	465a      	mov	r2, fp
                               uint8* output_data) {
   160c2:	4608      	mov	r0, r1
   160c4:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   160c6:	ab12      	add	r3, sp, #72	; 0x48
   160c8:	f7ff fea4 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   160cc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   160ce:	2301      	movs	r3, #1
   160d0:	2104      	movs	r1, #4
   160d2:	a804      	add	r0, sp, #16
   160d4:	f7ff fc9a 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   160d8:	2600      	movs	r6, #0
   160da:	2100      	movs	r1, #0
   160dc:	a804      	add	r0, sp, #16
   160de:	f7ff fc00 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   160e2:	42b0      	cmp	r0, r6
   160e4:	dd65      	ble.n	161b2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   160e6:	2700      	movs	r7, #0
   160e8:	f10d 0910 	add.w	r9, sp, #16
   160ec:	2101      	movs	r1, #1
   160ee:	4648      	mov	r0, r9
   160f0:	f7ff fbf7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   160f4:	42b8      	cmp	r0, r7
   160f6:	dd5a      	ble.n	161ae <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   160f8:	f04f 0800 	mov.w	r8, #0
   160fc:	2102      	movs	r1, #2
   160fe:	4648      	mov	r0, r9
   16100:	f7ff fbef 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16104:	4540      	cmp	r0, r8
   16106:	dd50      	ble.n	161aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16108:	f04f 0a00 	mov.w	sl, #0
   1610c:	2103      	movs	r1, #3
   1610e:	4648      	mov	r0, r9
   16110:	f7ff fbe7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16114:	4550      	cmp	r0, sl
   16116:	dd45      	ble.n	161a4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf2>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   16118:	f8cd a000 	str.w	sl, [sp]
   1611c:	4643      	mov	r3, r8
   1611e:	463a      	mov	r2, r7
   16120:	4631      	mov	r1, r6
   16122:	4658      	mov	r0, fp
   16124:	f7ff fcd5 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   16128:	9b02      	ldr	r3, [sp, #8]
   1612a:	5c1d      	ldrb	r5, [r3, r0]
   1612c:	6863      	ldr	r3, [r4, #4]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1612e:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   16132:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   16134:	463a      	mov	r2, r7
   16136:	4643      	mov	r3, r8
   16138:	4631      	mov	r1, r6
   1613a:	a812      	add	r0, sp, #72	; 0x48
   1613c:	f7ff fcc9 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   16140:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16142:	68a2      	ldr	r2, [r4, #8]
   16144:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   16146:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1614a:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   1614c:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16150:	fa05 f00c 	lsl.w	r0, r5, ip
   16154:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   16158:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1615a:	f7f1 f825 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1615e:	9b03      	ldr	r3, [sp, #12]
   16160:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16164:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   16166:	4618      	mov	r0, r3
   16168:	f7f1 f81e 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1616c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16170:	4428      	add	r0, r5
   16172:	f7f1 f819 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   16176:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16178:	f8cd a000 	str.w	sl, [sp]
                  raw_sum, params.output_multiplier, params.output_shift) +
   1617c:	4405      	add	r5, r0
   1617e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   16180:	4285      	cmp	r5, r0
   16182:	bfb8      	it	lt
   16184:	4605      	movlt	r5, r0
   16186:	6b20      	ldr	r0, [r4, #48]	; 0x30
   16188:	4285      	cmp	r5, r0
   1618a:	bfa8      	it	ge
   1618c:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1618e:	4643      	mov	r3, r8
   16190:	463a      	mov	r2, r7
   16192:	4631      	mov	r1, r6
   16194:	4648      	mov	r0, r9
   16196:	f7ff fc66 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1619a:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1619c:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   161a0:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   161a2:	e7b3      	b.n	1610c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   161a4:	f108 0801 	add.w	r8, r8, #1
   161a8:	e7a8      	b.n	160fc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   161aa:	3701      	adds	r7, #1
   161ac:	e79c      	b.n	160e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   161ae:	3601      	adds	r6, #1
   161b0:	e793      	b.n	160da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   161b2:	a804      	add	r0, sp, #16
   161b4:	f7ff fb8a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   161b8:	b01b      	add	sp, #108	; 0x6c
   161ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000161be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   161be:	b5f0      	push	{r4, r5, r6, r7, lr}
   161c0:	b0ab      	sub	sp, #172	; 0xac
   161c2:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   161c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   161c6:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   161c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   161ca:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   161cc:	6943      	ldr	r3, [r0, #20]
   161ce:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   161d0:	6843      	ldr	r3, [r0, #4]
   161d2:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   161d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   161d6:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   161d8:	6983      	ldr	r3, [r0, #24]
   161da:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   161dc:	6883      	ldr	r3, [r0, #8]
   161de:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   161e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   161e2:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   161e4:	69c3      	ldr	r3, [r0, #28]
   161e6:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   161e8:	6a03      	ldr	r3, [r0, #32]
   161ea:	931b      	str	r3, [sp, #108]	; 0x6c
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   161ec:	4614      	mov	r4, r2
  params->quantized_activation_min = min;
   161ee:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   161f2:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   161f4:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   161f8:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   161fa:	f7ff fbac 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   161fe:	4621      	mov	r1, r4
   16200:	a80a      	add	r0, sp, #40	; 0x28
   16202:	f7ff fba8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   16206:	a90a      	add	r1, sp, #40	; 0x28
   16208:	aa16      	add	r2, sp, #88	; 0x58
   1620a:	a810      	add	r0, sp, #64	; 0x40
   1620c:	f7ff fd1a 	bl	15c44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   16210:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   16212:	a80a      	add	r0, sp, #40	; 0x28
   16214:	f7ff fb5a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   16218:	a810      	add	r0, sp, #64	; 0x40
   1621a:	f7ff fb57 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   1621e:	7833      	ldrb	r3, [r6, #0]
   16220:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   16222:	4629      	mov	r1, r5
   16224:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   16226:	d13e      	bne.n	162a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   16228:	b31f      	cbz	r7, 16272 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   1622a:	f7ff fb94 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1622e:	b105      	cbz	r5, 16232 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   16230:	686d      	ldr	r5, [r5, #4]
   16232:	4621      	mov	r1, r4
   16234:	a80a      	add	r0, sp, #40	; 0x28
   16236:	f7ff fb8e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1623a:	b104      	cbz	r4, 1623e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   1623c:	6864      	ldr	r4, [r4, #4]
   1623e:	4631      	mov	r1, r6
   16240:	a804      	add	r0, sp, #16
   16242:	f7ff fb88 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16246:	6873      	ldr	r3, [r6, #4]
   16248:	9302      	str	r3, [sp, #8]
   1624a:	ab04      	add	r3, sp, #16
   1624c:	e9cd 4300 	strd	r4, r3, [sp]
   16250:	462a      	mov	r2, r5
   16252:	ab0a      	add	r3, sp, #40	; 0x28
   16254:	a910      	add	r1, sp, #64	; 0x40
   16256:	a816      	add	r0, sp, #88	; 0x58
   16258:	f7ff fea5 	bl	15fa6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   1625c:	a804      	add	r0, sp, #16
   1625e:	f7ff fb35 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   16262:	a80a      	add	r0, sp, #40	; 0x28
   16264:	f7ff fb32 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   16268:	a810      	add	r0, sp, #64	; 0x40
   1626a:	f7ff fb2f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1626e:	b02b      	add	sp, #172	; 0xac
   16270:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   16272:	f7ff fb70 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16276:	b105      	cbz	r5, 1627a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   16278:	686d      	ldr	r5, [r5, #4]
   1627a:	4621      	mov	r1, r4
   1627c:	a80a      	add	r0, sp, #40	; 0x28
   1627e:	f7ff fb6a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16282:	b104      	cbz	r4, 16286 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   16284:	6864      	ldr	r4, [r4, #4]
   16286:	4631      	mov	r1, r6
   16288:	a804      	add	r0, sp, #16
   1628a:	f7ff fb64 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1628e:	6873      	ldr	r3, [r6, #4]
   16290:	9302      	str	r3, [sp, #8]
   16292:	ab04      	add	r3, sp, #16
   16294:	e9cd 4300 	strd	r4, r3, [sp]
   16298:	462a      	mov	r2, r5
   1629a:	ab0a      	add	r3, sp, #40	; 0x28
   1629c:	a910      	add	r1, sp, #64	; 0x40
   1629e:	a816      	add	r0, sp, #88	; 0x58
   162a0:	f7ff fc86 	bl	15bb0 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   162a4:	e7da      	b.n	1625c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   162a6:	b1cf      	cbz	r7, 162dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   162a8:	f7ff fb55 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162ac:	b105      	cbz	r5, 162b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   162ae:	686d      	ldr	r5, [r5, #4]
   162b0:	4621      	mov	r1, r4
   162b2:	a80a      	add	r0, sp, #40	; 0x28
   162b4:	f7ff fb4f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162b8:	b104      	cbz	r4, 162bc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   162ba:	6864      	ldr	r4, [r4, #4]
   162bc:	4631      	mov	r1, r6
   162be:	a804      	add	r0, sp, #16
   162c0:	f7ff fb49 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162c4:	6873      	ldr	r3, [r6, #4]
   162c6:	9302      	str	r3, [sp, #8]
   162c8:	ab04      	add	r3, sp, #16
   162ca:	e9cd 4300 	strd	r4, r3, [sp]
   162ce:	462a      	mov	r2, r5
   162d0:	ab0a      	add	r3, sp, #40	; 0x28
   162d2:	a910      	add	r1, sp, #64	; 0x40
   162d4:	a816      	add	r0, sp, #88	; 0x58
   162d6:	f7ff feec 	bl	160b2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   162da:	e7bf      	b.n	1625c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   162dc:	f7ff fb3b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162e0:	b105      	cbz	r5, 162e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   162e2:	686d      	ldr	r5, [r5, #4]
   162e4:	4621      	mov	r1, r4
   162e6:	a80a      	add	r0, sp, #40	; 0x28
   162e8:	f7ff fb35 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162ec:	b104      	cbz	r4, 162f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   162ee:	6864      	ldr	r4, [r4, #4]
   162f0:	4631      	mov	r1, r6
   162f2:	a804      	add	r0, sp, #16
   162f4:	f7ff fb2f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   162f8:	6873      	ldr	r3, [r6, #4]
   162fa:	9302      	str	r3, [sp, #8]
   162fc:	ab04      	add	r3, sp, #16
   162fe:	e9cd 4300 	strd	r4, r3, [sp]
   16302:	462a      	mov	r2, r5
   16304:	ab0a      	add	r3, sp, #40	; 0x28
   16306:	a910      	add	r1, sp, #64	; 0x40
   16308:	a816      	add	r0, sp, #88	; 0x58
   1630a:	f7ff fc06 	bl	15b1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   1630e:	e7a5      	b.n	1625c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

00016310 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   16310:	b508      	push	{r3, lr}
   16312:	4618      	mov	r0, r3
   16314:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16316:	781a      	ldrb	r2, [r3, #0]
   16318:	2a03      	cmp	r2, #3
   1631a:	d001      	beq.n	16320 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   1631c:	2a09      	cmp	r2, #9
   1631e:	d103      	bne.n	16328 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   16320:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   16324:	f7ff ff4b 	bl	161be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   16328:	2000      	movs	r0, #0
   1632a:	bd08      	pop	{r3, pc}

0001632c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
namespace tflite {

namespace reference_ops {

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16330:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16332:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16334:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16336:	4605      	mov	r5, r0
   16338:	9102      	str	r1, [sp, #8]
   1633a:	461e      	mov	r6, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1633c:	dc01      	bgt.n	16342 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   1633e:	f008 f959 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16342:	6831      	ldr	r1, [r6, #0]
   16344:	1e7b      	subs	r3, r7, #1
   16346:	428b      	cmp	r3, r1
   16348:	d1f9      	bne.n	1633e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   1634a:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1634c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1634e:	bfb8      	it	lt
   16350:	19e4      	addlt	r4, r4, r7
  }
  const int axis_size = input1_shape.Dims(axis);
   16352:	4621      	mov	r1, r4
   16354:	f7ff fac5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   16358:	f04f 0800 	mov.w	r8, #0
  const int axis_size = input1_shape.Dims(axis);
   1635c:	9001      	str	r0, [sp, #4]
  int outer_size = 1;
   1635e:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < axis; ++i) {
   16362:	4544      	cmp	r4, r8
   16364:	dd0f      	ble.n	16386 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16366:	4641      	mov	r1, r8
   16368:	4628      	mov	r0, r5
   1636a:	f7ff faba 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1636e:	4641      	mov	r1, r8
   16370:	4681      	mov	r9, r0
   16372:	4630      	mov	r0, r6
   16374:	f7ff fab5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16378:	4581      	cmp	r9, r0
   1637a:	d1e0      	bne.n	1633e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   1637c:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   16380:	f108 0801 	add.w	r8, r8, #1
   16384:	e7ed      	b.n	16362 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   16386:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   1638a:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1638c:	45b8      	cmp	r8, r7
   1638e:	db2d      	blt.n	163ec <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   16390:	9b01      	ldr	r3, [sp, #4]
   16392:	9400      	str	r4, [sp, #0]
   16394:	fb03 fe04 	mul.w	lr, r3, r4
   16398:	00a3      	lsls	r3, r4, #2
   1639a:	9303      	str	r3, [sp, #12]
   1639c:	2300      	movs	r3, #0
   1639e:	4618      	mov	r0, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   163a0:	461d      	mov	r5, r3
   163a2:	45ab      	cmp	fp, r5
   163a4:	dd3f      	ble.n	16426 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
   163a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   163a8:	9900      	ldr	r1, [sp, #0]
   163aa:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   163ae:	9a02      	ldr	r2, [sp, #8]
    for (int inner = 0; inner < inner_size; ++inner) {
   163b0:	2700      	movs	r7, #0
   163b2:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   163b6:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   163ba:	42bc      	cmp	r4, r7
   163bc:	dd2c      	ble.n	16418 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   163be:	ecfa 7a01 	vldmia	sl!, {s15}
   163c2:	46b4      	mov	ip, r6
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   163c4:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   163c6:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   163ca:	9901      	ldr	r1, [sp, #4]
   163cc:	428a      	cmp	r2, r1
   163ce:	da1e      	bge.n	1640e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   163d0:	ed9c 7a00 	vldr	s14, [ip]
   163d4:	9903      	ldr	r1, [sp, #12]
   163d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   163da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   163de:	bfc4      	itt	gt
   163e0:	4691      	movgt	r9, r2
          min_max_value = curr_value;
   163e2:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   163e6:	3201      	adds	r2, #1
   163e8:	448c      	add	ip, r1
   163ea:	e7ee      	b.n	163ca <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   163ec:	4641      	mov	r1, r8
   163ee:	4628      	mov	r0, r5
   163f0:	f7ff fa77 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   163f4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   163f8:	4681      	mov	r9, r0
   163fa:	4630      	mov	r0, r6
   163fc:	f7ff fa71 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16400:	4581      	cmp	r9, r0
   16402:	d19c      	bne.n	1633e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   16404:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   16408:	f108 0801 	add.w	r8, r8, #1
   1640c:	e7be      	b.n	1638c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   1640e:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   16412:	3701      	adds	r7, #1
   16414:	3604      	adds	r6, #4
   16416:	e7d0      	b.n	163ba <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   16418:	9a00      	ldr	r2, [sp, #0]
   1641a:	4472      	add	r2, lr
   1641c:	3501      	adds	r5, #1
   1641e:	4420      	add	r0, r4
   16420:	4473      	add	r3, lr
   16422:	9200      	str	r2, [sp, #0]
   16424:	e7bd      	b.n	163a2 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
    }
  }
}
   16426:	b005      	add	sp, #20
   16428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001642c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16430:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16432:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16434:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16436:	4605      	mov	r5, r0
   16438:	9102      	str	r1, [sp, #8]
   1643a:	461e      	mov	r6, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1643c:	dc01      	bgt.n	16442 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   1643e:	f008 f8d9 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16442:	6831      	ldr	r1, [r6, #0]
   16444:	1e7b      	subs	r3, r7, #1
   16446:	428b      	cmp	r3, r1
   16448:	d1f9      	bne.n	1643e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
  int axis = input2_data[0];
   1644a:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1644c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1644e:	bfb8      	it	lt
   16450:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   16452:	4621      	mov	r1, r4
   16454:	f7ff fa45 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   16458:	f04f 0800 	mov.w	r8, #0
  const int axis_size = input1_shape.Dims(axis);
   1645c:	9001      	str	r0, [sp, #4]
  int outer_size = 1;
   1645e:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < axis; ++i) {
   16462:	4544      	cmp	r4, r8
   16464:	dd0f      	ble.n	16486 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16466:	4641      	mov	r1, r8
   16468:	4628      	mov	r0, r5
   1646a:	f7ff fa3a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1646e:	4641      	mov	r1, r8
   16470:	4681      	mov	r9, r0
   16472:	4630      	mov	r0, r6
   16474:	f7ff fa35 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16478:	4581      	cmp	r9, r0
   1647a:	d1e0      	bne.n	1643e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   1647c:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   16480:	f108 0801 	add.w	r8, r8, #1
   16484:	e7ed      	b.n	16462 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  for (int i = axis + 1; i < dims_count; ++i) {
   16486:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   1648a:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   1648c:	45b8      	cmp	r8, r7
   1648e:	db2d      	blt.n	164ec <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   16490:	9b01      	ldr	r3, [sp, #4]
   16492:	9400      	str	r4, [sp, #0]
   16494:	fb03 fe04 	mul.w	lr, r3, r4
   16498:	00a3      	lsls	r3, r4, #2
   1649a:	9303      	str	r3, [sp, #12]
   1649c:	2300      	movs	r3, #0
   1649e:	4618      	mov	r0, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   164a0:	461d      	mov	r5, r3
   164a2:	45ab      	cmp	fp, r5
   164a4:	dd3f      	ble.n	16526 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
   164a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   164a8:	9900      	ldr	r1, [sp, #0]
   164aa:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   164ae:	9a02      	ldr	r2, [sp, #8]
    for (int inner = 0; inner < inner_size; ++inner) {
   164b0:	2700      	movs	r7, #0
   164b2:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   164b6:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   164ba:	42bc      	cmp	r4, r7
   164bc:	dd2c      	ble.n	16518 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   164be:	ecfa 7a01 	vldmia	sl!, {s15}
   164c2:	46b4      	mov	ip, r6
      for (int i = 1; i < axis_size; ++i) {
   164c4:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   164c6:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   164ca:	9901      	ldr	r1, [sp, #4]
   164cc:	428a      	cmp	r2, r1
   164ce:	da1e      	bge.n	1650e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        if (cmp(curr_value, min_max_value)) {
   164d0:	ed9c 7a00 	vldr	s14, [ip]
   164d4:	9903      	ldr	r1, [sp, #12]
   164d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   164da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   164de:	bf44      	itt	mi
   164e0:	4691      	movmi	r9, r2
          min_max_value = curr_value;
   164e2:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   164e6:	3201      	adds	r2, #1
   164e8:	448c      	add	ip, r1
   164ea:	e7ee      	b.n	164ca <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   164ec:	4641      	mov	r1, r8
   164ee:	4628      	mov	r0, r5
   164f0:	f7ff f9f7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   164f4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   164f8:	4681      	mov	r9, r0
   164fa:	4630      	mov	r0, r6
   164fc:	f7ff f9f1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16500:	4581      	cmp	r9, r0
   16502:	d19c      	bne.n	1643e <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   16504:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   16508:	f108 0801 	add.w	r8, r8, #1
   1650c:	e7be      	b.n	1648c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
      output_data[outer * inner_size + inner] = min_max_index;
   1650e:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   16512:	3701      	adds	r7, #1
   16514:	3604      	adds	r6, #4
   16516:	e7d0      	b.n	164ba <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   16518:	9a00      	ldr	r2, [sp, #0]
   1651a:	4472      	add	r2, lr
   1651c:	3501      	adds	r5, #1
   1651e:	4420      	add	r0, r4
   16520:	4473      	add	r3, lr
   16522:	9200      	str	r2, [sp, #0]
   16524:	e7bd      	b.n	164a2 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   16526:	b005      	add	sp, #20
   16528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001652c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   1652c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16530:	f8d0 a000 	ldr.w	sl, [r0]
   16534:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16538:	4606      	mov	r6, r0
   1653a:	4689      	mov	r9, r1
   1653c:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1653e:	dc01      	bgt.n	16544 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   16540:	f008 f858 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16544:	f8d8 1000 	ldr.w	r1, [r8]
   16548:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1654c:	428b      	cmp	r3, r1
   1654e:	d1f7      	bne.n	16540 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   16550:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   16552:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   16554:	bfb8      	it	lt
   16556:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16558:	4621      	mov	r1, r4
   1655a:	f7ff f9c2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   1655e:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   16562:	4605      	mov	r5, r0
  int outer_size = 1;
   16564:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   16566:	455c      	cmp	r4, fp
   16568:	dd0f      	ble.n	1658a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   1656a:	4659      	mov	r1, fp
   1656c:	4630      	mov	r0, r6
   1656e:	f7ff f9b8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16572:	4659      	mov	r1, fp
   16574:	9001      	str	r0, [sp, #4]
   16576:	4640      	mov	r0, r8
   16578:	f7ff f9b3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1657c:	9b01      	ldr	r3, [sp, #4]
   1657e:	4283      	cmp	r3, r0
   16580:	d1de      	bne.n	16540 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16582:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   16584:	f10b 0b01 	add.w	fp, fp, #1
   16588:	e7ed      	b.n	16566 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   1658a:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   1658e:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16590:	45d3      	cmp	fp, sl
   16592:	db22      	blt.n	165da <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   16594:	fb05 f304 	mul.w	r3, r5, r4
   16598:	9301      	str	r3, [sp, #4]
   1659a:	2300      	movs	r3, #0
   1659c:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   165a0:	461e      	mov	r6, r3
   165a2:	42b7      	cmp	r7, r6
   165a4:	dd33      	ble.n	1660e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   165a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   165a8:	eba1 0904 	sub.w	r9, r1, r4
   165ac:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   165b0:	2200      	movs	r2, #0
   165b2:	4294      	cmp	r4, r2
   165b4:	dd26      	ble.n	16604 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   165b6:	f819 ab01 	ldrb.w	sl, [r9], #1
   165ba:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   165be:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   165c0:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   165c4:	42a8      	cmp	r0, r5
   165c6:	da19      	bge.n	165fc <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   165c8:	f89c b000 	ldrb.w	fp, [ip]
   165cc:	45d3      	cmp	fp, sl
   165ce:	bf84      	itt	hi
   165d0:	4680      	movhi	r8, r0
   165d2:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   165d4:	3001      	adds	r0, #1
   165d6:	44a4      	add	ip, r4
   165d8:	e7f4      	b.n	165c4 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   165da:	4659      	mov	r1, fp
   165dc:	4630      	mov	r0, r6
   165de:	f7ff f980 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   165e2:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   165e6:	9001      	str	r0, [sp, #4]
   165e8:	4640      	mov	r0, r8
   165ea:	f7ff f97a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   165ee:	9b01      	ldr	r3, [sp, #4]
   165f0:	4283      	cmp	r3, r0
   165f2:	d1a5      	bne.n	16540 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   165f4:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   165f6:	f10b 0b01 	add.w	fp, fp, #1
   165fa:	e7c9      	b.n	16590 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   165fc:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   16600:	3201      	adds	r2, #1
   16602:	e7d6      	b.n	165b2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   16604:	9a01      	ldr	r2, [sp, #4]
   16606:	3601      	adds	r6, #1
   16608:	4423      	add	r3, r4
   1660a:	4411      	add	r1, r2
   1660c:	e7c9      	b.n	165a2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   1660e:	b003      	add	sp, #12
   16610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016614 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16618:	f8d0 a000 	ldr.w	sl, [r0]
   1661c:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16620:	4606      	mov	r6, r0
   16622:	4689      	mov	r9, r1
   16624:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16626:	dc01      	bgt.n	1662c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   16628:	f007 ffe4 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   1662c:	f8d8 1000 	ldr.w	r1, [r8]
   16630:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   16634:	428b      	cmp	r3, r1
   16636:	d1f7      	bne.n	16628 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   16638:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1663a:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1663c:	bfb8      	it	lt
   1663e:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16640:	4621      	mov	r1, r4
   16642:	f7ff f94e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   16646:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   1664a:	4605      	mov	r5, r0
  int outer_size = 1;
   1664c:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   1664e:	455c      	cmp	r4, fp
   16650:	dd0f      	ble.n	16672 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16652:	4659      	mov	r1, fp
   16654:	4630      	mov	r0, r6
   16656:	f7ff f944 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1665a:	4659      	mov	r1, fp
   1665c:	9001      	str	r0, [sp, #4]
   1665e:	4640      	mov	r0, r8
   16660:	f7ff f93f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16664:	9b01      	ldr	r3, [sp, #4]
   16666:	4283      	cmp	r3, r0
   16668:	d1de      	bne.n	16628 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   1666a:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   1666c:	f10b 0b01 	add.w	fp, fp, #1
   16670:	e7ed      	b.n	1664e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16672:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   16676:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16678:	45d3      	cmp	fp, sl
   1667a:	db22      	blt.n	166c2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   1667c:	fb05 f304 	mul.w	r3, r5, r4
   16680:	9301      	str	r3, [sp, #4]
   16682:	2300      	movs	r3, #0
   16684:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   16688:	461e      	mov	r6, r3
   1668a:	42b7      	cmp	r7, r6
   1668c:	dd33      	ble.n	166f6 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   1668e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16690:	eba1 0904 	sub.w	r9, r1, r4
   16694:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   16698:	2200      	movs	r2, #0
   1669a:	4294      	cmp	r4, r2
   1669c:	dd26      	ble.n	166ec <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1669e:	f819 ab01 	ldrb.w	sl, [r9], #1
   166a2:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   166a6:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   166a8:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   166ac:	42a8      	cmp	r0, r5
   166ae:	da19      	bge.n	166e4 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   166b0:	f89c b000 	ldrb.w	fp, [ip]
   166b4:	45d3      	cmp	fp, sl
   166b6:	bf3c      	itt	cc
   166b8:	4680      	movcc	r8, r0
   166ba:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   166bc:	3001      	adds	r0, #1
   166be:	44a4      	add	ip, r4
   166c0:	e7f4      	b.n	166ac <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   166c2:	4659      	mov	r1, fp
   166c4:	4630      	mov	r0, r6
   166c6:	f7ff f90c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   166ca:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   166ce:	9001      	str	r0, [sp, #4]
   166d0:	4640      	mov	r0, r8
   166d2:	f7ff f906 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   166d6:	9b01      	ldr	r3, [sp, #4]
   166d8:	4283      	cmp	r3, r0
   166da:	d1a5      	bne.n	16628 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   166dc:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   166de:	f10b 0b01 	add.w	fp, fp, #1
   166e2:	e7c9      	b.n	16678 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   166e4:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   166e8:	3201      	adds	r2, #1
   166ea:	e7d6      	b.n	1669a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   166ec:	9a01      	ldr	r2, [sp, #4]
   166ee:	3601      	adds	r6, #1
   166f0:	4423      	add	r3, r4
   166f2:	4411      	add	r1, r2
   166f4:	e7c9      	b.n	1668a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   166f6:	b003      	add	sp, #12
   166f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000166fc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   166fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   16700:	f8d0 a000 	ldr.w	sl, [r0]
   16704:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   16708:	4606      	mov	r6, r0
   1670a:	4689      	mov	r9, r1
   1670c:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   1670e:	dc01      	bgt.n	16714 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   16710:	f007 ff70 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   16714:	f8d8 1000 	ldr.w	r1, [r8]
   16718:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1671c:	428b      	cmp	r3, r1
   1671e:	d1f7      	bne.n	16710 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   16720:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   16722:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   16724:	bfb8      	it	lt
   16726:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16728:	4621      	mov	r1, r4
   1672a:	f7ff f8da 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   1672e:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   16732:	4605      	mov	r5, r0
  int outer_size = 1;
   16734:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   16736:	455c      	cmp	r4, fp
   16738:	dd0f      	ble.n	1675a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   1673a:	4659      	mov	r1, fp
   1673c:	4630      	mov	r0, r6
   1673e:	f7ff f8d0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16742:	4659      	mov	r1, fp
   16744:	9001      	str	r0, [sp, #4]
   16746:	4640      	mov	r0, r8
   16748:	f7ff f8cb 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1674c:	9b01      	ldr	r3, [sp, #4]
   1674e:	4283      	cmp	r3, r0
   16750:	d1de      	bne.n	16710 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   16752:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   16754:	f10b 0b01 	add.w	fp, fp, #1
   16758:	e7ed      	b.n	16736 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   1675a:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   1675e:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16760:	45d3      	cmp	fp, sl
   16762:	db22      	blt.n	167aa <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   16764:	fb05 f304 	mul.w	r3, r5, r4
   16768:	9301      	str	r3, [sp, #4]
   1676a:	2300      	movs	r3, #0
   1676c:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   16770:	461e      	mov	r6, r3
   16772:	42b7      	cmp	r7, r6
   16774:	dd33      	ble.n	167de <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   16776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16778:	eba1 0904 	sub.w	r9, r1, r4
   1677c:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   16780:	2200      	movs	r2, #0
   16782:	4294      	cmp	r4, r2
   16784:	dd26      	ble.n	167d4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   16786:	f919 ab01 	ldrsb.w	sl, [r9], #1
   1678a:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   1678e:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   16790:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   16794:	42a8      	cmp	r0, r5
   16796:	da19      	bge.n	167cc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   16798:	f99c b000 	ldrsb.w	fp, [ip]
   1679c:	45d3      	cmp	fp, sl
   1679e:	bfc4      	itt	gt
   167a0:	4680      	movgt	r8, r0
   167a2:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   167a4:	3001      	adds	r0, #1
   167a6:	44a4      	add	ip, r4
   167a8:	e7f4      	b.n	16794 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   167aa:	4659      	mov	r1, fp
   167ac:	4630      	mov	r0, r6
   167ae:	f7ff f898 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   167b2:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   167b6:	9001      	str	r0, [sp, #4]
   167b8:	4640      	mov	r0, r8
   167ba:	f7ff f892 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   167be:	9b01      	ldr	r3, [sp, #4]
   167c0:	4283      	cmp	r3, r0
   167c2:	d1a5      	bne.n	16710 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   167c4:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   167c6:	f10b 0b01 	add.w	fp, fp, #1
   167ca:	e7c9      	b.n	16760 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   167cc:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   167d0:	3201      	adds	r2, #1
   167d2:	e7d6      	b.n	16782 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   167d4:	9a01      	ldr	r2, [sp, #4]
   167d6:	3601      	adds	r6, #1
   167d8:	4423      	add	r3, r4
   167da:	4411      	add	r1, r2
   167dc:	e7c9      	b.n	16772 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   167de:	b003      	add	sp, #12
   167e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000167e4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   167e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   167e8:	f8d0 a000 	ldr.w	sl, [r0]
   167ec:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   167f0:	4606      	mov	r6, r0
   167f2:	4689      	mov	r9, r1
   167f4:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   167f6:	dc01      	bgt.n	167fc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   167f8:	f007 fefc 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   167fc:	f8d8 1000 	ldr.w	r1, [r8]
   16800:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   16804:	428b      	cmp	r3, r1
   16806:	d1f7      	bne.n	167f8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   16808:	6814      	ldr	r4, [r2, #0]
  if (axis < 0) {
   1680a:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   1680c:	bfb8      	it	lt
   1680e:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   16810:	4621      	mov	r1, r4
   16812:	f7ff f866 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   16816:	f04f 0b00 	mov.w	fp, #0
  const int axis_size = input1_shape.Dims(axis);
   1681a:	4605      	mov	r5, r0
  int outer_size = 1;
   1681c:	2701      	movs	r7, #1
  for (int i = 0; i < axis; ++i) {
   1681e:	455c      	cmp	r4, fp
   16820:	dd0f      	ble.n	16842 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   16822:	4659      	mov	r1, fp
   16824:	4630      	mov	r0, r6
   16826:	f7ff f85c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1682a:	4659      	mov	r1, fp
   1682c:	9001      	str	r0, [sp, #4]
   1682e:	4640      	mov	r0, r8
   16830:	f7ff f857 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16834:	9b01      	ldr	r3, [sp, #4]
   16836:	4283      	cmp	r3, r0
   16838:	d1de      	bne.n	167f8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   1683a:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   1683c:	f10b 0b01 	add.w	fp, fp, #1
   16840:	e7ed      	b.n	1681e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   16842:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   16846:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   16848:	45d3      	cmp	fp, sl
   1684a:	db22      	blt.n	16892 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   1684c:	fb05 f304 	mul.w	r3, r5, r4
   16850:	9301      	str	r3, [sp, #4]
   16852:	2300      	movs	r3, #0
   16854:	eb09 0104 	add.w	r1, r9, r4
  for (int outer = 0; outer < outer_size; ++outer) {
   16858:	461e      	mov	r6, r3
   1685a:	42b7      	cmp	r7, r6
   1685c:	dd33      	ble.n	168c6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   1685e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16860:	eba1 0904 	sub.w	r9, r1, r4
   16864:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   16868:	2200      	movs	r2, #0
   1686a:	4294      	cmp	r4, r2
   1686c:	dd26      	ble.n	168bc <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   1686e:	f919 ab01 	ldrsb.w	sl, [r9], #1
   16872:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   16876:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   16878:	f04f 0800 	mov.w	r8, #0
      for (int i = 1; i < axis_size; ++i) {
   1687c:	42a8      	cmp	r0, r5
   1687e:	da19      	bge.n	168b4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   16880:	f99c b000 	ldrsb.w	fp, [ip]
   16884:	45d3      	cmp	fp, sl
   16886:	bfbc      	itt	lt
   16888:	4680      	movlt	r8, r0
   1688a:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   1688c:	3001      	adds	r0, #1
   1688e:	44a4      	add	ip, r4
   16890:	e7f4      	b.n	1687c <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   16892:	4659      	mov	r1, fp
   16894:	4630      	mov	r0, r6
   16896:	f7ff f824 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1689a:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   1689e:	9001      	str	r0, [sp, #4]
   168a0:	4640      	mov	r0, r8
   168a2:	f7ff f81e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   168a6:	9b01      	ldr	r3, [sp, #4]
   168a8:	4283      	cmp	r3, r0
   168aa:	d1a5      	bne.n	167f8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   168ac:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   168ae:	f10b 0b01 	add.w	fp, fp, #1
   168b2:	e7c9      	b.n	16848 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   168b4:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   168b8:	3201      	adds	r2, #1
   168ba:	e7d6      	b.n	1686a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   168bc:	9a01      	ldr	r2, [sp, #4]
   168be:	3601      	adds	r6, #1
   168c0:	4423      	add	r3, r4
   168c2:	4411      	add	r1, r2
   168c4:	e7c9      	b.n	1685a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   168c6:	b003      	add	sp, #12
   168c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000168cc <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, false);
   168cc:	2200      	movs	r2, #0
   168ce:	f7f0 be33 	b.w	7538 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000168d2 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, true);
   168d2:	2201      	movs	r2, #1
   168d4:	f7f0 be30 	b.w	7538 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>:
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   168d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ > kMaxSmallSize) {
   168da:	6803      	ldr	r3, [r0, #0]
   168dc:	2b05      	cmp	r3, #5
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   168de:	4604      	mov	r4, r0
   168e0:	460d      	mov	r5, r1
   168e2:	4616      	mov	r6, r2
    if (size_ > kMaxSmallSize) {
   168e4:	dd03      	ble.n	168ee <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
      delete[] dims_pointer_;
   168e6:	6840      	ldr	r0, [r0, #4]
   168e8:	b108      	cbz	r0, 168ee <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
   168ea:	f007 fe5f 	bl	1e5ac <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   168ee:	2d05      	cmp	r5, #5
    size_ = dimensions_count;
   168f0:	6025      	str	r5, [r4, #0]
    if (dimensions_count > kMaxSmallSize) {
   168f2:	ea4f 0785 	mov.w	r7, r5, lsl #2
   168f6:	dc06      	bgt.n	16906 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168f8:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   168fa:	463a      	mov	r2, r7
   168fc:	4631      	mov	r1, r6
  }
   168fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   16902:	f007 be8c 	b.w	1e61e <memcpy>
      dims_pointer_ = new int32[dimensions_count];
   16906:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   1690a:	4285      	cmp	r5, r0
   1690c:	bfb4      	ite	lt
   1690e:	4638      	movlt	r0, r7
   16910:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   16914:	f007 fe5b 	bl	1e5ce <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16918:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   1691a:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1691c:	2b05      	cmp	r3, #5
   1691e:	dcec      	bgt.n	168fa <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x22>
   16920:	e7ea      	b.n	168f8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x20>

00016922 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
   16926:	680b      	ldr	r3, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
   16928:	684a      	ldr	r2, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1692a:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1692c:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1692e:	6855      	ldr	r5, [r2, #4]
   16930:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   16934:	eb14 1483 	adds.w	r4, r4, r3, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16938:	b08c      	sub	sp, #48	; 0x30
   1693a:	d108      	bne.n	1694e <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
  RuntimeShape() : size_(0) {}
   1693c:	9400      	str	r4, [sp, #0]
   1693e:	b985      	cbnz	r5, 16962 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   16940:	9506      	str	r5, [sp, #24]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   16942:	9f00      	ldr	r7, [sp, #0]
   16944:	9b06      	ldr	r3, [sp, #24]
   16946:	429f      	cmp	r7, r3
   16948:	d015      	beq.n	16976 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x54>
   1694a:	f007 fe53 	bl	1e5f4 <abort>
  const int dims_size = dims->size;
   1694e:	68a2      	ldr	r2, [r4, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   16950:	2300      	movs	r3, #0
   16952:	f852 1b04 	ldr.w	r1, [r2], #4
   16956:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   16958:	4668      	mov	r0, sp
   1695a:	f7ff ffbd 	bl	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1695e:	6864      	ldr	r4, [r4, #4]
   16960:	e7ed      	b.n	1693e <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  const int dims_size = dims->size;
   16962:	68aa      	ldr	r2, [r5, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   16964:	2300      	movs	r3, #0
   16966:	f852 1b04 	ldr.w	r1, [r2], #4
   1696a:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   1696c:	a806      	add	r0, sp, #24
   1696e:	f7ff ffb3 	bl	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16972:	686d      	ldr	r5, [r5, #4]
   16974:	e7e5      	b.n	16942 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  for (int i = 0; i < dims_count; ++i) {
   16976:	2600      	movs	r6, #0
   16978:	42b7      	cmp	r7, r6
   1697a:	dd0c      	ble.n	16996 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1697c:	4631      	mov	r1, r6
   1697e:	4668      	mov	r0, sp
   16980:	f7fe ffaf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16984:	4631      	mov	r1, r6
   16986:	4680      	mov	r8, r0
   16988:	a806      	add	r0, sp, #24
   1698a:	f7fe ffaa 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1698e:	4580      	cmp	r8, r0
   16990:	d1db      	bne.n	1694a <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x28>
  for (int i = 0; i < dims_count; ++i) {
   16992:	3601      	adds	r6, #1
   16994:	e7f0      	b.n	16978 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x56>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16996:	2f05      	cmp	r7, #5
   16998:	bfcc      	ite	gt
   1699a:	9a01      	ldrgt	r2, [sp, #4]
   1699c:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   1699e:	2300      	movs	r3, #0
    int buffer_size = 1;
   169a0:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
   169a4:	429f      	cmp	r7, r3
   169a6:	dc0a      	bgt.n	169be <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x9c>

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   169a8:	2600      	movs	r6, #0
   169aa:	4546      	cmp	r6, r8
   169ac:	da0d      	bge.n	169ca <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  { return __builtin_ceilf(__x); }
   169ae:	ecb4 0a01 	vldmia	r4!, {s0}
   169b2:	f7fb fb35 	bl	12020 <ceilf>
   169b6:	3601      	adds	r6, #1
    output_data[i] = std::ceil(input_data[i]);
   169b8:	eca5 0a01 	vstmia	r5!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   169bc:	e7f5      	b.n	169aa <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      buffer_size *= dims_data[i];
   169be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   169c2:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   169c4:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
   169c8:	e7ec      	b.n	169a4 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x82>
                      GetTensorShape(output), GetTensorData<float>(output));
   169ca:	a806      	add	r0, sp, #24
   169cc:	f7fe ff7e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   169d0:	4668      	mov	r0, sp
   169d2:	f7fe ff7b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   169d6:	2000      	movs	r0, #0
   169d8:	b00c      	add	sp, #48	; 0x30
   169da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
                            const RuntimeShape& check_shape_1) {
   169de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   169e2:	6805      	ldr	r5, [r0, #0]
   169e4:	680b      	ldr	r3, [r1, #0]
   169e6:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   169e8:	4604      	mov	r4, r0
   169ea:	4688      	mov	r8, r1
   169ec:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   169ee:	d001      	beq.n	169f4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   169f0:	f007 fe00 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
   169f4:	2600      	movs	r6, #0
   169f6:	42ae      	cmp	r6, r5
   169f8:	da0c      	bge.n	16a14 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   169fa:	4631      	mov	r1, r6
   169fc:	4620      	mov	r0, r4
   169fe:	f7fe ff70 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a02:	4631      	mov	r1, r6
   16a04:	4681      	mov	r9, r0
   16a06:	4640      	mov	r0, r8
   16a08:	f7fe ff6b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a0c:	4581      	cmp	r9, r0
   16a0e:	d1ef      	bne.n	169f0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   16a10:	3601      	adds	r6, #1
   16a12:	e7f0      	b.n	169f6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   16a14:	683b      	ldr	r3, [r7, #0]
   16a16:	429d      	cmp	r5, r3
   16a18:	d1ea      	bne.n	169f0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   16a1a:	2600      	movs	r6, #0
   16a1c:	42b5      	cmp	r5, r6
   16a1e:	dd0c      	ble.n	16a3a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   16a20:	4631      	mov	r1, r6
   16a22:	4620      	mov	r0, r4
   16a24:	f7fe ff5d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a28:	4631      	mov	r1, r6
   16a2a:	4680      	mov	r8, r0
   16a2c:	4638      	mov	r0, r7
   16a2e:	f7fe ff58 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16a32:	4580      	cmp	r8, r0
   16a34:	d1dc      	bne.n	169f0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   16a36:	3601      	adds	r6, #1
   16a38:	e7f0      	b.n	16a1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16a3a:	2d05      	cmp	r5, #5
   16a3c:	bfcc      	ite	gt
   16a3e:	6864      	ldrgt	r4, [r4, #4]
   16a40:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   16a42:	2300      	movs	r3, #0
    int buffer_size = 1;
   16a44:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   16a46:	429d      	cmp	r5, r3
   16a48:	dd04      	ble.n	16a54 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   16a4a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   16a4e:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   16a50:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   16a52:	e7f8      	b.n	16a46 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
}
   16a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>:
    const RuntimeShape& unextended_output_shape) {
   16a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a5c:	461f      	mov	r7, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   16a5e:	680b      	ldr	r3, [r1, #0]
   16a60:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape) {
   16a62:	b09c      	sub	sp, #112	; 0x70
   16a64:	4606      	mov	r6, r0
   16a66:	4614      	mov	r4, r2
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   16a68:	dd01      	ble.n	16a6e <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x16>
   16a6a:	f007 fdc3 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   16a6e:	6813      	ldr	r3, [r2, #0]
   16a70:	2b04      	cmp	r3, #4
   16a72:	dcfa      	bgt.n	16a6a <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   16a74:	683b      	ldr	r3, [r7, #0]
   16a76:	2b04      	cmp	r3, #4
   16a78:	dcf7      	bgt.n	16a6a <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
    return RuntimeShape(new_shape_size, shape, 1);
   16a7a:	460a      	mov	r2, r1
   16a7c:	2301      	movs	r3, #1
   16a7e:	2104      	movs	r1, #4
   16a80:	4668      	mov	r0, sp
   16a82:	f7fe ffc3 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   16a86:	4622      	mov	r2, r4
   16a88:	2301      	movs	r3, #1
   16a8a:	2104      	movs	r1, #4
   16a8c:	a806      	add	r0, sp, #24
   16a8e:	f7fe ffbd 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   16a92:	a90c      	add	r1, sp, #48	; 0x30
   16a94:	4668      	mov	r0, sp
   16a96:	f7ff f9a7 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   16a9a:	a914      	add	r1, sp, #80	; 0x50
   16a9c:	a806      	add	r0, sp, #24
   16a9e:	f7ff f9a3 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   16aa2:	2400      	movs	r4, #0
   16aa4:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   16aa8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   16aac:	46a2      	mov	sl, r4
    const int extent0 = extended_input0_shape.Dims(i);
   16aae:	4621      	mov	r1, r4
   16ab0:	4668      	mov	r0, sp
   16ab2:	f7fe ff16 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   16ab6:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   16ab8:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   16aba:	a806      	add	r0, sp, #24
   16abc:	f7fe ff11 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   16ac0:	4285      	cmp	r5, r0
   16ac2:	d005      	beq.n	16ad0 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>
      if (extent0 == 1) {
   16ac4:	2d01      	cmp	r5, #1
   16ac6:	d12c      	bne.n	16b22 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0xca>
        desc0_out->strides[i] = 0;
   16ac8:	f8c8 a010 	str.w	sl, [r8, #16]
        desc0_out->extents[i] = extent1;
   16acc:	f8c8 0000 	str.w	r0, [r8]
  for (int i = 0; i < N; ++i) {
   16ad0:	3401      	adds	r4, #1
   16ad2:	2c04      	cmp	r4, #4
   16ad4:	f109 0904 	add.w	r9, r9, #4
   16ad8:	f108 0804 	add.w	r8, r8, #4
   16adc:	d1e7      	bne.n	16aae <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x56>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   16ade:	a806      	add	r0, sp, #24
   16ae0:	f7fe fef4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   16ae4:	4668      	mov	r0, sp
   16ae6:	f7fe fef1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   16aea:	463a      	mov	r2, r7
   16aec:	4621      	mov	r1, r4
   16aee:	2301      	movs	r3, #1
   16af0:	4630      	mov	r0, r6
          desc2};
   16af2:	ac0c      	add	r4, sp, #48	; 0x30
   16af4:	f7fe ff8a 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   16af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16afa:	f106 0518 	add.w	r5, r6, #24
   16afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16b00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   16b04:	ac14      	add	r4, sp, #80	; 0x50
   16b06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   16b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16b0c:	f106 0538 	add.w	r5, r6, #56	; 0x38
   16b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   16b16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
   16b1a:	4630      	mov	r0, r6
   16b1c:	b01c      	add	sp, #112	; 0x70
   16b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   16b22:	2801      	cmp	r0, #1
   16b24:	d1a1      	bne.n	16a6a <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
        desc1_out->strides[i] = 0;
   16b26:	f8c9 a010 	str.w	sl, [r9, #16]
        desc1_out->extents[i] = extent0;
   16b2a:	f8c9 5000 	str.w	r5, [r9]
   16b2e:	e7cf      	b.n	16ad0 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>

00016b30 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16b30:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16b34:	b098      	sub	sp, #96	; 0x60
   16b36:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16b38:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16b3a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16b3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16b3e:	f7ff ff8b 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16b42:	2400      	movs	r4, #0
   16b44:	2100      	movs	r1, #0
   16b46:	a802      	add	r0, sp, #8
   16b48:	f7fe fecb 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b4c:	42a0      	cmp	r0, r4
   16b4e:	dd45      	ble.n	16bdc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16b50:	2500      	movs	r5, #0
   16b52:	2101      	movs	r1, #1
   16b54:	a802      	add	r0, sp, #8
   16b56:	f7fe fec4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b5a:	42a8      	cmp	r0, r5
   16b5c:	dd3c      	ble.n	16bd8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16b5e:	2600      	movs	r6, #0
   16b60:	2102      	movs	r1, #2
   16b62:	a802      	add	r0, sp, #8
   16b64:	f7fe febd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b68:	42b0      	cmp	r0, r6
   16b6a:	dd33      	ble.n	16bd4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16b6c:	2700      	movs	r7, #0
   16b6e:	2103      	movs	r1, #3
   16b70:	a802      	add	r0, sp, #8
   16b72:	f7fe feb6 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16b76:	42b8      	cmp	r0, r7
   16b78:	dd2a      	ble.n	16bd0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16b7a:	9700      	str	r7, [sp, #0]
   16b7c:	4633      	mov	r3, r6
   16b7e:	462a      	mov	r2, r5
   16b80:	4621      	mov	r1, r4
   16b82:	a808      	add	r0, sp, #32
   16b84:	f7fe ffa5 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b88:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16b8a:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b8c:	4633      	mov	r3, r6
   16b8e:	462a      	mov	r2, r5
   16b90:	4621      	mov	r1, r4
   16b92:	a810      	add	r0, sp, #64	; 0x40
   16b94:	f7fe ff9d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16b98:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16b9a:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16b9c:	9700      	str	r7, [sp, #0]
   16b9e:	4633      	mov	r3, r6
   16ba0:	4621      	mov	r1, r4
   16ba2:	a802      	add	r0, sp, #8
   16ba4:	f7fe ff5f 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16ba8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16baa:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16bae:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs == rhs;
   16bb2:	ed9a 7a00 	vldr	s14, [sl]
   16bb6:	edd9 7a00 	vldr	s15, [r9]
   16bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16bbc:	eeb4 7a67 	vcmp.f32	s14, s15
   16bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16bc4:	bf0c      	ite	eq
   16bc6:	2201      	moveq	r2, #1
   16bc8:	2200      	movne	r2, #0
   16bca:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16bcc:	3701      	adds	r7, #1
   16bce:	e7ce      	b.n	16b6e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16bd0:	3601      	adds	r6, #1
   16bd2:	e7c5      	b.n	16b60 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16bd4:	3501      	adds	r5, #1
   16bd6:	e7bc      	b.n	16b52 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16bd8:	3401      	adds	r4, #1
   16bda:	e7b3      	b.n	16b44 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16bdc:	a802      	add	r0, sp, #8
   16bde:	f7fe fe75 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16be2:	b018      	add	sp, #96	; 0x60
   16be4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016be8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16be8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16bec:	b098      	sub	sp, #96	; 0x60
   16bee:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16bf0:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16bf2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16bf6:	f7ff ff2f 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16bfa:	2400      	movs	r4, #0
   16bfc:	2100      	movs	r1, #0
   16bfe:	a802      	add	r0, sp, #8
   16c00:	f7fe fe6f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c04:	42a0      	cmp	r0, r4
   16c06:	dd45      	ble.n	16c94 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16c08:	2500      	movs	r5, #0
   16c0a:	2101      	movs	r1, #1
   16c0c:	a802      	add	r0, sp, #8
   16c0e:	f7fe fe68 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c12:	42a8      	cmp	r0, r5
   16c14:	dd3c      	ble.n	16c90 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16c16:	2600      	movs	r6, #0
   16c18:	2102      	movs	r1, #2
   16c1a:	a802      	add	r0, sp, #8
   16c1c:	f7fe fe61 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c20:	42b0      	cmp	r0, r6
   16c22:	dd33      	ble.n	16c8c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16c24:	2700      	movs	r7, #0
   16c26:	2103      	movs	r1, #3
   16c28:	a802      	add	r0, sp, #8
   16c2a:	f7fe fe5a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16c2e:	42b8      	cmp	r0, r7
   16c30:	dd2a      	ble.n	16c88 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c32:	9700      	str	r7, [sp, #0]
   16c34:	4633      	mov	r3, r6
   16c36:	462a      	mov	r2, r5
   16c38:	4621      	mov	r1, r4
   16c3a:	a808      	add	r0, sp, #32
   16c3c:	f7fe ff49 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c40:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c42:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c44:	4633      	mov	r3, r6
   16c46:	462a      	mov	r2, r5
   16c48:	4621      	mov	r1, r4
   16c4a:	a810      	add	r0, sp, #64	; 0x40
   16c4c:	f7fe ff41 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16c50:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16c52:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16c54:	9700      	str	r7, [sp, #0]
   16c56:	4633      	mov	r3, r6
   16c58:	4621      	mov	r1, r4
   16c5a:	a802      	add	r0, sp, #8
   16c5c:	f7fe ff03 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16c62:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16c66:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs != rhs;
   16c6a:	ed9a 7a00 	vldr	s14, [sl]
   16c6e:	edd9 7a00 	vldr	s15, [r9]
   16c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16c74:	eeb4 7a67 	vcmp.f32	s14, s15
   16c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c7c:	bf14      	ite	ne
   16c7e:	2201      	movne	r2, #1
   16c80:	2200      	moveq	r2, #0
   16c82:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16c84:	3701      	adds	r7, #1
   16c86:	e7ce      	b.n	16c26 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16c88:	3601      	adds	r6, #1
   16c8a:	e7c5      	b.n	16c18 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16c8c:	3501      	adds	r5, #1
   16c8e:	e7bc      	b.n	16c0a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16c90:	3401      	adds	r4, #1
   16c92:	e7b3      	b.n	16bfc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16c94:	a802      	add	r0, sp, #8
   16c96:	f7fe fe19 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16c9a:	b018      	add	sp, #96	; 0x60
   16c9c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016ca0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16ca0:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16ca4:	b098      	sub	sp, #96	; 0x60
   16ca6:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16ca8:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16caa:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16cae:	f7ff fed3 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16cb2:	2400      	movs	r4, #0
   16cb4:	2100      	movs	r1, #0
   16cb6:	a802      	add	r0, sp, #8
   16cb8:	f7fe fe13 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16cbc:	42a0      	cmp	r0, r4
   16cbe:	dd45      	ble.n	16d4c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16cc0:	2500      	movs	r5, #0
   16cc2:	2101      	movs	r1, #1
   16cc4:	a802      	add	r0, sp, #8
   16cc6:	f7fe fe0c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16cca:	42a8      	cmp	r0, r5
   16ccc:	dd3c      	ble.n	16d48 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16cce:	2600      	movs	r6, #0
   16cd0:	2102      	movs	r1, #2
   16cd2:	a802      	add	r0, sp, #8
   16cd4:	f7fe fe05 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16cd8:	42b0      	cmp	r0, r6
   16cda:	dd33      	ble.n	16d44 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16cdc:	2700      	movs	r7, #0
   16cde:	2103      	movs	r1, #3
   16ce0:	a802      	add	r0, sp, #8
   16ce2:	f7fe fdfe 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ce6:	42b8      	cmp	r0, r7
   16ce8:	dd2a      	ble.n	16d40 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16cea:	9700      	str	r7, [sp, #0]
   16cec:	4633      	mov	r3, r6
   16cee:	462a      	mov	r2, r5
   16cf0:	4621      	mov	r1, r4
   16cf2:	a808      	add	r0, sp, #32
   16cf4:	f7fe feed 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16cf8:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16cfa:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16cfc:	4633      	mov	r3, r6
   16cfe:	462a      	mov	r2, r5
   16d00:	4621      	mov	r1, r4
   16d02:	a810      	add	r0, sp, #64	; 0x40
   16d04:	f7fe fee5 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16d08:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16d0a:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16d0c:	9700      	str	r7, [sp, #0]
   16d0e:	4633      	mov	r3, r6
   16d10:	4621      	mov	r1, r4
   16d12:	a802      	add	r0, sp, #8
   16d14:	f7fe fea7 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16d18:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16d1a:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16d1e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs > rhs;
   16d22:	ed9a 7a00 	vldr	s14, [sl]
   16d26:	edd9 7a00 	vldr	s15, [r9]
   16d2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d34:	bfcc      	ite	gt
   16d36:	2201      	movgt	r2, #1
   16d38:	2200      	movle	r2, #0
   16d3a:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16d3c:	3701      	adds	r7, #1
   16d3e:	e7ce      	b.n	16cde <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16d40:	3601      	adds	r6, #1
   16d42:	e7c5      	b.n	16cd0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16d44:	3501      	adds	r5, #1
   16d46:	e7bc      	b.n	16cc2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16d48:	3401      	adds	r4, #1
   16d4a:	e7b3      	b.n	16cb4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16d4c:	a802      	add	r0, sp, #8
   16d4e:	f7fe fdbd 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16d52:	b018      	add	sp, #96	; 0x60
   16d54:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016d58 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16d58:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16d5c:	b098      	sub	sp, #96	; 0x60
   16d5e:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16d60:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16d62:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16d66:	f7ff fe77 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16d6a:	2400      	movs	r4, #0
   16d6c:	2100      	movs	r1, #0
   16d6e:	a802      	add	r0, sp, #8
   16d70:	f7fe fdb7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d74:	42a0      	cmp	r0, r4
   16d76:	dd45      	ble.n	16e04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16d78:	2500      	movs	r5, #0
   16d7a:	2101      	movs	r1, #1
   16d7c:	a802      	add	r0, sp, #8
   16d7e:	f7fe fdb0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d82:	42a8      	cmp	r0, r5
   16d84:	dd3c      	ble.n	16e00 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16d86:	2600      	movs	r6, #0
   16d88:	2102      	movs	r1, #2
   16d8a:	a802      	add	r0, sp, #8
   16d8c:	f7fe fda9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d90:	42b0      	cmp	r0, r6
   16d92:	dd33      	ble.n	16dfc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16d94:	2700      	movs	r7, #0
   16d96:	2103      	movs	r1, #3
   16d98:	a802      	add	r0, sp, #8
   16d9a:	f7fe fda2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16d9e:	42b8      	cmp	r0, r7
   16da0:	dd2a      	ble.n	16df8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16da2:	9700      	str	r7, [sp, #0]
   16da4:	4633      	mov	r3, r6
   16da6:	462a      	mov	r2, r5
   16da8:	4621      	mov	r1, r4
   16daa:	a808      	add	r0, sp, #32
   16dac:	f7fe fe91 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16db0:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16db2:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16db4:	4633      	mov	r3, r6
   16db6:	462a      	mov	r2, r5
   16db8:	4621      	mov	r1, r4
   16dba:	a810      	add	r0, sp, #64	; 0x40
   16dbc:	f7fe fe89 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16dc0:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16dc2:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16dc4:	9700      	str	r7, [sp, #0]
   16dc6:	4633      	mov	r3, r6
   16dc8:	4621      	mov	r1, r4
   16dca:	a802      	add	r0, sp, #8
   16dcc:	f7fe fe4b 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16dd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16dd2:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16dd6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs >= rhs;
   16dda:	ed9a 7a00 	vldr	s14, [sl]
   16dde:	edd9 7a00 	vldr	s15, [r9]
   16de2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16dec:	bfac      	ite	ge
   16dee:	2201      	movge	r2, #1
   16df0:	2200      	movlt	r2, #0
   16df2:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16df4:	3701      	adds	r7, #1
   16df6:	e7ce      	b.n	16d96 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16df8:	3601      	adds	r6, #1
   16dfa:	e7c5      	b.n	16d88 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16dfc:	3501      	adds	r5, #1
   16dfe:	e7bc      	b.n	16d7a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16e00:	3401      	adds	r4, #1
   16e02:	e7b3      	b.n	16d6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16e04:	a802      	add	r0, sp, #8
   16e06:	f7fe fd61 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16e0a:	b018      	add	sp, #96	; 0x60
   16e0c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016e10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16e10:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16e14:	b098      	sub	sp, #96	; 0x60
   16e16:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16e18:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16e1a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16e1e:	f7ff fe1b 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16e22:	2400      	movs	r4, #0
   16e24:	2100      	movs	r1, #0
   16e26:	a802      	add	r0, sp, #8
   16e28:	f7fe fd5b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e2c:	42a0      	cmp	r0, r4
   16e2e:	dd45      	ble.n	16ebc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16e30:	2500      	movs	r5, #0
   16e32:	2101      	movs	r1, #1
   16e34:	a802      	add	r0, sp, #8
   16e36:	f7fe fd54 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e3a:	42a8      	cmp	r0, r5
   16e3c:	dd3c      	ble.n	16eb8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16e3e:	2600      	movs	r6, #0
   16e40:	2102      	movs	r1, #2
   16e42:	a802      	add	r0, sp, #8
   16e44:	f7fe fd4d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e48:	42b0      	cmp	r0, r6
   16e4a:	dd33      	ble.n	16eb4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16e4c:	2700      	movs	r7, #0
   16e4e:	2103      	movs	r1, #3
   16e50:	a802      	add	r0, sp, #8
   16e52:	f7fe fd46 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16e56:	42b8      	cmp	r0, r7
   16e58:	dd2a      	ble.n	16eb0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e5a:	9700      	str	r7, [sp, #0]
   16e5c:	4633      	mov	r3, r6
   16e5e:	462a      	mov	r2, r5
   16e60:	4621      	mov	r1, r4
   16e62:	a808      	add	r0, sp, #32
   16e64:	f7fe fe35 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e68:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e6a:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e6c:	4633      	mov	r3, r6
   16e6e:	462a      	mov	r2, r5
   16e70:	4621      	mov	r1, r4
   16e72:	a810      	add	r0, sp, #64	; 0x40
   16e74:	f7fe fe2d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16e78:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16e7a:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16e7c:	9700      	str	r7, [sp, #0]
   16e7e:	4633      	mov	r3, r6
   16e80:	4621      	mov	r1, r4
   16e82:	a802      	add	r0, sp, #8
   16e84:	f7fe fdef 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16e88:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e8a:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16e8e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs < rhs;
   16e92:	ed9a 7a00 	vldr	s14, [sl]
   16e96:	edd9 7a00 	vldr	s15, [r9]
   16e9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ea4:	bf4c      	ite	mi
   16ea6:	2201      	movmi	r2, #1
   16ea8:	2200      	movpl	r2, #0
   16eaa:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16eac:	3701      	adds	r7, #1
   16eae:	e7ce      	b.n	16e4e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16eb0:	3601      	adds	r6, #1
   16eb2:	e7c5      	b.n	16e40 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16eb4:	3501      	adds	r5, #1
   16eb6:	e7bc      	b.n	16e32 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16eb8:	3401      	adds	r4, #1
   16eba:	e7b3      	b.n	16e24 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16ebc:	a802      	add	r0, sp, #8
   16ebe:	f7fe fd05 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16ec2:	b018      	add	sp, #96	; 0x60
   16ec4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016ec8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16ec8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16ecc:	b098      	sub	sp, #96	; 0x60
   16ece:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   16ed0:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16ed2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16ed6:	f7ff fdbf 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16eda:	2400      	movs	r4, #0
   16edc:	2100      	movs	r1, #0
   16ede:	a802      	add	r0, sp, #8
   16ee0:	f7fe fcff 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ee4:	42a0      	cmp	r0, r4
   16ee6:	dd45      	ble.n	16f74 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16ee8:	2500      	movs	r5, #0
   16eea:	2101      	movs	r1, #1
   16eec:	a802      	add	r0, sp, #8
   16eee:	f7fe fcf8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16ef2:	42a8      	cmp	r0, r5
   16ef4:	dd3c      	ble.n	16f70 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16ef6:	2600      	movs	r6, #0
   16ef8:	2102      	movs	r1, #2
   16efa:	a802      	add	r0, sp, #8
   16efc:	f7fe fcf1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f00:	42b0      	cmp	r0, r6
   16f02:	dd33      	ble.n	16f6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16f04:	2700      	movs	r7, #0
   16f06:	2103      	movs	r1, #3
   16f08:	a802      	add	r0, sp, #8
   16f0a:	f7fe fcea 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f0e:	42b8      	cmp	r0, r7
   16f10:	dd2a      	ble.n	16f68 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16f12:	9700      	str	r7, [sp, #0]
   16f14:	4633      	mov	r3, r6
   16f16:	462a      	mov	r2, r5
   16f18:	4621      	mov	r1, r4
   16f1a:	a808      	add	r0, sp, #32
   16f1c:	f7fe fdd9 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16f20:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16f22:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16f24:	4633      	mov	r3, r6
   16f26:	462a      	mov	r2, r5
   16f28:	4621      	mov	r1, r4
   16f2a:	a810      	add	r0, sp, #64	; 0x40
   16f2c:	f7fe fdd1 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16f30:	462a      	mov	r2, r5
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16f32:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16f34:	9700      	str	r7, [sp, #0]
   16f36:	4633      	mov	r3, r6
   16f38:	4621      	mov	r1, r4
   16f3a:	a802      	add	r0, sp, #8
   16f3c:	f7fe fd93 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16f40:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f42:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   16f46:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs <= rhs;
   16f4a:	ed9a 7a00 	vldr	s14, [sl]
   16f4e:	edd9 7a00 	vldr	s15, [r9]
   16f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f5c:	bf94      	ite	ls
   16f5e:	2201      	movls	r2, #1
   16f60:	2200      	movhi	r2, #0
   16f62:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16f64:	3701      	adds	r7, #1
   16f66:	e7ce      	b.n	16f06 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16f68:	3601      	adds	r6, #1
   16f6a:	e7c5      	b.n	16ef8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16f6c:	3501      	adds	r5, #1
   16f6e:	e7bc      	b.n	16eea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16f70:	3401      	adds	r4, #1
   16f72:	e7b3      	b.n	16edc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   16f74:	a802      	add	r0, sp, #8
   16f76:	f7fe fca9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   16f7a:	b018      	add	sp, #96	; 0x60
   16f7c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00016f80 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   16f80:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16f84:	b098      	sub	sp, #96	; 0x60
   16f86:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   16f88:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   16f8a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   16f8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   16f8e:	f7ff fd63 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   16f92:	2400      	movs	r4, #0
   16f94:	2100      	movs	r1, #0
   16f96:	a802      	add	r0, sp, #8
   16f98:	f7fe fca3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16f9c:	42a0      	cmp	r0, r4
   16f9e:	dd3d      	ble.n	1701c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   16fa0:	2500      	movs	r5, #0
   16fa2:	2101      	movs	r1, #1
   16fa4:	a802      	add	r0, sp, #8
   16fa6:	f7fe fc9c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16faa:	42a8      	cmp	r0, r5
   16fac:	dd34      	ble.n	17018 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   16fae:	2600      	movs	r6, #0
   16fb0:	2102      	movs	r1, #2
   16fb2:	a802      	add	r0, sp, #8
   16fb4:	f7fe fc95 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16fb8:	42b0      	cmp	r0, r6
   16fba:	dd2b      	ble.n	17014 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   16fbc:	2700      	movs	r7, #0
   16fbe:	2103      	movs	r1, #3
   16fc0:	a802      	add	r0, sp, #8
   16fc2:	f7fe fc8e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   16fc6:	42b8      	cmp	r0, r7
   16fc8:	dd22      	ble.n	17010 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16fca:	9700      	str	r7, [sp, #0]
   16fcc:	4633      	mov	r3, r6
   16fce:	462a      	mov	r2, r5
   16fd0:	4621      	mov	r1, r4
   16fd2:	a808      	add	r0, sp, #32
   16fd4:	f7fe fd7d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fd8:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   16fda:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fdc:	4633      	mov	r3, r6
   16fde:	462a      	mov	r2, r5
   16fe0:	4621      	mov	r1, r4
   16fe2:	a810      	add	r0, sp, #64	; 0x40
   16fe4:	f7fe fd75 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16fe8:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   16fea:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   16fec:	4633      	mov	r3, r6
   16fee:	462a      	mov	r2, r5
   16ff0:	4621      	mov	r1, r4
   16ff2:	a802      	add	r0, sp, #8
   16ff4:	f7fe fd37 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   16ff8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16ffa:	f819 200b 	ldrb.w	r2, [r9, fp]
   16ffe:	f813 100a 	ldrb.w	r1, [r3, sl]
   17002:	1a53      	subs	r3, r2, r1
   17004:	425a      	negs	r2, r3
   17006:	415a      	adcs	r2, r3
   17008:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1700a:	3701      	adds	r7, #1
  return lhs == rhs;
   1700c:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1700e:	e7d6      	b.n	16fbe <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17010:	3601      	adds	r6, #1
   17012:	e7cd      	b.n	16fb0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17014:	3501      	adds	r5, #1
   17016:	e7c4      	b.n	16fa2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17018:	3401      	adds	r4, #1
   1701a:	e7bb      	b.n	16f94 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1701c:	a802      	add	r0, sp, #8
   1701e:	f7fe fc55 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17022:	b018      	add	sp, #96	; 0x60
   17024:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017028 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17028:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1702c:	b098      	sub	sp, #96	; 0x60
   1702e:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17030:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17032:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17034:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17036:	f7ff fd0f 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1703a:	2400      	movs	r4, #0
   1703c:	2100      	movs	r1, #0
   1703e:	a802      	add	r0, sp, #8
   17040:	f7fe fc4f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17044:	42a0      	cmp	r0, r4
   17046:	dd3d      	ble.n	170c4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17048:	2500      	movs	r5, #0
   1704a:	2101      	movs	r1, #1
   1704c:	a802      	add	r0, sp, #8
   1704e:	f7fe fc48 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17052:	42a8      	cmp	r0, r5
   17054:	dd34      	ble.n	170c0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17056:	2600      	movs	r6, #0
   17058:	2102      	movs	r1, #2
   1705a:	a802      	add	r0, sp, #8
   1705c:	f7fe fc41 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17060:	42b0      	cmp	r0, r6
   17062:	dd2b      	ble.n	170bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17064:	2700      	movs	r7, #0
   17066:	2103      	movs	r1, #3
   17068:	a802      	add	r0, sp, #8
   1706a:	f7fe fc3a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1706e:	42b8      	cmp	r0, r7
   17070:	dd22      	ble.n	170b8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17072:	9700      	str	r7, [sp, #0]
   17074:	4633      	mov	r3, r6
   17076:	462a      	mov	r2, r5
   17078:	4621      	mov	r1, r4
   1707a:	a808      	add	r0, sp, #32
   1707c:	f7fe fd29 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17080:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17082:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17084:	4633      	mov	r3, r6
   17086:	462a      	mov	r2, r5
   17088:	4621      	mov	r1, r4
   1708a:	a810      	add	r0, sp, #64	; 0x40
   1708c:	f7fe fd21 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17090:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17092:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17094:	4633      	mov	r3, r6
   17096:	462a      	mov	r2, r5
   17098:	4621      	mov	r1, r4
   1709a:	a802      	add	r0, sp, #8
   1709c:	f7fe fce3 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   170a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   170a2:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   170a6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   170aa:	1a53      	subs	r3, r2, r1
   170ac:	425a      	negs	r2, r3
   170ae:	415a      	adcs	r2, r3
   170b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   170b2:	3701      	adds	r7, #1
  return lhs == rhs;
   170b4:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   170b6:	e7d6      	b.n	17066 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   170b8:	3601      	adds	r6, #1
   170ba:	e7cd      	b.n	17058 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   170bc:	3501      	adds	r5, #1
   170be:	e7c4      	b.n	1704a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   170c0:	3401      	adds	r4, #1
   170c2:	e7bb      	b.n	1703c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   170c4:	a802      	add	r0, sp, #8
   170c6:	f7fe fc01 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   170ca:	b018      	add	sp, #96	; 0x60
   170cc:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000170d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   170d0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   170d4:	b098      	sub	sp, #96	; 0x60
   170d6:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   170d8:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   170da:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   170dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   170de:	f7ff fcbb 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   170e2:	2400      	movs	r4, #0
   170e4:	2100      	movs	r1, #0
   170e6:	a802      	add	r0, sp, #8
   170e8:	f7fe fbfb 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   170ec:	42a0      	cmp	r0, r4
   170ee:	dd46      	ble.n	1717e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   170f0:	2500      	movs	r5, #0
   170f2:	2101      	movs	r1, #1
   170f4:	a802      	add	r0, sp, #8
   170f6:	f7fe fbf4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   170fa:	42a8      	cmp	r0, r5
   170fc:	dd3d      	ble.n	1717a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   170fe:	f04f 0800 	mov.w	r8, #0
   17102:	2102      	movs	r1, #2
   17104:	a802      	add	r0, sp, #8
   17106:	f7fe fbec 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1710a:	4540      	cmp	r0, r8
   1710c:	dd33      	ble.n	17176 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1710e:	2700      	movs	r7, #0
   17110:	2103      	movs	r1, #3
   17112:	a802      	add	r0, sp, #8
   17114:	f7fe fbe5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17118:	42b8      	cmp	r0, r7
   1711a:	dd29      	ble.n	17170 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1711c:	9700      	str	r7, [sp, #0]
   1711e:	4643      	mov	r3, r8
   17120:	462a      	mov	r2, r5
   17122:	4621      	mov	r1, r4
   17124:	a808      	add	r0, sp, #32
   17126:	f7fe fcd4 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1712a:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1712c:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1712e:	4643      	mov	r3, r8
   17130:	462a      	mov	r2, r5
   17132:	4621      	mov	r1, r4
   17134:	a810      	add	r0, sp, #64	; 0x40
   17136:	f7fe fccc 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1713a:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1713c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1713e:	4643      	mov	r3, r8
   17140:	462a      	mov	r2, r5
   17142:	4621      	mov	r1, r4
   17144:	a802      	add	r0, sp, #8
   17146:	f7fe fc8e 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1714a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1714c:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17150:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs == rhs;
   17154:	e9d3 2300 	ldrd	r2, r3, [r3]
   17158:	e9db ab00 	ldrd	sl, fp, [fp]
   1715c:	459b      	cmp	fp, r3
   1715e:	bf08      	it	eq
   17160:	4592      	cmpeq	sl, r2
   17162:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17164:	bf0c      	ite	eq
   17166:	2301      	moveq	r3, #1
   17168:	2300      	movne	r3, #0
   1716a:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1716c:	3701      	adds	r7, #1
   1716e:	e7cf      	b.n	17110 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17170:	f108 0801 	add.w	r8, r8, #1
   17174:	e7c5      	b.n	17102 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17176:	3501      	adds	r5, #1
   17178:	e7bb      	b.n	170f2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1717a:	3401      	adds	r4, #1
   1717c:	e7b2      	b.n	170e4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1717e:	a802      	add	r0, sp, #8
   17180:	f7fe fba4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17184:	b018      	add	sp, #96	; 0x60
   17186:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0001718a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1718a:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1718e:	b098      	sub	sp, #96	; 0x60
   17190:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17192:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17194:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17196:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17198:	f7ff fc5e 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1719c:	2400      	movs	r4, #0
   1719e:	2100      	movs	r1, #0
   171a0:	a802      	add	r0, sp, #8
   171a2:	f7fe fb9e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   171a6:	42a0      	cmp	r0, r4
   171a8:	dd3b      	ble.n	17222 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   171aa:	2500      	movs	r5, #0
   171ac:	2101      	movs	r1, #1
   171ae:	a802      	add	r0, sp, #8
   171b0:	f7fe fb97 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   171b4:	42a8      	cmp	r0, r5
   171b6:	dd32      	ble.n	1721e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   171b8:	2600      	movs	r6, #0
   171ba:	2102      	movs	r1, #2
   171bc:	a802      	add	r0, sp, #8
   171be:	f7fe fb90 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   171c2:	42b0      	cmp	r0, r6
   171c4:	dd29      	ble.n	1721a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   171c6:	2700      	movs	r7, #0
   171c8:	2103      	movs	r1, #3
   171ca:	a802      	add	r0, sp, #8
   171cc:	f7fe fb89 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   171d0:	42b8      	cmp	r0, r7
   171d2:	dd20      	ble.n	17216 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x8c>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   171d4:	9700      	str	r7, [sp, #0]
   171d6:	4633      	mov	r3, r6
   171d8:	462a      	mov	r2, r5
   171da:	4621      	mov	r1, r4
   171dc:	a808      	add	r0, sp, #32
   171de:	f7fe fc78 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171e2:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   171e4:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171e6:	4633      	mov	r3, r6
   171e8:	462a      	mov	r2, r5
   171ea:	4621      	mov	r1, r4
   171ec:	a810      	add	r0, sp, #64	; 0x40
   171ee:	f7fe fc70 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171f2:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   171f4:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   171f6:	4633      	mov	r3, r6
   171f8:	462a      	mov	r2, r5
   171fa:	4621      	mov	r1, r4
   171fc:	a802      	add	r0, sp, #8
   171fe:	f7fe fc32 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17202:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17204:	f819 200b 	ldrb.w	r2, [r9, fp]
   17208:	f813 100a 	ldrb.w	r1, [r3, sl]
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1720c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  return lhs != rhs;
   1720e:	404a      	eors	r2, r1
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17210:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17212:	3701      	adds	r7, #1
   17214:	e7d8      	b.n	171c8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17216:	3601      	adds	r6, #1
   17218:	e7cf      	b.n	171ba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1721a:	3501      	adds	r5, #1
   1721c:	e7c6      	b.n	171ac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1721e:	3401      	adds	r4, #1
   17220:	e7bd      	b.n	1719e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17222:	a802      	add	r0, sp, #8
   17224:	f7fe fb52 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17228:	b018      	add	sp, #96	; 0x60
   1722a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001722e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1722e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   17232:	b098      	sub	sp, #96	; 0x60
   17234:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17236:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17238:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   1723a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1723c:	f7ff fc0c 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17240:	2400      	movs	r4, #0
   17242:	2100      	movs	r1, #0
   17244:	a802      	add	r0, sp, #8
   17246:	f7fe fb4c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1724a:	42a0      	cmp	r0, r4
   1724c:	dd3d      	ble.n	172ca <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1724e:	2500      	movs	r5, #0
   17250:	2101      	movs	r1, #1
   17252:	a802      	add	r0, sp, #8
   17254:	f7fe fb45 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17258:	42a8      	cmp	r0, r5
   1725a:	dd34      	ble.n	172c6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1725c:	2600      	movs	r6, #0
   1725e:	2102      	movs	r1, #2
   17260:	a802      	add	r0, sp, #8
   17262:	f7fe fb3e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17266:	42b0      	cmp	r0, r6
   17268:	dd2b      	ble.n	172c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1726a:	2700      	movs	r7, #0
   1726c:	2103      	movs	r1, #3
   1726e:	a802      	add	r0, sp, #8
   17270:	f7fe fb37 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17274:	42b8      	cmp	r0, r7
   17276:	dd22      	ble.n	172be <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17278:	9700      	str	r7, [sp, #0]
   1727a:	4633      	mov	r3, r6
   1727c:	462a      	mov	r2, r5
   1727e:	4621      	mov	r1, r4
   17280:	a808      	add	r0, sp, #32
   17282:	f7fe fc26 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17286:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17288:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1728a:	4633      	mov	r3, r6
   1728c:	462a      	mov	r2, r5
   1728e:	4621      	mov	r1, r4
   17290:	a810      	add	r0, sp, #64	; 0x40
   17292:	f7fe fc1e 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17296:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17298:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1729a:	4633      	mov	r3, r6
   1729c:	462a      	mov	r2, r5
   1729e:	4621      	mov	r1, r4
   172a0:	a802      	add	r0, sp, #8
   172a2:	f7fe fbe0 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   172a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   172a8:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   172ac:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   172b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   172b2:	1a52      	subs	r2, r2, r1
   172b4:	bf18      	it	ne
   172b6:	2201      	movne	r2, #1
   172b8:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   172ba:	3701      	adds	r7, #1
   172bc:	e7d6      	b.n	1726c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   172be:	3601      	adds	r6, #1
   172c0:	e7cd      	b.n	1725e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   172c2:	3501      	adds	r5, #1
   172c4:	e7c4      	b.n	17250 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   172c6:	3401      	adds	r4, #1
   172c8:	e7bb      	b.n	17242 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   172ca:	a802      	add	r0, sp, #8
   172cc:	f7fe fafe 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   172d0:	b018      	add	sp, #96	; 0x60
   172d2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000172d6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   172d6:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   172da:	b098      	sub	sp, #96	; 0x60
   172dc:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   172de:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   172e0:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   172e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   172e4:	f7ff fbb8 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   172e8:	2400      	movs	r4, #0
   172ea:	2100      	movs	r1, #0
   172ec:	a802      	add	r0, sp, #8
   172ee:	f7fe faf8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   172f2:	42a0      	cmp	r0, r4
   172f4:	dd46      	ble.n	17384 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   172f6:	2500      	movs	r5, #0
   172f8:	2101      	movs	r1, #1
   172fa:	a802      	add	r0, sp, #8
   172fc:	f7fe faf1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17300:	42a8      	cmp	r0, r5
   17302:	dd3d      	ble.n	17380 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17304:	f04f 0800 	mov.w	r8, #0
   17308:	2102      	movs	r1, #2
   1730a:	a802      	add	r0, sp, #8
   1730c:	f7fe fae9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17310:	4540      	cmp	r0, r8
   17312:	dd33      	ble.n	1737c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17314:	2700      	movs	r7, #0
   17316:	2103      	movs	r1, #3
   17318:	a802      	add	r0, sp, #8
   1731a:	f7fe fae2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1731e:	42b8      	cmp	r0, r7
   17320:	dd29      	ble.n	17376 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17322:	9700      	str	r7, [sp, #0]
   17324:	4643      	mov	r3, r8
   17326:	462a      	mov	r2, r5
   17328:	4621      	mov	r1, r4
   1732a:	a808      	add	r0, sp, #32
   1732c:	f7fe fbd1 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17330:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17332:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17334:	4643      	mov	r3, r8
   17336:	462a      	mov	r2, r5
   17338:	4621      	mov	r1, r4
   1733a:	a810      	add	r0, sp, #64	; 0x40
   1733c:	f7fe fbc9 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17340:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17342:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17344:	4643      	mov	r3, r8
   17346:	462a      	mov	r2, r5
   17348:	4621      	mov	r1, r4
   1734a:	a802      	add	r0, sp, #8
   1734c:	f7fe fb8b 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17350:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17352:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs != rhs;
   1735a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1735e:	e9db ab00 	ldrd	sl, fp, [fp]
   17362:	459b      	cmp	fp, r3
   17364:	bf08      	it	eq
   17366:	4592      	cmpeq	sl, r2
   17368:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1736a:	bf14      	ite	ne
   1736c:	2301      	movne	r3, #1
   1736e:	2300      	moveq	r3, #0
   17370:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17372:	3701      	adds	r7, #1
   17374:	e7cf      	b.n	17316 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17376:	f108 0801 	add.w	r8, r8, #1
   1737a:	e7c5      	b.n	17308 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1737c:	3501      	adds	r5, #1
   1737e:	e7bb      	b.n	172f8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17380:	3401      	adds	r4, #1
   17382:	e7b2      	b.n	172ea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17384:	a802      	add	r0, sp, #8
   17386:	f7fe faa1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1738a:	b018      	add	sp, #96	; 0x60
   1738c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00017390 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17390:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   17394:	b098      	sub	sp, #96	; 0x60
   17396:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17398:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   1739a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   1739c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1739e:	f7ff fb5b 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   173a2:	2400      	movs	r4, #0
   173a4:	2100      	movs	r1, #0
   173a6:	a802      	add	r0, sp, #8
   173a8:	f7fe fa9b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   173ac:	42a0      	cmp	r0, r4
   173ae:	dd3e      	ble.n	1742e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   173b0:	2500      	movs	r5, #0
   173b2:	2101      	movs	r1, #1
   173b4:	a802      	add	r0, sp, #8
   173b6:	f7fe fa94 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   173ba:	42a8      	cmp	r0, r5
   173bc:	dd35      	ble.n	1742a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   173be:	2600      	movs	r6, #0
   173c0:	2102      	movs	r1, #2
   173c2:	a802      	add	r0, sp, #8
   173c4:	f7fe fa8d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   173c8:	42b0      	cmp	r0, r6
   173ca:	dd2c      	ble.n	17426 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   173cc:	2700      	movs	r7, #0
   173ce:	2103      	movs	r1, #3
   173d0:	a802      	add	r0, sp, #8
   173d2:	f7fe fa86 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   173d6:	42b8      	cmp	r0, r7
   173d8:	dd23      	ble.n	17422 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   173da:	9700      	str	r7, [sp, #0]
   173dc:	4633      	mov	r3, r6
   173de:	462a      	mov	r2, r5
   173e0:	4621      	mov	r1, r4
   173e2:	a808      	add	r0, sp, #32
   173e4:	f7fe fb75 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173e8:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   173ea:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173ec:	4633      	mov	r3, r6
   173ee:	462a      	mov	r2, r5
   173f0:	4621      	mov	r1, r4
   173f2:	a810      	add	r0, sp, #64	; 0x40
   173f4:	f7fe fb6d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   173f8:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   173fa:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   173fc:	4633      	mov	r3, r6
   173fe:	462a      	mov	r2, r5
   17400:	4621      	mov	r1, r4
   17402:	a802      	add	r0, sp, #8
   17404:	f7fe fb2f 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   17408:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1740a:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   1740e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   17412:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17414:	428a      	cmp	r2, r1
   17416:	bfd4      	ite	le
   17418:	2200      	movle	r2, #0
   1741a:	2201      	movgt	r2, #1
   1741c:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1741e:	3701      	adds	r7, #1
   17420:	e7d5      	b.n	173ce <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17422:	3601      	adds	r6, #1
   17424:	e7cc      	b.n	173c0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17426:	3501      	adds	r5, #1
   17428:	e7c3      	b.n	173b2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1742a:	3401      	adds	r4, #1
   1742c:	e7ba      	b.n	173a4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1742e:	a802      	add	r0, sp, #8
   17430:	f7fe fa4c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17434:	b018      	add	sp, #96	; 0x60
   17436:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001743a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1743a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   1743e:	b098      	sub	sp, #96	; 0x60
   17440:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   17442:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17444:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17446:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17448:	f7ff fb06 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1744c:	2400      	movs	r4, #0
   1744e:	2100      	movs	r1, #0
   17450:	a802      	add	r0, sp, #8
   17452:	f7fe fa46 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17456:	42a0      	cmp	r0, r4
   17458:	dd46      	ble.n	174e8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1745a:	2500      	movs	r5, #0
   1745c:	2101      	movs	r1, #1
   1745e:	a802      	add	r0, sp, #8
   17460:	f7fe fa3f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17464:	42a8      	cmp	r0, r5
   17466:	dd3d      	ble.n	174e4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17468:	f04f 0800 	mov.w	r8, #0
   1746c:	2102      	movs	r1, #2
   1746e:	a802      	add	r0, sp, #8
   17470:	f7fe fa37 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17474:	4540      	cmp	r0, r8
   17476:	dd33      	ble.n	174e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17478:	2700      	movs	r7, #0
   1747a:	2103      	movs	r1, #3
   1747c:	a802      	add	r0, sp, #8
   1747e:	f7fe fa30 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17482:	42b8      	cmp	r0, r7
   17484:	dd29      	ble.n	174da <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17486:	9700      	str	r7, [sp, #0]
   17488:	4643      	mov	r3, r8
   1748a:	462a      	mov	r2, r5
   1748c:	4621      	mov	r1, r4
   1748e:	a808      	add	r0, sp, #32
   17490:	f7fe fb1f 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17494:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17496:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17498:	4643      	mov	r3, r8
   1749a:	462a      	mov	r2, r5
   1749c:	4621      	mov	r1, r4
   1749e:	a810      	add	r0, sp, #64	; 0x40
   174a0:	f7fe fb17 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   174a4:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   174a6:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   174a8:	4643      	mov	r3, r8
   174aa:	462a      	mov	r2, r5
   174ac:	4621      	mov	r1, r4
   174ae:	a802      	add	r0, sp, #8
   174b0:	f7fe fad9 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   174b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   174b6:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   174ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs > rhs;
   174be:	e9d3 2300 	ldrd	r2, r3, [r3]
   174c2:	e9db ab00 	ldrd	sl, fp, [fp]
   174c6:	4552      	cmp	r2, sl
   174c8:	eb73 030b 	sbcs.w	r3, r3, fp
   174cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   174ce:	bfb4      	ite	lt
   174d0:	2301      	movlt	r3, #1
   174d2:	2300      	movge	r3, #0
   174d4:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   174d6:	3701      	adds	r7, #1
   174d8:	e7cf      	b.n	1747a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   174da:	f108 0801 	add.w	r8, r8, #1
   174de:	e7c5      	b.n	1746c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   174e0:	3501      	adds	r5, #1
   174e2:	e7bb      	b.n	1745c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   174e4:	3401      	adds	r4, #1
   174e6:	e7b2      	b.n	1744e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   174e8:	a802      	add	r0, sp, #8
   174ea:	f7fe f9ef 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   174ee:	b018      	add	sp, #96	; 0x60
   174f0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000174f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   174f4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   174f8:	b098      	sub	sp, #96	; 0x60
   174fa:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   174fc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   174fe:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17500:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17502:	f7ff faa9 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17506:	2400      	movs	r4, #0
   17508:	2100      	movs	r1, #0
   1750a:	a802      	add	r0, sp, #8
   1750c:	f7fe f9e9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17510:	42a0      	cmp	r0, r4
   17512:	dd3e      	ble.n	17592 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17514:	2500      	movs	r5, #0
   17516:	2101      	movs	r1, #1
   17518:	a802      	add	r0, sp, #8
   1751a:	f7fe f9e2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1751e:	42a8      	cmp	r0, r5
   17520:	dd35      	ble.n	1758e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17522:	2600      	movs	r6, #0
   17524:	2102      	movs	r1, #2
   17526:	a802      	add	r0, sp, #8
   17528:	f7fe f9db 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1752c:	42b0      	cmp	r0, r6
   1752e:	dd2c      	ble.n	1758a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17530:	2700      	movs	r7, #0
   17532:	2103      	movs	r1, #3
   17534:	a802      	add	r0, sp, #8
   17536:	f7fe f9d4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1753a:	42b8      	cmp	r0, r7
   1753c:	dd23      	ble.n	17586 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1753e:	9700      	str	r7, [sp, #0]
   17540:	4633      	mov	r3, r6
   17542:	462a      	mov	r2, r5
   17544:	4621      	mov	r1, r4
   17546:	a808      	add	r0, sp, #32
   17548:	f7fe fac3 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1754c:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1754e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17550:	4633      	mov	r3, r6
   17552:	462a      	mov	r2, r5
   17554:	4621      	mov	r1, r4
   17556:	a810      	add	r0, sp, #64	; 0x40
   17558:	f7fe fabb 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1755c:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1755e:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17560:	4633      	mov	r3, r6
   17562:	462a      	mov	r2, r5
   17564:	4621      	mov	r1, r4
   17566:	a802      	add	r0, sp, #8
   17568:	f7fe fa7d 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   1756c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1756e:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   17572:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   17576:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17578:	428a      	cmp	r2, r1
   1757a:	bfb4      	ite	lt
   1757c:	2200      	movlt	r2, #0
   1757e:	2201      	movge	r2, #1
   17580:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17582:	3701      	adds	r7, #1
   17584:	e7d5      	b.n	17532 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17586:	3601      	adds	r6, #1
   17588:	e7cc      	b.n	17524 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1758a:	3501      	adds	r5, #1
   1758c:	e7c3      	b.n	17516 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1758e:	3401      	adds	r4, #1
   17590:	e7ba      	b.n	17508 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17592:	a802      	add	r0, sp, #8
   17594:	f7fe f99a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17598:	b018      	add	sp, #96	; 0x60
   1759a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001759e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   1759e:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   175a2:	b098      	sub	sp, #96	; 0x60
   175a4:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   175a6:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   175a8:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   175aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   175ac:	f7ff fa54 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   175b0:	2400      	movs	r4, #0
   175b2:	2100      	movs	r1, #0
   175b4:	a802      	add	r0, sp, #8
   175b6:	f7fe f994 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   175ba:	42a0      	cmp	r0, r4
   175bc:	dd46      	ble.n	1764c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   175be:	2500      	movs	r5, #0
   175c0:	2101      	movs	r1, #1
   175c2:	a802      	add	r0, sp, #8
   175c4:	f7fe f98d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   175c8:	42a8      	cmp	r0, r5
   175ca:	dd3d      	ble.n	17648 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   175cc:	f04f 0800 	mov.w	r8, #0
   175d0:	2102      	movs	r1, #2
   175d2:	a802      	add	r0, sp, #8
   175d4:	f7fe f985 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   175d8:	4540      	cmp	r0, r8
   175da:	dd33      	ble.n	17644 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   175dc:	2700      	movs	r7, #0
   175de:	2103      	movs	r1, #3
   175e0:	a802      	add	r0, sp, #8
   175e2:	f7fe f97e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   175e6:	42b8      	cmp	r0, r7
   175e8:	dd29      	ble.n	1763e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   175ea:	9700      	str	r7, [sp, #0]
   175ec:	4643      	mov	r3, r8
   175ee:	462a      	mov	r2, r5
   175f0:	4621      	mov	r1, r4
   175f2:	a808      	add	r0, sp, #32
   175f4:	f7fe fa6d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   175f8:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   175fa:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   175fc:	4643      	mov	r3, r8
   175fe:	462a      	mov	r2, r5
   17600:	4621      	mov	r1, r4
   17602:	a810      	add	r0, sp, #64	; 0x40
   17604:	f7fe fa65 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17608:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1760a:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1760c:	4643      	mov	r3, r8
   1760e:	462a      	mov	r2, r5
   17610:	4621      	mov	r1, r4
   17612:	a802      	add	r0, sp, #8
   17614:	f7fe fa27 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17618:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1761a:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   1761e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs >= rhs;
   17622:	e9d3 2300 	ldrd	r2, r3, [r3]
   17626:	e9db ab00 	ldrd	sl, fp, [fp]
   1762a:	4592      	cmp	sl, r2
   1762c:	eb7b 0303 	sbcs.w	r3, fp, r3
   17630:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17632:	bfac      	ite	ge
   17634:	2301      	movge	r3, #1
   17636:	2300      	movlt	r3, #0
   17638:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1763a:	3701      	adds	r7, #1
   1763c:	e7cf      	b.n	175de <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1763e:	f108 0801 	add.w	r8, r8, #1
   17642:	e7c5      	b.n	175d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17644:	3501      	adds	r5, #1
   17646:	e7bb      	b.n	175c0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17648:	3401      	adds	r4, #1
   1764a:	e7b2      	b.n	175b2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1764c:	a802      	add	r0, sp, #8
   1764e:	f7fe f93d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17652:	b018      	add	sp, #96	; 0x60
   17654:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00017658 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17658:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1765c:	b098      	sub	sp, #96	; 0x60
   1765e:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   17660:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17662:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17664:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17666:	f7ff f9f7 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1766a:	2400      	movs	r4, #0
   1766c:	2100      	movs	r1, #0
   1766e:	a802      	add	r0, sp, #8
   17670:	f7fe f937 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17674:	42a0      	cmp	r0, r4
   17676:	dd3e      	ble.n	176f6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17678:	2500      	movs	r5, #0
   1767a:	2101      	movs	r1, #1
   1767c:	a802      	add	r0, sp, #8
   1767e:	f7fe f930 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17682:	42a8      	cmp	r0, r5
   17684:	dd35      	ble.n	176f2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17686:	2600      	movs	r6, #0
   17688:	2102      	movs	r1, #2
   1768a:	a802      	add	r0, sp, #8
   1768c:	f7fe f929 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17690:	42b0      	cmp	r0, r6
   17692:	dd2c      	ble.n	176ee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17694:	2700      	movs	r7, #0
   17696:	2103      	movs	r1, #3
   17698:	a802      	add	r0, sp, #8
   1769a:	f7fe f922 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1769e:	42b8      	cmp	r0, r7
   176a0:	dd23      	ble.n	176ea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   176a2:	9700      	str	r7, [sp, #0]
   176a4:	4633      	mov	r3, r6
   176a6:	462a      	mov	r2, r5
   176a8:	4621      	mov	r1, r4
   176aa:	a808      	add	r0, sp, #32
   176ac:	f7fe fa11 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   176b0:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   176b2:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   176b4:	4633      	mov	r3, r6
   176b6:	462a      	mov	r2, r5
   176b8:	4621      	mov	r1, r4
   176ba:	a810      	add	r0, sp, #64	; 0x40
   176bc:	f7fe fa09 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   176c0:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   176c2:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   176c4:	4633      	mov	r3, r6
   176c6:	462a      	mov	r2, r5
   176c8:	4621      	mov	r1, r4
   176ca:	a802      	add	r0, sp, #8
   176cc:	f7fe f9cb 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   176d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   176d2:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   176d6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   176da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   176dc:	428a      	cmp	r2, r1
   176de:	bfac      	ite	ge
   176e0:	2200      	movge	r2, #0
   176e2:	2201      	movlt	r2, #1
   176e4:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   176e6:	3701      	adds	r7, #1
   176e8:	e7d5      	b.n	17696 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   176ea:	3601      	adds	r6, #1
   176ec:	e7cc      	b.n	17688 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   176ee:	3501      	adds	r5, #1
   176f0:	e7c3      	b.n	1767a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   176f2:	3401      	adds	r4, #1
   176f4:	e7ba      	b.n	1766c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   176f6:	a802      	add	r0, sp, #8
   176f8:	f7fe f8e8 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   176fc:	b018      	add	sp, #96	; 0x60
   176fe:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017702 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17702:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   17706:	b098      	sub	sp, #96	; 0x60
   17708:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   1770a:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   1770c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   1770e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17710:	f7ff f9a2 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17714:	2400      	movs	r4, #0
   17716:	2100      	movs	r1, #0
   17718:	a802      	add	r0, sp, #8
   1771a:	f7fe f8e2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1771e:	42a0      	cmp	r0, r4
   17720:	dd46      	ble.n	177b0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17722:	2500      	movs	r5, #0
   17724:	2101      	movs	r1, #1
   17726:	a802      	add	r0, sp, #8
   17728:	f7fe f8db 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1772c:	42a8      	cmp	r0, r5
   1772e:	dd3d      	ble.n	177ac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17730:	f04f 0800 	mov.w	r8, #0
   17734:	2102      	movs	r1, #2
   17736:	a802      	add	r0, sp, #8
   17738:	f7fe f8d3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1773c:	4540      	cmp	r0, r8
   1773e:	dd33      	ble.n	177a8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17740:	2700      	movs	r7, #0
   17742:	2103      	movs	r1, #3
   17744:	a802      	add	r0, sp, #8
   17746:	f7fe f8cc 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1774a:	42b8      	cmp	r0, r7
   1774c:	dd29      	ble.n	177a2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1774e:	9700      	str	r7, [sp, #0]
   17750:	4643      	mov	r3, r8
   17752:	462a      	mov	r2, r5
   17754:	4621      	mov	r1, r4
   17756:	a808      	add	r0, sp, #32
   17758:	f7fe f9bb 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1775c:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1775e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17760:	4643      	mov	r3, r8
   17762:	462a      	mov	r2, r5
   17764:	4621      	mov	r1, r4
   17766:	a810      	add	r0, sp, #64	; 0x40
   17768:	f7fe f9b3 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1776c:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   1776e:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17770:	4643      	mov	r3, r8
   17772:	462a      	mov	r2, r5
   17774:	4621      	mov	r1, r4
   17776:	a802      	add	r0, sp, #8
   17778:	f7fe f975 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   1777c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1777e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   17782:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs < rhs;
   17786:	e9d3 2300 	ldrd	r2, r3, [r3]
   1778a:	e9db ab00 	ldrd	sl, fp, [fp]
   1778e:	4592      	cmp	sl, r2
   17790:	eb7b 0303 	sbcs.w	r3, fp, r3
   17794:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17796:	bfb4      	ite	lt
   17798:	2301      	movlt	r3, #1
   1779a:	2300      	movge	r3, #0
   1779c:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1779e:	3701      	adds	r7, #1
   177a0:	e7cf      	b.n	17742 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   177a2:	f108 0801 	add.w	r8, r8, #1
   177a6:	e7c5      	b.n	17734 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   177a8:	3501      	adds	r5, #1
   177aa:	e7bb      	b.n	17724 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   177ac:	3401      	adds	r4, #1
   177ae:	e7b2      	b.n	17716 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   177b0:	a802      	add	r0, sp, #8
   177b2:	f7fe f88b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   177b6:	b018      	add	sp, #96	; 0x60
   177b8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000177bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   177bc:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   177c0:	b098      	sub	sp, #96	; 0x60
   177c2:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   177c4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   177c6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   177c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   177ca:	f7ff f945 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   177ce:	2400      	movs	r4, #0
   177d0:	2100      	movs	r1, #0
   177d2:	a802      	add	r0, sp, #8
   177d4:	f7fe f885 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   177d8:	42a0      	cmp	r0, r4
   177da:	dd3e      	ble.n	1785a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   177dc:	2500      	movs	r5, #0
   177de:	2101      	movs	r1, #1
   177e0:	a802      	add	r0, sp, #8
   177e2:	f7fe f87e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   177e6:	42a8      	cmp	r0, r5
   177e8:	dd35      	ble.n	17856 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   177ea:	2600      	movs	r6, #0
   177ec:	2102      	movs	r1, #2
   177ee:	a802      	add	r0, sp, #8
   177f0:	f7fe f877 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   177f4:	42b0      	cmp	r0, r6
   177f6:	dd2c      	ble.n	17852 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   177f8:	2700      	movs	r7, #0
   177fa:	2103      	movs	r1, #3
   177fc:	a802      	add	r0, sp, #8
   177fe:	f7fe f870 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17802:	42b8      	cmp	r0, r7
   17804:	dd23      	ble.n	1784e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17806:	9700      	str	r7, [sp, #0]
   17808:	4633      	mov	r3, r6
   1780a:	462a      	mov	r2, r5
   1780c:	4621      	mov	r1, r4
   1780e:	a808      	add	r0, sp, #32
   17810:	f7fe f95f 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17814:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   17816:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17818:	4633      	mov	r3, r6
   1781a:	462a      	mov	r2, r5
   1781c:	4621      	mov	r1, r4
   1781e:	a810      	add	r0, sp, #64	; 0x40
   17820:	f7fe f957 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17824:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   17826:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17828:	4633      	mov	r3, r6
   1782a:	462a      	mov	r2, r5
   1782c:	4621      	mov	r1, r4
   1782e:	a802      	add	r0, sp, #8
   17830:	f7fe f919 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   17834:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17836:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   1783a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   1783e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17840:	428a      	cmp	r2, r1
   17842:	bfcc      	ite	gt
   17844:	2200      	movgt	r2, #0
   17846:	2201      	movle	r2, #1
   17848:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1784a:	3701      	adds	r7, #1
   1784c:	e7d5      	b.n	177fa <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1784e:	3601      	adds	r6, #1
   17850:	e7cc      	b.n	177ec <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17852:	3501      	adds	r5, #1
   17854:	e7c3      	b.n	177de <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17856:	3401      	adds	r4, #1
   17858:	e7ba      	b.n	177d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   1785a:	a802      	add	r0, sp, #8
   1785c:	f7fe f836 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17860:	b018      	add	sp, #96	; 0x60
   17862:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00017866 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   17866:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   1786a:	b098      	sub	sp, #96	; 0x60
   1786c:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   1786e:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   17870:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17872:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17874:	f7ff f8f0 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17878:	2400      	movs	r4, #0
   1787a:	2100      	movs	r1, #0
   1787c:	a802      	add	r0, sp, #8
   1787e:	f7fe f830 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17882:	42a0      	cmp	r0, r4
   17884:	dd46      	ble.n	17914 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17886:	2500      	movs	r5, #0
   17888:	2101      	movs	r1, #1
   1788a:	a802      	add	r0, sp, #8
   1788c:	f7fe f829 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17890:	42a8      	cmp	r0, r5
   17892:	dd3d      	ble.n	17910 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17894:	f04f 0800 	mov.w	r8, #0
   17898:	2102      	movs	r1, #2
   1789a:	a802      	add	r0, sp, #8
   1789c:	f7fe f821 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   178a0:	4540      	cmp	r0, r8
   178a2:	dd33      	ble.n	1790c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   178a4:	2700      	movs	r7, #0
   178a6:	2103      	movs	r1, #3
   178a8:	a802      	add	r0, sp, #8
   178aa:	f7fe f81a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   178ae:	42b8      	cmp	r0, r7
   178b0:	dd29      	ble.n	17906 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   178b2:	9700      	str	r7, [sp, #0]
   178b4:	4643      	mov	r3, r8
   178b6:	462a      	mov	r2, r5
   178b8:	4621      	mov	r1, r4
   178ba:	a808      	add	r0, sp, #32
   178bc:	f7fe f909 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   178c0:	9700      	str	r7, [sp, #0]
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   178c2:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   178c4:	4643      	mov	r3, r8
   178c6:	462a      	mov	r2, r5
   178c8:	4621      	mov	r1, r4
   178ca:	a810      	add	r0, sp, #64	; 0x40
   178cc:	f7fe f901 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   178d0:	9700      	str	r7, [sp, #0]
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   178d2:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   178d4:	4643      	mov	r3, r8
   178d6:	462a      	mov	r2, r5
   178d8:	4621      	mov	r1, r4
   178da:	a802      	add	r0, sp, #8
   178dc:	f7fe f8c3 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   178e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   178e2:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   178e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs <= rhs;
   178ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   178ee:	e9db ab00 	ldrd	sl, fp, [fp]
   178f2:	4552      	cmp	r2, sl
   178f4:	eb73 030b 	sbcs.w	r3, r3, fp
   178f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   178fa:	bfac      	ite	ge
   178fc:	2301      	movge	r3, #1
   178fe:	2300      	movlt	r3, #0
   17900:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17902:	3701      	adds	r7, #1
   17904:	e7cf      	b.n	178a6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17906:	f108 0801 	add.w	r8, r8, #1
   1790a:	e7c5      	b.n	17898 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1790c:	3501      	adds	r5, #1
   1790e:	e7bb      	b.n	17888 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17910:	3401      	adds	r4, #1
   17912:	e7b2      	b.n	1787a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   17914:	a802      	add	r0, sp, #8
   17916:	f7fd ffd9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1791a:	b018      	add	sp, #96	; 0x60
   1791c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00017920 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17924:	ed2d 8b04 	vpush	{d8-d9}
   17928:	b09d      	sub	sp, #116	; 0x74
   1792a:	4604      	mov	r4, r0
   1792c:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   1792e:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17930:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17932:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17934:	f7ff f890 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17938:	e9d4 6300 	ldrd	r6, r3, [r4]
   1793c:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   1793e:	68a3      	ldr	r3, [r4, #8]
   17940:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17944:	68e3      	ldr	r3, [r4, #12]
   17946:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   1794a:	6923      	ldr	r3, [r4, #16]
   1794c:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   1794e:	6963      	ldr	r3, [r4, #20]
   17950:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17954:	69a3      	ldr	r3, [r4, #24]
   17956:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1795a:	2400      	movs	r4, #0
   1795c:	2100      	movs	r1, #0
   1795e:	a806      	add	r0, sp, #24
   17960:	f7fd ffbf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17964:	42a0      	cmp	r0, r4
   17966:	dd5f      	ble.n	17a28 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17968:	2500      	movs	r5, #0
   1796a:	af06      	add	r7, sp, #24
   1796c:	2101      	movs	r1, #1
   1796e:	4638      	mov	r0, r7
   17970:	f7fd ffb7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17974:	42a8      	cmp	r0, r5
   17976:	dd55      	ble.n	17a24 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17978:	f04f 0800 	mov.w	r8, #0
   1797c:	2102      	movs	r1, #2
   1797e:	4638      	mov	r0, r7
   17980:	f7fd ffaf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17984:	4540      	cmp	r0, r8
   17986:	dd4b      	ble.n	17a20 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17988:	f04f 0900 	mov.w	r9, #0
   1798c:	2103      	movs	r1, #3
   1798e:	4638      	mov	r0, r7
   17990:	f7fd ffa7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17994:	4548      	cmp	r0, r9
   17996:	dd40      	ble.n	17a1a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17998:	f8cd 9000 	str.w	r9, [sp]
   1799c:	4643      	mov	r3, r8
   1799e:	462a      	mov	r2, r5
   179a0:	4621      	mov	r1, r4
   179a2:	a80c      	add	r0, sp, #48	; 0x30
   179a4:	f7fe f895 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   179a8:	9b05      	ldr	r3, [sp, #20]
   179aa:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   179ae:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   179b0:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   179b4:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   179b6:	462a      	mov	r2, r5
   179b8:	4643      	mov	r3, r8
   179ba:	4621      	mov	r1, r4
   179bc:	a814      	add	r0, sp, #80	; 0x50
   179be:	f7fe f888 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   179c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   179c4:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   179c8:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179ca:	ee18 2a90 	vmov	r2, s17
   179ce:	ee18 1a10 	vmov	r1, s16
   179d2:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   179d6:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179d8:	f7ef fbe6 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   179dc:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179e0:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179e2:	ee19 2a90 	vmov	r2, s19
   179e6:	ee19 1a10 	vmov	r1, s18
   179ea:	4658      	mov	r0, fp
   179ec:	f7ef fbdc 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   179f0:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   179f4:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   179f6:	4643      	mov	r3, r8
   179f8:	462a      	mov	r2, r5
   179fa:	4621      	mov	r1, r4
   179fc:	4638      	mov	r0, r7
   179fe:	f7fe f832 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   17a02:	ebaa 030b 	sub.w	r3, sl, fp
   17a06:	f1d3 0a00 	rsbs	sl, r3, #0
   17a0a:	eb4a 0a03 	adc.w	sl, sl, r3
   17a0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17a10:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   17a14:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17a18:	e7b8      	b.n	1798c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17a1a:	f108 0801 	add.w	r8, r8, #1
   17a1e:	e7ad      	b.n	1797c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17a20:	3501      	adds	r5, #1
   17a22:	e7a2      	b.n	1796a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17a24:	3401      	adds	r4, #1
   17a26:	e799      	b.n	1795c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17a28:	a806      	add	r0, sp, #24
   17a2a:	f7fd ff4f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17a2e:	b01d      	add	sp, #116	; 0x74
   17a30:	ecbd 8b04 	vpop	{d8-d9}
   17a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a38 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a3c:	ed2d 8b04 	vpush	{d8-d9}
   17a40:	b09d      	sub	sp, #116	; 0x74
   17a42:	4604      	mov	r4, r0
   17a44:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17a46:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17a48:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17a4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17a4c:	f7ff f804 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17a50:	e9d4 6300 	ldrd	r6, r3, [r4]
   17a54:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17a56:	68a3      	ldr	r3, [r4, #8]
   17a58:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17a5c:	68e3      	ldr	r3, [r4, #12]
   17a5e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17a62:	6923      	ldr	r3, [r4, #16]
   17a64:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17a66:	6963      	ldr	r3, [r4, #20]
   17a68:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17a6c:	69a3      	ldr	r3, [r4, #24]
   17a6e:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17a72:	2400      	movs	r4, #0
   17a74:	2100      	movs	r1, #0
   17a76:	a806      	add	r0, sp, #24
   17a78:	f7fd ff33 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a7c:	42a0      	cmp	r0, r4
   17a7e:	dd5f      	ble.n	17b40 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17a80:	2500      	movs	r5, #0
   17a82:	af06      	add	r7, sp, #24
   17a84:	2101      	movs	r1, #1
   17a86:	4638      	mov	r0, r7
   17a88:	f7fd ff2b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a8c:	42a8      	cmp	r0, r5
   17a8e:	dd55      	ble.n	17b3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17a90:	f04f 0800 	mov.w	r8, #0
   17a94:	2102      	movs	r1, #2
   17a96:	4638      	mov	r0, r7
   17a98:	f7fd ff23 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17a9c:	4540      	cmp	r0, r8
   17a9e:	dd4b      	ble.n	17b38 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17aa0:	f04f 0900 	mov.w	r9, #0
   17aa4:	2103      	movs	r1, #3
   17aa6:	4638      	mov	r0, r7
   17aa8:	f7fd ff1b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17aac:	4548      	cmp	r0, r9
   17aae:	dd40      	ble.n	17b32 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17ab0:	f8cd 9000 	str.w	r9, [sp]
   17ab4:	4643      	mov	r3, r8
   17ab6:	462a      	mov	r2, r5
   17ab8:	4621      	mov	r1, r4
   17aba:	a80c      	add	r0, sp, #48	; 0x30
   17abc:	f7fe f809 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17ac0:	9b05      	ldr	r3, [sp, #20]
   17ac2:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17ac6:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17ac8:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17acc:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17ace:	462a      	mov	r2, r5
   17ad0:	4643      	mov	r3, r8
   17ad2:	4621      	mov	r1, r4
   17ad4:	a814      	add	r0, sp, #80	; 0x50
   17ad6:	f7fd fffc 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17ada:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17adc:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17ae0:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ae2:	ee18 2a90 	vmov	r2, s17
   17ae6:	ee18 1a10 	vmov	r1, s16
   17aea:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17aee:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17af0:	f7ef fb5a 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17af4:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17af8:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17afa:	ee19 2a90 	vmov	r2, s19
   17afe:	ee19 1a10 	vmov	r1, s18
   17b02:	4658      	mov	r0, fp
   17b04:	f7ef fb50 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17b08:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17b0c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17b0e:	4643      	mov	r3, r8
   17b10:	462a      	mov	r2, r5
   17b12:	4621      	mov	r1, r4
   17b14:	4638      	mov	r0, r7
   17b16:	f7fd ffa6 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   17b1a:	ebaa 030b 	sub.w	r3, sl, fp
   17b1e:	f1d3 0a00 	rsbs	sl, r3, #0
   17b22:	eb4a 0a03 	adc.w	sl, sl, r3
   17b26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17b28:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   17b2c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17b30:	e7b8      	b.n	17aa4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17b32:	f108 0801 	add.w	r8, r8, #1
   17b36:	e7ad      	b.n	17a94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17b38:	3501      	adds	r5, #1
   17b3a:	e7a2      	b.n	17a82 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17b3c:	3401      	adds	r4, #1
   17b3e:	e799      	b.n	17a74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17b40:	a806      	add	r0, sp, #24
   17b42:	f7fd fec3 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17b46:	b01d      	add	sp, #116	; 0x74
   17b48:	ecbd 8b04 	vpop	{d8-d9}
   17b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017b50 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b54:	ed2d 8b04 	vpush	{d8-d9}
   17b58:	b09d      	sub	sp, #116	; 0x74
   17b5a:	4604      	mov	r4, r0
   17b5c:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17b5e:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17b60:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17b62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17b64:	f7fe ff78 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17b68:	e9d4 6300 	ldrd	r6, r3, [r4]
   17b6c:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17b6e:	68a3      	ldr	r3, [r4, #8]
   17b70:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17b74:	68e3      	ldr	r3, [r4, #12]
   17b76:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17b7a:	6923      	ldr	r3, [r4, #16]
   17b7c:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17b7e:	6963      	ldr	r3, [r4, #20]
   17b80:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17b84:	69a3      	ldr	r3, [r4, #24]
   17b86:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17b8a:	2400      	movs	r4, #0
   17b8c:	2100      	movs	r1, #0
   17b8e:	a806      	add	r0, sp, #24
   17b90:	f7fd fea7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17b94:	42a0      	cmp	r0, r4
   17b96:	dd5e      	ble.n	17c56 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17b98:	2500      	movs	r5, #0
   17b9a:	af06      	add	r7, sp, #24
   17b9c:	2101      	movs	r1, #1
   17b9e:	4638      	mov	r0, r7
   17ba0:	f7fd fe9f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ba4:	42a8      	cmp	r0, r5
   17ba6:	dd54      	ble.n	17c52 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17ba8:	f04f 0800 	mov.w	r8, #0
   17bac:	2102      	movs	r1, #2
   17bae:	4638      	mov	r0, r7
   17bb0:	f7fd fe97 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17bb4:	4540      	cmp	r0, r8
   17bb6:	dd4a      	ble.n	17c4e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17bb8:	f04f 0900 	mov.w	r9, #0
   17bbc:	2103      	movs	r1, #3
   17bbe:	4638      	mov	r0, r7
   17bc0:	f7fd fe8f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17bc4:	4548      	cmp	r0, r9
   17bc6:	dd3f      	ble.n	17c48 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17bc8:	f8cd 9000 	str.w	r9, [sp]
   17bcc:	4643      	mov	r3, r8
   17bce:	462a      	mov	r2, r5
   17bd0:	4621      	mov	r1, r4
   17bd2:	a80c      	add	r0, sp, #48	; 0x30
   17bd4:	f7fd ff7d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17bd8:	9b05      	ldr	r3, [sp, #20]
   17bda:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   17bde:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17be0:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17be4:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17be6:	462a      	mov	r2, r5
   17be8:	4643      	mov	r3, r8
   17bea:	4621      	mov	r1, r4
   17bec:	a814      	add	r0, sp, #80	; 0x50
   17bee:	f7fd ff70 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17bf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17bf4:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   17bf8:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17bfa:	ee18 2a90 	vmov	r2, s17
   17bfe:	ee18 1a10 	vmov	r1, s16
   17c02:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17c06:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c08:	f7ef face 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17c0c:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c10:	ee19 2a90 	vmov	r2, s19
   17c14:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c18:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c1a:	4658      	mov	r0, fp
   17c1c:	f7ef fac4 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17c20:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c24:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17c26:	4643      	mov	r3, r8
   17c28:	462a      	mov	r2, r5
   17c2a:	4621      	mov	r1, r4
   17c2c:	4638      	mov	r0, r7
   17c2e:	f7fd ff1a 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17c32:	ebba 0a0b 	subs.w	sl, sl, fp
   17c36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17c38:	bf18      	it	ne
   17c3a:	f04f 0a01 	movne.w	sl, #1
   17c3e:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17c42:	f109 0901 	add.w	r9, r9, #1
   17c46:	e7b9      	b.n	17bbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17c48:	f108 0801 	add.w	r8, r8, #1
   17c4c:	e7ae      	b.n	17bac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17c4e:	3501      	adds	r5, #1
   17c50:	e7a3      	b.n	17b9a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17c52:	3401      	adds	r4, #1
   17c54:	e79a      	b.n	17b8c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17c56:	a806      	add	r0, sp, #24
   17c58:	f7fd fe38 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17c5c:	b01d      	add	sp, #116	; 0x74
   17c5e:	ecbd 8b04 	vpop	{d8-d9}
   17c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017c66 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c6a:	ed2d 8b04 	vpush	{d8-d9}
   17c6e:	b09d      	sub	sp, #116	; 0x74
   17c70:	4604      	mov	r4, r0
   17c72:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17c74:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17c76:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17c78:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17c7a:	f7fe feed 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17c7e:	e9d4 6300 	ldrd	r6, r3, [r4]
   17c82:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17c84:	68a3      	ldr	r3, [r4, #8]
   17c86:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17c8a:	68e3      	ldr	r3, [r4, #12]
   17c8c:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17c90:	6923      	ldr	r3, [r4, #16]
   17c92:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17c94:	6963      	ldr	r3, [r4, #20]
   17c96:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17c9a:	69a3      	ldr	r3, [r4, #24]
   17c9c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17ca0:	2400      	movs	r4, #0
   17ca2:	2100      	movs	r1, #0
   17ca4:	a806      	add	r0, sp, #24
   17ca6:	f7fd fe1c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17caa:	42a0      	cmp	r0, r4
   17cac:	dd5e      	ble.n	17d6c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17cae:	2500      	movs	r5, #0
   17cb0:	af06      	add	r7, sp, #24
   17cb2:	2101      	movs	r1, #1
   17cb4:	4638      	mov	r0, r7
   17cb6:	f7fd fe14 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17cba:	42a8      	cmp	r0, r5
   17cbc:	dd54      	ble.n	17d68 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17cbe:	f04f 0800 	mov.w	r8, #0
   17cc2:	2102      	movs	r1, #2
   17cc4:	4638      	mov	r0, r7
   17cc6:	f7fd fe0c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17cca:	4540      	cmp	r0, r8
   17ccc:	dd4a      	ble.n	17d64 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17cce:	f04f 0900 	mov.w	r9, #0
   17cd2:	2103      	movs	r1, #3
   17cd4:	4638      	mov	r0, r7
   17cd6:	f7fd fe04 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17cda:	4548      	cmp	r0, r9
   17cdc:	dd3f      	ble.n	17d5e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17cde:	f8cd 9000 	str.w	r9, [sp]
   17ce2:	4643      	mov	r3, r8
   17ce4:	462a      	mov	r2, r5
   17ce6:	4621      	mov	r1, r4
   17ce8:	a80c      	add	r0, sp, #48	; 0x30
   17cea:	f7fd fef2 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17cee:	9b05      	ldr	r3, [sp, #20]
   17cf0:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17cf4:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17cf6:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17cfa:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17cfc:	462a      	mov	r2, r5
   17cfe:	4643      	mov	r3, r8
   17d00:	4621      	mov	r1, r4
   17d02:	a814      	add	r0, sp, #80	; 0x50
   17d04:	f7fd fee5 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17d08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17d0a:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17d0e:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d10:	ee18 2a90 	vmov	r2, s17
   17d14:	ee18 1a10 	vmov	r1, s16
   17d18:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17d1c:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d1e:	f7ef fa43 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17d22:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d26:	ee19 2a90 	vmov	r2, s19
   17d2a:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d2e:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d30:	4658      	mov	r0, fp
   17d32:	f7ef fa39 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17d36:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d3a:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17d3c:	4643      	mov	r3, r8
   17d3e:	462a      	mov	r2, r5
   17d40:	4621      	mov	r1, r4
   17d42:	4638      	mov	r0, r7
   17d44:	f7fd fe8f 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   17d48:	ebba 0a0b 	subs.w	sl, sl, fp
   17d4c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17d4e:	bf18      	it	ne
   17d50:	f04f 0a01 	movne.w	sl, #1
   17d54:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17d58:	f109 0901 	add.w	r9, r9, #1
   17d5c:	e7b9      	b.n	17cd2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17d5e:	f108 0801 	add.w	r8, r8, #1
   17d62:	e7ae      	b.n	17cc2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17d64:	3501      	adds	r5, #1
   17d66:	e7a3      	b.n	17cb0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17d68:	3401      	adds	r4, #1
   17d6a:	e79a      	b.n	17ca2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17d6c:	a806      	add	r0, sp, #24
   17d6e:	f7fd fdad 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17d72:	b01d      	add	sp, #116	; 0x74
   17d74:	ecbd 8b04 	vpop	{d8-d9}
   17d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017d7c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d80:	ed2d 8b04 	vpush	{d8-d9}
   17d84:	b09d      	sub	sp, #116	; 0x74
   17d86:	4604      	mov	r4, r0
   17d88:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17d8a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17d8c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17d8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17d90:	f7fe fe62 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17d94:	e9d4 6300 	ldrd	r6, r3, [r4]
   17d98:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17d9a:	68a3      	ldr	r3, [r4, #8]
   17d9c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17da0:	68e3      	ldr	r3, [r4, #12]
   17da2:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17da6:	6923      	ldr	r3, [r4, #16]
   17da8:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17daa:	6963      	ldr	r3, [r4, #20]
   17dac:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17db0:	69a3      	ldr	r3, [r4, #24]
   17db2:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17db6:	2400      	movs	r4, #0
   17db8:	2100      	movs	r1, #0
   17dba:	a806      	add	r0, sp, #24
   17dbc:	f7fd fd91 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17dc0:	42a0      	cmp	r0, r4
   17dc2:	dd5f      	ble.n	17e84 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17dc4:	2500      	movs	r5, #0
   17dc6:	af06      	add	r7, sp, #24
   17dc8:	2101      	movs	r1, #1
   17dca:	4638      	mov	r0, r7
   17dcc:	f7fd fd89 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17dd0:	42a8      	cmp	r0, r5
   17dd2:	dd55      	ble.n	17e80 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17dd4:	f04f 0800 	mov.w	r8, #0
   17dd8:	2102      	movs	r1, #2
   17dda:	4638      	mov	r0, r7
   17ddc:	f7fd fd81 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17de0:	4540      	cmp	r0, r8
   17de2:	dd4b      	ble.n	17e7c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17de4:	f04f 0900 	mov.w	r9, #0
   17de8:	2103      	movs	r1, #3
   17dea:	4638      	mov	r0, r7
   17dec:	f7fd fd79 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17df0:	4548      	cmp	r0, r9
   17df2:	dd40      	ble.n	17e76 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17df4:	f8cd 9000 	str.w	r9, [sp]
   17df8:	4643      	mov	r3, r8
   17dfa:	462a      	mov	r2, r5
   17dfc:	4621      	mov	r1, r4
   17dfe:	a80c      	add	r0, sp, #48	; 0x30
   17e00:	f7fd fe67 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17e04:	9b05      	ldr	r3, [sp, #20]
   17e06:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   17e0a:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17e0c:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17e10:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17e12:	462a      	mov	r2, r5
   17e14:	4643      	mov	r3, r8
   17e16:	4621      	mov	r1, r4
   17e18:	a814      	add	r0, sp, #80	; 0x50
   17e1a:	f7fd fe5a 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17e1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17e20:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   17e24:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e26:	ee18 2a90 	vmov	r2, s17
   17e2a:	ee18 1a10 	vmov	r1, s16
   17e2e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17e32:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e34:	f7ef f9b8 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17e38:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e3c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e3e:	ee19 2a90 	vmov	r2, s19
   17e42:	ee19 1a10 	vmov	r1, s18
   17e46:	4658      	mov	r0, fp
   17e48:	f7ef f9ae 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17e4c:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e50:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17e52:	4643      	mov	r3, r8
   17e54:	462a      	mov	r2, r5
   17e56:	4621      	mov	r1, r4
   17e58:	4638      	mov	r0, r7
   17e5a:	f7fd fe04 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   17e5e:	45da      	cmp	sl, fp
   17e60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17e62:	bfd4      	ite	le
   17e64:	f04f 0a00 	movle.w	sl, #0
   17e68:	f04f 0a01 	movgt.w	sl, #1
   17e6c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17e70:	f109 0901 	add.w	r9, r9, #1
   17e74:	e7b8      	b.n	17de8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17e76:	f108 0801 	add.w	r8, r8, #1
   17e7a:	e7ad      	b.n	17dd8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17e7c:	3501      	adds	r5, #1
   17e7e:	e7a2      	b.n	17dc6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17e80:	3401      	adds	r4, #1
   17e82:	e799      	b.n	17db8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17e84:	a806      	add	r0, sp, #24
   17e86:	f7fd fd21 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17e8a:	b01d      	add	sp, #116	; 0x74
   17e8c:	ecbd 8b04 	vpop	{d8-d9}
   17e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017e94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e98:	ed2d 8b04 	vpush	{d8-d9}
   17e9c:	b09d      	sub	sp, #116	; 0x74
   17e9e:	4604      	mov	r4, r0
   17ea0:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17ea2:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17ea4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17ea6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17ea8:	f7fe fdd6 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17eac:	e9d4 6300 	ldrd	r6, r3, [r4]
   17eb0:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17eb2:	68a3      	ldr	r3, [r4, #8]
   17eb4:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17eb8:	68e3      	ldr	r3, [r4, #12]
   17eba:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17ebe:	6923      	ldr	r3, [r4, #16]
   17ec0:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17ec2:	6963      	ldr	r3, [r4, #20]
   17ec4:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17ec8:	69a3      	ldr	r3, [r4, #24]
   17eca:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17ece:	2400      	movs	r4, #0
   17ed0:	2100      	movs	r1, #0
   17ed2:	a806      	add	r0, sp, #24
   17ed4:	f7fd fd05 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ed8:	42a0      	cmp	r0, r4
   17eda:	dd5f      	ble.n	17f9c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17edc:	2500      	movs	r5, #0
   17ede:	af06      	add	r7, sp, #24
   17ee0:	2101      	movs	r1, #1
   17ee2:	4638      	mov	r0, r7
   17ee4:	f7fd fcfd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ee8:	42a8      	cmp	r0, r5
   17eea:	dd55      	ble.n	17f98 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17eec:	f04f 0800 	mov.w	r8, #0
   17ef0:	2102      	movs	r1, #2
   17ef2:	4638      	mov	r0, r7
   17ef4:	f7fd fcf5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ef8:	4540      	cmp	r0, r8
   17efa:	dd4b      	ble.n	17f94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17efc:	f04f 0900 	mov.w	r9, #0
   17f00:	2103      	movs	r1, #3
   17f02:	4638      	mov	r0, r7
   17f04:	f7fd fced 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17f08:	4548      	cmp	r0, r9
   17f0a:	dd40      	ble.n	17f8e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   17f0c:	f8cd 9000 	str.w	r9, [sp]
   17f10:	4643      	mov	r3, r8
   17f12:	462a      	mov	r2, r5
   17f14:	4621      	mov	r1, r4
   17f16:	a80c      	add	r0, sp, #48	; 0x30
   17f18:	f7fd fddb 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17f1c:	9b05      	ldr	r3, [sp, #20]
   17f1e:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   17f22:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17f24:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   17f28:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   17f2a:	462a      	mov	r2, r5
   17f2c:	4643      	mov	r3, r8
   17f2e:	4621      	mov	r1, r4
   17f30:	a814      	add	r0, sp, #80	; 0x50
   17f32:	f7fd fdce 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   17f36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17f38:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   17f3c:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f3e:	ee18 2a90 	vmov	r2, s17
   17f42:	ee18 1a10 	vmov	r1, s16
   17f46:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   17f4a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f4c:	f7ef f92c 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17f50:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f54:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f56:	ee19 2a90 	vmov	r2, s19
   17f5a:	ee19 1a10 	vmov	r1, s18
   17f5e:	4658      	mov	r0, fp
   17f60:	f7ef f922 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17f64:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17f68:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   17f6a:	4643      	mov	r3, r8
   17f6c:	462a      	mov	r2, r5
   17f6e:	4621      	mov	r1, r4
   17f70:	4638      	mov	r0, r7
   17f72:	f7fd fd78 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   17f76:	45da      	cmp	sl, fp
   17f78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17f7a:	bfd4      	ite	le
   17f7c:	f04f 0a00 	movle.w	sl, #0
   17f80:	f04f 0a01 	movgt.w	sl, #1
   17f84:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   17f88:	f109 0901 	add.w	r9, r9, #1
   17f8c:	e7b8      	b.n	17f00 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   17f8e:	f108 0801 	add.w	r8, r8, #1
   17f92:	e7ad      	b.n	17ef0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17f94:	3501      	adds	r5, #1
   17f96:	e7a2      	b.n	17ede <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17f98:	3401      	adds	r4, #1
   17f9a:	e799      	b.n	17ed0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   17f9c:	a806      	add	r0, sp, #24
   17f9e:	f7fd fc95 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   17fa2:	b01d      	add	sp, #116	; 0x74
   17fa4:	ecbd 8b04 	vpop	{d8-d9}
   17fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017fac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   17fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fb0:	ed2d 8b04 	vpush	{d8-d9}
   17fb4:	b09d      	sub	sp, #116	; 0x74
   17fb6:	4604      	mov	r4, r0
   17fb8:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   17fba:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   17fbc:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   17fbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   17fc0:	f7fe fd4a 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   17fc4:	e9d4 6300 	ldrd	r6, r3, [r4]
   17fc8:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   17fca:	68a3      	ldr	r3, [r4, #8]
   17fcc:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   17fd0:	68e3      	ldr	r3, [r4, #12]
   17fd2:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   17fd6:	6923      	ldr	r3, [r4, #16]
   17fd8:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   17fda:	6963      	ldr	r3, [r4, #20]
   17fdc:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   17fe0:	69a3      	ldr	r3, [r4, #24]
   17fe2:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   17fe6:	2400      	movs	r4, #0
   17fe8:	2100      	movs	r1, #0
   17fea:	a806      	add	r0, sp, #24
   17fec:	f7fd fc79 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   17ff0:	42a0      	cmp	r0, r4
   17ff2:	dd5f      	ble.n	180b4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   17ff4:	2500      	movs	r5, #0
   17ff6:	af06      	add	r7, sp, #24
   17ff8:	2101      	movs	r1, #1
   17ffa:	4638      	mov	r0, r7
   17ffc:	f7fd fc71 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18000:	42a8      	cmp	r0, r5
   18002:	dd55      	ble.n	180b0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18004:	f04f 0800 	mov.w	r8, #0
   18008:	2102      	movs	r1, #2
   1800a:	4638      	mov	r0, r7
   1800c:	f7fd fc69 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18010:	4540      	cmp	r0, r8
   18012:	dd4b      	ble.n	180ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18014:	f04f 0900 	mov.w	r9, #0
   18018:	2103      	movs	r1, #3
   1801a:	4638      	mov	r0, r7
   1801c:	f7fd fc61 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18020:	4548      	cmp	r0, r9
   18022:	dd40      	ble.n	180a6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18024:	f8cd 9000 	str.w	r9, [sp]
   18028:	4643      	mov	r3, r8
   1802a:	462a      	mov	r2, r5
   1802c:	4621      	mov	r1, r4
   1802e:	a80c      	add	r0, sp, #48	; 0x30
   18030:	f7fd fd4f 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18034:	9b05      	ldr	r3, [sp, #20]
   18036:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   1803a:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1803c:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18040:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18042:	462a      	mov	r2, r5
   18044:	4643      	mov	r3, r8
   18046:	4621      	mov	r1, r4
   18048:	a814      	add	r0, sp, #80	; 0x50
   1804a:	f7fd fd42 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1804e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18050:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   18054:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18056:	ee18 2a90 	vmov	r2, s17
   1805a:	ee18 1a10 	vmov	r1, s16
   1805e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18062:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18064:	f7ef f8a0 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18068:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1806c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1806e:	ee19 2a90 	vmov	r2, s19
   18072:	ee19 1a10 	vmov	r1, s18
   18076:	4658      	mov	r0, fp
   18078:	f7ef f896 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1807c:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18080:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18082:	4643      	mov	r3, r8
   18084:	462a      	mov	r2, r5
   18086:	4621      	mov	r1, r4
   18088:	4638      	mov	r0, r7
   1808a:	f7fd fcec 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   1808e:	45da      	cmp	sl, fp
   18090:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18092:	bfb4      	ite	lt
   18094:	f04f 0a00 	movlt.w	sl, #0
   18098:	f04f 0a01 	movge.w	sl, #1
   1809c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   180a0:	f109 0901 	add.w	r9, r9, #1
   180a4:	e7b8      	b.n	18018 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   180a6:	f108 0801 	add.w	r8, r8, #1
   180aa:	e7ad      	b.n	18008 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   180ac:	3501      	adds	r5, #1
   180ae:	e7a2      	b.n	17ff6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   180b0:	3401      	adds	r4, #1
   180b2:	e799      	b.n	17fe8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   180b4:	a806      	add	r0, sp, #24
   180b6:	f7fd fc09 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   180ba:	b01d      	add	sp, #116	; 0x74
   180bc:	ecbd 8b04 	vpop	{d8-d9}
   180c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000180c4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   180c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c8:	ed2d 8b04 	vpush	{d8-d9}
   180cc:	b09d      	sub	sp, #116	; 0x74
   180ce:	4604      	mov	r4, r0
   180d0:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   180d2:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   180d4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   180d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   180d8:	f7fe fcbe 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   180dc:	e9d4 6300 	ldrd	r6, r3, [r4]
   180e0:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   180e2:	68a3      	ldr	r3, [r4, #8]
   180e4:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   180e8:	68e3      	ldr	r3, [r4, #12]
   180ea:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   180ee:	6923      	ldr	r3, [r4, #16]
   180f0:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   180f2:	6963      	ldr	r3, [r4, #20]
   180f4:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   180f8:	69a3      	ldr	r3, [r4, #24]
   180fa:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   180fe:	2400      	movs	r4, #0
   18100:	2100      	movs	r1, #0
   18102:	a806      	add	r0, sp, #24
   18104:	f7fd fbed 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18108:	42a0      	cmp	r0, r4
   1810a:	dd5f      	ble.n	181cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1810c:	2500      	movs	r5, #0
   1810e:	af06      	add	r7, sp, #24
   18110:	2101      	movs	r1, #1
   18112:	4638      	mov	r0, r7
   18114:	f7fd fbe5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18118:	42a8      	cmp	r0, r5
   1811a:	dd55      	ble.n	181c8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1811c:	f04f 0800 	mov.w	r8, #0
   18120:	2102      	movs	r1, #2
   18122:	4638      	mov	r0, r7
   18124:	f7fd fbdd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18128:	4540      	cmp	r0, r8
   1812a:	dd4b      	ble.n	181c4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1812c:	f04f 0900 	mov.w	r9, #0
   18130:	2103      	movs	r1, #3
   18132:	4638      	mov	r0, r7
   18134:	f7fd fbd5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18138:	4548      	cmp	r0, r9
   1813a:	dd40      	ble.n	181be <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1813c:	f8cd 9000 	str.w	r9, [sp]
   18140:	4643      	mov	r3, r8
   18142:	462a      	mov	r2, r5
   18144:	4621      	mov	r1, r4
   18146:	a80c      	add	r0, sp, #48	; 0x30
   18148:	f7fd fcc3 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1814c:	9b05      	ldr	r3, [sp, #20]
   1814e:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   18152:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18154:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18158:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1815a:	462a      	mov	r2, r5
   1815c:	4643      	mov	r3, r8
   1815e:	4621      	mov	r1, r4
   18160:	a814      	add	r0, sp, #80	; 0x50
   18162:	f7fd fcb6 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18166:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18168:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   1816c:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1816e:	ee18 2a90 	vmov	r2, s17
   18172:	ee18 1a10 	vmov	r1, s16
   18176:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   1817a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1817c:	f7ef f814 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18180:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18184:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18186:	ee19 2a90 	vmov	r2, s19
   1818a:	ee19 1a10 	vmov	r1, s18
   1818e:	4658      	mov	r0, fp
   18190:	f7ef f80a 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   18194:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18198:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   1819a:	4643      	mov	r3, r8
   1819c:	462a      	mov	r2, r5
   1819e:	4621      	mov	r1, r4
   181a0:	4638      	mov	r0, r7
   181a2:	f7fd fc60 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   181a6:	45da      	cmp	sl, fp
   181a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   181aa:	bfb4      	ite	lt
   181ac:	f04f 0a00 	movlt.w	sl, #0
   181b0:	f04f 0a01 	movge.w	sl, #1
   181b4:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   181b8:	f109 0901 	add.w	r9, r9, #1
   181bc:	e7b8      	b.n	18130 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   181be:	f108 0801 	add.w	r8, r8, #1
   181c2:	e7ad      	b.n	18120 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   181c4:	3501      	adds	r5, #1
   181c6:	e7a2      	b.n	1810e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   181c8:	3401      	adds	r4, #1
   181ca:	e799      	b.n	18100 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   181cc:	a806      	add	r0, sp, #24
   181ce:	f7fd fb7d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   181d2:	b01d      	add	sp, #116	; 0x74
   181d4:	ecbd 8b04 	vpop	{d8-d9}
   181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000181dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e0:	ed2d 8b04 	vpush	{d8-d9}
   181e4:	b09d      	sub	sp, #116	; 0x74
   181e6:	4604      	mov	r4, r0
   181e8:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   181ea:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   181ec:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   181ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   181f0:	f7fe fc32 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   181f4:	e9d4 6300 	ldrd	r6, r3, [r4]
   181f8:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   181fa:	68a3      	ldr	r3, [r4, #8]
   181fc:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   18200:	68e3      	ldr	r3, [r4, #12]
   18202:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   18206:	6923      	ldr	r3, [r4, #16]
   18208:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   1820a:	6963      	ldr	r3, [r4, #20]
   1820c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18210:	69a3      	ldr	r3, [r4, #24]
   18212:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18216:	2400      	movs	r4, #0
   18218:	2100      	movs	r1, #0
   1821a:	a806      	add	r0, sp, #24
   1821c:	f7fd fb61 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18220:	42a0      	cmp	r0, r4
   18222:	dd5f      	ble.n	182e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18224:	2500      	movs	r5, #0
   18226:	af06      	add	r7, sp, #24
   18228:	2101      	movs	r1, #1
   1822a:	4638      	mov	r0, r7
   1822c:	f7fd fb59 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18230:	42a8      	cmp	r0, r5
   18232:	dd55      	ble.n	182e0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18234:	f04f 0800 	mov.w	r8, #0
   18238:	2102      	movs	r1, #2
   1823a:	4638      	mov	r0, r7
   1823c:	f7fd fb51 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18240:	4540      	cmp	r0, r8
   18242:	dd4b      	ble.n	182dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18244:	f04f 0900 	mov.w	r9, #0
   18248:	2103      	movs	r1, #3
   1824a:	4638      	mov	r0, r7
   1824c:	f7fd fb49 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18250:	4548      	cmp	r0, r9
   18252:	dd40      	ble.n	182d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18254:	f8cd 9000 	str.w	r9, [sp]
   18258:	4643      	mov	r3, r8
   1825a:	462a      	mov	r2, r5
   1825c:	4621      	mov	r1, r4
   1825e:	a80c      	add	r0, sp, #48	; 0x30
   18260:	f7fd fc37 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18264:	9b05      	ldr	r3, [sp, #20]
   18266:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   1826a:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1826c:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18270:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18272:	462a      	mov	r2, r5
   18274:	4643      	mov	r3, r8
   18276:	4621      	mov	r1, r4
   18278:	a814      	add	r0, sp, #80	; 0x50
   1827a:	f7fd fc2a 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1827e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18280:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   18284:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18286:	ee18 2a90 	vmov	r2, s17
   1828a:	ee18 1a10 	vmov	r1, s16
   1828e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   18292:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18294:	f7ee ff88 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18298:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1829c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1829e:	ee19 2a90 	vmov	r2, s19
   182a2:	ee19 1a10 	vmov	r1, s18
   182a6:	4658      	mov	r0, fp
   182a8:	f7ee ff7e 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   182ac:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182b0:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   182b2:	4643      	mov	r3, r8
   182b4:	462a      	mov	r2, r5
   182b6:	4621      	mov	r1, r4
   182b8:	4638      	mov	r0, r7
   182ba:	f7fd fbd4 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   182be:	45da      	cmp	sl, fp
   182c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   182c2:	bfac      	ite	ge
   182c4:	f04f 0a00 	movge.w	sl, #0
   182c8:	f04f 0a01 	movlt.w	sl, #1
   182cc:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   182d0:	f109 0901 	add.w	r9, r9, #1
   182d4:	e7b8      	b.n	18248 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   182d6:	f108 0801 	add.w	r8, r8, #1
   182da:	e7ad      	b.n	18238 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   182dc:	3501      	adds	r5, #1
   182de:	e7a2      	b.n	18226 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   182e0:	3401      	adds	r4, #1
   182e2:	e799      	b.n	18218 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   182e4:	a806      	add	r0, sp, #24
   182e6:	f7fd faf1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   182ea:	b01d      	add	sp, #116	; 0x74
   182ec:	ecbd 8b04 	vpop	{d8-d9}
   182f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000182f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   182f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f8:	ed2d 8b04 	vpush	{d8-d9}
   182fc:	b09d      	sub	sp, #116	; 0x74
   182fe:	4604      	mov	r4, r0
   18300:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   18302:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   18304:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   18306:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   18308:	f7fe fba6 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   1830c:	e9d4 6300 	ldrd	r6, r3, [r4]
   18310:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   18312:	68a3      	ldr	r3, [r4, #8]
   18314:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   18318:	68e3      	ldr	r3, [r4, #12]
   1831a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   1831e:	6923      	ldr	r3, [r4, #16]
   18320:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   18322:	6963      	ldr	r3, [r4, #20]
   18324:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18328:	69a3      	ldr	r3, [r4, #24]
   1832a:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1832e:	2400      	movs	r4, #0
   18330:	2100      	movs	r1, #0
   18332:	a806      	add	r0, sp, #24
   18334:	f7fd fad5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18338:	42a0      	cmp	r0, r4
   1833a:	dd5f      	ble.n	183fc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1833c:	2500      	movs	r5, #0
   1833e:	af06      	add	r7, sp, #24
   18340:	2101      	movs	r1, #1
   18342:	4638      	mov	r0, r7
   18344:	f7fd facd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18348:	42a8      	cmp	r0, r5
   1834a:	dd55      	ble.n	183f8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1834c:	f04f 0800 	mov.w	r8, #0
   18350:	2102      	movs	r1, #2
   18352:	4638      	mov	r0, r7
   18354:	f7fd fac5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18358:	4540      	cmp	r0, r8
   1835a:	dd4b      	ble.n	183f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1835c:	f04f 0900 	mov.w	r9, #0
   18360:	2103      	movs	r1, #3
   18362:	4638      	mov	r0, r7
   18364:	f7fd fabd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18368:	4548      	cmp	r0, r9
   1836a:	dd40      	ble.n	183ee <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1836c:	f8cd 9000 	str.w	r9, [sp]
   18370:	4643      	mov	r3, r8
   18372:	462a      	mov	r2, r5
   18374:	4621      	mov	r1, r4
   18376:	a80c      	add	r0, sp, #48	; 0x30
   18378:	f7fd fbab 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1837c:	9b05      	ldr	r3, [sp, #20]
   1837e:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   18382:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   18384:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   18388:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1838a:	462a      	mov	r2, r5
   1838c:	4643      	mov	r3, r8
   1838e:	4621      	mov	r1, r4
   18390:	a814      	add	r0, sp, #80	; 0x50
   18392:	f7fd fb9e 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18396:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   18398:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   1839c:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1839e:	ee18 2a90 	vmov	r2, s17
   183a2:	ee18 1a10 	vmov	r1, s16
   183a6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   183aa:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   183ac:	f7ee fefc 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   183b0:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   183b4:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   183b6:	ee19 2a90 	vmov	r2, s19
   183ba:	ee19 1a10 	vmov	r1, s18
   183be:	4658      	mov	r0, fp
   183c0:	f7ee fef2 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   183c4:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   183c8:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   183ca:	4643      	mov	r3, r8
   183cc:	462a      	mov	r2, r5
   183ce:	4621      	mov	r1, r4
   183d0:	4638      	mov	r0, r7
   183d2:	f7fd fb48 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   183d6:	45da      	cmp	sl, fp
   183d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   183da:	bfac      	ite	ge
   183dc:	f04f 0a00 	movge.w	sl, #0
   183e0:	f04f 0a01 	movlt.w	sl, #1
   183e4:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   183e8:	f109 0901 	add.w	r9, r9, #1
   183ec:	e7b8      	b.n	18360 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   183ee:	f108 0801 	add.w	r8, r8, #1
   183f2:	e7ad      	b.n	18350 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   183f4:	3501      	adds	r5, #1
   183f6:	e7a2      	b.n	1833e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   183f8:	3401      	adds	r4, #1
   183fa:	e799      	b.n	18330 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   183fc:	a806      	add	r0, sp, #24
   183fe:	f7fd fa65 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   18402:	b01d      	add	sp, #116	; 0x74
   18404:	ecbd 8b04 	vpop	{d8-d9}
   18408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001840c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   1840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18410:	ed2d 8b04 	vpush	{d8-d9}
   18414:	b09d      	sub	sp, #116	; 0x74
   18416:	4604      	mov	r4, r0
   18418:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   1841a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   1841c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   1841e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   18420:	f7fe fb1a 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   18424:	e9d4 6300 	ldrd	r6, r3, [r4]
   18428:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   1842a:	68a3      	ldr	r3, [r4, #8]
   1842c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   18430:	68e3      	ldr	r3, [r4, #12]
   18432:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   18436:	6923      	ldr	r3, [r4, #16]
   18438:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   1843a:	6963      	ldr	r3, [r4, #20]
   1843c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18440:	69a3      	ldr	r3, [r4, #24]
   18442:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18446:	2400      	movs	r4, #0
   18448:	2100      	movs	r1, #0
   1844a:	a806      	add	r0, sp, #24
   1844c:	f7fd fa49 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18450:	42a0      	cmp	r0, r4
   18452:	dd5f      	ble.n	18514 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18454:	2500      	movs	r5, #0
   18456:	af06      	add	r7, sp, #24
   18458:	2101      	movs	r1, #1
   1845a:	4638      	mov	r0, r7
   1845c:	f7fd fa41 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18460:	42a8      	cmp	r0, r5
   18462:	dd55      	ble.n	18510 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18464:	f04f 0800 	mov.w	r8, #0
   18468:	2102      	movs	r1, #2
   1846a:	4638      	mov	r0, r7
   1846c:	f7fd fa39 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18470:	4540      	cmp	r0, r8
   18472:	dd4b      	ble.n	1850c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18474:	f04f 0900 	mov.w	r9, #0
   18478:	2103      	movs	r1, #3
   1847a:	4638      	mov	r0, r7
   1847c:	f7fd fa31 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18480:	4548      	cmp	r0, r9
   18482:	dd40      	ble.n	18506 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   18484:	f8cd 9000 	str.w	r9, [sp]
   18488:	4643      	mov	r3, r8
   1848a:	462a      	mov	r2, r5
   1848c:	4621      	mov	r1, r4
   1848e:	a80c      	add	r0, sp, #48	; 0x30
   18490:	f7fd fb1f 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   18494:	9b05      	ldr	r3, [sp, #20]
   18496:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   1849a:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   1849c:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   184a0:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   184a2:	462a      	mov	r2, r5
   184a4:	4643      	mov	r3, r8
   184a6:	4621      	mov	r1, r4
   184a8:	a814      	add	r0, sp, #80	; 0x50
   184aa:	f7fd fb12 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   184ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   184b0:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   184b4:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184b6:	ee18 2a90 	vmov	r2, s17
   184ba:	ee18 1a10 	vmov	r1, s16
   184be:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   184c2:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184c4:	f7ee fe70 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   184c8:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184cc:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184ce:	ee19 2a90 	vmov	r2, s19
   184d2:	ee19 1a10 	vmov	r1, s18
   184d6:	4658      	mov	r0, fp
   184d8:	f7ee fe66 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   184dc:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   184e0:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   184e2:	4643      	mov	r3, r8
   184e4:	462a      	mov	r2, r5
   184e6:	4621      	mov	r1, r4
   184e8:	4638      	mov	r0, r7
   184ea:	f7fd fabc 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   184ee:	45da      	cmp	sl, fp
   184f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   184f2:	bfcc      	ite	gt
   184f4:	f04f 0a00 	movgt.w	sl, #0
   184f8:	f04f 0a01 	movle.w	sl, #1
   184fc:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18500:	f109 0901 	add.w	r9, r9, #1
   18504:	e7b8      	b.n	18478 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   18506:	f108 0801 	add.w	r8, r8, #1
   1850a:	e7ad      	b.n	18468 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1850c:	3501      	adds	r5, #1
   1850e:	e7a2      	b.n	18456 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18510:	3401      	adds	r4, #1
   18512:	e799      	b.n	18448 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   18514:	a806      	add	r0, sp, #24
   18516:	f7fd f9d9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1851a:	b01d      	add	sp, #116	; 0x74
   1851c:	ecbd 8b04 	vpop	{d8-d9}
   18520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018524 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   18524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18528:	ed2d 8b04 	vpush	{d8-d9}
   1852c:	b09d      	sub	sp, #116	; 0x74
   1852e:	4604      	mov	r4, r0
   18530:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   18532:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   18534:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   18536:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   18538:	f7fe fa8e 	bl	16a58 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   1853c:	e9d4 6300 	ldrd	r6, r3, [r4]
   18540:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   18542:	68a3      	ldr	r3, [r4, #8]
   18544:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   18548:	68e3      	ldr	r3, [r4, #12]
   1854a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   1854e:	6923      	ldr	r3, [r4, #16]
   18550:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   18552:	6963      	ldr	r3, [r4, #20]
   18554:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   18558:	69a3      	ldr	r3, [r4, #24]
   1855a:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   1855e:	2400      	movs	r4, #0
   18560:	2100      	movs	r1, #0
   18562:	a806      	add	r0, sp, #24
   18564:	f7fd f9bd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18568:	42a0      	cmp	r0, r4
   1856a:	dd5f      	ble.n	1862c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   1856c:	2500      	movs	r5, #0
   1856e:	af06      	add	r7, sp, #24
   18570:	2101      	movs	r1, #1
   18572:	4638      	mov	r0, r7
   18574:	f7fd f9b5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18578:	42a8      	cmp	r0, r5
   1857a:	dd55      	ble.n	18628 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1857c:	f04f 0800 	mov.w	r8, #0
   18580:	2102      	movs	r1, #2
   18582:	4638      	mov	r0, r7
   18584:	f7fd f9ad 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18588:	4540      	cmp	r0, r8
   1858a:	dd4b      	ble.n	18624 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   1858c:	f04f 0900 	mov.w	r9, #0
   18590:	2103      	movs	r1, #3
   18592:	4638      	mov	r0, r7
   18594:	f7fd f9a5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18598:	4548      	cmp	r0, r9
   1859a:	dd40      	ble.n	1861e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   1859c:	f8cd 9000 	str.w	r9, [sp]
   185a0:	4643      	mov	r3, r8
   185a2:	462a      	mov	r2, r5
   185a4:	4621      	mov	r1, r4
   185a6:	a80c      	add	r0, sp, #48	; 0x30
   185a8:	f7fd fa93 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   185ac:	9b05      	ldr	r3, [sp, #20]
   185ae:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   185b2:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   185b4:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   185b8:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   185ba:	462a      	mov	r2, r5
   185bc:	4643      	mov	r3, r8
   185be:	4621      	mov	r1, r4
   185c0:	a814      	add	r0, sp, #80	; 0x50
   185c2:	f7fd fa86 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   185c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   185c8:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   185cc:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185ce:	ee18 2a90 	vmov	r2, s17
   185d2:	ee18 1a10 	vmov	r1, s16
   185d6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   185da:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185dc:	f7ee fde4 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   185e0:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185e4:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185e6:	ee19 2a90 	vmov	r2, s19
   185ea:	ee19 1a10 	vmov	r1, s18
   185ee:	4658      	mov	r0, fp
   185f0:	f7ee fdda 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   185f4:	f8cd 9000 	str.w	r9, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   185f8:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   185fa:	4643      	mov	r3, r8
   185fc:	462a      	mov	r2, r5
   185fe:	4621      	mov	r1, r4
   18600:	4638      	mov	r0, r7
   18602:	f7fd fa30 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   18606:	45da      	cmp	sl, fp
   18608:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1860a:	bfcc      	ite	gt
   1860c:	f04f 0a00 	movgt.w	sl, #0
   18610:	f04f 0a01 	movle.w	sl, #1
   18614:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   18618:	f109 0901 	add.w	r9, r9, #1
   1861c:	e7b8      	b.n	18590 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   1861e:	f108 0801 	add.w	r8, r8, #1
   18622:	e7ad      	b.n	18580 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   18624:	3501      	adds	r5, #1
   18626:	e7a2      	b.n	1856e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   18628:	3401      	adds	r4, #1
   1862a:	e799      	b.n	18560 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   1862c:	a806      	add	r0, sp, #24
   1862e:	f7fd f94d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   18632:	b01d      	add	sp, #116	; 0x74
   18634:	ecbd 8b04 	vpop	{d8-d9}
   18638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   1863c:	b570      	push	{r4, r5, r6, lr}
   1863e:	4615      	mov	r5, r2
   18640:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   18642:	f7fd f94e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18646:	4631      	mov	r1, r6
   18648:	4604      	mov	r4, r0
   1864a:	4628      	mov	r0, r5
   1864c:	f7fd f949 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18650:	4284      	cmp	r4, r0
   18652:	d001      	beq.n	18658 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   18654:	f005 ffce 	bl	1e5f4 <abort>
}
   18658:	bd70      	pop	{r4, r5, r6, pc}

0001865a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>:
// when optimizng this routine further.
inline void ConcatenationWithScaling(const ConcatenationParams& params,
                                     const RuntimeShape* const* input_shapes,
                                     const uint8* const* input_data,
                                     const RuntimeShape& output_shape,
                                     uint8* output_data) {
   1865a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1865e:	ed2d 8b04 	vpush	{d8-d9}
   18662:	469b      	mov	fp, r3
   18664:	b08f      	sub	sp, #60	; 0x3c
  int axis = params.axis;
  const int32* input_zeropoint = params.input_zeropoint;
   18666:	6843      	ldr	r3, [r0, #4]
  int axis = params.axis;
   18668:	f990 4000 	ldrsb.w	r4, [r0]
  const float* input_scale = params.input_scale;
  int inputs_count = params.inputs_count;
  const int32 output_zeropoint = params.output_zeropoint;
  const float output_scale = params.output_scale;

  const int concat_dimensions = output_shape.DimensionsCount();
   1866c:	f8db 5000 	ldr.w	r5, [fp]
  const int32* input_zeropoint = params.input_zeropoint;
   18670:	9306      	str	r3, [sp, #24]
  const float* input_scale = params.input_scale;
   18672:	6883      	ldr	r3, [r0, #8]
   18674:	9307      	str	r3, [sp, #28]
  int inputs_count = params.inputs_count;
   18676:	8983      	ldrh	r3, [r0, #12]
   18678:	9303      	str	r3, [sp, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   1867a:	42ac      	cmp	r4, r5
  const int32 output_zeropoint = params.output_zeropoint;
   1867c:	6903      	ldr	r3, [r0, #16]
  const float output_scale = params.output_scale;
   1867e:	ed90 9a05 	vldr	s18, [r0, #20]
                                     uint8* output_data) {
   18682:	9105      	str	r1, [sp, #20]
   18684:	9208      	str	r2, [sp, #32]
  const int32 output_zeropoint = params.output_zeropoint;
   18686:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18688:	db01      	blt.n	1868e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x34>
   1868a:	f005 ffb3 	bl	1e5f4 <abort>

  int64_t concat_size = 0;
  for (int i = 0; i < inputs_count; i++) {
   1868e:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
   18692:	2600      	movs	r6, #0
   18694:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18696:	9b03      	ldr	r3, [sp, #12]
   18698:	4598      	cmp	r8, r3
   1869a:	da1f      	bge.n	186dc <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x82>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   1869c:	9b05      	ldr	r3, [sp, #20]
   1869e:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   186a2:	f8da 3000 	ldr.w	r3, [sl]
   186a6:	429d      	cmp	r5, r3
   186a8:	d1ef      	bne.n	1868a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
    for (int j = 0; j < concat_dimensions; j++) {
   186aa:	f04f 0900 	mov.w	r9, #0
   186ae:	45a9      	cmp	r9, r5
   186b0:	da0a      	bge.n	186c8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x6e>
      if (j != axis) {
   186b2:	45a1      	cmp	r9, r4
   186b4:	d005      	beq.n	186c2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x68>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   186b6:	464b      	mov	r3, r9
   186b8:	465a      	mov	r2, fp
   186ba:	4649      	mov	r1, r9
   186bc:	4650      	mov	r0, sl
   186be:	f7ff ffbd 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   186c2:	f109 0901 	add.w	r9, r9, #1
   186c6:	e7f2      	b.n	186ae <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x54>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
   186c8:	4621      	mov	r1, r4
   186ca:	4650      	mov	r0, sl
   186cc:	f7fd f909 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   186d0:	1836      	adds	r6, r6, r0
   186d2:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   186d6:	f108 0801 	add.w	r8, r8, #1
   186da:	e7dc      	b.n	18696 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x3c>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   186dc:	4621      	mov	r1, r4
   186de:	4658      	mov	r0, fp
   186e0:	f7fd f8ff 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   186e4:	17c1      	asrs	r1, r0, #31
   186e6:	42b9      	cmp	r1, r7
   186e8:	bf08      	it	eq
   186ea:	42b0      	cmpeq	r0, r6
   186ec:	d1cd      	bne.n	1868a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
  int64_t outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   186ee:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   186f0:	f04f 0901 	mov.w	r9, #1
   186f4:	f04f 0a00 	mov.w	sl, #0
  for (int i = 0; i < axis; ++i) {
   186f8:	42a6      	cmp	r6, r4
   186fa:	da0d      	bge.n	18718 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xbe>
    outer_size *= output_shape.Dims(i);
   186fc:	4631      	mov	r1, r6
   186fe:	4658      	mov	r0, fp
   18700:	f7fd f8ef 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18704:	17c3      	asrs	r3, r0, #31
   18706:	fb09 f303 	mul.w	r3, r9, r3
   1870a:	fb00 330a 	mla	r3, r0, sl, r3
   1870e:	fba9 9a00 	umull	r9, sl, r9, r0
   18712:	449a      	add	sl, r3
  for (int i = 0; i < axis; ++i) {
   18714:	3601      	adds	r6, #1
   18716:	e7ef      	b.n	186f8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x9e>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
   18718:	2201      	movs	r2, #1
   1871a:	2300      	movs	r3, #0
   1871c:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18720:	1c66      	adds	r6, r4, #1
   18722:	42ae      	cmp	r6, r5
   18724:	d012      	beq.n	1874c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xf2>
    base_inner_size *= output_shape.Dims(i);
   18726:	4631      	mov	r1, r6
   18728:	4658      	mov	r0, fp
   1872a:	f7fd f8da 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1872e:	9900      	ldr	r1, [sp, #0]
   18730:	9a01      	ldr	r2, [sp, #4]
   18732:	17c3      	asrs	r3, r0, #31
   18734:	434b      	muls	r3, r1
   18736:	fb00 3302 	mla	r3, r0, r2, r3
   1873a:	fba1 1200 	umull	r1, r2, r1, r0
   1873e:	e9cd 1200 	strd	r1, r2, [sp]
   18742:	9a01      	ldr	r2, [sp, #4]
   18744:	4413      	add	r3, r2
   18746:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18748:	3601      	adds	r6, #1
   1874a:	e7ea      	b.n	18722 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xc8>
  }

  const float inverse_output_scale = 1.f / output_scale;
   1874c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   18750:	eec7 9a89 	vdiv.f32	s19, s15, s18
  uint8* output_ptr = output_data;
  for (int k = 0; k < outer_size; k++) {
   18754:	f04f 0800 	mov.w	r8, #0
   18758:	4642      	mov	r2, r8
   1875a:	17d3      	asrs	r3, r2, #31
   1875c:	45c8      	cmp	r8, r9
   1875e:	eb73 030a 	sbcs.w	r3, r3, sl
   18762:	da6a      	bge.n	1883a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1e0>
   18764:	f8dd b01c 	ldr.w	fp, [sp, #28]
    for (int i = 0; i < inputs_count; ++i) {
   18768:	2500      	movs	r5, #0
   1876a:	9b03      	ldr	r3, [sp, #12]
   1876c:	429d      	cmp	r5, r3
   1876e:	da61      	bge.n	18834 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1da>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18770:	9b05      	ldr	r3, [sp, #20]
   18772:	4621      	mov	r1, r4
   18774:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   18778:	f7fd f8b3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1877c:	9b00      	ldr	r3, [sp, #0]
      const uint8* input_ptr = input_data[i] + k * copy_size;
      if (input_zeropoint[i] == output_zeropoint &&
   1877e:	9a06      	ldr	r2, [sp, #24]
   18780:	9904      	ldr	r1, [sp, #16]
   18782:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   18786:	ecfb 7a01 	vldmia	fp!, {s15}
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   1878a:	fb00 f603 	mul.w	r6, r0, r3
      const uint8* input_ptr = input_data[i] + k * copy_size;
   1878e:	9b08      	ldr	r3, [sp, #32]
   18790:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      if (input_zeropoint[i] == output_zeropoint &&
   18794:	428a      	cmp	r2, r1
      const uint8* input_ptr = input_data[i] + k * copy_size;
   18796:	fb06 3308 	mla	r3, r6, r8, r3
      if (input_zeropoint[i] == output_zeropoint &&
   1879a:	d10e      	bne.n	187ba <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x160>
   1879c:	eef4 7a49 	vcmp.f32	s15, s18
   187a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   187a4:	d109      	bne.n	187ba <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x160>
          input_scale[i] == output_scale) {
        memcpy(output_ptr, input_ptr, copy_size);
   187a6:	981c      	ldr	r0, [sp, #112]	; 0x70
   187a8:	4632      	mov	r2, r6
   187aa:	4619      	mov	r1, r3
   187ac:	f005 ff37 	bl	1e61e <memcpy>
                                output_zeropoint;
          output_ptr[j] = static_cast<uint8_t>(
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
        }
      }
      output_ptr += copy_size;
   187b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   187b2:	4433      	add	r3, r6
   187b4:	931c      	str	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   187b6:	3501      	adds	r5, #1
   187b8:	e7d7      	b.n	1876a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x110>
        const float bias = -input_zeropoint[i] * scale;
   187ba:	4252      	negs	r2, r2
        const float scale = input_scale[i] * inverse_output_scale;
   187bc:	ee67 8aa9 	vmul.f32	s17, s15, s19
        const float bias = -input_zeropoint[i] * scale;
   187c0:	ee07 2a90 	vmov	s15, r2
   187c4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (int j = 0; j < copy_size; ++j) {
   187c8:	2700      	movs	r7, #0
   187ca:	42b7      	cmp	r7, r6
   187cc:	daf0      	bge.n	187b0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x156>
                                    input_ptr[j] * scale + bias)) +
   187ce:	5dda      	ldrb	r2, [r3, r7]
   187d0:	9309      	str	r3, [sp, #36]	; 0x24
   187d2:	ee07 2a90 	vmov	s15, r2
   187d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   187da:	ee77 7a88 	vadd.f32	s15, s15, s16
   187de:	ee67 7aa8 	vmul.f32	s15, s15, s17
   187e2:	ee17 0a90 	vmov	r0, s15
   187e6:	f7e8 fa3f 	bl	c68 <__aeabi_f2d>
   187ea:	ec41 0b10 	vmov	d0, r0, r1
   187ee:	f7f9 fbc9 	bl	11f84 <round>
   187f2:	ec51 0b10 	vmov	r0, r1, d0
   187f6:	f7e8 fd51 	bl	129c <__aeabi_d2f>
   187fa:	ee07 0a90 	vmov	s15, r0
   187fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                                    input_ptr[j] * scale + bias)) +
   18802:	9b04      	ldr	r3, [sp, #16]
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   18804:	ee17 0a90 	vmov	r0, s15
                                    input_ptr[j] * scale + bias)) +
   18808:	4418      	add	r0, r3
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   1880a:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   1880c:	28fe      	cmp	r0, #254	; 0xfe
   1880e:	930c      	str	r3, [sp, #48]	; 0x30
	return __b;
   18810:	aa0b      	add	r2, sp, #44	; 0x2c
   18812:	ab0c      	add	r3, sp, #48	; 0x30
   18814:	bfcc      	ite	gt
   18816:	4619      	movgt	r1, r3
   18818:	4611      	movle	r1, r2
                                output_zeropoint;
   1881a:	900b      	str	r0, [sp, #44]	; 0x2c
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   1881c:	2000      	movs	r0, #0
   1881e:	900d      	str	r0, [sp, #52]	; 0x34
      if (__a < __b)
   18820:	6808      	ldr	r0, [r1, #0]
   18822:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18824:	2800      	cmp	r0, #0
	return __b;
   18826:	bfb8      	it	lt
   18828:	a90d      	addlt	r1, sp, #52	; 0x34
          output_ptr[j] = static_cast<uint8_t>(
   1882a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1882c:	6809      	ldr	r1, [r1, #0]
   1882e:	55c1      	strb	r1, [r0, r7]
        for (int j = 0; j < copy_size; ++j) {
   18830:	3701      	adds	r7, #1
   18832:	e7ca      	b.n	187ca <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x170>
  for (int k = 0; k < outer_size; k++) {
   18834:	f108 0801 	add.w	r8, r8, #1
   18838:	e78e      	b.n	18758 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xfe>
    }
  }
}
   1883a:	b00f      	add	sp, #60	; 0x3c
   1883c:	ecbd 8b04 	vpop	{d8-d9}
   18840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>:
inline void GetAllTensorShapes(const TfLiteContext& context,
   18844:	b5f0      	push	{r4, r5, r6, r7, lr}
   18846:	4607      	mov	r7, r0
   18848:	b087      	sub	sp, #28
   1884a:	460e      	mov	r6, r1
   1884c:	4614      	mov	r4, r2
   1884e:	2501      	movs	r5, #1
  for (int i = 0; i < tensor_list.size; ++i) {
   18850:	6832      	ldr	r2, [r6, #0]
   18852:	1e6b      	subs	r3, r5, #1
   18854:	429a      	cmp	r2, r3
   18856:	dd15      	ble.n	18884 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0x40>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18858:	683b      	ldr	r3, [r7, #0]
   1885a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
    RuntimeShape shape = GetTensorShape(t);
   1885e:	4668      	mov	r0, sp
   18860:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   18864:	f7fd f877 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
   18868:	9900      	ldr	r1, [sp, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1886a:	2905      	cmp	r1, #5
   1886c:	4620      	mov	r0, r4
   1886e:	bfcc      	ite	gt
   18870:	9a01      	ldrgt	r2, [sp, #4]
   18872:	aa01      	addle	r2, sp, #4
   18874:	f7fe f830 	bl	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
    RuntimeShape shape = GetTensorShape(t);
   18878:	4668      	mov	r0, sp
   1887a:	f7fd f827 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < tensor_list.size; ++i) {
   1887e:	3501      	adds	r5, #1
   18880:	3418      	adds	r4, #24
   18882:	e7e5      	b.n	18850 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0xc>
}
   18884:	b007      	add	sp, #28
   18886:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>:
                              const RuntimeShape* pointers[]) {
   18888:	b530      	push	{r4, r5, lr}
  for (size_t i = 0; i < num; ++i) {
   1888a:	2300      	movs	r3, #0
    pointers[i] = &shapes[i];
   1888c:	2518      	movs	r5, #24
  for (size_t i = 0; i < num; ++i) {
   1888e:	428b      	cmp	r3, r1
   18890:	d005      	beq.n	1889e <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x16>
    pointers[i] = &shapes[i];
   18892:	fb05 0403 	mla	r4, r5, r3, r0
   18896:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  for (size_t i = 0; i < num; ++i) {
   1889a:	3301      	adds	r3, #1
   1889c:	e7f7      	b.n	1888e <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x6>
}
   1889e:	bd30      	pop	{r4, r5, pc}

000188a0 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>:
void EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {
   188a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   188a2:	b0f3      	sub	sp, #460	; 0x1cc
   188a4:	4604      	mov	r4, r0
   188a6:	460e      	mov	r6, r1
   188a8:	ab36      	add	r3, sp, #216	; 0xd8
   188aa:	250a      	movs	r5, #10
  RuntimeShape() : size_(0) {}
   188ac:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   188ae:	3d01      	subs	r5, #1
   188b0:	f843 2b18 	str.w	r2, [r3], #24
   188b4:	d1fb      	bne.n	188ae <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   188b6:	f104 0008 	add.w	r0, r4, #8
   188ba:	6831      	ldr	r1, [r6, #0]
   188bc:	aa36      	add	r2, sp, #216	; 0xd8
   188be:	f7ff ffc1 	bl	18844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   188c2:	6833      	ldr	r3, [r6, #0]
   188c4:	aa0e      	add	r2, sp, #56	; 0x38
   188c6:	6819      	ldr	r1, [r3, #0]
   188c8:	a836      	add	r0, sp, #216	; 0xd8
   188ca:	f7ff ffdd 	bl	18888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
   188ce:	6837      	ldr	r7, [r6, #0]
inline void GetAllTensorData(const TfLiteContext& context,
   188d0:	68a4      	ldr	r4, [r4, #8]
  for (int i = 0; i < tensor_list.size; ++i) {
   188d2:	463a      	mov	r2, r7
    all_data[i] = GetTensorData<T>(t);
   188d4:	a818      	add	r0, sp, #96	; 0x60
  for (int i = 0; i < tensor_list.size; ++i) {
   188d6:	f852 cb04 	ldr.w	ip, [r2], #4
   188da:	4611      	mov	r1, r2
   188dc:	45ac      	cmp	ip, r5
   188de:	dc13      	bgt.n	18908 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x68>
   188e0:	a822      	add	r0, sp, #136	; 0x88
  for (int i = 0; i < tensor_list.size; ++i) {
   188e2:	2300      	movs	r3, #0
   188e4:	4684      	mov	ip, r0
   188e6:	ad2c      	add	r5, sp, #176	; 0xb0
   188e8:	6839      	ldr	r1, [r7, #0]
   188ea:	4299      	cmp	r1, r3
   188ec:	dd16      	ble.n	1891c <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x7c>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   188ee:	f852 1b04 	ldr.w	r1, [r2], #4
   188f2:	eb04 1181 	add.w	r1, r4, r1, lsl #6
    scales[i] = t->params.scale;
   188f6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    zero_points[i] = t->params.zero_point;
   188fa:	6909      	ldr	r1, [r1, #16]
   188fc:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    scales[i] = t->params.scale;
   18900:	f840 eb04 	str.w	lr, [r0], #4
  for (int i = 0; i < tensor_list.size; ++i) {
   18904:	3301      	adds	r3, #1
   18906:	e7ef      	b.n	188e8 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x48>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18908:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1890c:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18910:	bf18      	it	ne
   18912:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18914:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18918:	3501      	adds	r5, #1
   1891a:	e7df      	b.n	188dc <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x3c>
   1891c:	6873      	ldr	r3, [r6, #4]
   1891e:	685b      	ldr	r3, [r3, #4]
   18920:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18924:	6973      	ldr	r3, [r6, #20]
   18926:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   18928:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1892a:	bfbc      	itt	lt
   1892c:	68a2      	ldrlt	r2, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   1892e:	6812      	ldrlt	r2, [r2, #0]
  op_params.inputs_count = NumInputs(node);
   18930:	f8ad 1014 	strh.w	r1, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18934:	bfb8      	it	lt
   18936:	189b      	addlt	r3, r3, r2
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18938:	f88d 3008 	strb.w	r3, [sp, #8]
  op_params.output_zeropoint = output->params.zero_point;
   1893c:	6923      	ldr	r3, [r4, #16]
   1893e:	9306      	str	r3, [sp, #24]
                                          inputs_data, GetTensorShape(output),
   18940:	4621      	mov	r1, r4
  op_params.output_scale = output->params.scale;
   18942:	68e3      	ldr	r3, [r4, #12]
   18944:	9307      	str	r3, [sp, #28]
                                          inputs_data, GetTensorShape(output),
   18946:	a808      	add	r0, sp, #32
  op_params.input_scale = inputs_scale;
   18948:	e9cd 5c03 	strd	r5, ip, [sp, #12]
                                          inputs_data, GetTensorShape(output),
   1894c:	f7fd f803 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
   18950:	6863      	ldr	r3, [r4, #4]
   18952:	9300      	str	r3, [sp, #0]
   18954:	aa18      	add	r2, sp, #96	; 0x60
   18956:	ab08      	add	r3, sp, #32
   18958:	a90e      	add	r1, sp, #56	; 0x38
   1895a:	a802      	add	r0, sp, #8
   1895c:	f7ff fe7d 	bl	1865a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>
                                          inputs_data, GetTensorShape(output),
   18960:	a808      	add	r0, sp, #32
   18962:	f7fc ffb3 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   18966:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18968:	2518      	movs	r5, #24
   1896a:	ab36      	add	r3, sp, #216	; 0xd8
   1896c:	fb05 3004 	mla	r0, r5, r4, r3
   18970:	f7fc ffac 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   18974:	3c01      	subs	r4, #1
   18976:	d2f8      	bcs.n	1896a <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xca>
}
   18978:	b073      	add	sp, #460	; 0x1cc
   1897a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001897c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   1897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18980:	469b      	mov	fp, r3
  int axis = params.axis;
   18982:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18986:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   1898a:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   1898c:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   1898e:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18990:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18994:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18996:	db01      	blt.n	1899c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18998:	f005 fe2c 	bl	1e5f4 <abort>
  for (int i = 0; i < inputs_count; i++) {
   1899c:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   1899e:	2600      	movs	r6, #0
   189a0:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   189a2:	9b00      	ldr	r3, [sp, #0]
   189a4:	429c      	cmp	r4, r3
   189a6:	da1d      	bge.n	189e4 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   189a8:	9b01      	ldr	r3, [sp, #4]
   189aa:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   189ae:	682b      	ldr	r3, [r5, #0]
   189b0:	4599      	cmp	r9, r3
   189b2:	d1f1      	bne.n	18998 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   189b4:	f04f 0a00 	mov.w	sl, #0
   189b8:	45ca      	cmp	sl, r9
   189ba:	da0a      	bge.n	189d2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   189bc:	45c2      	cmp	sl, r8
   189be:	d005      	beq.n	189cc <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   189c0:	4653      	mov	r3, sl
   189c2:	465a      	mov	r2, fp
   189c4:	4651      	mov	r1, sl
   189c6:	4628      	mov	r0, r5
   189c8:	f7ff fe38 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   189cc:	f10a 0a01 	add.w	sl, sl, #1
   189d0:	e7f2      	b.n	189b8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   189d2:	4641      	mov	r1, r8
   189d4:	4628      	mov	r0, r5
   189d6:	f7fc ff84 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   189da:	1836      	adds	r6, r6, r0
   189dc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   189e0:	3401      	adds	r4, #1
   189e2:	e7de      	b.n	189a2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   189e4:	4641      	mov	r1, r8
   189e6:	4658      	mov	r0, fp
   189e8:	f7fc ff7b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   189ec:	17c1      	asrs	r1, r0, #31
   189ee:	42b9      	cmp	r1, r7
   189f0:	bf08      	it	eq
   189f2:	42b0      	cmpeq	r0, r6
   189f4:	d1d0      	bne.n	18998 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   189f6:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   189f8:	2401      	movs	r4, #1
   189fa:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   189fc:	4546      	cmp	r6, r8
   189fe:	da0c      	bge.n	18a1a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18a00:	4631      	mov	r1, r6
   18a02:	4658      	mov	r0, fp
   18a04:	f7fc ff6d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18a08:	17c1      	asrs	r1, r0, #31
   18a0a:	4361      	muls	r1, r4
   18a0c:	fb00 1105 	mla	r1, r0, r5, r1
   18a10:	fba4 4500 	umull	r4, r5, r4, r0
   18a14:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18a16:	3601      	adds	r6, #1
   18a18:	e7f0      	b.n	189fc <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18a1a:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18a1e:	2601      	movs	r6, #1
   18a20:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18a22:	45ca      	cmp	sl, r9
   18a24:	d00d      	beq.n	18a42 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18a26:	4651      	mov	r1, sl
   18a28:	4658      	mov	r0, fp
   18a2a:	f7fc ff5a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18a2e:	17c3      	asrs	r3, r0, #31
   18a30:	4373      	muls	r3, r6
   18a32:	fb00 3307 	mla	r3, r0, r7, r3
   18a36:	fba6 6700 	umull	r6, r7, r6, r0
   18a3a:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18a3c:	f10a 0a01 	add.w	sl, sl, #1
   18a40:	e7ef      	b.n	18a22 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18a42:	f04f 0a00 	mov.w	sl, #0
   18a46:	4650      	mov	r0, sl
   18a48:	17c1      	asrs	r1, r0, #31
   18a4a:	45a2      	cmp	sl, r4
   18a4c:	eb71 0305 	sbcs.w	r3, r1, r5
   18a50:	da21      	bge.n	18a96 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18a52:	f04f 0900 	mov.w	r9, #0
   18a56:	9b00      	ldr	r3, [sp, #0]
   18a58:	4599      	cmp	r9, r3
   18a5a:	da19      	bge.n	18a90 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18a5c:	9b01      	ldr	r3, [sp, #4]
   18a5e:	4641      	mov	r1, r8
   18a60:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18a64:	f7fc ff3d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a68:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18a6a:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a6c:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18a70:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18a72:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18a76:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   18a7a:	980e      	ldr	r0, [sp, #56]	; 0x38
   18a7c:	9203      	str	r2, [sp, #12]
   18a7e:	f005 fdce 	bl	1e61e <memcpy>
      output_ptr += copy_size;
   18a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18a84:	9a03      	ldr	r2, [sp, #12]
   18a86:	4413      	add	r3, r2
   18a88:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18a8a:	f109 0901 	add.w	r9, r9, #1
   18a8e:	e7e2      	b.n	18a56 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18a90:	f10a 0a01 	add.w	sl, sl, #1
   18a94:	e7d7      	b.n	18a46 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18a96:	b005      	add	sp, #20
   18a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018a9c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a9e:	b0df      	sub	sp, #380	; 0x17c
   18aa0:	4604      	mov	r4, r0
   18aa2:	460e      	mov	r6, r1
   18aa4:	ab22      	add	r3, sp, #136	; 0x88
   18aa6:	250a      	movs	r5, #10
   18aa8:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18aaa:	3d01      	subs	r5, #1
   18aac:	f843 2b18 	str.w	r2, [r3], #24
   18ab0:	d1fb      	bne.n	18aaa <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18ab2:	f104 0008 	add.w	r0, r4, #8
   18ab6:	6831      	ldr	r1, [r6, #0]
   18ab8:	aa22      	add	r2, sp, #136	; 0x88
   18aba:	f7ff fec3 	bl	18844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18abe:	6833      	ldr	r3, [r6, #0]
   18ac0:	aa0e      	add	r2, sp, #56	; 0x38
   18ac2:	6819      	ldr	r1, [r3, #0]
   18ac4:	a822      	add	r0, sp, #136	; 0x88
   18ac6:	f7ff fedf 	bl	18888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18aca:	6831      	ldr	r1, [r6, #0]
   18acc:	68a4      	ldr	r4, [r4, #8]
   18ace:	f851 2b04 	ldr.w	r2, [r1], #4
   18ad2:	af18      	add	r7, sp, #96	; 0x60
   18ad4:	42aa      	cmp	r2, r5
   18ad6:	dd09      	ble.n	18aec <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18ad8:	f851 3b04 	ldr.w	r3, [r1], #4
   18adc:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18ae0:	bf18      	it	ne
   18ae2:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18ae4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18ae8:	3501      	adds	r5, #1
   18aea:	e7f3      	b.n	18ad4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18aec:	6873      	ldr	r3, [r6, #4]
   18aee:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18af0:	6973      	ldr	r3, [r6, #20]
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18af8:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18afa:	bfbc      	itt	lt
   18afc:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18afe:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18b00:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18b04:	bfb8      	it	lt
   18b06:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18b08:	a808      	add	r0, sp, #32
   18b0a:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18b0c:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18b10:	f7fc ff21 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18b14:	b104      	cbz	r4, 18b18 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18b16:	6864      	ldr	r4, [r4, #4]
   18b18:	9400      	str	r4, [sp, #0]
   18b1a:	ab08      	add	r3, sp, #32
   18b1c:	463a      	mov	r2, r7
   18b1e:	a90e      	add	r1, sp, #56	; 0x38
   18b20:	a802      	add	r0, sp, #8
   18b22:	f7ff ff2b 	bl	1897c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18b26:	a808      	add	r0, sp, #32
   18b28:	f7fc fed0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18b2c:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18b2e:	2518      	movs	r5, #24
   18b30:	ab22      	add	r3, sp, #136	; 0x88
   18b32:	fb05 3004 	mla	r0, r5, r4, r3
   18b36:	f7fc fec9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   18b3a:	3c01      	subs	r4, #1
   18b3c:	d2f8      	bcs.n	18b30 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18b3e:	b05f      	add	sp, #380	; 0x17c
   18b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018b42 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b46:	469b      	mov	fp, r3
  int axis = params.axis;
   18b48:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18b4c:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18b50:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18b52:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18b54:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18b56:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18b5a:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18b5c:	db01      	blt.n	18b62 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18b5e:	f005 fd49 	bl	1e5f4 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18b62:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18b64:	2600      	movs	r6, #0
   18b66:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18b68:	9b00      	ldr	r3, [sp, #0]
   18b6a:	429c      	cmp	r4, r3
   18b6c:	da1d      	bge.n	18baa <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18b6e:	9b01      	ldr	r3, [sp, #4]
   18b70:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18b74:	682b      	ldr	r3, [r5, #0]
   18b76:	4599      	cmp	r9, r3
   18b78:	d1f1      	bne.n	18b5e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18b7a:	f04f 0a00 	mov.w	sl, #0
   18b7e:	45ca      	cmp	sl, r9
   18b80:	da0a      	bge.n	18b98 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18b82:	45c2      	cmp	sl, r8
   18b84:	d005      	beq.n	18b92 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18b86:	4653      	mov	r3, sl
   18b88:	465a      	mov	r2, fp
   18b8a:	4651      	mov	r1, sl
   18b8c:	4628      	mov	r0, r5
   18b8e:	f7ff fd55 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18b92:	f10a 0a01 	add.w	sl, sl, #1
   18b96:	e7f2      	b.n	18b7e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18b98:	4641      	mov	r1, r8
   18b9a:	4628      	mov	r0, r5
   18b9c:	f7fc fea1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18ba0:	1836      	adds	r6, r6, r0
   18ba2:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18ba6:	3401      	adds	r4, #1
   18ba8:	e7de      	b.n	18b68 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18baa:	4641      	mov	r1, r8
   18bac:	4658      	mov	r0, fp
   18bae:	f7fc fe98 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18bb2:	17c1      	asrs	r1, r0, #31
   18bb4:	42b9      	cmp	r1, r7
   18bb6:	bf08      	it	eq
   18bb8:	42b0      	cmpeq	r0, r6
   18bba:	d1d0      	bne.n	18b5e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18bbc:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18bbe:	2401      	movs	r4, #1
   18bc0:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18bc2:	4546      	cmp	r6, r8
   18bc4:	da0c      	bge.n	18be0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18bc6:	4631      	mov	r1, r6
   18bc8:	4658      	mov	r0, fp
   18bca:	f7fc fe8a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18bce:	17c1      	asrs	r1, r0, #31
   18bd0:	4361      	muls	r1, r4
   18bd2:	fb00 1105 	mla	r1, r0, r5, r1
   18bd6:	fba4 4500 	umull	r4, r5, r4, r0
   18bda:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18bdc:	3601      	adds	r6, #1
   18bde:	e7f0      	b.n	18bc2 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18be0:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18be4:	2601      	movs	r6, #1
   18be6:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18be8:	45ca      	cmp	sl, r9
   18bea:	d00d      	beq.n	18c08 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18bec:	4651      	mov	r1, sl
   18bee:	4658      	mov	r0, fp
   18bf0:	f7fc fe77 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18bf4:	17c3      	asrs	r3, r0, #31
   18bf6:	4373      	muls	r3, r6
   18bf8:	fb00 3307 	mla	r3, r0, r7, r3
   18bfc:	fba6 6700 	umull	r6, r7, r6, r0
   18c00:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18c02:	f10a 0a01 	add.w	sl, sl, #1
   18c06:	e7ef      	b.n	18be8 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18c08:	f04f 0a00 	mov.w	sl, #0
   18c0c:	4650      	mov	r0, sl
   18c0e:	17c1      	asrs	r1, r0, #31
   18c10:	45a2      	cmp	sl, r4
   18c12:	eb71 0305 	sbcs.w	r3, r1, r5
   18c16:	da21      	bge.n	18c5c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18c18:	f04f 0900 	mov.w	r9, #0
   18c1c:	9b00      	ldr	r3, [sp, #0]
   18c1e:	4599      	cmp	r9, r3
   18c20:	da19      	bge.n	18c56 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18c22:	9b01      	ldr	r3, [sp, #4]
   18c24:	4641      	mov	r1, r8
   18c26:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18c2a:	f7fc fe5a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c2e:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18c30:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c32:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18c36:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18c38:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18c3c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   18c40:	980e      	ldr	r0, [sp, #56]	; 0x38
   18c42:	9203      	str	r2, [sp, #12]
   18c44:	f005 fceb 	bl	1e61e <memcpy>
      output_ptr += copy_size;
   18c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c4a:	9a03      	ldr	r2, [sp, #12]
   18c4c:	4413      	add	r3, r2
   18c4e:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18c50:	f109 0901 	add.w	r9, r9, #1
   18c54:	e7e2      	b.n	18c1c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18c56:	f10a 0a01 	add.w	sl, sl, #1
   18c5a:	e7d7      	b.n	18c0c <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18c5c:	b005      	add	sp, #20
   18c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018c62 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18c62:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c64:	b0df      	sub	sp, #380	; 0x17c
   18c66:	4604      	mov	r4, r0
   18c68:	460e      	mov	r6, r1
   18c6a:	ab22      	add	r3, sp, #136	; 0x88
   18c6c:	250a      	movs	r5, #10
   18c6e:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18c70:	3d01      	subs	r5, #1
   18c72:	f843 2b18 	str.w	r2, [r3], #24
   18c76:	d1fb      	bne.n	18c70 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18c78:	f104 0008 	add.w	r0, r4, #8
   18c7c:	6831      	ldr	r1, [r6, #0]
   18c7e:	aa22      	add	r2, sp, #136	; 0x88
   18c80:	f7ff fde0 	bl	18844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18c84:	6833      	ldr	r3, [r6, #0]
   18c86:	aa0e      	add	r2, sp, #56	; 0x38
   18c88:	6819      	ldr	r1, [r3, #0]
   18c8a:	a822      	add	r0, sp, #136	; 0x88
   18c8c:	f7ff fdfc 	bl	18888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18c90:	6831      	ldr	r1, [r6, #0]
   18c92:	68a4      	ldr	r4, [r4, #8]
   18c94:	f851 2b04 	ldr.w	r2, [r1], #4
   18c98:	af18      	add	r7, sp, #96	; 0x60
   18c9a:	42aa      	cmp	r2, r5
   18c9c:	dd09      	ble.n	18cb2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18c9e:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18ca2:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18ca6:	bf18      	it	ne
   18ca8:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18caa:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18cae:	3501      	adds	r5, #1
   18cb0:	e7f3      	b.n	18c9a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18cb2:	6873      	ldr	r3, [r6, #4]
   18cb4:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18cb6:	6973      	ldr	r3, [r6, #20]
   18cb8:	681b      	ldr	r3, [r3, #0]
   18cba:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18cbe:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18cc0:	bfbc      	itt	lt
   18cc2:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18cc4:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18cc6:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18cca:	bfb8      	it	lt
   18ccc:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cce:	a808      	add	r0, sp, #32
   18cd0:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18cd2:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cd6:	f7fc fe3e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18cda:	b104      	cbz	r4, 18cde <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18cdc:	6864      	ldr	r4, [r4, #4]
   18cde:	9400      	str	r4, [sp, #0]
   18ce0:	ab08      	add	r3, sp, #32
   18ce2:	463a      	mov	r2, r7
   18ce4:	a90e      	add	r1, sp, #56	; 0x38
   18ce6:	a802      	add	r0, sp, #8
   18ce8:	f7ff ff2b 	bl	18b42 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18cec:	a808      	add	r0, sp, #32
   18cee:	f7fc fded 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18cf2:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18cf4:	2518      	movs	r5, #24
   18cf6:	ab22      	add	r3, sp, #136	; 0x88
   18cf8:	fb05 3004 	mla	r0, r5, r4, r3
   18cfc:	f7fc fde6 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   18d00:	3c01      	subs	r4, #1
   18d02:	d2f8      	bcs.n	18cf6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18d04:	b05f      	add	sp, #380	; 0x17c
   18d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018d08 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d0c:	469b      	mov	fp, r3
  int axis = params.axis;
   18d0e:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18d12:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18d16:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18d18:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18d1a:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18d1c:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18d20:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18d22:	db01      	blt.n	18d28 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18d24:	f005 fc66 	bl	1e5f4 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18d28:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18d2a:	2600      	movs	r6, #0
   18d2c:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18d2e:	9b00      	ldr	r3, [sp, #0]
   18d30:	429c      	cmp	r4, r3
   18d32:	da1d      	bge.n	18d70 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18d34:	9b01      	ldr	r3, [sp, #4]
   18d36:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18d3a:	682b      	ldr	r3, [r5, #0]
   18d3c:	4599      	cmp	r9, r3
   18d3e:	d1f1      	bne.n	18d24 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18d40:	f04f 0a00 	mov.w	sl, #0
   18d44:	45ca      	cmp	sl, r9
   18d46:	da0a      	bge.n	18d5e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18d48:	45c2      	cmp	sl, r8
   18d4a:	d005      	beq.n	18d58 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18d4c:	4653      	mov	r3, sl
   18d4e:	465a      	mov	r2, fp
   18d50:	4651      	mov	r1, sl
   18d52:	4628      	mov	r0, r5
   18d54:	f7ff fc72 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18d58:	f10a 0a01 	add.w	sl, sl, #1
   18d5c:	e7f2      	b.n	18d44 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18d5e:	4641      	mov	r1, r8
   18d60:	4628      	mov	r0, r5
   18d62:	f7fc fdbe 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d66:	1836      	adds	r6, r6, r0
   18d68:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18d6c:	3401      	adds	r4, #1
   18d6e:	e7de      	b.n	18d2e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18d70:	4641      	mov	r1, r8
   18d72:	4658      	mov	r0, fp
   18d74:	f7fc fdb5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d78:	17c1      	asrs	r1, r0, #31
   18d7a:	42b9      	cmp	r1, r7
   18d7c:	bf08      	it	eq
   18d7e:	42b0      	cmpeq	r0, r6
   18d80:	d1d0      	bne.n	18d24 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18d82:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18d84:	2401      	movs	r4, #1
   18d86:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18d88:	4546      	cmp	r6, r8
   18d8a:	da0c      	bge.n	18da6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18d8c:	4631      	mov	r1, r6
   18d8e:	4658      	mov	r0, fp
   18d90:	f7fc fda7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18d94:	17c1      	asrs	r1, r0, #31
   18d96:	4361      	muls	r1, r4
   18d98:	fb00 1105 	mla	r1, r0, r5, r1
   18d9c:	fba4 4500 	umull	r4, r5, r4, r0
   18da0:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18da2:	3601      	adds	r6, #1
   18da4:	e7f0      	b.n	18d88 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18da6:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18daa:	2601      	movs	r6, #1
   18dac:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18dae:	45ca      	cmp	sl, r9
   18db0:	d00d      	beq.n	18dce <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18db2:	4651      	mov	r1, sl
   18db4:	4658      	mov	r0, fp
   18db6:	f7fc fd94 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18dba:	17c3      	asrs	r3, r0, #31
   18dbc:	4373      	muls	r3, r6
   18dbe:	fb00 3307 	mla	r3, r0, r7, r3
   18dc2:	fba6 6700 	umull	r6, r7, r6, r0
   18dc6:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18dc8:	f10a 0a01 	add.w	sl, sl, #1
   18dcc:	e7ef      	b.n	18dae <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18dce:	f04f 0a00 	mov.w	sl, #0
   18dd2:	4650      	mov	r0, sl
   18dd4:	17c1      	asrs	r1, r0, #31
   18dd6:	45a2      	cmp	sl, r4
   18dd8:	eb71 0305 	sbcs.w	r3, r1, r5
   18ddc:	da1f      	bge.n	18e1e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
    for (int i = 0; i < inputs_count; ++i) {
   18dde:	f04f 0900 	mov.w	r9, #0
   18de2:	9b00      	ldr	r3, [sp, #0]
   18de4:	4599      	cmp	r9, r3
   18de6:	da17      	bge.n	18e18 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x110>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18de8:	9b01      	ldr	r3, [sp, #4]
   18dea:	4641      	mov	r1, r8
   18dec:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18df0:	f7fc fd77 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18df4:	9b02      	ldr	r3, [sp, #8]
   18df6:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18dfa:	fb00 f206 	mul.w	r2, r0, r6
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18dfe:	fb02 110a 	mla	r1, r2, sl, r1
   18e02:	980e      	ldr	r0, [sp, #56]	; 0x38
   18e04:	9203      	str	r2, [sp, #12]
   18e06:	f005 fc0a 	bl	1e61e <memcpy>
      output_ptr += copy_size;
   18e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18e0c:	9a03      	ldr	r2, [sp, #12]
   18e0e:	4413      	add	r3, r2
   18e10:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18e12:	f109 0901 	add.w	r9, r9, #1
   18e16:	e7e4      	b.n	18de2 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18e18:	f10a 0a01 	add.w	sl, sl, #1
   18e1c:	e7d9      	b.n	18dd2 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18e1e:	b005      	add	sp, #20
   18e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018e24 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e26:	b0df      	sub	sp, #380	; 0x17c
   18e28:	4604      	mov	r4, r0
   18e2a:	460e      	mov	r6, r1
   18e2c:	ab22      	add	r3, sp, #136	; 0x88
   18e2e:	250a      	movs	r5, #10
   18e30:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18e32:	3d01      	subs	r5, #1
   18e34:	f843 2b18 	str.w	r2, [r3], #24
   18e38:	d1fb      	bne.n	18e32 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   18e3a:	f104 0008 	add.w	r0, r4, #8
   18e3e:	6831      	ldr	r1, [r6, #0]
   18e40:	aa22      	add	r2, sp, #136	; 0x88
   18e42:	f7ff fcff 	bl	18844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   18e46:	6833      	ldr	r3, [r6, #0]
   18e48:	aa0e      	add	r2, sp, #56	; 0x38
   18e4a:	6819      	ldr	r1, [r3, #0]
   18e4c:	a822      	add	r0, sp, #136	; 0x88
   18e4e:	f7ff fd1b 	bl	18888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   18e52:	6831      	ldr	r1, [r6, #0]
   18e54:	68a4      	ldr	r4, [r4, #8]
   18e56:	f851 2b04 	ldr.w	r2, [r1], #4
   18e5a:	af18      	add	r7, sp, #96	; 0x60
   18e5c:	42aa      	cmp	r2, r5
   18e5e:	dd09      	ble.n	18e74 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   18e60:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e64:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   18e68:	bf18      	it	ne
   18e6a:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   18e6c:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   18e70:	3501      	adds	r5, #1
   18e72:	e7f3      	b.n	18e5c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   18e74:	6873      	ldr	r3, [r6, #4]
   18e76:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18e78:	6973      	ldr	r3, [r6, #20]
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   18e80:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   18e82:	bfbc      	itt	lt
   18e84:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   18e86:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   18e88:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   18e8c:	bfb8      	it	lt
   18e8e:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18e90:	a808      	add	r0, sp, #32
   18e92:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   18e94:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18e98:	f7fc fd5d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e9c:	b104      	cbz	r4, 18ea0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x7c>
   18e9e:	6864      	ldr	r4, [r4, #4]
   18ea0:	9400      	str	r4, [sp, #0]
   18ea2:	ab08      	add	r3, sp, #32
   18ea4:	463a      	mov	r2, r7
   18ea6:	a90e      	add	r1, sp, #56	; 0x38
   18ea8:	a802      	add	r0, sp, #8
   18eaa:	f7ff ff2d 	bl	18d08 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   18eae:	a808      	add	r0, sp, #32
   18eb0:	f7fc fd0c 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   18eb4:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   18eb6:	2518      	movs	r5, #24
   18eb8:	ab22      	add	r3, sp, #136	; 0x88
   18eba:	fb05 3004 	mla	r0, r5, r4, r3
   18ebe:	f7fc fd05 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   18ec2:	3c01      	subs	r4, #1
   18ec4:	d2f8      	bcs.n	18eb8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   18ec6:	b05f      	add	sp, #380	; 0x17c
   18ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018eca <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   18eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ece:	469b      	mov	fp, r3
  int axis = params.axis;
   18ed0:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   18ed4:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   18ed8:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   18eda:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18edc:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   18ede:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   18ee2:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   18ee4:	db01      	blt.n	18eea <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   18ee6:	f005 fb85 	bl	1e5f4 <abort>
  for (int i = 0; i < inputs_count; i++) {
   18eea:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   18eec:	2600      	movs	r6, #0
   18eee:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   18ef0:	9b00      	ldr	r3, [sp, #0]
   18ef2:	429c      	cmp	r4, r3
   18ef4:	da1d      	bge.n	18f32 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   18ef6:	9b01      	ldr	r3, [sp, #4]
   18ef8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   18efc:	682b      	ldr	r3, [r5, #0]
   18efe:	4599      	cmp	r9, r3
   18f00:	d1f1      	bne.n	18ee6 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   18f02:	f04f 0a00 	mov.w	sl, #0
   18f06:	45ca      	cmp	sl, r9
   18f08:	da0a      	bge.n	18f20 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   18f0a:	45c2      	cmp	sl, r8
   18f0c:	d005      	beq.n	18f1a <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   18f0e:	4653      	mov	r3, sl
   18f10:	465a      	mov	r2, fp
   18f12:	4651      	mov	r1, sl
   18f14:	4628      	mov	r0, r5
   18f16:	f7ff fb91 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   18f1a:	f10a 0a01 	add.w	sl, sl, #1
   18f1e:	e7f2      	b.n	18f06 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   18f20:	4641      	mov	r1, r8
   18f22:	4628      	mov	r0, r5
   18f24:	f7fc fcdd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f28:	1836      	adds	r6, r6, r0
   18f2a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   18f2e:	3401      	adds	r4, #1
   18f30:	e7de      	b.n	18ef0 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   18f32:	4641      	mov	r1, r8
   18f34:	4658      	mov	r0, fp
   18f36:	f7fc fcd4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f3a:	17c1      	asrs	r1, r0, #31
   18f3c:	42b9      	cmp	r1, r7
   18f3e:	bf08      	it	eq
   18f40:	42b0      	cmpeq	r0, r6
   18f42:	d1d0      	bne.n	18ee6 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   18f44:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   18f46:	2401      	movs	r4, #1
   18f48:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   18f4a:	4546      	cmp	r6, r8
   18f4c:	da0c      	bge.n	18f68 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   18f4e:	4631      	mov	r1, r6
   18f50:	4658      	mov	r0, fp
   18f52:	f7fc fcc6 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f56:	17c1      	asrs	r1, r0, #31
   18f58:	4361      	muls	r1, r4
   18f5a:	fb00 1105 	mla	r1, r0, r5, r1
   18f5e:	fba4 4500 	umull	r4, r5, r4, r0
   18f62:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   18f64:	3601      	adds	r6, #1
   18f66:	e7f0      	b.n	18f4a <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f68:	f108 0a01 	add.w	sl, r8, #1
  int64_t base_inner_size = 1;
   18f6c:	2601      	movs	r6, #1
   18f6e:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f70:	45ca      	cmp	sl, r9
   18f72:	d00d      	beq.n	18f90 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   18f74:	4651      	mov	r1, sl
   18f76:	4658      	mov	r0, fp
   18f78:	f7fc fcb3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   18f7c:	17c3      	asrs	r3, r0, #31
   18f7e:	4373      	muls	r3, r6
   18f80:	fb00 3307 	mla	r3, r0, r7, r3
   18f84:	fba6 6700 	umull	r6, r7, r6, r0
   18f88:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   18f8a:	f10a 0a01 	add.w	sl, sl, #1
   18f8e:	e7ef      	b.n	18f70 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   18f90:	f04f 0a00 	mov.w	sl, #0
   18f94:	4650      	mov	r0, sl
   18f96:	17c1      	asrs	r1, r0, #31
   18f98:	45a2      	cmp	sl, r4
   18f9a:	eb71 0305 	sbcs.w	r3, r1, r5
   18f9e:	da21      	bge.n	18fe4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11a>
    for (int i = 0; i < inputs_count; ++i) {
   18fa0:	f04f 0900 	mov.w	r9, #0
   18fa4:	9b00      	ldr	r3, [sp, #0]
   18fa6:	4599      	cmp	r9, r3
   18fa8:	da19      	bge.n	18fde <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x114>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18faa:	9b01      	ldr	r3, [sp, #4]
   18fac:	4641      	mov	r1, r8
   18fae:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   18fb2:	f7fc fc96 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18fb6:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   18fb8:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18fba:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18fbe:	00c2      	lsls	r2, r0, #3
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   18fc0:	fb00 f00a 	mul.w	r0, r0, sl
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   18fc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   18fc8:	980e      	ldr	r0, [sp, #56]	; 0x38
   18fca:	9203      	str	r2, [sp, #12]
   18fcc:	f005 fb27 	bl	1e61e <memcpy>
      output_ptr += copy_size;
   18fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18fd2:	9a03      	ldr	r2, [sp, #12]
   18fd4:	4413      	add	r3, r2
   18fd6:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   18fd8:	f109 0901 	add.w	r9, r9, #1
   18fdc:	e7e2      	b.n	18fa4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xda>
  for (int k = 0; k < outer_size; k++) {
   18fde:	f10a 0a01 	add.w	sl, sl, #1
   18fe2:	e7d7      	b.n	18f94 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   18fe4:	b005      	add	sp, #20
   18fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018fea <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   18fea:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fec:	b0df      	sub	sp, #380	; 0x17c
   18fee:	4604      	mov	r4, r0
   18ff0:	460e      	mov	r6, r1
   18ff2:	ab22      	add	r3, sp, #136	; 0x88
   18ff4:	250a      	movs	r5, #10
   18ff6:	2200      	movs	r2, #0
  RuntimeShape inputs_shape[kMaxInputNum];
   18ff8:	3d01      	subs	r5, #1
   18ffa:	f843 2b18 	str.w	r2, [r3], #24
   18ffe:	d1fb      	bne.n	18ff8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   19000:	f104 0008 	add.w	r0, r4, #8
   19004:	6831      	ldr	r1, [r6, #0]
   19006:	aa22      	add	r2, sp, #136	; 0x88
   19008:	f7ff fc1c 	bl	18844 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   1900c:	6833      	ldr	r3, [r6, #0]
   1900e:	aa0e      	add	r2, sp, #56	; 0x38
   19010:	6819      	ldr	r1, [r3, #0]
   19012:	a822      	add	r0, sp, #136	; 0x88
   19014:	f7ff fc38 	bl	18888 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   19018:	6831      	ldr	r1, [r6, #0]
   1901a:	68a4      	ldr	r4, [r4, #8]
   1901c:	f851 2b04 	ldr.w	r2, [r1], #4
   19020:	af18      	add	r7, sp, #96	; 0x60
   19022:	42aa      	cmp	r2, r5
   19024:	dd09      	ble.n	1903a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   19026:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1902a:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   1902e:	bf18      	it	ne
   19030:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   19032:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   19036:	3501      	adds	r5, #1
   19038:	e7f3      	b.n	19022 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   1903a:	6873      	ldr	r3, [r6, #4]
   1903c:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   1903e:	6973      	ldr	r3, [r6, #20]
   19040:	681b      	ldr	r3, [r3, #0]
   19042:	eb04 1481 	add.w	r4, r4, r1, lsl #6
  if (axis >= 0) {
   19046:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   19048:	bfbc      	itt	lt
   1904a:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   1904c:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   1904e:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   19052:	bfb8      	it	lt
   19054:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   19056:	a808      	add	r0, sp, #32
   19058:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   1905a:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   1905e:	f7fc fc7a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19062:	b104      	cbz	r4, 19066 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x7c>
   19064:	6864      	ldr	r4, [r4, #4]
   19066:	9400      	str	r4, [sp, #0]
   19068:	ab08      	add	r3, sp, #32
   1906a:	463a      	mov	r2, r7
   1906c:	a90e      	add	r1, sp, #56	; 0x38
   1906e:	a802      	add	r0, sp, #8
   19070:	f7ff ff2b 	bl	18eca <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   19074:	a808      	add	r0, sp, #32
   19076:	f7fc fc29 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   1907a:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   1907c:	2518      	movs	r5, #24
   1907e:	ab22      	add	r3, sp, #136	; 0x88
   19080:	fb05 3004 	mla	r0, r5, r4, r3
   19084:	f7fc fc22 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   19088:	3c01      	subs	r4, #1
   1908a:	d2f8      	bcs.n	1907e <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   1908c:	b05f      	add	sp, #380	; 0x17c
   1908e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019090 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19090:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19092:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19094:	b90b      	cbnz	r3, 1909a <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0xa>
   19096:	f005 faad 	bl	1e5f4 <abort>
  void* data = nullptr;
   1909a:	2400      	movs	r4, #0
   1909c:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1909e:	aa01      	add	r2, sp, #4
   190a0:	2128      	movs	r1, #40	; 0x28
   190a2:	4798      	blx	r3
   190a4:	2801      	cmp	r0, #1
  return data;
   190a6:	bf14      	ite	ne
   190a8:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   190aa:	4620      	moveq	r0, r4
}
   190ac:	b002      	add	sp, #8
   190ae:	bd10      	pop	{r4, pc}

000190b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
   190b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190b4:	ed2d 8b02 	vpush	{d8}
   190b8:	b0a1      	sub	sp, #132	; 0x84
   190ba:	4699      	mov	r9, r3
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
   190bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   190c0:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   190c2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   190c6:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   190c8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   190cc:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   190ce:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   190d2:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   190d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   190d8:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   190da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   190de:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 input_offset = params.input_offset;
   190e0:	6943      	ldr	r3, [r0, #20]
   190e2:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
   190e4:	6983      	ldr	r3, [r0, #24]
   190e6:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   190e8:	69c3      	ldr	r3, [r0, #28]
   190ea:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_multiplier = params.output_multiplier;
   190ec:	6a03      	ldr	r3, [r0, #32]
                 uint8* im2col_data, void* cpu_backend_context) {
   190ee:	921f      	str	r2, [sp, #124]	; 0x7c
  const int32 output_multiplier = params.output_multiplier;
   190f0:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   190f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
                 uint8* im2col_data, void* cpu_backend_context) {
   190f6:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
  const int output_shift = params.output_shift;
   190f8:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   190fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
   190fe:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   19100:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   19102:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19104:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   19108:	4293      	cmp	r3, r2
                 uint8* im2col_data, void* cpu_backend_context) {
   1910a:	4688      	mov	r8, r1
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   1910c:	dd01      	ble.n	19112 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x62>
   1910e:	f005 fa71 	bl	1e5f4 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19112:	680b      	ldr	r3, [r1, #0]
   19114:	2b04      	cmp	r3, #4
   19116:	d1fa      	bne.n	1910e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19118:	f8d9 3000 	ldr.w	r3, [r9]
   1911c:	2b04      	cmp	r3, #4
   1911e:	d1f6      	bne.n	1910e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19120:	6833      	ldr	r3, [r6, #0]
   19122:	2b04      	cmp	r3, #4
   19124:	d1f3      	bne.n	1910e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19126:	2300      	movs	r3, #0
   19128:	4619      	mov	r1, r3
   1912a:	4632      	mov	r2, r6
   1912c:	4640      	mov	r0, r8
   1912e:	f7ff fa85 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19132:	2303      	movs	r3, #3
   19134:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19136:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19138:	464a      	mov	r2, r9
   1913a:	4640      	mov	r0, r8
   1913c:	f7ff fa7e 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19140:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19142:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19144:	4632      	mov	r2, r6
   19146:	2100      	movs	r1, #0
   19148:	4648      	mov	r0, r9
   1914a:	f7ff fa77 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   1914e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19150:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   19152:	b12b      	cbz	r3, 19160 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19154:	982d      	ldr	r0, [sp, #180]	; 0xb4
   19156:	f7fc fc49 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1915a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1915c:	4298      	cmp	r0, r3
   1915e:	d1d6      	bne.n	1910e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  }
  const int input_height = input_shape.Dims(1);
   19160:	2101      	movs	r1, #1
   19162:	4640      	mov	r0, r8
   19164:	f7fc fbbd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19168:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1916a:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   1916c:	4640      	mov	r0, r8
   1916e:	f7fc fbb8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19172:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   19174:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   19176:	4648      	mov	r0, r9
   19178:	f7fc fbb3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1917c:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1917e:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   19180:	4648      	mov	r0, r9
   19182:	f7fc fbae 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19186:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19188:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   1918a:	4630      	mov	r0, r6
   1918c:	f7fc fba9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   19190:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19192:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   19194:	4630      	mov	r0, r6
   19196:	f7fc fba4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   1919a:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   1919e:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   191a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   191a2:	459b      	cmp	fp, r3
   191a4:	f280 8096 	bge.w	192d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x224>
   191a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   191aa:	425b      	negs	r3, r3
   191ac:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   191ae:	2300      	movs	r3, #0
   191b0:	9304      	str	r3, [sp, #16]
   191b2:	9b04      	ldr	r3, [sp, #16]
   191b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   191b6:	4293      	cmp	r3, r2
   191b8:	f280 8089 	bge.w	192ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x21e>
   191bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   191be:	425b      	negs	r3, r3
   191c0:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   191c2:	2300      	movs	r3, #0
   191c4:	9305      	str	r3, [sp, #20]
   191c6:	9b05      	ldr	r3, [sp, #20]
   191c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   191ca:	4293      	cmp	r3, r2
   191cc:	da77      	bge.n	192be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x20e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   191ce:	2400      	movs	r4, #0
   191d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   191d2:	429c      	cmp	r4, r3
   191d4:	da6b      	bge.n	192ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1fe>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   191d6:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   191d8:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   191dc:	9506      	str	r5, [sp, #24]
   191de:	9b06      	ldr	r3, [sp, #24]
   191e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   191e2:	4293      	cmp	r3, r2
   191e4:	da42      	bge.n	1926c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1bc>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   191e6:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   191e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   191ea:	9307      	str	r3, [sp, #28]
   191ec:	9b07      	ldr	r3, [sp, #28]
   191ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   191f0:	4293      	cmp	r3, r2
   191f2:	da35      	bge.n	19260 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1b0>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   191f4:	2300      	movs	r3, #0
   191f6:	9303      	str	r3, [sp, #12]
   191f8:	9b03      	ldr	r3, [sp, #12]
   191fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   191fc:	4293      	cmp	r3, r2
   191fe:	da29      	bge.n	19254 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1a4>
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19200:	2f00      	cmp	r7, #0
   19202:	db24      	blt.n	1924e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   19204:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19206:	42bb      	cmp	r3, r7
   19208:	dd21      	ble.n	1924e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   1920a:	f1ba 0f00 	cmp.w	sl, #0
   1920e:	db1e      	blt.n	1924e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   19210:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19212:	4553      	cmp	r3, sl
   19214:	dd1b      	ble.n	1924e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19216:	9b03      	ldr	r3, [sp, #12]
   19218:	9300      	str	r3, [sp, #0]
   1921a:	4652      	mov	r2, sl
   1921c:	463b      	mov	r3, r7
   1921e:	4659      	mov	r1, fp
   19220:	4640      	mov	r0, r8
   19222:	f7fc fc20 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19226:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19228:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   1922a:	9300      	str	r3, [sp, #0]
   1922c:	4621      	mov	r1, r4
   1922e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19232:	4648      	mov	r0, r9
   19234:	f7fc fc17 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   19238:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   1923a:	9a15      	ldr	r2, [sp, #84]	; 0x54
                                         filter_x, in_channel)];
   1923c:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   1923e:	9911      	ldr	r1, [sp, #68]	; 0x44
                      (filter_val + filter_offset) * (input_val + input_offset);
   19240:	4413      	add	r3, r2
                                                      in_x, in_channel)];
   19242:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19244:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   19246:	9914      	ldr	r1, [sp, #80]	; 0x50
   19248:	440a      	add	r2, r1
                  acc +=
   1924a:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1924e:	9b03      	ldr	r3, [sp, #12]
   19250:	3301      	adds	r3, #1
   19252:	e7d0      	b.n	191f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x146>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19254:	9b07      	ldr	r3, [sp, #28]
   19256:	3301      	adds	r3, #1
   19258:	9307      	str	r3, [sp, #28]
   1925a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1925c:	441f      	add	r7, r3
   1925e:	e7c5      	b.n	191ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x13c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19260:	9b06      	ldr	r3, [sp, #24]
   19262:	3301      	adds	r3, #1
   19264:	9306      	str	r3, [sp, #24]
   19266:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19268:	449a      	add	sl, r3
   1926a:	e7b8      	b.n	191de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x12e>
                }
              }
            }
          }
          if (bias_data) {
   1926c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1926e:	b113      	cbz	r3, 19276 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1c6>
            acc += bias_data[out_channel];
   19270:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19274:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   19276:	ee18 2a90 	vmov	r2, s17
   1927a:	ee18 1a10 	vmov	r1, s16
   1927e:	4628      	mov	r0, r5
   19280:	f7f0 fb0c 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                              output_shift);
          acc += output_offset;
   19284:	9b16      	ldr	r3, [sp, #88]	; 0x58
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19286:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   19288:	18c5      	adds	r5, r0, r3
   1928a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1928c:	429d      	cmp	r5, r3
   1928e:	bfb8      	it	lt
   19290:	461d      	movlt	r5, r3
   19292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19294:	429d      	cmp	r5, r3
   19296:	bfa8      	it	ge
   19298:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   1929a:	4659      	mov	r1, fp
   1929c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   192a0:	4630      	mov	r0, r6
   192a2:	f7fc fbe0 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   192a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   192a8:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   192aa:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   192ac:	e790      	b.n	191d0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x120>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   192ae:	9b05      	ldr	r3, [sp, #20]
   192b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   192b2:	3301      	adds	r3, #1
   192b4:	9305      	str	r3, [sp, #20]
   192b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   192b8:	4413      	add	r3, r2
   192ba:	9309      	str	r3, [sp, #36]	; 0x24
   192bc:	e783      	b.n	191c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x116>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   192be:	9b04      	ldr	r3, [sp, #16]
   192c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   192c2:	3301      	adds	r3, #1
   192c4:	9304      	str	r3, [sp, #16]
   192c6:	9b08      	ldr	r3, [sp, #32]
   192c8:	4413      	add	r3, r2
   192ca:	9308      	str	r3, [sp, #32]
   192cc:	e771      	b.n	191b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x102>
  for (int batch = 0; batch < batches; ++batch) {
   192ce:	f10b 0b01 	add.w	fp, fp, #1
   192d2:	e765      	b.n	191a0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xf0>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   192d4:	b021      	add	sp, #132	; 0x84
   192d6:	ecbd 8b02 	vpop	{d8}
   192da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000192de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   192de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192e2:	b0a1      	sub	sp, #132	; 0x84
   192e4:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   192e6:	6943      	ldr	r3, [r0, #20]
   192e8:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   192ea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   192ee:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   192f0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   192f4:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   192f6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   192fa:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   192fc:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   19300:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   19302:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   19306:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   19308:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1930c:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 output_offset = params.output_offset;
   1930e:	69c3      	ldr	r3, [r0, #28]
   19310:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
   19312:	6a83      	ldr	r3, [r0, #40]	; 0x28
   19314:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   19316:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   19318:	930b      	str	r3, [sp, #44]	; 0x2c
    int8* output_data) {
   1931a:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   1931e:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   19322:	4293      	cmp	r3, r2
    int8* output_data) {
   19324:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   19326:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19328:	dd01      	ble.n	1932e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
   1932a:	f005 f963 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1932e:	f8d8 3000 	ldr.w	r3, [r8]
   19332:	2b04      	cmp	r3, #4
   19334:	d1f9      	bne.n	1932a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19336:	6833      	ldr	r3, [r6, #0]
   19338:	2b04      	cmp	r3, #4
   1933a:	d1f6      	bne.n	1932a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1933c:	683b      	ldr	r3, [r7, #0]
   1933e:	2b04      	cmp	r3, #4
   19340:	d1f3      	bne.n	1932a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19342:	2300      	movs	r3, #0
   19344:	4619      	mov	r1, r3
   19346:	463a      	mov	r2, r7
   19348:	4640      	mov	r0, r8
   1934a:	f7ff f977 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1934e:	2303      	movs	r3, #3
   19350:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19352:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19354:	4632      	mov	r2, r6
   19356:	4640      	mov	r0, r8
   19358:	f7ff f970 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1935c:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1935e:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19360:	463a      	mov	r2, r7
   19362:	2100      	movs	r1, #0
   19364:	4630      	mov	r0, r6
   19366:	f7ff f969 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   1936a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1936c:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   1936e:	b12b      	cbz	r3, 1937c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19370:	982d      	ldr	r0, [sp, #180]	; 0xb4
   19372:	f7fc fb3b 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19378:	4298      	cmp	r0, r3
   1937a:	d1d6      	bne.n	1932a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   1937c:	2101      	movs	r1, #1
   1937e:	4640      	mov	r0, r8
   19380:	f7fc faaf 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19384:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19386:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   19388:	4640      	mov	r0, r8
   1938a:	f7fc faaa 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   1938e:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   19390:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   19392:	4630      	mov	r0, r6
   19394:	f7fc faa5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   19398:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1939a:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   1939c:	4630      	mov	r0, r6
   1939e:	f7fc faa0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   193a2:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   193a4:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   193a6:	4638      	mov	r0, r7
   193a8:	f7fc fa9b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   193ac:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   193ae:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   193b0:	4638      	mov	r0, r7
   193b2:	f7fc fa96 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   193b6:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   193ba:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   193bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   193be:	459b      	cmp	fp, r3
   193c0:	f280 8098 	bge.w	194f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x216>
   193c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   193c6:	425b      	negs	r3, r3
   193c8:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   193ca:	2300      	movs	r3, #0
   193cc:	9304      	str	r3, [sp, #16]
   193ce:	9b04      	ldr	r3, [sp, #16]
   193d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   193d2:	4293      	cmp	r3, r2
   193d4:	f280 808b 	bge.w	194ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
   193d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   193da:	425b      	negs	r3, r3
   193dc:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   193de:	2300      	movs	r3, #0
   193e0:	9305      	str	r3, [sp, #20]
   193e2:	9b05      	ldr	r3, [sp, #20]
   193e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   193e6:	4293      	cmp	r3, r2
   193e8:	da79      	bge.n	194de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   193ea:	2400      	movs	r4, #0
   193ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   193ee:	429c      	cmp	r4, r3
   193f0:	da6d      	bge.n	194ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f0>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   193f2:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   193f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   193f8:	9506      	str	r5, [sp, #24]
   193fa:	9b06      	ldr	r3, [sp, #24]
   193fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   193fe:	4293      	cmp	r3, r2
   19400:	da42      	bge.n	19488 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19402:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   19404:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19408:	9307      	str	r3, [sp, #28]
   1940a:	9b07      	ldr	r3, [sp, #28]
   1940c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1940e:	4293      	cmp	r3, r2
   19410:	da34      	bge.n	1947c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   19412:	2300      	movs	r3, #0
   19414:	9303      	str	r3, [sp, #12]
   19416:	9b03      	ldr	r3, [sp, #12]
   19418:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1941a:	4293      	cmp	r3, r2
   1941c:	da28      	bge.n	19470 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   1941e:	f1ba 0f00 	cmp.w	sl, #0
   19422:	db22      	blt.n	1946a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   19424:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19426:	4553      	cmp	r3, sl
   19428:	dd1f      	ble.n	1946a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   1942a:	f1b9 0f00 	cmp.w	r9, #0
   1942e:	db1c      	blt.n	1946a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   19430:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19432:	454b      	cmp	r3, r9
   19434:	dd19      	ble.n	1946a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19436:	9b03      	ldr	r3, [sp, #12]
   19438:	9300      	str	r3, [sp, #0]
   1943a:	464a      	mov	r2, r9
   1943c:	4653      	mov	r3, sl
   1943e:	4659      	mov	r1, fp
   19440:	4640      	mov	r0, r8
   19442:	f7fc fb10 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19446:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19448:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   1944a:	9300      	str	r3, [sp, #0]
   1944c:	4621      	mov	r1, r4
   1944e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19452:	4630      	mov	r0, r6
   19454:	f7fc fb07 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   19458:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1945a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1945c:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   1945e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19460:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   19462:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19464:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   19466:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1946a:	9b03      	ldr	r3, [sp, #12]
   1946c:	3301      	adds	r3, #1
   1946e:	e7d1      	b.n	19414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19470:	9b07      	ldr	r3, [sp, #28]
   19472:	3301      	adds	r3, #1
   19474:	9307      	str	r3, [sp, #28]
   19476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19478:	449a      	add	sl, r3
   1947a:	e7c6      	b.n	1940a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1947c:	9b06      	ldr	r3, [sp, #24]
   1947e:	3301      	adds	r3, #1
   19480:	9306      	str	r3, [sp, #24]
   19482:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19484:	4499      	add	r9, r3
   19486:	e7b8      	b.n	193fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
                }
              }
            }
          }

          if (bias_data) {
   19488:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1948a:	b113      	cbz	r3, 19492 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
            acc += bias_data[out_channel];
   1948c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19490:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   19492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19494:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   19498:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1949a:	4628      	mov	r0, r5
   1949c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   194a0:	f7f0 f9fc 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   194a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   194a6:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   194a8:	18c5      	adds	r5, r0, r3
   194aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   194ac:	429d      	cmp	r5, r3
   194ae:	bfb8      	it	lt
   194b0:	461d      	movlt	r5, r3
   194b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   194b4:	429d      	cmp	r5, r3
   194b6:	bfa8      	it	ge
   194b8:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   194ba:	4659      	mov	r1, fp
   194bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   194c0:	4638      	mov	r0, r7
   194c2:	f7fc fad0 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   194c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194c8:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   194ca:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194cc:	e78e      	b.n	193ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   194ce:	9b05      	ldr	r3, [sp, #20]
   194d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   194d2:	3301      	adds	r3, #1
   194d4:	9305      	str	r3, [sp, #20]
   194d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194d8:	4413      	add	r3, r2
   194da:	9309      	str	r3, [sp, #36]	; 0x24
   194dc:	e781      	b.n	193e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   194de:	9b04      	ldr	r3, [sp, #16]
   194e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   194e2:	3301      	adds	r3, #1
   194e4:	9304      	str	r3, [sp, #16]
   194e6:	9b08      	ldr	r3, [sp, #32]
   194e8:	4413      	add	r3, r2
   194ea:	9308      	str	r3, [sp, #32]
   194ec:	e76f      	b.n	193ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
   194ee:	f10b 0b01 	add.w	fp, fp, #1
   194f2:	e763      	b.n	193bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   194f4:	b021      	add	sp, #132	; 0x84
   194f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  switch (padding) {
   194fa:	2801      	cmp	r0, #1
   194fc:	d003      	beq.n	19506 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   194fe:	2802      	cmp	r0, #2
   19500:	d006      	beq.n	19510 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   19502:	2000      	movs	r0, #0
   19504:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   19506:	1e58      	subs	r0, r3, #1
   19508:	4408      	add	r0, r1
      return (image_size + stride - effective_filter_size) / stride;
   1950a:	fb90 f0f3 	sdiv	r0, r0, r3
}
   1950e:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
   19510:	1e58      	subs	r0, r3, #1
   19512:	4408      	add	r0, r1
   19514:	9900      	ldr	r1, [sp, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   19516:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   19518:	fb01 0012 	mls	r0, r1, r2, r0
   1951c:	e7f5      	b.n	1950a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

0001951e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1951e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19522:	b0b5      	sub	sp, #212	; 0xd4
   19524:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
  const int32_t input_offset = -input->params.zero_point;
   19528:	f8d8 1010 	ldr.w	r1, [r8, #16]
  op_params.padding_type = RuntimePaddingType(params->padding);
   1952c:	7810      	ldrb	r0, [r2, #0]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1952e:	9e43      	ldr	r6, [sp, #268]	; 0x10c
  const int32_t input_offset = -input->params.zero_point;
   19530:	f1c1 0c00 	rsb	ip, r1, #0
  const int32_t filter_offset = -filter->params.zero_point;
   19534:	6939      	ldr	r1, [r7, #16]
  const int32_t output_offset = output->params.zero_point;
   19536:	f8d6 e010 	ldr.w	lr, [r6, #16]
  switch (padding) {
   1953a:	2801      	cmp	r0, #1
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1953c:	e9dd 4540 	ldrd	r4, r5, [sp, #256]	; 0x100
  const int32_t filter_offset = -filter->params.zero_point;
   19540:	f1c1 0100 	rsb	r1, r1, #0
  switch (padding) {
   19544:	d002      	beq.n	1954c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e>
      return PaddingType::kNone;
   19546:	2802      	cmp	r0, #2
   19548:	bf18      	it	ne
   1954a:	2000      	movne	r0, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   1954c:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   19550:	6818      	ldr	r0, [r3, #0]
   19552:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   19556:	6858      	ldr	r0, [r3, #4]
   19558:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   1955c:	6850      	ldr	r0, [r2, #4]
   1955e:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   19562:	6890      	ldr	r0, [r2, #8]
   19564:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   19568:	6910      	ldr	r0, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1956a:	6952      	ldr	r2, [r2, #20]
   1956c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   19570:	691a      	ldr	r2, [r3, #16]
   19572:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.output_shift = -data.output_shift;
   19574:	695a      	ldr	r2, [r3, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   19576:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
  op_params.output_shift = -data.output_shift;
   1957a:	4252      	negs	r2, r2
  op_params.weights_offset = filter_offset;
   1957c:	e9cd c12b 	strd	ip, r1, [sp, #172]	; 0xac
  op_params.output_shift = -data.output_shift;
   19580:	922f      	str	r2, [sp, #188]	; 0xbc
  reference_ops::Conv(op_params, GetTensorShape(input),
   19582:	4641      	mov	r1, r8
  op_params.quantized_activation_min = data.output_activation_min;
   19584:	6a1a      	ldr	r2, [r3, #32]
  op_params.quantized_activation_max = data.output_activation_max;
   19586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  op_params.output_offset = output_offset;
   19588:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
  reference_ops::Conv(op_params, GetTensorShape(input),
   1958c:	a808      	add	r0, sp, #32
  op_params.quantized_activation_min = data.output_activation_min;
   1958e:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data.output_activation_max;
   19590:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_ops::Conv(op_params, GetTensorShape(input),
   19592:	f7fc f9e0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   19596:	4639      	mov	r1, r7
   19598:	a80e      	add	r0, sp, #56	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1959a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1959e:	f7fc f9da 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   195a2:	f8d7 a004 	ldr.w	sl, [r7, #4]
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   195a6:	af14      	add	r7, sp, #80	; 0x50
   195a8:	4621      	mov	r1, r4
   195aa:	4638      	mov	r0, r7
   195ac:	f7fc f9d3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   195b0:	b104      	cbz	r4, 195b4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x96>
   195b2:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   195b4:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   195b8:	4631      	mov	r1, r6
   195ba:	4640      	mov	r0, r8
   195bc:	f7fc f9cb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   195c0:	f8d6 b004 	ldr.w	fp, [r6, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   195c4:	ae20      	add	r6, sp, #128	; 0x80
   195c6:	4629      	mov	r1, r5
   195c8:	4630      	mov	r0, r6
   195ca:	f7fc f9c4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   195ce:	b105      	cbz	r5, 195d2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb4>
   195d0:	686d      	ldr	r5, [r5, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   195d2:	2300      	movs	r3, #0
   195d4:	464a      	mov	r2, r9
   195d6:	a908      	add	r1, sp, #32
   195d8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   195dc:	a826      	add	r0, sp, #152	; 0x98
   195de:	ab0e      	add	r3, sp, #56	; 0x38
   195e0:	e9cd b604 	strd	fp, r6, [sp, #16]
   195e4:	e9cd 4802 	strd	r4, r8, [sp, #8]
   195e8:	e9cd a700 	strd	sl, r7, [sp]
   195ec:	f7ff fd60 	bl	190b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   195f0:	4630      	mov	r0, r6
   195f2:	f7fc f96b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   195f6:	4640      	mov	r0, r8
   195f8:	f7fc f968 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   195fc:	4638      	mov	r0, r7
   195fe:	f7fc f965 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   19602:	a80e      	add	r0, sp, #56	; 0x38
   19604:	f7fc f962 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   19608:	a808      	add	r0, sp, #32
   1960a:	f7fc f95f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1960e:	b035      	add	sp, #212	; 0xd4
   19610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019614 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
                             TfLiteTensor* im2col) {
   19614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19618:	b0b1      	sub	sp, #196	; 0xc4
   1961a:	e9dd 643a 	ldrd	r6, r4, [sp, #232]	; 0xe8
   1961e:	e9dd 593c 	ldrd	r5, r9, [sp, #240]	; 0xf0
  op_params.input_offset = -input->params.zero_point;
   19622:	6931      	ldr	r1, [r6, #16]
   19624:	4249      	negs	r1, r1
   19626:	9127      	str	r1, [sp, #156]	; 0x9c
  op_params.output_offset = output->params.zero_point;
   19628:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1962c:	9129      	str	r1, [sp, #164]	; 0xa4
  op_params.stride_height = params->stride_height;
   1962e:	6891      	ldr	r1, [r2, #8]
   19630:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.stride_width = params->stride_width;
   19634:	6851      	ldr	r1, [r2, #4]
   19636:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.dilation_height_factor = params->dilation_height_factor;
   1963a:	6951      	ldr	r1, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   1963c:	6912      	ldr	r2, [r2, #16]
   1963e:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.padding_values.height = data.padding.height;
   19642:	685a      	ldr	r2, [r3, #4]
   19644:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.padding_values.width = data.padding.width;
   19648:	681a      	ldr	r2, [r3, #0]
   1964a:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
  op_params.quantized_activation_min = data.output_activation_min;
   1964e:	6a1a      	ldr	r2, [r3, #32]
  op_params.dilation_height_factor = params->dilation_height_factor;
   19650:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.quantized_activation_min = data.output_activation_min;
   19654:	922c      	str	r2, [sp, #176]	; 0xb0
      data.per_channel_output_shift, GetTensorShape(input),
   19656:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data.output_activation_max;
   19658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1965a:	922d      	str	r2, [sp, #180]	; 0xb4
      data.per_channel_output_shift, GetTensorShape(input),
   1965c:	a80a      	add	r0, sp, #40	; 0x28
   1965e:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
   19662:	f7fc f978 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19666:	6873      	ldr	r3, [r6, #4]
   19668:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
   1966a:	ae10      	add	r6, sp, #64	; 0x40
   1966c:	4621      	mov	r1, r4
   1966e:	4630      	mov	r0, r6
   19670:	f7fc f971 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19674:	b104      	cbz	r4, 19678 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x64>
   19676:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   19678:	af16      	add	r7, sp, #88	; 0x58
   1967a:	4629      	mov	r1, r5
   1967c:	4638      	mov	r0, r7
   1967e:	f7fc f96a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19682:	b105      	cbz	r5, 19686 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x72>
   19684:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   19686:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   1968a:	4649      	mov	r1, r9
   1968c:	4640      	mov	r0, r8
   1968e:	f7fc f962 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   19692:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19696:	e9cd 8305 	strd	r8, r3, [sp, #20]
   1969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1969c:	9300      	str	r3, [sp, #0]
   1969e:	465a      	mov	r2, fp
   196a0:	ab0a      	add	r3, sp, #40	; 0x28
   196a2:	4651      	mov	r1, sl
   196a4:	a822      	add	r0, sp, #136	; 0x88
   196a6:	e9cd 7503 	strd	r7, r5, [sp, #12]
   196aa:	e9cd 6401 	strd	r6, r4, [sp, #4]
   196ae:	f7ff fe16 	bl	192de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   196b2:	4640      	mov	r0, r8
   196b4:	f7fc f90a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   196b8:	4638      	mov	r0, r7
   196ba:	f7fc f907 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   196be:	4630      	mov	r0, r6
   196c0:	f7fc f904 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
   196c4:	a80a      	add	r0, sp, #40	; 0x28
   196c6:	f7fc f901 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   196ca:	b031      	add	sp, #196	; 0xc4
   196cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000196d0 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   196d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   196d2:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   196d4:	b90b      	cbnz	r3, 196da <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0xa>
   196d6:	f004 ff8d 	bl	1e5f4 <abort>
  void* data = nullptr;
   196da:	2400      	movs	r4, #0
   196dc:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   196de:	aa01      	add	r2, sp, #4
   196e0:	2128      	movs	r1, #40	; 0x28
   196e2:	4798      	blx	r3
   196e4:	2801      	cmp	r0, #1
  return data;
   196e6:	bf14      	ite	ne
   196e8:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   196ea:	4620      	moveq	r0, r4
}
   196ec:	b002      	add	sp, #8
   196ee:	bd10      	pop	{r4, pc}

000196f0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   196f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196f4:	b0a1      	sub	sp, #132	; 0x84
   196f6:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   196f8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   196fc:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   196fe:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   19702:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   19704:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   19708:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   1970a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   1970e:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   19710:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   19714:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   19716:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1971a:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   1971c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   19720:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   19722:	6943      	ldr	r3, [r0, #20]
   19724:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   19726:	69c3      	ldr	r3, [r0, #28]
   19728:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   1972a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1972c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   1972e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   19730:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19732:	f8d9 3000 	ldr.w	r3, [r9]
    int8* output_data) {
   19736:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   19738:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1973a:	2b04      	cmp	r3, #4
    int8* output_data) {
   1973c:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19740:	d001      	beq.n	19746 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   19742:	f004 ff57 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19746:	6833      	ldr	r3, [r6, #0]
   19748:	2b04      	cmp	r3, #4
   1974a:	d1fa      	bne.n	19742 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1974c:	683b      	ldr	r3, [r7, #0]
   1974e:	2b04      	cmp	r3, #4
   19750:	d1f7      	bne.n	19742 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19752:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   19756:	4293      	cmp	r3, r2
   19758:	dcf3      	bgt.n	19742 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1975a:	2300      	movs	r3, #0
   1975c:	4619      	mov	r1, r3
   1975e:	463a      	mov	r2, r7
   19760:	4648      	mov	r0, r9
   19762:	f7fe ff6b 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19766:	2303      	movs	r3, #3
   19768:	4619      	mov	r1, r3
   1976a:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1976c:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1976e:	4630      	mov	r0, r6
   19770:	f7fe ff64 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19774:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19776:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   19778:	4648      	mov	r0, r9
   1977a:	f7fc f8b2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1977e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19780:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   19782:	4648      	mov	r0, r9
   19784:	f7fc f8ad 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   19788:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   1978a:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   1978c:	4648      	mov	r0, r9
   1978e:	f7fc f8a8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19792:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   19794:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   19796:	4630      	mov	r0, r6
   19798:	f7fc f8a3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1979c:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1979e:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   197a0:	4630      	mov	r0, r6
   197a2:	f7fc f89e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   197a6:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   197a8:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   197aa:	4638      	mov	r0, r7
   197ac:	f7fc f899 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   197b0:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   197b2:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   197b4:	4638      	mov	r0, r7
   197b6:	f7fc f894 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   197ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   197bc:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
   197be:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   197c0:	fb03 f502 	mul.w	r5, r3, r2
   197c4:	42a5      	cmp	r5, r4
   197c6:	d1bc      	bne.n	19742 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   197c8:	982d      	ldr	r0, [sp, #180]	; 0xb4
   197ca:	f7fc f90f 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   197ce:	42a8      	cmp	r0, r5
   197d0:	d1b7      	bne.n	19742 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   197d2:	f04f 0b00 	mov.w	fp, #0
   197d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   197d8:	459b      	cmp	fp, r3
   197da:	f280 80a0 	bge.w	1991e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   197de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   197e0:	425b      	negs	r3, r3
   197e2:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   197e4:	2300      	movs	r3, #0
   197e6:	9303      	str	r3, [sp, #12]
   197e8:	9b03      	ldr	r3, [sp, #12]
   197ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   197ec:	4293      	cmp	r3, r2
   197ee:	f280 8093 	bge.w	19918 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
   197f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   197f4:	425b      	negs	r3, r3
   197f6:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   197f8:	2300      	movs	r3, #0
   197fa:	9304      	str	r3, [sp, #16]
   197fc:	9b04      	ldr	r3, [sp, #16]
   197fe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   19800:	4293      	cmp	r3, r2
   19802:	f280 8081 	bge.w	19908 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
   19806:	2300      	movs	r3, #0
   19808:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1980a:	9305      	str	r3, [sp, #20]
   1980c:	9b05      	ldr	r3, [sp, #20]
   1980e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19810:	4293      	cmp	r3, r2
   19812:	da71      	bge.n	198f8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   19814:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   19816:	9b02      	ldr	r3, [sp, #8]
   19818:	9a08      	ldr	r2, [sp, #32]
   1981a:	1ae3      	subs	r3, r4, r3
   1981c:	4293      	cmp	r3, r2
   1981e:	da63      	bge.n	198e8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   19820:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   19822:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19826:	9506      	str	r5, [sp, #24]
   19828:	9b06      	ldr	r3, [sp, #24]
   1982a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1982c:	4293      	cmp	r3, r2
   1982e:	da38      	bge.n	198a2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19830:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   19832:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19836:	9307      	str	r3, [sp, #28]
   19838:	9b07      	ldr	r3, [sp, #28]
   1983a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1983c:	4293      	cmp	r3, r2
   1983e:	da2a      	bge.n	19896 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19840:	f1b8 0f00 	cmp.w	r8, #0
   19844:	db21      	blt.n	1988a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   19846:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19848:	4543      	cmp	r3, r8
   1984a:	dd1e      	ble.n	1988a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   1984c:	f1ba 0f00 	cmp.w	sl, #0
   19850:	db1b      	blt.n	1988a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   19852:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19854:	4553      	cmp	r3, sl
   19856:	dd18      	ble.n	1988a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   19858:	9b05      	ldr	r3, [sp, #20]
   1985a:	9300      	str	r3, [sp, #0]
   1985c:	4652      	mov	r2, sl
   1985e:	4643      	mov	r3, r8
   19860:	4659      	mov	r1, fp
   19862:	4648      	mov	r0, r9
   19864:	f7fc f8ff 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   19868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   1986c:	9012      	str	r0, [sp, #72]	; 0x48
                  int32 filter_val = filter_data[Offset(
   1986e:	9400      	str	r4, [sp, #0]
   19870:	2100      	movs	r1, #0
   19872:	4630      	mov	r0, r6
   19874:	f7fc f8f7 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   19878:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1987a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1987c:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   1987e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19880:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   19882:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19884:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   19886:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1988a:	9b07      	ldr	r3, [sp, #28]
   1988c:	3301      	adds	r3, #1
   1988e:	9307      	str	r3, [sp, #28]
   19890:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19892:	4498      	add	r8, r3
   19894:	e7d0      	b.n	19838 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19896:	9b06      	ldr	r3, [sp, #24]
   19898:	3301      	adds	r3, #1
   1989a:	9306      	str	r3, [sp, #24]
   1989c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1989e:	449a      	add	sl, r3
   198a0:	e7c2      	b.n	19828 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   198a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   198a4:	b113      	cbz	r3, 198ac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   198a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   198aa:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   198ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   198ae:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   198b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   198b4:	4628      	mov	r0, r5
   198b6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   198ba:	f7ef ffef 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
   198be:	9b16      	ldr	r3, [sp, #88]	; 0x58
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   198c0:	9400      	str	r4, [sp, #0]
            acc += output_offset;
   198c2:	18c5      	adds	r5, r0, r3
   198c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198c6:	429d      	cmp	r5, r3
   198c8:	bfb8      	it	lt
   198ca:	461d      	movlt	r5, r3
   198cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   198ce:	429d      	cmp	r5, r3
   198d0:	bfa8      	it	ge
   198d2:	461d      	movge	r5, r3
            output_data[Offset(output_shape, batch, out_y, out_x,
   198d4:	4659      	mov	r1, fp
   198d6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   198da:	4638      	mov	r0, r7
   198dc:	f7fc f8c3 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
   198e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   198e2:	3401      	adds	r4, #1
   198e4:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   198e6:	e796      	b.n	19816 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   198e8:	9b05      	ldr	r3, [sp, #20]
   198ea:	9a08      	ldr	r2, [sp, #32]
   198ec:	3301      	adds	r3, #1
   198ee:	9305      	str	r3, [sp, #20]
   198f0:	9b02      	ldr	r3, [sp, #8]
   198f2:	4413      	add	r3, r2
   198f4:	9302      	str	r3, [sp, #8]
   198f6:	e789      	b.n	1980c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   198f8:	9b04      	ldr	r3, [sp, #16]
   198fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   198fc:	3301      	adds	r3, #1
   198fe:	9304      	str	r3, [sp, #16]
   19900:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19902:	4413      	add	r3, r2
   19904:	9309      	str	r3, [sp, #36]	; 0x24
   19906:	e779      	b.n	197fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19908:	9b03      	ldr	r3, [sp, #12]
   1990a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1990c:	3301      	adds	r3, #1
   1990e:	9303      	str	r3, [sp, #12]
   19910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19912:	4413      	add	r3, r2
   19914:	930a      	str	r3, [sp, #40]	; 0x28
   19916:	e767      	b.n	197e8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   19918:	f10b 0b01 	add.w	fp, fp, #1
   1991c:	e75b      	b.n	197d6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   1991e:	b021      	add	sp, #132	; 0x84
   19920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019924 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>:
  static inline void Run(const DepthwiseParams& params,
   19924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19928:	ed2d 8b02 	vpush	{d8}
   1992c:	b0a1      	sub	sp, #132	; 0x84
   1992e:	469a      	mov	sl, r3
    const int stride_width = params.stride_width;
   19930:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   19934:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   19936:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   1993a:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   1993c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   19940:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   19942:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   19946:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   19948:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   1994c:	9313      	str	r3, [sp, #76]	; 0x4c
    const int pad_height = params.padding_values.height;
   1994e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19952:	9314      	str	r3, [sp, #80]	; 0x50
    const int depth_multiplier = params.depth_multiplier;
   19954:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   19958:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   1995a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1995c:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   1995e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   19960:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   19962:	6943      	ldr	r3, [r0, #20]
   19964:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   19966:	6983      	ldr	r3, [r0, #24]
   19968:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   1996a:	69c3      	ldr	r3, [r0, #28]
   1996c:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   1996e:	6a03      	ldr	r3, [r0, #32]
  static inline void Run(const DepthwiseParams& params,
   19970:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
   19972:	921f      	str	r2, [sp, #124]	; 0x7c
    const int32 output_multiplier = params.output_multiplier;
   19974:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   19978:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1997a:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1997e:	680b      	ldr	r3, [r1, #0]
   19980:	2b04      	cmp	r3, #4
  static inline void Run(const DepthwiseParams& params,
   19982:	4689      	mov	r9, r1
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19984:	d001      	beq.n	1998a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x66>
   19986:	f004 fe35 	bl	1e5f4 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1998a:	f8da 3000 	ldr.w	r3, [sl]
   1998e:	2b04      	cmp	r3, #4
   19990:	d1f9      	bne.n	19986 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19992:	6833      	ldr	r3, [r6, #0]
   19994:	2b04      	cmp	r3, #4
   19996:	d1f6      	bne.n	19986 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19998:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   1999c:	4293      	cmp	r3, r2
   1999e:	dcf2      	bgt.n	19986 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   199a0:	2300      	movs	r3, #0
   199a2:	4619      	mov	r1, r3
   199a4:	4632      	mov	r2, r6
   199a6:	4648      	mov	r0, r9
   199a8:	f7fe fe48 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   199ac:	2303      	movs	r3, #3
   199ae:	4619      	mov	r1, r3
   199b0:	4632      	mov	r2, r6
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   199b2:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   199b4:	4650      	mov	r0, sl
   199b6:	f7fe fe41 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   199ba:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   199bc:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   199be:	4648      	mov	r0, r9
   199c0:	f7fb ff8f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   199c4:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   199c6:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   199c8:	4648      	mov	r0, r9
   199ca:	f7fb ff8a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   199ce:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   199d0:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   199d2:	4648      	mov	r0, r9
   199d4:	f7fb ff85 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   199d8:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   199da:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   199dc:	4650      	mov	r0, sl
   199de:	f7fb ff80 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   199e2:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   199e4:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   199e6:	4650      	mov	r0, sl
   199e8:	f7fb ff7b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   199ec:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   199ee:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   199f0:	4630      	mov	r0, r6
   199f2:	f7fb ff76 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   199f6:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   199f8:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   199fa:	4630      	mov	r0, r6
   199fc:	f7fb ff71 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a02:	9a08      	ldr	r2, [sp, #32]
    const int output_width = output_shape.Dims(2);
   19a04:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19a06:	fb03 f502 	mul.w	r5, r3, r2
   19a0a:	42a5      	cmp	r5, r4
   19a0c:	d1bb      	bne.n	19986 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19a0e:	982d      	ldr	r0, [sp, #180]	; 0xb4
   19a10:	f7fb ffec 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19a14:	42a8      	cmp	r0, r5
   19a16:	d1b6      	bne.n	19986 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    for (int b = 0; b < batches; ++b) {
   19a18:	f04f 0b00 	mov.w	fp, #0
   19a1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19a1e:	459b      	cmp	fp, r3
   19a20:	f280 809d 	bge.w	19b5e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x23a>
   19a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19a26:	425b      	negs	r3, r3
   19a28:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_y = 0; out_y < output_height; ++out_y) {
   19a2a:	2300      	movs	r3, #0
   19a2c:	9303      	str	r3, [sp, #12]
   19a2e:	9b03      	ldr	r3, [sp, #12]
   19a30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   19a32:	4293      	cmp	r3, r2
   19a34:	f280 8090 	bge.w	19b58 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x234>
   19a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19a3a:	425b      	negs	r3, r3
   19a3c:	9309      	str	r3, [sp, #36]	; 0x24
        for (int out_x = 0; out_x < output_width; ++out_x) {
   19a3e:	2300      	movs	r3, #0
   19a40:	9304      	str	r3, [sp, #16]
   19a42:	9b04      	ldr	r3, [sp, #16]
   19a44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   19a46:	4293      	cmp	r3, r2
   19a48:	da7e      	bge.n	19b48 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x224>
   19a4a:	2300      	movs	r3, #0
   19a4c:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   19a4e:	9305      	str	r3, [sp, #20]
   19a50:	9b05      	ldr	r3, [sp, #20]
   19a52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19a54:	4293      	cmp	r3, r2
   19a56:	da6f      	bge.n	19b38 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x214>
   19a58:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   19a5a:	9b02      	ldr	r3, [sp, #8]
   19a5c:	9a08      	ldr	r2, [sp, #32]
   19a5e:	1ae3      	subs	r3, r4, r3
   19a60:	429a      	cmp	r2, r3
   19a62:	dd61      	ble.n	19b28 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x204>
              int32 acc = 0;
   19a64:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   19a66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19a68:	9506      	str	r5, [sp, #24]
   19a6a:	9b06      	ldr	r3, [sp, #24]
   19a6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   19a6e:	4293      	cmp	r3, r2
   19a70:	da39      	bge.n	19ae6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19a72:	2300      	movs	r3, #0
                  const int in_y =
   19a74:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19a78:	9307      	str	r3, [sp, #28]
   19a7a:	9b07      	ldr	r3, [sp, #28]
   19a7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   19a7e:	4293      	cmp	r3, r2
   19a80:	da2b      	bge.n	19ada <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1b6>
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19a82:	f1b8 0f00 	cmp.w	r8, #0
   19a86:	db22      	blt.n	19ace <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19a8a:	4543      	cmp	r3, r8
   19a8c:	dd1f      	ble.n	19ace <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a8e:	2f00      	cmp	r7, #0
   19a90:	db1d      	blt.n	19ace <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   19a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19a94:	42bb      	cmp	r3, r7
   19a96:	dd1a      	ble.n	19ace <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19a98:	9b05      	ldr	r3, [sp, #20]
   19a9a:	9300      	str	r3, [sp, #0]
   19a9c:	463a      	mov	r2, r7
   19a9e:	4643      	mov	r3, r8
   19aa0:	4659      	mov	r1, fp
   19aa2:	4648      	mov	r0, r9
   19aa4:	f7fb ffdf 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   19aa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19aac:	9012      	str	r0, [sp, #72]	; 0x48
                    int32 filter_val = filter_data[Offset(
   19aae:	2100      	movs	r1, #0
   19ab0:	9400      	str	r4, [sp, #0]
   19ab2:	4650      	mov	r0, sl
   19ab4:	f7fb ffd7 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19ab8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                    acc += (filter_val + filter_offset) *
   19aba:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   19abc:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   19abe:	9912      	ldr	r1, [sp, #72]	; 0x48
                    acc += (filter_val + filter_offset) *
   19ac0:	4413      	add	r3, r2
                    int32 input_val =
   19ac2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19ac4:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   19ac6:	9915      	ldr	r1, [sp, #84]	; 0x54
   19ac8:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   19aca:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19ace:	9b07      	ldr	r3, [sp, #28]
   19ad0:	3301      	adds	r3, #1
   19ad2:	9307      	str	r3, [sp, #28]
   19ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19ad6:	4498      	add	r8, r3
   19ad8:	e7cf      	b.n	19a7a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19ada:	9b06      	ldr	r3, [sp, #24]
   19adc:	3301      	adds	r3, #1
   19ade:	9306      	str	r3, [sp, #24]
   19ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19ae2:	441f      	add	r7, r3
   19ae4:	e7c1      	b.n	19a6a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x146>
              if (bias_data) {
   19ae6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   19ae8:	b113      	cbz	r3, 19af0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1cc>
                acc += bias_data[oc];
   19aea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19aee:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   19af0:	ee18 2a90 	vmov	r2, s17
   19af4:	ee18 1a10 	vmov	r1, s16
   19af8:	4628      	mov	r0, r5
   19afa:	f7ef fecf 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc += output_offset;
   19afe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19b00:	9400      	str	r4, [sp, #0]
              acc += output_offset;
   19b02:	181d      	adds	r5, r3, r0
   19b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19b06:	429d      	cmp	r5, r3
   19b08:	bfb8      	it	lt
   19b0a:	461d      	movlt	r5, r3
   19b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19b0e:	429d      	cmp	r5, r3
   19b10:	bfa8      	it	ge
   19b12:	461d      	movge	r5, r3
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19b14:	4659      	mov	r1, fp
   19b16:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   19b1a:	4630      	mov	r0, r6
   19b1c:	f7fb ffa3 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19b20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   19b22:	3401      	adds	r4, #1
   19b24:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   19b26:	e798      	b.n	19a5a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   19b28:	9b05      	ldr	r3, [sp, #20]
   19b2a:	9a08      	ldr	r2, [sp, #32]
   19b2c:	3301      	adds	r3, #1
   19b2e:	9305      	str	r3, [sp, #20]
   19b30:	9b02      	ldr	r3, [sp, #8]
   19b32:	4413      	add	r3, r2
   19b34:	9302      	str	r3, [sp, #8]
   19b36:	e78b      	b.n	19a50 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   19b38:	9b04      	ldr	r3, [sp, #16]
   19b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b3c:	3301      	adds	r3, #1
   19b3e:	9304      	str	r3, [sp, #16]
   19b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19b42:	4413      	add	r3, r2
   19b44:	9309      	str	r3, [sp, #36]	; 0x24
   19b46:	e77c      	b.n	19a42 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   19b48:	9b03      	ldr	r3, [sp, #12]
   19b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19b4c:	3301      	adds	r3, #1
   19b4e:	9303      	str	r3, [sp, #12]
   19b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b52:	4413      	add	r3, r2
   19b54:	930a      	str	r3, [sp, #40]	; 0x28
   19b56:	e76a      	b.n	19a2e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   19b58:	f10b 0b01 	add.w	fp, fp, #1
   19b5c:	e75e      	b.n	19a1c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0xf8>
  }
   19b5e:	b021      	add	sp, #132	; 0x84
   19b60:	ecbd 8b02 	vpop	{d8}
   19b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019b68 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b68:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19b6a:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19b6c:	b90b      	cbnz	r3, 19b72 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xa>
   19b6e:	f004 fd41 	bl	1e5f4 <abort>
  void* data = nullptr;
   19b72:	2400      	movs	r4, #0
   19b74:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   19b76:	aa01      	add	r2, sp, #4
   19b78:	2108      	movs	r1, #8
   19b7a:	4798      	blx	r3
   19b7c:	2801      	cmp	r0, #1
  return data;
   19b7e:	bf14      	ite	ne
   19b80:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   19b82:	4620      	moveq	r0, r4
}
   19b84:	b002      	add	sp, #8
   19b86:	bd10      	pop	{r4, pc}

00019b88 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   19b88:	eeb0 0ac0 	vabs.f32	s0, s0
   19b8c:	4770      	bx	lr

00019b8e <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   19b8e:	ee20 0a00 	vmul.f32	s0, s0, s0
   19b92:	4770      	bx	lr

00019b94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   19b94:	f7f0 bf86 	b.w	aaa4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

00019b98 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   19b98:	f7f8 bb3c 	b.w	12214 <sinf>

00019b9c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   19b9c:	f7f8 ba86 	b.w	120ac <cosf>

00019ba0 <_ZSt3logf>:
  { return __builtin_logf(__x); }
   19ba0:	f7f8 bc64 	b.w	1246c <logf>

00019ba4 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   19ba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   19ba8:	4770      	bx	lr

00019baa <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
   19baa:	eef1 7ac0 	vsqrt.f32	s15, s0
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   19bae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19bb2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   19bb6:	4770      	bx	lr

00019bb8 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>:
TfLiteRegistration* Register_ETHOSU() { return nullptr; }
   19bb8:	2000      	movs	r0, #0
   19bba:	4770      	bx	lr

00019bbc <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19bbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   19bbe:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   19bc0:	b90b      	cbnz	r3, 19bc6 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0xa>
   19bc2:	f004 fd17 	bl	1e5f4 <abort>
  void* data = nullptr;
   19bc6:	2400      	movs	r4, #0
   19bc8:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   19bca:	aa01      	add	r2, sp, #4
   19bcc:	2114      	movs	r1, #20
   19bce:	4798      	blx	r3
   19bd0:	2801      	cmp	r0, #1
  return data;
   19bd2:	bf14      	ite	ne
   19bd4:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   19bd6:	4620      	moveq	r0, r4
}
   19bd8:	b002      	add	sp, #8
   19bda:	bd10      	pop	{r4, pc}

00019bdc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19bdc:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   19bde:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   19be0:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19be2:	db01      	blt.n	19be8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   19be4:	42a1      	cmp	r1, r4
   19be6:	db01      	blt.n	19bec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   19be8:	f004 fd04 	bl	1e5f4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   19bec:	2c05      	cmp	r4, #5
   19bee:	bfcc      	ite	gt
   19bf0:	6843      	ldrgt	r3, [r0, #4]
   19bf2:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   19bf4:	2200      	movs	r2, #0
  int flat_size = 1;
   19bf6:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19bf8:	4291      	cmp	r1, r2
   19bfa:	bf18      	it	ne
   19bfc:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   19c00:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19c04:	bf08      	it	eq
   19c06:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   19c08:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19c0a:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   19c0e:	dbf3      	blt.n	19bf8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   19c10:	bd38      	pop	{r3, r4, r5, pc}

00019c12 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
    uint8* output_data) {
   19c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c16:	ed2d 8b02 	vpush	{d8}
   19c1a:	b089      	sub	sp, #36	; 0x24
   19c1c:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   19c1e:	6803      	ldr	r3, [r0, #0]
   19c20:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   19c22:	6843      	ldr	r3, [r0, #4]
   19c24:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   19c26:	6883      	ldr	r3, [r0, #8]
   19c28:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   19c2a:	68c3      	ldr	r3, [r0, #12]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c2c:	682e      	ldr	r6, [r5, #0]
    uint8* output_data) {
   19c2e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const int32 output_multiplier = params.output_multiplier;
   19c30:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   19c34:	6903      	ldr	r3, [r0, #16]
   19c36:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   19c3a:	6943      	ldr	r3, [r0, #20]
   19c3c:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c3e:	2e01      	cmp	r6, #1
  const int32 output_activation_max = params.quantized_activation_max;
   19c40:	6983      	ldr	r3, [r0, #24]
   19c42:	9301      	str	r3, [sp, #4]
    uint8* output_data) {
   19c44:	4614      	mov	r4, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19c46:	dc01      	bgt.n	19c4c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x3a>
   19c48:	f004 fcd4 	bl	1e5f4 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   19c4c:	683b      	ldr	r3, [r7, #0]
   19c4e:	2b00      	cmp	r3, #0
   19c50:	ddfa      	ble.n	19c48 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19c52:	e9dd 2100 	ldrd	r2, r1, [sp]
   19c56:	428a      	cmp	r2, r1
   19c58:	dcf6      	bgt.n	19c48 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   19c5a:	3b01      	subs	r3, #1
   19c5c:	4619      	mov	r1, r3
   19c5e:	4638      	mov	r0, r7
   19c60:	9302      	str	r3, [sp, #8]
   19c62:	f7ff ffbb 	bl	19bdc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c66:	463a      	mov	r2, r7
   19c68:	1eb1      	subs	r1, r6, #2
   19c6a:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   19c6c:	9006      	str	r0, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c6e:	4628      	mov	r0, r5
   19c70:	f7fe fce4 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19c74:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   19c76:	4607      	mov	r7, r0
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19c78:	4628      	mov	r0, r5
   19c7a:	f7fb fe32 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   19c7e:	2600      	movs	r6, #0
   19c80:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   19c82:	46b2      	mov	sl, r6
   19c84:	9b06      	ldr	r3, [sp, #24]
   19c86:	459a      	cmp	sl, r3
   19c88:	da41      	bge.n	19d0e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xfc>
   19c8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19c8c:	f04f 0800 	mov.w	r8, #0
   19c90:	eb03 0b06 	add.w	fp, r3, r6
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19c94:	46c1      	mov	r9, r8
   19c96:	45b9      	cmp	r9, r7
   19c98:	da34      	bge.n	19d04 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xf2>
      for (int d = 0; d < accum_depth; ++d) {
   19c9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19c9c:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   19ca0:	2300      	movs	r3, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19ca2:	46a6      	mov	lr, r4
      for (int d = 0; d < accum_depth; ++d) {
   19ca4:	461a      	mov	r2, r3
   19ca6:	42aa      	cmp	r2, r5
   19ca8:	da10      	bge.n	19ccc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xba>
        int32 input_val = input_data[b * accum_depth + d];
   19caa:	f81e 1b01 	ldrb.w	r1, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19cae:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   19cb0:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   19cb2:	f81c 1b01 	ldrb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19cb6:	4401      	add	r1, r0
   19cb8:	9107      	str	r1, [sp, #28]
   19cba:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   19cbe:	4401      	add	r1, r0
   19cc0:	4608      	mov	r0, r1
   19cc2:	9907      	ldr	r1, [sp, #28]
      for (int d = 0; d < accum_depth; ++d) {
   19cc4:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19cc6:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   19cca:	e7ec      	b.n	19ca6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x94>
      if (bias_data) {
   19ccc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19cce:	b112      	cbz	r2, 19cd6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xc4>
        acc += bias_data[out_c];
   19cd0:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   19cd4:	4413      	add	r3, r2
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   19cd6:	4618      	mov	r0, r3
   19cd8:	ee18 2a90 	vmov	r2, s17
   19cdc:	ee18 1a10 	vmov	r1, s16
   19ce0:	f7ef fddc 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   19ce4:	9b05      	ldr	r3, [sp, #20]
   19ce6:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   19ce8:	9b00      	ldr	r3, [sp, #0]
   19cea:	4298      	cmp	r0, r3
   19cec:	bfb8      	it	lt
   19cee:	4618      	movlt	r0, r3
   19cf0:	9b01      	ldr	r3, [sp, #4]
   19cf2:	4298      	cmp	r0, r3
   19cf4:	bfa8      	it	ge
   19cf6:	4618      	movge	r0, r3
   19cf8:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19cfc:	f109 0901 	add.w	r9, r9, #1
   19d00:	44a8      	add	r8, r5
   19d02:	e7c8      	b.n	19c96 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x84>
  for (int b = 0; b < batches; ++b) {
   19d04:	f10a 0a01 	add.w	sl, sl, #1
   19d08:	443e      	add	r6, r7
   19d0a:	442c      	add	r4, r5
   19d0c:	e7ba      	b.n	19c84 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x72>
}
   19d0e:	b009      	add	sp, #36	; 0x24
   19d10:	ecbd 8b02 	vpop	{d8}
   19d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019d18 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   19d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d1c:	ed2d 8b02 	vpush	{d8}
   19d20:	b089      	sub	sp, #36	; 0x24
   19d22:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   19d24:	6803      	ldr	r3, [r0, #0]
   19d26:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   19d28:	6843      	ldr	r3, [r0, #4]
   19d2a:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   19d2c:	6883      	ldr	r3, [r0, #8]
   19d2e:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   19d30:	68c3      	ldr	r3, [r0, #12]
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d32:	682f      	ldr	r7, [r5, #0]
    int8_t* output_data) {
   19d34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  const int32 output_multiplier = params.output_multiplier;
   19d36:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   19d3a:	6903      	ldr	r3, [r0, #16]
   19d3c:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   19d40:	6943      	ldr	r3, [r0, #20]
   19d42:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d44:	2f01      	cmp	r7, #1
  const int32 output_activation_max = params.quantized_activation_max;
   19d46:	6983      	ldr	r3, [r0, #24]
   19d48:	9301      	str	r3, [sp, #4]
    int8_t* output_data) {
   19d4a:	4614      	mov	r4, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   19d4c:	dc01      	bgt.n	19d52 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x3a>
   19d4e:	f004 fc51 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   19d52:	6833      	ldr	r3, [r6, #0]
   19d54:	2b02      	cmp	r3, #2
   19d56:	d1fa      	bne.n	19d4e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   19d58:	e9dd 3200 	ldrd	r3, r2, [sp]
   19d5c:	4293      	cmp	r3, r2
   19d5e:	dcf6      	bgt.n	19d4e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   19d60:	2100      	movs	r1, #0
   19d62:	4630      	mov	r0, r6
   19d64:	f7fb fdbd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   19d68:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   19d6a:	9006      	str	r0, [sp, #24]
  const int output_depth = output_shape.Dims(1);
   19d6c:	4630      	mov	r0, r6
   19d6e:	f7fb fdb8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   19d72:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
   19d74:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   19d76:	4628      	mov	r0, r5
   19d78:	f7fb fdb3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   19d7c:	42b0      	cmp	r0, r6
   19d7e:	dbe6      	blt.n	19d4e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   19d80:	1e79      	subs	r1, r7, #1
   19d82:	4628      	mov	r0, r5
   19d84:	f7fb fdad 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   19d88:	2700      	movs	r7, #0
   19d8a:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   19d8c:	46ba      	mov	sl, r7
   19d8e:	9b06      	ldr	r3, [sp, #24]
   19d90:	459a      	cmp	sl, r3
   19d92:	da41      	bge.n	19e18 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x100>
   19d94:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19d96:	f04f 0800 	mov.w	r8, #0
   19d9a:	eb03 0b07 	add.w	fp, r3, r7
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19d9e:	46c1      	mov	r9, r8
   19da0:	45b1      	cmp	r9, r6
   19da2:	da34      	bge.n	19e0e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf6>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   19da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19da6:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   19daa:	2300      	movs	r3, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19dac:	46a6      	mov	lr, r4
      for (int d = 0; d < accum_depth; ++d) {
   19dae:	461a      	mov	r2, r3
   19db0:	42aa      	cmp	r2, r5
   19db2:	da10      	bge.n	19dd6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xbe>
        int32 input_val = input_data[b * accum_depth + d];
   19db4:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19db8:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   19dba:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   19dbc:	f91c 1b01 	ldrsb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19dc0:	4401      	add	r1, r0
   19dc2:	9107      	str	r1, [sp, #28]
   19dc4:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   19dc8:	4401      	add	r1, r0
   19dca:	4608      	mov	r0, r1
   19dcc:	9907      	ldr	r1, [sp, #28]
      for (int d = 0; d < accum_depth; ++d) {
   19dce:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   19dd0:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   19dd4:	e7ec      	b.n	19db0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x98>
      }
      if (bias_data) {
   19dd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19dd8:	b112      	cbz	r2, 19de0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xc8>
        acc += bias_data[out_c];
   19dda:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   19dde:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   19de0:	4618      	mov	r0, r3
   19de2:	ee18 2a90 	vmov	r2, s17
   19de6:	ee18 1a10 	vmov	r1, s16
   19dea:	f7ef fd57 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   19dee:	9b05      	ldr	r3, [sp, #20]
   19df0:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   19df2:	9b00      	ldr	r3, [sp, #0]
   19df4:	4298      	cmp	r0, r3
   19df6:	bfb8      	it	lt
   19df8:	4618      	movlt	r0, r3
   19dfa:	9b01      	ldr	r3, [sp, #4]
   19dfc:	4298      	cmp	r0, r3
   19dfe:	bfa8      	it	ge
   19e00:	4618      	movge	r0, r3
   19e02:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   19e06:	f109 0901 	add.w	r9, r9, #1
   19e0a:	44a8      	add	r8, r5
   19e0c:	e7c8      	b.n	19da0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x88>
  for (int b = 0; b < batches; ++b) {
   19e0e:	f10a 0a01 	add.w	sl, sl, #1
   19e12:	4437      	add	r7, r6
   19e14:	442c      	add	r4, r5
   19e16:	e7ba      	b.n	19d8e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x76>
    }
  }
}
   19e18:	b009      	add	sp, #36	; 0x24
   19e1a:	ecbd 8b02 	vpop	{d8}
   19e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019e22 <_ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   19e22:	2000      	movs	r0, #0
   19e24:	4770      	bx	lr

00019e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   19e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const int dims_count = shape.DimensionsCount();
   19e2a:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   19e2c:	4604      	mov	r4, r0
   19e2e:	460d      	mov	r5, r1
   19e30:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   19e32:	2600      	movs	r6, #0
   19e34:	42be      	cmp	r6, r7
   19e36:	da10      	bge.n	19e5a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   19e38:	42ae      	cmp	r6, r5
   19e3a:	d00c      	beq.n	19e56 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   19e3c:	4631      	mov	r1, r6
   19e3e:	4620      	mov	r0, r4
   19e40:	f7fb fd4f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   19e44:	4631      	mov	r1, r6
   19e46:	4681      	mov	r9, r0
   19e48:	4640      	mov	r0, r8
   19e4a:	f7fb fd4a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   19e4e:	4581      	cmp	r9, r0
   19e50:	d001      	beq.n	19e56 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   19e52:	f004 fbcf 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
   19e56:	3601      	adds	r6, #1
   19e58:	e7ec      	b.n	19e34 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   19e5a:	2d00      	cmp	r5, #0
   19e5c:	dbf9      	blt.n	19e52 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   19e5e:	42bd      	cmp	r5, r7
   19e60:	daf7      	bge.n	19e52 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   19e62:	2f05      	cmp	r7, #5
   19e64:	bfcc      	ite	gt
   19e66:	6864      	ldrgt	r4, [r4, #4]
   19e68:	3404      	addle	r4, #4
  int flat_size = 1;
   19e6a:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   19e6c:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e6e:	429d      	cmp	r5, r3
   19e70:	bf18      	it	ne
   19e72:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   19e76:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e7a:	bf08      	it	eq
   19e7c:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   19e7e:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19e80:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   19e84:	dcf3      	bgt.n	19e6e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   19e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019e8a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const uint8* input_data,
                            const RuntimeShape& output_shape,
                            uint8* output_data) {
   19e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e8e:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   19e90:	6809      	ldr	r1, [r1, #0]
   19e92:	3901      	subs	r1, #1
                            uint8* output_data) {
   19e94:	b087      	sub	sp, #28
   19e96:	4606      	mov	r6, r0
   19e98:	4617      	mov	r7, r2
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19e9a:	4620      	mov	r0, r4
                            uint8* output_data) {
   19e9c:	461a      	mov	r2, r3
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19e9e:	460b      	mov	r3, r1
   19ea0:	e9cd 1201 	strd	r1, r2, [sp, #4]
   19ea4:	f7fe fbca 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19ea8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19eac:	4605      	mov	r5, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19eae:	4620      	mov	r0, r4
   19eb0:	f7ff ffb9 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int32 input_zero_point = op_params.input_zero_point;
   19eb4:	2400      	movs	r4, #0
   19eb6:	f8d6 b000 	ldr.w	fp, [r6]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19eba:	9001      	str	r0, [sp, #4]

  for (int i = 0; i < outer_size; ++i) {
   19ebc:	4626      	mov	r6, r4
   19ebe:	9b01      	ldr	r3, [sp, #4]
   19ec0:	429e      	cmp	r6, r3
   19ec2:	da3d      	bge.n	19f40 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
   19ec4:	eb07 0904 	add.w	r9, r7, r4
    int32 square_l2_norm = 0;
    for (int c = 0; c < depth; c++) {
   19ec8:	2300      	movs	r3, #0
  for (int i = 0; i < outer_size; ++i) {
   19eca:	4649      	mov	r1, r9
    int32 square_l2_norm = 0;
   19ecc:	4618      	mov	r0, r3
    for (int c = 0; c < depth; c++) {
   19ece:	42ab      	cmp	r3, r5
   19ed0:	da07      	bge.n	19ee2 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x58>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   19ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
   19ed6:	eba2 020b 	sub.w	r2, r2, fp
      square_l2_norm += diff * diff;
   19eda:	fb02 0002 	mla	r0, r2, r2, r0
    for (int c = 0; c < depth; c++) {
   19ede:	3301      	adds	r3, #1
   19ee0:	e7f5      	b.n	19ece <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x44>
    }
    int32 inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
   19ee2:	ab05      	add	r3, sp, #20
   19ee4:	aa04      	add	r2, sp, #16
   19ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19eea:	f7f1 fab7 	bl	b45c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
  return RoundingDivideByPOT(
   19eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19ef2:	f1c3 0a00 	rsb	sl, r3, #0
   19ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
                                     &inv_l2norm_multiplier, &inv_l2norm_shift);
    for (int c = 0; c < depth; c++) {
   19ef8:	f04f 0800 	mov.w	r8, #0
   19efc:	4423      	add	r3, r4
   19efe:	45a8      	cmp	r8, r5
   19f00:	9303      	str	r3, [sp, #12]
   19f02:	da1a      	bge.n	19f3a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   19f04:	f819 0b01 	ldrb.w	r0, [r9], #1
   19f08:	9202      	str	r2, [sp, #8]
   19f0a:	eba0 000b 	sub.w	r0, r0, fp
   19f0e:	4611      	mov	r1, r2
   19f10:	01c0      	lsls	r0, r0, #7
   19f12:	f7f1 fa4f 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   19f16:	4651      	mov	r1, sl
   19f18:	f7f1 fa7a 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      int32 rescaled_diff = MultiplyByQuantizedMultiplierSmallerThanOneExp(
          128 * diff, inv_l2norm_multiplier, inv_l2norm_shift);
      int32 unclamped_output_val = 128 + rescaled_diff;
   19f1c:	3080      	adds	r0, #128	; 0x80
      if (__a < __b)
   19f1e:	2800      	cmp	r0, #0
   19f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19f24:	dd07      	ble.n	19f36 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
      return __a;
   19f26:	28ff      	cmp	r0, #255	; 0xff
   19f28:	bfa8      	it	ge
   19f2a:	20ff      	movge	r0, #255	; 0xff
      int32 output_val =
          std::min(static_cast<int32>(255),
                   std::max(static_cast<int32>(0), unclamped_output_val));
      output_data[depth * i + c] = static_cast<uint8>(output_val);
   19f2c:	f803 0b01 	strb.w	r0, [r3], #1
    for (int c = 0; c < depth; c++) {
   19f30:	f108 0801 	add.w	r8, r8, #1
   19f34:	e7e3      	b.n	19efe <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x74>
      return __a;
   19f36:	2000      	movs	r0, #0
   19f38:	e7f8      	b.n	19f2c <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
  for (int i = 0; i < outer_size; ++i) {
   19f3a:	3601      	adds	r6, #1
   19f3c:	442c      	add	r4, r5
   19f3e:	e7be      	b.n	19ebe <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x34>
    }
  }
}
   19f40:	b007      	add	sp, #28
   19f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019f46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>:
namespace tflite {
namespace reference_integer_ops {

inline void L2Normalization(int32_t input_zero_point, int32_t outer_size,
                            int32_t depth, const int8* input_data,
                            int8* output_data) {
   19f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f4a:	b087      	sub	sp, #28
   19f4c:	2500      	movs	r5, #0
   19f4e:	4680      	mov	r8, r0
   19f50:	460f      	mov	r7, r1
   19f52:	4616      	mov	r6, r2
   19f54:	9301      	str	r3, [sp, #4]
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  // The output scale must be in sync with Prepare().
  // Output is in 1/128 scale so the actual output range is nudged from [-1, 1]
  // to [-1, 127/128].
  static constexpr int32_t kOutputScale = 7;
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19f56:	46a9      	mov	r9, r5
   19f58:	45b9      	cmp	r9, r7
   19f5a:	da4c      	bge.n	19ff6 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xb0>
   19f5c:	9b01      	ldr	r3, [sp, #4]
   19f5e:	eb03 0b05 	add.w	fp, r3, r5
    // int32 = (int8 - int8) ^ 2.
    // ([-128, 127] - [-128, 127]) ^ 2 = [0, (2^8 - 1)^2] so the accumulator is
    // safe from overflowing in at least 2^16 steps.
    int32_t acc = 0;
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f62:	2300      	movs	r3, #0
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19f64:	4659      	mov	r1, fp
    int32_t acc = 0;
   19f66:	4618      	mov	r0, r3
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f68:	42b3      	cmp	r3, r6
   19f6a:	da07      	bge.n	19f7c <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x36>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
   19f6c:	f911 2b01 	ldrsb.w	r2, [r1], #1
      int32_t input =
   19f70:	eba2 0208 	sub.w	r2, r2, r8
      acc += input * input;
   19f74:	fb02 0002 	mla	r0, r2, r2, r0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19f78:	3301      	adds	r3, #1
   19f7a:	e7f5      	b.n	19f68 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x22>
    }
    int32_t inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(acc, kReverseShift, &inv_l2norm_multiplier,
   19f7c:	ab05      	add	r3, sp, #20
   19f7e:	aa04      	add	r2, sp, #16
   19f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f84:	f7f1 fa6a 	bl	b45c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;

      // Rescale and downcast. Rescale is folded into the division.
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
   19f88:	e9dd 2404 	ldrd	r2, r4, [sp, #16]
   19f8c:	1de3      	adds	r3, r4, #7
  int left_shift = shift > 0 ? shift : 0;
   19f8e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   19f92:	2b00      	cmp	r3, #0
  int right_shift = shift > 0 ? 0 : -shift;
   19f94:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
   19f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
   19f9a:	9100      	str	r1, [sp, #0]
  int right_shift = shift > 0 ? 0 : -shift;
   19f9c:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
   19fa0:	f104 04f9 	add.w	r4, r4, #249	; 0xf9
   19fa4:	442b      	add	r3, r5
   19fa6:	bfc8      	it	gt
   19fa8:	2400      	movgt	r4, #0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19faa:	f04f 0a00 	mov.w	sl, #0
   19fae:	45b2      	cmp	sl, r6
   19fb0:	9303      	str	r3, [sp, #12]
   19fb2:	da1c      	bge.n	19fee <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa8>
          input_data[depth * outer_index + inner_index] - input_zero_point;
   19fb4:	f91b 0b01 	ldrsb.w	r0, [fp], #1
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   19fb8:	9b00      	ldr	r3, [sp, #0]
   19fba:	9202      	str	r2, [sp, #8]
      int32_t input =
   19fbc:	eba0 0008 	sub.w	r0, r0, r8
   19fc0:	4611      	mov	r1, r2
   19fc2:	4098      	lsls	r0, r3
   19fc4:	f7f1 f9f6 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   19fc8:	4621      	mov	r1, r4
   19fca:	f7f1 fa21 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   19fce:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   19fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19fd6:	db07      	blt.n	19fe8 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa2>
      return __a;
   19fd8:	287f      	cmp	r0, #127	; 0x7f
   19fda:	bfa8      	it	ge
   19fdc:	207f      	movge	r0, #127	; 0x7f
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
      output_in_q24 =
          std::min(static_cast<int32_t>(kMaxInt8),
                   std::max(static_cast<int32_t>(kMinInt8), output_in_q24));
      output_data[depth * outer_index + inner_index] =
   19fde:	f803 0b01 	strb.w	r0, [r3], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   19fe2:	f10a 0a01 	add.w	sl, sl, #1
   19fe6:	e7e2      	b.n	19fae <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x68>
      return __a;
   19fe8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19fec:	e7f7      	b.n	19fde <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x98>
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   19fee:	f109 0901 	add.w	r9, r9, #1
   19ff2:	4435      	add	r5, r6
   19ff4:	e7b0      	b.n	19f58 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x12>
          static_cast<int8>(output_in_q24);
    }
  }
}
   19ff6:	b007      	add	sp, #28
   19ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019ffc <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
bool LogicalOr(bool x, bool y) { return x || y; }
   19ffc:	2800      	cmp	r0, #0
   19ffe:	bf08      	it	eq
   1a000:	4608      	moveq	r0, r1
   1a002:	4770      	bx	lr

0001a004 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:
bool LogicalAnd(bool x, bool y) { return x && y; }
   1a004:	2800      	cmp	r0, #0
   1a006:	bf14      	ite	ne
   1a008:	4608      	movne	r0, r1
   1a00a:	2000      	moveq	r0, #0
   1a00c:	4770      	bx	lr

0001a00e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   1a00e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1a012:	6807      	ldr	r7, [r0, #0]
   1a014:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a016:	4699      	mov	r9, r3
   1a018:	6813      	ldr	r3, [r2, #0]
   1a01a:	429f      	cmp	r7, r3
   1a01c:	4604      	mov	r4, r0
   1a01e:	4688      	mov	r8, r1
   1a020:	4616      	mov	r6, r2
   1a022:	d001      	beq.n	1a028 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   1a024:	f004 fae6 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1a028:	f04f 0a00 	mov.w	sl, #0
   1a02c:	4557      	cmp	r7, sl
   1a02e:	dd0d      	ble.n	1a04c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a030:	4651      	mov	r1, sl
   1a032:	4620      	mov	r0, r4
   1a034:	f7fb fc55 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a038:	4651      	mov	r1, sl
   1a03a:	4683      	mov	fp, r0
   1a03c:	4630      	mov	r0, r6
   1a03e:	f7fb fc50 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a042:	4583      	cmp	fp, r0
   1a044:	d1ee      	bne.n	1a024 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a046:	f10a 0a01 	add.w	sl, sl, #1
   1a04a:	e7ef      	b.n	1a02c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1a04c:	682b      	ldr	r3, [r5, #0]
   1a04e:	429f      	cmp	r7, r3
   1a050:	d1e8      	bne.n	1a024 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a052:	f04f 0a00 	mov.w	sl, #0
   1a056:	4557      	cmp	r7, sl
   1a058:	dd0d      	ble.n	1a076 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a05a:	4651      	mov	r1, sl
   1a05c:	4620      	mov	r0, r4
   1a05e:	f7fb fc40 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a062:	4651      	mov	r1, sl
   1a064:	4606      	mov	r6, r0
   1a066:	4628      	mov	r0, r5
   1a068:	f7fb fc3b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a06c:	4286      	cmp	r6, r0
   1a06e:	d1d9      	bne.n	1a024 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   1a070:	f10a 0a01 	add.w	sl, sl, #1
   1a074:	e7ef      	b.n	1a056 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a076:	2f05      	cmp	r7, #5
   1a078:	bfcc      	ite	gt
   1a07a:	6864      	ldrgt	r4, [r4, #4]
   1a07c:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1a07e:	2300      	movs	r3, #0
    int buffer_size = 1;
   1a080:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
   1a084:	429f      	cmp	r7, r3
   1a086:	dd05      	ble.n	1a094 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   1a088:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1a08c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1a08e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   1a092:	e7f7      	b.n	1a084 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   1a094:	2400      	movs	r4, #0
   1a096:	4554      	cmp	r4, sl
   1a098:	da09      	bge.n	1a0ae <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   1a09a:	f819 1004 	ldrb.w	r1, [r9, r4]
   1a09e:	f818 0004 	ldrb.w	r0, [r8, r4]
   1a0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a0a4:	4798      	blx	r3
   1a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a0a8:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   1a0aa:	3401      	adds	r4, #1
   1a0ac:	e7f3      	b.n	1a096 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   1a0ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a0b2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   1a0b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0b6:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a0b8:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   1a0ba:	b0a7      	sub	sp, #156	; 0x9c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a0bc:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   1a0be:	4614      	mov	r4, r2
   1a0c0:	4605      	mov	r5, r0
   1a0c2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   1a0c4:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1a0c6:	dd01      	ble.n	1a0cc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   1a0c8:	f004 fa94 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1a0cc:	6823      	ldr	r3, [r4, #0]
   1a0ce:	2b04      	cmp	r3, #4
   1a0d0:	dcfa      	bgt.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1a0d2:	6813      	ldr	r3, [r2, #0]
   1a0d4:	2b04      	cmp	r3, #4
   1a0d6:	dcf7      	bgt.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   1a0d8:	2301      	movs	r3, #1
   1a0da:	2104      	movs	r1, #4
   1a0dc:	a804      	add	r0, sp, #16
   1a0de:	f7fb fc95 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a0e2:	2301      	movs	r3, #1
   1a0e4:	462a      	mov	r2, r5
   1a0e6:	2104      	movs	r1, #4
   1a0e8:	a80a      	add	r0, sp, #40	; 0x28
   1a0ea:	f7fb fc8f 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a0ee:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   1a0f2:	4622      	mov	r2, r4
   1a0f4:	2301      	movs	r3, #1
   1a0f6:	2104      	movs	r1, #4
   1a0f8:	a810      	add	r0, sp, #64	; 0x40
   1a0fa:	f7fb fc87 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a0fe:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a102:	4641      	mov	r1, r8
   1a104:	a80a      	add	r0, sp, #40	; 0x28
   1a106:	f7fb fe6f 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a10a:	4659      	mov	r1, fp
   1a10c:	a810      	add	r0, sp, #64	; 0x40
   1a10e:	f7fb fe6b 	bl	15de8 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   1a112:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a114:	2610      	movs	r6, #16
   1a116:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a118:	4621      	mov	r1, r4
   1a11a:	a80a      	add	r0, sp, #40	; 0x28
   1a11c:	f7fb fbe1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   1a120:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a122:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   1a124:	a810      	add	r0, sp, #64	; 0x40
   1a126:	f7fb fbdc 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   1a12a:	4285      	cmp	r5, r0
   1a12c:	d005      	beq.n	1a13a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      if (extent0 == 1) {
   1a12e:	2d01      	cmp	r5, #1
   1a130:	d166      	bne.n	1a200 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x14e>
        desc0_out->strides[i] = 0;
   1a132:	f848 7006 	str.w	r7, [r8, r6]
        desc0_out->extents[i] = extent1;
   1a136:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   1a13a:	3401      	adds	r4, #1
   1a13c:	2c04      	cmp	r4, #4
   1a13e:	f106 0604 	add.w	r6, r6, #4
   1a142:	d1e9      	bne.n	1a118 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x66>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   1a144:	a810      	add	r0, sp, #64	; 0x40
   1a146:	f7fb fbc1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   1a14a:	a80a      	add	r0, sp, #40	; 0x28
   1a14c:	f7fb fbbe 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1a150:	2400      	movs	r4, #0
   1a152:	2100      	movs	r1, #0
   1a154:	a804      	add	r0, sp, #16
   1a156:	f7fb fbc4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a15a:	42a0      	cmp	r0, r4
   1a15c:	dd5f      	ble.n	1a21e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1a15e:	2700      	movs	r7, #0
   1a160:	f10d 0810 	add.w	r8, sp, #16
   1a164:	2101      	movs	r1, #1
   1a166:	4640      	mov	r0, r8
   1a168:	f7fb fbbb 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a16c:	42b8      	cmp	r0, r7
   1a16e:	dd54      	ble.n	1a21a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x168>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1a170:	f04f 0900 	mov.w	r9, #0
   1a174:	2102      	movs	r1, #2
   1a176:	4640      	mov	r0, r8
   1a178:	f7fb fbb3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a17c:	4548      	cmp	r0, r9
   1a17e:	dd4a      	ble.n	1a216 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x164>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a180:	2500      	movs	r5, #0
   1a182:	2103      	movs	r1, #3
   1a184:	4640      	mov	r0, r8
   1a186:	f7fb fbac 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a18a:	42a8      	cmp	r0, r5
   1a18c:	dd40      	ble.n	1a210 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x15e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1a18e:	9904      	ldr	r1, [sp, #16]
   1a190:	2904      	cmp	r1, #4
   1a192:	d199      	bne.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1a194:	2c00      	cmp	r4, #0
   1a196:	db97      	blt.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a198:	9905      	ldr	r1, [sp, #20]
   1a19a:	428c      	cmp	r4, r1
   1a19c:	da94      	bge.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1a19e:	2f00      	cmp	r7, #0
   1a1a0:	db92      	blt.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a1a2:	9e06      	ldr	r6, [sp, #24]
   1a1a4:	42b7      	cmp	r7, r6
   1a1a6:	da8f      	bge.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1a1a8:	f1b9 0f00 	cmp.w	r9, #0
   1a1ac:	db8c      	blt.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a1ae:	9b07      	ldr	r3, [sp, #28]
   1a1b0:	4599      	cmp	r9, r3
   1a1b2:	da89      	bge.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1a1b4:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
   1a1b8:	d086      	beq.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   1a1ba:	9808      	ldr	r0, [sp, #32]
   1a1bc:	4285      	cmp	r5, r0
   1a1be:	da83      	bge.n	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1a1c0:	fb06 7604 	mla	r6, r6, r4, r7
   1a1c4:	fb03 9606 	mla	r6, r3, r6, r9
   1a1c8:	fb00 5606 	mla	r6, r0, r6, r5
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1a1cc:	9500      	str	r5, [sp, #0]
   1a1ce:	464b      	mov	r3, r9
   1a1d0:	463a      	mov	r2, r7
   1a1d2:	4621      	mov	r1, r4
   1a1d4:	a816      	add	r0, sp, #88	; 0x58
   1a1d6:	f7fb fc7c 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1a1da:	9500      	str	r5, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1a1dc:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1a1de:	464b      	mov	r3, r9
   1a1e0:	463a      	mov	r2, r7
   1a1e2:	4621      	mov	r1, r4
   1a1e4:	a81e      	add	r0, sp, #120	; 0x78
   1a1e6:	f7fb fc74 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   1a1ea:	9b03      	ldr	r3, [sp, #12]
   1a1ec:	f81a 1000 	ldrb.w	r1, [sl, r0]
   1a1f0:	f813 000b 	ldrb.w	r0, [r3, fp]
   1a1f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1a1f6:	4798      	blx	r3
   1a1f8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a1fa:	3501      	adds	r5, #1
          output_data[out_idx] = func(in1_val, in2_val);
   1a1fc:	5598      	strb	r0, [r3, r6]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1a1fe:	e7c0      	b.n	1a182 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
        TFLITE_DCHECK_EQ(extent1, 1);
   1a200:	2801      	cmp	r0, #1
   1a202:	f47f af61 	bne.w	1a0c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   1a206:	f84b 7006 	str.w	r7, [fp, r6]
        desc1_out->extents[i] = extent0;
   1a20a:	f84b 5024 	str.w	r5, [fp, r4, lsl #2]
   1a20e:	e794      	b.n	1a13a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1a210:	f109 0901 	add.w	r9, r9, #1
   1a214:	e7ae      	b.n	1a174 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xc2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1a216:	3701      	adds	r7, #1
   1a218:	e7a2      	b.n	1a160 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1a21a:	3401      	adds	r4, #1
   1a21c:	e799      	b.n	1a152 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
  const RuntimeShape output_shape =
   1a21e:	a804      	add	r0, sp, #16
   1a220:	f7fb fb54 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a224:	b027      	add	sp, #156	; 0x9c
   1a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a22a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>:
                         bool (*func)(bool, bool)) {
   1a22a:	b5f0      	push	{r4, r5, r6, r7, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   1a22c:	680b      	ldr	r3, [r1, #0]
   1a22e:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1a230:	685d      	ldr	r5, [r3, #4]
   1a232:	689e      	ldr	r6, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1a234:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1a236:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a23a:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1a23c:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  if (HaveSameShapes(input1, input2)) {
   1a240:	4631      	mov	r1, r6
                         bool (*func)(bool, bool)) {
   1a242:	b097      	sub	sp, #92	; 0x5c
  if (HaveSameShapes(input1, input2)) {
   1a244:	4628      	mov	r0, r5
                         bool (*func)(bool, bool)) {
   1a246:	4617      	mov	r7, r2
  return &context->tensors[node->outputs->data[index]];
   1a248:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  if (HaveSameShapes(input1, input2)) {
   1a24c:	f004 f919 	bl	1e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a250:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   1a252:	b330      	cbz	r0, 1a2a2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a254:	a804      	add	r0, sp, #16
   1a256:	f7fb fb7e 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a25a:	b105      	cbz	r5, 1a25e <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x34>
   1a25c:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a25e:	4631      	mov	r1, r6
   1a260:	a80a      	add	r0, sp, #40	; 0x28
   1a262:	f7fb fb78 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a266:	b106      	cbz	r6, 1a26a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x40>
   1a268:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a26a:	4621      	mov	r1, r4
   1a26c:	a810      	add	r0, sp, #64	; 0x40
   1a26e:	f7fb fb72 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a272:	b104      	cbz	r4, 1a276 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x4c>
   1a274:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   1a276:	ab10      	add	r3, sp, #64	; 0x40
   1a278:	9300      	str	r3, [sp, #0]
   1a27a:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1a27e:	4633      	mov	r3, r6
   1a280:	aa0a      	add	r2, sp, #40	; 0x28
   1a282:	4629      	mov	r1, r5
   1a284:	a804      	add	r0, sp, #16
   1a286:	f7ff fec2 	bl	1a00e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a28a:	a810      	add	r0, sp, #64	; 0x40
   1a28c:	f7fb fb1e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a290:	a80a      	add	r0, sp, #40	; 0x28
   1a292:	f7fb fb1b 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a296:	a804      	add	r0, sp, #16
   1a298:	f7fb fb18 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a29c:	2000      	movs	r0, #0
   1a29e:	b017      	add	sp, #92	; 0x5c
   1a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   1a2a2:	a804      	add	r0, sp, #16
   1a2a4:	f7fb fb57 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a2a8:	b105      	cbz	r5, 1a2ac <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x82>
   1a2aa:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   1a2ac:	4631      	mov	r1, r6
   1a2ae:	a80a      	add	r0, sp, #40	; 0x28
   1a2b0:	f7fb fb51 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a2b4:	b106      	cbz	r6, 1a2b8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x8e>
   1a2b6:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   1a2b8:	4621      	mov	r1, r4
   1a2ba:	a810      	add	r0, sp, #64	; 0x40
   1a2bc:	f7fb fb4b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a2c0:	b104      	cbz	r4, 1a2c4 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x9a>
   1a2c2:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   1a2c4:	ab10      	add	r3, sp, #64	; 0x40
   1a2c6:	9300      	str	r3, [sp, #0]
   1a2c8:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1a2cc:	4633      	mov	r3, r6
   1a2ce:	aa0a      	add	r2, sp, #40	; 0x28
   1a2d0:	4629      	mov	r1, r5
   1a2d2:	a804      	add	r0, sp, #16
   1a2d4:	f7ff feed 	bl	1a0b2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   1a2d8:	e7d7      	b.n	1a28a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x60>

0001a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   1a2da:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   1a2dc:	2100      	movs	r1, #0
   1a2de:	f7f1 f897 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   1a2e2:	bd08      	pop	{r3, pc}

0001a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   1a2e4:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1a2e6:	f7f1 f865 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   1a2ea:	bd08      	pop	{r3, pc}

0001a2ec <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>:
namespace reference_integer_ops {

inline void Logistic(int32_t input_zero_point, int32_t input_range_radius,
                     int32_t input_multiplier, int32_t input_left_shift,
                     int32_t input_size, const int8_t* input_data,
                     int8_t* output_data) {
   1a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f0:	2b00      	cmp	r3, #0
  int right_shift = shift > 0 ? 0 : -shift;
   1a2f2:	f1c3 0800 	rsb	r8, r3, #0
   1a2f6:	b089      	sub	sp, #36	; 0x24
   1a2f8:	4682      	mov	sl, r0
   1a2fa:	460f      	mov	r7, r1
   1a2fc:	4691      	mov	r9, r2
   1a2fe:	bfc8      	it	gt
   1a300:	f04f 0800 	movgt.w	r8, #0
  static constexpr int32_t kOutputIntegerBits = 8;
  static constexpr int8_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  static constexpr int32_t kOutputZeroPoint = -128;

  for (int i = 0; i < input_size; ++i) {
   1a304:	2400      	movs	r4, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1a306:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   1a30a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   1a30e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a310:	429c      	cmp	r4, r3
   1a312:	da55      	bge.n	1a3c0 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xd4>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1a314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a316:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   1a318:	eba0 000a 	sub.w	r0, r0, sl
    if (input <= -input_range_radius) {
   1a31c:	4583      	cmp	fp, r0
   1a31e:	db04      	blt.n	1a32a <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x3e>
      output_data[i] = kMinInt8;
   1a320:	2380      	movs	r3, #128	; 0x80
      int32_t output_in_q23 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
                                        static_cast<int32_t>(kMinInt8)),
                               static_cast<int32_t>(kMaxInt8));
      output_data[i] = static_cast<int8_t>(output_in_q23);
   1a322:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a324:	5513      	strb	r3, [r2, r4]
  for (int i = 0; i < input_size; ++i) {
   1a326:	3401      	adds	r4, #1
   1a328:	e7f1      	b.n	1a30e <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x22>
    } else if (input >= input_range_radius) {
   1a32a:	42b8      	cmp	r0, r7
   1a32c:	db01      	blt.n	1a332 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x46>
      output_data[i] = kMaxInt8;
   1a32e:	237f      	movs	r3, #127	; 0x7f
   1a330:	e7f7      	b.n	1a322 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1a332:	4649      	mov	r1, r9
   1a334:	40a8      	lsls	r0, r5
   1a336:	f7f1 f83d 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1a33a:	4641      	mov	r1, r8
   1a33c:	f7f1 f868 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   1a340:	2800      	cmp	r0, #0
   1a342:	dc39      	bgt.n	1a3b8 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xcc>
   1a344:	bf0c      	ite	eq
   1a346:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1a34a:	2200      	movne	r2, #0
   1a34c:	2300      	movs	r3, #0
  return ~a;
   1a34e:	43d9      	mvns	r1, r3
  return -a;
   1a350:	4246      	negs	r6, r0
  return a & b;
   1a352:	400e      	ands	r6, r1
   1a354:	4018      	ands	r0, r3
  return a ^ b;
   1a356:	4070      	eors	r0, r6

// Returns logistic(x) = 1 / (1 + exp(-x)) for x > 0.
template <typename tRawType, int tIntegerBits>
FixedPoint<tRawType, 0> logistic_on_positive_values(
    FixedPoint<tRawType, tIntegerBits> a) {
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   1a358:	4240      	negs	r0, r0
   1a35a:	9203      	str	r2, [sp, #12]
  return a & b;
   1a35c:	9102      	str	r1, [sp, #8]
   1a35e:	9301      	str	r3, [sp, #4]
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   1a360:	f7f1 fb2a 	bl	b9b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1a364:	f7f1 fa60 	bl	b828 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
   1a368:	4606      	mov	r6, r0
  tRawType mask_if_zero = MaskIfZero(a);
  InputF abs_input = SelectUsingMask(mask_if_positive, a, -a);
  ResultF result_if_positive = logistic_on_positive_values(abs_input);
  ResultF result_if_negative = ResultF::One() - result_if_positive;
  const ResultF one_half =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(ResultF, 1 << 30, 0.5);
   1a36a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1a36e:	f7ff ffb4 	bl	1a2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
   1a372:	9b01      	ldr	r3, [sp, #4]
   1a374:	9902      	ldr	r1, [sp, #8]
  return ~a;
   1a376:	9a03      	ldr	r2, [sp, #12]
  return a - b;
   1a378:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1a37c:	ebac 0c06 	sub.w	ip, ip, r6
  return a & b;
   1a380:	ea0c 0101 	and.w	r1, ip, r1
   1a384:	401e      	ands	r6, r3
  return a ^ b;
   1a386:	404e      	eors	r6, r1
  return ~a;
   1a388:	43d3      	mvns	r3, r2
  return a & b;
   1a38a:	401e      	ands	r6, r3
   1a38c:	4010      	ands	r0, r2
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
   1a38e:	2117      	movs	r1, #23
   1a390:	4070      	eors	r0, r6
   1a392:	f7f1 f83d 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                                        static_cast<int32_t>(kMinInt8)),
   1a396:	f06f 037f 	mvn.w	r3, #127	; 0x7f
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a39a:	3880      	subs	r0, #128	; 0x80
      if (__a < __b)
   1a39c:	4298      	cmp	r0, r3
                                        static_cast<int32_t>(kMinInt8)),
   1a39e:	9306      	str	r3, [sp, #24]
	return __b;
   1a3a0:	bfb4      	ite	lt
   1a3a2:	ab06      	addlt	r3, sp, #24
      return __a;
   1a3a4:	ab05      	addge	r3, sp, #20
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a3a6:	9005      	str	r0, [sp, #20]
                               static_cast<int32_t>(kMaxInt8));
   1a3a8:	227f      	movs	r2, #127	; 0x7f
   1a3aa:	9207      	str	r2, [sp, #28]
      if (__b < __a)
   1a3ac:	681a      	ldr	r2, [r3, #0]
   1a3ae:	2a7f      	cmp	r2, #127	; 0x7f
	return __b;
   1a3b0:	bfc8      	it	gt
   1a3b2:	ab07      	addgt	r3, sp, #28
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   1a3b4:	681b      	ldr	r3, [r3, #0]
   1a3b6:	e7b4      	b.n	1a322 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return a ? BitNot(zero) : zero;
   1a3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a3bc:	2200      	movs	r2, #0
   1a3be:	e7c6      	b.n	1a34e <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x62>
    }
  }
}
   1a3c0:	b009      	add	sp, #36	; 0x24
   1a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a3c6 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
    return el1 > el2 ? el1 : el2;
   1a3c6:	eeb4 0ae0 	vcmpe.f32	s0, s1
   1a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   1a3ce:	bfb8      	it	lt
   1a3d0:	eeb0 0a60 	vmovlt.f32	s0, s1
   1a3d4:	4770      	bx	lr

0001a3d6 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   1a3d6:	4288      	cmp	r0, r1
   1a3d8:	bf38      	it	cc
   1a3da:	4608      	movcc	r0, r1
   1a3dc:	4770      	bx	lr

0001a3de <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   1a3de:	4288      	cmp	r0, r1
   1a3e0:	bfb8      	it	lt
   1a3e2:	4608      	movlt	r0, r1
   1a3e4:	4770      	bx	lr

0001a3e6 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_>:
   1a3e6:	4288      	cmp	r0, r1
   1a3e8:	bfb8      	it	lt
   1a3ea:	4608      	movlt	r0, r1
   1a3ec:	4770      	bx	lr

0001a3ee <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   1a3ee:	b530      	push	{r4, r5, lr}
   1a3f0:	4614      	mov	r4, r2
   1a3f2:	461d      	mov	r5, r3
    return el1 > el2 ? el1 : el2;
   1a3f4:	42a0      	cmp	r0, r4
   1a3f6:	460b      	mov	r3, r1
   1a3f8:	eb73 0105 	sbcs.w	r1, r3, r5
   1a3fc:	4602      	mov	r2, r0
   1a3fe:	bfbc      	itt	lt
   1a400:	462b      	movlt	r3, r5
   1a402:	4622      	movlt	r2, r4
  }
   1a404:	4610      	mov	r0, r2
   1a406:	4619      	mov	r1, r3
   1a408:	bd30      	pop	{r4, r5, pc}

0001a40a <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
    return el1 < el2 ? el1 : el2;
   1a40a:	eeb4 0ae0 	vcmpe.f32	s0, s1
   1a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   1a412:	bf88      	it	hi
   1a414:	eeb0 0a60 	vmovhi.f32	s0, s1
   1a418:	4770      	bx	lr

0001a41a <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   1a41a:	4288      	cmp	r0, r1
   1a41c:	bf28      	it	cs
   1a41e:	4608      	movcs	r0, r1
   1a420:	4770      	bx	lr

0001a422 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   1a422:	4288      	cmp	r0, r1
   1a424:	bfa8      	it	ge
   1a426:	4608      	movge	r0, r1
   1a428:	4770      	bx	lr

0001a42a <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_>:
   1a42a:	4288      	cmp	r0, r1
   1a42c:	bfa8      	it	ge
   1a42e:	4608      	movge	r0, r1
   1a430:	4770      	bx	lr

0001a432 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   1a432:	b530      	push	{r4, r5, lr}
   1a434:	4614      	mov	r4, r2
   1a436:	461d      	mov	r5, r3
    return el1 < el2 ? el1 : el2;
   1a438:	4284      	cmp	r4, r0
   1a43a:	460b      	mov	r3, r1
   1a43c:	eb75 0103 	sbcs.w	r1, r5, r3
   1a440:	4602      	mov	r2, r0
   1a442:	bfbc      	itt	lt
   1a444:	462b      	movlt	r3, r5
   1a446:	4622      	movlt	r2, r4
  }
   1a448:	4610      	mov	r0, r2
   1a44a:	4619      	mov	r1, r3
   1a44c:	bd30      	pop	{r4, r5, pc}

0001a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
   1a44e:	b508      	push	{r3, lr}
    return this->size_ == comp.size_ &&
   1a450:	6802      	ldr	r2, [r0, #0]
   1a452:	680b      	ldr	r3, [r1, #0]
   1a454:	429a      	cmp	r2, r3
   1a456:	d10e      	bne.n	1a476 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a458:	2a05      	cmp	r2, #5
   1a45a:	bfcc      	ite	gt
   1a45c:	6840      	ldrgt	r0, [r0, #4]
   1a45e:	3004      	addle	r0, #4
   1a460:	2b05      	cmp	r3, #5
   1a462:	bfcc      	ite	gt
   1a464:	6849      	ldrgt	r1, [r1, #4]
   1a466:	3104      	addle	r1, #4
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   1a468:	0092      	lsls	r2, r2, #2
   1a46a:	f004 f8ca 	bl	1e602 <memcmp>
    return this->size_ == comp.size_ &&
   1a46e:	fab0 f080 	clz	r0, r0
   1a472:	0940      	lsrs	r0, r0, #5
  }
   1a474:	bd08      	pop	{r3, pc}
    return this->size_ == comp.size_ &&
   1a476:	2000      	movs	r0, #0
   1a478:	e7fc      	b.n	1a474 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x26>

0001a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>:
inline int SubscriptToIndex(const NdArrayDesc<5>& desc, int indexes[5]) {
   1a47a:	b530      	push	{r4, r5, lr}
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
   1a47c:	684a      	ldr	r2, [r1, #4]
   1a47e:	6984      	ldr	r4, [r0, #24]
   1a480:	680b      	ldr	r3, [r1, #0]
   1a482:	6945      	ldr	r5, [r0, #20]
   1a484:	4362      	muls	r2, r4
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   1a486:	fb05 2203 	mla	r2, r5, r3, r2
   1a48a:	6a04      	ldr	r4, [r0, #32]
   1a48c:	68cb      	ldr	r3, [r1, #12]
   1a48e:	fb04 2203 	mla	r2, r4, r3, r2
   1a492:	69c4      	ldr	r4, [r0, #28]
   1a494:	688b      	ldr	r3, [r1, #8]
         indexes[4] * desc.strides[4];
   1a496:	6a40      	ldr	r0, [r0, #36]	; 0x24
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   1a498:	fb04 2303 	mla	r3, r4, r3, r2
         indexes[4] * desc.strides[4];
   1a49c:	690a      	ldr	r2, [r1, #16]
}
   1a49e:	fb00 3002 	mla	r0, r0, r2, r3
   1a4a2:	bd30      	pop	{r4, r5, pc}

0001a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   1a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4a6:	4606      	mov	r6, r0
   1a4a8:	f101 0510 	add.w	r5, r1, #16
  for (int i = N - 1; i >= 0; --i) {
   1a4ac:	2404      	movs	r4, #4
  int desc_stride = 1;
   1a4ae:	2701      	movs	r7, #1
    desc_out->extents[i] = input_shape.Dims(i);
   1a4b0:	4621      	mov	r1, r4
   1a4b2:	4630      	mov	r0, r6
   1a4b4:	f7fb fa15 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a4b8:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   1a4bc:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   1a4be:	61af      	str	r7, [r5, #24]
    desc_stride *= input_shape.Dims(i);
   1a4c0:	4630      	mov	r0, r6
   1a4c2:	f7fb fa0e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   1a4c6:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   1a4c8:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   1a4cc:	d2f0      	bcs.n	1a4b0 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   1a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   1a4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a4d4:	460c      	mov	r4, r1
   1a4d6:	b08d      	sub	sp, #52	; 0x34
   1a4d8:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   1a4da:	4615      	mov	r5, r2
   1a4dc:	b90a      	cbnz	r2, 1a4e2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   1a4de:	f004 f889 	bl	1e5f4 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   1a4e2:	2b00      	cmp	r3, #0
   1a4e4:	d0fb      	beq.n	1a4de <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   1a4e6:	4602      	mov	r2, r0
   1a4e8:	2301      	movs	r3, #1
   1a4ea:	2105      	movs	r1, #5
   1a4ec:	4668      	mov	r0, sp
   1a4ee:	f7fb fa8d 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a4f2:	4622      	mov	r2, r4
   1a4f4:	2301      	movs	r3, #1
   1a4f6:	2105      	movs	r1, #5
   1a4f8:	a806      	add	r0, sp, #24
   1a4fa:	f7fb fa87 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   1a4fe:	4629      	mov	r1, r5
   1a500:	4668      	mov	r0, sp
   1a502:	f7ff ffcf 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a506:	4631      	mov	r1, r6
   1a508:	a806      	add	r0, sp, #24
   1a50a:	f7ff ffcb 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   1a50e:	2400      	movs	r4, #0
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   1a510:	f04f 0814 	mov.w	r8, #20
   1a514:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a516:	4621      	mov	r1, r4
   1a518:	4668      	mov	r0, sp
   1a51a:	f7fb f9e2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   1a51e:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   1a520:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   1a522:	a806      	add	r0, sp, #24
   1a524:	f7fb f9dd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   1a528:	4287      	cmp	r7, r0
   1a52a:	d005      	beq.n	1a538 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   1a52c:	2f01      	cmp	r7, #1
   1a52e:	d111      	bne.n	1a554 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   1a530:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   1a534:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   1a538:	3401      	adds	r4, #1
   1a53a:	2c05      	cmp	r4, #5
   1a53c:	f108 0804 	add.w	r8, r8, #4
   1a540:	d1e9      	bne.n	1a516 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   1a542:	a806      	add	r0, sp, #24
   1a544:	f7fb f9c2 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   1a548:	4668      	mov	r0, sp
   1a54a:	f7fb f9bf 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1a54e:	b00d      	add	sp, #52	; 0x34
   1a550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   1a554:	2801      	cmp	r0, #1
   1a556:	d1c2      	bne.n	1a4de <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   1a558:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   1a55c:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   1a560:	e7ea      	b.n	1a538 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

0001a562 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a566:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a568:	4606      	mov	r6, r0
   1a56a:	460d      	mov	r5, r1
   1a56c:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a56e:	60d7      	str	r7, [r2, #12]
   1a570:	68e2      	ldr	r2, [r4, #12]
   1a572:	68f3      	ldr	r3, [r6, #12]
   1a574:	429a      	cmp	r2, r3
   1a576:	da2f      	bge.n	1a5d8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x76>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a578:	6127      	str	r7, [r4, #16]
   1a57a:	6922      	ldr	r2, [r4, #16]
   1a57c:	6933      	ldr	r3, [r6, #16]
   1a57e:	429a      	cmp	r2, r3
   1a580:	da26      	bge.n	1a5d0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
                   &output_desc);

    auto maxmin_func = [&](int indexes[N]) {
      output_data[SubscriptToIndex(output_desc, indexes)] =
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a582:	6928      	ldr	r0, [r5, #16]
   1a584:	4621      	mov	r1, r4
   1a586:	f7ff ff78 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a58a:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a58c:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a58e:	69a8      	ldr	r0, [r5, #24]
   1a590:	f7ff ff73 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a594:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a596:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a598:	6868      	ldr	r0, [r5, #4]
   1a59a:	f7ff ff6e 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a59e:	682b      	ldr	r3, [r5, #0]
   1a5a0:	681b      	ldr	r3, [r3, #0]
   1a5a2:	eb03 0880 	add.w	r8, r3, r0, lsl #2
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a5a6:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a5a8:	681a      	ldr	r2, [r3, #0]
   1a5aa:	68eb      	ldr	r3, [r5, #12]
   1a5ac:	6818      	ldr	r0, [r3, #0]
   1a5ae:	68ab      	ldr	r3, [r5, #8]
   1a5b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1a5b4:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   1a5b8:	681b      	ldr	r3, [r3, #0]
   1a5ba:	edd2 0a00 	vldr	s1, [r2]
   1a5be:	ed90 0a00 	vldr	s0, [r0]
   1a5c2:	4798      	blx	r3
   1a5c4:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a5c6:	ed88 0a00 	vstr	s0, [r8]
   1a5ca:	3301      	adds	r3, #1
   1a5cc:	6123      	str	r3, [r4, #16]
   1a5ce:	e7d4      	b.n	1a57a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a5d0:	68e3      	ldr	r3, [r4, #12]
   1a5d2:	3301      	adds	r3, #1
   1a5d4:	60e3      	str	r3, [r4, #12]
   1a5d6:	e7cb      	b.n	1a570 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a5dc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5e0:	b0ae      	sub	sp, #184	; 0xb8
   1a5e2:	4605      	mov	r5, r0
   1a5e4:	9103      	str	r1, [sp, #12]
   1a5e6:	4611      	mov	r1, r2
   1a5e8:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a5ea:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a5ec:	9201      	str	r2, [sp, #4]
   1a5ee:	f7ff ff2e 	bl	1a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a5f2:	9901      	ldr	r1, [sp, #4]
   1a5f4:	4604      	mov	r4, r0
   1a5f6:	b1d0      	cbz	r0, 1a62e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a5f8:	4632      	mov	r2, r6
   1a5fa:	4628      	mov	r0, r5
   1a5fc:	f7fb fa55 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a600:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a602:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   1a604:	42b4      	cmp	r4, r6
   1a606:	da61      	bge.n	1a6cc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a608:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   1a60a:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   1a60e:	9b02      	ldr	r3, [sp, #8]
   1a610:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1a614:	9b03      	ldr	r3, [sp, #12]
   1a616:	edd2 0a00 	vldr	s1, [r2]
   1a61a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1a61e:	ed93 0a00 	vldr	s0, [r3]
   1a622:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a624:	4798      	blx	r3
    for (int i = 0; i < flat_size; ++i) {
   1a626:	3401      	adds	r4, #1
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a628:	ed85 0a00 	vstr	s0, [r5]
    for (int i = 0; i < flat_size; ++i) {
   1a62c:	e7ea      	b.n	1a604 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a62e:	682b      	ldr	r3, [r5, #0]
   1a630:	2b05      	cmp	r3, #5
   1a632:	dd01      	ble.n	1a638 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   1a634:	f003 ffde 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a638:	680b      	ldr	r3, [r1, #0]
   1a63a:	2b05      	cmp	r3, #5
   1a63c:	dcfa      	bgt.n	1a634 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a63e:	6833      	ldr	r3, [r6, #0]
   1a640:	2b05      	cmp	r3, #5
   1a642:	dcf7      	bgt.n	1a634 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   1a644:	af1a      	add	r7, sp, #104	; 0x68
   1a646:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a64a:	4628      	mov	r0, r5
   1a64c:	463b      	mov	r3, r7
   1a64e:	4642      	mov	r2, r8
   1a650:	f7ff ff3e 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a654:	ad24      	add	r5, sp, #144	; 0x90
   1a656:	2301      	movs	r3, #1
   1a658:	4632      	mov	r2, r6
   1a65a:	2105      	movs	r1, #5
   1a65c:	a809      	add	r0, sp, #36	; 0x24
   1a65e:	f7fb f9d5 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a662:	4629      	mov	r1, r5
   1a664:	a809      	add	r0, sp, #36	; 0x24
   1a666:	f7ff ff1d 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a66a:	a809      	add	r0, sp, #36	; 0x24
   1a66c:	f7fb f92e 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a670:	ab35      	add	r3, sp, #212	; 0xd4
   1a672:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a676:	ab36      	add	r3, sp, #216	; 0xd8
   1a678:	930b      	str	r3, [sp, #44]	; 0x2c
   1a67a:	ab03      	add	r3, sp, #12
   1a67c:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a680:	ab02      	add	r3, sp, #8
   1a682:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a686:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a68a:	9404      	str	r4, [sp, #16]
   1a68c:	9a04      	ldr	r2, [sp, #16]
   1a68e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a690:	429a      	cmp	r2, r3
   1a692:	da1b      	bge.n	1a6cc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
   1a694:	2400      	movs	r4, #0
   1a696:	9405      	str	r4, [sp, #20]
   1a698:	9a05      	ldr	r2, [sp, #20]
   1a69a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a69c:	429a      	cmp	r2, r3
   1a69e:	da11      	bge.n	1a6c4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
   1a6a0:	9406      	str	r4, [sp, #24]
   1a6a2:	9a06      	ldr	r2, [sp, #24]
   1a6a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a6a6:	429a      	cmp	r2, r3
   1a6a8:	da08      	bge.n	1a6bc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a6aa:	aa04      	add	r2, sp, #16
   1a6ac:	a909      	add	r1, sp, #36	; 0x24
   1a6ae:	4628      	mov	r0, r5
   1a6b0:	f7ff ff57 	bl	1a562 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6b4:	9b06      	ldr	r3, [sp, #24]
   1a6b6:	3301      	adds	r3, #1
   1a6b8:	9306      	str	r3, [sp, #24]
   1a6ba:	e7f2      	b.n	1a6a2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc6>
   1a6bc:	9b05      	ldr	r3, [sp, #20]
   1a6be:	3301      	adds	r3, #1
   1a6c0:	9305      	str	r3, [sp, #20]
   1a6c2:	e7e9      	b.n	1a698 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   1a6c4:	9b04      	ldr	r3, [sp, #16]
   1a6c6:	3301      	adds	r3, #1
   1a6c8:	9304      	str	r3, [sp, #16]
   1a6ca:	e7df      	b.n	1a68c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
    };
    NDOpsHelper<N>(output_desc, maxmin_func);
  }
}
   1a6cc:	b02e      	add	sp, #184	; 0xb8
   1a6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a6d2 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a6d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6d6:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a6d8:	4606      	mov	r6, r0
   1a6da:	460d      	mov	r5, r1
   1a6dc:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6de:	60d7      	str	r7, [r2, #12]
   1a6e0:	68e2      	ldr	r2, [r4, #12]
   1a6e2:	68f3      	ldr	r3, [r6, #12]
   1a6e4:	429a      	cmp	r2, r3
   1a6e6:	da2b      	bge.n	1a740 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a6e8:	6127      	str	r7, [r4, #16]
   1a6ea:	6922      	ldr	r2, [r4, #16]
   1a6ec:	6933      	ldr	r3, [r6, #16]
   1a6ee:	429a      	cmp	r2, r3
   1a6f0:	da22      	bge.n	1a738 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a6f2:	6928      	ldr	r0, [r5, #16]
   1a6f4:	4621      	mov	r1, r4
   1a6f6:	f7ff fec0 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6fa:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a6fc:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a6fe:	69a8      	ldr	r0, [r5, #24]
   1a700:	f7ff febb 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a704:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a706:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a708:	6868      	ldr	r0, [r5, #4]
   1a70a:	f7ff feb6 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a70e:	682b      	ldr	r3, [r5, #0]
   1a710:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a714:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a716:	6819      	ldr	r1, [r3, #0]
   1a718:	68eb      	ldr	r3, [r5, #12]
   1a71a:	f811 100a 	ldrb.w	r1, [r1, sl]
   1a71e:	681a      	ldr	r2, [r3, #0]
   1a720:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a722:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a724:	681b      	ldr	r3, [r3, #0]
   1a726:	f812 0009 	ldrb.w	r0, [r2, r9]
   1a72a:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a72c:	f80b 0008 	strb.w	r0, [fp, r8]
   1a730:	6923      	ldr	r3, [r4, #16]
   1a732:	3301      	adds	r3, #1
   1a734:	6123      	str	r3, [r4, #16]
   1a736:	e7d8      	b.n	1a6ea <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a738:	68e3      	ldr	r3, [r4, #12]
   1a73a:	3301      	adds	r3, #1
   1a73c:	60e3      	str	r3, [r4, #12]
   1a73e:	e7cf      	b.n	1a6e0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a744 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a748:	b0ae      	sub	sp, #184	; 0xb8
   1a74a:	4605      	mov	r5, r0
   1a74c:	9103      	str	r1, [sp, #12]
   1a74e:	4611      	mov	r1, r2
   1a750:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a752:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a754:	9201      	str	r2, [sp, #4]
   1a756:	f7ff fe7a 	bl	1a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a75a:	9901      	ldr	r1, [sp, #4]
   1a75c:	4604      	mov	r4, r0
   1a75e:	b188      	cbz	r0, 1a784 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a760:	4628      	mov	r0, r5
   1a762:	4632      	mov	r2, r6
   1a764:	f7fb f9a1 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a768:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a76a:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1a76c:	42ac      	cmp	r4, r5
   1a76e:	da58      	bge.n	1a822 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a770:	9b02      	ldr	r3, [sp, #8]
   1a772:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1a774:	5d19      	ldrb	r1, [r3, r4]
   1a776:	9b03      	ldr	r3, [sp, #12]
   1a778:	5d18      	ldrb	r0, [r3, r4]
   1a77a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a77c:	4798      	blx	r3
   1a77e:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   1a780:	3401      	adds	r4, #1
   1a782:	e7f3      	b.n	1a76c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a784:	682b      	ldr	r3, [r5, #0]
   1a786:	2b05      	cmp	r3, #5
   1a788:	dd01      	ble.n	1a78e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   1a78a:	f003 ff33 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a78e:	680b      	ldr	r3, [r1, #0]
   1a790:	2b05      	cmp	r3, #5
   1a792:	dcfa      	bgt.n	1a78a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a794:	6833      	ldr	r3, [r6, #0]
   1a796:	2b05      	cmp	r3, #5
   1a798:	dcf7      	bgt.n	1a78a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   1a79a:	af1a      	add	r7, sp, #104	; 0x68
   1a79c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a7a0:	4628      	mov	r0, r5
   1a7a2:	463b      	mov	r3, r7
   1a7a4:	4642      	mov	r2, r8
   1a7a6:	f7ff fe93 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a7aa:	ad24      	add	r5, sp, #144	; 0x90
   1a7ac:	2301      	movs	r3, #1
   1a7ae:	4632      	mov	r2, r6
   1a7b0:	2105      	movs	r1, #5
   1a7b2:	a809      	add	r0, sp, #36	; 0x24
   1a7b4:	f7fb f92a 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a7b8:	4629      	mov	r1, r5
   1a7ba:	a809      	add	r0, sp, #36	; 0x24
   1a7bc:	f7ff fe72 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a7c0:	a809      	add	r0, sp, #36	; 0x24
   1a7c2:	f7fb f883 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a7c6:	ab35      	add	r3, sp, #212	; 0xd4
   1a7c8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a7cc:	ab36      	add	r3, sp, #216	; 0xd8
   1a7ce:	930b      	str	r3, [sp, #44]	; 0x2c
   1a7d0:	ab03      	add	r3, sp, #12
   1a7d2:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a7d6:	ab02      	add	r3, sp, #8
   1a7d8:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a7dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a7e0:	9404      	str	r4, [sp, #16]
   1a7e2:	9a04      	ldr	r2, [sp, #16]
   1a7e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a7e6:	429a      	cmp	r2, r3
   1a7e8:	da1b      	bge.n	1a822 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   1a7ea:	2400      	movs	r4, #0
   1a7ec:	9405      	str	r4, [sp, #20]
   1a7ee:	9a05      	ldr	r2, [sp, #20]
   1a7f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a7f2:	429a      	cmp	r2, r3
   1a7f4:	da11      	bge.n	1a81a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
   1a7f6:	9406      	str	r4, [sp, #24]
   1a7f8:	9a06      	ldr	r2, [sp, #24]
   1a7fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a7fc:	429a      	cmp	r2, r3
   1a7fe:	da08      	bge.n	1a812 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xce>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a800:	aa04      	add	r2, sp, #16
   1a802:	a909      	add	r1, sp, #36	; 0x24
   1a804:	4628      	mov	r0, r5
   1a806:	f7ff ff64 	bl	1a6d2 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a80a:	9b06      	ldr	r3, [sp, #24]
   1a80c:	3301      	adds	r3, #1
   1a80e:	9306      	str	r3, [sp, #24]
   1a810:	e7f2      	b.n	1a7f8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
   1a812:	9b05      	ldr	r3, [sp, #20]
   1a814:	3301      	adds	r3, #1
   1a816:	9305      	str	r3, [sp, #20]
   1a818:	e7e9      	b.n	1a7ee <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xaa>
   1a81a:	9b04      	ldr	r3, [sp, #16]
   1a81c:	3301      	adds	r3, #1
   1a81e:	9304      	str	r3, [sp, #16]
   1a820:	e7df      	b.n	1a7e2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x9e>
}
   1a822:	b02e      	add	sp, #184	; 0xb8
   1a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a828 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a82c:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a82e:	4606      	mov	r6, r0
   1a830:	460d      	mov	r5, r1
   1a832:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a834:	60d7      	str	r7, [r2, #12]
   1a836:	68e2      	ldr	r2, [r4, #12]
   1a838:	68f3      	ldr	r3, [r6, #12]
   1a83a:	429a      	cmp	r2, r3
   1a83c:	da2b      	bge.n	1a896 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a83e:	6127      	str	r7, [r4, #16]
   1a840:	6922      	ldr	r2, [r4, #16]
   1a842:	6933      	ldr	r3, [r6, #16]
   1a844:	429a      	cmp	r2, r3
   1a846:	da22      	bge.n	1a88e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a848:	6928      	ldr	r0, [r5, #16]
   1a84a:	4621      	mov	r1, r4
   1a84c:	f7ff fe15 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a850:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a852:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a854:	69a8      	ldr	r0, [r5, #24]
   1a856:	f7ff fe10 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a85a:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a85c:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a85e:	6868      	ldr	r0, [r5, #4]
   1a860:	f7ff fe0b 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a864:	682b      	ldr	r3, [r5, #0]
   1a866:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a86a:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a86c:	6819      	ldr	r1, [r3, #0]
   1a86e:	68eb      	ldr	r3, [r5, #12]
   1a870:	f911 100a 	ldrsb.w	r1, [r1, sl]
   1a874:	681a      	ldr	r2, [r3, #0]
   1a876:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a878:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a87a:	681b      	ldr	r3, [r3, #0]
   1a87c:	f912 0009 	ldrsb.w	r0, [r2, r9]
   1a880:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a882:	f80b 0008 	strb.w	r0, [fp, r8]
   1a886:	6923      	ldr	r3, [r4, #16]
   1a888:	3301      	adds	r3, #1
   1a88a:	6123      	str	r3, [r4, #16]
   1a88c:	e7d8      	b.n	1a840 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a88e:	68e3      	ldr	r3, [r4, #12]
   1a890:	3301      	adds	r3, #1
   1a892:	60e3      	str	r3, [r4, #12]
   1a894:	e7cf      	b.n	1a836 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a89e:	b0ae      	sub	sp, #184	; 0xb8
   1a8a0:	4605      	mov	r5, r0
   1a8a2:	9103      	str	r1, [sp, #12]
   1a8a4:	4611      	mov	r1, r2
   1a8a6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a8a8:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1a8aa:	9201      	str	r2, [sp, #4]
   1a8ac:	f7ff fdcf 	bl	1a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1a8b0:	9901      	ldr	r1, [sp, #4]
   1a8b2:	4604      	mov	r4, r0
   1a8b4:	b188      	cbz	r0, 1a8da <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a8b6:	4628      	mov	r0, r5
   1a8b8:	4632      	mov	r2, r6
   1a8ba:	f7fb f8f6 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1a8be:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1a8c0:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1a8c2:	42ac      	cmp	r4, r5
   1a8c4:	da58      	bge.n	1a978 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1a8c6:	9b02      	ldr	r3, [sp, #8]
   1a8c8:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1a8ca:	5719      	ldrsb	r1, [r3, r4]
   1a8cc:	9b03      	ldr	r3, [sp, #12]
   1a8ce:	5718      	ldrsb	r0, [r3, r4]
   1a8d0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a8d2:	4798      	blx	r3
   1a8d4:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   1a8d6:	3401      	adds	r4, #1
   1a8d8:	e7f3      	b.n	1a8c2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1a8da:	682b      	ldr	r3, [r5, #0]
   1a8dc:	2b05      	cmp	r3, #5
   1a8de:	dd01      	ble.n	1a8e4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   1a8e0:	f003 fe88 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1a8e4:	680b      	ldr	r3, [r1, #0]
   1a8e6:	2b05      	cmp	r3, #5
   1a8e8:	dcfa      	bgt.n	1a8e0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1a8ea:	6833      	ldr	r3, [r6, #0]
   1a8ec:	2b05      	cmp	r3, #5
   1a8ee:	dcf7      	bgt.n	1a8e0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   1a8f0:	af1a      	add	r7, sp, #104	; 0x68
   1a8f2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a8f6:	4628      	mov	r0, r5
   1a8f8:	463b      	mov	r3, r7
   1a8fa:	4642      	mov	r2, r8
   1a8fc:	f7ff fde8 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1a900:	ad24      	add	r5, sp, #144	; 0x90
   1a902:	2301      	movs	r3, #1
   1a904:	4632      	mov	r2, r6
   1a906:	2105      	movs	r1, #5
   1a908:	a809      	add	r0, sp, #36	; 0x24
   1a90a:	f7fb f87f 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1a90e:	4629      	mov	r1, r5
   1a910:	a809      	add	r0, sp, #36	; 0x24
   1a912:	f7ff fdc7 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1a916:	a809      	add	r0, sp, #36	; 0x24
   1a918:	f7fa ffd8 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1a91c:	ab35      	add	r3, sp, #212	; 0xd4
   1a91e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1a922:	ab36      	add	r3, sp, #216	; 0xd8
   1a924:	930b      	str	r3, [sp, #44]	; 0x2c
   1a926:	ab03      	add	r3, sp, #12
   1a928:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1a92c:	ab02      	add	r3, sp, #8
   1a92e:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1a932:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a936:	9404      	str	r4, [sp, #16]
   1a938:	9a04      	ldr	r2, [sp, #16]
   1a93a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a93c:	429a      	cmp	r2, r3
   1a93e:	da1b      	bge.n	1a978 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   1a940:	2400      	movs	r4, #0
   1a942:	9405      	str	r4, [sp, #20]
   1a944:	9a05      	ldr	r2, [sp, #20]
   1a946:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a948:	429a      	cmp	r2, r3
   1a94a:	da11      	bge.n	1a970 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
   1a94c:	9406      	str	r4, [sp, #24]
   1a94e:	9a06      	ldr	r2, [sp, #24]
   1a950:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a952:	429a      	cmp	r2, r3
   1a954:	da08      	bge.n	1a968 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xce>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1a956:	aa04      	add	r2, sp, #16
   1a958:	a909      	add	r1, sp, #36	; 0x24
   1a95a:	4628      	mov	r0, r5
   1a95c:	f7ff ff64 	bl	1a828 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a960:	9b06      	ldr	r3, [sp, #24]
   1a962:	3301      	adds	r3, #1
   1a964:	9306      	str	r3, [sp, #24]
   1a966:	e7f2      	b.n	1a94e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
   1a968:	9b05      	ldr	r3, [sp, #20]
   1a96a:	3301      	adds	r3, #1
   1a96c:	9305      	str	r3, [sp, #20]
   1a96e:	e7e9      	b.n	1a944 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xaa>
   1a970:	9b04      	ldr	r3, [sp, #16]
   1a972:	3301      	adds	r3, #1
   1a974:	9304      	str	r3, [sp, #16]
   1a976:	e7df      	b.n	1a938 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x9e>
}
   1a978:	b02e      	add	sp, #184	; 0xb8
   1a97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a97e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a97e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a982:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1a984:	4606      	mov	r6, r0
   1a986:	460d      	mov	r5, r1
   1a988:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a98a:	60d7      	str	r7, [r2, #12]
   1a98c:	68e2      	ldr	r2, [r4, #12]
   1a98e:	68f3      	ldr	r3, [r6, #12]
   1a990:	429a      	cmp	r2, r3
   1a992:	da2b      	bge.n	1a9ec <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a994:	6127      	str	r7, [r4, #16]
   1a996:	6922      	ldr	r2, [r4, #16]
   1a998:	6933      	ldr	r3, [r6, #16]
   1a99a:	429a      	cmp	r2, r3
   1a99c:	da22      	bge.n	1a9e4 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a99e:	6928      	ldr	r0, [r5, #16]
   1a9a0:	4621      	mov	r1, r4
   1a9a2:	f7ff fd6a 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a9a6:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a9a8:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a9aa:	69a8      	ldr	r0, [r5, #24]
   1a9ac:	f7ff fd65 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9b0:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a9b2:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9b4:	6868      	ldr	r0, [r5, #4]
   1a9b6:	f7ff fd60 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1a9ba:	682b      	ldr	r3, [r5, #0]
   1a9bc:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1a9c0:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a9c2:	6819      	ldr	r1, [r3, #0]
   1a9c4:	68eb      	ldr	r3, [r5, #12]
   1a9c6:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
   1a9ca:	681a      	ldr	r2, [r3, #0]
   1a9cc:	68ab      	ldr	r3, [r5, #8]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9ce:	4680      	mov	r8, r0
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1a9d0:	681b      	ldr	r3, [r3, #0]
   1a9d2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
   1a9d6:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1a9d8:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
   1a9dc:	6923      	ldr	r3, [r4, #16]
   1a9de:	3301      	adds	r3, #1
   1a9e0:	6123      	str	r3, [r4, #16]
   1a9e2:	e7d8      	b.n	1a996 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1a9e4:	68e3      	ldr	r3, [r4, #12]
   1a9e6:	3301      	adds	r3, #1
   1a9e8:	60e3      	str	r3, [r4, #12]
   1a9ea:	e7cf      	b.n	1a98c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1a9ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a9f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1a9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9f4:	b0ae      	sub	sp, #184	; 0xb8
   1a9f6:	4605      	mov	r5, r0
   1a9f8:	9103      	str	r1, [sp, #12]
   1a9fa:	4611      	mov	r1, r2
   1a9fc:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1a9fe:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1aa00:	9201      	str	r2, [sp, #4]
   1aa02:	f7ff fd24 	bl	1a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1aa06:	9901      	ldr	r1, [sp, #4]
   1aa08:	4604      	mov	r4, r0
   1aa0a:	b1a0      	cbz	r0, 1aa36 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1aa0c:	4628      	mov	r0, r5
   1aa0e:	4632      	mov	r2, r6
   1aa10:	f7fb f84b 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1aa14:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1aa16:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   1aa18:	42ac      	cmp	r4, r5
   1aa1a:	da5b      	bge.n	1aad4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1aa1c:	9b02      	ldr	r3, [sp, #8]
   1aa1e:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   1aa20:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1aa24:	9b03      	ldr	r3, [sp, #12]
   1aa26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1aa2a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1aa2c:	4798      	blx	r3
   1aa2e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (int i = 0; i < flat_size; ++i) {
   1aa32:	3401      	adds	r4, #1
   1aa34:	e7f0      	b.n	1aa18 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1aa36:	682b      	ldr	r3, [r5, #0]
   1aa38:	2b05      	cmp	r3, #5
   1aa3a:	dd01      	ble.n	1aa40 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
   1aa3c:	f003 fdda 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1aa40:	680b      	ldr	r3, [r1, #0]
   1aa42:	2b05      	cmp	r3, #5
   1aa44:	dcfa      	bgt.n	1aa3c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1aa46:	6833      	ldr	r3, [r6, #0]
   1aa48:	2b05      	cmp	r3, #5
   1aa4a:	dcf7      	bgt.n	1aa3c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    NdArrayDescsForElementwiseBroadcast(
   1aa4c:	af1a      	add	r7, sp, #104	; 0x68
   1aa4e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1aa52:	4628      	mov	r0, r5
   1aa54:	463b      	mov	r3, r7
   1aa56:	4642      	mov	r2, r8
   1aa58:	f7ff fd3a 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1aa5c:	ad24      	add	r5, sp, #144	; 0x90
   1aa5e:	2301      	movs	r3, #1
   1aa60:	4632      	mov	r2, r6
   1aa62:	2105      	movs	r1, #5
   1aa64:	a809      	add	r0, sp, #36	; 0x24
   1aa66:	f7fa ffd1 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1aa6a:	4629      	mov	r1, r5
   1aa6c:	a809      	add	r0, sp, #36	; 0x24
   1aa6e:	f7ff fd19 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1aa72:	a809      	add	r0, sp, #36	; 0x24
   1aa74:	f7fa ff2a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1aa78:	ab35      	add	r3, sp, #212	; 0xd4
   1aa7a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1aa7e:	ab36      	add	r3, sp, #216	; 0xd8
   1aa80:	930b      	str	r3, [sp, #44]	; 0x2c
   1aa82:	ab03      	add	r3, sp, #12
   1aa84:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1aa88:	ab02      	add	r3, sp, #8
   1aa8a:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1aa8e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aa92:	9404      	str	r4, [sp, #16]
   1aa94:	9a04      	ldr	r2, [sp, #16]
   1aa96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aa98:	429a      	cmp	r2, r3
   1aa9a:	da1b      	bge.n	1aad4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
   1aa9c:	2400      	movs	r4, #0
   1aa9e:	9405      	str	r4, [sp, #20]
   1aaa0:	9a05      	ldr	r2, [sp, #20]
   1aaa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1aaa4:	429a      	cmp	r2, r3
   1aaa6:	da11      	bge.n	1aacc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xdc>
   1aaa8:	9406      	str	r4, [sp, #24]
   1aaaa:	9a06      	ldr	r2, [sp, #24]
   1aaac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1aaae:	429a      	cmp	r2, r3
   1aab0:	da08      	bge.n	1aac4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd4>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1aab2:	aa04      	add	r2, sp, #16
   1aab4:	a909      	add	r1, sp, #36	; 0x24
   1aab6:	4628      	mov	r0, r5
   1aab8:	f7ff ff61 	bl	1a97e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aabc:	9b06      	ldr	r3, [sp, #24]
   1aabe:	3301      	adds	r3, #1
   1aac0:	9306      	str	r3, [sp, #24]
   1aac2:	e7f2      	b.n	1aaaa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xba>
   1aac4:	9b05      	ldr	r3, [sp, #20]
   1aac6:	3301      	adds	r3, #1
   1aac8:	9305      	str	r3, [sp, #20]
   1aaca:	e7e9      	b.n	1aaa0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
   1aacc:	9b04      	ldr	r3, [sp, #16]
   1aace:	3301      	adds	r3, #1
   1aad0:	9304      	str	r3, [sp, #16]
   1aad2:	e7df      	b.n	1aa94 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa4>
}
   1aad4:	b02e      	add	sp, #184	; 0xb8
   1aad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aada <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1aada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aade:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1aae0:	4606      	mov	r6, r0
   1aae2:	460d      	mov	r5, r1
   1aae4:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aae6:	60d7      	str	r7, [r2, #12]
   1aae8:	68e2      	ldr	r2, [r4, #12]
   1aaea:	68f3      	ldr	r3, [r6, #12]
   1aaec:	429a      	cmp	r2, r3
   1aaee:	da30      	bge.n	1ab52 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x78>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1aaf0:	6127      	str	r7, [r4, #16]
   1aaf2:	6922      	ldr	r2, [r4, #16]
   1aaf4:	6933      	ldr	r3, [r6, #16]
   1aaf6:	429a      	cmp	r2, r3
   1aaf8:	da27      	bge.n	1ab4a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x70>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1aafa:	6928      	ldr	r0, [r5, #16]
   1aafc:	4621      	mov	r1, r4
   1aafe:	f7ff fcbc 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1ab02:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1ab04:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1ab06:	69a8      	ldr	r0, [r5, #24]
   1ab08:	f7ff fcb7 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1ab0c:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1ab0e:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1ab10:	6868      	ldr	r0, [r5, #4]
   1ab12:	f7ff fcb2 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1ab16:	682b      	ldr	r3, [r5, #0]
   1ab18:	681b      	ldr	r3, [r3, #0]
   1ab1a:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
             input2_data[SubscriptToIndex(desc2, indexes)]);
   1ab1e:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   1ab20:	681a      	ldr	r2, [r3, #0]
   1ab22:	68eb      	ldr	r3, [r5, #12]
   1ab24:	6818      	ldr	r0, [r3, #0]
   1ab26:	68ab      	ldr	r3, [r5, #8]
   1ab28:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
   1ab2c:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
   1ab30:	f8d3 9000 	ldr.w	r9, [r3]
   1ab34:	e9d0 0100 	ldrd	r0, r1, [r0]
   1ab38:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab3c:	47c8      	blx	r9
   1ab3e:	6923      	ldr	r3, [r4, #16]
   1ab40:	3301      	adds	r3, #1
      output_data[SubscriptToIndex(output_desc, indexes)] =
   1ab42:	e9c8 0100 	strd	r0, r1, [r8]
   1ab46:	6123      	str	r3, [r4, #16]
   1ab48:	e7d3      	b.n	1aaf2 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ab4a:	68e3      	ldr	r3, [r4, #12]
   1ab4c:	3301      	adds	r3, #1
   1ab4e:	60e3      	str	r3, [r4, #12]
   1ab50:	e7ca      	b.n	1aae8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   1ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ab56 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   1ab56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab5a:	b0ae      	sub	sp, #184	; 0xb8
   1ab5c:	4605      	mov	r5, r0
   1ab5e:	9103      	str	r1, [sp, #12]
   1ab60:	4611      	mov	r1, r2
   1ab62:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   1ab64:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   1ab66:	9201      	str	r2, [sp, #4]
   1ab68:	f7ff fc71 	bl	1a44e <_ZNK6tflite12RuntimeShapeeqERKS0_>
   1ab6c:	9901      	ldr	r1, [sp, #4]
   1ab6e:	4604      	mov	r4, r0
   1ab70:	b1d0      	cbz	r0, 1aba8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1ab72:	4632      	mov	r2, r6
   1ab74:	4628      	mov	r0, r5
   1ab76:	f7fa ff98 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   1ab7a:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   1ab7c:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   1ab7e:	42b4      	cmp	r4, r6
   1ab80:	da61      	bge.n	1ac46 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   1ab82:	9b02      	ldr	r3, [sp, #8]
   1ab84:	9f36      	ldr	r7, [sp, #216]	; 0xd8
   1ab86:	9d35      	ldr	r5, [sp, #212]	; 0xd4
   1ab88:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1ab8c:	9b03      	ldr	r3, [sp, #12]
   1ab8e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1ab92:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ab96:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab9a:	47b8      	blx	r7
   1ab9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1aba0:	e9c5 0100 	strd	r0, r1, [r5]
    for (int i = 0; i < flat_size; ++i) {
   1aba4:	3401      	adds	r4, #1
   1aba6:	e7ea      	b.n	1ab7e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   1aba8:	682b      	ldr	r3, [r5, #0]
   1abaa:	2b05      	cmp	r3, #5
   1abac:	dd01      	ble.n	1abb2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   1abae:	f003 fd21 	bl	1e5f4 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   1abb2:	680b      	ldr	r3, [r1, #0]
   1abb4:	2b05      	cmp	r3, #5
   1abb6:	dcfa      	bgt.n	1abae <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   1abb8:	6833      	ldr	r3, [r6, #0]
   1abba:	2b05      	cmp	r3, #5
   1abbc:	dcf7      	bgt.n	1abae <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   1abbe:	af1a      	add	r7, sp, #104	; 0x68
   1abc0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1abc4:	4628      	mov	r0, r5
   1abc6:	463b      	mov	r3, r7
   1abc8:	4642      	mov	r2, r8
   1abca:	f7ff fc81 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   1abce:	ad24      	add	r5, sp, #144	; 0x90
   1abd0:	2301      	movs	r3, #1
   1abd2:	4632      	mov	r2, r6
   1abd4:	2105      	movs	r1, #5
   1abd6:	a809      	add	r0, sp, #36	; 0x24
   1abd8:	f7fa ff18 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1abdc:	4629      	mov	r1, r5
   1abde:	a809      	add	r0, sp, #36	; 0x24
   1abe0:	f7ff fc60 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1abe4:	a809      	add	r0, sp, #36	; 0x24
   1abe6:	f7fa fe71 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   1abea:	ab35      	add	r3, sp, #212	; 0xd4
   1abec:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   1abf0:	ab36      	add	r3, sp, #216	; 0xd8
   1abf2:	930b      	str	r3, [sp, #44]	; 0x2c
   1abf4:	ab03      	add	r3, sp, #12
   1abf6:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
   1abfa:	ab02      	add	r3, sp, #8
   1abfc:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  int indexes[N] = {0};
   1ac00:	e9cd 4407 	strd	r4, r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ac04:	9404      	str	r4, [sp, #16]
   1ac06:	9a04      	ldr	r2, [sp, #16]
   1ac08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ac0a:	429a      	cmp	r2, r3
   1ac0c:	da1b      	bge.n	1ac46 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf0>
   1ac0e:	2400      	movs	r4, #0
   1ac10:	9405      	str	r4, [sp, #20]
   1ac12:	9a05      	ldr	r2, [sp, #20]
   1ac14:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ac16:	429a      	cmp	r2, r3
   1ac18:	da11      	bge.n	1ac3e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
   1ac1a:	9406      	str	r4, [sp, #24]
   1ac1c:	9a06      	ldr	r2, [sp, #24]
   1ac1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1ac20:	429a      	cmp	r2, r3
   1ac22:	da08      	bge.n	1ac36 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1ac24:	aa04      	add	r2, sp, #16
   1ac26:	a909      	add	r1, sp, #36	; 0x24
   1ac28:	4628      	mov	r0, r5
   1ac2a:	f7ff ff56 	bl	1aada <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ac2e:	9b06      	ldr	r3, [sp, #24]
   1ac30:	3301      	adds	r3, #1
   1ac32:	9306      	str	r3, [sp, #24]
   1ac34:	e7f2      	b.n	1ac1c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc6>
   1ac36:	9b05      	ldr	r3, [sp, #20]
   1ac38:	3301      	adds	r3, #1
   1ac3a:	9305      	str	r3, [sp, #20]
   1ac3c:	e7e9      	b.n	1ac12 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   1ac3e:	9b04      	ldr	r3, [sp, #16]
   1ac40:	3301      	adds	r3, #1
   1ac42:	9304      	str	r3, [sp, #16]
   1ac44:	e7df      	b.n	1ac06 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb0>
}
   1ac46:	b02e      	add	sp, #184	; 0xb8
   1ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac4c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    }
  }
}

template <typename T>
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac4c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1ac50:	ed2d 8b04 	vpush	{d8-d9}
   1ac54:	461d      	mov	r5, r3
                        T* output_data) {
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac56:	680b      	ldr	r3, [r1, #0]
  *min = params.float_activation_min;
   1ac58:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  *max = params.float_activation_max;
   1ac5c:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac60:	b098      	sub	sp, #96	; 0x60
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac62:	2b04      	cmp	r3, #4
void BroadcastMul4DSlow(const ArithmeticParams& params,
   1ac64:	4693      	mov	fp, r2
   1ac66:	460c      	mov	r4, r1
   1ac68:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1ac6a:	dd01      	ble.n	1ac70 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x24>
   1ac6c:	f003 fcc2 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1ac70:	682b      	ldr	r3, [r5, #0]
   1ac72:	2b04      	cmp	r3, #4
   1ac74:	dcfa      	bgt.n	1ac6c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1ac76:	6813      	ldr	r3, [r2, #0]
   1ac78:	2b04      	cmp	r3, #4
   1ac7a:	dcf7      	bgt.n	1ac6c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
    return RuntimeShape(new_shape_size, shape, 1);
   1ac7c:	2301      	movs	r3, #1
   1ac7e:	2104      	movs	r1, #4
   1ac80:	a802      	add	r0, sp, #8
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   1ac82:	f10d 0a20 	add.w	sl, sp, #32
   1ac86:	f7fa fec1 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1ac8a:	4620      	mov	r0, r4
   1ac8c:	ab10      	add	r3, sp, #64	; 0x40
   1ac8e:	4652      	mov	r2, sl
   1ac90:	4629      	mov	r1, r5
   1ac92:	f7fb f8bf 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1ac96:	2400      	movs	r4, #0
   1ac98:	2100      	movs	r1, #0
   1ac9a:	a802      	add	r0, sp, #8
   1ac9c:	f7fa fe21 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1aca0:	42a0      	cmp	r0, r4
   1aca2:	dd52      	ble.n	1ad4a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfe>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1aca4:	2500      	movs	r5, #0
   1aca6:	2101      	movs	r1, #1
   1aca8:	a802      	add	r0, sp, #8
   1acaa:	f7fa fe1a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1acae:	42a8      	cmp	r0, r5
   1acb0:	dd49      	ble.n	1ad46 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfa>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1acb2:	2600      	movs	r6, #0
   1acb4:	2102      	movs	r1, #2
   1acb6:	a802      	add	r0, sp, #8
   1acb8:	f7fa fe13 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1acbc:	42b0      	cmp	r0, r6
   1acbe:	dd40      	ble.n	1ad42 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1acc0:	2700      	movs	r7, #0
   1acc2:	2103      	movs	r1, #3
   1acc4:	a802      	add	r0, sp, #8
   1acc6:	f7fa fe0c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1acca:	42b8      	cmp	r0, r7
   1accc:	dd37      	ble.n	1ad3e <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf2>
          output_data[Offset(output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1acce:	9700      	str	r7, [sp, #0]
   1acd0:	4633      	mov	r3, r6
   1acd2:	462a      	mov	r2, r5
   1acd4:	4621      	mov	r1, r4
   1acd6:	4650      	mov	r0, sl
   1acd8:	f7fa fefb 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1acdc:	9700      	str	r7, [sp, #0]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1acde:	4681      	mov	r9, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1ace0:	4633      	mov	r3, r6
   1ace2:	462a      	mov	r2, r5
   1ace4:	4621      	mov	r1, r4
   1ace6:	a810      	add	r0, sp, #64	; 0x40
   1ace8:	f7fa fef3 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1acec:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   1acee:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   1acf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   1acf6:	edd9 7a00 	vldr	s15, [r9]
   1acfa:	ed90 8a00 	vldr	s16, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   1acfe:	9700      	str	r7, [sp, #0]
              ActivationFunctionWithMinMax(
   1ad00:	ee27 8a88 	vmul.f32	s16, s15, s16
          output_data[Offset(output_shape, b, y, x, c)] =
   1ad04:	4633      	mov	r3, r6
   1ad06:	462a      	mov	r2, r5
   1ad08:	4621      	mov	r1, r4
   1ad0a:	a802      	add	r0, sp, #8
   1ad0c:	f7fa feab 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1ad10:	eeb4 8ac9 	vcmpe.f32	s16, s18
   1ad14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad18:	bfb4      	ite	lt
   1ad1a:	eef0 7a49 	vmovlt.f32	s15, s18
   1ad1e:	eef0 7a48 	vmovge.f32	s15, s16
   1ad22:	eef4 7ae8 	vcmpe.f32	s15, s17
   1ad26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1ad28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ad30:	bf88      	it	hi
   1ad32:	eef0 7a68 	vmovhi.f32	s15, s17
   1ad36:	edc0 7a00 	vstr	s15, [r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1ad3a:	3701      	adds	r7, #1
   1ad3c:	e7c1      	b.n	1acc2 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1ad3e:	3601      	adds	r6, #1
   1ad40:	e7b8      	b.n	1acb4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x68>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1ad42:	3501      	adds	r5, #1
   1ad44:	e7af      	b.n	1aca6 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1ad46:	3401      	adds	r4, #1
   1ad48:	e7a6      	b.n	1ac98 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4c>
  const RuntimeShape output_shape =
   1ad4a:	a802      	add	r0, sp, #8
   1ad4c:	f7fa fdbe 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
                  output_activation_min, output_activation_max);
        }
      }
    }
  }
}
   1ad50:	b018      	add	sp, #96	; 0x60
   1ad52:	ecbd 8b04 	vpop	{d8-d9}
   1ad56:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0001ad5a <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul4DSlow(
   1ad5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad5e:	b09b      	sub	sp, #108	; 0x6c
  ruy::profiler::ScopeLabel label("BroadcastMul4DSlow");

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad60:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
inline void BroadcastMul4DSlow(
   1ad64:	9203      	str	r2, [sp, #12]
   1ad66:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad68:	4652      	mov	r2, sl
inline void BroadcastMul4DSlow(
   1ad6a:	4608      	mov	r0, r1
   1ad6c:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ad6e:	ab12      	add	r3, sp, #72	; 0x48
   1ad70:	f7fb f850 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1ad74:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ad76:	2301      	movs	r3, #1
   1ad78:	2104      	movs	r1, #4
   1ad7a:	a804      	add	r0, sp, #16
   1ad7c:	f7fa fe46 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ad80:	2600      	movs	r6, #0
   1ad82:	2100      	movs	r1, #0
   1ad84:	a804      	add	r0, sp, #16
   1ad86:	f7fa fdac 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad8a:	42b0      	cmp	r0, r6
   1ad8c:	dd53      	ble.n	1ae36 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ad8e:	2700      	movs	r7, #0
   1ad90:	f10d 0810 	add.w	r8, sp, #16
   1ad94:	2101      	movs	r1, #1
   1ad96:	4640      	mov	r0, r8
   1ad98:	f7fa fda3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ad9c:	42b8      	cmp	r0, r7
   1ad9e:	dd48      	ble.n	1ae32 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ada0:	f04f 0b00 	mov.w	fp, #0
   1ada4:	2102      	movs	r1, #2
   1ada6:	4640      	mov	r0, r8
   1ada8:	f7fa fd9b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1adac:	4558      	cmp	r0, fp
   1adae:	dd3e      	ble.n	1ae2e <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1adb0:	f04f 0900 	mov.w	r9, #0
   1adb4:	2103      	movs	r1, #3
   1adb6:	4640      	mov	r0, r8
   1adb8:	f7fa fd93 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1adbc:	4548      	cmp	r0, r9
   1adbe:	dd33      	ble.n	1ae28 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xce>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1adc0:	f8cd 9000 	str.w	r9, [sp]
   1adc4:	465b      	mov	r3, fp
   1adc6:	463a      	mov	r2, r7
   1adc8:	4631      	mov	r1, r6
   1adca:	4650      	mov	r0, sl
   1adcc:	f7fa fe81 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1add0:	9b03      	ldr	r3, [sp, #12]
          const int32 input1_val =
   1add2:	6862      	ldr	r2, [r4, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1add4:	561d      	ldrsb	r5, [r3, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1add6:	f8cd 9000 	str.w	r9, [sp]
          const int32 input1_val =
   1adda:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1addc:	465b      	mov	r3, fp
   1adde:	463a      	mov	r2, r7
   1ade0:	4631      	mov	r1, r6
   1ade2:	a812      	add	r0, sp, #72	; 0x48
   1ade4:	f7fa fe75 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1ade8:	9b24      	ldr	r3, [sp, #144]	; 0x90
          const int32 input2_val =
   1adea:	68a2      	ldr	r2, [r4, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1adec:	5618      	ldrsb	r0, [r3, r0]
          const int32 input2_val =
   1adee:	4410      	add	r0, r2
          const int32 unclamped_result =
              params.output_offset +
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1adf0:	4368      	muls	r0, r5
   1adf2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1adf6:	f7ee fd51 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   1adfa:	68e5      	ldr	r5, [r4, #12]
                                            params.output_multiplier,
                                            params.output_shift);
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
              std::max(params.quantized_activation_min, unclamped_result));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1adfc:	f8cd 9000 	str.w	r9, [sp]
              params.output_offset +
   1ae00:	4405      	add	r5, r0
   1ae02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ae04:	4285      	cmp	r5, r0
   1ae06:	bfb8      	it	lt
   1ae08:	4605      	movlt	r5, r0
   1ae0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1ae0c:	4285      	cmp	r5, r0
   1ae0e:	bfa8      	it	ge
   1ae10:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1ae12:	465b      	mov	r3, fp
   1ae14:	463a      	mov	r2, r7
   1ae16:	4631      	mov	r1, r6
   1ae18:	4640      	mov	r0, r8
   1ae1a:	f7fa fe24 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1ae1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ae20:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1ae24:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ae26:	e7c5      	b.n	1adb4 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ae28:	f10b 0b01 	add.w	fp, fp, #1
   1ae2c:	e7ba      	b.n	1ada4 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ae2e:	3701      	adds	r7, #1
   1ae30:	e7ae      	b.n	1ad90 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ae32:	3601      	adds	r6, #1
   1ae34:	e7a5      	b.n	1ad82 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x28>
  const RuntimeShape extended_output_shape =
   1ae36:	a804      	add	r0, sp, #16
   1ae38:	f7fa fd48 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   1ae3c:	b01b      	add	sp, #108	; 0x6c
   1ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ae42 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               uint8* output_data) {
   1ae42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae46:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae48:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
                               uint8* output_data) {
   1ae4c:	9203      	str	r2, [sp, #12]
   1ae4e:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae50:	4652      	mov	r2, sl
                               uint8* output_data) {
   1ae52:	4608      	mov	r0, r1
   1ae54:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ae56:	ab12      	add	r3, sp, #72	; 0x48
   1ae58:	f7fa ffdc 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1ae5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ae5e:	2301      	movs	r3, #1
   1ae60:	2104      	movs	r1, #4
   1ae62:	a804      	add	r0, sp, #16
   1ae64:	f7fa fdd2 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1ae68:	2600      	movs	r6, #0
   1ae6a:	2100      	movs	r1, #0
   1ae6c:	a804      	add	r0, sp, #16
   1ae6e:	f7fa fd38 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae72:	42b0      	cmp	r0, r6
   1ae74:	dd53      	ble.n	1af1e <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1ae76:	2700      	movs	r7, #0
   1ae78:	f10d 0810 	add.w	r8, sp, #16
   1ae7c:	2101      	movs	r1, #1
   1ae7e:	4640      	mov	r0, r8
   1ae80:	f7fa fd2f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae84:	42b8      	cmp	r0, r7
   1ae86:	dd48      	ble.n	1af1a <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1ae88:	f04f 0b00 	mov.w	fp, #0
   1ae8c:	2102      	movs	r1, #2
   1ae8e:	4640      	mov	r0, r8
   1ae90:	f7fa fd27 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae94:	4558      	cmp	r0, fp
   1ae96:	dd3e      	ble.n	1af16 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1ae98:	f04f 0900 	mov.w	r9, #0
   1ae9c:	2103      	movs	r1, #3
   1ae9e:	4640      	mov	r0, r8
   1aea0:	f7fa fd1f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1aea4:	4548      	cmp	r0, r9
   1aea6:	dd33      	ble.n	1af10 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xce>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1aea8:	f8cd 9000 	str.w	r9, [sp]
   1aeac:	465b      	mov	r3, fp
   1aeae:	463a      	mov	r2, r7
   1aeb0:	4631      	mov	r1, r6
   1aeb2:	4650      	mov	r0, sl
   1aeb4:	f7fa fe0d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1aeb8:	9b03      	ldr	r3, [sp, #12]
   1aeba:	6862      	ldr	r2, [r4, #4]
   1aebc:	5c1d      	ldrb	r5, [r3, r0]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1aebe:	f8cd 9000 	str.w	r9, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   1aec2:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   1aec4:	465b      	mov	r3, fp
   1aec6:	463a      	mov	r2, r7
   1aec8:	4631      	mov	r1, r6
   1aeca:	a812      	add	r0, sp, #72	; 0x48
   1aecc:	f7fa fe01 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   1aed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aed2:	68a2      	ldr	r2, [r4, #8]
   1aed4:	5c18      	ldrb	r0, [r3, r0]
   1aed6:	4410      	add	r0, r2
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1aed8:	4368      	muls	r0, r5
   1aeda:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1aede:	f7ee fcdd 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   1aee2:	68e5      	ldr	r5, [r4, #12]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1aee4:	f8cd 9000 	str.w	r9, [sp]
              params.output_offset +
   1aee8:	4405      	add	r5, r0
   1aeea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1aeec:	4285      	cmp	r5, r0
   1aeee:	bfb8      	it	lt
   1aef0:	4605      	movlt	r5, r0
   1aef2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1aef4:	4285      	cmp	r5, r0
   1aef6:	bfa8      	it	ge
   1aef8:	4605      	movge	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1aefa:	465b      	mov	r3, fp
   1aefc:	463a      	mov	r2, r7
   1aefe:	4631      	mov	r1, r6
   1af00:	4640      	mov	r0, r8
   1af02:	f7fa fdb0 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1af06:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1af08:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1af0c:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1af0e:	e7c5      	b.n	1ae9c <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1af10:	f10b 0b01 	add.w	fp, fp, #1
   1af14:	e7ba      	b.n	1ae8c <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1af16:	3701      	adds	r7, #1
   1af18:	e7ae      	b.n	1ae78 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1af1a:	3601      	adds	r6, #1
   1af1c:	e7a5      	b.n	1ae6a <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   1af1e:	a804      	add	r0, sp, #16
   1af20:	f7fa fcd4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1af24:	b01b      	add	sp, #108	; 0x6c
   1af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001af2a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>:
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   1af2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af2e:	4616      	mov	r6, r2
   1af30:	461d      	mov	r5, r3
  params->quantized_activation_min = min;
   1af32:	e9d0 2300 	ldrd	r2, r3, [r0]
   1af36:	b0be      	sub	sp, #248	; 0xf8
  params->quantized_activation_max = max;
   1af38:	e9cd 2335 	strd	r2, r3, [sp, #212]	; 0xd4
    op_params.input1_offset = -input1->params.zero_point;
   1af3c:	690b      	ldr	r3, [r1, #16]
   1af3e:	425b      	negs	r3, r3
   1af40:	932b      	str	r3, [sp, #172]	; 0xac
    op_params.input2_offset = -input2->params.zero_point;
   1af42:	6933      	ldr	r3, [r6, #16]
   1af44:	425b      	negs	r3, r3
   1af46:	932c      	str	r3, [sp, #176]	; 0xb0
    op_params.output_offset = output->params.zero_point;
   1af48:	692b      	ldr	r3, [r5, #16]
   1af4a:	932d      	str	r3, [sp, #180]	; 0xb4
    op_params.output_multiplier = data->output_multiplier;
   1af4c:	6883      	ldr	r3, [r0, #8]
   1af4e:	932e      	str	r3, [sp, #184]	; 0xb8
    op_params.output_shift = data->output_shift;
   1af50:	68c3      	ldr	r3, [r0, #12]
   1af52:	932f      	str	r3, [sp, #188]	; 0xbc
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af54:	a824      	add	r0, sp, #144	; 0x90
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   1af56:	460f      	mov	r7, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af58:	f7fa fcfd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1af5c:	4631      	mov	r1, r6
   1af5e:	a81e      	add	r0, sp, #120	; 0x78
   1af60:	f7fa fcf9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1af64:	aa2a      	add	r2, sp, #168	; 0xa8
   1af66:	a91e      	add	r1, sp, #120	; 0x78
   1af68:	a824      	add	r0, sp, #144	; 0x90
   1af6a:	f7fa fe6b 	bl	15c44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1af6e:	4604      	mov	r4, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1af70:	a81e      	add	r0, sp, #120	; 0x78
   1af72:	f7fa fcab 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1af76:	a824      	add	r0, sp, #144	; 0x90
   1af78:	f7fa fca8 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   1af7c:	782b      	ldrb	r3, [r5, #0]
   1af7e:	2b09      	cmp	r3, #9
   1af80:	d163      	bne.n	1b04a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x120>
      if (need_broadcast) {
   1af82:	f10d 0860 	add.w	r8, sp, #96	; 0x60
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   1af86:	4639      	mov	r1, r7
   1af88:	a824      	add	r0, sp, #144	; 0x90
      if (need_broadcast) {
   1af8a:	b314      	cbz	r4, 1afd2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa8>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   1af8c:	f7fa fce3 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1af90:	687a      	ldr	r2, [r7, #4]
   1af92:	9205      	str	r2, [sp, #20]
   1af94:	4631      	mov	r1, r6
   1af96:	a81e      	add	r0, sp, #120	; 0x78
   1af98:	f7fa fcdd 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1af9c:	4629      	mov	r1, r5
   1af9e:	4640      	mov	r0, r8
   1afa0:	6874      	ldr	r4, [r6, #4]
   1afa2:	f7fa fcd8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1afa6:	686b      	ldr	r3, [r5, #4]
   1afa8:	9a05      	ldr	r2, [sp, #20]
   1afaa:	9400      	str	r4, [sp, #0]
   1afac:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1afb0:	a924      	add	r1, sp, #144	; 0x90
   1afb2:	ab1e      	add	r3, sp, #120	; 0x78
   1afb4:	a82a      	add	r0, sp, #168	; 0xa8
   1afb6:	f7ff fed0 	bl	1ad5a <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   1afba:	4640      	mov	r0, r8
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1afbc:	f7fa fc86 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1afc0:	a81e      	add	r0, sp, #120	; 0x78
   1afc2:	f7fa fc83 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1afc6:	a824      	add	r0, sp, #144	; 0x90
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   1afc8:	f7fa fc80 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1afcc:	b03e      	add	sp, #248	; 0xf8
   1afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   1afd2:	f7fa fcc0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1afd6:	4631      	mov	r1, r6
   1afd8:	a81e      	add	r0, sp, #120	; 0x78
   1afda:	687f      	ldr	r7, [r7, #4]
   1afdc:	f7fa fcbb 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1afe0:	4629      	mov	r1, r5
   1afe2:	4640      	mov	r0, r8
   1afe4:	6876      	ldr	r6, [r6, #4]
   1afe6:	f7fa fcb6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1afea:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   1afee:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1aff0:	686d      	ldr	r5, [r5, #4]
   1aff2:	dd01      	ble.n	1aff8 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xce>
   1aff4:	f003 fafe 	bl	1e5f4 <abort>
  const int size_1 = shape.FlatSize();
   1aff8:	a824      	add	r0, sp, #144	; 0x90
   1affa:	f7fa fcf7 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1affe:	4681      	mov	r9, r0
  const int size_2 = check_shape_0.FlatSize();
   1b000:	a81e      	add	r0, sp, #120	; 0x78
   1b002:	f7fa fcf3 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1b006:	4682      	mov	sl, r0
  const int size_3 = check_shape_1.FlatSize();
   1b008:	4640      	mov	r0, r8
   1b00a:	f7fa fcef 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   1b00e:	45d1      	cmp	r9, sl
   1b010:	d1f0      	bne.n	1aff4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  TFLITE_CHECK_EQ(size_2, size_3);
   1b012:	4581      	cmp	r9, r0
   1b014:	d1ee      	bne.n	1aff4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  for (int i = 0; i < size; ++i) {
   1b016:	454c      	cmp	r4, r9
   1b018:	dacf      	bge.n	1afba <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x90>
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b01a:	573b      	ldrsb	r3, [r7, r4]
   1b01c:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b01e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b020:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b022:	5730      	ldrsb	r0, [r6, r4]
   1b024:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1b026:	4358      	muls	r0, r3
   1b028:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   1b02c:	f7ee fc36 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   1b030:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1b032:	4403      	add	r3, r0
    output_data[i] = static_cast<T>(clamped_output);
   1b034:	9835      	ldr	r0, [sp, #212]	; 0xd4
   1b036:	4283      	cmp	r3, r0
   1b038:	bfb8      	it	lt
   1b03a:	4603      	movlt	r3, r0
   1b03c:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1b03e:	4283      	cmp	r3, r0
   1b040:	bfa8      	it	ge
   1b042:	4603      	movge	r3, r0
   1b044:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1b046:	3401      	adds	r4, #1
   1b048:	e7e5      	b.n	1b016 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xec>
    } else if (output->type == kTfLiteUInt8) {
   1b04a:	2b03      	cmp	r3, #3
   1b04c:	d1be      	bne.n	1afcc <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa2>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1b04e:	4639      	mov	r1, r7
      if (need_broadcast) {
   1b050:	b1d4      	cbz	r4, 1b088 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x15e>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   1b052:	a824      	add	r0, sp, #144	; 0x90
   1b054:	f7fa fc7f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b058:	ac18      	add	r4, sp, #96	; 0x60
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b05a:	687a      	ldr	r2, [r7, #4]
   1b05c:	9205      	str	r2, [sp, #20]
   1b05e:	4631      	mov	r1, r6
   1b060:	a81e      	add	r0, sp, #120	; 0x78
   1b062:	f7fa fc78 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b066:	4629      	mov	r1, r5
   1b068:	4620      	mov	r0, r4
   1b06a:	6876      	ldr	r6, [r6, #4]
   1b06c:	f7fa fc73 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b070:	686b      	ldr	r3, [r5, #4]
   1b072:	9a05      	ldr	r2, [sp, #20]
   1b074:	9600      	str	r6, [sp, #0]
   1b076:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b07a:	a82a      	add	r0, sp, #168	; 0xa8
   1b07c:	ab1e      	add	r3, sp, #120	; 0x78
   1b07e:	a924      	add	r1, sp, #144	; 0x90
   1b080:	f7ff fedf 	bl	1ae42 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   1b084:	4620      	mov	r0, r4
   1b086:	e799      	b.n	1afbc <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x92>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   1b088:	a812      	add	r0, sp, #72	; 0x48
   1b08a:	f7fa fc64 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b08e:	4631      	mov	r1, r6
   1b090:	a80c      	add	r0, sp, #48	; 0x30
   1b092:	687f      	ldr	r7, [r7, #4]
   1b094:	f7fa fc5f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b098:	4629      	mov	r1, r5
   1b09a:	a806      	add	r0, sp, #24
   1b09c:	6876      	ldr	r6, [r6, #4]
   1b09e:	f7fa fc5a 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b0a2:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   1b0a6:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b0a8:	686d      	ldr	r5, [r5, #4]
   1b0aa:	dca3      	bgt.n	1aff4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1b0ac:	aa06      	add	r2, sp, #24
   1b0ae:	a90c      	add	r1, sp, #48	; 0x30
   1b0b0:	a812      	add	r0, sp, #72	; 0x48
   1b0b2:	f7fb fc94 	bl	169de <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   1b0b6:	4680      	mov	r8, r0
  for (int i = 0; i < size; ++i) {
   1b0b8:	45a0      	cmp	r8, r4
   1b0ba:	dd17      	ble.n	1b0ec <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x1c2>
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b0bc:	5d3b      	ldrb	r3, [r7, r4]
   1b0be:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b0c0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   1b0c2:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   1b0c4:	5d30      	ldrb	r0, [r6, r4]
   1b0c6:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   1b0c8:	4358      	muls	r0, r3
   1b0ca:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   1b0ce:	f7ee fbe5 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   1b0d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1b0d4:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   1b0d6:	9835      	ldr	r0, [sp, #212]	; 0xd4
   1b0d8:	4283      	cmp	r3, r0
   1b0da:	bfb8      	it	lt
   1b0dc:	4603      	movlt	r3, r0
   1b0de:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1b0e0:	4283      	cmp	r3, r0
   1b0e2:	bfa8      	it	ge
   1b0e4:	4603      	movge	r3, r0
   1b0e6:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1b0e8:	3401      	adds	r4, #1
   1b0ea:	e7e5      	b.n	1b0b8 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x18e>
   1b0ec:	a806      	add	r0, sp, #24
   1b0ee:	f7fa fbed 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1b0f2:	a80c      	add	r0, sp, #48	; 0x30
   1b0f4:	f7fa fbea 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1b0f8:	a812      	add	r0, sp, #72	; 0x48
   1b0fa:	e765      	b.n	1afc8 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x9e>

0001b0fc <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
                   TfLiteTensor* output) {
   1b0fc:	b410      	push	{r4}
   1b0fe:	4618      	mov	r0, r3
   1b100:	9b03      	ldr	r3, [sp, #12]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   1b102:	781c      	ldrb	r4, [r3, #0]
   1b104:	2c09      	cmp	r4, #9
                   TfLiteTensor* output) {
   1b106:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   1b10a:	d001      	beq.n	1b110 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x14>
   1b10c:	2c03      	cmp	r4, #3
   1b10e:	d103      	bne.n	1b118 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1c>
}
   1b110:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b114:	f7ff bf09 	b.w	1af2a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>
   1b118:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b11c:	4770      	bx	lr

0001b11e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>:
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b11e:	b5f0      	push	{r4, r5, r6, r7, lr}
    input = GetInput(context, node, 0);
   1b120:	6816      	ldr	r6, [r2, #0]
   1b122:	688b      	ldr	r3, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   1b124:	6875      	ldr	r5, [r6, #4]
   1b126:	68b1      	ldr	r1, [r6, #8]
    if (NumInputs(node) == 3) {
   1b128:	6837      	ldr	r7, [r6, #0]
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b12a:	4604      	mov	r4, r0
   1b12c:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   1b130:	eb03 1181 	add.w	r1, r3, r1, lsl #6
    input = GetInput(context, node, 0);
   1b134:	6045      	str	r5, [r0, #4]
    paddings = GetInput(context, node, 1);
   1b136:	6081      	str	r1, [r0, #8]
    if (NumInputs(node) == 3) {
   1b138:	2f03      	cmp	r7, #3
    constant_values = nullptr;
   1b13a:	f04f 0000 	mov.w	r0, #0
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   1b13e:	b087      	sub	sp, #28
    constant_values = nullptr;
   1b140:	6020      	str	r0, [r4, #0]
    if (NumInputs(node) == 3) {
   1b142:	d105      	bne.n	1b150 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x32>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1b144:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   1b146:	1c77      	adds	r7, r6, #1
    return &context->tensors[node->inputs->data[index]];
   1b148:	bf18      	it	ne
   1b14a:	eb03 1086 	addne.w	r0, r3, r6, lsl #6
      constant_values = GetOptionalInputTensor(context, node, 2);
   1b14e:	6020      	str	r0, [r4, #0]
  return &context->tensors[node->outputs->data[index]];
   1b150:	6852      	ldr	r2, [r2, #4]
   1b152:	6852      	ldr	r2, [r2, #4]
   1b154:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    output = GetOutput(context, node, 0);
   1b158:	60e3      	str	r3, [r4, #12]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1b15a:	68ab      	ldr	r3, [r5, #8]
    dims = NumDimensions(input);
   1b15c:	681b      	ldr	r3, [r3, #0]
   1b15e:	6123      	str	r3, [r4, #16]
    resizing_category = ResizingCategory::kGenericResize;
   1b160:	2302      	movs	r3, #2
   1b162:	7523      	strb	r3, [r4, #20]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   1b164:	4668      	mov	r0, sp
   1b166:	f7fa fbf6 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b16a:	4668      	mov	r0, sp
   1b16c:	f7fa fc3e 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1b170:	4605      	mov	r5, r0
   1b172:	4668      	mov	r0, sp
   1b174:	f7fa fbaa 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    const int32* paddings_data = GetTensorData<int32>(paddings);
   1b178:	68a2      	ldr	r2, [r4, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b17a:	b18a      	cbz	r2, 1b1a0 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x82>
   1b17c:	6853      	ldr	r3, [r2, #4]
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   1b17e:	7d12      	ldrb	r2, [r2, #20]
   1b180:	2a01      	cmp	r2, #1
   1b182:	d10a      	bne.n	1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
    if (IsConstantTensor(paddings) && paddings_total == 8 &&
   1b184:	2d08      	cmp	r5, #8
   1b186:	d108      	bne.n	1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
   1b188:	6819      	ldr	r1, [r3, #0]
   1b18a:	b931      	cbnz	r1, 1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   1b18c:	6859      	ldr	r1, [r3, #4]
   1b18e:	b921      	cbnz	r1, 1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
   1b190:	6999      	ldr	r1, [r3, #24]
   1b192:	b911      	cbnz	r1, 1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
        (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   1b194:	69db      	ldr	r3, [r3, #28]
   1b196:	b903      	cbnz	r3, 1b19a <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7c>
      resizing_category = ResizingCategory::kImageStyle;
   1b198:	7522      	strb	r2, [r4, #20]
  }
   1b19a:	4620      	mov	r0, r4
   1b19c:	b007      	add	sp, #28
   1b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1a0:	4613      	mov	r3, r2
   1b1a2:	e7ec      	b.n	1b17e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x60>

0001b1a4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1a8:	b09f      	sub	sp, #124	; 0x7c
   1b1aa:	4606      	mov	r6, r0
   1b1ac:	4614      	mov	r4, r2
   1b1ae:	461d      	mov	r5, r3
    return RuntimeShape(new_shape_size, shape, 1);
   1b1b0:	460a      	mov	r2, r1
   1b1b2:	2301      	movs	r3, #1
   1b1b4:	2104      	movs	r1, #4
   1b1b6:	a812      	add	r0, sp, #72	; 0x48
   1b1b8:	f7fa fc28 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b1bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b1be:	2301      	movs	r3, #1
   1b1c0:	2104      	movs	r1, #4
   1b1c2:	a818      	add	r0, sp, #96	; 0x60
   1b1c4:	f7fa fc22 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b1c8:	f996 0000 	ldrsb.w	r0, [r6]
   1b1cc:	2804      	cmp	r0, #4
   1b1ce:	dd01      	ble.n	1b1d4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b1d0:	f003 fa10 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b1d4:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b1d8:	2904      	cmp	r1, #4
   1b1da:	dcf9      	bgt.n	1b1d0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b1dc:	2300      	movs	r3, #0
   1b1de:	f06f 0203 	mvn.w	r2, #3
   1b1e2:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b1e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b1ea:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b1ee:	fb02 c200 	mla	r2, r2, r0, ip
   1b1f2:	1d37      	adds	r7, r6, #4
   1b1f4:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b1f6:	4298      	cmp	r0, r3
   1b1f8:	dc13      	bgt.n	1b222 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	f06f 0203 	mvn.w	r2, #3
   1b200:	a81e      	add	r0, sp, #120	; 0x78
   1b202:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b206:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b20a:	fb02 0201 	mla	r2, r2, r1, r0
   1b20e:	3618      	adds	r6, #24
   1b210:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b212:	4299      	cmp	r1, r3
   1b214:	dd0b      	ble.n	1b22e <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b216:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b21a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b21e:	3301      	adds	r3, #1
   1b220:	e7f7      	b.n	1b212 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b222:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b226:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b22a:	3301      	adds	r3, #1
   1b22c:	e7e3      	b.n	1b1f6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b22e:	2100      	movs	r1, #0
   1b230:	a818      	add	r0, sp, #96	; 0x60
   1b232:	f7fa fb56 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b236:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b238:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b23a:	a818      	add	r0, sp, #96	; 0x60
   1b23c:	f7fa fb51 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b240:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b242:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b244:	a818      	add	r0, sp, #96	; 0x60
   1b246:	f7fa fb4c 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b24a:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b24c:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b24e:	a818      	add	r0, sp, #96	; 0x60
   1b250:	f7fa fb47 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b256:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[1];
   1b258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b25a:	9302      	str	r3, [sp, #8]
  const int left_w_padding = left_padding_copy[2];
   1b25c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b25e:	9303      	str	r3, [sp, #12]
  const int left_d_padding = left_padding_copy[3];
   1b260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b262:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b264:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b266:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b268:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b26a:	9306      	str	r3, [sp, #24]
   1b26c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1b270:	009b      	lsls	r3, r3, #2
   1b272:	9307      	str	r3, [sp, #28]
              out_b >= output_batch - right_b_padding ||
   1b274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b276:	6829      	ldr	r1, [r5, #0]
              out_b >= output_batch - right_b_padding ||
   1b278:	eba8 0303 	sub.w	r3, r8, r3
   1b27c:	9309      	str	r3, [sp, #36]	; 0x24
              out_h >= output_height - right_h_padding ||
   1b27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  const int output_depth = ext_output_shape.Dims(3);
   1b280:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b282:	2600      	movs	r6, #0
              out_h >= output_height - right_h_padding ||
   1b284:	eba9 0e03 	sub.w	lr, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b288:	4546      	cmp	r6, r8
   1b28a:	da39      	bge.n	1b300 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b28c:	f04f 0c00 	mov.w	ip, #0
   1b290:	45cc      	cmp	ip, r9
   1b292:	da33      	bge.n	1b2fc <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
              out_w >= output_width - right_w_padding ||
   1b294:	9b05      	ldr	r3, [sp, #20]
   1b296:	ebaa 0b03 	sub.w	fp, sl, r3
              out_d >= output_depth - right_d_padding) {
   1b29a:	9b06      	ldr	r3, [sp, #24]
   1b29c:	1afb      	subs	r3, r7, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b29e:	2000      	movs	r0, #0
              out_d >= output_depth - right_d_padding) {
   1b2a0:	9308      	str	r3, [sp, #32]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b2a2:	4550      	cmp	r0, sl
   1b2a4:	da27      	bge.n	1b2f6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b2a6:	2500      	movs	r5, #0
   1b2a8:	42bd      	cmp	r5, r7
   1b2aa:	da1e      	bge.n	1b2ea <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b2ac:	9b01      	ldr	r3, [sp, #4]
   1b2ae:	429e      	cmp	r6, r3
   1b2b0:	db19      	blt.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   1b2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b2b4:	42b3      	cmp	r3, r6
   1b2b6:	dd16      	ble.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   1b2b8:	9b02      	ldr	r3, [sp, #8]
   1b2ba:	459c      	cmp	ip, r3
   1b2bc:	db13      	blt.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   1b2be:	45e6      	cmp	lr, ip
   1b2c0:	dd11      	ble.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   1b2c2:	9b03      	ldr	r3, [sp, #12]
   1b2c4:	4298      	cmp	r0, r3
   1b2c6:	db0e      	blt.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   1b2c8:	4583      	cmp	fp, r0
   1b2ca:	dd0c      	ble.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   1b2cc:	9b04      	ldr	r3, [sp, #16]
   1b2ce:	429d      	cmp	r5, r3
   1b2d0:	db09      	blt.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   1b2d2:	9b08      	ldr	r3, [sp, #32]
   1b2d4:	42ab      	cmp	r3, r5
   1b2d6:	dd06      	ble.n	1b2e6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   1b2d8:	f854 3b04 	ldr.w	r3, [r4], #4
   1b2dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b2de:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b2e2:	3501      	adds	r5, #1
   1b2e4:	e7e0      	b.n	1b2a8 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x104>
            *out_ptr++ = pad_value;
   1b2e6:	460b      	mov	r3, r1
   1b2e8:	e7f8      	b.n	1b2dc <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   1b2ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b2ec:	9a07      	ldr	r2, [sp, #28]
   1b2ee:	4413      	add	r3, r2
   1b2f0:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b2f2:	3001      	adds	r0, #1
   1b2f4:	e7d5      	b.n	1b2a2 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfe>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b2f6:	f10c 0c01 	add.w	ip, ip, #1
   1b2fa:	e7c9      	b.n	1b290 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b2fc:	3601      	adds	r6, #1
   1b2fe:	e7c3      	b.n	1b288 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   1b300:	a818      	add	r0, sp, #96	; 0x60
   1b302:	f7fa fae3 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b306:	a812      	add	r0, sp, #72	; 0x48
   1b308:	f7fa fae0 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b30c:	b01f      	add	sp, #124	; 0x7c
   1b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b312 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b316:	b09d      	sub	sp, #116	; 0x74
   1b318:	4606      	mov	r6, r0
   1b31a:	4614      	mov	r4, r2
   1b31c:	461d      	mov	r5, r3
   1b31e:	460a      	mov	r2, r1
   1b320:	2301      	movs	r3, #1
   1b322:	2104      	movs	r1, #4
   1b324:	a810      	add	r0, sp, #64	; 0x40
   1b326:	f7fa fb71 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b32a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1b32c:	2301      	movs	r3, #1
   1b32e:	2104      	movs	r1, #4
   1b330:	a816      	add	r0, sp, #88	; 0x58
   1b332:	f7fa fb6b 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b336:	f996 0000 	ldrsb.w	r0, [r6]
   1b33a:	2804      	cmp	r0, #4
   1b33c:	dd01      	ble.n	1b342 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b33e:	f003 f959 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b342:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b346:	2904      	cmp	r1, #4
   1b348:	dcf9      	bgt.n	1b33e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b34a:	2300      	movs	r3, #0
   1b34c:	f06f 0203 	mvn.w	r2, #3
   1b350:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1b354:	e9cd 3308 	strd	r3, r3, [sp, #32]
   1b358:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b35c:	fb02 c200 	mla	r2, r2, r0, ip
   1b360:	1d37      	adds	r7, r6, #4
   1b362:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b364:	4298      	cmp	r0, r3
   1b366:	dc13      	bgt.n	1b390 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b368:	2300      	movs	r3, #0
   1b36a:	f06f 0203 	mvn.w	r2, #3
   1b36e:	a81c      	add	r0, sp, #112	; 0x70
   1b370:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1b374:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b378:	fb02 0201 	mla	r2, r2, r1, r0
   1b37c:	3618      	adds	r6, #24
   1b37e:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b380:	4299      	cmp	r1, r3
   1b382:	dd0b      	ble.n	1b39c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b384:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b388:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b38c:	3301      	adds	r3, #1
   1b38e:	e7f7      	b.n	1b380 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b390:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b394:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b398:	3301      	adds	r3, #1
   1b39a:	e7e3      	b.n	1b364 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b39c:	2100      	movs	r1, #0
   1b39e:	a816      	add	r0, sp, #88	; 0x58
   1b3a0:	f7fa fa9f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b3a4:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b3a6:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b3a8:	a816      	add	r0, sp, #88	; 0x58
   1b3aa:	f7fa fa9a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b3ae:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b3b0:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b3b2:	a816      	add	r0, sp, #88	; 0x58
   1b3b4:	f7fa fa95 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b3b8:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b3ba:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b3bc:	a816      	add	r0, sp, #88	; 0x58
   1b3be:	f7fa fa90 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b3c2:	9b08      	ldr	r3, [sp, #32]
   1b3c4:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3c8:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b3cc:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b3d0:	9303      	str	r3, [sp, #12]
  const int right_w_padding = right_padding_copy[2];
   1b3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b3d4:	9304      	str	r3, [sp, #16]
  const int right_d_padding = right_padding_copy[3];
   1b3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              out_h >= output_height - right_h_padding ||
   1b3d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int right_d_padding = right_padding_copy[3];
   1b3da:	9305      	str	r3, [sp, #20]
  const int output_depth = ext_output_shape.Dims(3);
   1b3dc:	4601      	mov	r1, r0
   1b3de:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
              out_b >= output_batch - right_b_padding ||
   1b3e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  const T pad_value = *pad_value_ptr;
   1b3e4:	ed95 7a00 	vldr	s14, [r5]
   1b3e8:	009b      	lsls	r3, r3, #2
   1b3ea:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b3ec:	eba8 0000 	sub.w	r0, r8, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b3f0:	2300      	movs	r3, #0
              out_h >= output_height - right_h_padding ||
   1b3f2:	eba9 0c02 	sub.w	ip, r9, r2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b3f6:	4543      	cmp	r3, r8
   1b3f8:	da38      	bge.n	1b46c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b3fa:	2500      	movs	r5, #0
   1b3fc:	454d      	cmp	r5, r9
   1b3fe:	da33      	bge.n	1b468 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x156>
              out_w >= output_width - right_w_padding ||
   1b400:	9a04      	ldr	r2, [sp, #16]
   1b402:	ebaa 0b02 	sub.w	fp, sl, r2
              out_d >= output_depth - right_d_padding) {
   1b406:	9a05      	ldr	r2, [sp, #20]
   1b408:	1a8a      	subs	r2, r1, r2
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b40a:	2600      	movs	r6, #0
              out_d >= output_depth - right_d_padding) {
   1b40c:	9207      	str	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b40e:	4556      	cmp	r6, sl
   1b410:	da28      	bge.n	1b464 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
   1b412:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b416:	2700      	movs	r7, #0
   1b418:	428f      	cmp	r7, r1
   1b41a:	da1d      	bge.n	1b458 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b41c:	9a00      	ldr	r2, [sp, #0]
   1b41e:	4293      	cmp	r3, r2
   1b420:	db17      	blt.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
   1b422:	4298      	cmp	r0, r3
   1b424:	dd15      	ble.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_b >= output_batch - right_b_padding ||
   1b426:	9a01      	ldr	r2, [sp, #4]
   1b428:	4295      	cmp	r5, r2
   1b42a:	db12      	blt.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h < left_h_padding ||
   1b42c:	45ac      	cmp	ip, r5
   1b42e:	dd10      	ble.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h >= output_height - right_h_padding ||
   1b430:	9a02      	ldr	r2, [sp, #8]
   1b432:	4296      	cmp	r6, r2
   1b434:	db0d      	blt.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w < left_w_padding ||
   1b436:	45b3      	cmp	fp, r6
   1b438:	dd0b      	ble.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w >= output_width - right_w_padding ||
   1b43a:	9a03      	ldr	r2, [sp, #12]
   1b43c:	4297      	cmp	r7, r2
   1b43e:	db08      	blt.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_d < left_d_padding ||
   1b440:	9a07      	ldr	r2, [sp, #28]
   1b442:	42ba      	cmp	r2, r7
   1b444:	dd05      	ble.n	1b452 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
            *out_ptr++ = *in_ptr++;
   1b446:	ecf4 7a01 	vldmia	r4!, {s15}
   1b44a:	ecee 7a01 	vstmia	lr!, {s15}
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b44e:	3701      	adds	r7, #1
   1b450:	e7e2      	b.n	1b418 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   1b452:	eef0 7a47 	vmov.f32	s15, s14
   1b456:	e7f8      	b.n	1b44a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   1b458:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1b45a:	9f06      	ldr	r7, [sp, #24]
   1b45c:	443a      	add	r2, r7
   1b45e:	9227      	str	r2, [sp, #156]	; 0x9c
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b460:	3601      	adds	r6, #1
   1b462:	e7d4      	b.n	1b40e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b464:	3501      	adds	r5, #1
   1b466:	e7c9      	b.n	1b3fc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b468:	3301      	adds	r3, #1
   1b46a:	e7c4      	b.n	1b3f6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   1b46c:	a816      	add	r0, sp, #88	; 0x58
   1b46e:	f7fa fa2d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b472:	a810      	add	r0, sp, #64	; 0x40
   1b474:	f7fa fa2a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b478:	b01d      	add	sp, #116	; 0x74
   1b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b47e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b47e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b482:	b09f      	sub	sp, #124	; 0x7c
   1b484:	4606      	mov	r6, r0
   1b486:	4614      	mov	r4, r2
   1b488:	461d      	mov	r5, r3
   1b48a:	460a      	mov	r2, r1
   1b48c:	2301      	movs	r3, #1
   1b48e:	2104      	movs	r1, #4
   1b490:	a812      	add	r0, sp, #72	; 0x48
   1b492:	f7fa fabb 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b496:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b498:	2301      	movs	r3, #1
   1b49a:	2104      	movs	r1, #4
   1b49c:	a818      	add	r0, sp, #96	; 0x60
   1b49e:	f7fa fab5 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b4a2:	f996 0000 	ldrsb.w	r0, [r6]
   1b4a6:	2804      	cmp	r0, #4
   1b4a8:	dd01      	ble.n	1b4ae <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b4aa:	f003 f8a3 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b4ae:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b4b2:	2904      	cmp	r1, #4
   1b4b4:	dcf9      	bgt.n	1b4aa <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b4b6:	2300      	movs	r3, #0
   1b4b8:	f06f 0203 	mvn.w	r2, #3
   1b4bc:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b4c0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b4c4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b4c8:	fb02 c200 	mla	r2, r2, r0, ip
   1b4cc:	1d37      	adds	r7, r6, #4
   1b4ce:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b4d0:	4298      	cmp	r0, r3
   1b4d2:	dc13      	bgt.n	1b4fc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b4d4:	2300      	movs	r3, #0
   1b4d6:	f06f 0203 	mvn.w	r2, #3
   1b4da:	a81e      	add	r0, sp, #120	; 0x78
   1b4dc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b4e0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b4e4:	fb02 0201 	mla	r2, r2, r1, r0
   1b4e8:	3618      	adds	r6, #24
   1b4ea:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b4ec:	4299      	cmp	r1, r3
   1b4ee:	dd0b      	ble.n	1b508 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b4f0:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b4f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b4f8:	3301      	adds	r3, #1
   1b4fa:	e7f7      	b.n	1b4ec <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b4fc:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b500:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b504:	3301      	adds	r3, #1
   1b506:	e7e3      	b.n	1b4d0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b508:	2100      	movs	r1, #0
   1b50a:	a818      	add	r0, sp, #96	; 0x60
   1b50c:	f7fa f9e9 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b510:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b512:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b514:	a818      	add	r0, sp, #96	; 0x60
   1b516:	f7fa f9e4 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b51a:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b51c:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b51e:	a818      	add	r0, sp, #96	; 0x60
   1b520:	f7fa f9df 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b524:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b526:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b528:	a818      	add	r0, sp, #96	; 0x60
   1b52a:	f7fa f9da 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b530:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b534:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b538:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b53c:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   1b53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b540:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b542:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b544:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b546:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b548:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b54c:	7829      	ldrb	r1, [r5, #0]
              out_b >= output_batch - right_b_padding ||
   1b54e:	eba8 0303 	sub.w	r3, r8, r3
   1b552:	9308      	str	r3, [sp, #32]
   1b554:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   1b558:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b55a:	2600      	movs	r6, #0
   1b55c:	9309      	str	r3, [sp, #36]	; 0x24
   1b55e:	4546      	cmp	r6, r8
   1b560:	da3b      	bge.n	1b5da <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
              out_h >= output_height - right_h_padding ||
   1b562:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b564:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   1b568:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b56c:	45cc      	cmp	ip, r9
   1b56e:	da32      	bge.n	1b5d6 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
              out_w >= output_width - right_w_padding ||
   1b570:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b572:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   1b574:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b578:	4550      	cmp	r0, sl
   1b57a:	da29      	bge.n	1b5d0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
              out_d >= output_depth - right_d_padding) {
   1b57c:	9b06      	ldr	r3, [sp, #24]
   1b57e:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b580:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   1b582:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b584:	42bd      	cmp	r5, r7
   1b586:	da1d      	bge.n	1b5c4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   1b588:	9b00      	ldr	r3, [sp, #0]
   1b58a:	429e      	cmp	r6, r3
   1b58c:	db18      	blt.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   1b58e:	9b08      	ldr	r3, [sp, #32]
   1b590:	42b3      	cmp	r3, r6
   1b592:	dd15      	ble.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   1b594:	9b01      	ldr	r3, [sp, #4]
   1b596:	459c      	cmp	ip, r3
   1b598:	db12      	blt.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   1b59a:	45e6      	cmp	lr, ip
   1b59c:	dd10      	ble.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   1b59e:	9b02      	ldr	r3, [sp, #8]
   1b5a0:	4298      	cmp	r0, r3
   1b5a2:	db0d      	blt.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   1b5a4:	4583      	cmp	fp, r0
   1b5a6:	dd0b      	ble.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   1b5a8:	9b03      	ldr	r3, [sp, #12]
   1b5aa:	429d      	cmp	r5, r3
   1b5ac:	db08      	blt.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   1b5ae:	9b07      	ldr	r3, [sp, #28]
   1b5b0:	42ab      	cmp	r3, r5
   1b5b2:	dd05      	ble.n	1b5c0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   1b5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b5b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b5ba:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b5bc:	3501      	adds	r5, #1
   1b5be:	e7e1      	b.n	1b584 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   1b5c0:	460b      	mov	r3, r1
   1b5c2:	e7f9      	b.n	1b5b8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13a>
   1b5c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b5c8:	4413      	add	r3, r2
   1b5ca:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b5cc:	3001      	adds	r0, #1
   1b5ce:	e7d3      	b.n	1b578 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfa>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b5d0:	f10c 0c01 	add.w	ip, ip, #1
   1b5d4:	e7ca      	b.n	1b56c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xee>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b5d6:	3601      	adds	r6, #1
   1b5d8:	e7c1      	b.n	1b55e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe0>
  const RuntimeShape ext_output_shape =
   1b5da:	a818      	add	r0, sp, #96	; 0x60
   1b5dc:	f7fa f976 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b5e0:	a812      	add	r0, sp, #72	; 0x48
   1b5e2:	f7fa f973 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b5e6:	b01f      	add	sp, #124	; 0x7c
   1b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b5ec <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   1b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5f0:	b09f      	sub	sp, #124	; 0x7c
   1b5f2:	4606      	mov	r6, r0
   1b5f4:	4614      	mov	r4, r2
   1b5f6:	461d      	mov	r5, r3
   1b5f8:	460a      	mov	r2, r1
   1b5fa:	2301      	movs	r3, #1
   1b5fc:	2104      	movs	r1, #4
   1b5fe:	a812      	add	r0, sp, #72	; 0x48
   1b600:	f7fa fa04 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1b604:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b606:	2301      	movs	r3, #1
   1b608:	2104      	movs	r1, #4
   1b60a:	a818      	add	r0, sp, #96	; 0x60
   1b60c:	f7fa f9fe 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   1b610:	f996 0000 	ldrsb.w	r0, [r6]
   1b614:	2804      	cmp	r0, #4
   1b616:	dd01      	ble.n	1b61c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   1b618:	f002 ffec 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   1b61c:	f996 1014 	ldrsb.w	r1, [r6, #20]
   1b620:	2904      	cmp	r1, #4
   1b622:	dcf9      	bgt.n	1b618 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    left_padding_copy[i] = 0;
   1b624:	2300      	movs	r3, #0
   1b626:	f06f 0203 	mvn.w	r2, #3
   1b62a:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b62e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1b632:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b636:	fb02 c200 	mla	r2, r2, r0, ip
   1b63a:	1d37      	adds	r7, r6, #4
   1b63c:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b63e:	4298      	cmp	r0, r3
   1b640:	dc13      	bgt.n	1b66a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
    right_padding_copy[i] = 0;
   1b642:	2300      	movs	r3, #0
   1b644:	f06f 0203 	mvn.w	r2, #3
   1b648:	a81e      	add	r0, sp, #120	; 0x78
   1b64a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   1b64e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   1b652:	fb02 0201 	mla	r2, r2, r1, r0
   1b656:	3618      	adds	r6, #24
   1b658:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b65a:	4299      	cmp	r1, r3
   1b65c:	dd0b      	ble.n	1b676 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   1b65e:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   1b662:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   1b666:	3301      	adds	r3, #1
   1b668:	e7f7      	b.n	1b65a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   1b66a:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   1b66e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   1b672:	3301      	adds	r3, #1
   1b674:	e7e3      	b.n	1b63e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   1b676:	2100      	movs	r1, #0
   1b678:	a818      	add	r0, sp, #96	; 0x60
   1b67a:	f7fa f932 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   1b67e:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   1b680:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   1b682:	a818      	add	r0, sp, #96	; 0x60
   1b684:	f7fa f92d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   1b688:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   1b68a:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   1b68c:	a818      	add	r0, sp, #96	; 0x60
   1b68e:	f7fa f928 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   1b692:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   1b694:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   1b696:	a818      	add	r0, sp, #96	; 0x60
   1b698:	f7fa f923 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   1b69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b69e:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   1b6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b6a2:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   1b6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b6a6:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   1b6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b6aa:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   1b6ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b6ae:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   1b6b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b6b2:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   1b6b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b6b6:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   1b6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   1b6ba:	f995 1000 	ldrsb.w	r1, [r5]
              out_b >= output_batch - right_b_padding ||
   1b6be:	eba8 0303 	sub.w	r3, r8, r3
   1b6c2:	9308      	str	r3, [sp, #32]
   1b6c4:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   1b6c8:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b6ca:	2600      	movs	r6, #0
   1b6cc:	9309      	str	r3, [sp, #36]	; 0x24
   1b6ce:	4546      	cmp	r6, r8
   1b6d0:	da3b      	bge.n	1b74a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15e>
              out_h >= output_height - right_h_padding ||
   1b6d2:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b6d4:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   1b6d8:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b6dc:	45cc      	cmp	ip, r9
   1b6de:	da32      	bge.n	1b746 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
              out_w >= output_width - right_w_padding ||
   1b6e0:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b6e2:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   1b6e4:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b6e8:	4550      	cmp	r0, sl
   1b6ea:	da29      	bge.n	1b740 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x154>
              out_d >= output_depth - right_d_padding) {
   1b6ec:	9b06      	ldr	r3, [sp, #24]
   1b6ee:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b6f0:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   1b6f2:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b6f4:	42bd      	cmp	r5, r7
   1b6f6:	da1d      	bge.n	1b734 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
          if (out_b < left_b_padding ||
   1b6f8:	9b00      	ldr	r3, [sp, #0]
   1b6fa:	429e      	cmp	r6, r3
   1b6fc:	db18      	blt.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
   1b6fe:	9b08      	ldr	r3, [sp, #32]
   1b700:	42b3      	cmp	r3, r6
   1b702:	dd15      	ble.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_b >= output_batch - right_b_padding ||
   1b704:	9b01      	ldr	r3, [sp, #4]
   1b706:	459c      	cmp	ip, r3
   1b708:	db12      	blt.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h < left_h_padding ||
   1b70a:	45e6      	cmp	lr, ip
   1b70c:	dd10      	ble.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h >= output_height - right_h_padding ||
   1b70e:	9b02      	ldr	r3, [sp, #8]
   1b710:	4298      	cmp	r0, r3
   1b712:	db0d      	blt.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w < left_w_padding ||
   1b714:	4583      	cmp	fp, r0
   1b716:	dd0b      	ble.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w >= output_width - right_w_padding ||
   1b718:	9b03      	ldr	r3, [sp, #12]
   1b71a:	429d      	cmp	r5, r3
   1b71c:	db08      	blt.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_d < left_d_padding ||
   1b71e:	9b07      	ldr	r3, [sp, #28]
   1b720:	42ab      	cmp	r3, r5
   1b722:	dd05      	ble.n	1b730 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
            *out_ptr++ = *in_ptr++;
   1b724:	f914 3b01 	ldrsb.w	r3, [r4], #1
   1b728:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b72a:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   1b72c:	3501      	adds	r5, #1
   1b72e:	e7e1      	b.n	1b6f4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x108>
            *out_ptr++ = pad_value;
   1b730:	460b      	mov	r3, r1
   1b732:	e7f9      	b.n	1b728 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13c>
   1b734:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1b736:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b738:	4413      	add	r3, r2
   1b73a:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   1b73c:	3001      	adds	r0, #1
   1b73e:	e7d3      	b.n	1b6e8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   1b740:	f10c 0c01 	add.w	ip, ip, #1
   1b744:	e7ca      	b.n	1b6dc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1b746:	3601      	adds	r6, #1
   1b748:	e7c1      	b.n	1b6ce <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe2>
  const RuntimeShape ext_output_shape =
   1b74a:	a818      	add	r0, sp, #96	; 0x60
   1b74c:	f7fa f8be 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   1b750:	a812      	add	r0, sp, #72	; 0x48
   1b752:	f7fa f8bb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1b756:	b01f      	add	sp, #124	; 0x7c
   1b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b75c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   1b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b760:	b097      	sub	sp, #92	; 0x5c
   1b762:	4698      	mov	r8, r3
   1b764:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b766:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1b76a:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   1b76c:	4604      	mov	r4, r0
   1b76e:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1b770:	dd01      	ble.n	1b776 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   1b772:	f002 ff3f 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b776:	680b      	ldr	r3, [r1, #0]
   1b778:	2b04      	cmp	r3, #4
   1b77a:	d1fa      	bne.n	1b772 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1b77c:	f8d8 3000 	ldr.w	r3, [r8]
   1b780:	2b04      	cmp	r3, #4
   1b782:	d1f6      	bne.n	1b772 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b784:	2300      	movs	r3, #0
   1b786:	4619      	mov	r1, r3
   1b788:	4642      	mov	r2, r8
   1b78a:	4638      	mov	r0, r7
   1b78c:	f7fc ff56 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b790:	2303      	movs	r3, #3
   1b792:	4619      	mov	r1, r3
   1b794:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b796:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b798:	4638      	mov	r0, r7
   1b79a:	f7fc ff4f 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1b79e:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b7a0:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   1b7a2:	4638      	mov	r0, r7
   1b7a4:	f7fa f89d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1b7a8:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1b7aa:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   1b7ac:	4638      	mov	r0, r7
   1b7ae:	f7fa f898 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1b7b2:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1b7b4:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   1b7b6:	4640      	mov	r0, r8
   1b7b8:	f7fa f893 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1b7bc:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1b7be:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   1b7c0:	4640      	mov	r0, r8
   1b7c2:	f7fa f88e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1b7c6:	68e3      	ldr	r3, [r4, #12]
   1b7c8:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   1b7ca:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1b7cc:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1b7ce:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   1b7d0:	2100      	movs	r1, #0
   1b7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b7d4:	4299      	cmp	r1, r3
   1b7d6:	f280 808d 	bge.w	1b8f4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   1b7da:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b7de:	f8cd b010 	str.w	fp, [sp, #16]
   1b7e2:	9b04      	ldr	r3, [sp, #16]
   1b7e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b7e6:	4293      	cmp	r3, r2
   1b7e8:	f280 8082 	bge.w	1b8f0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1b7ec:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b7f0:	f8cd a014 	str.w	sl, [sp, #20]
   1b7f4:	9b05      	ldr	r3, [sp, #20]
   1b7f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b7f8:	4293      	cmp	r3, r2
   1b7fa:	da73      	bge.n	1b8e4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1b7fc:	2300      	movs	r3, #0
   1b7fe:	9303      	str	r3, [sp, #12]
   1b800:	9b03      	ldr	r3, [sp, #12]
   1b802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b804:	4293      	cmp	r3, r2
   1b806:	da67      	bge.n	1b8d8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   1b808:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   1b80c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   1b810:	ebaa 0306 	sub.w	r3, sl, r6
   1b814:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1b816:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   1b81a:	ebab 0302 	sub.w	r3, fp, r2
   1b81e:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   1b820:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1b824:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1b826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b828:	441e      	add	r6, r3
   1b82a:	69a3      	ldr	r3, [r4, #24]
   1b82c:	429e      	cmp	r6, r3
   1b82e:	bfa8      	it	ge
   1b830:	461e      	movge	r6, r3
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1b832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b834:	9606      	str	r6, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
   1b836:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_height, input_height - in_y_origin);
   1b83a:	18d0      	adds	r0, r2, r3
   1b83c:	6963      	ldr	r3, [r4, #20]
   1b83e:	4298      	cmp	r0, r3
   1b840:	bfa8      	it	ge
   1b842:	4618      	movge	r0, r3
   1b844:	9b08      	ldr	r3, [sp, #32]
   1b846:	9009      	str	r0, [sp, #36]	; 0x24
          int32 acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b848:	2a00      	cmp	r2, #0
   1b84a:	bfa8      	it	ge
   1b84c:	189b      	addge	r3, r3, r2
          int32 acc = 0;
   1b84e:	2500      	movs	r5, #0
   1b850:	461a      	mov	r2, r3
          int filter_count = 0;
   1b852:	46a9      	mov	r9, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b854:	9b08      	ldr	r3, [sp, #32]
   1b856:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b858:	1ad3      	subs	r3, r2, r3
   1b85a:	4283      	cmp	r3, r0
   1b85c:	da1e      	bge.n	1b89c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b85e:	9e07      	ldr	r6, [sp, #28]
   1b860:	9b06      	ldr	r3, [sp, #24]
   1b862:	429e      	cmp	r6, r3
   1b864:	da0f      	bge.n	1b886 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12a>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1b866:	9b03      	ldr	r3, [sp, #12]
   1b868:	9300      	str	r3, [sp, #0]
   1b86a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b86c:	4638      	mov	r0, r7
   1b86e:	4433      	add	r3, r6
   1b870:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   1b874:	f7fa f8f7 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   1b878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b87a:	5c1b      	ldrb	r3, [r3, r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b87c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   1b880:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b882:	3601      	adds	r6, #1
   1b884:	e7ec      	b.n	1b860 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   1b886:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   1b88a:	1a1b      	subs	r3, r3, r0
   1b88c:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   1b890:	42b0      	cmp	r0, r6
   1b892:	bfb8      	it	lt
   1b894:	2300      	movlt	r3, #0
   1b896:	4499      	add	r9, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b898:	3201      	adds	r2, #1
   1b89a:	e7db      	b.n	1b854 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf8>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   1b89c:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
   1b8a0:	eb05 0563 	add.w	r5, r5, r3, asr #1
   1b8a4:	fb95 f9f9 	sdiv	r9, r5, r9
   1b8a8:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1b8aa:	9b03      	ldr	r3, [sp, #12]
   1b8ac:	9300      	str	r3, [sp, #0]
   1b8ae:	45a9      	cmp	r9, r5
   1b8b0:	bfb8      	it	lt
   1b8b2:	46a9      	movlt	r9, r5
   1b8b4:	6a25      	ldr	r5, [r4, #32]
   1b8b6:	9106      	str	r1, [sp, #24]
   1b8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b8bc:	45a9      	cmp	r9, r5
   1b8be:	4640      	mov	r0, r8
   1b8c0:	bfa8      	it	ge
   1b8c2:	46a9      	movge	r9, r5
   1b8c4:	f7fa f8cf 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1b8c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   1b8ca:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1b8cc:	f803 9000 	strb.w	r9, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1b8d0:	9b03      	ldr	r3, [sp, #12]
   1b8d2:	3301      	adds	r3, #1
   1b8d4:	9303      	str	r3, [sp, #12]
   1b8d6:	e793      	b.n	1b800 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b8d8:	9b05      	ldr	r3, [sp, #20]
   1b8da:	3301      	adds	r3, #1
   1b8dc:	9305      	str	r3, [sp, #20]
   1b8de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b8e0:	449a      	add	sl, r3
   1b8e2:	e787      	b.n	1b7f4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b8e4:	9b04      	ldr	r3, [sp, #16]
   1b8e6:	3301      	adds	r3, #1
   1b8e8:	9304      	str	r3, [sp, #16]
   1b8ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b8ec:	449b      	add	fp, r3
   1b8ee:	e778      	b.n	1b7e2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   1b8f0:	3101      	adds	r1, #1
   1b8f2:	e76e      	b.n	1b7d2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   1b8f4:	b017      	add	sp, #92	; 0x5c
   1b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b8fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   1b8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8fe:	ed2d 8b02 	vpush	{d8}
   1b902:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b904:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   1b906:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b908:	2b04      	cmp	r3, #4
                    float* output_data) {
   1b90a:	4604      	mov	r4, r0
   1b90c:	460d      	mov	r5, r1
   1b90e:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1b910:	d001      	beq.n	1b916 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   1b912:	f002 fe6f 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1b916:	6833      	ldr	r3, [r6, #0]
   1b918:	2b04      	cmp	r3, #4
   1b91a:	d1fa      	bne.n	1b912 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b91c:	2300      	movs	r3, #0
   1b91e:	4619      	mov	r1, r3
   1b920:	4632      	mov	r2, r6
   1b922:	4628      	mov	r0, r5
   1b924:	f7fc fe8a 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b928:	2303      	movs	r3, #3
   1b92a:	4619      	mov	r1, r3
   1b92c:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1b92e:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b930:	4628      	mov	r0, r5
   1b932:	f7fc fe83 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1b936:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1b938:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   1b93a:	4628      	mov	r0, r5
   1b93c:	f7f9 ffd1 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1b940:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1b942:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   1b944:	4628      	mov	r0, r5
   1b946:	f7f9 ffcc 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1b94a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1b94c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1b94e:	4630      	mov	r0, r6
   1b950:	f7f9 ffc7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1b954:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1b956:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
   1b958:	4630      	mov	r0, r6
   1b95a:	f7f9 ffc2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1b95e:	68e3      	ldr	r3, [r4, #12]
   1b960:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1b962:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1b964:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
   1b966:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
   1b968:	f04f 0b00 	mov.w	fp, #0
   1b96c:	9b07      	ldr	r3, [sp, #28]
   1b96e:	459b      	cmp	fp, r3
   1b970:	f280 8094 	bge.w	1ba9c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
   1b974:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b978:	46d0      	mov	r8, sl
   1b97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b97c:	4598      	cmp	r8, r3
   1b97e:	f280 808a 	bge.w	1ba96 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1b982:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b984:	46b9      	mov	r9, r7
   1b986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b988:	4599      	cmp	r9, r3
   1b98a:	da7f      	bge.n	1ba8c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   1b98c:	2300      	movs	r3, #0
   1b98e:	9303      	str	r3, [sp, #12]
   1b990:	9b03      	ldr	r3, [sp, #12]
   1b992:	9a08      	ldr	r2, [sp, #32]
   1b994:	4293      	cmp	r3, r2
   1b996:	da74      	bge.n	1ba82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
              (out_x * stride_width) - params.padding_values.width;
   1b998:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1b99c:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1b99e:	1afa      	subs	r2, r7, r3
   1b9a0:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
   1b9a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1b9a6:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1b9a8:	ebaa 0102 	sub.w	r1, sl, r2
   1b9ac:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1b9ae:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1b9b2:	9111      	str	r1, [sp, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1b9b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b9b6:	440b      	add	r3, r1
   1b9b8:	4283      	cmp	r3, r0
   1b9ba:	bfa8      	it	ge
   1b9bc:	4603      	movge	r3, r0
   1b9be:	9306      	str	r3, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
          const int filter_y_start = std::max(0, -in_y_origin);
   1b9c2:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_height, input_height - in_y_origin);
   1b9c6:	18d0      	adds	r0, r2, r3
   1b9c8:	6963      	ldr	r3, [r4, #20]
   1b9ca:	4298      	cmp	r0, r3
   1b9cc:	bfa8      	it	ge
   1b9ce:	4618      	movge	r0, r3
          float max = std::numeric_limits<float>::lowest();
   1b9d0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1b9d4:	9315      	str	r3, [sp, #84]	; 0x54
   1b9d6:	9b05      	ldr	r3, [sp, #20]
   1b9d8:	900a      	str	r0, [sp, #40]	; 0x28
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1b9da:	2a00      	cmp	r2, #0
   1b9dc:	bfa8      	it	ge
   1b9de:	189b      	addge	r3, r3, r2
   1b9e0:	461a      	mov	r2, r3
   1b9e2:	9b05      	ldr	r3, [sp, #20]
   1b9e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b9e6:	1ad3      	subs	r3, r2, r3
   1b9e8:	428b      	cmp	r3, r1
   1b9ea:	da26      	bge.n	1ba3a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1b9ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b9ee:	9304      	str	r3, [sp, #16]
   1b9f0:	9b06      	ldr	r3, [sp, #24]
   1b9f2:	9904      	ldr	r1, [sp, #16]
   1b9f4:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   1b9f8:	428b      	cmp	r3, r1
   1b9fa:	dd1c      	ble.n	1ba36 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1b9fc:	9b03      	ldr	r3, [sp, #12]
   1b9fe:	9300      	str	r3, [sp, #0]
   1ba00:	460b      	mov	r3, r1
   1ba02:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ba04:	9213      	str	r2, [sp, #76]	; 0x4c
   1ba06:	440b      	add	r3, r1
   1ba08:	4628      	mov	r0, r5
   1ba0a:	4659      	mov	r1, fp
   1ba0c:	f7fa f82b 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1ba10:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1ba12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1ba14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
      if (__a < __b)
   1ba18:	edd0 7a00 	vldr	s15, [r0]
   1ba1c:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   1ba20:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   1ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1ba26:	bfd8      	it	le
   1ba28:	4618      	movle	r0, r3
              max = std::max(
   1ba2a:	6803      	ldr	r3, [r0, #0]
   1ba2c:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1ba2e:	9b04      	ldr	r3, [sp, #16]
   1ba30:	3301      	adds	r3, #1
   1ba32:	9304      	str	r3, [sp, #16]
   1ba34:	e7dc      	b.n	1b9f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1ba36:	3201      	adds	r2, #1
   1ba38:	e7d3      	b.n	1b9e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba3a:	9b03      	ldr	r3, [sp, #12]
   1ba3c:	9300      	str	r3, [sp, #0]
   1ba3e:	4642      	mov	r2, r8
   1ba40:	464b      	mov	r3, r9
   1ba42:	4659      	mov	r1, fp
   1ba44:	4630      	mov	r0, r6
   1ba46:	f7fa f80e 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   1ba4a:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba4e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   1ba52:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   1ba56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ba58:	eef4 7ac8 	vcmpe.f32	s15, s16
   1ba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba60:	bfb8      	it	lt
   1ba62:	eef0 7a48 	vmovlt.f32	s15, s16
   1ba66:	eef4 7ac7 	vcmpe.f32	s15, s14
   1ba6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        for (int channel = 0; channel < depth; ++channel) {
   1ba72:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1ba74:	bf88      	it	hi
   1ba76:	eef0 7a47 	vmovhi.f32	s15, s14
   1ba7a:	edc0 7a00 	vstr	s15, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   1ba7e:	3301      	adds	r3, #1
   1ba80:	e785      	b.n	1b98e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x94>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1ba82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ba84:	f109 0901 	add.w	r9, r9, #1
   1ba88:	441f      	add	r7, r3
   1ba8a:	e77c      	b.n	1b986 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1ba8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ba8e:	f108 0801 	add.w	r8, r8, #1
   1ba92:	449a      	add	sl, r3
   1ba94:	e771      	b.n	1b97a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int batch = 0; batch < batches; ++batch) {
   1ba96:	f10b 0b01 	add.w	fp, fp, #1
   1ba9a:	e767      	b.n	1b96c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x72>
                                           params.float_activation_max);
        }
      }
    }
  }
}
   1ba9c:	b017      	add	sp, #92	; 0x5c
   1ba9e:	ecbd 8b02 	vpop	{d8}
   1baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001baa6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   1baa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baaa:	b097      	sub	sp, #92	; 0x5c
   1baac:	461e      	mov	r6, r3
   1baae:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bab0:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1bab4:	429a      	cmp	r2, r3
                    uint8* output_data) {
   1bab6:	4604      	mov	r4, r0
   1bab8:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1baba:	dd01      	ble.n	1bac0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   1babc:	f002 fd9a 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   1bac0:	2a00      	cmp	r2, #0
   1bac2:	dbfb      	blt.n	1babc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   1bac4:	2bff      	cmp	r3, #255	; 0xff
   1bac6:	dcf9      	bgt.n	1babc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1bac8:	680b      	ldr	r3, [r1, #0]
   1baca:	2b04      	cmp	r3, #4
   1bacc:	d1f6      	bne.n	1babc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1bace:	6833      	ldr	r3, [r6, #0]
   1bad0:	2b04      	cmp	r3, #4
   1bad2:	d1f3      	bne.n	1babc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bad4:	2300      	movs	r3, #0
   1bad6:	4619      	mov	r1, r3
   1bad8:	4632      	mov	r2, r6
   1bada:	4628      	mov	r0, r5
   1badc:	f7fc fdae 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bae0:	2303      	movs	r3, #3
   1bae2:	4619      	mov	r1, r3
   1bae4:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bae6:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bae8:	4628      	mov	r0, r5
   1baea:	f7fc fda7 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1baee:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1baf0:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   1baf2:	4628      	mov	r0, r5
   1baf4:	f7f9 fef5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1baf8:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1bafa:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   1bafc:	4628      	mov	r0, r5
   1bafe:	f7f9 fef0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1bb02:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1bb04:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1bb06:	4630      	mov	r0, r6
   1bb08:	f7f9 feeb 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1bb0c:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1bb0e:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   1bb10:	4630      	mov	r0, r6
   1bb12:	f7f9 fee6 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1bb16:	68e3      	ldr	r3, [r4, #12]
   1bb18:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1bb1a:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1bb1c:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1bb1e:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   1bb20:	f04f 0b00 	mov.w	fp, #0
   1bb24:	9b08      	ldr	r3, [sp, #32]
   1bb26:	459b      	cmp	fp, r3
   1bb28:	f280 8089 	bge.w	1bc3e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   1bb2c:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bb30:	f8cd 800c 	str.w	r8, [sp, #12]
   1bb34:	9b03      	ldr	r3, [sp, #12]
   1bb36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bb38:	4293      	cmp	r3, r2
   1bb3a:	da7d      	bge.n	1bc38 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x192>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1bb3c:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bb3e:	46b9      	mov	r9, r7
   1bb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bb42:	4599      	cmp	r9, r3
   1bb44:	da72      	bge.n	1bc2c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x186>
        for (int channel = 0; channel < depth; ++channel) {
   1bb46:	2300      	movs	r3, #0
   1bb48:	9302      	str	r3, [sp, #8]
   1bb4a:	9b02      	ldr	r3, [sp, #8]
   1bb4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bb4e:	4293      	cmp	r3, r2
   1bb50:	da67      	bge.n	1bc22 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   1bb52:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1bb56:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1bb58:	1afa      	subs	r2, r7, r3
   1bb5a:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   1bb5c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1bb60:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1bb62:	eba8 0102 	sub.w	r1, r8, r2
   1bb66:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   1bb68:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1bb6c:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1bb6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bb70:	440b      	add	r3, r1
   1bb72:	4283      	cmp	r3, r0
   1bb74:	bfa8      	it	ge
   1bb76:	4603      	movge	r3, r0
   1bb78:	9307      	str	r3, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1bb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1bb7c:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_height, input_height - in_y_origin);
   1bb80:	18d0      	adds	r0, r2, r3
   1bb82:	6963      	ldr	r3, [r4, #20]
   1bb84:	4298      	cmp	r0, r3
   1bb86:	bfa8      	it	ge
   1bb88:	4618      	movge	r0, r3
          uint8 max = 0;
   1bb8a:	2300      	movs	r3, #0
   1bb8c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1bb90:	9b04      	ldr	r3, [sp, #16]
   1bb92:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bb94:	2a00      	cmp	r2, #0
   1bb96:	bfa8      	it	ge
   1bb98:	189b      	addge	r3, r3, r2
   1bb9a:	461a      	mov	r2, r3
   1bb9c:	9b04      	ldr	r3, [sp, #16]
   1bb9e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bba0:	1ad3      	subs	r3, r2, r3
   1bba2:	428b      	cmp	r3, r1
   1bba4:	da23      	bge.n	1bbee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x148>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bba6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   1bbaa:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   1bbae:	9305      	str	r3, [sp, #20]
   1bbb0:	9b07      	ldr	r3, [sp, #28]
   1bbb2:	4553      	cmp	r3, sl
   1bbb4:	dd19      	ble.n	1bbea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1bbb6:	9b02      	ldr	r3, [sp, #8]
   1bbb8:	9300      	str	r3, [sp, #0]
   1bbba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bbbc:	9213      	str	r2, [sp, #76]	; 0x4c
   1bbbe:	4453      	add	r3, sl
   1bbc0:	4659      	mov	r1, fp
   1bbc2:	4628      	mov	r0, r5
   1bbc4:	f7f9 ff4f 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   1bbc8:	9a06      	ldr	r2, [sp, #24]
   1bbca:	9b06      	ldr	r3, [sp, #24]
   1bbcc:	4403      	add	r3, r0
   1bbce:	5c10      	ldrb	r0, [r2, r0]
   1bbd0:	9a05      	ldr	r2, [sp, #20]
   1bbd2:	4290      	cmp	r0, r2
      return __a;
   1bbd4:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   1bbd8:	bf98      	it	ls
   1bbda:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbdc:	f10a 0a01 	add.w	sl, sl, #1
              max = std::max(
   1bbe0:	781b      	ldrb	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   1bbe4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bbe8:	e7df      	b.n	1bbaa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bbea:	3201      	adds	r2, #1
   1bbec:	e7d6      	b.n	1bb9c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   1bbee:	f894 a01c 	ldrb.w	sl, [r4, #28]
   1bbf2:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bbf6:	9a03      	ldr	r2, [sp, #12]
   1bbf8:	459a      	cmp	sl, r3
   1bbfa:	bf38      	it	cc
   1bbfc:	469a      	movcc	sl, r3
   1bbfe:	f894 3020 	ldrb.w	r3, [r4, #32]
   1bc02:	459a      	cmp	sl, r3
   1bc04:	bf28      	it	cs
   1bc06:	469a      	movcs	sl, r3
   1bc08:	9b02      	ldr	r3, [sp, #8]
   1bc0a:	9300      	str	r3, [sp, #0]
   1bc0c:	4659      	mov	r1, fp
   1bc0e:	464b      	mov	r3, r9
   1bc10:	4630      	mov	r0, r6
   1bc12:	f7f9 ff28 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bc16:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1bc18:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bc1c:	9b02      	ldr	r3, [sp, #8]
   1bc1e:	3301      	adds	r3, #1
   1bc20:	e792      	b.n	1bb48 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bc22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bc24:	f109 0901 	add.w	r9, r9, #1
   1bc28:	441f      	add	r7, r3
   1bc2a:	e789      	b.n	1bb40 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bc2c:	9b03      	ldr	r3, [sp, #12]
   1bc2e:	3301      	adds	r3, #1
   1bc30:	9303      	str	r3, [sp, #12]
   1bc32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc34:	4498      	add	r8, r3
   1bc36:	e77d      	b.n	1bb34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   1bc38:	f10b 0b01 	add.w	fp, fp, #1
   1bc3c:	e772      	b.n	1bb24 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   1bc3e:	b017      	add	sp, #92	; 0x5c
   1bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bc44 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   1bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc48:	b097      	sub	sp, #92	; 0x5c
   1bc4a:	4698      	mov	r8, r3
   1bc4c:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bc4e:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1bc52:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   1bc54:	4605      	mov	r5, r0
   1bc56:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bc58:	dd01      	ble.n	1bc5e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   1bc5a:	f002 fccb 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1bc5e:	680b      	ldr	r3, [r1, #0]
   1bc60:	2b04      	cmp	r3, #4
   1bc62:	d1fa      	bne.n	1bc5a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1bc64:	f8d8 3000 	ldr.w	r3, [r8]
   1bc68:	2b04      	cmp	r3, #4
   1bc6a:	d1f6      	bne.n	1bc5a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bc6c:	2300      	movs	r3, #0
   1bc6e:	4619      	mov	r1, r3
   1bc70:	4642      	mov	r2, r8
   1bc72:	4638      	mov	r0, r7
   1bc74:	f7fc fce2 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc78:	2303      	movs	r3, #3
   1bc7a:	4619      	mov	r1, r3
   1bc7c:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1bc7e:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc80:	4638      	mov	r0, r7
   1bc82:	f7fc fcdb 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1bc86:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1bc88:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   1bc8a:	4638      	mov	r0, r7
   1bc8c:	f7f9 fe29 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1bc90:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1bc92:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   1bc94:	4638      	mov	r0, r7
   1bc96:	f7f9 fe24 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1bc9a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1bc9c:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   1bc9e:	4640      	mov	r0, r8
   1bca0:	f7f9 fe1f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1bca4:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1bca6:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   1bca8:	4640      	mov	r0, r8
   1bcaa:	f7f9 fe1a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1bcae:	68eb      	ldr	r3, [r5, #12]
   1bcb0:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   1bcb2:	692b      	ldr	r3, [r5, #16]
  const int output_width = output_shape.Dims(2);
   1bcb4:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1bcb6:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   1bcb8:	2100      	movs	r1, #0
   1bcba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcbc:	4299      	cmp	r1, r3
   1bcbe:	f280 8092 	bge.w	1bde6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
   1bcc2:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bcc6:	f8cd b010 	str.w	fp, [sp, #16]
   1bcca:	9b04      	ldr	r3, [sp, #16]
   1bccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bcce:	4293      	cmp	r3, r2
   1bcd0:	f280 8087 	bge.w	1bde2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1bcd4:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bcd8:	f8cd a014 	str.w	sl, [sp, #20]
   1bcdc:	9b05      	ldr	r3, [sp, #20]
   1bcde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1bce0:	4293      	cmp	r3, r2
   1bce2:	da78      	bge.n	1bdd6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   1bce4:	2300      	movs	r3, #0
   1bce6:	9303      	str	r3, [sp, #12]
   1bce8:	9b03      	ldr	r3, [sp, #12]
   1bcea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bcec:	4293      	cmp	r3, r2
   1bcee:	da6c      	bge.n	1bdca <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
              (out_x * stride_width) - params.padding_values.width;
   1bcf0:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
              (out_y * stride_height) - params.padding_values.height;
   1bcf4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
          const int in_x_origin =
   1bcf8:	ebaa 0306 	sub.w	r3, sl, r6
   1bcfc:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1bcfe:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   1bd02:	ebab 0302 	sub.w	r3, fp, r2
   1bd06:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   1bd08:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1bd0c:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1bd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bd10:	441e      	add	r6, r3
   1bd12:	69ab      	ldr	r3, [r5, #24]
   1bd14:	429e      	cmp	r6, r3
   1bd16:	bfa8      	it	ge
   1bd18:	461e      	movge	r6, r3
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1bd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bd1c:	9606      	str	r6, [sp, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
   1bd1e:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_height, input_height - in_y_origin);
   1bd22:	18d0      	adds	r0, r2, r3
   1bd24:	696b      	ldr	r3, [r5, #20]
   1bd26:	4298      	cmp	r0, r3
   1bd28:	bfa8      	it	ge
   1bd2a:	4618      	movge	r0, r3
   1bd2c:	9b08      	ldr	r3, [sp, #32]
   1bd2e:	9009      	str	r0, [sp, #36]	; 0x24
          int32 acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd30:	2a00      	cmp	r2, #0
   1bd32:	bfa8      	it	ge
   1bd34:	189b      	addge	r3, r3, r2
          int32 acc = 0;
   1bd36:	f04f 0900 	mov.w	r9, #0
   1bd3a:	461a      	mov	r2, r3
          int filter_count = 0;
   1bd3c:	464c      	mov	r4, r9
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd3e:	9b08      	ldr	r3, [sp, #32]
   1bd40:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bd42:	1ad3      	subs	r3, r2, r3
   1bd44:	4298      	cmp	r0, r3
   1bd46:	dd1e      	ble.n	1bd86 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x142>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd48:	9e07      	ldr	r6, [sp, #28]
   1bd4a:	9b06      	ldr	r3, [sp, #24]
   1bd4c:	429e      	cmp	r6, r3
   1bd4e:	da0f      	bge.n	1bd70 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1bd50:	9b03      	ldr	r3, [sp, #12]
   1bd52:	9300      	str	r3, [sp, #0]
   1bd54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bd56:	4638      	mov	r0, r7
   1bd58:	4433      	add	r3, r6
   1bd5a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   1bd5e:	f7f9 fe82 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   1bd62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bd64:	561b      	ldrsb	r3, [r3, r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd66:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   1bd6a:	4499      	add	r9, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bd6c:	3601      	adds	r6, #1
   1bd6e:	e7ec      	b.n	1bd4a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   1bd70:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   1bd74:	1a1b      	subs	r3, r3, r0
   1bd76:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   1bd7a:	42b0      	cmp	r0, r6
   1bd7c:	bfb8      	it	lt
   1bd7e:	2300      	movlt	r3, #0
   1bd80:	441c      	add	r4, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bd82:	3201      	adds	r2, #1
   1bd84:	e7db      	b.n	1bd3e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xfa>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   1bd86:	0fe3      	lsrs	r3, r4, #31
   1bd88:	4423      	add	r3, r4
   1bd8a:	f1b9 0f00 	cmp.w	r9, #0
   1bd8e:	bfcc      	ite	gt
   1bd90:	eb09 0963 	addgt.w	r9, r9, r3, asr #1
                        : (acc - filter_count / 2) / filter_count;
   1bd94:	eba9 0963 	suble.w	r9, r9, r3, asr #1
   1bd98:	69eb      	ldr	r3, [r5, #28]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   1bd9a:	fb99 f4f4 	sdiv	r4, r9, r4
    min(const _Tp& __a, const _Tp& __b)
   1bd9e:	429c      	cmp	r4, r3
   1bda0:	bfb8      	it	lt
   1bda2:	461c      	movlt	r4, r3
   1bda4:	6a2b      	ldr	r3, [r5, #32]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bda6:	9106      	str	r1, [sp, #24]
   1bda8:	429c      	cmp	r4, r3
   1bdaa:	bfa8      	it	ge
   1bdac:	461c      	movge	r4, r3
   1bdae:	9b03      	ldr	r3, [sp, #12]
   1bdb0:	9300      	str	r3, [sp, #0]
   1bdb2:	4640      	mov	r0, r8
   1bdb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bdb8:	f7f9 fe55 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bdbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   1bdbe:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bdc0:	541c      	strb	r4, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bdc2:	9b03      	ldr	r3, [sp, #12]
   1bdc4:	3301      	adds	r3, #1
   1bdc6:	9303      	str	r3, [sp, #12]
   1bdc8:	e78e      	b.n	1bce8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bdca:	9b05      	ldr	r3, [sp, #20]
   1bdcc:	3301      	adds	r3, #1
   1bdce:	9305      	str	r3, [sp, #20]
   1bdd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bdd2:	449a      	add	sl, r3
   1bdd4:	e782      	b.n	1bcdc <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bdd6:	9b04      	ldr	r3, [sp, #16]
   1bdd8:	3301      	adds	r3, #1
   1bdda:	9304      	str	r3, [sp, #16]
   1bddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bdde:	449b      	add	fp, r3
   1bde0:	e773      	b.n	1bcca <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   1bde2:	3101      	adds	r1, #1
   1bde4:	e769      	b.n	1bcba <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   1bde6:	b017      	add	sp, #92	; 0x5c
   1bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bdec <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
   1bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdf0:	b097      	sub	sp, #92	; 0x5c
   1bdf2:	461e      	mov	r6, r3
   1bdf4:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1bdf6:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1bdfa:	429a      	cmp	r2, r3
                    int8* output_data) {
   1bdfc:	4604      	mov	r4, r0
   1bdfe:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1be00:	dd01      	ble.n	1be06 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   1be02:	f002 fbf7 	bl	1e5f4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   1be06:	3280      	adds	r2, #128	; 0x80
   1be08:	dbfb      	blt.n	1be02 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   1be0a:	2b7f      	cmp	r3, #127	; 0x7f
   1be0c:	dcf9      	bgt.n	1be02 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1be0e:	680b      	ldr	r3, [r1, #0]
   1be10:	2b04      	cmp	r3, #4
   1be12:	d1f6      	bne.n	1be02 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1be14:	6833      	ldr	r3, [r6, #0]
   1be16:	2b04      	cmp	r3, #4
   1be18:	d1f3      	bne.n	1be02 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1be1a:	2300      	movs	r3, #0
   1be1c:	4619      	mov	r1, r3
   1be1e:	4632      	mov	r2, r6
   1be20:	4628      	mov	r0, r5
   1be22:	f7fc fc0b 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be26:	2303      	movs	r3, #3
   1be28:	4619      	mov	r1, r3
   1be2a:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1be2c:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be2e:	4628      	mov	r0, r5
   1be30:	f7fc fc04 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1be34:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1be36:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   1be38:	4628      	mov	r0, r5
   1be3a:	f7f9 fd52 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1be3e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1be40:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   1be42:	4628      	mov	r0, r5
   1be44:	f7f9 fd4d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1be48:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1be4a:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   1be4c:	4630      	mov	r0, r6
   1be4e:	f7f9 fd48 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1be52:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1be54:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   1be56:	4630      	mov	r0, r6
   1be58:	f7f9 fd43 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1be5c:	68e3      	ldr	r3, [r4, #12]
   1be5e:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   1be60:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   1be62:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   1be64:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   1be66:	f04f 0b00 	mov.w	fp, #0
   1be6a:	9b08      	ldr	r3, [sp, #32]
   1be6c:	459b      	cmp	fp, r3
   1be6e:	f280 808a 	bge.w	1bf86 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19a>
   1be72:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1be76:	f8cd 800c 	str.w	r8, [sp, #12]
   1be7a:	9b03      	ldr	r3, [sp, #12]
   1be7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1be7e:	4293      	cmp	r3, r2
   1be80:	da7e      	bge.n	1bf80 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   1be82:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1be84:	46b9      	mov	r9, r7
   1be86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1be88:	4599      	cmp	r9, r3
   1be8a:	da73      	bge.n	1bf74 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1be8c:	2300      	movs	r3, #0
   1be8e:	9302      	str	r3, [sp, #8]
   1be90:	9b02      	ldr	r3, [sp, #8]
   1be92:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be94:	4293      	cmp	r3, r2
   1be96:	da68      	bge.n	1bf6a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   1be98:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1be9c:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1be9e:	1afa      	subs	r2, r7, r3
   1bea0:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   1bea2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   1bea6:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1bea8:	eba8 0102 	sub.w	r1, r8, r2
   1beac:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   1beae:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1beb2:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1beb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1beb6:	440b      	add	r3, r1
   1beb8:	4283      	cmp	r3, r0
   1beba:	bfa8      	it	ge
   1bebc:	4603      	movge	r3, r0
   1bebe:	9307      	str	r3, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1bec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1bec2:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_height, input_height - in_y_origin);
   1bec6:	18d0      	adds	r0, r2, r3
   1bec8:	6963      	ldr	r3, [r4, #20]
   1beca:	4298      	cmp	r0, r3
   1becc:	bfa8      	it	ge
   1bece:	4618      	movge	r0, r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
   1bed0:	2380      	movs	r3, #128	; 0x80
   1bed2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1bed6:	9b04      	ldr	r3, [sp, #16]
   1bed8:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1beda:	2a00      	cmp	r2, #0
   1bedc:	bfa8      	it	ge
   1bede:	189b      	addge	r3, r3, r2
   1bee0:	461a      	mov	r2, r3
   1bee2:	9b04      	ldr	r3, [sp, #16]
   1bee4:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bee6:	1ad3      	subs	r3, r2, r3
   1bee8:	428b      	cmp	r3, r1
   1beea:	da24      	bge.n	1bf36 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x14a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1beec:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   1bef0:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
   1bef4:	9305      	str	r3, [sp, #20]
   1bef6:	9b07      	ldr	r3, [sp, #28]
   1bef8:	4553      	cmp	r3, sl
   1befa:	dd1a      	ble.n	1bf32 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x146>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1befc:	9b02      	ldr	r3, [sp, #8]
   1befe:	9300      	str	r3, [sp, #0]
   1bf00:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bf02:	9213      	str	r2, [sp, #76]	; 0x4c
   1bf04:	4453      	add	r3, sl
   1bf06:	4659      	mov	r1, fp
   1bf08:	4628      	mov	r0, r5
   1bf0a:	f7f9 fdac 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   1bf0e:	9a06      	ldr	r2, [sp, #24]
   1bf10:	9b06      	ldr	r3, [sp, #24]
   1bf12:	4403      	add	r3, r0
   1bf14:	5610      	ldrsb	r0, [r2, r0]
   1bf16:	9a05      	ldr	r2, [sp, #20]
   1bf18:	4290      	cmp	r0, r2
      return __a;
   1bf1a:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   1bf1e:	bfd8      	it	le
   1bf20:	4613      	movle	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf22:	f10a 0a01 	add.w	sl, sl, #1
              max = std::max(
   1bf26:	f993 3000 	ldrsb.w	r3, [r3]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   1bf2c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1bf30:	e7de      	b.n	1bef0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1bf32:	3201      	adds	r2, #1
   1bf34:	e7d5      	b.n	1bee2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf6>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
   1bf36:	f994 a01c 	ldrsb.w	sl, [r4, #28]
   1bf3a:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1bf3e:	9a03      	ldr	r2, [sp, #12]
   1bf40:	459a      	cmp	sl, r3
   1bf42:	bfb8      	it	lt
   1bf44:	469a      	movlt	sl, r3
   1bf46:	f994 3020 	ldrsb.w	r3, [r4, #32]
   1bf4a:	459a      	cmp	sl, r3
   1bf4c:	bfa8      	it	ge
   1bf4e:	469a      	movge	sl, r3
   1bf50:	9b02      	ldr	r3, [sp, #8]
   1bf52:	9300      	str	r3, [sp, #0]
   1bf54:	4659      	mov	r1, fp
   1bf56:	464b      	mov	r3, r9
   1bf58:	4630      	mov	r0, r6
   1bf5a:	f7f9 fd84 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1bf5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1bf60:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1bf64:	9b02      	ldr	r3, [sp, #8]
   1bf66:	3301      	adds	r3, #1
   1bf68:	e791      	b.n	1be8e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1bf6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bf6c:	f109 0901 	add.w	r9, r9, #1
   1bf70:	441f      	add	r7, r3
   1bf72:	e788      	b.n	1be86 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1bf74:	9b03      	ldr	r3, [sp, #12]
   1bf76:	3301      	adds	r3, #1
   1bf78:	9303      	str	r3, [sp, #12]
   1bf7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bf7c:	4498      	add	r8, r3
   1bf7e:	e77c      	b.n	1be7a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   1bf80:	f10b 0b01 	add.w	fp, fp, #1
   1bf84:	e771      	b.n	1be6a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7e>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
   1bf86:	b017      	add	sp, #92	; 0x5c
   1bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bf8c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   1bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int height = SizeOfDimension(input, 1);
   1bf90:	688b      	ldr	r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   1bf92:	f890 b000 	ldrb.w	fp, [r0]
  return t->dims->data[dim];
   1bf96:	e9d3 a802 	ldrd	sl, r8, [r3, #8]
   1bf9a:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
      params->stride_height, params->stride_width,
   1bf9e:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   1bfa2:	b085      	sub	sp, #20
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1bfa4:	2401      	movs	r4, #1
   1bfa6:	4615      	mov	r5, r2
   1bfa8:	9400      	str	r4, [sp, #0]
   1bfaa:	4632      	mov	r2, r6
   1bfac:	4641      	mov	r1, r8
   1bfae:	4658      	mov	r0, fp
      params->stride_height, params->stride_width,
   1bfb0:	9302      	str	r3, [sp, #8]
   1bfb2:	f7fd faa2 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1bfb6:	9400      	str	r4, [sp, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1bfb8:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1bfba:	464b      	mov	r3, r9
   1bfbc:	463a      	mov	r2, r7
   1bfbe:	4651      	mov	r1, sl
   1bfc0:	4658      	mov	r0, fp
   1bfc2:	f7fd fa9a 	bl	194fa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1bfc6:	9b03      	ldr	r3, [sp, #12]
   1bfc8:	1e5c      	subs	r4, r3, #1
  int total_padding =
   1bfca:	9b02      	ldr	r3, [sp, #8]
   1bfcc:	eba6 0608 	sub.w	r6, r6, r8
   1bfd0:	eba7 070a 	sub.w	r7, r7, sl
   1bfd4:	fb03 6604 	mla	r6, r3, r4, r6
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1bfd8:	3801      	subs	r0, #1
  int total_padding =
   1bfda:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   1bfde:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1bfe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   1bfe6:	1073      	asrs	r3, r6, #1
      params->filter_width, params->padding, &out_height, &out_width);
   1bfe8:	602b      	str	r3, [r5, #0]
  *offset = total_padding % 2;
   1bfea:	f006 0601 	and.w	r6, r6, #1
  return total_padding / 2;
   1bfee:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   1bff2:	f009 0701 	and.w	r7, r9, #1
}
   1bff6:	2000      	movs	r0, #0
      params->filter_width, params->padding, &out_height, &out_width);
   1bff8:	606b      	str	r3, [r5, #4]
   1bffa:	60ae      	str	r6, [r5, #8]
   1bffc:	60ef      	str	r7, [r5, #12]
}
   1bffe:	b005      	add	sp, #20
   1c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c004 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   1c004:	2000      	movs	r0, #0
   1c006:	4770      	bx	lr

0001c008 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c00c:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1c00e:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1c010:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1c012:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   1c014:	4615      	mov	r5, r2
   1c016:	4604      	mov	r4, r0
   1c018:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c01a:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   1c01c:	dd01      	ble.n	1c022 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   1c01e:	f002 fae9 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   1c022:	682b      	ldr	r3, [r5, #0]
   1c024:	2b04      	cmp	r3, #4
   1c026:	dcfa      	bgt.n	1c01e <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c028:	6813      	ldr	r3, [r2, #0]
   1c02a:	2b04      	cmp	r3, #4
   1c02c:	dcf7      	bgt.n	1c01e <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
   1c02e:	2301      	movs	r3, #1
   1c030:	2104      	movs	r1, #4
   1c032:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   1c034:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   1c038:	f7f9 fce8 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c03c:	4620      	mov	r0, r4
   1c03e:	ab12      	add	r3, sp, #72	; 0x48
   1c040:	464a      	mov	r2, r9
   1c042:	4629      	mov	r1, r5
   1c044:	f7f9 fee6 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1c048:	2400      	movs	r4, #0
   1c04a:	2100      	movs	r1, #0
   1c04c:	a804      	add	r0, sp, #16
   1c04e:	f7f9 fc48 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c052:	42a0      	cmp	r0, r4
   1c054:	dd4a      	ble.n	1c0ec <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe4>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1c056:	2500      	movs	r5, #0
   1c058:	2101      	movs	r1, #1
   1c05a:	a804      	add	r0, sp, #16
   1c05c:	f7f9 fc41 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c060:	42a8      	cmp	r0, r5
   1c062:	dd41      	ble.n	1c0e8 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe0>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1c064:	f04f 0a00 	mov.w	sl, #0
   1c068:	2102      	movs	r1, #2
   1c06a:	a804      	add	r0, sp, #16
   1c06c:	f7f9 fc39 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c070:	4550      	cmp	r0, sl
   1c072:	dd37      	ble.n	1c0e4 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xdc>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1c074:	2600      	movs	r6, #0
   1c076:	2103      	movs	r1, #3
   1c078:	a804      	add	r0, sp, #16
   1c07a:	f7f9 fc32 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c07e:	42b0      	cmp	r0, r6
   1c080:	dd2d      	ble.n	1c0de <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
          auto out_idx = Offset(output_shape, b, y, x, c);
   1c082:	9600      	str	r6, [sp, #0]
   1c084:	4653      	mov	r3, sl
   1c086:	462a      	mov	r2, r5
   1c088:	4621      	mov	r1, r4
   1c08a:	a804      	add	r0, sp, #16
   1c08c:	f7f9 fceb 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c090:	9600      	str	r6, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   1c092:	4607      	mov	r7, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c094:	4653      	mov	r3, sl
   1c096:	462a      	mov	r2, r5
   1c098:	4621      	mov	r1, r4
   1c09a:	4648      	mov	r0, r9
   1c09c:	f7f9 fd19 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1c0a0:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   1c0a2:	4680      	mov	r8, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   1c0a4:	4653      	mov	r3, sl
   1c0a6:	462a      	mov	r2, r5
   1c0a8:	4621      	mov	r1, r4
   1c0aa:	a812      	add	r0, sp, #72	; 0x48
   1c0ac:	f7f9 fd11 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   1c0b0:	9b03      	ldr	r3, [sp, #12]
   1c0b2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   1c0b6:	edd8 7a00 	vldr	s15, [r8]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   1c0ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
          auto in2_val = input2_data[in2_idx];
   1c0bc:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   1c0c0:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   1c0c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c0cc:	bf48      	it	mi
   1c0ce:	ee67 7a87 	vmulmi.f32	s15, s15, s14
   1c0d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1c0d6:	edc7 7a00 	vstr	s15, [r7]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   1c0da:	3601      	adds	r6, #1
   1c0dc:	e7cb      	b.n	1c076 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x6e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   1c0de:	f10a 0a01 	add.w	sl, sl, #1
   1c0e2:	e7c1      	b.n	1c068 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x60>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   1c0e4:	3501      	adds	r5, #1
   1c0e6:	e7b7      	b.n	1c058 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   1c0e8:	3401      	adds	r4, #1
   1c0ea:	e7ae      	b.n	1c04a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x42>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   1c0ec:	a804      	add	r0, sp, #16
   1c0ee:	f7f9 fbed 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c0f2:	b01b      	add	sp, #108	; 0x6c
   1c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c0f8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

namespace reference_ops {

// Broadcast prelu to output_shape for quantized uint8/int8 data.
template <typename T>
inline void BroadcastPrelu4DSlow(
   1c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0fc:	461e      	mov	r6, r3
    const PreluParams& params, const RuntimeShape& input_shape,
    const T* input_data, const RuntimeShape& alpha_shape, const T* alpha_data,
    const RuntimeShape& output_shape, T* output_data) {
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c0fe:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   1c100:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c102:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   1c104:	9203      	str	r2, [sp, #12]
   1c106:	4604      	mov	r4, r0
   1c108:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c10a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c10c:	dd01      	ble.n	1c112 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   1c10e:	f002 fa71 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   1c112:	6833      	ldr	r3, [r6, #0]
   1c114:	2b04      	cmp	r3, #4
   1c116:	dcfa      	bgt.n	1c10e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   1c118:	6813      	ldr	r3, [r2, #0]
   1c11a:	2b04      	cmp	r3, #4
   1c11c:	dcf7      	bgt.n	1c10e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   1c11e:	2301      	movs	r3, #1
   1c120:	2104      	movs	r1, #4
   1c122:	a804      	add	r0, sp, #16
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   1c124:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   1c128:	f7f9 fc70 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c12c:	4628      	mov	r0, r5
   1c12e:	ab12      	add	r3, sp, #72	; 0x48
   1c130:	465a      	mov	r2, fp
   1c132:	4631      	mov	r1, r6
   1c134:	f7f9 fe6e 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c138:	2500      	movs	r5, #0
   1c13a:	2100      	movs	r1, #0
   1c13c:	a804      	add	r0, sp, #16
   1c13e:	f7f9 fbd0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c142:	42a8      	cmp	r0, r5
   1c144:	dd5a      	ble.n	1c1fc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c146:	2600      	movs	r6, #0
   1c148:	f10d 0810 	add.w	r8, sp, #16
   1c14c:	2101      	movs	r1, #1
   1c14e:	4640      	mov	r0, r8
   1c150:	f7f9 fbc7 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c154:	42b0      	cmp	r0, r6
   1c156:	dd4f      	ble.n	1c1f8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c158:	2700      	movs	r7, #0
   1c15a:	2102      	movs	r1, #2
   1c15c:	4640      	mov	r0, r8
   1c15e:	f7f9 fbc0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c162:	42b8      	cmp	r0, r7
   1c164:	dd46      	ble.n	1c1f4 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c166:	f04f 0900 	mov.w	r9, #0
   1c16a:	2103      	movs	r1, #3
   1c16c:	4640      	mov	r0, r8
   1c16e:	f7f9 fbb8 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c172:	4548      	cmp	r0, r9
   1c174:	dd3c      	ble.n	1c1f0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf8>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c176:	463b      	mov	r3, r7
   1c178:	4632      	mov	r2, r6
   1c17a:	4629      	mov	r1, r5
   1c17c:	f8cd 9000 	str.w	r9, [sp]
   1c180:	4640      	mov	r0, r8
   1c182:	f7f9 fc70 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c186:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c188:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c18a:	f8cd 9000 	str.w	r9, [sp]
   1c18e:	4632      	mov	r2, r6
   1c190:	4629      	mov	r1, r5
   1c192:	4658      	mov	r0, fp
   1c194:	f7f9 fc9d 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   1c198:	9b03      	ldr	r3, [sp, #12]
   1c19a:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input_value =
   1c19e:	6823      	ldr	r3, [r4, #0]
          int32 output_value;
          if (input_value >= 0) {
   1c1a0:	eb1a 0a03 	adds.w	sl, sl, r3
   1c1a4:	d411      	bmi.n	1c1ca <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd2>
            output_value = MultiplyByQuantizedMultiplier(
   1c1a6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1c1aa:	4650      	mov	r0, sl
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];

            output_value = MultiplyByQuantizedMultiplier(
   1c1ac:	f7ed fb76 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                input_value * alpha_value, params.output_multiplier_2,
                params.output_shift_2);
          }
          output_value += params.output_offset;
   1c1b0:	68a3      	ldr	r3, [r4, #8]
   1c1b2:	4418      	add	r0, r3
      if (__a < __b)
   1c1b4:	2800      	cmp	r0, #0
   1c1b6:	dd19      	ble.n	1c1ec <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf4>
      return __a;
   1c1b8:	28ff      	cmp	r0, #255	; 0xff
   1c1ba:	bfa8      	it	ge
   1c1bc:	20ff      	movge	r0, #255	; 0xff

          const int32 quantized_min = std::numeric_limits<T>::min();
          const int32 quantized_max = std::numeric_limits<T>::max();
          const int32 clamped_output =
              std::min(quantized_max, std::max(quantized_min, output_value));
          output_data[output_index] = static_cast<T>(clamped_output);
   1c1be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c1c0:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c1c2:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   1c1c6:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c1c8:	e7cf      	b.n	1c16a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   1c1ca:	463b      	mov	r3, r7
   1c1cc:	4632      	mov	r2, r6
   1c1ce:	4629      	mov	r1, r5
   1c1d0:	f8cd 9000 	str.w	r9, [sp]
   1c1d4:	a812      	add	r0, sp, #72	; 0x48
   1c1d6:	f7f9 fc7c 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                params.alpha_offset + alpha_data[alpha_index];
   1c1da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c1dc:	5c18      	ldrb	r0, [r3, r0]
            const int32 alpha_value =
   1c1de:	6863      	ldr	r3, [r4, #4]
   1c1e0:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   1c1e2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1c1e6:	fb0a f000 	mul.w	r0, sl, r0
   1c1ea:	e7df      	b.n	1c1ac <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   1c1ec:	2000      	movs	r0, #0
   1c1ee:	e7e6      	b.n	1c1be <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c1f0:	3701      	adds	r7, #1
   1c1f2:	e7b2      	b.n	1c15a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c1f4:	3601      	adds	r6, #1
   1c1f6:	e7a7      	b.n	1c148 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c1f8:	3501      	adds	r5, #1
   1c1fa:	e79e      	b.n	1c13a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   1c1fc:	a804      	add	r0, sp, #16
   1c1fe:	f7f9 fb65 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   1c202:	b01b      	add	sp, #108	; 0x6c
   1c204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c208 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void BroadcastPrelu4DSlow(
   1c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c20c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c20e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   1c210:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c212:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   1c214:	9203      	str	r2, [sp, #12]
   1c216:	4604      	mov	r4, r0
   1c218:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c21a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   1c21c:	dd01      	ble.n	1c222 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   1c21e:	f002 f9e9 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   1c222:	6833      	ldr	r3, [r6, #0]
   1c224:	2b04      	cmp	r3, #4
   1c226:	dcfa      	bgt.n	1c21e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   1c228:	6813      	ldr	r3, [r2, #0]
   1c22a:	2b04      	cmp	r3, #4
   1c22c:	dcf7      	bgt.n	1c21e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   1c22e:	2301      	movs	r3, #1
   1c230:	2104      	movs	r1, #4
   1c232:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   1c234:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   1c238:	f7f9 fbe8 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c23c:	4628      	mov	r0, r5
   1c23e:	ab12      	add	r3, sp, #72	; 0x48
   1c240:	465a      	mov	r2, fp
   1c242:	4631      	mov	r1, r6
   1c244:	f7f9 fde6 	bl	15e14 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c248:	2500      	movs	r5, #0
   1c24a:	2100      	movs	r1, #0
   1c24c:	a804      	add	r0, sp, #16
   1c24e:	f7f9 fb48 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c252:	42a8      	cmp	r0, r5
   1c254:	dd5c      	ble.n	1c310 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x108>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c256:	2600      	movs	r6, #0
   1c258:	f10d 0810 	add.w	r8, sp, #16
   1c25c:	2101      	movs	r1, #1
   1c25e:	4640      	mov	r0, r8
   1c260:	f7f9 fb3f 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c264:	42b0      	cmp	r0, r6
   1c266:	dd51      	ble.n	1c30c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c268:	2700      	movs	r7, #0
   1c26a:	2102      	movs	r1, #2
   1c26c:	4640      	mov	r0, r8
   1c26e:	f7f9 fb38 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c272:	42b8      	cmp	r0, r7
   1c274:	dd48      	ble.n	1c308 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c276:	f04f 0900 	mov.w	r9, #0
   1c27a:	2103      	movs	r1, #3
   1c27c:	4640      	mov	r0, r8
   1c27e:	f7f9 fb30 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c282:	4548      	cmp	r0, r9
   1c284:	dd3e      	ble.n	1c304 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c286:	463b      	mov	r3, r7
   1c288:	4632      	mov	r2, r6
   1c28a:	4629      	mov	r1, r5
   1c28c:	f8cd 9000 	str.w	r9, [sp]
   1c290:	4640      	mov	r0, r8
   1c292:	f7f9 fbe8 	bl	15a66 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c296:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   1c298:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   1c29a:	f8cd 9000 	str.w	r9, [sp]
   1c29e:	4632      	mov	r2, r6
   1c2a0:	4629      	mov	r1, r5
   1c2a2:	4658      	mov	r0, fp
   1c2a4:	f7f9 fc15 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              params.input_offset + input_data[input_index];
   1c2a8:	9b03      	ldr	r3, [sp, #12]
   1c2aa:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input_value =
   1c2ae:	6823      	ldr	r3, [r4, #0]
          if (input_value >= 0) {
   1c2b0:	eb1a 0a03 	adds.w	sl, sl, r3
   1c2b4:	d412      	bmi.n	1c2dc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
            output_value = MultiplyByQuantizedMultiplier(
   1c2b6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1c2ba:	4650      	mov	r0, sl
            output_value = MultiplyByQuantizedMultiplier(
   1c2bc:	f7ed faee 	bl	989c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
          output_value += params.output_offset;
   1c2c0:	68a3      	ldr	r3, [r4, #8]
   1c2c2:	4418      	add	r0, r3
      if (__a < __b)
   1c2c4:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   1c2c8:	db19      	blt.n	1c2fe <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      return __a;
   1c2ca:	287f      	cmp	r0, #127	; 0x7f
   1c2cc:	bfa8      	it	ge
   1c2ce:	207f      	movge	r0, #127	; 0x7f
          output_data[output_index] = static_cast<T>(clamped_output);
   1c2d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c2d2:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c2d4:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   1c2d8:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1c2da:	e7ce      	b.n	1c27a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   1c2dc:	463b      	mov	r3, r7
   1c2de:	4632      	mov	r2, r6
   1c2e0:	4629      	mov	r1, r5
   1c2e2:	f8cd 9000 	str.w	r9, [sp]
   1c2e6:	a812      	add	r0, sp, #72	; 0x48
   1c2e8:	f7f9 fbf3 	bl	15ad2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                params.alpha_offset + alpha_data[alpha_index];
   1c2ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c2ee:	5618      	ldrsb	r0, [r3, r0]
            const int32 alpha_value =
   1c2f0:	6863      	ldr	r3, [r4, #4]
   1c2f2:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   1c2f4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1c2f8:	fb0a f000 	mul.w	r0, sl, r0
   1c2fc:	e7de      	b.n	1c2bc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   1c2fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c302:	e7e5      	b.n	1c2d0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1c304:	3701      	adds	r7, #1
   1c306:	e7b0      	b.n	1c26a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   1c308:	3601      	adds	r6, #1
   1c30a:	e7a5      	b.n	1c258 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1c30c:	3501      	adds	r5, #1
   1c30e:	e79c      	b.n	1c24a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   1c310:	a804      	add	r0, sp, #16
   1c312:	f7f9 fadb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c316:	b01b      	add	sp, #108	; 0x6c
   1c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c31c <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1c31c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1c31e:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1c320:	b90b      	cbnz	r3, 1c326 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj+0xa>
   1c322:	f002 f967 	bl	1e5f4 <abort>
  void* data = nullptr;
   1c326:	2400      	movs	r4, #0
   1c328:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1c32a:	aa01      	add	r2, sp, #4
   1c32c:	2108      	movs	r1, #8
   1c32e:	4798      	blx	r3
   1c330:	2801      	cmp	r0, #1
  return data;
   1c332:	bf14      	ite	ne
   1c334:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   1c336:	4620      	moveq	r0, r4
}
   1c338:	b002      	add	sp, #8
   1c33a:	bd10      	pop	{r4, pc}

0001c33c <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
   1c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c33e:	9f06      	ldr	r7, [sp, #24]
   1c340:	469c      	mov	ip, r3
  if (num_dims == 0) {
   1c342:	b1d0      	cbz	r0, 1c37a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3e>
  TFLITE_DCHECK(dims != nullptr);
   1c344:	b909      	cbnz	r1, 1c34a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xe>
   1c346:	f002 f955 	bl	1e5f4 <abort>
  TFLITE_DCHECK(index != nullptr);
   1c34a:	2a00      	cmp	r2, #0
   1c34c:	d0fb      	beq.n	1c346 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xa>
  for (int idx = 0; idx < num_dims; ++idx) {
   1c34e:	2400      	movs	r4, #0
  size_t offset = 0;
   1c350:	4625      	mov	r5, r4
  for (int idx = 0; idx < num_dims; ++idx) {
   1c352:	42a0      	cmp	r0, r4
   1c354:	dd12      	ble.n	1c37c <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
    if (axis != nullptr) {
   1c356:	b147      	cbz	r7, 1c36a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   1c358:	2600      	movs	r6, #0
   1c35a:	45b4      	cmp	ip, r6
   1c35c:	dd05      	ble.n	1c36a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
        if (idx == axis[axis_idx]) {
   1c35e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1c362:	429c      	cmp	r4, r3
   1c364:	d007      	beq.n	1c376 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   1c366:	3601      	adds	r6, #1
   1c368:	e7f7      	b.n	1c35a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x1e>
      offset = offset * static_cast<size_t>(dims[idx]) +
   1c36a:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   1c36e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1c372:	fb03 6505 	mla	r5, r3, r5, r6
  for (int idx = 0; idx < num_dims; ++idx) {
   1c376:	3401      	adds	r4, #1
   1c378:	e7eb      	b.n	1c352 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x16>
    return 0;
   1c37a:	4605      	mov	r5, r0
}
   1c37c:	4628      	mov	r0, r5
   1c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c380 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
   1c380:	f7f1 b9cc 	b.w	d71c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>

0001c384 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>:
                 tflite::MeanParams* op_params) {
   1c384:	b570      	push	{r4, r5, r6, lr}
   1c386:	1c94      	adds	r4, r2, #2
   1c388:	4625      	mov	r5, r4
  int i = 0;
   1c38a:	2300      	movs	r3, #0
  for (; i < axis_count; ++i) {
   1c38c:	428b      	cmp	r3, r1
   1c38e:	db08      	blt.n	1c3a2 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x1e>
   1c390:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    op_params->axis[i] = 1;
   1c394:	2001      	movs	r0, #1
  for (; i < 4; ++i) {
   1c396:	2b03      	cmp	r3, #3
   1c398:	dc09      	bgt.n	1c3ae <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x2a>
    op_params->axis[i] = 1;
   1c39a:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
  for (; i < 4; ++i) {
   1c39e:	3301      	adds	r3, #1
   1c3a0:	e7f9      	b.n	1c396 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x12>
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   1c3a2:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   1c3a6:	f825 6b02 	strh.w	r6, [r5], #2
  for (; i < axis_count; ++i) {
   1c3aa:	3301      	adds	r3, #1
   1c3ac:	e7ee      	b.n	1c38c <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x8>
  op_params->axis_count = axis_count;
   1c3ae:	7011      	strb	r1, [r2, #0]
}
   1c3b0:	bd70      	pop	{r4, r5, r6, pc}

0001c3b2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c3b2:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c3b4:	6882      	ldr	r2, [r0, #8]
   1c3b6:	6858      	ldr	r0, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c3b8:	684b      	ldr	r3, [r1, #4]
   1c3ba:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1c3bc:	eb02 1080 	add.w	r0, r2, r0, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1c3c0:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  if (input->data.raw != output->data.raw) {
   1c3c4:	6841      	ldr	r1, [r0, #4]
   1c3c6:	6853      	ldr	r3, [r2, #4]
   1c3c8:	4299      	cmp	r1, r3
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c3ca:	b510      	push	{r4, lr}
  if (input->data.raw != output->data.raw) {
   1c3cc:	d009      	beq.n	1c3e2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
    for (size_t i = 0; i < input->bytes; ++i) {
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	6981      	ldr	r1, [r0, #24]
   1c3d2:	4299      	cmp	r1, r3
   1c3d4:	d905      	bls.n	1c3e2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
      output->data.raw[i] = input->data.raw[i];
   1c3d6:	6841      	ldr	r1, [r0, #4]
   1c3d8:	5ccc      	ldrb	r4, [r1, r3]
   1c3da:	6851      	ldr	r1, [r2, #4]
   1c3dc:	54cc      	strb	r4, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
   1c3de:	3301      	adds	r3, #1
   1c3e0:	e7f6      	b.n	1c3d0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
}
   1c3e2:	2000      	movs	r0, #0
   1c3e4:	bd10      	pop	{r4, pc}

0001c3e6 <_ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   1c3e6:	2000      	movs	r0, #0
   1c3e8:	4770      	bx	lr

0001c3ea <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:

template <typename T>
inline void ResizeNearestNeighbor(
   1c3ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3ee:	4698      	mov	r8, r3
    const tflite::ResizeNearestNeighborParams& op_params,
    const RuntimeShape& unextended_input_shape, const T* input_data,
    const RuntimeShape& output_size_shape, const int32* output_size_data,
    const RuntimeShape& unextended_output_shape, T* output_data) {
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3f0:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c3f2:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3f4:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c3f6:	e9dd 7422 	ldrd	r7, r4, [sp, #136]	; 0x88
   1c3fa:	4605      	mov	r5, r0
   1c3fc:	4616      	mov	r6, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c3fe:	dd01      	ble.n	1c404 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c400:	f002 f8f8 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c404:	6823      	ldr	r3, [r4, #0]
   1c406:	2b04      	cmp	r3, #4
   1c408:	dcfa      	bgt.n	1c400 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   1c40a:	460a      	mov	r2, r1
   1c40c:	2301      	movs	r3, #1
   1c40e:	2104      	movs	r1, #4
   1c410:	a80c      	add	r0, sp, #48	; 0x30
   1c412:	f7f9 fafb 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c416:	4622      	mov	r2, r4
   1c418:	2301      	movs	r3, #1
   1c41a:	2104      	movs	r1, #4
   1c41c:	a812      	add	r0, sp, #72	; 0x48
   1c41e:	f7f9 faf5 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c422:	2300      	movs	r3, #0
   1c424:	4619      	mov	r1, r3
   1c426:	aa12      	add	r2, sp, #72	; 0x48
   1c428:	a80c      	add	r0, sp, #48	; 0x30
   1c42a:	f7fc f907 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c42e:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c430:	900a      	str	r0, [sp, #40]	; 0x28
  int32 input_height = input_shape.Dims(1);
   1c432:	a80c      	add	r0, sp, #48	; 0x30
   1c434:	f7f9 fa55 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c438:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c43a:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c43c:	a80c      	add	r0, sp, #48	; 0x30
   1c43e:	f7f9 fa50 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c442:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c444:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c446:	aa12      	add	r2, sp, #72	; 0x48
   1c448:	4619      	mov	r1, r3
   1c44a:	a80c      	add	r0, sp, #48	; 0x30
   1c44c:	f7fc f8f6 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c450:	4604      	mov	r4, r0

  // The Tensorflow version of this op allows resize on the width and height
  // axis only.
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c452:	4640      	mov	r0, r8
   1c454:	f7f9 faca 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c458:	2802      	cmp	r0, #2
   1c45a:	d1d1      	bne.n	1c400 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c45c:	683b      	ldr	r3, [r7, #0]
   1c45e:	9305      	str	r3, [sp, #20]
  int32 output_width = output_size_data[1];

  const int col_offset = input_shape.Dims(3);
   1c460:	2103      	movs	r1, #3
   1c462:	a80c      	add	r0, sp, #48	; 0x30
   1c464:	f7f9 fa3d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c468:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c46a:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c46e:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c470:	4603      	mov	r3, r0
   1c472:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c474:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c476:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c478:	4353      	muls	r3, r2
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
        output_ptr += depth;
      }
    }
    input_ptr += batch_offset;
   1c47a:	009b      	lsls	r3, r3, #2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c47c:	00a4      	lsls	r4, r4, #2
    input_ptr += batch_offset;
   1c47e:	9309      	str	r3, [sp, #36]	; 0x24
   1c480:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c484:	4363      	muls	r3, r4
   1c486:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c488:	f04f 0900 	mov.w	r9, #0
   1c48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c48e:	4599      	cmp	r9, r3
   1c490:	da35      	bge.n	1c4fe <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x114>
    for (int y = 0; y < output_height; ++y) {
   1c492:	2700      	movs	r7, #0
   1c494:	9b05      	ldr	r3, [sp, #20]
   1c496:	429f      	cmp	r7, r3
   1c498:	da2c      	bge.n	1c4f4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10a>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c49a:	786b      	ldrb	r3, [r5, #1]
   1c49c:	9300      	str	r3, [sp, #0]
   1c49e:	9a05      	ldr	r2, [sp, #20]
   1c4a0:	782b      	ldrb	r3, [r5, #0]
   1c4a2:	9903      	ldr	r1, [sp, #12]
   1c4a4:	4638      	mov	r0, r7
   1c4a6:	f7f1 fca7 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c4aa:	9b07      	ldr	r3, [sp, #28]
   1c4ac:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c4b0:	4343      	muls	r3, r0
   1c4b2:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c4b4:	f04f 0800 	mov.w	r8, #0
   1c4b8:	45d0      	cmp	r8, sl
   1c4ba:	da15      	bge.n	1c4e8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xfe>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c4bc:	786b      	ldrb	r3, [r5, #1]
   1c4be:	9904      	ldr	r1, [sp, #16]
   1c4c0:	9300      	str	r3, [sp, #0]
   1c4c2:	4652      	mov	r2, sl
   1c4c4:	782b      	ldrb	r3, [r5, #0]
   1c4c6:	4640      	mov	r0, r8
   1c4c8:	f7f1 fc96 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c4cc:	9a08      	ldr	r2, [sp, #32]
   1c4ce:	9b06      	ldr	r3, [sp, #24]
   1c4d0:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c4d4:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   1c4d8:	4622      	mov	r2, r4
   1c4da:	4658      	mov	r0, fp
   1c4dc:	f002 f89f 	bl	1e61e <memcpy>
        output_ptr += depth;
   1c4e0:	44a3      	add	fp, r4
      for (int x = 0; x < output_width; ++x) {
   1c4e2:	f108 0801 	add.w	r8, r8, #1
   1c4e6:	e7e7      	b.n	1c4b8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xce>
   1c4e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c4ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c4ec:	4413      	add	r3, r2
   1c4ee:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c4f0:	3701      	adds	r7, #1
   1c4f2:	e7cf      	b.n	1c494 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xaa>
    input_ptr += batch_offset;
   1c4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
   1c4f6:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c4fa:	441e      	add	r6, r3
  for (int b = 0; b < batches; ++b) {
   1c4fc:	e7c6      	b.n	1c48c <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa2>
  const RuntimeShape output_shape =
   1c4fe:	a812      	add	r0, sp, #72	; 0x48
   1c500:	f7f9 f9e4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c504:	a80c      	add	r0, sp, #48	; 0x30
   1c506:	f7f9 f9e1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  }
}
   1c50a:	b019      	add	sp, #100	; 0x64
   1c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c510 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   1c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c514:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c516:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c518:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c51a:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c51c:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   1c520:	4604      	mov	r4, r0
   1c522:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c524:	dd01      	ble.n	1c52a <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c526:	f002 f865 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c52a:	6833      	ldr	r3, [r6, #0]
   1c52c:	2b04      	cmp	r3, #4
   1c52e:	dcfa      	bgt.n	1c526 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   1c530:	460a      	mov	r2, r1
   1c532:	2301      	movs	r3, #1
   1c534:	2104      	movs	r1, #4
   1c536:	a80c      	add	r0, sp, #48	; 0x30
   1c538:	f7f9 fa68 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c53c:	4632      	mov	r2, r6
   1c53e:	2301      	movs	r3, #1
   1c540:	2104      	movs	r1, #4
   1c542:	a812      	add	r0, sp, #72	; 0x48
   1c544:	f7f9 fa62 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c548:	2300      	movs	r3, #0
   1c54a:	4619      	mov	r1, r3
   1c54c:	aa12      	add	r2, sp, #72	; 0x48
   1c54e:	a80c      	add	r0, sp, #48	; 0x30
   1c550:	f7fc f874 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c554:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c556:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   1c558:	a80c      	add	r0, sp, #48	; 0x30
   1c55a:	f7f9 f9c2 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c55e:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c560:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c562:	a80c      	add	r0, sp, #48	; 0x30
   1c564:	f7f9 f9bd 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c568:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c56a:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c56c:	aa12      	add	r2, sp, #72	; 0x48
   1c56e:	4619      	mov	r1, r3
   1c570:	a80c      	add	r0, sp, #48	; 0x30
   1c572:	f7fc f863 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c576:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c578:	4640      	mov	r0, r8
   1c57a:	f7f9 fa37 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c57e:	2802      	cmp	r0, #2
   1c580:	d1d1      	bne.n	1c526 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c582:	683b      	ldr	r3, [r7, #0]
   1c584:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   1c586:	2103      	movs	r1, #3
   1c588:	a80c      	add	r0, sp, #48	; 0x30
   1c58a:	f7f9 f9aa 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c58e:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c590:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c594:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c596:	4603      	mov	r3, r0
   1c598:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c59a:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c59c:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c59e:	4353      	muls	r3, r2
   1c5a0:	930a      	str	r3, [sp, #40]	; 0x28
   1c5a2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c5a6:	4373      	muls	r3, r6
   1c5a8:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c5aa:	f04f 0900 	mov.w	r9, #0
   1c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c5b0:	4599      	cmp	r9, r3
   1c5b2:	da34      	bge.n	1c61e <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   1c5b4:	2700      	movs	r7, #0
   1c5b6:	9b05      	ldr	r3, [sp, #20]
   1c5b8:	429f      	cmp	r7, r3
   1c5ba:	da2b      	bge.n	1c614 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c5bc:	7863      	ldrb	r3, [r4, #1]
   1c5be:	9300      	str	r3, [sp, #0]
   1c5c0:	9a05      	ldr	r2, [sp, #20]
   1c5c2:	7823      	ldrb	r3, [r4, #0]
   1c5c4:	9903      	ldr	r1, [sp, #12]
   1c5c6:	4638      	mov	r0, r7
   1c5c8:	f7f1 fc16 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c5cc:	9b07      	ldr	r3, [sp, #28]
   1c5ce:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c5d2:	4343      	muls	r3, r0
   1c5d4:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c5d6:	f04f 0800 	mov.w	r8, #0
   1c5da:	45d0      	cmp	r8, sl
   1c5dc:	da14      	bge.n	1c608 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c5de:	7863      	ldrb	r3, [r4, #1]
   1c5e0:	9904      	ldr	r1, [sp, #16]
   1c5e2:	9300      	str	r3, [sp, #0]
   1c5e4:	4652      	mov	r2, sl
   1c5e6:	7823      	ldrb	r3, [r4, #0]
   1c5e8:	4640      	mov	r0, r8
   1c5ea:	f7f1 fc05 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c5ee:	9a08      	ldr	r2, [sp, #32]
   1c5f0:	9b06      	ldr	r3, [sp, #24]
   1c5f2:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c5f6:	1829      	adds	r1, r5, r0
   1c5f8:	4632      	mov	r2, r6
   1c5fa:	4658      	mov	r0, fp
   1c5fc:	f002 f80f 	bl	1e61e <memcpy>
        output_ptr += depth;
   1c600:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   1c602:	f108 0801 	add.w	r8, r8, #1
   1c606:	e7e8      	b.n	1c5da <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   1c608:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c60a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c60c:	4413      	add	r3, r2
   1c60e:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c610:	3701      	adds	r7, #1
   1c612:	e7d0      	b.n	1c5b6 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   1c614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   1c616:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c61a:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   1c61c:	e7c7      	b.n	1c5ae <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   1c61e:	a812      	add	r0, sp, #72	; 0x48
   1c620:	f7f9 f954 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c624:	a80c      	add	r0, sp, #48	; 0x30
   1c626:	f7f9 f951 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c62a:	b019      	add	sp, #100	; 0x64
   1c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c630 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   1c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c634:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c636:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   1c638:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c63a:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   1c63c:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   1c640:	4604      	mov	r4, r0
   1c642:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   1c644:	dd01      	ble.n	1c64a <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   1c646:	f001 ffd5 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1c64a:	6833      	ldr	r3, [r6, #0]
   1c64c:	2b04      	cmp	r3, #4
   1c64e:	dcfa      	bgt.n	1c646 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   1c650:	460a      	mov	r2, r1
   1c652:	2301      	movs	r3, #1
   1c654:	2104      	movs	r1, #4
   1c656:	a80c      	add	r0, sp, #48	; 0x30
   1c658:	f7f9 f9d8 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1c65c:	4632      	mov	r2, r6
   1c65e:	2301      	movs	r3, #1
   1c660:	2104      	movs	r1, #4
   1c662:	a812      	add	r0, sp, #72	; 0x48
   1c664:	f7f9 f9d2 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c668:	2300      	movs	r3, #0
   1c66a:	4619      	mov	r1, r3
   1c66c:	aa12      	add	r2, sp, #72	; 0x48
   1c66e:	a80c      	add	r0, sp, #48	; 0x30
   1c670:	f7fb ffe4 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   1c674:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   1c676:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   1c678:	a80c      	add	r0, sp, #48	; 0x30
   1c67a:	f7f9 f932 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   1c67e:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   1c680:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   1c682:	a80c      	add	r0, sp, #48	; 0x30
   1c684:	f7f9 f92d 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c688:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   1c68a:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   1c68c:	aa12      	add	r2, sp, #72	; 0x48
   1c68e:	4619      	mov	r1, r3
   1c690:	a80c      	add	r0, sp, #48	; 0x30
   1c692:	f7fb ffd3 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c696:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   1c698:	4640      	mov	r0, r8
   1c69a:	f7f9 f9a7 	bl	159ec <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c69e:	2802      	cmp	r0, #2
   1c6a0:	d1d1      	bne.n	1c646 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   1c6a2:	683b      	ldr	r3, [r7, #0]
   1c6a4:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   1c6a6:	2103      	movs	r1, #3
   1c6a8:	a80c      	add	r0, sp, #48	; 0x30
   1c6aa:	f7f9 f91a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c6ae:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   1c6b0:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int col_offset = input_shape.Dims(3);
   1c6b4:	9006      	str	r0, [sp, #24]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c6b6:	4603      	mov	r3, r0
   1c6b8:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c6ba:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   1c6bc:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   1c6be:	4353      	muls	r3, r2
   1c6c0:	930a      	str	r3, [sp, #40]	; 0x28
   1c6c2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   1c6c6:	4373      	muls	r3, r6
   1c6c8:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   1c6ca:	f04f 0900 	mov.w	r9, #0
   1c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c6d0:	4599      	cmp	r9, r3
   1c6d2:	da34      	bge.n	1c73e <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   1c6d4:	2700      	movs	r7, #0
   1c6d6:	9b05      	ldr	r3, [sp, #20]
   1c6d8:	429f      	cmp	r7, r3
   1c6da:	da2b      	bge.n	1c734 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   1c6dc:	7863      	ldrb	r3, [r4, #1]
   1c6de:	9300      	str	r3, [sp, #0]
   1c6e0:	9a05      	ldr	r2, [sp, #20]
   1c6e2:	7823      	ldrb	r3, [r4, #0]
   1c6e4:	9903      	ldr	r1, [sp, #12]
   1c6e6:	4638      	mov	r0, r7
   1c6e8:	f7f1 fb86 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   1c6ec:	9b07      	ldr	r3, [sp, #28]
   1c6ee:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1c6f2:	4343      	muls	r3, r0
   1c6f4:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   1c6f6:	f04f 0800 	mov.w	r8, #0
   1c6fa:	45d0      	cmp	r8, sl
   1c6fc:	da14      	bge.n	1c728 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   1c6fe:	7863      	ldrb	r3, [r4, #1]
   1c700:	9904      	ldr	r1, [sp, #16]
   1c702:	9300      	str	r3, [sp, #0]
   1c704:	4652      	mov	r2, sl
   1c706:	7823      	ldrb	r3, [r4, #0]
   1c708:	4640      	mov	r0, r8
   1c70a:	f7f1 fb75 	bl	ddf8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   1c70e:	9a08      	ldr	r2, [sp, #32]
   1c710:	9b06      	ldr	r3, [sp, #24]
   1c712:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   1c716:	1829      	adds	r1, r5, r0
   1c718:	4632      	mov	r2, r6
   1c71a:	4658      	mov	r0, fp
   1c71c:	f001 ff7f 	bl	1e61e <memcpy>
        output_ptr += depth;
   1c720:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   1c722:	f108 0801 	add.w	r8, r8, #1
   1c726:	e7e8      	b.n	1c6fa <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   1c728:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c72a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c72c:	4413      	add	r3, r2
   1c72e:	9324      	str	r3, [sp, #144]	; 0x90
    for (int y = 0; y < output_height; ++y) {
   1c730:	3701      	adds	r7, #1
   1c732:	e7d0      	b.n	1c6d6 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   1c734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   1c736:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   1c73a:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   1c73c:	e7c7      	b.n	1c6ce <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   1c73e:	a812      	add	r0, sp, #72	; 0x48
   1c740:	f7f9 f8c4 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1c744:	a80c      	add	r0, sp, #48	; 0x30
   1c746:	f7f9 f8c1 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c74a:	b019      	add	sp, #100	; 0x64
   1c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c750 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>:
    return floor_val = floor_val + 1.0f;
  }
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
   1c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1c754:	f8d0 8000 	ldr.w	r8, [r0]
   1c758:	461e      	mov	r6, r3
   1c75a:	6813      	ldr	r3, [r2, #0]
   1c75c:	4598      	cmp	r8, r3
   1c75e:	ed2d 8b04 	vpush	{d8-d9}
   1c762:	4604      	mov	r4, r0
   1c764:	460f      	mov	r7, r1
   1c766:	4691      	mov	r9, r2
   1c768:	d001      	beq.n	1c76e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   1c76a:	f001 ff43 	bl	1e5f4 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1c76e:	2500      	movs	r5, #0
   1c770:	45a8      	cmp	r8, r5
   1c772:	dd0c      	ble.n	1c78e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1c774:	4629      	mov	r1, r5
   1c776:	4620      	mov	r0, r4
   1c778:	f7f9 f8b3 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c77c:	4629      	mov	r1, r5
   1c77e:	4682      	mov	sl, r0
   1c780:	4648      	mov	r0, r9
   1c782:	f7f9 f8ae 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c786:	4582      	cmp	sl, r0
   1c788:	d1ef      	bne.n	1c76a <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   1c78a:	3501      	adds	r5, #1
   1c78c:	e7f0      	b.n	1c770 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1c78e:	f1b8 0f05 	cmp.w	r8, #5
   1c792:	bfcc      	ite	gt
   1c794:	6864      	ldrgt	r4, [r4, #4]
   1c796:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1c798:	2300      	movs	r3, #0
    int buffer_size = 1;
   1c79a:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
   1c79e:	4598      	cmp	r8, r3
   1c7a0:	dc25      	bgt.n	1c7ee <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x9e>
   1c7a2:	4634      	mov	r4, r6
  if ((diff < 0.5f) ||
   1c7a4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   1c7a8:	2600      	movs	r6, #0
    return floor_val = floor_val + 1.0f;
   1c7aa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   1c7ae:	454e      	cmp	r6, r9
   1c7b0:	da23      	bge.n	1c7fa <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0xaa>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   1c7b2:	ecb7 8a01 	vldmia	r7!, {s16}
  { return __builtin_floorf(__x); }
   1c7b6:	eeb0 0a48 	vmov.f32	s0, s16
   1c7ba:	f7f5 fcbf 	bl	1213c <floorf>
  auto diff = value - floor_val;
   1c7be:	ee38 8a40 	vsub.f32	s16, s16, s0
  if ((diff < 0.5f) ||
   1c7c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
   1c7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c7ca:	d40c      	bmi.n	1c7e6 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
   1c7cc:	eeb4 8a68 	vcmp.f32	s16, s17
   1c7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c7d4:	d105      	bne.n	1c7e2 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x92>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   1c7d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1c7da:	ee17 3a90 	vmov	r3, s15
   1c7de:	07db      	lsls	r3, r3, #31
   1c7e0:	d501      	bpl.n	1c7e6 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
    return floor_val = floor_val + 1.0f;
   1c7e2:	ee30 0a09 	vadd.f32	s0, s0, s18
    output_data[i] = RoundToNearest(input_data[i]);
   1c7e6:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   1c7ea:	3601      	adds	r6, #1
   1c7ec:	e7df      	b.n	1c7ae <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x5e>
      buffer_size *= dims_data[i];
   1c7ee:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1c7f2:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1c7f4:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   1c7f8:	e7d1      	b.n	1c79e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
  }
}
   1c7fa:	ecbd 8b04 	vpop	{d8-d9}
   1c7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c802 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c802:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c804:	b530      	push	{r4, r5, lr}
   1c806:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c808:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c80a:	6884      	ldr	r4, [r0, #8]
   1c80c:	685d      	ldr	r5, [r3, #4]
   1c80e:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   1c812:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c816:	b08d      	sub	sp, #52	; 0x34
   1c818:	d111      	bne.n	1c83e <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  RuntimeShape() : size_(0) {}
   1c81a:	9400      	str	r4, [sp, #0]
   1c81c:	b9cd      	cbnz	r5, 1c852 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   1c81e:	9506      	str	r5, [sp, #24]
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   1c820:	462b      	mov	r3, r5
   1c822:	aa06      	add	r2, sp, #24
   1c824:	4621      	mov	r1, r4
   1c826:	4668      	mov	r0, sp
   1c828:	f7ff ff92 	bl	1c750 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>
                       GetTensorShape(output), GetTensorData<float>(output));
   1c82c:	a806      	add	r0, sp, #24
   1c82e:	f7f9 f84d 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   1c832:	4668      	mov	r0, sp
   1c834:	f7f9 f84a 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c838:	2000      	movs	r0, #0
   1c83a:	b00d      	add	sp, #52	; 0x34
   1c83c:	bd30      	pop	{r4, r5, pc}
  const int dims_size = dims->size;
   1c83e:	68a2      	ldr	r2, [r4, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   1c840:	2300      	movs	r3, #0
   1c842:	f852 1b04 	ldr.w	r1, [r2], #4
   1c846:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   1c848:	4668      	mov	r0, sp
   1c84a:	f7fa f845 	bl	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c84e:	6864      	ldr	r4, [r4, #4]
   1c850:	e7e4      	b.n	1c81c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  const int dims_size = dims->size;
   1c852:	68aa      	ldr	r2, [r5, #8]
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   1c854:	2300      	movs	r3, #0
   1c856:	f852 1b04 	ldr.w	r1, [r2], #4
   1c85a:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   1c85c:	a806      	add	r0, sp, #24
   1c85e:	f7fa f83b 	bl	168d8 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c862:	686d      	ldr	r5, [r5, #4]
   1c864:	e7dc      	b.n	1c820 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1e>

0001c866 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
   1c866:	b570      	push	{r4, r5, r6, lr}
   1c868:	b08e      	sub	sp, #56	; 0x38
   1c86a:	4604      	mov	r4, r0
   1c86c:	460d      	mov	r5, r1
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c86e:	4601      	mov	r1, r0
   1c870:	a802      	add	r0, sp, #8
                  const SoftmaxParams& op_data) {
   1c872:	4616      	mov	r6, r2
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c874:	f7f9 f86f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c878:	b104      	cbz	r4, 1c87c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16>
   1c87a:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   1c87c:	4629      	mov	r1, r5
   1c87e:	a808      	add	r0, sp, #32
   1c880:	f7f9 f869 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c884:	b105      	cbz	r5, 1c888 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22>
   1c886:	686d      	ldr	r5, [r5, #4]
  tflite::reference_ops::Softmax(
   1c888:	9500      	str	r5, [sp, #0]
   1c88a:	ab08      	add	r3, sp, #32
   1c88c:	4622      	mov	r2, r4
   1c88e:	a902      	add	r1, sp, #8
   1c890:	4630      	mov	r0, r6
   1c892:	f7f1 fc97 	bl	e1c4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
   1c896:	a808      	add	r0, sp, #32
   1c898:	f7f9 f818 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   1c89c:	a802      	add	r0, sp, #8
   1c89e:	f7f9 f815 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c8a2:	b00e      	add	sp, #56	; 0x38
   1c8a4:	bd70      	pop	{r4, r5, r6, pc}

0001c8a6 <_ZN6tflite13GetReciprocalEiiPi>:
                           int* num_bits_over_unit) {
   1c8a6:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   1c8a8:	fab0 f380 	clz	r3, r0
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   1c8ac:	1ac9      	subs	r1, r1, r3
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   1c8ae:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   1c8b0:	6011      	str	r1, [r2, #0]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   1c8b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   1c8b6:	f7ee ffb7 	bl	b828 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
}
   1c8ba:	bd08      	pop	{r3, pc}

0001c8bc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   1c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8c0:	b08d      	sub	sp, #52	; 0x34
   1c8c2:	460c      	mov	r4, r1
   1c8c4:	9203      	str	r2, [sp, #12]
   1c8c6:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   1c8c8:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   1c8cc:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   1c8ce:	6983      	ldr	r3, [r0, #24]
   1c8d0:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c8d2:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8d4:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c8d6:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8d8:	4619      	mov	r1, r3
   1c8da:	4620      	mov	r0, r4
   1c8dc:	9304      	str	r3, [sp, #16]
   1c8de:	f7fd faa2 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c8e2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c8e6:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c8e8:	4619      	mov	r1, r3
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	f7fb fea6 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1c8f0:	2400      	movs	r4, #0
   1c8f2:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   1c8f4:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c8f6:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   1c8f8:	9b02      	ldr	r3, [sp, #8]
   1c8fa:	4598      	cmp	r8, r3
   1c8fc:	da71      	bge.n	1c9e2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   1c8fe:	9b03      	ldr	r3, [sp, #12]
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c900:	f88d 901f 	strb.w	r9, [sp, #31]
   1c904:	191f      	adds	r7, r3, r4
   1c906:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   1c908:	2200      	movs	r2, #0
   1c90a:	42aa      	cmp	r2, r5
   1c90c:	da0e      	bge.n	1c92c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1c90e:	460b      	mov	r3, r1
      if (__a < __b)
   1c910:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1c914:	781e      	ldrb	r6, [r3, #0]
   1c916:	4286      	cmp	r6, r0
      return __a;
   1c918:	f10d 001f 	add.w	r0, sp, #31
   1c91c:	bf98      	it	ls
   1c91e:	4603      	movls	r3, r0
   1c920:	3101      	adds	r1, #1
   1c922:	781b      	ldrb	r3, [r3, #0]
   1c924:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   1c928:	3201      	adds	r2, #1
   1c92a:	e7ee      	b.n	1c90a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1c92c:	2600      	movs	r6, #0
   1c92e:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   1c930:	46b2      	mov	sl, r6
   1c932:	45aa      	cmp	sl, r5
   1c934:	da17      	bge.n	1c966 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c936:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1c93a:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   1c93e:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   1c940:	9a01      	ldr	r2, [sp, #4]
   1c942:	4282      	cmp	r2, r0
   1c944:	dc0c      	bgt.n	1c960 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   1c946:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1c948:	9b00      	ldr	r3, [sp, #0]
   1c94a:	4659      	mov	r1, fp
   1c94c:	4098      	lsls	r0, r3
   1c94e:	f7ee fd31 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1c952:	f7f1 fcc1 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1c956:	210c      	movs	r1, #12
   1c958:	f7ee fd5a 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1c95c:	9b04      	ldr	r3, [sp, #16]
   1c95e:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   1c960:	f10a 0a01 	add.w	sl, sl, #1
   1c964:	e7e5      	b.n	1c932 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1c966:	4630      	mov	r0, r6
   1c968:	aa08      	add	r2, sp, #32
   1c96a:	210c      	movs	r1, #12
   1c96c:	f7ff ff9b 	bl	1c8a6 <_ZN6tflite13GetReciprocalEiiPi>
   1c970:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c972:	4682      	mov	sl, r0
   1c974:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   1c976:	2300      	movs	r3, #0
   1c978:	42ab      	cmp	r3, r5
   1c97a:	da2e      	bge.n	1c9da <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c97c:	f89d 101f 	ldrb.w	r1, [sp, #31]
   1c980:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32 input_diff =
   1c984:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1c986:	9901      	ldr	r1, [sp, #4]
   1c988:	4281      	cmp	r1, r0
   1c98a:	dc23      	bgt.n	1c9d4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   1c98c:	9304      	str	r3, [sp, #16]
   1c98e:	9b00      	ldr	r3, [sp, #0]
   1c990:	4659      	mov	r1, fp
   1c992:	4098      	lsls	r0, r3
   1c994:	f7ee fd0e 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1c998:	f7f1 fc9e 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1c99c:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   1c99e:	4650      	mov	r0, sl
   1c9a0:	f7fd fca0 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1c9a4:	9908      	ldr	r1, [sp, #32]
   1c9a6:	3117      	adds	r1, #23
   1c9a8:	f7ee fd32 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1c9ac:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   1c9ae:	4298      	cmp	r0, r3
	return __b;
   1c9b0:	bfcc      	ite	gt
   1c9b2:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   1c9b4:	a909      	addle	r1, sp, #36	; 0x24
   1c9b6:	930a      	str	r3, [sp, #40]	; 0x28
        const int32 shifted_output =
   1c9b8:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1c9ba:	6808      	ldr	r0, [r1, #0]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1c9bc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
      if (__b < __a)
   1c9c0:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   1c9c2:	2800      	cmp	r0, #0
	return __b;
   1c9c4:	bfb8      	it	lt
   1c9c6:	4611      	movlt	r1, r2
      if (__b < __a)
   1c9c8:	9b04      	ldr	r3, [sp, #16]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1c9ca:	6809      	ldr	r1, [r1, #0]
   1c9cc:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   1c9ce:	3301      	adds	r3, #1
   1c9d0:	3601      	adds	r6, #1
   1c9d2:	e7d1      	b.n	1c978 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1c9d4:	f886 9000 	strb.w	r9, [r6]
   1c9d8:	e7f9      	b.n	1c9ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1c9da:	f108 0801 	add.w	r8, r8, #1
   1c9de:	442c      	add	r4, r5
   1c9e0:	e78a      	b.n	1c8f8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   1c9e2:	b00d      	add	sp, #52	; 0x34
   1c9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c9e8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   1c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9ec:	b08d      	sub	sp, #52	; 0x34
   1c9ee:	460c      	mov	r4, r1
   1c9f0:	9203      	str	r2, [sp, #12]
   1c9f2:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   1c9f4:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   1c9f8:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   1c9fa:	6983      	ldr	r3, [r0, #24]
   1c9fc:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c9fe:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1ca00:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1ca02:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1ca04:	4619      	mov	r1, r3
   1ca06:	4620      	mov	r0, r4
   1ca08:	9304      	str	r3, [sp, #16]
   1ca0a:	f7fd fa0c 	bl	19e26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1ca0e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1ca12:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1ca14:	4619      	mov	r1, r3
   1ca16:	4620      	mov	r0, r4
   1ca18:	f7fb fe10 	bl	1863c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1ca1c:	2500      	movs	r5, #0
   1ca1e:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   1ca20:	46a8      	mov	r8, r5
   1ca22:	9b02      	ldr	r3, [sp, #8]
   1ca24:	4598      	cmp	r8, r3
   1ca26:	da74      	bge.n	1cb12 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1ca28:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ca2c:	f88d 301f 	strb.w	r3, [sp, #31]
   1ca30:	9b03      	ldr	r3, [sp, #12]
   1ca32:	195f      	adds	r7, r3, r5
   1ca34:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   1ca36:	2200      	movs	r2, #0
   1ca38:	42a2      	cmp	r2, r4
   1ca3a:	da10      	bge.n	1ca5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1ca3c:	460b      	mov	r3, r1
      if (__a < __b)
   1ca3e:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   1ca42:	f993 6000 	ldrsb.w	r6, [r3]
   1ca46:	4286      	cmp	r6, r0
      return __a;
   1ca48:	f10d 001f 	add.w	r0, sp, #31
   1ca4c:	bfd8      	it	le
   1ca4e:	4603      	movle	r3, r0
   1ca50:	3101      	adds	r1, #1
   1ca52:	f993 3000 	ldrsb.w	r3, [r3]
   1ca56:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   1ca5a:	3201      	adds	r2, #1
   1ca5c:	e7ec      	b.n	1ca38 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1ca5e:	2600      	movs	r6, #0
   1ca60:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   1ca62:	46b1      	mov	r9, r6
   1ca64:	45a1      	cmp	r9, r4
   1ca66:	da15      	bge.n	1ca94 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1ca68:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1ca6c:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32 input_diff =
   1ca70:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   1ca72:	9b01      	ldr	r3, [sp, #4]
   1ca74:	4283      	cmp	r3, r0
   1ca76:	dc0a      	bgt.n	1ca8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
   1ca78:	9b00      	ldr	r3, [sp, #0]
   1ca7a:	4659      	mov	r1, fp
   1ca7c:	4098      	lsls	r0, r3
   1ca7e:	f7ee fc99 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1ca82:	f7f1 fc29 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1ca86:	210c      	movs	r1, #12
   1ca88:	f7ee fcc2 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1ca8c:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   1ca8e:	f109 0901 	add.w	r9, r9, #1
   1ca92:	e7e7      	b.n	1ca64 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1ca94:	4630      	mov	r0, r6
   1ca96:	aa08      	add	r2, sp, #32
   1ca98:	210c      	movs	r1, #12
   1ca9a:	f7ff ff04 	bl	1c8a6 <_ZN6tflite13GetReciprocalEiiPi>
   1ca9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1caa0:	4682      	mov	sl, r0
   1caa2:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
   1caa4:	f04f 0900 	mov.w	r9, #0
   1caa8:	45a1      	cmp	r9, r4
   1caaa:	da2e      	bge.n	1cb0a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1caac:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   1cab0:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32 input_diff =
   1cab4:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1cab6:	9901      	ldr	r1, [sp, #4]
   1cab8:	4281      	cmp	r1, r0
   1caba:	dc23      	bgt.n	1cb04 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
   1cabc:	9b00      	ldr	r3, [sp, #0]
   1cabe:	4659      	mov	r1, fp
   1cac0:	4098      	lsls	r0, r3
   1cac2:	f7ee fc77 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1cac6:	f7f1 fc07 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1caca:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   1cacc:	4650      	mov	r0, sl
   1cace:	f7fd fc09 	bl	1a2e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1cad2:	9908      	ldr	r1, [sp, #32]
   1cad4:	3117      	adds	r1, #23
   1cad6:	f7ee fc9b 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1cada:	237f      	movs	r3, #127	; 0x7f
            unsat_output +
   1cadc:	3880      	subs	r0, #128	; 0x80
      if (__b < __a)
   1cade:	4298      	cmp	r0, r3
	return __b;
   1cae0:	bfcc      	ite	gt
   1cae2:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   1cae4:	a909      	addle	r1, sp, #36	; 0x24
        const int32 shifted_output =
   1cae6:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1cae8:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
   1caea:	6808      	ldr	r0, [r1, #0]
   1caec:	3080      	adds	r0, #128	; 0x80
      if (__b < __a)
   1caee:	f06f 027f 	mvn.w	r2, #127	; 0x7f
	return __b;
   1caf2:	bfb8      	it	lt
   1caf4:	a90b      	addlt	r1, sp, #44	; 0x2c
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1caf6:	920b      	str	r2, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1caf8:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1cafa:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   1cafc:	f109 0901 	add.w	r9, r9, #1
   1cb00:	3601      	adds	r6, #1
   1cb02:	e7d1      	b.n	1caa8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1cb04:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   1cb08:	e7f7      	b.n	1cafa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1cb0a:	f108 0801 	add.w	r8, r8, #1
   1cb0e:	4425      	add	r5, r4
   1cb10:	e787      	b.n	1ca22 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   1cb12:	b00d      	add	sp, #52	; 0x34
   1cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cb18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   1cb18:	b570      	push	{r4, r5, r6, lr}
  if (input->type == kTfLiteUInt8) {
   1cb1a:	7803      	ldrb	r3, [r0, #0]
   1cb1c:	2b03      	cmp	r3, #3
                      const SoftmaxParams& op_data) {
   1cb1e:	b090      	sub	sp, #64	; 0x40
   1cb20:	4605      	mov	r5, r0
   1cb22:	460c      	mov	r4, r1
   1cb24:	4616      	mov	r6, r2
  if (input->type == kTfLiteUInt8) {
   1cb26:	d11a      	bne.n	1cb5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x46>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cb28:	4601      	mov	r1, r0
   1cb2a:	a804      	add	r0, sp, #16
   1cb2c:	f7f8 ff13 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cb30:	686a      	ldr	r2, [r5, #4]
   1cb32:	9203      	str	r2, [sp, #12]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cb34:	4621      	mov	r1, r4
   1cb36:	a80a      	add	r0, sp, #40	; 0x28
   1cb38:	f7f8 ff0d 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cb3c:	9a03      	ldr	r2, [sp, #12]
   1cb3e:	b104      	cbz	r4, 1cb42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a>
   1cb40:	6864      	ldr	r4, [r4, #4]
    tflite::reference_ops::Softmax(
   1cb42:	9400      	str	r4, [sp, #0]
   1cb44:	ab0a      	add	r3, sp, #40	; 0x28
   1cb46:	a904      	add	r1, sp, #16
   1cb48:	4630      	mov	r0, r6
   1cb4a:	f7ff feb7 	bl	1c8bc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1cb4e:	a80a      	add	r0, sp, #40	; 0x28
   1cb50:	f7f8 febc 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb54:	a804      	add	r0, sp, #16
   1cb56:	f7f8 feb9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1cb5a:	b010      	add	sp, #64	; 0x40
   1cb5c:	bd70      	pop	{r4, r5, r6, pc}
    if (output->type == kTfLiteInt16) {
   1cb5e:	780b      	ldrb	r3, [r1, #0]
   1cb60:	2b07      	cmp	r3, #7
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb62:	4601      	mov	r1, r0
   1cb64:	a804      	add	r0, sp, #16
    if (output->type == kTfLiteInt16) {
   1cb66:	d110      	bne.n	1cb8a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x72>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb68:	f7f8 fef5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cb6c:	686a      	ldr	r2, [r5, #4]
   1cb6e:	9203      	str	r2, [sp, #12]
          GetTensorShape(output), GetTensorData<int16_t>(output));
   1cb70:	4621      	mov	r1, r4
   1cb72:	a80a      	add	r0, sp, #40	; 0x28
   1cb74:	f7f8 feef 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   1cb78:	6863      	ldr	r3, [r4, #4]
   1cb7a:	9300      	str	r3, [sp, #0]
   1cb7c:	9a03      	ldr	r2, [sp, #12]
   1cb7e:	ab0a      	add	r3, sp, #40	; 0x28
   1cb80:	a904      	add	r1, sp, #16
   1cb82:	4630      	mov	r0, r6
   1cb84:	f7f1 fc42 	bl	e40c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   1cb88:	e7e1      	b.n	1cb4e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cb8a:	f7f8 fee4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cb8e:	686a      	ldr	r2, [r5, #4]
   1cb90:	9203      	str	r2, [sp, #12]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1cb92:	4621      	mov	r1, r4
   1cb94:	a80a      	add	r0, sp, #40	; 0x28
   1cb96:	f7f8 fede 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   1cb9a:	6863      	ldr	r3, [r4, #4]
   1cb9c:	9300      	str	r3, [sp, #0]
   1cb9e:	9a03      	ldr	r2, [sp, #12]
   1cba0:	ab0a      	add	r3, sp, #40	; 0x28
   1cba2:	a904      	add	r1, sp, #16
   1cba4:	4630      	mov	r0, r6
   1cba6:	f7ff ff1f 	bl	1c9e8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   1cbaa:	e7d0      	b.n	1cb4e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>

0001cbac <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbb0:	b087      	sub	sp, #28
  const int output_count = NumOutputs(node);
   1cbb2:	f8d1 c004 	ldr.w	ip, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cbb6:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cbb8:	6881      	ldr	r1, [r0, #8]
   1cbba:	9103      	str	r1, [sp, #12]
  const int split_dimensions = input_dims->size;
   1cbbc:	f8d4 9000 	ldr.w	r9, [r4]
   1cbc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cbc4:	9803      	ldr	r0, [sp, #12]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cbc6:	f8dc e000 	ldr.w	lr, [ip]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cbca:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cbcc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cbd0:	bfb8      	it	lt
   1cbd2:	444b      	addlt	r3, r9
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cbd4:	454b      	cmp	r3, r9
  const TfLiteIntArray* output_dims = output0->dims;
   1cbd6:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cbd8:	db01      	blt.n	1cbde <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x32>
   1cbda:	f001 fd0b 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cbde:	6808      	ldr	r0, [r1, #0]
   1cbe0:	4548      	cmp	r0, r9
   1cbe2:	d1fa      	bne.n	1cbda <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t split_size = output_dims->data[axis] * output_count;
   1cbe4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1cbe8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cbec:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cbf0:	fb0e f008 	mul.w	r0, lr, r8
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cbf4:	6849      	ldr	r1, [r1, #4]
   1cbf6:	4288      	cmp	r0, r1
   1cbf8:	d1ef      	bne.n	1cbda <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t outer_size = 1;
   1cbfa:	2001      	movs	r0, #1
   1cbfc:	2100      	movs	r1, #0
   1cbfe:	e9cd 0100 	strd	r0, r1, [sp]
   1cc02:	3404      	adds	r4, #4
   1cc04:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1cc06:	2600      	movs	r6, #0
   1cc08:	429e      	cmp	r6, r3
   1cc0a:	da11      	bge.n	1cc30 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x84>
    outer_size *= input_dims->data[i];
   1cc0c:	f85a 7b04 	ldr.w	r7, [sl], #4
   1cc10:	9d00      	ldr	r5, [sp, #0]
   1cc12:	9801      	ldr	r0, [sp, #4]
   1cc14:	17f9      	asrs	r1, r7, #31
   1cc16:	4369      	muls	r1, r5
   1cc18:	fb07 1500 	mla	r5, r7, r0, r1
   1cc1c:	9800      	ldr	r0, [sp, #0]
   1cc1e:	fba0 0107 	umull	r0, r1, r0, r7
   1cc22:	e9cd 0100 	strd	r0, r1, [sp]
   1cc26:	9801      	ldr	r0, [sp, #4]
   1cc28:	1829      	adds	r1, r5, r0
   1cc2a:	9101      	str	r1, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   1cc2c:	3601      	adds	r6, #1
   1cc2e:	e7eb      	b.n	1cc08 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x5c>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc30:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cc32:	2001      	movs	r0, #1
   1cc34:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc36:	454b      	cmp	r3, r9
   1cc38:	d00c      	beq.n	1cc54 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa8>
    base_inner_size *= input_dims->data[i];
   1cc3a:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1cc3e:	4656      	mov	r6, sl
   1cc40:	17f7      	asrs	r7, r6, #31
   1cc42:	fb00 f607 	mul.w	r6, r0, r7
   1cc46:	fb0a 6601 	mla	r6, sl, r1, r6
   1cc4a:	fba0 010a 	umull	r0, r1, r0, sl
   1cc4e:	4431      	add	r1, r6
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cc50:	3301      	adds	r3, #1
   1cc52:	e7f0      	b.n	1cc36 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cc54:	fb00 f308 	mul.w	r3, r0, r8
   1cc58:	6854      	ldr	r4, [r2, #4]
      input_ptr += copy_size;
   1cc5a:	ea4f 0983 	mov.w	r9, r3, lsl #2
   1cc5e:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
   1cc62:	fb09 f202 	mul.w	r2, r9, r2
   1cc66:	2100      	movs	r1, #0
   1cc68:	9204      	str	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   1cc6a:	4608      	mov	r0, r1
   1cc6c:	e9dd ab00 	ldrd	sl, fp, [sp]
   1cc70:	17c7      	asrs	r7, r0, #31
   1cc72:	4550      	cmp	r0, sl
   1cc74:	eb77 020b 	sbcs.w	r2, r7, fp
   1cc78:	da24      	bge.n	1ccc4 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x118>
   1cc7a:	008a      	lsls	r2, r1, #2
   1cc7c:	f10c 0a04 	add.w	sl, ip, #4
   1cc80:	9205      	str	r2, [sp, #20]
   1cc82:	4627      	mov	r7, r4
    for (int i = 0; i < output_count; ++i) {
   1cc84:	2600      	movs	r6, #0
   1cc86:	4576      	cmp	r6, lr
   1cc88:	da17      	bge.n	1ccba <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cc8a:	9d03      	ldr	r5, [sp, #12]
  return &context->tensors[node->outputs->data[index]];
   1cc8c:	f85a 2b04 	ldr.w	r2, [sl], #4
   1cc90:	eb15 1282 	adds.w	r2, r5, r2, lsl #6
   1cc94:	9d05      	ldr	r5, [sp, #20]
   1cc96:	bf18      	it	ne
   1cc98:	6852      	ldrne	r2, [r2, #4]
   1cc9a:	46bb      	mov	fp, r7
   1cc9c:	442a      	add	r2, r5
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cc9e:	f04f 0800 	mov.w	r8, #0
   1cca2:	4598      	cmp	r8, r3
   1cca4:	da06      	bge.n	1ccb4 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x108>
   1cca6:	ecfb 7a01 	vldmia	fp!, {s15}
   1ccaa:	f108 0801 	add.w	r8, r8, #1
   1ccae:	ece2 7a01 	vstmia	r2!, {s15}
   1ccb2:	e7f6      	b.n	1cca2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
      input_ptr += copy_size;
   1ccb4:	444f      	add	r7, r9
    for (int i = 0; i < output_count; ++i) {
   1ccb6:	3601      	adds	r6, #1
   1ccb8:	e7e5      	b.n	1cc86 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xda>
   1ccba:	9a04      	ldr	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   1ccbc:	3001      	adds	r0, #1
   1ccbe:	4414      	add	r4, r2
   1ccc0:	4419      	add	r1, r3
   1ccc2:	e7d3      	b.n	1cc6c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
}
   1ccc4:	2000      	movs	r0, #0
   1ccc6:	b007      	add	sp, #28
   1ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cccc <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1ccd0:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1ccd2:	6896      	ldr	r6, [r2, #8]
   1ccd4:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   1ccd6:	f8d6 c000 	ldr.w	ip, [r6]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1ccda:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   1ccde:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cce0:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cce2:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cce4:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cce8:	bfb8      	it	lt
   1ccea:	4463      	addlt	r3, ip
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ccec:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   1ccee:	68a7      	ldr	r7, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ccf0:	db01      	blt.n	1ccf6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1ccf2:	f001 fc7f 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1ccf6:	683c      	ldr	r4, [r7, #0]
   1ccf8:	4564      	cmp	r4, ip
   1ccfa:	d1fa      	bne.n	1ccf2 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1ccfc:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cd00:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cd04:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cd06:	686d      	ldr	r5, [r5, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cd08:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cd0c:	42ac      	cmp	r4, r5
   1cd0e:	d1f0      	bne.n	1ccf2 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cd10:	3604      	adds	r6, #4
   1cd12:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   1cd14:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1cd18:	f04f 0a01 	mov.w	sl, #1
   1cd1c:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   1cd20:	4598      	cmp	r8, r3
   1cd22:	da0d      	bge.n	1cd40 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   1cd24:	f851 9b04 	ldr.w	r9, [r1], #4
   1cd28:	464c      	mov	r4, r9
   1cd2a:	17e5      	asrs	r5, r4, #31
   1cd2c:	fb0a f405 	mul.w	r4, sl, r5
   1cd30:	fb09 440b 	mla	r4, r9, fp, r4
   1cd34:	fbaa ab09 	umull	sl, fp, sl, r9
   1cd38:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   1cd3a:	f108 0801 	add.w	r8, r8, #1
   1cd3e:	e7ef      	b.n	1cd20 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd40:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cd42:	2401      	movs	r4, #1
   1cd44:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd46:	4563      	cmp	r3, ip
   1cd48:	d00c      	beq.n	1cd64 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   1cd4a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1cd4e:	ea4f 79e1 	mov.w	r9, r1, asr #31
   1cd52:	fb04 f809 	mul.w	r8, r4, r9
   1cd56:	fb01 8805 	mla	r8, r1, r5, r8
   1cd5a:	fba4 4501 	umull	r4, r5, r4, r1
   1cd5e:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cd60:	3301      	adds	r3, #1
   1cd62:	e7f0      	b.n	1cd46 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cd64:	f8d2 c004 	ldr.w	ip, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1cd68:	2600      	movs	r6, #0
   1cd6a:	17f3      	asrs	r3, r6, #31
   1cd6c:	4556      	cmp	r6, sl
   1cd6e:	eb73 030b 	sbcs.w	r3, r3, fp
   1cd72:	da22      	bge.n	1cdba <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   1cd74:	f04f 0800 	mov.w	r8, #0
   1cd78:	45f0      	cmp	r8, lr
   1cd7a:	da1c      	bge.n	1cdb6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
  return &context->tensors[node->outputs->data[index]];
   1cd7c:	9b01      	ldr	r3, [sp, #4]
   1cd7e:	685b      	ldr	r3, [r3, #4]
   1cd80:	eb03 0388 	add.w	r3, r3, r8, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cd84:	f04f 0900 	mov.w	r9, #0
   1cd88:	685a      	ldr	r2, [r3, #4]
   1cd8a:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cd8c:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cd90:	687a      	ldr	r2, [r7, #4]
   1cd92:	bf18      	it	ne
   1cd94:	685b      	ldrne	r3, [r3, #4]
   1cd96:	4362      	muls	r2, r4
   1cd98:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cd9c:	4591      	cmp	r9, r2
   1cd9e:	da06      	bge.n	1cdae <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   1cda0:	f81c 1009 	ldrb.w	r1, [ip, r9]
   1cda4:	f803 1b01 	strb.w	r1, [r3], #1
   1cda8:	f109 0901 	add.w	r9, r9, #1
   1cdac:	e7f6      	b.n	1cd9c <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   1cdae:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   1cdb0:	f108 0801 	add.w	r8, r8, #1
   1cdb4:	e7e0      	b.n	1cd78 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   1cdb6:	3601      	adds	r6, #1
   1cdb8:	e7d7      	b.n	1cd6a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   1cdba:	2000      	movs	r0, #0
   1cdbc:	b003      	add	sp, #12
   1cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cdc2 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cdc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1cdc6:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cdc8:	6896      	ldr	r6, [r2, #8]
   1cdca:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   1cdcc:	f8d6 c000 	ldr.w	ip, [r6]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cdd0:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cdd4:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cdd6:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cdd8:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cdda:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cdde:	bfb8      	it	lt
   1cde0:	4463      	addlt	r3, ip
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cde2:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   1cde4:	68a7      	ldr	r7, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cde6:	db01      	blt.n	1cdec <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cde8:	f001 fc04 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cdec:	683c      	ldr	r4, [r7, #0]
   1cdee:	4564      	cmp	r4, ip
   1cdf0:	d1fa      	bne.n	1cde8 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cdf2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cdf6:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cdfa:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cdfc:	686d      	ldr	r5, [r5, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1cdfe:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1ce02:	42ac      	cmp	r4, r5
   1ce04:	d1f0      	bne.n	1cde8 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1ce06:	3604      	adds	r6, #4
   1ce08:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   1ce0a:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1ce0e:	f04f 0a01 	mov.w	sl, #1
   1ce12:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   1ce16:	4598      	cmp	r8, r3
   1ce18:	da0d      	bge.n	1ce36 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   1ce1a:	f851 9b04 	ldr.w	r9, [r1], #4
   1ce1e:	464c      	mov	r4, r9
   1ce20:	17e5      	asrs	r5, r4, #31
   1ce22:	fb0a f405 	mul.w	r4, sl, r5
   1ce26:	fb09 440b 	mla	r4, r9, fp, r4
   1ce2a:	fbaa ab09 	umull	sl, fp, sl, r9
   1ce2e:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   1ce30:	f108 0801 	add.w	r8, r8, #1
   1ce34:	e7ef      	b.n	1ce16 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce36:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1ce38:	2401      	movs	r4, #1
   1ce3a:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce3c:	4563      	cmp	r3, ip
   1ce3e:	d00c      	beq.n	1ce5a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   1ce40:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1ce44:	ea4f 79e1 	mov.w	r9, r1, asr #31
   1ce48:	fb04 f809 	mul.w	r8, r4, r9
   1ce4c:	fb01 8805 	mla	r8, r1, r5, r8
   1ce50:	fba4 4501 	umull	r4, r5, r4, r1
   1ce54:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1ce56:	3301      	adds	r3, #1
   1ce58:	e7f0      	b.n	1ce3c <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ce5a:	f8d2 c004 	ldr.w	ip, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1ce5e:	2600      	movs	r6, #0
   1ce60:	17f3      	asrs	r3, r6, #31
   1ce62:	4556      	cmp	r6, sl
   1ce64:	eb73 030b 	sbcs.w	r3, r3, fp
   1ce68:	da22      	bge.n	1ceb0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   1ce6a:	f04f 0800 	mov.w	r8, #0
   1ce6e:	45f0      	cmp	r8, lr
   1ce70:	da1c      	bge.n	1ceac <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
  return &context->tensors[node->outputs->data[index]];
   1ce72:	9b01      	ldr	r3, [sp, #4]
   1ce74:	685b      	ldr	r3, [r3, #4]
   1ce76:	eb03 0388 	add.w	r3, r3, r8, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1ce7a:	f04f 0900 	mov.w	r9, #0
   1ce7e:	685a      	ldr	r2, [r3, #4]
   1ce80:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ce82:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1ce86:	687a      	ldr	r2, [r7, #4]
   1ce88:	bf18      	it	ne
   1ce8a:	685b      	ldrne	r3, [r3, #4]
   1ce8c:	4362      	muls	r2, r4
   1ce8e:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1ce92:	4591      	cmp	r9, r2
   1ce94:	da06      	bge.n	1cea4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   1ce96:	f91c 1009 	ldrsb.w	r1, [ip, r9]
   1ce9a:	f803 1b01 	strb.w	r1, [r3], #1
   1ce9e:	f109 0901 	add.w	r9, r9, #1
   1cea2:	e7f6      	b.n	1ce92 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   1cea4:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   1cea6:	f108 0801 	add.w	r8, r8, #1
   1ceaa:	e7e0      	b.n	1ce6e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   1ceac:	3601      	adds	r6, #1
   1ceae:	e7d7      	b.n	1ce60 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   1ceb0:	2000      	movs	r0, #0
   1ceb2:	b003      	add	sp, #12
   1ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ceb8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cebc:	b085      	sub	sp, #20
  const int output_count = NumOutputs(node);
   1cebe:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cec0:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cec2:	6881      	ldr	r1, [r0, #8]
   1cec4:	9101      	str	r1, [sp, #4]
  const int split_dimensions = input_dims->size;
   1cec6:	6825      	ldr	r5, [r4, #0]
   1cec8:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1ceca:	9801      	ldr	r0, [sp, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cecc:	683e      	ldr	r6, [r7, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cece:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1ced0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1ced4:	bfb8      	it	lt
   1ced6:	195b      	addlt	r3, r3, r5
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1ced8:	42ab      	cmp	r3, r5
  const TfLiteIntArray* output_dims = output0->dims;
   1ceda:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cedc:	db01      	blt.n	1cee2 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cede:	f001 fb89 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cee2:	6808      	ldr	r0, [r1, #0]
   1cee4:	42a8      	cmp	r0, r5
   1cee6:	d1fa      	bne.n	1cede <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
  int64_t split_size = output_dims->data[axis] * output_count;
   1cee8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1ceec:	f8d1 e004 	ldr.w	lr, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cef0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   1cef4:	fb06 f00e 	mul.w	r0, r6, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1cef8:	6849      	ldr	r1, [r1, #4]
   1cefa:	4288      	cmp	r0, r1
   1cefc:	d1ef      	bne.n	1cede <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cefe:	3404      	adds	r4, #4
   1cf00:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1cf02:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1cf06:	f04f 0b01 	mov.w	fp, #1
   1cf0a:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   1cf0e:	4598      	cmp	r8, r3
   1cf10:	da0d      	bge.n	1cf2e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   1cf12:	f85a 9b04 	ldr.w	r9, [sl], #4
   1cf16:	4648      	mov	r0, r9
   1cf18:	17c1      	asrs	r1, r0, #31
   1cf1a:	fb0b f101 	mul.w	r1, fp, r1
   1cf1e:	fb09 110c 	mla	r1, r9, ip, r1
   1cf22:	fbab bc09 	umull	fp, ip, fp, r9
   1cf26:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   1cf28:	f108 0801 	add.w	r8, r8, #1
   1cf2c:	e7ef      	b.n	1cf0e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf2e:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1cf30:	2001      	movs	r0, #1
   1cf32:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf34:	42ab      	cmp	r3, r5
   1cf36:	d00c      	beq.n	1cf52 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   1cf38:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1cf3c:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1cf40:	fb00 f809 	mul.w	r8, r0, r9
   1cf44:	fb0a 8801 	mla	r8, sl, r1, r8
   1cf48:	fba0 010a 	umull	r0, r1, r0, sl
   1cf4c:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1cf4e:	3301      	adds	r3, #1
   1cf50:	e7f0      	b.n	1cf34 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1cf52:	fb00 f30e 	mul.w	r3, r0, lr
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cf56:	6855      	ldr	r5, [r2, #4]
      input_ptr += copy_size;
   1cf58:	ea4f 0a43 	mov.w	sl, r3, lsl #1
   1cf5c:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   1cf60:	fb0a f202 	mul.w	r2, sl, r2
   1cf64:	2100      	movs	r1, #0
   1cf66:	9202      	str	r2, [sp, #8]
  for (int k = 0; k < outer_size; ++k) {
   1cf68:	9100      	str	r1, [sp, #0]
   1cf6a:	9a00      	ldr	r2, [sp, #0]
   1cf6c:	ea4f 79e2 	mov.w	r9, r2, asr #31
   1cf70:	455a      	cmp	r2, fp
   1cf72:	eb79 020c 	sbcs.w	r2, r9, ip
   1cf76:	da26      	bge.n	1cfc6 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
   1cf78:	004a      	lsls	r2, r1, #1
   1cf7a:	f107 0904 	add.w	r9, r7, #4
   1cf7e:	9203      	str	r2, [sp, #12]
   1cf80:	46a8      	mov	r8, r5
    for (int i = 0; i < output_count; ++i) {
   1cf82:	f04f 0e00 	mov.w	lr, #0
   1cf86:	45b6      	cmp	lr, r6
   1cf88:	da16      	bge.n	1cfb8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x100>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cf8a:	9801      	ldr	r0, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
   1cf8c:	f859 2b04 	ldr.w	r2, [r9], #4
   1cf90:	eb10 1282 	adds.w	r2, r0, r2, lsl #6
   1cf94:	9803      	ldr	r0, [sp, #12]
   1cf96:	bf18      	it	ne
   1cf98:	6852      	ldrne	r2, [r2, #4]
   1cf9a:	4402      	add	r2, r0
   1cf9c:	4614      	mov	r4, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1cf9e:	2000      	movs	r0, #0
   1cfa0:	4298      	cmp	r0, r3
   1cfa2:	da05      	bge.n	1cfb0 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf8>
   1cfa4:	f938 2010 	ldrsh.w	r2, [r8, r0, lsl #1]
   1cfa8:	f824 2b02 	strh.w	r2, [r4], #2
   1cfac:	3001      	adds	r0, #1
   1cfae:	e7f7      	b.n	1cfa0 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe8>
      input_ptr += copy_size;
   1cfb0:	44d0      	add	r8, sl
    for (int i = 0; i < output_count; ++i) {
   1cfb2:	f10e 0e01 	add.w	lr, lr, #1
   1cfb6:	e7e6      	b.n	1cf86 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
   1cfb8:	9a02      	ldr	r2, [sp, #8]
   1cfba:	4415      	add	r5, r2
  for (int k = 0; k < outer_size; ++k) {
   1cfbc:	9a00      	ldr	r2, [sp, #0]
   1cfbe:	3201      	adds	r2, #1
   1cfc0:	9200      	str	r2, [sp, #0]
   1cfc2:	4419      	add	r1, r3
   1cfc4:	e7d1      	b.n	1cf6a <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
}
   1cfc6:	2000      	movs	r0, #0
   1cfc8:	b005      	add	sp, #20
   1cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cfce <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   1cfce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   1cfd2:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   1cfd4:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1cfd6:	6881      	ldr	r1, [r0, #8]
   1cfd8:	9100      	str	r1, [sp, #0]
  const int split_dimensions = input_dims->size;
   1cfda:	6826      	ldr	r6, [r4, #0]
   1cfdc:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   1cfde:	9800      	ldr	r0, [sp, #0]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1cfe0:	f8d7 e000 	ldr.w	lr, [r7]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cfe4:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1cfe6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   1cfea:	bfb8      	it	lt
   1cfec:	199b      	addlt	r3, r3, r6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cfee:	42b3      	cmp	r3, r6
  const TfLiteIntArray* output_dims = output0->dims;
   1cff0:	688d      	ldr	r5, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   1cff2:	db01      	blt.n	1cff8 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   1cff4:	f001 fafe 	bl	1e5f4 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   1cff8:	6829      	ldr	r1, [r5, #0]
   1cffa:	42b1      	cmp	r1, r6
   1cffc:	d1fa      	bne.n	1cff4 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1cffe:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1d002:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   1d006:	9101      	str	r1, [sp, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1d008:	6849      	ldr	r1, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1d00a:	6840      	ldr	r0, [r0, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   1d00c:	fb01 f10e 	mul.w	r1, r1, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   1d010:	4281      	cmp	r1, r0
   1d012:	d1ef      	bne.n	1cff4 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   1d014:	3404      	adds	r4, #4
   1d016:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   1d018:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   1d01c:	f04f 0b01 	mov.w	fp, #1
   1d020:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   1d024:	4598      	cmp	r8, r3
   1d026:	da0d      	bge.n	1d044 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   1d028:	f85a 9b04 	ldr.w	r9, [sl], #4
   1d02c:	4648      	mov	r0, r9
   1d02e:	17c1      	asrs	r1, r0, #31
   1d030:	fb0b f101 	mul.w	r1, fp, r1
   1d034:	fb09 110c 	mla	r1, r9, ip, r1
   1d038:	fbab bc09 	umull	fp, ip, fp, r9
   1d03c:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   1d03e:	f108 0801 	add.w	r8, r8, #1
   1d042:	e7ef      	b.n	1d024 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d044:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   1d046:	2001      	movs	r0, #1
   1d048:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d04a:	42b3      	cmp	r3, r6
   1d04c:	d00c      	beq.n	1d068 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   1d04e:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
   1d052:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1d056:	fb00 f809 	mul.w	r8, r0, r9
   1d05a:	fb0a 8801 	mla	r8, sl, r1, r8
   1d05e:	fba0 010a 	umull	r0, r1, r0, sl
   1d062:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   1d064:	3301      	adds	r3, #1
   1d066:	e7f0      	b.n	1d04a <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d068:	f8d2 8004 	ldr.w	r8, [r2, #4]
  for (int k = 0; k < outer_size; ++k) {
   1d06c:	2400      	movs	r4, #0
   1d06e:	17e3      	asrs	r3, r4, #31
   1d070:	455c      	cmp	r4, fp
   1d072:	eb73 030c 	sbcs.w	r3, r3, ip
   1d076:	da23      	bge.n	1d0c0 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
   1d078:	f107 0a04 	add.w	sl, r7, #4
    for (int i = 0; i < output_count; ++i) {
   1d07c:	f04f 0900 	mov.w	r9, #0
   1d080:	45f1      	cmp	r9, lr
   1d082:	da1b      	bge.n	1d0bc <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d084:	9a00      	ldr	r2, [sp, #0]
  return &context->tensors[node->outputs->data[index]];
   1d086:	f85a 3b04 	ldr.w	r3, [sl], #4
   1d08a:	eb12 1383 	adds.w	r3, r2, r3, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   1d08e:	9a01      	ldr	r2, [sp, #4]
   1d090:	bf18      	it	ne
   1d092:	685b      	ldrne	r3, [r3, #4]
   1d094:	6852      	ldr	r2, [r2, #4]
   1d096:	4342      	muls	r2, r0
      T* output_ptr = output_data + k * copy_size;
   1d098:	fb02 f604 	mul.w	r6, r2, r4
   1d09c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1d0a0:	2600      	movs	r6, #0
   1d0a2:	4296      	cmp	r6, r2
   1d0a4:	da05      	bge.n	1d0b2 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   1d0a6:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
   1d0aa:	f843 5b04 	str.w	r5, [r3], #4
   1d0ae:	3601      	adds	r6, #1
   1d0b0:	e7f7      	b.n	1d0a2 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd4>
      input_ptr += copy_size;
   1d0b2:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   1d0b6:	f109 0901 	add.w	r9, r9, #1
   1d0ba:	e7e1      	b.n	1d080 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
  for (int k = 0; k < outer_size; ++k) {
   1d0bc:	3401      	adds	r4, #1
   1d0be:	e7d6      	b.n	1d06e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa0>
}
   1d0c0:	2000      	movs	r0, #0
   1d0c2:	b003      	add	sp, #12
   1d0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d0c8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
   1d0c8:	2905      	cmp	r1, #5
                                   int dim_count) {
   1d0ca:	b570      	push	{r4, r5, r6, lr}
  TFLITE_CHECK_LE(dim_count, 5);
   1d0cc:	dd01      	ble.n	1d0d2 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
   1d0ce:	f001 fa91 	bl	1e5f4 <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   1d0d2:	f990 2000 	ldrsb.w	r2, [r0]
   1d0d6:	428a      	cmp	r2, r1
   1d0d8:	dcf9      	bgt.n	1d0ce <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   1d0da:	f990 3018 	ldrsb.w	r3, [r0, #24]
   1d0de:	429a      	cmp	r2, r3
   1d0e0:	d1f5      	bne.n	1d0ce <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   1d0e2:	f990 3030 	ldrsb.w	r3, [r0, #48]	; 0x30
   1d0e6:	4293      	cmp	r3, r2
   1d0e8:	d1f1      	bne.n	1d0ce <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>

  const int pad_count = dim_count - p->start_indices_count;
   1d0ea:	1aca      	subs	r2, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   1d0ec:	1e5d      	subs	r5, r3, #1
   1d0ee:	eb00 0481 	add.w	r4, r0, r1, lsl #2
   1d0f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1d0f6:	2d00      	cmp	r5, #0
   1d0f8:	da0b      	bge.n	1d112 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
   1d0fa:	2300      	movs	r3, #0
   1d0fc:	1d04      	adds	r4, r0, #4
    p->start_indices[i] = 0;
   1d0fe:	461e      	mov	r6, r3
    p->stop_indices[i] = 1;
   1d100:	2501      	movs	r5, #1
  for (int i = 0; i < pad_count; ++i) {
   1d102:	4293      	cmp	r3, r2
   1d104:	da0f      	bge.n	1d126 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5e>
    p->start_indices[i] = 0;
   1d106:	f844 6b04 	str.w	r6, [r4], #4
  for (int i = 0; i < pad_count; ++i) {
   1d10a:	3301      	adds	r3, #1
    p->stop_indices[i] = 1;
   1d10c:	6165      	str	r5, [r4, #20]
    p->strides[i] = 1;
   1d10e:	62e5      	str	r5, [r4, #44]	; 0x2c
  for (int i = 0; i < pad_count; ++i) {
   1d110:	e7f7      	b.n	1d102 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3a>
    p->strides[i + pad_count] = p->strides[i];
   1d112:	6b1e      	ldr	r6, [r3, #48]	; 0x30
   1d114:	6326      	str	r6, [r4, #48]	; 0x30
    p->start_indices[i + pad_count] = p->start_indices[i];
   1d116:	f853 6904 	ldr.w	r6, [r3], #-4
   1d11a:	f844 6904 	str.w	r6, [r4], #-4
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   1d11e:	69de      	ldr	r6, [r3, #28]
   1d120:	61e6      	str	r6, [r4, #28]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   1d122:	3d01      	subs	r5, #1
   1d124:	e7e7      	b.n	1d0f6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x2e>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   1d126:	f9b0 3050 	ldrsh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   1d12a:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
  p->shrink_axis_mask <<= pad_count;
   1d12e:	4093      	lsls	r3, r2
   1d130:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
   1d134:	f9b0 304a 	ldrsh.w	r3, [r0, #74]	; 0x4a
   1d138:	4093      	lsls	r3, r2
   1d13a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
   1d13e:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	; 0x4e
   1d142:	4093      	lsls	r3, r2
   1d144:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
  p->end_mask <<= pad_count;
   1d148:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
   1d14c:	fa03 f402 	lsl.w	r4, r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   1d150:	2301      	movs	r3, #1
   1d152:	4093      	lsls	r3, r2
   1d154:	3b01      	subs	r3, #1
   1d156:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   1d158:	fa05 f202 	lsl.w	r2, r5, r2
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   1d15c:	b249      	sxtb	r1, r1
  p->begin_mask |= (1 << pad_count) - 1;
   1d15e:	431a      	orrs	r2, r3
  p->end_mask |= (1 << pad_count) - 1;
   1d160:	4323      	orrs	r3, r4
  p->begin_mask |= (1 << pad_count) - 1;
   1d162:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
   1d166:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  p->start_indices_count = dim_count;
   1d16a:	7001      	strb	r1, [r0, #0]
  p->stop_indices_count = dim_count;
   1d16c:	7601      	strb	r1, [r0, #24]
  p->strides_count = dim_count;
   1d16e:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
   1d172:	bd70      	pop	{r4, r5, r6, pc}

0001d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   1d174:	b538      	push	{r3, r4, r5, lr}
   1d176:	4605      	mov	r5, r0
   1d178:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   1d17a:	4611      	mov	r1, r2
                        const RuntimeShape& input_shape, int axis) {
   1d17c:	4614      	mov	r4, r2
  const int axis_size = input_shape.Dims(axis);
   1d17e:	f7f8 fbb0 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   1d182:	b1d8      	cbz	r0, 1d1bc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x48>
  }
  // Begin with the specified index.
  int start = start_indices[axis];

  // begin_mask override
  if (begin_mask & 1 << axis) {
   1d184:	f9b5 2048 	ldrsh.w	r2, [r5, #72]	; 0x48
  int start = start_indices[axis];
   1d188:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  if (begin_mask & 1 << axis) {
   1d18c:	4122      	asrs	r2, r4
   1d18e:	07d2      	lsls	r2, r2, #31
  int start = start_indices[axis];
   1d190:	684b      	ldr	r3, [r1, #4]
  if (begin_mask & 1 << axis) {
   1d192:	d508      	bpl.n	1d1a6 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x32>
    if (strides[axis] > 0) {
   1d194:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1d196:	2b00      	cmp	r3, #0
   1d198:	dc09      	bgt.n	1d1ae <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3a>
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   1d19a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  TFLITE_DCHECK(!(hi < lo));
   1d19e:	3801      	subs	r0, #1
   1d1a0:	d508      	bpl.n	1d1b4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x40>
   1d1a2:	f001 fa27 	bl	1e5f4 <abort>
    }
  }

  // Handle negative indices
  if (start < 0) {
   1d1a6:	2b00      	cmp	r3, #0
   1d1a8:	daf9      	bge.n	1d19e <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
    start += axis_size;
   1d1aa:	4403      	add	r3, r0
   1d1ac:	e7f7      	b.n	1d19e <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
      start = std::numeric_limits<int>::lowest();
   1d1ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d1b2:	e7fa      	b.n	1d1aa <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x36>
  if (hi < v) return hi;
   1d1b4:	4298      	cmp	r0, r3
  if (v < lo) return lo;
   1d1b6:	bfa8      	it	ge
   1d1b8:	ea23 70e3 	bicge.w	r0, r3, r3, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   1d1bc:	bd38      	pop	{r3, r4, r5, pc}

0001d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   1d1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d1c0:	4606      	mov	r6, r0
   1d1c2:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   1d1c4:	4611      	mov	r1, r2
                       int start_for_axis) {
   1d1c6:	4615      	mov	r5, r2
   1d1c8:	461f      	mov	r7, r3
  const int axis_size = input_shape.Dims(axis);
   1d1ca:	f7f8 fb8a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   1d1ce:	b320      	cbz	r0, 1d21a <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
    return 0;
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   1d1d0:	f9b6 3050 	ldrsh.w	r3, [r6, #80]	; 0x50
  int stop = stop_indices[axis];
   1d1d4:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   1d1d8:	412b      	asrs	r3, r5

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   1d1da:	07d9      	lsls	r1, r3, #31
  int stop = stop_indices[axis];
   1d1dc:	69d4      	ldr	r4, [r2, #28]
    stop = start_for_axis + 1;
   1d1de:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   1d1e0:	f9b6 204c 	ldrsh.w	r2, [r6, #76]	; 0x4c
   1d1e4:	fa42 f205 	asr.w	r2, r2, r5
    stop = start_for_axis + 1;
   1d1e8:	bf48      	it	mi
   1d1ea:	1c7c      	addmi	r4, r7, #1
  if (end_mask & (1 << axis)) {
   1d1ec:	07d2      	lsls	r2, r2, #31
   1d1ee:	d505      	bpl.n	1d1fc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3e>
    if (strides[axis] > 0) {
   1d1f0:	2b00      	cmp	r3, #0
   1d1f2:	dc0b      	bgt.n	1d20c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4e>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
   1d1f4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  if (stop < 0) {
    stop += axis_size;
   1d1f8:	4404      	add	r4, r0
   1d1fa:	e001      	b.n	1d200 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x42>
  if (stop < 0) {
   1d1fc:	2c00      	cmp	r4, #0
   1d1fe:	dbfb      	blt.n	1d1f8 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3a>
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   1d200:	2b00      	cmp	r3, #0
   1d202:	dd0b      	ble.n	1d21c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5e>
  TFLITE_DCHECK(!(hi < lo));
   1d204:	2800      	cmp	r0, #0
   1d206:	da04      	bge.n	1d212 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x54>
   1d208:	f001 f9f4 	bl	1e5f4 <abort>
      stop = std::numeric_limits<int>::max();
   1d20c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1d210:	e7f8      	b.n	1d204 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x46>
  if (hi < v) return hi;
   1d212:	4284      	cmp	r4, r0
   1d214:	dc01      	bgt.n	1d21a <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  if (v < lo) return lo;
   1d216:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   1d21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   1d21c:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   1d21e:	1c43      	adds	r3, r0, #1
   1d220:	dbf2      	blt.n	1d208 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4a>
  if (hi < v) return hi;
   1d222:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   1d224:	bfa8      	it	ge
   1d226:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
   1d22a:	e7f6      	b.n	1d21a <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>

0001d22c <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   1d22c:	b570      	push	{r4, r5, r6, lr}
    input = GetInput(context, node, kInputTensor);
   1d22e:	6815      	ldr	r5, [r2, #0]
   1d230:	6889      	ldr	r1, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   1d232:	68ae      	ldr	r6, [r5, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   1d234:	6954      	ldr	r4, [r2, #20]
   1d236:	6004      	str	r4, [r0, #0]
  return &context->tensors[node->outputs->data[index]];
   1d238:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   1d23a:	686c      	ldr	r4, [r5, #4]
  return &context->tensors[node->outputs->data[index]];
   1d23c:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   1d23e:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   1d242:	eb01 1484 	add.w	r4, r1, r4, lsl #6
    begin = GetInput(context, node, kBeginTensor);
   1d246:	6086      	str	r6, [r0, #8]
   1d248:	68ee      	ldr	r6, [r5, #12]
   1d24a:	692d      	ldr	r5, [r5, #16]
    input = GetInput(context, node, kInputTensor);
   1d24c:	6044      	str	r4, [r0, #4]
   1d24e:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   1d252:	eb01 1585 	add.w	r5, r1, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d256:	eb01 1182 	add.w	r1, r1, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1d25a:	68a2      	ldr	r2, [r4, #8]
    end = GetInput(context, node, kEndTensor);
   1d25c:	60c6      	str	r6, [r0, #12]
    dims = NumDimensions(input);
   1d25e:	6812      	ldr	r2, [r2, #0]
    strides = GetInput(context, node, kStridesTensor);
   1d260:	6105      	str	r5, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   1d262:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   1d264:	6182      	str	r2, [r0, #24]
  }
   1d266:	bd70      	pop	{r4, r5, r6, pc}

0001d268 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
    StridedSliceContext* op_context) {
   1d268:	b570      	push	{r4, r5, r6, lr}
  op_params.start_indices_count = op_context->dims;
   1d26a:	698e      	ldr	r6, [r1, #24]
   1d26c:	b273      	sxtb	r3, r6
   1d26e:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   1d270:	7603      	strb	r3, [r0, #24]
  op_params.strides_count = op_context->dims;
   1d272:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
   1d276:	2200      	movs	r2, #0
   1d278:	4603      	mov	r3, r0
   1d27a:	4296      	cmp	r6, r2
   1d27c:	dd13      	ble.n	1d2a6 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3e>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   1d27e:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d280:	b104      	cbz	r4, 1d284 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1c>
   1d282:	6864      	ldr	r4, [r4, #4]
   1d284:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   1d288:	605c      	str	r4, [r3, #4]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   1d28a:	68cc      	ldr	r4, [r1, #12]
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   1d28c:	0095      	lsls	r5, r2, #2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d28e:	b104      	cbz	r4, 1d292 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x2a>
   1d290:	6864      	ldr	r4, [r4, #4]
   1d292:	5964      	ldr	r4, [r4, r5]
   1d294:	61dc      	str	r4, [r3, #28]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   1d296:	690c      	ldr	r4, [r1, #16]
   1d298:	b104      	cbz	r4, 1d29c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x34>
   1d29a:	6864      	ldr	r4, [r4, #4]
   1d29c:	5964      	ldr	r4, [r4, r5]
   1d29e:	635c      	str	r4, [r3, #52]	; 0x34
  for (int i = 0; i < op_context->dims; ++i) {
   1d2a0:	3201      	adds	r2, #1
   1d2a2:	3304      	adds	r3, #4
   1d2a4:	e7e9      	b.n	1d27a <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x12>
  op_params.begin_mask = op_context->params->begin_mask;
   1d2a6:	680b      	ldr	r3, [r1, #0]
   1d2a8:	681a      	ldr	r2, [r3, #0]
  op_params.end_mask = op_context->params->end_mask;
   1d2aa:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   1d2ac:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   1d2b0:	691b      	ldr	r3, [r3, #16]
  op_params.end_mask = op_context->params->end_mask;
   1d2b2:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  op_params.ellipsis_mask = 0;
   1d2b6:	2200      	movs	r2, #0
   1d2b8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  op_params.new_axis_mask = 0;
   1d2bc:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   1d2c0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
   1d2c4:	bd70      	pop	{r4, r5, r6, pc}

0001d2c6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d2c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2ca:	b0b5      	sub	sp, #212	; 0xd4
   1d2cc:	460e      	mov	r6, r1
   1d2ce:	9211      	str	r2, [sp, #68]	; 0x44
                         T* output_data) {
  using strided_slice::LoopCondition;
  using strided_slice::StartForAxis;
  using strided_slice::StopForAxis;
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   1d2d0:	4601      	mov	r1, r0
   1d2d2:	2254      	movs	r2, #84	; 0x54
   1d2d4:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d2d6:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d2d8:	f001 f9a1 	bl	1e61e <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d2dc:	6833      	ldr	r3, [r6, #0]
   1d2de:	2b05      	cmp	r3, #5
   1d2e0:	dd01      	ble.n	1d2e6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d2e2:	f001 f987 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d2e6:	682b      	ldr	r3, [r5, #0]
   1d2e8:	2b05      	cmp	r3, #5
   1d2ea:	dcfa      	bgt.n	1d2e2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    return RuntimeShape(new_shape_size, shape, 1);
   1d2ec:	ac13      	add	r4, sp, #76	; 0x4c
   1d2ee:	4632      	mov	r2, r6
   1d2f0:	2301      	movs	r3, #1
   1d2f2:	2105      	movs	r1, #5
   1d2f4:	4620      	mov	r0, r4
   1d2f6:	f7f8 fb89 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d2fa:	2301      	movs	r3, #1
   1d2fc:	462a      	mov	r2, r5
   1d2fe:	2105      	movs	r1, #5
   1d300:	a819      	add	r0, sp, #100	; 0x64
   1d302:	f7f8 fb83 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d306:	2105      	movs	r1, #5
   1d308:	a81f      	add	r0, sp, #124	; 0x7c
   1d30a:	f7ff fedd 	bl	1d0c8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d30e:	2200      	movs	r2, #0
   1d310:	4621      	mov	r1, r4
   1d312:	a81f      	add	r0, sp, #124	; 0x7c
   1d314:	f7ff ff2e 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d318:	2200      	movs	r2, #0
   1d31a:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d31c:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d31e:	4621      	mov	r1, r4
   1d320:	a81f      	add	r0, sp, #124	; 0x7c
   1d322:	f7ff ff4c 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d326:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d328:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d32a:	4621      	mov	r1, r4
   1d32c:	a81f      	add	r0, sp, #124	; 0x7c
   1d32e:	f7ff ff21 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d332:	2201      	movs	r2, #1
   1d334:	4603      	mov	r3, r0
   1d336:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d338:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d33a:	a81f      	add	r0, sp, #124	; 0x7c
   1d33c:	f7ff ff3f 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d340:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d342:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d344:	4621      	mov	r1, r4
   1d346:	a81f      	add	r0, sp, #124	; 0x7c
   1d348:	f7ff ff14 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d34c:	2202      	movs	r2, #2
   1d34e:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d350:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d352:	4621      	mov	r1, r4
   1d354:	a81f      	add	r0, sp, #124	; 0x7c
   1d356:	f7ff ff32 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d35a:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d35c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d35e:	4621      	mov	r1, r4
   1d360:	a81f      	add	r0, sp, #124	; 0x7c
   1d362:	f7ff ff07 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d366:	2203      	movs	r2, #3
   1d368:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d36a:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d36c:	4621      	mov	r1, r4
   1d36e:	a81f      	add	r0, sp, #124	; 0x7c
   1d370:	f7ff ff25 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d374:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d376:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d378:	4621      	mov	r1, r4
   1d37a:	a81f      	add	r0, sp, #124	; 0x7c
   1d37c:	f7ff fefa 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d380:	2204      	movs	r2, #4
   1d382:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d384:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d386:	4621      	mov	r1, r4
   1d388:	a81f      	add	r0, sp, #124	; 0x7c
   1d38a:	f7ff ff18 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d38e:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d390:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d392:	4620      	mov	r0, r4
   1d394:	f7f8 faa5 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d398:	fb06 f300 	mul.w	r3, r6, r0
   1d39c:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d39e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d3a0:	9300      	str	r3, [sp, #0]
   1d3a2:	4343      	muls	r3, r0
   1d3a4:	930e      	str	r3, [sp, #56]	; 0x38
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
       offset_0 += step_0) {
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d3a8:	9301      	str	r3, [sp, #4]
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
         offset_1 += step_1) {
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d3aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d3ac:	9302      	str	r3, [sp, #8]
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
           offset_2 += step_2) {
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d3ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d3b0:	9303      	str	r3, [sp, #12]
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
             offset_3 += step_3) {
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d3b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d3b4:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d3b6:	4345      	muls	r5, r0

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   1d3b8:	9b00      	ldr	r3, [sp, #0]
   1d3ba:	2b00      	cmp	r3, #0
   1d3bc:	9b08      	ldr	r3, [sp, #32]
   1d3be:	dd6c      	ble.n	1d49a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d4>
   1d3c0:	429d      	cmp	r5, r3
   1d3c2:	bfb4      	ite	lt
   1d3c4:	2300      	movlt	r3, #0
   1d3c6:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d3c8:	2b00      	cmp	r3, #0
   1d3ca:	f040 808e 	bne.w	1d4ea <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x224>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3ce:	2102      	movs	r1, #2
   1d3d0:	4620      	mov	r0, r4
   1d3d2:	f7f8 fa86 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d3d8:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3dc:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3de:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3e2:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d3e4:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d3e6:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d3ea:	930f      	str	r3, [sp, #60]	; 0x3c
   1d3ec:	9b01      	ldr	r3, [sp, #4]
   1d3ee:	2b00      	cmp	r3, #0
   1d3f0:	dd58      	ble.n	1d4a4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1de>
   1d3f2:	454e      	cmp	r6, r9
   1d3f4:	bfb4      	ite	lt
   1d3f6:	2300      	movlt	r3, #0
   1d3f8:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d3fa:	2b00      	cmp	r3, #0
   1d3fc:	d172      	bne.n	1d4e4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21e>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d3fe:	2103      	movs	r1, #3
   1d400:	4620      	mov	r0, r4
   1d402:	f7f8 fa6e 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d406:	9b05      	ldr	r3, [sp, #20]
   1d408:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d40c:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d410:	9b02      	ldr	r3, [sp, #8]
   1d412:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d414:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d416:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d41a:	9310      	str	r3, [sp, #64]	; 0x40
   1d41c:	9b02      	ldr	r3, [sp, #8]
   1d41e:	2b00      	cmp	r3, #0
   1d420:	dd45      	ble.n	1d4ae <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
   1d422:	4557      	cmp	r7, sl
   1d424:	bfb4      	ite	lt
   1d426:	2300      	movlt	r3, #0
   1d428:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d42a:	2b00      	cmp	r3, #0
   1d42c:	d157      	bne.n	1d4de <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x218>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d42e:	2104      	movs	r1, #4
   1d430:	4620      	mov	r0, r4
   1d432:	f7f8 fa56 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d438:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d43a:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d43e:	9a03      	ldr	r2, [sp, #12]
   1d440:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d442:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d444:	9209      	str	r2, [sp, #36]	; 0x24
   1d446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d448:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d44a:	fb00 fc0c 	mul.w	ip, r0, ip
   1d44e:	18d1      	adds	r1, r2, r3
   1d450:	9a03      	ldr	r2, [sp, #12]
   1d452:	2a00      	cmp	r2, #0
   1d454:	dd30      	ble.n	1d4b8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f2>
   1d456:	4563      	cmp	r3, ip
   1d458:	bfb4      	ite	lt
   1d45a:	2200      	movlt	r2, #0
   1d45c:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d45e:	2a00      	cmp	r2, #0
   1d460:	d13a      	bne.n	1d4d8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x212>
   1d462:	9a07      	ldr	r2, [sp, #28]
   1d464:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d468:	441a      	add	r2, r3
   1d46a:	9804      	ldr	r0, [sp, #16]
   1d46c:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d470:	2800      	cmp	r0, #0
   1d472:	dd26      	ble.n	1d4c2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1fc>
   1d474:	428a      	cmp	r2, r1
   1d476:	bfb4      	ite	lt
   1d478:	f04f 0b00 	movlt.w	fp, #0
   1d47c:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d480:	f1bb 0f00 	cmp.w	fp, #0
   1d484:	d124      	bne.n	1d4d0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20a>
               offset_4 += params_copy.strides[4]) {
            *out_ptr++ = input_data[offset_4];
   1d486:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d488:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d48c:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d48e:	f8db b000 	ldr.w	fp, [fp]
   1d492:	f84e bb04 	str.w	fp, [lr], #4
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d496:	4402      	add	r2, r0
   1d498:	e7e7      	b.n	1d46a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d49a:	429d      	cmp	r5, r3
   1d49c:	bfcc      	ite	gt
   1d49e:	2300      	movgt	r3, #0
   1d4a0:	2301      	movle	r3, #1
   1d4a2:	e791      	b.n	1d3c8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d4a4:	454e      	cmp	r6, r9
   1d4a6:	bfcc      	ite	gt
   1d4a8:	2300      	movgt	r3, #0
   1d4aa:	2301      	movle	r3, #1
   1d4ac:	e7a5      	b.n	1d3fa <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d4ae:	4557      	cmp	r7, sl
   1d4b0:	bfcc      	ite	gt
   1d4b2:	2300      	movgt	r3, #0
   1d4b4:	2301      	movle	r3, #1
   1d4b6:	e7b8      	b.n	1d42a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d4b8:	4563      	cmp	r3, ip
   1d4ba:	bfcc      	ite	gt
   1d4bc:	2200      	movgt	r2, #0
   1d4be:	2201      	movle	r2, #1
   1d4c0:	e7cd      	b.n	1d45e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d4c2:	428a      	cmp	r2, r1
   1d4c4:	bfcc      	ite	gt
   1d4c6:	f04f 0b00 	movgt.w	fp, #0
   1d4ca:	f04f 0b01 	movle.w	fp, #1
   1d4ce:	e7d7      	b.n	1d480 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d4d2:	4413      	add	r3, r2
   1d4d4:	4411      	add	r1, r2
   1d4d6:	e7bb      	b.n	1d450 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d4d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d4da:	441f      	add	r7, r3
   1d4dc:	e79e      	b.n	1d41c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d4e0:	441e      	add	r6, r3
   1d4e2:	e783      	b.n	1d3ec <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d4e6:	441d      	add	r5, r3
   1d4e8:	e766      	b.n	1d3b8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d4ea:	a819      	add	r0, sp, #100	; 0x64
   1d4ec:	f7f8 f9ee 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d4f0:	4620      	mov	r0, r4
   1d4f2:	f7f8 f9eb 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   1d4f6:	b035      	add	sp, #212	; 0xd4
   1d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d4fc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d500:	b0b5      	sub	sp, #212	; 0xd4
   1d502:	460e      	mov	r6, r1
   1d504:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   1d506:	4601      	mov	r1, r0
   1d508:	2254      	movs	r2, #84	; 0x54
   1d50a:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d50c:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d50e:	f001 f886 	bl	1e61e <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d512:	6833      	ldr	r3, [r6, #0]
   1d514:	2b05      	cmp	r3, #5
   1d516:	dd01      	ble.n	1d51c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d518:	f001 f86c 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d51c:	682b      	ldr	r3, [r5, #0]
   1d51e:	2b05      	cmp	r3, #5
   1d520:	dcfa      	bgt.n	1d518 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d522:	ac13      	add	r4, sp, #76	; 0x4c
   1d524:	4632      	mov	r2, r6
   1d526:	2301      	movs	r3, #1
   1d528:	2105      	movs	r1, #5
   1d52a:	4620      	mov	r0, r4
   1d52c:	f7f8 fa6e 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d530:	2301      	movs	r3, #1
   1d532:	462a      	mov	r2, r5
   1d534:	2105      	movs	r1, #5
   1d536:	a819      	add	r0, sp, #100	; 0x64
   1d538:	f7f8 fa68 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d53c:	2105      	movs	r1, #5
   1d53e:	a81f      	add	r0, sp, #124	; 0x7c
   1d540:	f7ff fdc2 	bl	1d0c8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d544:	2200      	movs	r2, #0
   1d546:	4621      	mov	r1, r4
   1d548:	a81f      	add	r0, sp, #124	; 0x7c
   1d54a:	f7ff fe13 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d54e:	2200      	movs	r2, #0
   1d550:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d552:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d554:	4621      	mov	r1, r4
   1d556:	a81f      	add	r0, sp, #124	; 0x7c
   1d558:	f7ff fe31 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d55c:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d55e:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d560:	4621      	mov	r1, r4
   1d562:	a81f      	add	r0, sp, #124	; 0x7c
   1d564:	f7ff fe06 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d568:	2201      	movs	r2, #1
   1d56a:	4603      	mov	r3, r0
   1d56c:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d56e:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d570:	a81f      	add	r0, sp, #124	; 0x7c
   1d572:	f7ff fe24 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d576:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d578:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d57a:	4621      	mov	r1, r4
   1d57c:	a81f      	add	r0, sp, #124	; 0x7c
   1d57e:	f7ff fdf9 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d582:	2202      	movs	r2, #2
   1d584:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d586:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d588:	4621      	mov	r1, r4
   1d58a:	a81f      	add	r0, sp, #124	; 0x7c
   1d58c:	f7ff fe17 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d590:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d592:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d594:	4621      	mov	r1, r4
   1d596:	a81f      	add	r0, sp, #124	; 0x7c
   1d598:	f7ff fdec 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d59c:	2203      	movs	r2, #3
   1d59e:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d5a0:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d5a2:	4621      	mov	r1, r4
   1d5a4:	a81f      	add	r0, sp, #124	; 0x7c
   1d5a6:	f7ff fe0a 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d5aa:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d5ac:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d5ae:	4621      	mov	r1, r4
   1d5b0:	a81f      	add	r0, sp, #124	; 0x7c
   1d5b2:	f7ff fddf 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d5b6:	2204      	movs	r2, #4
   1d5b8:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d5ba:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d5bc:	4621      	mov	r1, r4
   1d5be:	a81f      	add	r0, sp, #124	; 0x7c
   1d5c0:	f7ff fdfd 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5c4:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d5c6:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5c8:	4620      	mov	r0, r4
   1d5ca:	f7f8 f98a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d5ce:	fb06 f300 	mul.w	r3, r6, r0
   1d5d2:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d5d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d5d6:	9300      	str	r3, [sp, #0]
   1d5d8:	4343      	muls	r3, r0
   1d5da:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d5dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d5de:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d5e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d5e2:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d5e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d5e6:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d5e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d5ea:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d5ec:	4345      	muls	r5, r0
   1d5ee:	9b00      	ldr	r3, [sp, #0]
   1d5f0:	2b00      	cmp	r3, #0
   1d5f2:	9b08      	ldr	r3, [sp, #32]
   1d5f4:	dd6a      	ble.n	1d6cc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   1d5f6:	429d      	cmp	r5, r3
   1d5f8:	bfb4      	ite	lt
   1d5fa:	2300      	movlt	r3, #0
   1d5fc:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d5fe:	2b00      	cmp	r3, #0
   1d600:	f040 808c 	bne.w	1d71c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d604:	2102      	movs	r1, #2
   1d606:	4620      	mov	r0, r4
   1d608:	f7f8 f96b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d60e:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d612:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d614:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d618:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d61a:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d61c:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d620:	930f      	str	r3, [sp, #60]	; 0x3c
   1d622:	9b01      	ldr	r3, [sp, #4]
   1d624:	2b00      	cmp	r3, #0
   1d626:	dd56      	ble.n	1d6d6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   1d628:	454e      	cmp	r6, r9
   1d62a:	bfb4      	ite	lt
   1d62c:	2300      	movlt	r3, #0
   1d62e:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d630:	2b00      	cmp	r3, #0
   1d632:	d170      	bne.n	1d716 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d634:	2103      	movs	r1, #3
   1d636:	4620      	mov	r0, r4
   1d638:	f7f8 f953 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d63c:	9b05      	ldr	r3, [sp, #20]
   1d63e:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d642:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d646:	9b02      	ldr	r3, [sp, #8]
   1d648:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d64a:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d64c:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d650:	9310      	str	r3, [sp, #64]	; 0x40
   1d652:	9b02      	ldr	r3, [sp, #8]
   1d654:	2b00      	cmp	r3, #0
   1d656:	dd43      	ble.n	1d6e0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   1d658:	4557      	cmp	r7, sl
   1d65a:	bfb4      	ite	lt
   1d65c:	2300      	movlt	r3, #0
   1d65e:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d660:	2b00      	cmp	r3, #0
   1d662:	d155      	bne.n	1d710 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d664:	2104      	movs	r1, #4
   1d666:	4620      	mov	r0, r4
   1d668:	f7f8 f93b 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d66c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d66e:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d670:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d674:	9a03      	ldr	r2, [sp, #12]
   1d676:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d678:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d67a:	9209      	str	r2, [sp, #36]	; 0x24
   1d67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d67e:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d680:	fb00 fc0c 	mul.w	ip, r0, ip
   1d684:	18d1      	adds	r1, r2, r3
   1d686:	9a03      	ldr	r2, [sp, #12]
   1d688:	2a00      	cmp	r2, #0
   1d68a:	dd2e      	ble.n	1d6ea <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   1d68c:	4563      	cmp	r3, ip
   1d68e:	bfb4      	ite	lt
   1d690:	2200      	movlt	r2, #0
   1d692:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d694:	2a00      	cmp	r2, #0
   1d696:	d138      	bne.n	1d70a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   1d698:	9a07      	ldr	r2, [sp, #28]
   1d69a:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d69e:	441a      	add	r2, r3
   1d6a0:	9804      	ldr	r0, [sp, #16]
   1d6a2:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d6a6:	2800      	cmp	r0, #0
   1d6a8:	dd24      	ble.n	1d6f4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   1d6aa:	428a      	cmp	r2, r1
   1d6ac:	bfb4      	ite	lt
   1d6ae:	f04f 0b00 	movlt.w	fp, #0
   1d6b2:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d6b6:	f1bb 0f00 	cmp.w	fp, #0
   1d6ba:	d122      	bne.n	1d702 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   1d6bc:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d6be:	f810 b002 	ldrb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d6c2:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d6c4:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d6c8:	4402      	add	r2, r0
   1d6ca:	e7e9      	b.n	1d6a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d6cc:	429d      	cmp	r5, r3
   1d6ce:	bfcc      	ite	gt
   1d6d0:	2300      	movgt	r3, #0
   1d6d2:	2301      	movle	r3, #1
   1d6d4:	e793      	b.n	1d5fe <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d6d6:	454e      	cmp	r6, r9
   1d6d8:	bfcc      	ite	gt
   1d6da:	2300      	movgt	r3, #0
   1d6dc:	2301      	movle	r3, #1
   1d6de:	e7a7      	b.n	1d630 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d6e0:	4557      	cmp	r7, sl
   1d6e2:	bfcc      	ite	gt
   1d6e4:	2300      	movgt	r3, #0
   1d6e6:	2301      	movle	r3, #1
   1d6e8:	e7ba      	b.n	1d660 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d6ea:	4563      	cmp	r3, ip
   1d6ec:	bfcc      	ite	gt
   1d6ee:	2200      	movgt	r2, #0
   1d6f0:	2201      	movle	r2, #1
   1d6f2:	e7cf      	b.n	1d694 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d6f4:	428a      	cmp	r2, r1
   1d6f6:	bfcc      	ite	gt
   1d6f8:	f04f 0b00 	movgt.w	fp, #0
   1d6fc:	f04f 0b01 	movle.w	fp, #1
   1d700:	e7d9      	b.n	1d6b6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d702:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d704:	4413      	add	r3, r2
   1d706:	4411      	add	r1, r2
   1d708:	e7bd      	b.n	1d686 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d70a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d70c:	441f      	add	r7, r3
   1d70e:	e7a0      	b.n	1d652 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d712:	441e      	add	r6, r3
   1d714:	e785      	b.n	1d622 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d718:	441d      	add	r5, r3
   1d71a:	e768      	b.n	1d5ee <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d71c:	a819      	add	r0, sp, #100	; 0x64
   1d71e:	f7f8 f8d5 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d722:	4620      	mov	r0, r4
   1d724:	f7f8 f8d2 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1d728:	b035      	add	sp, #212	; 0xd4
   1d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d72e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d72e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d732:	b0b5      	sub	sp, #212	; 0xd4
   1d734:	460e      	mov	r6, r1
   1d736:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   1d738:	4601      	mov	r1, r0
   1d73a:	2254      	movs	r2, #84	; 0x54
   1d73c:	a81f      	add	r0, sp, #124	; 0x7c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   1d73e:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   1d740:	f000 ff6d 	bl	1e61e <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   1d744:	6833      	ldr	r3, [r6, #0]
   1d746:	2b05      	cmp	r3, #5
   1d748:	dd01      	ble.n	1d74e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   1d74a:	f000 ff53 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   1d74e:	682b      	ldr	r3, [r5, #0]
   1d750:	2b05      	cmp	r3, #5
   1d752:	dcfa      	bgt.n	1d74a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d754:	ac13      	add	r4, sp, #76	; 0x4c
   1d756:	4632      	mov	r2, r6
   1d758:	2301      	movs	r3, #1
   1d75a:	2105      	movs	r1, #5
   1d75c:	4620      	mov	r0, r4
   1d75e:	f7f8 f955 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d762:	2301      	movs	r3, #1
   1d764:	462a      	mov	r2, r5
   1d766:	2105      	movs	r1, #5
   1d768:	a819      	add	r0, sp, #100	; 0x64
   1d76a:	f7f8 f94f 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   1d76e:	2105      	movs	r1, #5
   1d770:	a81f      	add	r0, sp, #124	; 0x7c
   1d772:	f7ff fca9 	bl	1d0c8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d776:	2200      	movs	r2, #0
   1d778:	4621      	mov	r1, r4
   1d77a:	a81f      	add	r0, sp, #124	; 0x7c
   1d77c:	f7ff fcfa 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d780:	2200      	movs	r2, #0
   1d782:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   1d784:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d786:	4621      	mov	r1, r4
   1d788:	a81f      	add	r0, sp, #124	; 0x7c
   1d78a:	f7ff fd18 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d78e:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   1d790:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d792:	4621      	mov	r1, r4
   1d794:	a81f      	add	r0, sp, #124	; 0x7c
   1d796:	f7ff fced 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d79a:	2201      	movs	r2, #1
   1d79c:	4603      	mov	r3, r0
   1d79e:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   1d7a0:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d7a2:	a81f      	add	r0, sp, #124	; 0x7c
   1d7a4:	f7ff fd0b 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d7a8:	2202      	movs	r2, #2
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   1d7aa:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d7ac:	4621      	mov	r1, r4
   1d7ae:	a81f      	add	r0, sp, #124	; 0x7c
   1d7b0:	f7ff fce0 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d7b4:	2202      	movs	r2, #2
   1d7b6:	4603      	mov	r3, r0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   1d7b8:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d7ba:	4621      	mov	r1, r4
   1d7bc:	a81f      	add	r0, sp, #124	; 0x7c
   1d7be:	f7ff fcfe 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7c2:	2203      	movs	r2, #3
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   1d7c4:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7c6:	4621      	mov	r1, r4
   1d7c8:	a81f      	add	r0, sp, #124	; 0x7c
   1d7ca:	f7ff fcd3 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7ce:	2203      	movs	r2, #3
   1d7d0:	4603      	mov	r3, r0
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   1d7d2:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7d4:	4621      	mov	r1, r4
   1d7d6:	a81f      	add	r0, sp, #124	; 0x7c
   1d7d8:	f7ff fcf1 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7dc:	2204      	movs	r2, #4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   1d7de:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7e0:	4621      	mov	r1, r4
   1d7e2:	a81f      	add	r0, sp, #124	; 0x7c
   1d7e4:	f7ff fcc6 	bl	1d174 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7e8:	2204      	movs	r2, #4
   1d7ea:	4603      	mov	r3, r0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   1d7ec:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7ee:	4621      	mov	r1, r4
   1d7f0:	a81f      	add	r0, sp, #124	; 0x7c
   1d7f2:	f7ff fce4 	bl	1d1be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d7f6:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   1d7f8:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d7fa:	4620      	mov	r0, r4
   1d7fc:	f7f8 f871 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   1d800:	fb06 f300 	mul.w	r3, r6, r0
   1d804:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   1d806:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1d808:	9300      	str	r3, [sp, #0]
   1d80a:	4343      	muls	r3, r0
   1d80c:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d80e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1d810:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1d814:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d816:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1d818:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d81a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1d81c:	9304      	str	r3, [sp, #16]
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d81e:	4345      	muls	r5, r0
   1d820:	9b00      	ldr	r3, [sp, #0]
   1d822:	2b00      	cmp	r3, #0
   1d824:	9b08      	ldr	r3, [sp, #32]
   1d826:	dd6a      	ble.n	1d8fe <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   1d828:	429d      	cmp	r5, r3
   1d82a:	bfb4      	ite	lt
   1d82c:	2300      	movlt	r3, #0
   1d82e:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   1d830:	2b00      	cmp	r3, #0
   1d832:	f040 808c 	bne.w	1d94e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d836:	2102      	movs	r1, #2
   1d838:	4620      	mov	r0, r4
   1d83a:	f7f8 f852 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d840:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d844:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d846:	eb08 0605 	add.w	r6, r8, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d84a:	4343      	muls	r3, r0
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d84c:	4346      	muls	r6, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   1d84e:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   1d852:	930f      	str	r3, [sp, #60]	; 0x3c
   1d854:	9b01      	ldr	r3, [sp, #4]
   1d856:	2b00      	cmp	r3, #0
   1d858:	dd56      	ble.n	1d908 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   1d85a:	454e      	cmp	r6, r9
   1d85c:	bfb4      	ite	lt
   1d85e:	2300      	movlt	r3, #0
   1d860:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   1d862:	2b00      	cmp	r3, #0
   1d864:	d170      	bne.n	1d948 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d866:	2103      	movs	r1, #3
   1d868:	4620      	mov	r0, r4
   1d86a:	f7f8 f83a 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
   1d86e:	9b05      	ldr	r3, [sp, #20]
   1d870:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d874:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d878:	9b02      	ldr	r3, [sp, #8]
   1d87a:	4343      	muls	r3, r0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d87c:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   1d87e:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   1d882:	9310      	str	r3, [sp, #64]	; 0x40
   1d884:	9b02      	ldr	r3, [sp, #8]
   1d886:	2b00      	cmp	r3, #0
   1d888:	dd43      	ble.n	1d912 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   1d88a:	4557      	cmp	r7, sl
   1d88c:	bfb4      	ite	lt
   1d88e:	2300      	movlt	r3, #0
   1d890:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   1d892:	2b00      	cmp	r3, #0
   1d894:	d155      	bne.n	1d942 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d896:	2104      	movs	r1, #4
   1d898:	4620      	mov	r0, r4
   1d89a:	f7f8 f822 	bl	158e2 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d89e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d8a0:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d8a2:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d8a6:	9a03      	ldr	r2, [sp, #12]
   1d8a8:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d8aa:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   1d8ac:	9209      	str	r2, [sp, #36]	; 0x24
   1d8ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d8b0:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   1d8b2:	fb00 fc0c 	mul.w	ip, r0, ip
   1d8b6:	18d1      	adds	r1, r2, r3
   1d8b8:	9a03      	ldr	r2, [sp, #12]
   1d8ba:	2a00      	cmp	r2, #0
   1d8bc:	dd2e      	ble.n	1d91c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   1d8be:	4563      	cmp	r3, ip
   1d8c0:	bfb4      	ite	lt
   1d8c2:	2200      	movlt	r2, #0
   1d8c4:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   1d8c6:	2a00      	cmp	r2, #0
   1d8c8:	d138      	bne.n	1d93c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   1d8ca:	9a07      	ldr	r2, [sp, #28]
   1d8cc:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1d8d0:	441a      	add	r2, r3
   1d8d2:	9804      	ldr	r0, [sp, #16]
   1d8d4:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   1d8d8:	2800      	cmp	r0, #0
   1d8da:	dd24      	ble.n	1d926 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   1d8dc:	428a      	cmp	r2, r1
   1d8de:	bfb4      	ite	lt
   1d8e0:	f04f 0b00 	movlt.w	fp, #0
   1d8e4:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   1d8e8:	f1bb 0f00 	cmp.w	fp, #0
   1d8ec:	d122      	bne.n	1d934 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   1d8ee:	9811      	ldr	r0, [sp, #68]	; 0x44
   1d8f0:	f910 b002 	ldrsb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d8f4:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   1d8f6:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   1d8fa:	4402      	add	r2, r0
   1d8fc:	e7e9      	b.n	1d8d2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   1d8fe:	429d      	cmp	r5, r3
   1d900:	bfcc      	ite	gt
   1d902:	2300      	movgt	r3, #0
   1d904:	2301      	movle	r3, #1
   1d906:	e793      	b.n	1d830 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   1d908:	454e      	cmp	r6, r9
   1d90a:	bfcc      	ite	gt
   1d90c:	2300      	movgt	r3, #0
   1d90e:	2301      	movle	r3, #1
   1d910:	e7a7      	b.n	1d862 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   1d912:	4557      	cmp	r7, sl
   1d914:	bfcc      	ite	gt
   1d916:	2300      	movgt	r3, #0
   1d918:	2301      	movle	r3, #1
   1d91a:	e7ba      	b.n	1d892 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   1d91c:	4563      	cmp	r3, ip
   1d91e:	bfcc      	ite	gt
   1d920:	2200      	movgt	r2, #0
   1d922:	2201      	movle	r2, #1
   1d924:	e7cf      	b.n	1d8c6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   1d926:	428a      	cmp	r2, r1
   1d928:	bfcc      	ite	gt
   1d92a:	f04f 0b00 	movgt.w	fp, #0
   1d92e:	f04f 0b01 	movle.w	fp, #1
   1d932:	e7d9      	b.n	1d8e8 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   1d934:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d936:	4413      	add	r3, r2
   1d938:	4411      	add	r1, r2
   1d93a:	e7bd      	b.n	1d8b8 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   1d93c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d93e:	441f      	add	r7, r3
   1d940:	e7a0      	b.n	1d884 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   1d942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d944:	441e      	add	r6, r3
   1d946:	e785      	b.n	1d854 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   1d948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d94a:	441d      	add	r5, r3
   1d94c:	e768      	b.n	1d820 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   1d94e:	a819      	add	r0, sp, #100	; 0x64
   1d950:	f7f7 ffbc 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d954:	4620      	mov	r0, r4
   1d956:	f7f7 ffb9 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1d95a:	b035      	add	sp, #212	; 0xd4
   1d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d960 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                const RuntimeShape& output_shape, uint8* output_data) {
   1d960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d964:	4604      	mov	r4, r0
   1d966:	4690      	mov	r8, r2
   1d968:	4608      	mov	r0, r1
   1d96a:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d96c:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   1d970:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   1d972:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1d976:	dd01      	ble.n	1d97c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   1d978:	f000 fe3c 	bl	1e5f4 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d97c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d97e:	f7f8 f894 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   1d982:	6862      	ldr	r2, [r4, #4]
   1d984:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1d988:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   1d98a:	dbf5      	blt.n	1d978 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   1d98c:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   1d98e:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   1d990:	dcf2      	bgt.n	1d978 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   1d992:	33ff      	adds	r3, #255	; 0xff
   1d994:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   1d998:	d8ee      	bhi.n	1d978 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   1d99a:	2700      	movs	r7, #0
   1d99c:	45b9      	cmp	r9, r7
   1d99e:	dd29      	ble.n	1d9f4 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x94>
    const int32 input2_val = params.input2_offset + input2_data[i];
   1d9a0:	f816 a007 	ldrb.w	sl, [r6, r7]
   1d9a4:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   1d9a6:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1d9a8:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   1d9aa:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   1d9ac:	f818 3007 	ldrb.w	r3, [r8, r7]
   1d9b0:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1d9b2:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9b6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   1d9ba:	fa03 f000 	lsl.w	r0, r3, r0
   1d9be:	f7e9 fbf3 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9c2:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9c6:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9c8:	4650      	mov	r0, sl
   1d9ca:	f7e9 fbed 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1d9ce:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1d9d2:	ebab 0000 	sub.w	r0, fp, r0
   1d9d6:	f7e9 fbe7 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1d9da:	68e3      	ldr	r3, [r4, #12]
   1d9dc:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   1d9de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d9e0:	4283      	cmp	r3, r0
   1d9e2:	bfb8      	it	lt
   1d9e4:	4603      	movlt	r3, r0
   1d9e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1d9e8:	4283      	cmp	r3, r0
   1d9ea:	bfa8      	it	ge
   1d9ec:	4603      	movge	r3, r0
   1d9ee:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   1d9f0:	3701      	adds	r7, #1
   1d9f2:	e7d3      	b.n	1d99c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
}
   1d9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d9f8 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                const RuntimeShape& output_shape, int8_t* output_data) {
   1d9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9fc:	4604      	mov	r4, r0
   1d9fe:	4690      	mov	r8, r2
   1da00:	4608      	mov	r0, r1
   1da02:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1da04:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   1da08:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   1da0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1da0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1da0e:	dd01      	ble.n	1da14 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   1da10:	f000 fdf0 	bl	1e5f4 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1da14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1da16:	f7f8 f848 	bl	15aaa <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   1da1a:	6862      	ldr	r2, [r4, #4]
   1da1c:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1da20:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   1da22:	dbf5      	blt.n	1da10 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   1da24:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   1da26:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   1da28:	dcf2      	bgt.n	1da10 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   1da2a:	337f      	adds	r3, #127	; 0x7f
   1da2c:	2bfe      	cmp	r3, #254	; 0xfe
   1da2e:	d8ef      	bhi.n	1da10 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   1da30:	2700      	movs	r7, #0
   1da32:	45b9      	cmp	r9, r7
   1da34:	dd29      	ble.n	1da8a <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   1da36:	f916 a007 	ldrsb.w	sl, [r6, r7]
   1da3a:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   1da3c:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1da3e:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   1da40:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   1da42:	f918 3007 	ldrsb.w	r3, [r8, r7]
   1da46:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1da48:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da4c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   1da50:	fa03 f000 	lsl.w	r0, r3, r0
   1da54:	f7e9 fba8 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da58:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da5c:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da5e:	4650      	mov	r0, sl
   1da60:	f7e9 fba2 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1da64:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1da68:	ebab 0000 	sub.w	r0, fp, r0
   1da6c:	f7e9 fb9c 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1da70:	68e3      	ldr	r3, [r4, #12]
   1da72:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   1da74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1da76:	4283      	cmp	r3, r0
   1da78:	bfb8      	it	lt
   1da7a:	4603      	movlt	r3, r0
   1da7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1da7e:	4283      	cmp	r3, r0
   1da80:	bfa8      	it	ge
   1da82:	4603      	movge	r3, r0
   1da84:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   1da86:	3701      	adds	r7, #1
   1da88:	e7d3      	b.n	1da32 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
}
   1da8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001da8e <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   1da8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da92:	4605      	mov	r5, r0
   1da94:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1da96:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   1da98:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1da9a:	f7fc fcee 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1da9e:	686b      	ldr	r3, [r5, #4]
   1daa0:	681b      	ldr	r3, [r3, #0]
   1daa2:	f913 8000 	ldrsb.w	r8, [r3, r0]
    const int32_t input1_val =
   1daa6:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1daa8:	6928      	ldr	r0, [r5, #16]
   1daaa:	4639      	mov	r1, r7
    const int32_t input1_val =
   1daac:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1daae:	f7fc fce4 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1dab2:	68ea      	ldr	r2, [r5, #12]
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   1dab4:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1dab6:	6812      	ldr	r2, [r2, #0]
   1dab8:	5616      	ldrsb	r6, [r2, r0]
    const int32_t input2_val =
   1daba:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dabc:	fa08 f003 	lsl.w	r0, r8, r3
    const int32_t input2_val =
   1dac0:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dac2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   1dac6:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dac8:	f7e9 fb6e 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dacc:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dad0:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dad2:	4630      	mov	r0, r6
   1dad4:	f7e9 fb68 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1dad8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1dadc:	eba8 0000 	sub.w	r0, r8, r0
   1dae0:	f7e9 fb62 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1dae4:	68e3      	ldr	r3, [r4, #12]
   1dae6:	4418      	add	r0, r3
   1dae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1daea:	6b24      	ldr	r4, [r4, #48]	; 0x30
   1daec:	4298      	cmp	r0, r3
   1daee:	bfb8      	it	lt
   1daf0:	4618      	movlt	r0, r3
   1daf2:	4284      	cmp	r4, r0
   1daf4:	bfa8      	it	ge
   1daf6:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1daf8:	4639      	mov	r1, r7
   1dafa:	69a8      	ldr	r0, [r5, #24]
   1dafc:	f7fc fcbd 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db00:	696b      	ldr	r3, [r5, #20]
   1db02:	681b      	ldr	r3, [r3, #0]
   1db04:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   1db06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db0a <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   1db0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db0e:	4605      	mov	r5, r0
   1db10:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1db12:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   1db14:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   1db16:	f7fc fcb0 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db1a:	686b      	ldr	r3, [r5, #4]
   1db1c:	681b      	ldr	r3, [r3, #0]
   1db1e:	f813 8000 	ldrb.w	r8, [r3, r0]
    const int32 input1_val =
   1db22:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db24:	6928      	ldr	r0, [r5, #16]
   1db26:	4639      	mov	r1, r7
    const int32 input1_val =
   1db28:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db2a:	f7fc fca6 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db2e:	68ea      	ldr	r2, [r5, #12]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   1db30:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   1db32:	6812      	ldr	r2, [r2, #0]
   1db34:	5c16      	ldrb	r6, [r2, r0]
    const int32 input2_val =
   1db36:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db38:	fa08 f003 	lsl.w	r0, r8, r3
    const int32 input2_val =
   1db3c:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db3e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   1db42:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db44:	f7e9 fb30 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db48:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db4c:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db4e:	4630      	mov	r0, r6
   1db50:	f7e9 fb2a 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1db54:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1db58:	eba8 0000 	sub.w	r0, r8, r0
   1db5c:	f7e9 fb24 	bl	71a8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   1db60:	68e3      	ldr	r3, [r4, #12]
   1db62:	4418      	add	r0, r3
   1db64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1db66:	6b24      	ldr	r4, [r4, #48]	; 0x30
   1db68:	4298      	cmp	r0, r3
   1db6a:	bfb8      	it	lt
   1db6c:	4618      	movlt	r0, r3
   1db6e:	4284      	cmp	r4, r0
   1db70:	bfa8      	it	ge
   1db72:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1db74:	4639      	mov	r1, r7
   1db76:	69a8      	ldr	r0, [r5, #24]
   1db78:	f7fc fc7f 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1db7c:	696b      	ldr	r3, [r5, #20]
   1db7e:	681b      	ldr	r3, [r3, #0]
   1db80:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   1db82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db86 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db86:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db88:	b0ad      	sub	sp, #180	; 0xb4
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db8a:	ae18      	add	r6, sp, #96	; 0x60
   1db8c:	af0e      	add	r7, sp, #56	; 0x38
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db8e:	4604      	mov	r4, r0
   1db90:	9201      	str	r2, [sp, #4]
   1db92:	4608      	mov	r0, r1
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db94:	463a      	mov	r2, r7
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1db96:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1db98:	4633      	mov	r3, r6
   1db9a:	f7fc fc99 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1db9e:	ad22      	add	r5, sp, #136	; 0x88
   1dba0:	2301      	movs	r3, #1
   1dba2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   1dba4:	2105      	movs	r1, #5
   1dba6:	a807      	add	r0, sp, #28
   1dba8:	f7f7 ff30 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1dbac:	4629      	mov	r1, r5
   1dbae:	a807      	add	r0, sp, #28
   1dbb0:	f7fc fc78 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1dbb4:	a807      	add	r0, sp, #28
   1dbb6:	f7f7 fe89 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   1dbba:	ab01      	add	r3, sp, #4
   1dbbc:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1dbc0:	ab32      	add	r3, sp, #200	; 0xc8
   1dbc2:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
   1dbc6:	ab34      	add	r3, sp, #208	; 0xd0
   1dbc8:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
   1dbcc:	9407      	str	r4, [sp, #28]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbce:	2300      	movs	r3, #0
   1dbd0:	9302      	str	r3, [sp, #8]
   1dbd2:	9a02      	ldr	r2, [sp, #8]
   1dbd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dbd6:	429a      	cmp	r2, r3
   1dbd8:	da2b      	bge.n	1dc32 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xac>
   1dbda:	2300      	movs	r3, #0
   1dbdc:	9303      	str	r3, [sp, #12]
   1dbde:	9a03      	ldr	r2, [sp, #12]
   1dbe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1dbe2:	429a      	cmp	r2, r3
   1dbe4:	da22      	bge.n	1dc2c <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa6>
   1dbe6:	2300      	movs	r3, #0
   1dbe8:	9304      	str	r3, [sp, #16]
   1dbea:	9a04      	ldr	r2, [sp, #16]
   1dbec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dbee:	429a      	cmp	r2, r3
   1dbf0:	da19      	bge.n	1dc26 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa0>
   1dbf2:	2400      	movs	r4, #0
   1dbf4:	9405      	str	r4, [sp, #20]
   1dbf6:	9a05      	ldr	r2, [sp, #20]
   1dbf8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1dbfa:	429a      	cmp	r2, r3
   1dbfc:	da10      	bge.n	1dc20 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x9a>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dbfe:	9406      	str	r4, [sp, #24]
   1dc00:	9a06      	ldr	r2, [sp, #24]
   1dc02:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1dc04:	429a      	cmp	r2, r3
   1dc06:	da07      	bge.n	1dc18 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x92>
    calc(indexes);
   1dc08:	a902      	add	r1, sp, #8
   1dc0a:	a807      	add	r0, sp, #28
   1dc0c:	f7ff ff3f 	bl	1da8e <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dc10:	9b06      	ldr	r3, [sp, #24]
   1dc12:	3301      	adds	r3, #1
   1dc14:	9306      	str	r3, [sp, #24]
   1dc16:	e7f3      	b.n	1dc00 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x7a>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dc18:	9b05      	ldr	r3, [sp, #20]
   1dc1a:	3301      	adds	r3, #1
   1dc1c:	9305      	str	r3, [sp, #20]
   1dc1e:	e7ea      	b.n	1dbf6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x70>
   1dc20:	9b04      	ldr	r3, [sp, #16]
   1dc22:	3301      	adds	r3, #1
   1dc24:	e7e0      	b.n	1dbe8 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x62>
   1dc26:	9b03      	ldr	r3, [sp, #12]
   1dc28:	3301      	adds	r3, #1
   1dc2a:	e7d7      	b.n	1dbdc <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x56>
   1dc2c:	9b02      	ldr	r3, [sp, #8]
   1dc2e:	3301      	adds	r3, #1
   1dc30:	e7ce      	b.n	1dbd0 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x4a>
}
   1dc32:	b02d      	add	sp, #180	; 0xb4
   1dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dc36 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc36:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc38:	4604      	mov	r4, r0
   1dc3a:	4608      	mov	r0, r1
   1dc3c:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc3e:	6803      	ldr	r3, [r0, #0]
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc40:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc42:	2b05      	cmp	r3, #5
inline void BroadcastSubSlow(const ArithmeticParams& params,
   1dc44:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   1dc46:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1dc48:	dd01      	ble.n	1dc4e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x18>
   1dc4a:	f000 fcd3 	bl	1e5f4 <abort>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   1dc4e:	680b      	ldr	r3, [r1, #0]
   1dc50:	2b05      	cmp	r3, #5
   1dc52:	dcfa      	bgt.n	1dc4a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   1dc54:	682b      	ldr	r3, [r5, #0]
   1dc56:	2b05      	cmp	r3, #5
   1dc58:	dcf7      	bgt.n	1dc4a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1dc5a:	ae18      	add	r6, sp, #96	; 0x60
   1dc5c:	af0e      	add	r7, sp, #56	; 0x38
   1dc5e:	4633      	mov	r3, r6
   1dc60:	463a      	mov	r2, r7
   1dc62:	f7fc fc35 	bl	1a4d0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   1dc66:	2301      	movs	r3, #1
   1dc68:	462a      	mov	r2, r5
   1dc6a:	2105      	movs	r1, #5
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1dc6c:	ad22      	add	r5, sp, #136	; 0x88
   1dc6e:	a807      	add	r0, sp, #28
   1dc70:	f7f7 fecc 	bl	15a0c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1dc74:	4629      	mov	r1, r5
   1dc76:	a807      	add	r0, sp, #28
   1dc78:	f7fc fc14 	bl	1a4a4 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1dc7c:	a807      	add	r0, sp, #28
   1dc7e:	f7f7 fe25 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   1dc82:	ab01      	add	r3, sp, #4
   1dc84:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1dc88:	ab32      	add	r3, sp, #200	; 0xc8
   1dc8a:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
   1dc8e:	ab34      	add	r3, sp, #208	; 0xd0
   1dc90:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
   1dc94:	9407      	str	r4, [sp, #28]
   1dc96:	2300      	movs	r3, #0
   1dc98:	9302      	str	r3, [sp, #8]
   1dc9a:	9a02      	ldr	r2, [sp, #8]
   1dc9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dc9e:	429a      	cmp	r2, r3
   1dca0:	da2b      	bge.n	1dcfa <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xc4>
   1dca2:	2300      	movs	r3, #0
   1dca4:	9303      	str	r3, [sp, #12]
   1dca6:	9a03      	ldr	r2, [sp, #12]
   1dca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1dcaa:	429a      	cmp	r2, r3
   1dcac:	da22      	bge.n	1dcf4 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xbe>
   1dcae:	2300      	movs	r3, #0
   1dcb0:	9304      	str	r3, [sp, #16]
   1dcb2:	9a04      	ldr	r2, [sp, #16]
   1dcb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dcb6:	429a      	cmp	r2, r3
   1dcb8:	da19      	bge.n	1dcee <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb8>
   1dcba:	2400      	movs	r4, #0
   1dcbc:	9405      	str	r4, [sp, #20]
   1dcbe:	9a05      	ldr	r2, [sp, #20]
   1dcc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1dcc2:	429a      	cmp	r2, r3
   1dcc4:	da10      	bge.n	1dce8 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb2>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dcc6:	9406      	str	r4, [sp, #24]
   1dcc8:	9a06      	ldr	r2, [sp, #24]
   1dcca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1dccc:	429a      	cmp	r2, r3
   1dcce:	da07      	bge.n	1dce0 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xaa>
    calc(indexes);
   1dcd0:	a902      	add	r1, sp, #8
   1dcd2:	a807      	add	r0, sp, #28
   1dcd4:	f7ff ff19 	bl	1db0a <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dcd8:	9b06      	ldr	r3, [sp, #24]
   1dcda:	3301      	adds	r3, #1
   1dcdc:	9306      	str	r3, [sp, #24]
   1dcde:	e7f3      	b.n	1dcc8 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x92>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1dce0:	9b05      	ldr	r3, [sp, #20]
   1dce2:	3301      	adds	r3, #1
   1dce4:	9305      	str	r3, [sp, #20]
   1dce6:	e7ea      	b.n	1dcbe <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x88>
   1dce8:	9b04      	ldr	r3, [sp, #16]
   1dcea:	3301      	adds	r3, #1
   1dcec:	e7e0      	b.n	1dcb0 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x7a>
   1dcee:	9b03      	ldr	r3, [sp, #12]
   1dcf0:	3301      	adds	r3, #1
   1dcf2:	e7d7      	b.n	1dca4 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x6e>
   1dcf4:	9b02      	ldr	r3, [sp, #8]
   1dcf6:	3301      	adds	r3, #1
   1dcf8:	e7ce      	b.n	1dc98 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x62>
}
   1dcfa:	b02d      	add	sp, #180	; 0xb4
   1dcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dcfe <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dcfe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd00:	b0ab      	sub	sp, #172	; 0xac
   1dd02:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   1dd04:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dd06:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   1dd08:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1dd0a:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   1dd0c:	6943      	ldr	r3, [r0, #20]
   1dd0e:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   1dd10:	6843      	ldr	r3, [r0, #4]
   1dd12:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   1dd14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1dd16:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   1dd18:	6983      	ldr	r3, [r0, #24]
   1dd1a:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   1dd1c:	6883      	ldr	r3, [r0, #8]
   1dd1e:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   1dd20:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1dd22:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   1dd24:	69c3      	ldr	r3, [r0, #28]
   1dd26:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   1dd28:	6a03      	ldr	r3, [r0, #32]
   1dd2a:	931b      	str	r3, [sp, #108]	; 0x6c
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dd2c:	4614      	mov	r4, r2
  params->quantized_activation_min = min;
   1dd2e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd32:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   1dd34:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   1dd38:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd3a:	f7f7 fe0c 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd3e:	4621      	mov	r1, r4
   1dd40:	a80a      	add	r0, sp, #40	; 0x28
   1dd42:	f7f7 fe08 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1dd46:	a90a      	add	r1, sp, #40	; 0x28
   1dd48:	aa16      	add	r2, sp, #88	; 0x58
   1dd4a:	a810      	add	r0, sp, #64	; 0x40
   1dd4c:	f7f7 ff7a 	bl	15c44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1dd50:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1dd52:	a80a      	add	r0, sp, #40	; 0x28
   1dd54:	f7f7 fdba 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1dd58:	a810      	add	r0, sp, #64	; 0x40
   1dd5a:	f7f7 fdb7 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   1dd5e:	7833      	ldrb	r3, [r6, #0]
   1dd60:	2b09      	cmp	r3, #9
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   1dd62:	4629      	mov	r1, r5
   1dd64:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   1dd66:	d13e      	bne.n	1dde6 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   1dd68:	b31f      	cbz	r7, 1ddb2 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   1dd6a:	f7f7 fdf4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd6e:	b105      	cbz	r5, 1dd72 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   1dd70:	686d      	ldr	r5, [r5, #4]
   1dd72:	4621      	mov	r1, r4
   1dd74:	a80a      	add	r0, sp, #40	; 0x28
   1dd76:	f7f7 fdee 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd7a:	b104      	cbz	r4, 1dd7e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   1dd7c:	6864      	ldr	r4, [r4, #4]
   1dd7e:	4631      	mov	r1, r6
   1dd80:	a804      	add	r0, sp, #16
   1dd82:	f7f7 fde8 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dd86:	6873      	ldr	r3, [r6, #4]
   1dd88:	9302      	str	r3, [sp, #8]
   1dd8a:	ab04      	add	r3, sp, #16
   1dd8c:	e9cd 4300 	strd	r4, r3, [sp]
   1dd90:	462a      	mov	r2, r5
   1dd92:	ab0a      	add	r3, sp, #40	; 0x28
   1dd94:	a910      	add	r1, sp, #64	; 0x40
   1dd96:	a816      	add	r0, sp, #88	; 0x58
   1dd98:	f7ff fef5 	bl	1db86 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   1dd9c:	a804      	add	r0, sp, #16
   1dd9e:	f7f7 fd95 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1dda2:	a80a      	add	r0, sp, #40	; 0x28
   1dda4:	f7f7 fd92 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
   1dda8:	a810      	add	r0, sp, #64	; 0x40
   1ddaa:	f7f7 fd8f 	bl	158cc <_ZN6tflite12RuntimeShapeD1Ev>
}
   1ddae:	b02b      	add	sp, #172	; 0xac
   1ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_SUB(tflite::reference_ops::Sub, int8_t);
   1ddb2:	f7f7 fdd0 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddb6:	b105      	cbz	r5, 1ddba <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   1ddb8:	686d      	ldr	r5, [r5, #4]
   1ddba:	4621      	mov	r1, r4
   1ddbc:	a80a      	add	r0, sp, #40	; 0x28
   1ddbe:	f7f7 fdca 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddc2:	b104      	cbz	r4, 1ddc6 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   1ddc4:	6864      	ldr	r4, [r4, #4]
   1ddc6:	4631      	mov	r1, r6
   1ddc8:	a804      	add	r0, sp, #16
   1ddca:	f7f7 fdc4 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddce:	6873      	ldr	r3, [r6, #4]
   1ddd0:	9302      	str	r3, [sp, #8]
   1ddd2:	ab04      	add	r3, sp, #16
   1ddd4:	e9cd 4300 	strd	r4, r3, [sp]
   1ddd8:	462a      	mov	r2, r5
   1ddda:	ab0a      	add	r3, sp, #40	; 0x28
   1dddc:	a910      	add	r1, sp, #64	; 0x40
   1ddde:	a816      	add	r0, sp, #88	; 0x58
   1dde0:	f7ff fe0a 	bl	1d9f8 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   1dde4:	e7da      	b.n	1dd9c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   1dde6:	b1cf      	cbz	r7, 1de1c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, uint8_t);
   1dde8:	f7f7 fdb5 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddec:	b105      	cbz	r5, 1ddf0 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   1ddee:	686d      	ldr	r5, [r5, #4]
   1ddf0:	4621      	mov	r1, r4
   1ddf2:	a80a      	add	r0, sp, #40	; 0x28
   1ddf4:	f7f7 fdaf 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddf8:	b104      	cbz	r4, 1ddfc <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   1ddfa:	6864      	ldr	r4, [r4, #4]
   1ddfc:	4631      	mov	r1, r6
   1ddfe:	a804      	add	r0, sp, #16
   1de00:	f7f7 fda9 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de04:	6873      	ldr	r3, [r6, #4]
   1de06:	9302      	str	r3, [sp, #8]
   1de08:	ab04      	add	r3, sp, #16
   1de0a:	e9cd 4300 	strd	r4, r3, [sp]
   1de0e:	462a      	mov	r2, r5
   1de10:	ab0a      	add	r3, sp, #40	; 0x28
   1de12:	a910      	add	r1, sp, #64	; 0x40
   1de14:	a816      	add	r0, sp, #88	; 0x58
   1de16:	f7ff ff0e 	bl	1dc36 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>
   1de1a:	e7bf      	b.n	1dd9c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   1de1c:	f7f7 fd9b 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de20:	b105      	cbz	r5, 1de24 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   1de22:	686d      	ldr	r5, [r5, #4]
   1de24:	4621      	mov	r1, r4
   1de26:	a80a      	add	r0, sp, #40	; 0x28
   1de28:	f7f7 fd95 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de2c:	b104      	cbz	r4, 1de30 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   1de2e:	6864      	ldr	r4, [r4, #4]
   1de30:	4631      	mov	r1, r6
   1de32:	a804      	add	r0, sp, #16
   1de34:	f7f7 fd8f 	bl	15956 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de38:	6873      	ldr	r3, [r6, #4]
   1de3a:	9302      	str	r3, [sp, #8]
   1de3c:	ab04      	add	r3, sp, #16
   1de3e:	e9cd 4300 	strd	r4, r3, [sp]
   1de42:	462a      	mov	r2, r5
   1de44:	ab0a      	add	r3, sp, #40	; 0x28
   1de46:	a910      	add	r1, sp, #64	; 0x40
   1de48:	a816      	add	r0, sp, #88	; 0x58
   1de4a:	f7ff fd89 	bl	1d960 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   1de4e:	e7a5      	b.n	1dd9c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

0001de50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   1de50:	b508      	push	{r3, lr}
   1de52:	4618      	mov	r0, r3
   1de54:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1de56:	781a      	ldrb	r2, [r3, #0]
   1de58:	2a03      	cmp	r2, #3
   1de5a:	d001      	beq.n	1de60 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   1de5c:	2a09      	cmp	r2, #9
   1de5e:	d103      	bne.n	1de68 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   1de60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1de64:	f7ff ff4b 	bl	1dcfe <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   1de68:	2000      	movs	r0, #0
   1de6a:	bd08      	pop	{r3, pc}

0001de6c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1de6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de70:	2300      	movs	r3, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   1de72:	ed2d 8b02 	vpush	{d8}
   1de76:	4607      	mov	r7, r0
   1de78:	460d      	mov	r5, r1
   1de7a:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de7c:	60d3      	str	r3, [r2, #12]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de7e:	4698      	mov	r8, r3
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de80:	68e6      	ldr	r6, [r4, #12]
   1de82:	68fb      	ldr	r3, [r7, #12]
   1de84:	429e      	cmp	r6, r3
   1de86:	da42      	bge.n	1df0e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0xa2>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1de88:	f8c4 8010 	str.w	r8, [r4, #16]
   1de8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   1de90:	693b      	ldr	r3, [r7, #16]
   1de92:	4599      	cmp	r9, r3
   1de94:	da38      	bge.n	1df08 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x9c>
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1de96:	68e8      	ldr	r0, [r5, #12]
   1de98:	4621      	mov	r1, r4
   1de9a:	f7fc faee 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
                input2_data[SubscriptToIndex(desc2, indexes)],
   1de9e:	4621      	mov	r1, r4
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1dea0:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, indexes)],
   1dea2:	6968      	ldr	r0, [r5, #20]
   1dea4:	f7fc fae9 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1dea8:	6929      	ldr	r1, [r5, #16]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1deaa:	68aa      	ldr	r2, [r5, #8]
                input2_data[SubscriptToIndex(desc2, indexes)],
   1deac:	680b      	ldr	r3, [r1, #0]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1deae:	6812      	ldr	r2, [r2, #0]
                input2_data[SubscriptToIndex(desc2, indexes)],
   1deb0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
            input1_data[SubscriptToIndex(desc1, indexes)] -
   1deb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
        ActivationFunctionWithMinMax(
   1deb8:	edd2 7a00 	vldr	s15, [r2]
   1debc:	ed93 8a00 	vldr	s16, [r3]
  auto sub_func = [&](int indexes[N]) {
   1dec0:	f8d5 a018 	ldr.w	sl, [r5, #24]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1dec4:	6868      	ldr	r0, [r5, #4]
   1dec6:	4621      	mov	r1, r4
        ActivationFunctionWithMinMax(
   1dec8:	ee37 8ac8 	vsub.f32	s16, s15, s16
    output_data[SubscriptToIndex(output_desc, indexes)] =
   1decc:	f7fc fad5 	bl	1a47a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   1ded0:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
   1ded4:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
   1ded8:	682a      	ldr	r2, [r5, #0]
   1deda:	eef4 7ac8 	vcmpe.f32	s15, s16
   1dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1dee2:	bfb8      	it	lt
   1dee4:	eef0 7a48 	vmovlt.f32	s15, s16
   1dee8:	6813      	ldr	r3, [r2, #0]
   1deea:	eef4 7ac7 	vcmpe.f32	s15, s14
   1deee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1def2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1def6:	bf88      	it	hi
   1def8:	eef0 7a47 	vmovhi.f32	s15, s14
   1defc:	f109 0301 	add.w	r3, r9, #1
   1df00:	edc0 7a00 	vstr	s15, [r0]
   1df04:	6123      	str	r3, [r4, #16]
   1df06:	e7c1      	b.n	1de8c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x20>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1df08:	3601      	adds	r6, #1
   1df0a:	60e6      	str	r6, [r4, #12]
   1df0c:	e7b8      	b.n	1de80 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x14>
}
   1df0e:	ecbd 8b02 	vpop	{d8}
   1df12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001df16 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1df16:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1df18:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1df1a:	b90b      	cbnz	r3, 1df20 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj+0xa>
   1df1c:	f000 fb6a 	bl	1e5f4 <abort>
  void* data = nullptr;
   1df20:	2400      	movs	r4, #0
   1df22:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   1df24:	aa01      	add	r2, sp, #4
   1df26:	2118      	movs	r1, #24
   1df28:	4798      	blx	r3
   1df2a:	2801      	cmp	r0, #1
  return data;
   1df2c:	bf14      	ite	ne
   1df2e:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
   1df30:	4620      	moveq	r0, r4
}
   1df32:	b002      	add	sp, #8
   1df34:	bd10      	pop	{r4, pc}

0001df36 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>:
  return a ? BitNot(zero) : zero;
   1df36:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  static IntegerType eval(IntegerType x) {
   1df3a:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   1df3c:	da26      	bge.n	1df8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x56>
   1df3e:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1df42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df46:	f04f 0400 	mov.w	r4, #0
   1df4a:	bfc8      	it	gt
   1df4c:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1df4e:	17c7      	asrs	r7, r0, #31
   1df50:	0082      	lsls	r2, r0, #2
   1df52:	00bb      	lsls	r3, r7, #2
   1df54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1df58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1df5c:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1df60:	db18      	blt.n	1df94 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x5e>
             : wide_shifted > max ? max
   1df62:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1df66:	4296      	cmp	r6, r2
   1df68:	f04f 0700 	mov.w	r7, #0
   1df6c:	eb77 0003 	sbcs.w	r0, r7, r3
   1df70:	bfb8      	it	lt
   1df72:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1df76:	43e3      	mvns	r3, r4
  return a & b;
   1df78:	401a      	ands	r2, r3
   1df7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  return ~a;
   1df7e:	43c8      	mvns	r0, r1
  return a ^ b;
   1df80:	4062      	eors	r2, r4
  return a & b;
   1df82:	4002      	ands	r2, r0
   1df84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  }
   1df88:	4050      	eors	r0, r2
   1df8a:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   1df8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1df90:	2100      	movs	r1, #0
   1df92:	e7dc      	b.n	1df4e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x18>
             ? min
   1df94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1df98:	e7ed      	b.n	1df76 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x40>

0001df9a <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa>:
namespace reference_integer_ops {

inline void Tanh(int32_t input_zero_point, int32_t input_range_radius,
                 int32_t input_multiplier, int32_t input_shift,
                 int32_t input_size, const int8_t* input_data,
                 int8_t* output_data) {
   1df9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df9e:	b085      	sub	sp, #20
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  int right_shift = shift > 0 ? 0 : -shift;
   1dfa4:	f1c3 0900 	rsb	r9, r3, #0
   1dfa8:	4606      	mov	r6, r0
   1dfaa:	4688      	mov	r8, r1
   1dfac:	4692      	mov	sl, r2
   1dfae:	bfc8      	it	gt
   1dfb0:	f04f 0900 	movgt.w	r9, #0
  static constexpr int32_t kOutputScale = 7;
  static constexpr int32_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int32_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  using F4 = gemmlowp::FixedPoint<int32_t, kInputIntegerBits>;

  for (int i = 0; i < input_size; ++i) {
   1dfb4:	2400      	movs	r4, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1dfb6:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   1dfba:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   1dfbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dfc0:	429c      	cmp	r4, r3
   1dfc2:	da3f      	bge.n	1e044 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0xaa>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1dfc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dfc6:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   1dfc8:	1b80      	subs	r0, r0, r6
    if (input <= -input_range_radius) {
   1dfca:	4583      	cmp	fp, r0
   1dfcc:	db03      	blt.n	1dfd6 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x3c>
      output_data[i] = kMinInt8;
   1dfce:	2380      	movs	r3, #128	; 0x80
    } else if (input >= input_range_radius) {
      output_data[i] = kMaxInt8;
   1dfd0:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < input_size; ++i) {
   1dfd2:	3401      	adds	r4, #1
   1dfd4:	e7f3      	b.n	1dfbe <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x24>
    } else if (input >= input_range_radius) {
   1dfd6:	4540      	cmp	r0, r8
   1dfd8:	db01      	blt.n	1dfde <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x44>
      output_data[i] = kMaxInt8;
   1dfda:	237f      	movs	r3, #127	; 0x7f
   1dfdc:	e7f8      	b.n	1dfd0 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1dfde:	4651      	mov	r1, sl
   1dfe0:	40a8      	lsls	r0, r5
   1dfe2:	f7ed f9e7 	bl	b3b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1dfe6:	4649      	mov	r1, r9
   1dfe8:	f7ed fa12 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   1dfec:	2800      	cmp	r0, #0
   1dfee:	db25      	blt.n	1e03c <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0xa2>
   1dff0:	bf0c      	ite	eq
   1dff2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1dff6:	2300      	movne	r3, #0
   1dff8:	2200      	movs	r2, #0
  return ~a;
   1dffa:	43d1      	mvns	r1, r2
  return -a;
   1dffc:	f1c0 0c00 	rsb	ip, r0, #0
  return a & b;
   1e000:	ea0c 0c01 	and.w	ip, ip, r1
   1e004:	4010      	ands	r0, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   1e006:	ea8c 0000 	eor.w	r0, ip, r0
   1e00a:	9303      	str	r3, [sp, #12]
  return a & b;
   1e00c:	9102      	str	r1, [sp, #8]
   1e00e:	9201      	str	r2, [sp, #4]
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   1e010:	f7f0 f962 	bl	e2d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1e014:	f7f1 fcce 	bl	f9b4 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return a & b;
   1e018:	9902      	ldr	r1, [sp, #8]
   1e01a:	9a01      	ldr	r2, [sp, #4]
  return ~a;
   1e01c:	9b03      	ldr	r3, [sp, #12]
  return -a;
   1e01e:	f1c0 0c00 	rsb	ip, r0, #0
  return a & b;
   1e022:	ea0c 0202 	and.w	r2, ip, r2
   1e026:	4008      	ands	r0, r1
  return a ^ b;
   1e028:	4050      	eors	r0, r2
  return ~a;
   1e02a:	43db      	mvns	r3, r3
          gemmlowp::tanh(F4::FromRaw(input_in_q4)).raw();

      // Rescale and downcast.
      using gemmlowp::RoundingDivideByPOT;
      int32_t output_in_q24 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputScale);
   1e02c:	2118      	movs	r1, #24
   1e02e:	4018      	ands	r0, r3
   1e030:	f7ed f9ee 	bl	b410 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_in_q24 = std::min(std::max(output_in_q24, kMinInt8), kMaxInt8);
      output_data[i] = static_cast<int8_t>(output_in_q24);
   1e034:	f300 0007 	ssat	r0, #8, r0
   1e038:	5538      	strb	r0, [r7, r4]
   1e03a:	e7ca      	b.n	1dfd2 <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x38>
  return a ? BitNot(zero) : zero;
   1e03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e040:	2300      	movs	r3, #0
   1e042:	e7da      	b.n	1dffa <_ZN6tflite21reference_integer_ops4TanhEiiiiiPKaPa+0x60>
    }
  }
}
   1e044:	b005      	add	sp, #20
   1e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e04a <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   1e04a:	4770      	bx	lr

0001e04c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   1e04c:	6880      	ldr	r0, [r0, #8]
   1e04e:	4770      	bx	lr

0001e050 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   1e050:	b510      	push	{r4, lr}
   1e052:	4604      	mov	r4, r0
}
   1e054:	f000 faa8 	bl	1e5a8 <_ZdlPv>
   1e058:	4620      	mov	r0, r4
   1e05a:	bd10      	pop	{r4, pc}

0001e05c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   1e05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   1e05e:	4604      	mov	r4, r0
   1e060:	460b      	mov	r3, r1
   1e062:	2501      	movs	r5, #1
    any_swapped = false;
   1e064:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   1e066:	4295      	cmp	r5, r2
   1e068:	da12      	bge.n	1e090 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   1e06a:	e9d4 7c00 	ldrd	r7, ip, [r4]
   1e06e:	4567      	cmp	r7, ip
        values[i] = value_temp;
   1e070:	bfbc      	itt	lt
   1e072:	e9c4 c700 	strdlt	ip, r7, [r4]
        ids[i - 1] = ids[i];
   1e076:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    for (int i = 1; i < size; ++i) {
   1e07a:	f105 0501 	add.w	r5, r5, #1
        ids[i] = id_temp;
   1e07e:	bfb8      	it	lt
   1e080:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   1e084:	f104 0404 	add.w	r4, r4, #4
   1e088:	bfb8      	it	lt
   1e08a:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   1e08c:	3304      	adds	r3, #4
   1e08e:	e7ea      	b.n	1e066 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   1e090:	2e00      	cmp	r6, #0
   1e092:	d1e4      	bne.n	1e05e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   1e094:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e096 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   1e096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1e098:	9f08      	ldr	r7, [sp, #32]
   1e09a:	6804      	ldr	r4, [r0, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
   1e09c:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1e0a0:	9700      	str	r7, [sp, #0]
   1e0a2:	68a4      	ldr	r4, [r4, #8]
   1e0a4:	47a0      	blx	r4
   1e0a6:	b928      	cbnz	r0, 1e0b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
   1e0a8:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1e0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e0ae:	606b      	str	r3, [r5, #4]
}
   1e0b0:	b003      	add	sp, #12
   1e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
   1e0b4:	2001      	movs	r0, #1
   1e0b6:	e7fb      	b.n	1e0b0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

0001e0b8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   1e0b8:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   1e0ba:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   1e0bc:	68c1      	ldr	r1, [r0, #12]
   1e0be:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   1e0c2:	6888      	ldr	r0, [r1, #8]
   1e0c4:	4298      	cmp	r0, r3
   1e0c6:	dc05      	bgt.n	1e0d4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
   1e0c8:	68c8      	ldr	r0, [r1, #12]
   1e0ca:	4290      	cmp	r0, r2
   1e0cc:	bfb4      	ite	lt
   1e0ce:	2000      	movlt	r0, #0
   1e0d0:	2001      	movge	r0, #1
}
   1e0d2:	bd10      	pop	{r4, pc}
    return false;
   1e0d4:	2000      	movs	r0, #0
   1e0d6:	e7fc      	b.n	1e0d2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

0001e0d8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   1e0d8:	b570      	push	{r4, r5, r6, lr}
   1e0da:	4605      	mov	r5, r0
  if (start == nullptr) {
   1e0dc:	b989      	cbnz	r1, 1e102 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e0de:	6a04      	ldr	r4, [r0, #32]
   1e0e0:	69a9      	ldr	r1, [r5, #24]
   1e0e2:	200c      	movs	r0, #12
   1e0e4:	fb00 1404 	mla	r4, r0, r4, r1
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   1e0e8:	260c      	movs	r6, #12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   1e0ea:	4621      	mov	r1, r4
   1e0ec:	4628      	mov	r0, r5
   1e0ee:	f7ff ffe3 	bl	1e0b8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   1e0f2:	b950      	cbnz	r0, 1e10a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
   1e0f4:	68a4      	ldr	r4, [r4, #8]
   1e0f6:	1c61      	adds	r1, r4, #1
   1e0f8:	d009      	beq.n	1e10e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
   1e0fa:	69a9      	ldr	r1, [r5, #24]
   1e0fc:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   1e100:	e7f3      	b.n	1e0ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
   1e102:	688c      	ldr	r4, [r1, #8]
   1e104:	1c60      	adds	r0, r4, #1
   1e106:	d1eb      	bne.n	1e0e0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   1e108:	2400      	movs	r4, #0
}
   1e10a:	4620      	mov	r0, r4
   1e10c:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   1e10e:	4604      	mov	r4, r0
   1e110:	e7fb      	b.n	1e10a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

0001e112 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   1e112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1e116:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   1e11a:	b085      	sub	sp, #20
   1e11c:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1e11e:	2b00      	cmp	r3, #0
   1e120:	f000 80ae 	beq.w	1e280 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
   1e124:	6885      	ldr	r5, [r0, #8]
   1e126:	2d00      	cmp	r5, #0
   1e128:	f000 80aa 	beq.w	1e280 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
   1e12c:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
   1e130:	2300      	movs	r3, #0
   1e132:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  int idx_from_head = 0;
   1e136:	461a      	mov	r2, r3
  for (int i = 0; i < buffer_count_; ++i) {
   1e138:	f8d4 c008 	ldr.w	ip, [r4, #8]
   1e13c:	459c      	cmp	ip, r3
   1e13e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   1e142:	eb07 0082 	add.w	r0, r7, r2, lsl #2
   1e146:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   1e14a:	dd1e      	ble.n	1e18a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   1e14c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   1e150:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
   1e154:	0119      	lsls	r1, r3, #4
   1e156:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1e15a:	f85c c001 	ldr.w	ip, [ip, r1]
   1e15e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e160:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1e164:	d108      	bne.n	1e178 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
   1e166:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   1e168:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   1e16c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
   1e170:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   1e174:	3301      	adds	r3, #1
   1e176:	e7df      	b.n	1e138 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   1e178:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
   1e17c:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   1e180:	6840      	ldr	r0, [r0, #4]
   1e182:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
   1e186:	3201      	adds	r2, #1
   1e188:	e7f4      	b.n	1e174 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   1e18a:	ebac 0202 	sub.w	r2, ip, r2
   1e18e:	f7ff ff65 	bl	1e05c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e192:	69a6      	ldr	r6, [r4, #24]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e194:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1e198:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  next_free_entry_ = 1;
   1e19c:	2301      	movs	r3, #1
   1e19e:	2200      	movs	r2, #0
   1e1a0:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   1e1a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1a8:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
   1e1aa:	6963      	ldr	r3, [r4, #20]
   1e1ac:	9301      	str	r3, [sp, #4]
   1e1ae:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   1e1b0:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e1b2:	eb08 1103 	add.w	r1, r8, r3, lsl #4
  first_entry->offset = buffer_offsets_[buffer_id];
   1e1b6:	46b2      	mov	sl, r6
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1e1b8:	6849      	ldr	r1, [r1, #4]
   1e1ba:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
   1e1bc:	bf08      	it	eq
   1e1be:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
   1e1c2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   1e1c6:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
   1e1c8:	2701      	movs	r7, #1
   1e1ca:	68a3      	ldr	r3, [r4, #8]
   1e1cc:	42bb      	cmp	r3, r7
   1e1ce:	dd57      	ble.n	1e280 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
   1e1d0:	9b01      	ldr	r3, [sp, #4]
   1e1d2:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   1e1d6:	eb08 1309 	add.w	r3, r8, r9, lsl #4
   1e1da:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   1e1de:	685d      	ldr	r5, [r3, #4]
   1e1e0:	1c69      	adds	r1, r5, #1
   1e1e2:	d120      	bne.n	1e226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
    const int wanted_size = wanted_requirements->size;
   1e1e4:	f858 2002 	ldr.w	r2, [r8, r2]
   1e1e8:	9202      	str	r2, [sp, #8]
      ListEntry* prior_entry = nullptr;
   1e1ea:	2000      	movs	r0, #0
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   1e1ec:	689a      	ldr	r2, [r3, #8]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   1e1ee:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
   1e1f2:	4605      	mov	r5, r0
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   1e1f4:	4601      	mov	r1, r0
   1e1f6:	9003      	str	r0, [sp, #12]
   1e1f8:	ee17 3a90 	vmov	r3, s15
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	f7ff ff6b 	bl	1e0d8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
   1e202:	9903      	ldr	r1, [sp, #12]
   1e204:	b149      	cbz	r1, 1e21a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
   1e206:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
   1e208:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
   1e20a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
   1e20e:	f858 c00c 	ldr.w	ip, [r8, ip]
   1e212:	448c      	add	ip, r1
   1e214:	4565      	cmp	r5, ip
   1e216:	bfb8      	it	lt
   1e218:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
   1e21a:	b120      	cbz	r0, 1e226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
   1e21c:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
   1e21e:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
   1e220:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
   1e222:	428b      	cmp	r3, r1
   1e224:	dce6      	bgt.n	1e1f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    buffer_offsets_[buffer_id] = candidate_offset;
   1e226:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   1e22a:	69e3      	ldr	r3, [r4, #28]
   1e22c:	220c      	movs	r2, #12
   1e22e:	fb02 f103 	mul.w	r1, r2, r3
   1e232:	1872      	adds	r2, r6, r1
    new_entry->offset = candidate_offset;
   1e234:	5075      	str	r5, [r6, r1]
    ++next_free_entry_;
   1e236:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
   1e238:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
   1e23c:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   1e23e:	f8da 1000 	ldr.w	r1, [sl]
   1e242:	42a9      	cmp	r1, r5
   1e244:	dd05      	ble.n	1e252 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
   1e246:	6a21      	ldr	r1, [r4, #32]
   1e248:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
   1e24a:	4692      	mov	sl, r2
   1e24c:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
   1e24e:	3701      	adds	r7, #1
   1e250:	e7bb      	b.n	1e1ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
   1e252:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
   1e254:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
   1e256:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1e25a:	d104      	bne.n	1e266 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
   1e25c:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
   1e25e:	6090      	str	r0, [r2, #8]
          break;
   1e260:	e7f5      	b.n	1e24e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
   1e262:	4671      	mov	r1, lr
   1e264:	e7f6      	b.n	1e254 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   1e266:	f04f 0c0c 	mov.w	ip, #12
   1e26a:	fb0c fc00 	mul.w	ip, ip, r0
   1e26e:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
   1e272:	f856 c00c 	ldr.w	ip, [r6, ip]
   1e276:	45ac      	cmp	ip, r5
   1e278:	ddf3      	ble.n	1e262 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
   1e27a:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
   1e27c:	608b      	str	r3, [r1, #8]
          break;
   1e27e:	e7e6      	b.n	1e24e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
   1e280:	b005      	add	sp, #20
   1e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e286 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   1e286:	b570      	push	{r4, r5, r6, lr}
   1e288:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   1e28a:	f7ff ff42 	bl	1e112 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   1e28e:	68a0      	ldr	r0, [r4, #8]
   1e290:	b1a8      	cbz	r0, 1e2be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   1e292:	69a5      	ldr	r5, [r4, #24]
   1e294:	6a23      	ldr	r3, [r4, #32]
   1e296:	220c      	movs	r2, #12
   1e298:	fb02 5303 	mla	r3, r2, r3, r5
  size_t max_size = 0;
   1e29c:	2000      	movs	r0, #0
  while (entry) {
   1e29e:	b173      	cbz	r3, 1e2be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
   1e2a0:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
   1e2a2:	68e6      	ldr	r6, [r4, #12]
   1e2a4:	0109      	lsls	r1, r1, #4
   1e2a6:	5871      	ldr	r1, [r6, r1]
   1e2a8:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   1e2aa:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
   1e2ac:	4431      	add	r1, r6
   1e2ae:	4288      	cmp	r0, r1
   1e2b0:	bf38      	it	cc
   1e2b2:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
   1e2b4:	1c59      	adds	r1, r3, #1
   1e2b6:	d002      	beq.n	1e2be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   1e2b8:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   1e2bc:	e7ef      	b.n	1e29e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
   1e2be:	bd70      	pop	{r4, r5, r6, pc}

0001e2c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   1e2c0:	b40e      	push	{r1, r2, r3}
   1e2c2:	b503      	push	{r0, r1, lr}
   1e2c4:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   1e2c6:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
   1e2c8:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   1e2cc:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   1e2ce:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   1e2d0:	4798      	blx	r3
  va_end(args);
  return code;
}
   1e2d2:	b002      	add	sp, #8
   1e2d4:	f85d eb04 	ldr.w	lr, [sp], #4
   1e2d8:	b003      	add	sp, #12
   1e2da:	4770      	bx	lr

0001e2dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   1e2dc:	b40c      	push	{r2, r3}
   1e2de:	b507      	push	{r0, r1, r2, lr}
   1e2e0:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   1e2e2:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
   1e2e4:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   1e2e8:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   1e2ea:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   1e2ec:	4798      	blx	r3
  va_end(args);
  return code;
}
   1e2ee:	b003      	add	sp, #12
   1e2f0:	f85d eb04 	ldr.w	lr, [sp], #4
   1e2f4:	b002      	add	sp, #8
   1e2f6:	4770      	bx	lr

0001e2f8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   1e2f8:	b120      	cbz	r0, 1e304 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
   1e2fa:	2801      	cmp	r0, #1
   1e2fc:	bf14      	ite	ne
   1e2fe:	2000      	movne	r0, #0
   1e300:	2002      	moveq	r0, #2
   1e302:	4770      	bx	lr
      return kTfLitePaddingSame;
   1e304:	2001      	movs	r0, #1
}
   1e306:	4770      	bx	lr

0001e308 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   1e308:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   1e30a:	b908      	cbnz	r0, 1e310 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
   1e30c:	f000 f972 	bl	1e5f4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1e310:	2900      	cmp	r1, #0
   1e312:	d0fb      	beq.n	1e30c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
   1e314:	2a00      	cmp	r2, #0
   1e316:	d0f9      	beq.n	1e30c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
   1e318:	2b00      	cmp	r3, #0
   1e31a:	d0f7      	beq.n	1e30c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
   1e31c:	bd08      	pop	{r3, pc}

0001e31e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   1e31e:	6803      	ldr	r3, [r0, #0]
   1e320:	685b      	ldr	r3, [r3, #4]
   1e322:	4718      	bx	r3

0001e324 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   1e324:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   1e326:	210c      	movs	r1, #12
   1e328:	4604      	mov	r4, r0
   1e32a:	f7f7 f9ad 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e32e:	b110      	cbz	r0, 1e336 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   1e330:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e332:	5820      	ldr	r0, [r4, r0]
   1e334:	4418      	add	r0, r3
  }
   1e336:	bd10      	pop	{r4, pc}

0001e338 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
   1e338:	2000      	movs	r0, #0
   1e33a:	4770      	bx	lr

0001e33c <_ZN6tflite13ParseQuantizeEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   1e33c:	2000      	movs	r0, #0
   1e33e:	4770      	bx	lr

0001e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e340:	b538      	push	{r3, r4, r5, lr}
   1e342:	4605      	mov	r5, r0
   1e344:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e346:	f7f7 f99f 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e34a:	b100      	cbz	r0, 1e34e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   1e34c:	5c2c      	ldrb	r4, [r5, r0]
  }
   1e34e:	4620      	mov	r0, r4
   1e350:	bd38      	pop	{r3, r4, r5, pc}

0001e352 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
   1e352:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   1e354:	2200      	movs	r2, #0
   1e356:	210a      	movs	r1, #10
   1e358:	f7ff fff2 	bl	1e340 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   1e35c:	bd08      	pop	{r3, pc}

0001e35e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e35e:	b538      	push	{r3, r4, r5, lr}
   1e360:	4605      	mov	r5, r0
   1e362:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e364:	f7f7 f990 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e368:	b100      	cbz	r0, 1e36c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
   1e36a:	582c      	ldr	r4, [r5, r0]
  }
   1e36c:	4620      	mov	r0, r4
   1e36e:	bd38      	pop	{r3, r4, r5, pc}

0001e370 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e370:	b538      	push	{r3, r4, r5, lr}
   1e372:	4605      	mov	r5, r0
   1e374:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   1e376:	f7f7 f987 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e37a:	b100      	cbz	r0, 1e37e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   1e37c:	562c      	ldrsb	r4, [r5, r0]
  }
   1e37e:	4620      	mov	r0, r4
   1e380:	bd38      	pop	{r3, r4, r5, pc}

0001e382 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   1e382:	b510      	push	{r4, lr}
   1e384:	ed2d 8b02 	vpush	{d8}
   1e388:	4604      	mov	r4, r0
   1e38a:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
   1e38e:	f7f7 f97b 	bl	15688 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e392:	b110      	cbz	r0, 1e39a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
   1e394:	4420      	add	r0, r4
   1e396:	ed90 8a00 	vldr	s16, [r0]
  }
   1e39a:	eeb0 0a48 	vmov.f32	s0, s16
   1e39e:	ecbd 8b02 	vpop	{d8}
   1e3a2:	bd10      	pop	{r4, pc}

0001e3a4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
   1e3a4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   1e3a8:	b510      	push	{r4, lr}
  if (!tensor->is_variable) {
   1e3aa:	b163      	cbz	r3, 1e3c6 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x22>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   1e3ac:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   1e3ae:	6841      	ldr	r1, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   1e3b0:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
   1e3b2:	bf0c      	ite	eq
   1e3b4:	6902      	ldreq	r2, [r0, #16]
  int value = 0;
   1e3b6:	2200      	movne	r2, #0
  for (size_t i = 0; i < tensor->bytes; ++i) {
   1e3b8:	2300      	movs	r3, #0
   1e3ba:	6984      	ldr	r4, [r0, #24]
   1e3bc:	429c      	cmp	r4, r3
   1e3be:	d902      	bls.n	1e3c6 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x22>
    *raw_ptr = value;
   1e3c0:	54ca      	strb	r2, [r1, r3]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   1e3c2:	3301      	adds	r3, #1
   1e3c4:	e7f9      	b.n	1e3ba <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x16>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   1e3c6:	2000      	movs	r0, #0
   1e3c8:	bd10      	pop	{r4, pc}

0001e3ca <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   1e3ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3ce:	2401      	movs	r4, #1
                         int total_signed_bits) {
   1e3d0:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3d2:	fa04 f000 	lsl.w	r0, r4, r0
   1e3d6:	3801      	subs	r0, #1
                         int total_signed_bits) {
   1e3d8:	4688      	mov	r8, r1
   1e3da:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3dc:	f7e2 fc32 	bl	c44 <__aeabi_i2d>
   1e3e0:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e3e2:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3e6:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e3e8:	f1c0 0320 	rsb	r3, r0, #32
   1e3ec:	f1a0 0120 	sub.w	r1, r0, #32
   1e3f0:	fa24 f303 	lsr.w	r3, r4, r3
   1e3f4:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1e3f8:	fa04 f000 	lsl.w	r0, r4, r0
   1e3fc:	4319      	orrs	r1, r3
   1e3fe:	f7e2 fc5d 	bl	cbc <__aeabi_l2d>
   1e402:	4602      	mov	r2, r0
   1e404:	460b      	mov	r3, r1
   1e406:	4630      	mov	r0, r6
   1e408:	4639      	mov	r1, r7
   1e40a:	f7e2 fc85 	bl	d18 <__aeabi_dmul>
      (1ll << input_left_shift);
   1e40e:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   1e412:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   1e414:	f1a8 0120 	sub.w	r1, r8, #32
   1e418:	fa24 f303 	lsr.w	r3, r4, r3
   1e41c:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1e420:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1e422:	4319      	orrs	r1, r3
   1e424:	fa04 f008 	lsl.w	r0, r4, r8
   1e428:	f7e2 fc48 	bl	cbc <__aeabi_l2d>
   1e42c:	4602      	mov	r2, r0
   1e42e:	460b      	mov	r3, r1
  const double max_input_rescaled =
   1e430:	4630      	mov	r0, r6
   1e432:	4639      	mov	r1, r7
   1e434:	f7e2 fd9a 	bl	f6c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   1e438:	ec41 0b10 	vmov	d0, r0, r1
   1e43c:	f7e3 f87c 	bl	1538 <floor>
   1e440:	ec51 0b10 	vmov	r0, r1, d0
   1e444:	f7e2 ff02 	bl	124c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   1e448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e44c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1e44c:	edd0 7a00 	vldr	s15, [r0]
   1e450:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   1e454:	b510      	push	{r4, lr}
   1e456:	4604      	mov	r4, r0
   1e458:	ee17 0a90 	vmov	r0, s15
   1e45c:	f7e2 fc04 	bl	c68 <__aeabi_f2d>
   1e460:	ec41 0b10 	vmov	d0, r0, r1
   1e464:	f7f3 fd8e 	bl	11f84 <round>
   1e468:	ec51 0b10 	vmov	r0, r1, d0
   1e46c:	f7e2 ff16 	bl	129c <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1e470:	ee07 0a90 	vmov	s15, r0
   1e474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1e478:	6863      	ldr	r3, [r4, #4]
   1e47a:	ee17 0a90 	vmov	r0, s15
  };
   1e47e:	4418      	add	r0, r3
   1e480:	bd10      	pop	{r4, pc}

0001e482 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   1e482:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   1e484:	6889      	ldr	r1, [r1, #8]
   1e486:	6880      	ldr	r0, [r0, #8]
   1e488:	f7e2 f813 	bl	4b2 <TfLiteIntArrayEqual>
}
   1e48c:	3800      	subs	r0, #0
   1e48e:	bf18      	it	ne
   1e490:	2001      	movne	r0, #1
   1e492:	bd08      	pop	{r3, pc}

0001e494 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   1e494:	1e4b      	subs	r3, r1, #1
   1e496:	4403      	add	r3, r0
   1e498:	fbb3 f3f1 	udiv	r3, r3, r1
}
   1e49c:	fb01 f003 	mul.w	r0, r1, r3
   1e4a0:	4770      	bx	lr

0001e4a2 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   1e4a2:	fbb0 f0f1 	udiv	r0, r0, r1
}
   1e4a6:	4348      	muls	r0, r1
   1e4a8:	4770      	bx	lr

0001e4aa <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   1e4aa:	1e43      	subs	r3, r0, #1
   1e4ac:	440b      	add	r3, r1
   1e4ae:	fbb3 f3f1 	udiv	r3, r3, r1
}
   1e4b2:	fb01 f003 	mul.w	r0, r1, r3
   1e4b6:	4770      	bx	lr

0001e4b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   1e4b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e4bc:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
   1e4be:	6801      	ldr	r1, [r0, #0]
   1e4c0:	1a41      	subs	r1, r0, r1
   1e4c2:	4617      	mov	r7, r2
   1e4c4:	f8b1 c000 	ldrh.w	ip, [r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1e4c8:	f1bc 0f04 	cmp.w	ip, #4
   1e4cc:	461a      	mov	r2, r3
   1e4ce:	d92c      	bls.n	1e52a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x72>
   1e4d0:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
   1e4d2:	18c5      	adds	r5, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1e4d4:	b173      	cbz	r3, 1e4f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
   1e4d6:	58c4      	ldr	r4, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
   1e4d8:	192b      	adds	r3, r5, r4
   1e4da:	d00b      	beq.n	1e4f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
  uoffset_t Length() const { return size(); }
   1e4dc:	f855 8004 	ldr.w	r8, [r5, r4]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4e0:	2500      	movs	r5, #0
  int element_count = 1;
   1e4e2:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4e4:	4545      	cmp	r5, r8
   1e4e6:	d006      	beq.n	1e4f6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
   1e4e8:	f853 ef04 	ldr.w	lr, [r3, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4ec:	3501      	adds	r5, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
   1e4ee:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   1e4f2:	e7f7      	b.n	1e4e4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
  int element_count = 1;
   1e4f4:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1e4f6:	f1bc 0f06 	cmp.w	ip, #6
   1e4fa:	d917      	bls.n	1e52c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x74>
   1e4fc:	88cd      	ldrh	r5, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1e4fe:	b105      	cbz	r5, 1e502 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>
   1e500:	5745      	ldrsb	r5, [r0, r5]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   1e502:	9201      	str	r2, [sp, #4]
   1e504:	f10d 010f 	add.w	r1, sp, #15
   1e508:	b2e8      	uxtb	r0, r5
   1e50a:	f7f1 fe09 	bl	10120 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   1e50e:	b948      	cbnz	r0, 1e524 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
   1e510:	9a01      	ldr	r2, [sp, #4]
   1e512:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1e516:	4639      	mov	r1, r7
   1e518:	f7f3 fb46 	bl	11ba8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
   1e51c:	b910      	cbnz	r0, 1e524 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
   1e51e:	683b      	ldr	r3, [r7, #0]
   1e520:	435c      	muls	r4, r3
   1e522:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
}
   1e524:	b004      	add	sp, #16
   1e526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
   1e52a:	2401      	movs	r4, #1
   1e52c:	2500      	movs	r5, #0
   1e52e:	e7e8      	b.n	1e502 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>

0001e530 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
static const int32_t kAsymmetricInt32Max = INT32_MAX;
static const int kSymmetricInt32Scale = kAsymmetricInt32Max;

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
   1e530:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   1e532:	f850 4b04 	ldr.w	r4, [r0], #4
   1e536:	2200      	movs	r2, #0
  int result = 1;
   1e538:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   1e53a:	4294      	cmp	r4, r2
   1e53c:	dd04      	ble.n	1e548 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   1e53e:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   1e542:	3201      	adds	r2, #1
    result *= dims.data[i];
   1e544:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   1e546:	e7f8      	b.n	1e53a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   1e548:	4618      	mov	r0, r3
   1e54a:	bd10      	pop	{r4, pc}

0001e54c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
   1e54c:	b508      	push	{r3, lr}
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   1e54e:	ee80 0a20 	vdiv.f32	s0, s0, s1
   1e552:	ed2d 8b02 	vpush	{d8}
   1e556:	ee08 0a10 	vmov	s16, r0
   1e55a:	f7f3 fe35 	bl	121c8 <roundf>
  int32_t result = round(value / scale) + zero_point;
   1e55e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1e562:	ee38 8a00 	vadd.f32	s16, s16, s0
   1e566:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    result = kAsymmetricUInt8Min;
  }
  if (result > kAsymmetricUInt8Max) {
    result = kAsymmetricUInt8Max;
  }
  return result;
   1e56a:	ee18 3a10 	vmov	r3, s16
}
   1e56e:	ecbd 8b02 	vpop	{d8}
  return result;
   1e572:	f383 0008 	usat	r0, #8, r3
}
   1e576:	b2c0      	uxtb	r0, r0
   1e578:	bd08      	pop	{r3, pc}

0001e57a <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  }
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
   1e57a:	b508      	push	{r3, lr}
   1e57c:	ee80 0a20 	vdiv.f32	s0, s0, s1
   1e580:	ed2d 8b02 	vpush	{d8}
   1e584:	ee08 0a10 	vmov	s16, r0
   1e588:	f7f3 fe1e 	bl	121c8 <roundf>
  int32_t result = round(value / scale) + zero_point;
   1e58c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1e590:	ee38 8a00 	vadd.f32	s16, s16, s0
   1e594:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    result = kAsymmetricInt8Min;
  }
  if (result > kAsymmetricInt8Max) {
    result = kAsymmetricInt8Max;
  }
  return result;
   1e598:	ee18 3a10 	vmov	r3, s16
}
   1e59c:	ecbd 8b02 	vpop	{d8}
  return result;
   1e5a0:	f303 0007 	ssat	r0, #8, r3
}
   1e5a4:	b240      	sxtb	r0, r0
   1e5a6:	bd08      	pop	{r3, pc}

0001e5a8 <_ZdlPv>:
   1e5a8:	f7f5 b902 	b.w	137b0 <free>

0001e5ac <_ZdaPv>:
   1e5ac:	f7ff bffc 	b.w	1e5a8 <_ZdlPv>

0001e5b0 <__cxa_guard_acquire>:
   1e5b0:	6803      	ldr	r3, [r0, #0]
   1e5b2:	07db      	lsls	r3, r3, #31
   1e5b4:	d406      	bmi.n	1e5c4 <__cxa_guard_acquire+0x14>
   1e5b6:	7843      	ldrb	r3, [r0, #1]
   1e5b8:	b103      	cbz	r3, 1e5bc <__cxa_guard_acquire+0xc>
   1e5ba:	deff      	udf	#255	; 0xff
   1e5bc:	2301      	movs	r3, #1
   1e5be:	7043      	strb	r3, [r0, #1]
   1e5c0:	4618      	mov	r0, r3
   1e5c2:	4770      	bx	lr
   1e5c4:	2000      	movs	r0, #0
   1e5c6:	4770      	bx	lr

0001e5c8 <__cxa_guard_release>:
   1e5c8:	2301      	movs	r3, #1
   1e5ca:	6003      	str	r3, [r0, #0]
   1e5cc:	4770      	bx	lr

0001e5ce <_Znaj>:
   1e5ce:	f000 b800 	b.w	1e5d2 <_Znwj>

0001e5d2 <_Znwj>:
   1e5d2:	2801      	cmp	r0, #1
   1e5d4:	bf38      	it	cc
   1e5d6:	2001      	movcc	r0, #1
   1e5d8:	b510      	push	{r4, lr}
   1e5da:	4604      	mov	r4, r0
   1e5dc:	4620      	mov	r0, r4
   1e5de:	f7f5 f8df 	bl	137a0 <malloc>
   1e5e2:	b930      	cbnz	r0, 1e5f2 <_Znwj+0x20>
   1e5e4:	f7f3 fc90 	bl	11f08 <_ZSt15get_new_handlerv>
   1e5e8:	b908      	cbnz	r0, 1e5ee <_Znwj+0x1c>
   1e5ea:	f000 f803 	bl	1e5f4 <abort>
   1e5ee:	4780      	blx	r0
   1e5f0:	e7f4      	b.n	1e5dc <_Znwj+0xa>
   1e5f2:	bd10      	pop	{r4, pc}

0001e5f4 <abort>:
   1e5f4:	b508      	push	{r3, lr}
   1e5f6:	2006      	movs	r0, #6
   1e5f8:	f7f5 fbfa 	bl	13df0 <raise>
   1e5fc:	2001      	movs	r0, #1
   1e5fe:	f7e5 f8f5 	bl	37ec <_exit>

0001e602 <memcmp>:
   1e602:	b530      	push	{r4, r5, lr}
   1e604:	3901      	subs	r1, #1
   1e606:	2400      	movs	r4, #0
   1e608:	42a2      	cmp	r2, r4
   1e60a:	d101      	bne.n	1e610 <memcmp+0xe>
   1e60c:	2000      	movs	r0, #0
   1e60e:	e005      	b.n	1e61c <memcmp+0x1a>
   1e610:	5d03      	ldrb	r3, [r0, r4]
   1e612:	3401      	adds	r4, #1
   1e614:	5d0d      	ldrb	r5, [r1, r4]
   1e616:	42ab      	cmp	r3, r5
   1e618:	d0f6      	beq.n	1e608 <memcmp+0x6>
   1e61a:	1b58      	subs	r0, r3, r5
   1e61c:	bd30      	pop	{r4, r5, pc}

0001e61e <memcpy>:
   1e61e:	440a      	add	r2, r1
   1e620:	4291      	cmp	r1, r2
   1e622:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1e626:	d100      	bne.n	1e62a <memcpy+0xc>
   1e628:	4770      	bx	lr
   1e62a:	b510      	push	{r4, lr}
   1e62c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e630:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e634:	4291      	cmp	r1, r2
   1e636:	d1f9      	bne.n	1e62c <memcpy+0xe>
   1e638:	bd10      	pop	{r4, pc}

0001e63a <memset>:
   1e63a:	4402      	add	r2, r0
   1e63c:	4603      	mov	r3, r0
   1e63e:	4293      	cmp	r3, r2
   1e640:	d100      	bne.n	1e644 <memset+0xa>
   1e642:	4770      	bx	lr
   1e644:	f803 1b01 	strb.w	r1, [r3], #1
   1e648:	e7f9      	b.n	1e63e <memset+0x4>

0001e64a <__sfputc_r>:
   1e64a:	6893      	ldr	r3, [r2, #8]
   1e64c:	3b01      	subs	r3, #1
   1e64e:	2b00      	cmp	r3, #0
   1e650:	b410      	push	{r4}
   1e652:	6093      	str	r3, [r2, #8]
   1e654:	da08      	bge.n	1e668 <__sfputc_r+0x1e>
   1e656:	6994      	ldr	r4, [r2, #24]
   1e658:	42a3      	cmp	r3, r4
   1e65a:	db01      	blt.n	1e660 <__sfputc_r+0x16>
   1e65c:	290a      	cmp	r1, #10
   1e65e:	d103      	bne.n	1e668 <__sfputc_r+0x1e>
   1e660:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e664:	f7f5 bbde 	b.w	13e24 <__swbuf_r>
   1e668:	6813      	ldr	r3, [r2, #0]
   1e66a:	1c58      	adds	r0, r3, #1
   1e66c:	6010      	str	r0, [r2, #0]
   1e66e:	7019      	strb	r1, [r3, #0]
   1e670:	4608      	mov	r0, r1
   1e672:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e676:	4770      	bx	lr

0001e678 <__sfputs_r>:
   1e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e67a:	4606      	mov	r6, r0
   1e67c:	460f      	mov	r7, r1
   1e67e:	4614      	mov	r4, r2
   1e680:	18d5      	adds	r5, r2, r3
   1e682:	42ac      	cmp	r4, r5
   1e684:	d101      	bne.n	1e68a <__sfputs_r+0x12>
   1e686:	2000      	movs	r0, #0
   1e688:	e007      	b.n	1e69a <__sfputs_r+0x22>
   1e68a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1e68e:	463a      	mov	r2, r7
   1e690:	4630      	mov	r0, r6
   1e692:	f7ff ffda 	bl	1e64a <__sfputc_r>
   1e696:	1c43      	adds	r3, r0, #1
   1e698:	d1f3      	bne.n	1e682 <__sfputs_r+0xa>
   1e69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e69c <_printf_common>:
   1e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6a0:	4616      	mov	r6, r2
   1e6a2:	4699      	mov	r9, r3
   1e6a4:	688a      	ldr	r2, [r1, #8]
   1e6a6:	690b      	ldr	r3, [r1, #16]
   1e6a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1e6ac:	4293      	cmp	r3, r2
   1e6ae:	bfb8      	it	lt
   1e6b0:	4613      	movlt	r3, r2
   1e6b2:	6033      	str	r3, [r6, #0]
   1e6b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1e6b8:	4607      	mov	r7, r0
   1e6ba:	460c      	mov	r4, r1
   1e6bc:	b10a      	cbz	r2, 1e6c2 <_printf_common+0x26>
   1e6be:	3301      	adds	r3, #1
   1e6c0:	6033      	str	r3, [r6, #0]
   1e6c2:	6823      	ldr	r3, [r4, #0]
   1e6c4:	0699      	lsls	r1, r3, #26
   1e6c6:	bf42      	ittt	mi
   1e6c8:	6833      	ldrmi	r3, [r6, #0]
   1e6ca:	3302      	addmi	r3, #2
   1e6cc:	6033      	strmi	r3, [r6, #0]
   1e6ce:	6825      	ldr	r5, [r4, #0]
   1e6d0:	f015 0506 	ands.w	r5, r5, #6
   1e6d4:	d106      	bne.n	1e6e4 <_printf_common+0x48>
   1e6d6:	f104 0a19 	add.w	sl, r4, #25
   1e6da:	68e3      	ldr	r3, [r4, #12]
   1e6dc:	6832      	ldr	r2, [r6, #0]
   1e6de:	1a9b      	subs	r3, r3, r2
   1e6e0:	42ab      	cmp	r3, r5
   1e6e2:	dc26      	bgt.n	1e732 <_printf_common+0x96>
   1e6e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1e6e8:	1e13      	subs	r3, r2, #0
   1e6ea:	6822      	ldr	r2, [r4, #0]
   1e6ec:	bf18      	it	ne
   1e6ee:	2301      	movne	r3, #1
   1e6f0:	0692      	lsls	r2, r2, #26
   1e6f2:	d42b      	bmi.n	1e74c <_printf_common+0xb0>
   1e6f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1e6f8:	4649      	mov	r1, r9
   1e6fa:	4638      	mov	r0, r7
   1e6fc:	47c0      	blx	r8
   1e6fe:	3001      	adds	r0, #1
   1e700:	d01e      	beq.n	1e740 <_printf_common+0xa4>
   1e702:	6823      	ldr	r3, [r4, #0]
   1e704:	68e5      	ldr	r5, [r4, #12]
   1e706:	6832      	ldr	r2, [r6, #0]
   1e708:	f003 0306 	and.w	r3, r3, #6
   1e70c:	2b04      	cmp	r3, #4
   1e70e:	bf08      	it	eq
   1e710:	1aad      	subeq	r5, r5, r2
   1e712:	68a3      	ldr	r3, [r4, #8]
   1e714:	6922      	ldr	r2, [r4, #16]
   1e716:	bf0c      	ite	eq
   1e718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1e71c:	2500      	movne	r5, #0
   1e71e:	4293      	cmp	r3, r2
   1e720:	bfc4      	itt	gt
   1e722:	1a9b      	subgt	r3, r3, r2
   1e724:	18ed      	addgt	r5, r5, r3
   1e726:	2600      	movs	r6, #0
   1e728:	341a      	adds	r4, #26
   1e72a:	42b5      	cmp	r5, r6
   1e72c:	d11a      	bne.n	1e764 <_printf_common+0xc8>
   1e72e:	2000      	movs	r0, #0
   1e730:	e008      	b.n	1e744 <_printf_common+0xa8>
   1e732:	2301      	movs	r3, #1
   1e734:	4652      	mov	r2, sl
   1e736:	4649      	mov	r1, r9
   1e738:	4638      	mov	r0, r7
   1e73a:	47c0      	blx	r8
   1e73c:	3001      	adds	r0, #1
   1e73e:	d103      	bne.n	1e748 <_printf_common+0xac>
   1e740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e748:	3501      	adds	r5, #1
   1e74a:	e7c6      	b.n	1e6da <_printf_common+0x3e>
   1e74c:	18e1      	adds	r1, r4, r3
   1e74e:	1c5a      	adds	r2, r3, #1
   1e750:	2030      	movs	r0, #48	; 0x30
   1e752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1e756:	4422      	add	r2, r4
   1e758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1e75c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1e760:	3302      	adds	r3, #2
   1e762:	e7c7      	b.n	1e6f4 <_printf_common+0x58>
   1e764:	2301      	movs	r3, #1
   1e766:	4622      	mov	r2, r4
   1e768:	4649      	mov	r1, r9
   1e76a:	4638      	mov	r0, r7
   1e76c:	47c0      	blx	r8
   1e76e:	3001      	adds	r0, #1
   1e770:	d0e6      	beq.n	1e740 <_printf_common+0xa4>
   1e772:	3601      	adds	r6, #1
   1e774:	e7d9      	b.n	1e72a <_printf_common+0x8e>

0001e776 <_raise_r>:
   1e776:	291f      	cmp	r1, #31
   1e778:	b538      	push	{r3, r4, r5, lr}
   1e77a:	4604      	mov	r4, r0
   1e77c:	460d      	mov	r5, r1
   1e77e:	d904      	bls.n	1e78a <_raise_r+0x14>
   1e780:	2316      	movs	r3, #22
   1e782:	6003      	str	r3, [r0, #0]
   1e784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e788:	bd38      	pop	{r3, r4, r5, pc}
   1e78a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1e78c:	b112      	cbz	r2, 1e794 <_raise_r+0x1e>
   1e78e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e792:	b94b      	cbnz	r3, 1e7a8 <_raise_r+0x32>
   1e794:	4620      	mov	r0, r4
   1e796:	f000 f816 	bl	1e7c6 <_getpid_r>
   1e79a:	462a      	mov	r2, r5
   1e79c:	4601      	mov	r1, r0
   1e79e:	4620      	mov	r0, r4
   1e7a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e7a4:	f7f5 bb2c 	b.w	13e00 <_kill_r>
   1e7a8:	2b01      	cmp	r3, #1
   1e7aa:	d00a      	beq.n	1e7c2 <_raise_r+0x4c>
   1e7ac:	1c59      	adds	r1, r3, #1
   1e7ae:	d103      	bne.n	1e7b8 <_raise_r+0x42>
   1e7b0:	2316      	movs	r3, #22
   1e7b2:	6003      	str	r3, [r0, #0]
   1e7b4:	2001      	movs	r0, #1
   1e7b6:	e7e7      	b.n	1e788 <_raise_r+0x12>
   1e7b8:	2400      	movs	r4, #0
   1e7ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1e7be:	4628      	mov	r0, r5
   1e7c0:	4798      	blx	r3
   1e7c2:	2000      	movs	r0, #0
   1e7c4:	e7e0      	b.n	1e788 <_raise_r+0x12>

0001e7c6 <_getpid_r>:
   1e7c6:	f7f6 bb9d 	b.w	14f04 <_getpid>

0001e7ca <strcpy>:
   1e7ca:	4603      	mov	r3, r0
   1e7cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e7d0:	f803 2b01 	strb.w	r2, [r3], #1
   1e7d4:	2a00      	cmp	r2, #0
   1e7d6:	d1f9      	bne.n	1e7cc <strcpy+0x2>
   1e7d8:	4770      	bx	lr

0001e7da <strncmp>:
   1e7da:	b510      	push	{r4, lr}
   1e7dc:	b16a      	cbz	r2, 1e7fa <strncmp+0x20>
   1e7de:	3901      	subs	r1, #1
   1e7e0:	1884      	adds	r4, r0, r2
   1e7e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e7e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e7ea:	4293      	cmp	r3, r2
   1e7ec:	d103      	bne.n	1e7f6 <strncmp+0x1c>
   1e7ee:	42a0      	cmp	r0, r4
   1e7f0:	d001      	beq.n	1e7f6 <strncmp+0x1c>
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	d1f5      	bne.n	1e7e2 <strncmp+0x8>
   1e7f6:	1a98      	subs	r0, r3, r2
   1e7f8:	bd10      	pop	{r4, pc}
   1e7fa:	4610      	mov	r0, r2
   1e7fc:	e7fc      	b.n	1e7f8 <strncmp+0x1e>

0001e7fe <strncpy>:
   1e7fe:	b510      	push	{r4, lr}
   1e800:	3901      	subs	r1, #1
   1e802:	4603      	mov	r3, r0
   1e804:	b132      	cbz	r2, 1e814 <strncpy+0x16>
   1e806:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e80a:	f803 4b01 	strb.w	r4, [r3], #1
   1e80e:	3a01      	subs	r2, #1
   1e810:	2c00      	cmp	r4, #0
   1e812:	d1f7      	bne.n	1e804 <strncpy+0x6>
   1e814:	441a      	add	r2, r3
   1e816:	2100      	movs	r1, #0
   1e818:	4293      	cmp	r3, r2
   1e81a:	d100      	bne.n	1e81e <strncpy+0x20>
   1e81c:	bd10      	pop	{r4, pc}
   1e81e:	f803 1b01 	strb.w	r1, [r3], #1
   1e822:	e7f9      	b.n	1e818 <strncpy+0x1a>

0001e824 <__sfmoreglue>:
   1e824:	b570      	push	{r4, r5, r6, lr}
   1e826:	1e4a      	subs	r2, r1, #1
   1e828:	2568      	movs	r5, #104	; 0x68
   1e82a:	4355      	muls	r5, r2
   1e82c:	460e      	mov	r6, r1
   1e82e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1e832:	f7f5 f815 	bl	13860 <_malloc_r>
   1e836:	4604      	mov	r4, r0
   1e838:	b140      	cbz	r0, 1e84c <__sfmoreglue+0x28>
   1e83a:	2100      	movs	r1, #0
   1e83c:	e9c0 1600 	strd	r1, r6, [r0]
   1e840:	300c      	adds	r0, #12
   1e842:	60a0      	str	r0, [r4, #8]
   1e844:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1e848:	f7ff fef7 	bl	1e63a <memset>
   1e84c:	4620      	mov	r0, r4
   1e84e:	bd70      	pop	{r4, r5, r6, pc}

0001e850 <_fwalk_reent>:
   1e850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e854:	4606      	mov	r6, r0
   1e856:	4688      	mov	r8, r1
   1e858:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1e85c:	2700      	movs	r7, #0
   1e85e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1e862:	f1b9 0901 	subs.w	r9, r9, #1
   1e866:	d505      	bpl.n	1e874 <_fwalk_reent+0x24>
   1e868:	6824      	ldr	r4, [r4, #0]
   1e86a:	2c00      	cmp	r4, #0
   1e86c:	d1f7      	bne.n	1e85e <_fwalk_reent+0xe>
   1e86e:	4638      	mov	r0, r7
   1e870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e874:	89ab      	ldrh	r3, [r5, #12]
   1e876:	2b01      	cmp	r3, #1
   1e878:	d907      	bls.n	1e88a <_fwalk_reent+0x3a>
   1e87a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1e87e:	3301      	adds	r3, #1
   1e880:	d003      	beq.n	1e88a <_fwalk_reent+0x3a>
   1e882:	4629      	mov	r1, r5
   1e884:	4630      	mov	r0, r6
   1e886:	47c0      	blx	r8
   1e888:	4307      	orrs	r7, r0
   1e88a:	3568      	adds	r5, #104	; 0x68
   1e88c:	e7e9      	b.n	1e862 <_fwalk_reent+0x12>

0001e88e <__retarget_lock_init_recursive>:
   1e88e:	4770      	bx	lr

0001e890 <__retarget_lock_acquire_recursive>:
   1e890:	4770      	bx	lr

0001e892 <__retarget_lock_release_recursive>:
   1e892:	4770      	bx	lr

0001e894 <__swhatbuf_r>:
   1e894:	b570      	push	{r4, r5, r6, lr}
   1e896:	460e      	mov	r6, r1
   1e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e89c:	2900      	cmp	r1, #0
   1e89e:	b096      	sub	sp, #88	; 0x58
   1e8a0:	4614      	mov	r4, r2
   1e8a2:	461d      	mov	r5, r3
   1e8a4:	da07      	bge.n	1e8b6 <__swhatbuf_r+0x22>
   1e8a6:	2300      	movs	r3, #0
   1e8a8:	602b      	str	r3, [r5, #0]
   1e8aa:	89b3      	ldrh	r3, [r6, #12]
   1e8ac:	061a      	lsls	r2, r3, #24
   1e8ae:	d410      	bmi.n	1e8d2 <__swhatbuf_r+0x3e>
   1e8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e8b4:	e00e      	b.n	1e8d4 <__swhatbuf_r+0x40>
   1e8b6:	466a      	mov	r2, sp
   1e8b8:	f7f5 fd64 	bl	14384 <_fstat_r>
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	dbf2      	blt.n	1e8a6 <__swhatbuf_r+0x12>
   1e8c0:	9a01      	ldr	r2, [sp, #4]
   1e8c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1e8c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1e8ca:	425a      	negs	r2, r3
   1e8cc:	415a      	adcs	r2, r3
   1e8ce:	602a      	str	r2, [r5, #0]
   1e8d0:	e7ee      	b.n	1e8b0 <__swhatbuf_r+0x1c>
   1e8d2:	2340      	movs	r3, #64	; 0x40
   1e8d4:	2000      	movs	r0, #0
   1e8d6:	6023      	str	r3, [r4, #0]
   1e8d8:	b016      	add	sp, #88	; 0x58
   1e8da:	bd70      	pop	{r4, r5, r6, pc}

0001e8dc <_realloc_r>:
   1e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8de:	4607      	mov	r7, r0
   1e8e0:	4614      	mov	r4, r2
   1e8e2:	460e      	mov	r6, r1
   1e8e4:	b921      	cbnz	r1, 1e8f0 <_realloc_r+0x14>
   1e8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e8ea:	4611      	mov	r1, r2
   1e8ec:	f7f4 bfb8 	b.w	13860 <_malloc_r>
   1e8f0:	b922      	cbnz	r2, 1e8fc <_realloc_r+0x20>
   1e8f2:	f7f4 ff65 	bl	137c0 <_free_r>
   1e8f6:	4625      	mov	r5, r4
   1e8f8:	4628      	mov	r0, r5
   1e8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8fc:	f000 f857 	bl	1e9ae <_malloc_usable_size_r>
   1e900:	42a0      	cmp	r0, r4
   1e902:	d20f      	bcs.n	1e924 <_realloc_r+0x48>
   1e904:	4621      	mov	r1, r4
   1e906:	4638      	mov	r0, r7
   1e908:	f7f4 ffaa 	bl	13860 <_malloc_r>
   1e90c:	4605      	mov	r5, r0
   1e90e:	2800      	cmp	r0, #0
   1e910:	d0f2      	beq.n	1e8f8 <_realloc_r+0x1c>
   1e912:	4631      	mov	r1, r6
   1e914:	4622      	mov	r2, r4
   1e916:	f7ff fe82 	bl	1e61e <memcpy>
   1e91a:	4631      	mov	r1, r6
   1e91c:	4638      	mov	r0, r7
   1e91e:	f7f4 ff4f 	bl	137c0 <_free_r>
   1e922:	e7e9      	b.n	1e8f8 <_realloc_r+0x1c>
   1e924:	4635      	mov	r5, r6
   1e926:	e7e7      	b.n	1e8f8 <_realloc_r+0x1c>

0001e928 <__sread>:
   1e928:	b510      	push	{r4, lr}
   1e92a:	460c      	mov	r4, r1
   1e92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e930:	f7f5 fd5c 	bl	143ec <_read_r>
   1e934:	2800      	cmp	r0, #0
   1e936:	bfab      	itete	ge
   1e938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1e93a:	89a3      	ldrhlt	r3, [r4, #12]
   1e93c:	181b      	addge	r3, r3, r0
   1e93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1e942:	bfac      	ite	ge
   1e944:	6563      	strge	r3, [r4, #84]	; 0x54
   1e946:	81a3      	strhlt	r3, [r4, #12]
   1e948:	bd10      	pop	{r4, pc}

0001e94a <__swrite>:
   1e94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e94e:	461f      	mov	r7, r3
   1e950:	898b      	ldrh	r3, [r1, #12]
   1e952:	05db      	lsls	r3, r3, #23
   1e954:	4605      	mov	r5, r0
   1e956:	460c      	mov	r4, r1
   1e958:	4616      	mov	r6, r2
   1e95a:	d505      	bpl.n	1e968 <__swrite+0x1e>
   1e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e960:	2302      	movs	r3, #2
   1e962:	2200      	movs	r2, #0
   1e964:	f7f5 fd30 	bl	143c8 <_lseek_r>
   1e968:	89a3      	ldrh	r3, [r4, #12]
   1e96a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1e96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1e972:	81a3      	strh	r3, [r4, #12]
   1e974:	4632      	mov	r2, r6
   1e976:	463b      	mov	r3, r7
   1e978:	4628      	mov	r0, r5
   1e97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e97e:	f7f5 bcdf 	b.w	14340 <_write_r>

0001e982 <__sseek>:
   1e982:	b510      	push	{r4, lr}
   1e984:	460c      	mov	r4, r1
   1e986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e98a:	f7f5 fd1d 	bl	143c8 <_lseek_r>
   1e98e:	1c43      	adds	r3, r0, #1
   1e990:	89a3      	ldrh	r3, [r4, #12]
   1e992:	bf15      	itete	ne
   1e994:	6560      	strne	r0, [r4, #84]	; 0x54
   1e996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1e99a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1e99e:	81a3      	strheq	r3, [r4, #12]
   1e9a0:	bf18      	it	ne
   1e9a2:	81a3      	strhne	r3, [r4, #12]
   1e9a4:	bd10      	pop	{r4, pc}

0001e9a6 <__sclose>:
   1e9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1e9aa:	f7f5 bcdb 	b.w	14364 <_close_r>

0001e9ae <_malloc_usable_size_r>:
   1e9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e9b2:	1f18      	subs	r0, r3, #4
   1e9b4:	2b00      	cmp	r3, #0
   1e9b6:	bfbc      	itt	lt
   1e9b8:	580b      	ldrlt	r3, [r1, r0]
   1e9ba:	18c0      	addlt	r0, r0, r3
   1e9bc:	4770      	bx	lr
